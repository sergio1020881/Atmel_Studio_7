
atmega324.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ca  00800100  0000262c  000026c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000262c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008e  008001ca  008001ca  0000278a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000278a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000027bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004f8  00000000  00000000  00002800  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006473  00000000  00000000  00002cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000157b  00000000  00000000  0000916b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002f6c  00000000  00000000  0000a6e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a8c  00000000  00000000  0000d654  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cac  00000000  00000000  0000e0e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004609  00000000  00000000  0000ed8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000328  00000000  00000000  00013395  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__ctors_end>
       4:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
       8:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
       c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      10:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      14:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      18:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      1c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      20:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      24:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      28:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      2c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      30:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      34:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      38:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      3c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      40:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      44:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      48:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      4c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      50:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      54:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      58:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      5c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      60:	0c 94 92 00 	jmp	0x124	; 0x124 <__vector_24>
      64:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      68:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      6c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      70:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      74:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      78:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      7c:	0e 0f       	add	r16, r30
      7e:	5b 0f       	add	r21, r27
      80:	73 0f       	add	r23, r19
      82:	a7 0f       	add	r26, r23
      84:	db 0f       	add	r29, r27
      86:	0f 10       	cpse	r0, r15
      88:	9e 10       	cpse	r9, r14
      8a:	b6 10       	cpse	r11, r6
      8c:	25 11       	cpse	r18, r5
      8e:	3d 11       	cpse	r19, r13
      90:	79 11       	cpse	r23, r9
      92:	85 11       	cpse	r24, r5
      94:	91 11       	cpse	r25, r1
      96:	9d 11       	cpse	r25, r13
      98:	a9 11       	cpse	r26, r9
      9a:	cc 11       	cpse	r28, r12
      9c:	cc 11       	cpse	r28, r12
      9e:	cc 11       	cpse	r28, r12
      a0:	cc 11       	cpse	r28, r12
      a2:	cc 11       	cpse	r28, r12
      a4:	cc 11       	cpse	r28, r12
      a6:	cc 11       	cpse	r28, r12
      a8:	cc 11       	cpse	r28, r12
      aa:	cc 11       	cpse	r28, r12
      ac:	cc 11       	cpse	r28, r12
      ae:	cc 11       	cpse	r28, r12
      b0:	cc 11       	cpse	r28, r12
      b2:	cc 11       	cpse	r28, r12
      b4:	cc 11       	cpse	r28, r12
      b6:	cc 11       	cpse	r28, r12
      b8:	cc 11       	cpse	r28, r12
      ba:	cc 11       	cpse	r28, r12
      bc:	cc 11       	cpse	r28, r12
      be:	cc 11       	cpse	r28, r12
      c0:	cc 11       	cpse	r28, r12
      c2:	cc 11       	cpse	r28, r12
      c4:	cc 11       	cpse	r28, r12
      c6:	cc 11       	cpse	r28, r12
      c8:	cc 11       	cpse	r28, r12
      ca:	cc 11       	cpse	r28, r12
      cc:	cc 11       	cpse	r28, r12
      ce:	cc 11       	cpse	r28, r12
      d0:	cc 11       	cpse	r28, r12
      d2:	cc 11       	cpse	r28, r12
      d4:	cc 11       	cpse	r28, r12
      d6:	cc 11       	cpse	r28, r12
      d8:	cc 11       	cpse	r28, r12
      da:	cc 11       	cpse	r28, r12
      dc:	cc 11       	cpse	r28, r12
      de:	cc 11       	cpse	r28, r12
      e0:	cc 11       	cpse	r28, r12
      e2:	b5 11       	cpse	r27, r5
      e4:	c1 11       	cpse	r28, r1

000000e6 <__ctors_end>:
      e6:	11 24       	eor	r1, r1
      e8:	1f be       	out	0x3f, r1	; 63
      ea:	cf ef       	ldi	r28, 0xFF	; 255
      ec:	d8 e0       	ldi	r29, 0x08	; 8
      ee:	de bf       	out	0x3e, r29	; 62
      f0:	cd bf       	out	0x3d, r28	; 61

000000f2 <__do_copy_data>:
      f2:	11 e0       	ldi	r17, 0x01	; 1
      f4:	a0 e0       	ldi	r26, 0x00	; 0
      f6:	b1 e0       	ldi	r27, 0x01	; 1
      f8:	ec e2       	ldi	r30, 0x2C	; 44
      fa:	f6 e2       	ldi	r31, 0x26	; 38
      fc:	02 c0       	rjmp	.+4      	; 0x102 <__do_copy_data+0x10>
      fe:	05 90       	lpm	r0, Z+
     100:	0d 92       	st	X+, r0
     102:	aa 3c       	cpi	r26, 0xCA	; 202
     104:	b1 07       	cpc	r27, r17
     106:	d9 f7       	brne	.-10     	; 0xfe <__do_copy_data+0xc>

00000108 <__do_clear_bss>:
     108:	22 e0       	ldi	r18, 0x02	; 2
     10a:	aa ec       	ldi	r26, 0xCA	; 202
     10c:	b1 e0       	ldi	r27, 0x01	; 1
     10e:	01 c0       	rjmp	.+2      	; 0x112 <.do_clear_bss_start>

00000110 <.do_clear_bss_loop>:
     110:	1d 92       	st	X+, r1

00000112 <.do_clear_bss_start>:
     112:	a8 35       	cpi	r26, 0x58	; 88
     114:	b2 07       	cpc	r27, r18
     116:	e1 f7       	brne	.-8      	; 0x110 <.do_clear_bss_loop>
     118:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <main>
     11c:	0c 94 14 13 	jmp	0x2628	; 0x2628 <_exit>

00000120 <__bad_interrupt>:
     120:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000124 <__vector_24>:
ISR(ANALOG_INTERRUPT)
/*************************************************************************
Function: ANALOG interrupt
Purpose:  Read Analog Input
**************************************************************************/
{
     124:	1f 92       	push	r1
     126:	0f 92       	push	r0
     128:	0f b6       	in	r0, 0x3f	; 63
     12a:	0f 92       	push	r0
     12c:	11 24       	eor	r1, r1
     12e:	2f 93       	push	r18
     130:	3f 93       	push	r19
     132:	8f 93       	push	r24
     134:	9f 93       	push	r25
     136:	af 93       	push	r26
     138:	bf 93       	push	r27
     13a:	ef 93       	push	r30
     13c:	ff 93       	push	r31
	/******/
	adc_tmp=ADCL;
     13e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	90 93 f2 01 	sts	0x01F2, r25	; 0x8001f2 <adc_tmp+0x1>
     148:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <adc_tmp>
	adc_tmp|=(ADCH<<8);
     14c:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     150:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <adc_tmp>
     154:	90 91 f2 01 	lds	r25, 0x01F2	; 0x8001f2 <adc_tmp+0x1>
     158:	92 2b       	or	r25, r18
     15a:	90 93 f2 01 	sts	0x01F2, r25	; 0x8001f2 <adc_tmp+0x1>
     15e:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <adc_tmp>
	if(adc_n_sample < (1<<ADC_NUMBER_SAMPLE)){
     162:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <adc_n_sample>
     166:	84 30       	cpi	r24, 0x04	; 4
     168:	a0 f4       	brcc	.+40     	; 0x192 <__vector_24+0x6e>
		adc_n_sample++;
     16a:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <adc_n_sample>
     16e:	8f 5f       	subi	r24, 0xFF	; 255
     170:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <adc_n_sample>
		adc_sample+=adc_tmp;
     174:	20 91 f1 01 	lds	r18, 0x01F1	; 0x8001f1 <adc_tmp>
     178:	30 91 f2 01 	lds	r19, 0x01F2	; 0x8001f2 <adc_tmp+0x1>
     17c:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <adc_sample>
     180:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <adc_sample+0x1>
     184:	82 0f       	add	r24, r18
     186:	93 1f       	adc	r25, r19
     188:	90 93 ed 01 	sts	0x01ED, r25	; 0x8001ed <adc_sample+0x1>
     18c:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <adc_sample>
     190:	45 c0       	rjmp	.+138    	; 0x21c <__vector_24+0xf8>
	}else{
		ADC_VALUE[ADC_SELECTOR]=adc_sample>>ADC_NUMBER_SAMPLE;
     192:	e0 91 ea 01 	lds	r30, 0x01EA	; 0x8001ea <ADC_SELECTOR>
     196:	f0 91 eb 01 	lds	r31, 0x01EB	; 0x8001eb <ADC_SELECTOR+0x1>
     19a:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <adc_sample>
     19e:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <adc_sample+0x1>
     1a2:	95 95       	asr	r25
     1a4:	87 95       	ror	r24
     1a6:	95 95       	asr	r25
     1a8:	87 95       	ror	r24
     1aa:	ee 0f       	add	r30, r30
     1ac:	ff 1f       	adc	r31, r31
     1ae:	e6 52       	subi	r30, 0x26	; 38
     1b0:	fe 4f       	sbci	r31, 0xFE	; 254
     1b2:	91 83       	std	Z+1, r25	; 0x01
     1b4:	80 83       	st	Z, r24
		adc_n_sample=adc_sample=0;
     1b6:	10 92 ed 01 	sts	0x01ED, r1	; 0x8001ed <adc_sample+0x1>
     1ba:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <adc_sample>
     1be:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <adc_n_sample>
		/******/
		if(ADC_SELECTOR < ADC_N_CHANNEL)
     1c2:	20 91 ea 01 	lds	r18, 0x01EA	; 0x8001ea <ADC_SELECTOR>
     1c6:	30 91 eb 01 	lds	r19, 0x01EB	; 0x8001eb <ADC_SELECTOR+0x1>
     1ca:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ADC_N_CHANNEL>
     1ce:	90 91 ef 01 	lds	r25, 0x01EF	; 0x8001ef <ADC_N_CHANNEL+0x1>
     1d2:	28 17       	cp	r18, r24
     1d4:	39 07       	cpc	r19, r25
     1d6:	54 f4       	brge	.+20     	; 0x1ec <__vector_24+0xc8>
			ADC_SELECTOR++;
     1d8:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <ADC_SELECTOR>
     1dc:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <ADC_SELECTOR+0x1>
     1e0:	01 96       	adiw	r24, 0x01	; 1
     1e2:	90 93 eb 01 	sts	0x01EB, r25	; 0x8001eb <ADC_SELECTOR+0x1>
     1e6:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <ADC_SELECTOR>
     1ea:	04 c0       	rjmp	.+8      	; 0x1f4 <__vector_24+0xd0>
		else
			ADC_SELECTOR=0;
     1ec:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <ADC_SELECTOR+0x1>
     1f0:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <ADC_SELECTOR>
		ADC_SELECT &= ~MUX_MASK;
     1f4:	ac e7       	ldi	r26, 0x7C	; 124
     1f6:	b0 e0       	ldi	r27, 0x00	; 0
     1f8:	8c 91       	ld	r24, X
     1fa:	80 7e       	andi	r24, 0xE0	; 224
     1fc:	8c 93       	st	X, r24
		ADC_SELECT |= (ADC_CHANNEL_GAIN[ADC_SELECTOR] & MUX_MASK);
     1fe:	e0 91 ea 01 	lds	r30, 0x01EA	; 0x8001ea <ADC_SELECTOR>
     202:	f0 91 eb 01 	lds	r31, 0x01EB	; 0x8001eb <ADC_SELECTOR+0x1>
     206:	ee 0f       	add	r30, r30
     208:	ff 1f       	adc	r31, r31
     20a:	e6 53       	subi	r30, 0x36	; 54
     20c:	fe 4f       	sbci	r31, 0xFE	; 254
     20e:	80 81       	ld	r24, Z
     210:	91 81       	ldd	r25, Z+1	; 0x01
     212:	2c 91       	ld	r18, X
     214:	8f 71       	andi	r24, 0x1F	; 31
     216:	99 27       	eor	r25, r25
     218:	82 2b       	or	r24, r18
     21a:	8c 93       	st	X, r24
	}
}
     21c:	ff 91       	pop	r31
     21e:	ef 91       	pop	r30
     220:	bf 91       	pop	r27
     222:	af 91       	pop	r26
     224:	9f 91       	pop	r25
     226:	8f 91       	pop	r24
     228:	3f 91       	pop	r19
     22a:	2f 91       	pop	r18
     22c:	0f 90       	pop	r0
     22e:	0f be       	out	0x3f, r0	; 63
     230:	0f 90       	pop	r0
     232:	1f 90       	pop	r1
     234:	18 95       	reti

00000236 <EEPROMenable>:
** procedure and function header
*/
/*
** procedure and function
*/
EEPROM EEPROMenable(void){
     236:	fc 01       	movw	r30, r24
	eeprom.write_float=eeprom_write_float;
	eeprom.update_float=eeprom_update_float;
	eeprom.read_block=eeprom_read_block;
	eeprom.write_block=eeprom_write_block;
	eeprom.update_block=eeprom_update_block;
	return eeprom;
     238:	8d ea       	ldi	r24, 0xAD	; 173
     23a:	92 e1       	ldi	r25, 0x12	; 18
     23c:	91 83       	std	Z+1, r25	; 0x01
     23e:	80 83       	st	Z, r24
     240:	89 ef       	ldi	r24, 0xF9	; 249
     242:	92 e1       	ldi	r25, 0x12	; 18
     244:	93 83       	std	Z+3, r25	; 0x03
     246:	82 83       	std	Z+2, r24	; 0x02
     248:	8b ec       	ldi	r24, 0xCB	; 203
     24a:	92 e1       	ldi	r25, 0x12	; 18
     24c:	95 83       	std	Z+5, r25	; 0x05
     24e:	84 83       	std	Z+4, r24	; 0x04
     250:	85 eb       	ldi	r24, 0xB5	; 181
     252:	92 e1       	ldi	r25, 0x12	; 18
     254:	97 83       	std	Z+7, r25	; 0x07
     256:	86 83       	std	Z+6, r24	; 0x06
     258:	8f e0       	ldi	r24, 0x0F	; 15
     25a:	93 e1       	ldi	r25, 0x13	; 19
     25c:	91 87       	std	Z+9, r25	; 0x09
     25e:	80 87       	std	Z+8, r24	; 0x08
     260:	89 ee       	ldi	r24, 0xE9	; 233
     262:	92 e1       	ldi	r25, 0x12	; 18
     264:	93 87       	std	Z+11, r25	; 0x0b
     266:	82 87       	std	Z+10, r24	; 0x0a
     268:	87 e0       	ldi	r24, 0x07	; 7
     26a:	93 e1       	ldi	r25, 0x13	; 19
     26c:	97 87       	std	Z+15, r25	; 0x0f
     26e:	86 87       	std	Z+14, r24	; 0x0e
     270:	87 e0       	ldi	r24, 0x07	; 7
     272:	93 e1       	ldi	r25, 0x13	; 19
     274:	95 8b       	std	Z+21, r25	; 0x15
     276:	84 8b       	std	Z+20, r24	; 0x14
     278:	8d ed       	ldi	r24, 0xDD	; 221
     27a:	92 e1       	ldi	r25, 0x12	; 18
     27c:	97 8b       	std	Z+23, r25	; 0x17
     27e:	86 8b       	std	Z+22, r24	; 0x16
     280:	8d e9       	ldi	r24, 0x9D	; 157
     282:	92 e1       	ldi	r25, 0x12	; 18
     284:	91 8f       	std	Z+25, r25	; 0x19
     286:	80 8f       	std	Z+24, r24	; 0x18
     288:	8f ee       	ldi	r24, 0xEF	; 239
     28a:	92 e1       	ldi	r25, 0x12	; 18
     28c:	93 8f       	std	Z+27, r25	; 0x1b
     28e:	82 8f       	std	Z+26, r24	; 0x1a
     290:	8b eb       	ldi	r24, 0xBB	; 187
     292:	92 e1       	ldi	r25, 0x12	; 18
     294:	95 8f       	std	Z+29, r25	; 0x1d
     296:	84 8f       	std	Z+28, r24	; 0x1c
}
     298:	cf 01       	movw	r24, r30
     29a:	08 95       	ret

0000029c <FUNCpinmatch>:
}
//pinmatch
uint8_t FUNCpinmatch(uint8_t match, uint8_t pin, uint8_t HL)
{
	uint8_t result;
	result=match&pin;
     29c:	68 23       	and	r22, r24
	if(HL){
     29e:	44 23       	and	r20, r20
     2a0:	21 f0       	breq	.+8      	; 0x2aa <FUNCpinmatch+0xe>
		if(result==match);
     2a2:	86 17       	cp	r24, r22
     2a4:	21 f0       	breq	.+8      	; 0x2ae <FUNCpinmatch+0x12>
		else
			result=0;
     2a6:	80 e0       	ldi	r24, 0x00	; 0
     2a8:	08 95       	ret
	}else{
		if(result)
     2aa:	61 11       	cpse	r22, r1
			result=0;
     2ac:	80 e0       	ldi	r24, 0x00	; 0
		else
			result=match;
	}
	return result;
}
     2ae:	08 95       	ret

000002b0 <FUNChmerge>:
// hmerge
uint8_t FUNChmerge(uint8_t X, uint8_t Y)
{
	return (X | Y);
}
     2b0:	86 2b       	or	r24, r22
     2b2:	08 95       	ret

000002b4 <FUNClmerge>:
// lmerge
uint8_t FUNClmerge(uint8_t X, uint8_t Y)
{
	return (X & Y);
}
     2b4:	86 23       	and	r24, r22
     2b6:	08 95       	ret

000002b8 <FUNChh>:
uint8_t FUNChh(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi&xf;
	return i;
}
     2b8:	86 23       	and	r24, r22
     2ba:	08 95       	ret

000002bc <FUNCll>:
// ll
uint8_t FUNCll(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi|xf;
	return ~i;
     2bc:	86 2b       	or	r24, r22
}
     2be:	80 95       	com	r24
     2c0:	08 95       	ret

000002c2 <FUNClh>:
// lh
uint8_t FUNClh(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi^xf;
     2c2:	86 27       	eor	r24, r22
	i&=xf;
	return i;
}
     2c4:	86 23       	and	r24, r22
     2c6:	08 95       	ret

000002c8 <FUNChl>:
// hl
uint8_t FUNChl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xf^xi;
     2c8:	60 95       	com	r22
	i&=xi;
	return i;
}
     2ca:	86 23       	and	r24, r22
     2cc:	08 95       	ret

000002ce <FUNCdiff>:
// diff
uint8_t FUNCdiff(uint8_t xi, uint8_t xf)
{
	return xf^xi;
}
     2ce:	86 27       	eor	r24, r22
     2d0:	08 95       	ret

000002d2 <FUNCswap>:
// interchange *px and *py
void FUNCswap(long *px, long *py)
{
     2d2:	cf 92       	push	r12
     2d4:	df 92       	push	r13
     2d6:	ef 92       	push	r14
     2d8:	ff 92       	push	r15
     2da:	0f 93       	push	r16
     2dc:	1f 93       	push	r17
	long temp;
	temp = *px;
     2de:	fc 01       	movw	r30, r24
     2e0:	00 81       	ld	r16, Z
     2e2:	11 81       	ldd	r17, Z+1	; 0x01
     2e4:	22 81       	ldd	r18, Z+2	; 0x02
     2e6:	33 81       	ldd	r19, Z+3	; 0x03
	*px = *py;
     2e8:	fb 01       	movw	r30, r22
     2ea:	c0 80       	ld	r12, Z
     2ec:	d1 80       	ldd	r13, Z+1	; 0x01
     2ee:	e2 80       	ldd	r14, Z+2	; 0x02
     2f0:	f3 80       	ldd	r15, Z+3	; 0x03
     2f2:	fc 01       	movw	r30, r24
     2f4:	c0 82       	st	Z, r12
     2f6:	d1 82       	std	Z+1, r13	; 0x01
     2f8:	e2 82       	std	Z+2, r14	; 0x02
     2fa:	f3 82       	std	Z+3, r15	; 0x03
	*py = temp;
     2fc:	fb 01       	movw	r30, r22
     2fe:	00 83       	st	Z, r16
     300:	11 83       	std	Z+1, r17	; 0x01
     302:	22 83       	std	Z+2, r18	; 0x02
     304:	33 83       	std	Z+3, r19	; 0x03
}
     306:	1f 91       	pop	r17
     308:	0f 91       	pop	r16
     30a:	ff 90       	pop	r15
     30c:	ef 90       	pop	r14
     30e:	df 90       	pop	r13
     310:	cf 90       	pop	r12
     312:	08 95       	ret

00000314 <FUNCcopy>:
// copy: copy 'from' into 'to'; assume to is big enough
void FUNCcopy(char to[], char from[])
{
	int i;
	i = 0;
	while ((to[i] = from[i]) != '\0')
     314:	fb 01       	movw	r30, r22
     316:	20 81       	ld	r18, Z
     318:	fc 01       	movw	r30, r24
     31a:	20 83       	st	Z, r18
     31c:	22 23       	and	r18, r18
     31e:	39 f0       	breq	.+14     	; 0x32e <FUNCcopy+0x1a>
     320:	db 01       	movw	r26, r22
     322:	11 96       	adiw	r26, 0x01	; 1
     324:	31 96       	adiw	r30, 0x01	; 1
     326:	9d 91       	ld	r25, X+
     328:	91 93       	st	Z+, r25
     32a:	91 11       	cpse	r25, r1
     32c:	fc cf       	rjmp	.-8      	; 0x326 <FUNCcopy+0x12>
     32e:	08 95       	ret

00000330 <FUNCsqueeze>:
		++i;
}
// squeeze: delete all c from s
void FUNCsqueeze(char s[], int c)
{
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
     334:	ec 01       	movw	r28, r24
	int i, j;
	for (i = j = 0; s[i] != '\0'; i++)
     336:	98 81       	ld	r25, Y
     338:	99 23       	and	r25, r25
     33a:	99 f0       	breq	.+38     	; 0x362 <FUNCsqueeze+0x32>
     33c:	fe 01       	movw	r30, r28
     33e:	31 96       	adiw	r30, 0x01	; 1
     340:	20 e0       	ldi	r18, 0x00	; 0
     342:	30 e0       	ldi	r19, 0x00	; 0
		if (s[i] != c)
     344:	49 2f       	mov	r20, r25
     346:	50 e0       	ldi	r21, 0x00	; 0
     348:	46 17       	cp	r20, r22
     34a:	57 07       	cpc	r21, r23
     34c:	31 f0       	breq	.+12     	; 0x35a <FUNCsqueeze+0x2a>
			s[j++] = s[i];
     34e:	de 01       	movw	r26, r28
     350:	a2 0f       	add	r26, r18
     352:	b3 1f       	adc	r27, r19
     354:	9c 93       	st	X, r25
     356:	2f 5f       	subi	r18, 0xFF	; 255
     358:	3f 4f       	sbci	r19, 0xFF	; 255
}
// squeeze: delete all c from s
void FUNCsqueeze(char s[], int c)
{
	int i, j;
	for (i = j = 0; s[i] != '\0'; i++)
     35a:	91 91       	ld	r25, Z+
     35c:	91 11       	cpse	r25, r1
     35e:	f2 cf       	rjmp	.-28     	; 0x344 <FUNCsqueeze+0x14>
     360:	02 c0       	rjmp	.+4      	; 0x366 <FUNCsqueeze+0x36>
     362:	20 e0       	ldi	r18, 0x00	; 0
     364:	30 e0       	ldi	r19, 0x00	; 0
		if (s[i] != c)
			s[j++] = s[i];
		s[j] = '\0';
     366:	fe 01       	movw	r30, r28
     368:	e2 0f       	add	r30, r18
     36a:	f3 1f       	adc	r31, r19
     36c:	10 82       	st	Z, r1
}
     36e:	df 91       	pop	r29
     370:	cf 91       	pop	r28
     372:	08 95       	ret

00000374 <FUNCshellsort>:
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
     374:	2f 92       	push	r2
     376:	3f 92       	push	r3
     378:	4f 92       	push	r4
     37a:	5f 92       	push	r5
     37c:	6f 92       	push	r6
     37e:	7f 92       	push	r7
     380:	8f 92       	push	r8
     382:	9f 92       	push	r9
     384:	af 92       	push	r10
     386:	bf 92       	push	r11
     388:	cf 92       	push	r12
     38a:	df 92       	push	r13
     38c:	ef 92       	push	r14
     38e:	ff 92       	push	r15
     390:	0f 93       	push	r16
     392:	1f 93       	push	r17
     394:	cf 93       	push	r28
     396:	df 93       	push	r29
     398:	00 d0       	rcall	.+0      	; 0x39a <FUNCshellsort+0x26>
     39a:	00 d0       	rcall	.+0      	; 0x39c <FUNCshellsort+0x28>
     39c:	cd b7       	in	r28, 0x3d	; 61
     39e:	de b7       	in	r29, 0x3e	; 62
     3a0:	2c 01       	movw	r4, r24
     3a2:	1b 01       	movw	r2, r22
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
     3a4:	4b 01       	movw	r8, r22
     3a6:	77 23       	and	r23, r23
     3a8:	1c f4       	brge	.+6      	; 0x3b0 <FUNCshellsort+0x3c>
     3aa:	2f ef       	ldi	r18, 0xFF	; 255
     3ac:	82 1a       	sub	r8, r18
     3ae:	92 0a       	sbc	r9, r18
     3b0:	95 94       	asr	r9
     3b2:	87 94       	ror	r8
     3b4:	18 14       	cp	r1, r8
     3b6:	19 04       	cpc	r1, r9
     3b8:	0c f4       	brge	.+2      	; 0x3bc <FUNCshellsort+0x48>
     3ba:	51 c0       	rjmp	.+162    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     3bc:	6a c0       	rjmp	.+212    	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
		for (i = gap; i < n; i++)
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
     3be:	96 01       	movw	r18, r12
     3c0:	dd 20       	and	r13, r13
     3c2:	9c f1       	brlt	.+102    	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     3c4:	f5 01       	movw	r30, r10
     3c6:	40 81       	ld	r20, Z
     3c8:	51 81       	ldd	r21, Z+1	; 0x01
     3ca:	f4 01       	movw	r30, r8
     3cc:	60 81       	ld	r22, Z
     3ce:	71 81       	ldd	r23, Z+1	; 0x01
     3d0:	64 17       	cp	r22, r20
     3d2:	75 07       	cpc	r23, r21
     3d4:	54 f5       	brge	.+84     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     3d6:	8c 01       	movw	r16, r24
     3d8:	0a 0d       	add	r16, r10
     3da:	1b 1d       	adc	r17, r11
     3dc:	d4 01       	movw	r26, r8
     3de:	bc 82       	std	Y+4, r11	; 0x04
     3e0:	ab 82       	std	Y+3, r10	; 0x03
     3e2:	ba 82       	std	Y+2, r11	; 0x02
     3e4:	a9 82       	std	Y+1, r10	; 0x01
				temp = v[j];
				v[j] = v[j+gap];
     3e6:	eb 81       	ldd	r30, Y+3	; 0x03
     3e8:	fc 81       	ldd	r31, Y+4	; 0x04
     3ea:	71 83       	std	Z+1, r23	; 0x01
     3ec:	60 83       	st	Z, r22
				v[j+gap] = temp;
     3ee:	11 96       	adiw	r26, 0x01	; 1
     3f0:	5c 93       	st	X, r21
     3f2:	4e 93       	st	-X, r20
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
		for (i = gap; i < n; i++)
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
     3f4:	2e 19       	sub	r18, r14
     3f6:	3f 09       	sbc	r19, r15
     3f8:	c2 f0       	brmi	.+48     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     3fa:	f8 01       	movw	r30, r16
     3fc:	40 81       	ld	r20, Z
     3fe:	51 81       	ldd	r21, Z+1	; 0x01
     400:	e9 81       	ldd	r30, Y+1	; 0x01
     402:	fa 81       	ldd	r31, Y+2	; 0x02
     404:	60 81       	ld	r22, Z
     406:	71 81       	ldd	r23, Z+1	; 0x01
     408:	08 0f       	add	r16, r24
     40a:	19 1f       	adc	r17, r25
     40c:	e8 0f       	add	r30, r24
     40e:	f9 1f       	adc	r31, r25
     410:	fa 83       	std	Y+2, r31	; 0x02
     412:	e9 83       	std	Y+1, r30	; 0x01
     414:	eb 81       	ldd	r30, Y+3	; 0x03
     416:	fc 81       	ldd	r31, Y+4	; 0x04
     418:	e8 0f       	add	r30, r24
     41a:	f9 1f       	adc	r31, r25
     41c:	fc 83       	std	Y+4, r31	; 0x04
     41e:	eb 83       	std	Y+3, r30	; 0x03
     420:	a8 0f       	add	r26, r24
     422:	b9 1f       	adc	r27, r25
     424:	64 17       	cp	r22, r20
     426:	75 07       	cpc	r23, r21
     428:	f4 f2       	brlt	.-68     	; 0x3e6 <FUNCshellsort+0x72>
     42a:	ff ef       	ldi	r31, 0xFF	; 255
     42c:	cf 1a       	sub	r12, r31
     42e:	df 0a       	sbc	r13, r31
     430:	22 e0       	ldi	r18, 0x02	; 2
     432:	a2 0e       	add	r10, r18
     434:	b1 1c       	adc	r11, r1
     436:	e2 e0       	ldi	r30, 0x02	; 2
     438:	8e 0e       	add	r8, r30
     43a:	91 1c       	adc	r9, r1
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
		for (i = gap; i < n; i++)
     43c:	c6 14       	cp	r12, r6
     43e:	d7 04       	cpc	r13, r7
     440:	09 f0       	breq	.+2      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     442:	bd cf       	rjmp	.-134    	; 0x3be <FUNCshellsort+0x4a>
}
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
     444:	47 01       	movw	r8, r14
     446:	ff 20       	and	r15, r15
     448:	1c f4       	brge	.+6      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     44a:	ff ef       	ldi	r31, 0xFF	; 255
     44c:	8f 1a       	sub	r8, r31
     44e:	9f 0a       	sbc	r9, r31
     450:	95 94       	asr	r9
     452:	87 94       	ror	r8
     454:	18 14       	cp	r1, r8
     456:	19 04       	cpc	r1, r9
     458:	e4 f4       	brge	.+56     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     45a:	74 01       	movw	r14, r8
     45c:	01 c0       	rjmp	.+2      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     45e:	74 01       	movw	r14, r8
		for (i = gap; i < n; i++)
     460:	82 14       	cp	r8, r2
     462:	93 04       	cpc	r9, r3
     464:	7c f7       	brge	.-34     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     466:	64 01       	movw	r12, r8
     468:	ce 18       	sub	r12, r14
     46a:	df 08       	sbc	r13, r15
     46c:	56 01       	movw	r10, r12
     46e:	aa 0c       	add	r10, r10
     470:	bb 1c       	adc	r11, r11
     472:	a4 0c       	add	r10, r4
     474:	b5 1c       	adc	r11, r5
     476:	88 0c       	add	r8, r8
     478:	99 1c       	adc	r9, r9
     47a:	84 0c       	add	r8, r4
     47c:	95 1c       	adc	r9, r5
     47e:	31 01       	movw	r6, r2
     480:	6e 18       	sub	r6, r14
     482:	7f 08       	sbc	r7, r15
     484:	c7 01       	movw	r24, r14
     486:	88 0f       	add	r24, r24
     488:	99 1f       	adc	r25, r25
     48a:	91 95       	neg	r25
     48c:	81 95       	neg	r24
     48e:	91 09       	sbc	r25, r1
     490:	96 cf       	rjmp	.-212    	; 0x3be <FUNCshellsort+0x4a>
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
				temp = v[j];
				v[j] = v[j+gap];
				v[j+gap] = temp;
			}
}
     492:	0f 90       	pop	r0
     494:	0f 90       	pop	r0
     496:	0f 90       	pop	r0
     498:	0f 90       	pop	r0
     49a:	df 91       	pop	r29
     49c:	cf 91       	pop	r28
     49e:	1f 91       	pop	r17
     4a0:	0f 91       	pop	r16
     4a2:	ff 90       	pop	r15
     4a4:	ef 90       	pop	r14
     4a6:	df 90       	pop	r13
     4a8:	cf 90       	pop	r12
     4aa:	bf 90       	pop	r11
     4ac:	af 90       	pop	r10
     4ae:	9f 90       	pop	r9
     4b0:	8f 90       	pop	r8
     4b2:	7f 90       	pop	r7
     4b4:	6f 90       	pop	r6
     4b6:	5f 90       	pop	r5
     4b8:	4f 90       	pop	r4
     4ba:	3f 90       	pop	r3
     4bc:	2f 90       	pop	r2
     4be:	08 95       	ret

000004c0 <FUNCpmax>:
	if(a1 > a2){
		biggest = a1;
	}else{
		biggest = a2;
	}
	return biggest;
     4c0:	86 17       	cp	r24, r22
     4c2:	97 07       	cpc	r25, r23
     4c4:	0c f4       	brge	.+2      	; 0x4c8 <FUNCpmax+0x8>
     4c6:	cb 01       	movw	r24, r22
}
     4c8:	08 95       	ret

000004ca <FUNCgcd>:
// common divisor
int FUNCgcd (int u, int v)
{
     4ca:	9b 01       	movw	r18, r22
	int temp;
	while ( v != 0 ) {
     4cc:	67 2b       	or	r22, r23
     4ce:	11 f4       	brne	.+4      	; 0x4d4 <FUNCgcd+0xa>
     4d0:	08 95       	ret
		temp = u % v;
		u = v;
		v = temp;
     4d2:	9a 01       	movw	r18, r20
// common divisor
int FUNCgcd (int u, int v)
{
	int temp;
	while ( v != 0 ) {
		temp = u % v;
     4d4:	b9 01       	movw	r22, r18
     4d6:	0e 94 14 12 	call	0x2428	; 0x2428 <__divmodhi4>
     4da:	ac 01       	movw	r20, r24
     4dc:	82 2f       	mov	r24, r18
     4de:	93 2f       	mov	r25, r19
}
// common divisor
int FUNCgcd (int u, int v)
{
	int temp;
	while ( v != 0 ) {
     4e0:	41 15       	cp	r20, r1
     4e2:	51 05       	cpc	r21, r1
     4e4:	b1 f7       	brne	.-20     	; 0x4d2 <FUNCgcd+0x8>
		temp = u % v;
		u = v;
		v = temp;
	}
	return u;
}
     4e6:	08 95       	ret

000004e8 <FUNCstrToInt>:
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
     4e8:	fc 01       	movw	r30, r24
	int i, intValue, result = 0;
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
     4ea:	90 81       	ld	r25, Z
     4ec:	80 ed       	ldi	r24, 0xD0	; 208
     4ee:	89 0f       	add	r24, r25
     4f0:	8a 30       	cpi	r24, 0x0A	; 10
     4f2:	d0 f4       	brcc	.+52     	; 0x528 <FUNCstrToInt+0x40>
     4f4:	31 96       	adiw	r30, 0x01	; 1
     4f6:	20 e0       	ldi	r18, 0x00	; 0
     4f8:	30 e0       	ldi	r19, 0x00	; 0
		intValue = string[i] - '0';
		result = result * 10 + intValue;
     4fa:	a9 01       	movw	r20, r18
     4fc:	44 0f       	add	r20, r20
     4fe:	55 1f       	adc	r21, r21
     500:	22 0f       	add	r18, r18
     502:	33 1f       	adc	r19, r19
     504:	22 0f       	add	r18, r18
     506:	33 1f       	adc	r19, r19
     508:	22 0f       	add	r18, r18
     50a:	33 1f       	adc	r19, r19
     50c:	42 0f       	add	r20, r18
     50e:	53 1f       	adc	r21, r19
     510:	29 2f       	mov	r18, r25
     512:	30 e0       	ldi	r19, 0x00	; 0
     514:	20 53       	subi	r18, 0x30	; 48
     516:	31 09       	sbc	r19, r1
     518:	24 0f       	add	r18, r20
     51a:	35 1f       	adc	r19, r21
}
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
	int i, intValue, result = 0;
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
     51c:	91 91       	ld	r25, Z+
     51e:	80 ed       	ldi	r24, 0xD0	; 208
     520:	89 0f       	add	r24, r25
     522:	8a 30       	cpi	r24, 0x0A	; 10
     524:	50 f3       	brcs	.-44     	; 0x4fa <FUNCstrToInt+0x12>
     526:	02 c0       	rjmp	.+4      	; 0x52c <FUNCstrToInt+0x44>
	return u;
}
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
	int i, intValue, result = 0;
     528:	20 e0       	ldi	r18, 0x00	; 0
     52a:	30 e0       	ldi	r19, 0x00	; 0
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
		intValue = string[i] - '0';
		result = result * 10 + intValue;
	}
	return result;
}
     52c:	c9 01       	movw	r24, r18
     52e:	08 95       	ret

00000530 <FUNCfilter>:
uint8_t FUNCfilter(uint8_t mask, uint8_t data)
{
	uint8_t Z;
	Z=mask & data;
	return Z;
}
     530:	86 23       	and	r24, r22
     532:	08 95       	ret

00000534 <FUNCticks>:
// ticks
unsigned int FUNCticks(unsigned int num)
{
	unsigned int count;
	for(count=0;count<num;count++)
     534:	00 97       	sbiw	r24, 0x00	; 0
     536:	39 f0       	breq	.+14     	; 0x546 <FUNCticks+0x12>
     538:	20 e0       	ldi	r18, 0x00	; 0
     53a:	30 e0       	ldi	r19, 0x00	; 0
     53c:	2f 5f       	subi	r18, 0xFF	; 255
     53e:	3f 4f       	sbci	r19, 0xFF	; 255
     540:	82 17       	cp	r24, r18
     542:	93 07       	cpc	r25, r19
     544:	d9 f7       	brne	.-10     	; 0x53c <FUNCticks+0x8>
		;
	return count;
}
     546:	08 95       	ret

00000548 <FUNCtwocomptoint8bit>:
// Two's Complement function
int FUNCtwocomptoint8bit(int twoscomp){
  
  //Let's see if the byte is negative
  if (twoscomp & 0B10000000){
     548:	87 ff       	sbrs	r24, 7
     54a:	08 c0       	rjmp	.+16     	; 0x55c <FUNCtwocomptoint8bit+0x14>
    //Invert
    twoscomp = ~twoscomp + 1;
     54c:	91 95       	neg	r25
     54e:	81 95       	neg	r24
     550:	91 09       	sbc	r25, r1
	twoscomp = (twoscomp & 0B11111111);
    //Cast as int and multiply by negative one
    int value = (int)(twoscomp)*(-1);
     552:	99 27       	eor	r25, r25
     554:	91 95       	neg	r25
     556:	81 95       	neg	r24
     558:	91 09       	sbc	r25, r1
    return value;
     55a:	08 95       	ret
    //Byte is non-negative, therefore convert to decimal and display
    //Make sure we are never over 1279
    twoscomp = (twoscomp & 0B01111111);
    //Cast as int and return
    int value = (int)(twoscomp);
    return value;
     55c:	8f 77       	andi	r24, 0x7F	; 127
     55e:	99 27       	eor	r25, r25
  }
}
     560:	08 95       	ret

00000562 <FUNCtwocomptoint10bit>:
// Two's Complement function, shifts 10 bit binary to signed integers (-512 to 512)
int FUNCtwocomptoint10bit(int twoscomp){
	
  //Let's see if the byte is negative
  if (twoscomp & 0x200){
     562:	91 ff       	sbrs	r25, 1
     564:	08 c0       	rjmp	.+16     	; 0x576 <FUNCtwocomptoint10bit+0x14>
    //Invert
    twoscomp = ~twoscomp + 1;
     566:	91 95       	neg	r25
     568:	81 95       	neg	r24
     56a:	91 09       	sbc	r25, r1
    twoscomp = (twoscomp & 0x3FF);
    //Cast as int and multiply by negative one
    int value = (int)(twoscomp)*(-1);
     56c:	93 70       	andi	r25, 0x03	; 3
     56e:	91 95       	neg	r25
     570:	81 95       	neg	r24
     572:	91 09       	sbc	r25, r1
    return value;
     574:	08 95       	ret
    //Byte is non-negative, therefore convert to decimal and display
    twoscomp = (twoscomp & 0x1FF);
    //Cast as int and return
    //Serial.println(twoscomp);
    int value = (int)(twoscomp);
    return value;
     576:	91 70       	andi	r25, 0x01	; 1
  }
}
     578:	08 95       	ret

0000057a <FUNCtwocomptointnbit>:
// Two's Complement function, nbits
int FUNCtwocomptointnbit(int twoscomp, uint8_t nbits){
  unsigned int signmask;
  unsigned int mask;
  signmask = (1<<(nbits-1));
     57a:	61 50       	subi	r22, 0x01	; 1
     57c:	21 e0       	ldi	r18, 0x01	; 1
     57e:	30 e0       	ldi	r19, 0x00	; 0
     580:	02 c0       	rjmp	.+4      	; 0x586 <FUNCtwocomptointnbit+0xc>
     582:	22 0f       	add	r18, r18
     584:	33 1f       	adc	r19, r19
     586:	6a 95       	dec	r22
     588:	e2 f7       	brpl	.-8      	; 0x582 <FUNCtwocomptointnbit+0x8>
  mask=signmask-1;
     58a:	a9 01       	movw	r20, r18
     58c:	41 50       	subi	r20, 0x01	; 1
     58e:	51 09       	sbc	r21, r1
  //Let's see if the number is negative
  if (twoscomp & signmask){
     590:	b9 01       	movw	r22, r18
     592:	68 23       	and	r22, r24
     594:	79 23       	and	r23, r25
     596:	67 2b       	or	r22, r23
     598:	29 f0       	breq	.+10     	; 0x5a4 <FUNCtwocomptointnbit+0x2a>
	twoscomp &= mask;
    twoscomp -= signmask;
     59a:	84 23       	and	r24, r20
     59c:	95 23       	and	r25, r21
     59e:	82 1b       	sub	r24, r18
     5a0:	93 0b       	sbc	r25, r19
     5a2:	08 95       	ret
  }else{
	  twoscomp &= mask;
     5a4:	84 23       	and	r24, r20
     5a6:	95 23       	and	r25, r21
  }
  return twoscomp;
}
     5a8:	08 95       	ret

000005aa <FUNCdec2bcd>:
// Convert Decimal to Binary Coded Decimal (BCD)
char FUNCdec2bcd(char num)
{
	return ((num/10 * 16) + (num % 10));
     5aa:	9d ec       	ldi	r25, 0xCD	; 205
     5ac:	89 9f       	mul	r24, r25
     5ae:	91 2d       	mov	r25, r1
     5b0:	11 24       	eor	r1, r1
     5b2:	96 95       	lsr	r25
     5b4:	96 95       	lsr	r25
     5b6:	96 95       	lsr	r25
     5b8:	39 2f       	mov	r19, r25
     5ba:	33 0f       	add	r19, r19
     5bc:	23 2f       	mov	r18, r19
     5be:	22 0f       	add	r18, r18
     5c0:	22 0f       	add	r18, r18
     5c2:	23 0f       	add	r18, r19
     5c4:	82 1b       	sub	r24, r18
}
     5c6:	20 e1       	ldi	r18, 0x10	; 16
     5c8:	92 9f       	mul	r25, r18
     5ca:	80 0d       	add	r24, r0
     5cc:	11 24       	eor	r1, r1
     5ce:	08 95       	ret

000005d0 <FUNCbcd2dec>:
// Convert Binary Coded Decimal (BCD) to Decimal
char FUNCbcd2dec(char num)
{
	return ((num/16 * 10) + (num % 16));
     5d0:	98 2f       	mov	r25, r24
     5d2:	92 95       	swap	r25
     5d4:	9f 70       	andi	r25, 0x0F	; 15
     5d6:	99 0f       	add	r25, r25
     5d8:	29 2f       	mov	r18, r25
     5da:	22 0f       	add	r18, r18
     5dc:	22 0f       	add	r18, r18
     5de:	92 0f       	add	r25, r18
     5e0:	8f 70       	andi	r24, 0x0F	; 15
}
     5e2:	89 0f       	add	r24, r25
     5e4:	08 95       	ret

000005e6 <FUNCresizestr>:
char* FUNCresizestr(char *string, int size)
{
     5e6:	fc 01       	movw	r30, r24
	int i;
	FUNCstr[size]='\0';
     5e8:	db 01       	movw	r26, r22
     5ea:	ad 50       	subi	r26, 0x0D	; 13
     5ec:	be 4f       	sbci	r27, 0xFE	; 254
     5ee:	1c 92       	st	X, r1
	for(i=0;i<size;i++){
     5f0:	16 16       	cp	r1, r22
     5f2:	17 06       	cpc	r1, r23
     5f4:	14 f5       	brge	.+68     	; 0x63a <FUNCresizestr+0x54>
		if(*(string+i)=='\0'){
     5f6:	90 81       	ld	r25, Z
     5f8:	91 11       	cpse	r25, r1
     5fa:	0c c0       	rjmp	.+24     	; 0x614 <FUNCresizestr+0x2e>
     5fc:	17 c0       	rjmp	.+46     	; 0x62c <FUNCresizestr+0x46>
     5fe:	91 91       	ld	r25, Z+
     600:	91 11       	cpse	r25, r1
     602:	0d c0       	rjmp	.+26     	; 0x61e <FUNCresizestr+0x38>
     604:	15 c0       	rjmp	.+42     	; 0x630 <FUNCresizestr+0x4a>
			for(;i<size;i++){
				FUNCstr[i]=' ';
     606:	81 93       	st	Z+, r24
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
		if(*(string+i)=='\0'){
			for(;i<size;i++){
     608:	2f 5f       	subi	r18, 0xFF	; 255
     60a:	3f 4f       	sbci	r19, 0xFF	; 255
     60c:	26 17       	cp	r18, r22
     60e:	37 07       	cpc	r19, r23
     610:	d4 f3       	brlt	.-12     	; 0x606 <FUNCresizestr+0x20>
     612:	13 c0       	rjmp	.+38     	; 0x63a <FUNCresizestr+0x54>
     614:	a3 ef       	ldi	r26, 0xF3	; 243
     616:	b1 e0       	ldi	r27, 0x01	; 1
     618:	31 96       	adiw	r30, 0x01	; 1
char* FUNCresizestr(char *string, int size)
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
		if(*(string+i)=='\0'){
     61a:	20 e0       	ldi	r18, 0x00	; 0
     61c:	30 e0       	ldi	r19, 0x00	; 0
			for(;i<size;i++){
				FUNCstr[i]=' ';
			}
			break;
		}
		FUNCstr[i]=*(string+i);
     61e:	9d 93       	st	X+, r25
}
char* FUNCresizestr(char *string, int size)
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
     620:	2f 5f       	subi	r18, 0xFF	; 255
     622:	3f 4f       	sbci	r19, 0xFF	; 255
     624:	62 17       	cp	r22, r18
     626:	73 07       	cpc	r23, r19
     628:	51 f7       	brne	.-44     	; 0x5fe <FUNCresizestr+0x18>
     62a:	07 c0       	rjmp	.+14     	; 0x63a <FUNCresizestr+0x54>
     62c:	20 e0       	ldi	r18, 0x00	; 0
     62e:	30 e0       	ldi	r19, 0x00	; 0
     630:	f9 01       	movw	r30, r18
     632:	ed 50       	subi	r30, 0x0D	; 13
     634:	fe 4f       	sbci	r31, 0xFE	; 254
		if(*(string+i)=='\0'){
			for(;i<size;i++){
				FUNCstr[i]=' ';
     636:	80 e2       	ldi	r24, 0x20	; 32
     638:	e6 cf       	rjmp	.-52     	; 0x606 <FUNCresizestr+0x20>
			break;
		}
		FUNCstr[i]=*(string+i);
	}
	return FUNCstr;
}
     63a:	83 ef       	ldi	r24, 0xF3	; 243
     63c:	91 e0       	ldi	r25, 0x01	; 1
     63e:	08 95       	ret

00000640 <FUNCtrimmer>:
long FUNCtrimmer(long x, long in_min, long in_max, long out_min, long out_max)
/*
	same as arduino map function.
*/
{
     640:	4f 92       	push	r4
     642:	5f 92       	push	r5
     644:	6f 92       	push	r6
     646:	7f 92       	push	r7
     648:	af 92       	push	r10
     64a:	bf 92       	push	r11
     64c:	cf 92       	push	r12
     64e:	df 92       	push	r13
     650:	ef 92       	push	r14
     652:	ff 92       	push	r15
     654:	0f 93       	push	r16
     656:	1f 93       	push	r17
     658:	cf 93       	push	r28
     65a:	df 93       	push	r29
     65c:	cd b7       	in	r28, 0x3d	; 61
     65e:	de b7       	in	r29, 0x3e	; 62
     660:	29 01       	movw	r4, r18
     662:	3a 01       	movw	r6, r20
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     664:	9b 01       	movw	r18, r22
     666:	ac 01       	movw	r20, r24
     668:	24 19       	sub	r18, r4
     66a:	35 09       	sbc	r19, r5
     66c:	46 09       	sbc	r20, r6
     66e:	57 09       	sbc	r21, r7
     670:	89 89       	ldd	r24, Y+17	; 0x11
     672:	9a 89       	ldd	r25, Y+18	; 0x12
     674:	ab 89       	ldd	r26, Y+19	; 0x13
     676:	bc 89       	ldd	r27, Y+20	; 0x14
     678:	bc 01       	movw	r22, r24
     67a:	cd 01       	movw	r24, r26
     67c:	6a 19       	sub	r22, r10
     67e:	7b 09       	sbc	r23, r11
     680:	8c 09       	sbc	r24, r12
     682:	9d 09       	sbc	r25, r13
     684:	0e 94 04 12 	call	0x2408	; 0x2408 <__mulsi3>
     688:	a8 01       	movw	r20, r16
     68a:	97 01       	movw	r18, r14
     68c:	24 19       	sub	r18, r4
     68e:	35 09       	sbc	r19, r5
     690:	46 09       	sbc	r20, r6
     692:	57 09       	sbc	r21, r7
     694:	0e 94 28 12 	call	0x2450	; 0x2450 <__divmodsi4>
     698:	ca 01       	movw	r24, r20
     69a:	b9 01       	movw	r22, r18
     69c:	6a 0d       	add	r22, r10
     69e:	7b 1d       	adc	r23, r11
     6a0:	8c 1d       	adc	r24, r12
     6a2:	9d 1d       	adc	r25, r13
}
     6a4:	df 91       	pop	r29
     6a6:	cf 91       	pop	r28
     6a8:	1f 91       	pop	r17
     6aa:	0f 91       	pop	r16
     6ac:	ff 90       	pop	r15
     6ae:	ef 90       	pop	r14
     6b0:	df 90       	pop	r13
     6b2:	cf 90       	pop	r12
     6b4:	bf 90       	pop	r11
     6b6:	af 90       	pop	r10
     6b8:	7f 90       	pop	r7
     6ba:	6f 90       	pop	r6
     6bc:	5f 90       	pop	r5
     6be:	4f 90       	pop	r4
     6c0:	08 95       	ret

000006c2 <Power>:
// power: raise base to n-th power; n >= 0
unsigned int Power(uint8_t base, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
     6c2:	70 e0       	ldi	r23, 0x00	; 0
     6c4:	61 15       	cp	r22, r1
     6c6:	71 05       	cpc	r23, r1
     6c8:	99 f0       	breq	.+38     	; 0x6f0 <Power+0x2e>
     6ca:	41 e0       	ldi	r20, 0x01	; 1
     6cc:	50 e0       	ldi	r21, 0x00	; 0
     6ce:	21 e0       	ldi	r18, 0x01	; 1
     6d0:	30 e0       	ldi	r19, 0x00	; 0
        p = p * base;
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	fa 01       	movw	r30, r20
     6d6:	e8 9f       	mul	r30, r24
     6d8:	a0 01       	movw	r20, r0
     6da:	e9 9f       	mul	r30, r25
     6dc:	50 0d       	add	r21, r0
     6de:	f8 9f       	mul	r31, r24
     6e0:	50 0d       	add	r21, r0
     6e2:	11 24       	eor	r1, r1
// power: raise base to n-th power; n >= 0
unsigned int Power(uint8_t base, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
     6e4:	2f 5f       	subi	r18, 0xFF	; 255
     6e6:	3f 4f       	sbci	r19, 0xFF	; 255
     6e8:	62 17       	cp	r22, r18
     6ea:	73 07       	cpc	r23, r19
     6ec:	98 f7       	brcc	.-26     	; 0x6d4 <Power+0x12>
     6ee:	02 c0       	rjmp	.+4      	; 0x6f4 <Power+0x32>
}
// power: raise base to n-th power; n >= 0
unsigned int Power(uint8_t base, uint8_t n)
{
    unsigned int i, p;
    p = 1;
     6f0:	41 e0       	ldi	r20, 0x01	; 1
     6f2:	50 e0       	ldi	r21, 0x00	; 0
    for (i = 1; i <= n; ++i)
        p = p * base;
    return p;
}
     6f4:	ca 01       	movw	r24, r20
     6f6:	08 95       	ret

000006f8 <StringLength>:
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
	while ( string[count] != '\0' )
     6f8:	fc 01       	movw	r30, r24
     6fa:	20 81       	ld	r18, Z
     6fc:	22 23       	and	r18, r18
     6fe:	41 f0       	breq	.+16     	; 0x710 <StringLength+0x18>
     700:	31 96       	adiw	r30, 0x01	; 1
     702:	80 e0       	ldi	r24, 0x00	; 0
     704:	90 e0       	ldi	r25, 0x00	; 0
		++count;
     706:	01 96       	adiw	r24, 0x01	; 1
}
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
	while ( string[count] != '\0' )
     708:	21 91       	ld	r18, Z+
     70a:	21 11       	cpse	r18, r1
     70c:	fc cf       	rjmp	.-8      	; 0x706 <StringLength+0xe>
     70e:	08 95       	ret
    return p;
}
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	90 e0       	ldi	r25, 0x00	; 0
	while ( string[count] != '\0' )
		++count;
	return count;
}
     714:	08 95       	ret

00000716 <FUNCtrim>:
	s[i] = '\0';
	Reverse(s);
}
// trim: remove trailing blanks, tabs, newlines
int FUNCtrim(char s[])
{
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
     71a:	ec 01       	movw	r28, r24
	int n;
	for (n = StringLength(s)-1; n >= 0; n--)
     71c:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <StringLength>
     720:	9c 01       	movw	r18, r24
     722:	21 50       	subi	r18, 0x01	; 1
     724:	31 09       	sbc	r19, r1
     726:	62 f0       	brmi	.+24     	; 0x740 <FUNCtrim+0x2a>
     728:	fe 01       	movw	r30, r28
     72a:	e8 0f       	add	r30, r24
     72c:	f9 1f       	adc	r31, r25
		if (s[n] != ' ' && s[n] != '\t' && s[n] != '\n')
     72e:	92 91       	ld	r25, -Z
     730:	90 32       	cpi	r25, 0x20	; 32
     732:	19 f0       	breq	.+6      	; 0x73a <FUNCtrim+0x24>
     734:	99 50       	subi	r25, 0x09	; 9
     736:	92 30       	cpi	r25, 0x02	; 2
     738:	18 f4       	brcc	.+6      	; 0x740 <FUNCtrim+0x2a>
}
// trim: remove trailing blanks, tabs, newlines
int FUNCtrim(char s[])
{
	int n;
	for (n = StringLength(s)-1; n >= 0; n--)
     73a:	21 50       	subi	r18, 0x01	; 1
     73c:	31 09       	sbc	r19, r1
     73e:	b8 f7       	brcc	.-18     	; 0x72e <FUNCtrim+0x18>
		if (s[n] != ' ' && s[n] != '\t' && s[n] != '\n')
			break;
	s[n+1] = '\0';
     740:	c2 0f       	add	r28, r18
     742:	d3 1f       	adc	r29, r19
     744:	19 82       	std	Y+1, r1	; 0x01
	return n;
}
     746:	c9 01       	movw	r24, r18
     748:	df 91       	pop	r29
     74a:	cf 91       	pop	r28
     74c:	08 95       	ret

0000074e <Reverse>:
		++count;
	return count;
}
// reverse: reverse string s in place
void Reverse(char s[])
{
     74e:	cf 93       	push	r28
     750:	df 93       	push	r29
     752:	ec 01       	movw	r28, r24
	int c, i, j;
	for (i = 0, j = StringLength(s)-1; i < j; i++, j--){
     754:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <StringLength>
     758:	9c 01       	movw	r18, r24
     75a:	21 50       	subi	r18, 0x01	; 1
     75c:	31 09       	sbc	r19, r1
     75e:	12 16       	cp	r1, r18
     760:	13 06       	cpc	r1, r19
     762:	84 f4       	brge	.+32     	; 0x784 <Reverse+0x36>
     764:	de 01       	movw	r26, r28
     766:	a8 0f       	add	r26, r24
     768:	b9 1f       	adc	r27, r25
     76a:	fe 01       	movw	r30, r28
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	90 e0       	ldi	r25, 0x00	; 0
		c = s[i];
     770:	40 81       	ld	r20, Z
		s[i] = s[j];
     772:	5e 91       	ld	r21, -X
     774:	51 93       	st	Z+, r21
		s[j] = c;
     776:	4c 93       	st	X, r20
}
// reverse: reverse string s in place
void Reverse(char s[])
{
	int c, i, j;
	for (i = 0, j = StringLength(s)-1; i < j; i++, j--){
     778:	01 96       	adiw	r24, 0x01	; 1
     77a:	21 50       	subi	r18, 0x01	; 1
     77c:	31 09       	sbc	r19, r1
     77e:	82 17       	cp	r24, r18
     780:	93 07       	cpc	r25, r19
     782:	b4 f3       	brlt	.-20     	; 0x770 <Reverse+0x22>
		c = s[i];
		s[i] = s[j];
		s[j] = c;
	}
}
     784:	df 91       	pop	r29
     786:	cf 91       	pop	r28
     788:	08 95       	ret

0000078a <FUNCi32toa>:
				v[j+gap] = temp;
			}
}
// i32toa: convert n to characters in s
void FUNCi32toa(int32_t n, char s[])
{
     78a:	6f 92       	push	r6
     78c:	7f 92       	push	r7
     78e:	8f 92       	push	r8
     790:	9f 92       	push	r9
     792:	af 92       	push	r10
     794:	bf 92       	push	r11
     796:	cf 92       	push	r12
     798:	df 92       	push	r13
     79a:	ef 92       	push	r14
     79c:	ff 92       	push	r15
     79e:	0f 93       	push	r16
     7a0:	1f 93       	push	r17
     7a2:	cf 93       	push	r28
     7a4:	df 93       	push	r29
     7a6:	6b 01       	movw	r12, r22
     7a8:	7c 01       	movw	r14, r24
     7aa:	ea 01       	movw	r28, r20
     7ac:	dc 01       	movw	r26, r24
     7ae:	cb 01       	movw	r24, r22
     7b0:	ff 20       	and	r15, r15
     7b2:	3c f4       	brge	.+14     	; 0x7c2 <FUNCi32toa+0x38>
     7b4:	88 27       	eor	r24, r24
     7b6:	99 27       	eor	r25, r25
     7b8:	dc 01       	movw	r26, r24
     7ba:	8c 19       	sub	r24, r12
     7bc:	9d 09       	sbc	r25, r13
     7be:	ae 09       	sbc	r26, r14
     7c0:	bf 09       	sbc	r27, r15
     7c2:	bc 01       	movw	r22, r24
     7c4:	cd 01       	movw	r24, r26
     7c6:	71 2c       	mov	r7, r1
	int32_t sign;
	if ((sign = n) < 0) // record sign
	n = -n; // make n positive
	i = 0;
	do { // generate digits in reverse order
		s[i++] = n % 10 + '0'; // get next digit
     7c8:	0f 2e       	mov	r0, r31
     7ca:	fa e0       	ldi	r31, 0x0A	; 10
     7cc:	8f 2e       	mov	r8, r31
     7ce:	91 2c       	mov	r9, r1
     7d0:	a1 2c       	mov	r10, r1
     7d2:	b1 2c       	mov	r11, r1
     7d4:	f0 2d       	mov	r31, r0
     7d6:	01 c0       	rjmp	.+2      	; 0x7da <FUNCi32toa+0x50>
     7d8:	76 2c       	mov	r7, r6
     7da:	66 24       	eor	r6, r6
     7dc:	63 94       	inc	r6
     7de:	67 0c       	add	r6, r7
     7e0:	8e 01       	movw	r16, r28
     7e2:	07 0d       	add	r16, r7
     7e4:	11 1d       	adc	r17, r1
     7e6:	a5 01       	movw	r20, r10
     7e8:	94 01       	movw	r18, r8
     7ea:	0e 94 28 12 	call	0x2450	; 0x2450 <__divmodsi4>
     7ee:	60 5d       	subi	r22, 0xD0	; 208
     7f0:	f8 01       	movw	r30, r16
     7f2:	60 83       	st	Z, r22
	}while ((n /= 10) > 0); // delete it
     7f4:	62 2f       	mov	r22, r18
     7f6:	73 2f       	mov	r23, r19
     7f8:	84 2f       	mov	r24, r20
     7fa:	95 2f       	mov	r25, r21
     7fc:	16 16       	cp	r1, r22
     7fe:	17 06       	cpc	r1, r23
     800:	18 06       	cpc	r1, r24
     802:	19 06       	cpc	r1, r25
     804:	4c f3       	brlt	.-46     	; 0x7d8 <FUNCi32toa+0x4e>
	if (sign < 0)
     806:	ff 20       	and	r15, r15
     808:	4c f4       	brge	.+18     	; 0x81c <FUNCi32toa+0x92>
	s[i++] = '-';
     80a:	fe 01       	movw	r30, r28
     80c:	e6 0d       	add	r30, r6
     80e:	f1 1d       	adc	r31, r1
     810:	8d e2       	ldi	r24, 0x2D	; 45
     812:	80 83       	st	Z, r24
     814:	68 94       	set
     816:	66 24       	eor	r6, r6
     818:	61 f8       	bld	r6, 1
     81a:	67 0c       	add	r6, r7
	s[i] = '\0';
     81c:	fe 01       	movw	r30, r28
     81e:	e6 0d       	add	r30, r6
     820:	f1 1d       	adc	r31, r1
     822:	10 82       	st	Z, r1
	Reverse(s);
     824:	ce 01       	movw	r24, r28
     826:	0e 94 a7 03 	call	0x74e	; 0x74e <Reverse>
}
     82a:	df 91       	pop	r29
     82c:	cf 91       	pop	r28
     82e:	1f 91       	pop	r17
     830:	0f 91       	pop	r16
     832:	ff 90       	pop	r15
     834:	ef 90       	pop	r14
     836:	df 90       	pop	r13
     838:	cf 90       	pop	r12
     83a:	bf 90       	pop	r11
     83c:	af 90       	pop	r10
     83e:	9f 90       	pop	r9
     840:	8f 90       	pop	r8
     842:	7f 90       	pop	r7
     844:	6f 90       	pop	r6
     846:	08 95       	ret

00000848 <FUNCi16toa>:
// i16toa: convert n to characters in s
void FUNCi16toa(int16_t n, char s[])
{
     848:	ef 92       	push	r14
     84a:	ff 92       	push	r15
     84c:	0f 93       	push	r16
     84e:	1f 93       	push	r17
     850:	cf 93       	push	r28
     852:	df 93       	push	r29
     854:	8c 01       	movw	r16, r24
     856:	eb 01       	movw	r28, r22
     858:	99 23       	and	r25, r25
     85a:	24 f4       	brge	.+8      	; 0x864 <FUNCi16toa+0x1c>
     85c:	88 27       	eor	r24, r24
     85e:	99 27       	eor	r25, r25
     860:	80 1b       	sub	r24, r16
     862:	91 0b       	sbc	r25, r17
     864:	20 e0       	ldi	r18, 0x00	; 0
	int16_t sign;
	if ((sign = n) < 0) // record sign
		n = -n; // make n positive
	i = 0;
	do { // generate digits in reverse order
		s[i++] = n % 10 + '0'; // get next digit
     866:	0f 2e       	mov	r0, r31
     868:	fa e0       	ldi	r31, 0x0A	; 10
     86a:	ef 2e       	mov	r14, r31
     86c:	f1 2c       	mov	r15, r1
     86e:	f0 2d       	mov	r31, r0
     870:	01 c0       	rjmp	.+2      	; 0x874 <FUNCi16toa+0x2c>
     872:	23 2f       	mov	r18, r19
     874:	31 e0       	ldi	r19, 0x01	; 1
     876:	32 0f       	add	r19, r18
     878:	fe 01       	movw	r30, r28
     87a:	e2 0f       	add	r30, r18
     87c:	f1 1d       	adc	r31, r1
     87e:	b7 01       	movw	r22, r14
     880:	0e 94 14 12 	call	0x2428	; 0x2428 <__divmodhi4>
     884:	80 5d       	subi	r24, 0xD0	; 208
     886:	80 83       	st	Z, r24
	}while ((n /= 10) > 0); // delete it
     888:	86 2f       	mov	r24, r22
     88a:	97 2f       	mov	r25, r23
     88c:	18 16       	cp	r1, r24
     88e:	19 06       	cpc	r1, r25
     890:	84 f3       	brlt	.-32     	; 0x872 <FUNCi16toa+0x2a>
	if (sign < 0)
     892:	11 23       	and	r17, r17
     894:	3c f4       	brge	.+14     	; 0x8a4 <FUNCi16toa+0x5c>
		s[i++] = '-';
     896:	fe 01       	movw	r30, r28
     898:	e3 0f       	add	r30, r19
     89a:	f1 1d       	adc	r31, r1
     89c:	8d e2       	ldi	r24, 0x2D	; 45
     89e:	80 83       	st	Z, r24
     8a0:	32 e0       	ldi	r19, 0x02	; 2
     8a2:	32 0f       	add	r19, r18
	s[i] = '\0';
     8a4:	fe 01       	movw	r30, r28
     8a6:	e3 0f       	add	r30, r19
     8a8:	f1 1d       	adc	r31, r1
     8aa:	10 82       	st	Z, r1
	Reverse(s);
     8ac:	ce 01       	movw	r24, r28
     8ae:	0e 94 a7 03 	call	0x74e	; 0x74e <Reverse>
}
     8b2:	df 91       	pop	r29
     8b4:	cf 91       	pop	r28
     8b6:	1f 91       	pop	r17
     8b8:	0f 91       	pop	r16
     8ba:	ff 90       	pop	r15
     8bc:	ef 90       	pop	r14
     8be:	08 95       	ret

000008c0 <FUNCui16toa>:
// ui16toa: convert n to characters in s
void FUNCui16toa(uint16_t n, char s[])
{
     8c0:	1f 93       	push	r17
     8c2:	cf 93       	push	r28
     8c4:	df 93       	push	r29
     8c6:	ac 01       	movw	r20, r24
     8c8:	fb 01       	movw	r30, r22
	uint8_t i;
	i = 0;
     8ca:	80 e0       	ldi	r24, 0x00	; 0
	do { // generate digits in reverse order
		s[i++] = n % 10 + '0'; // get next digit
     8cc:	11 e0       	ldi	r17, 0x01	; 1
     8ce:	18 0f       	add	r17, r24
     8d0:	ef 01       	movw	r28, r30
     8d2:	c8 0f       	add	r28, r24
     8d4:	d1 1d       	adc	r29, r1
     8d6:	9a 01       	movw	r18, r20
     8d8:	ad ec       	ldi	r26, 0xCD	; 205
     8da:	bc ec       	ldi	r27, 0xCC	; 204
     8dc:	0e 94 4d 12 	call	0x249a	; 0x249a <__umulhisi3>
     8e0:	96 95       	lsr	r25
     8e2:	87 95       	ror	r24
     8e4:	96 95       	lsr	r25
     8e6:	87 95       	ror	r24
     8e8:	96 95       	lsr	r25
     8ea:	87 95       	ror	r24
     8ec:	9c 01       	movw	r18, r24
     8ee:	22 0f       	add	r18, r18
     8f0:	33 1f       	adc	r19, r19
     8f2:	88 0f       	add	r24, r24
     8f4:	99 1f       	adc	r25, r25
     8f6:	88 0f       	add	r24, r24
     8f8:	99 1f       	adc	r25, r25
     8fa:	88 0f       	add	r24, r24
     8fc:	99 1f       	adc	r25, r25
     8fe:	82 0f       	add	r24, r18
     900:	93 1f       	adc	r25, r19
     902:	9a 01       	movw	r18, r20
     904:	28 1b       	sub	r18, r24
     906:	39 0b       	sbc	r19, r25
     908:	c9 01       	movw	r24, r18
     90a:	80 5d       	subi	r24, 0xD0	; 208
     90c:	88 83       	st	Y, r24
	}while ((n /= 10) > 0); // delete it
     90e:	9a 01       	movw	r18, r20
     910:	0e 94 4d 12 	call	0x249a	; 0x249a <__umulhisi3>
     914:	ac 01       	movw	r20, r24
     916:	56 95       	lsr	r21
     918:	47 95       	ror	r20
     91a:	56 95       	lsr	r21
     91c:	47 95       	ror	r20
     91e:	56 95       	lsr	r21
     920:	47 95       	ror	r20
void FUNCui16toa(uint16_t n, char s[])
{
	uint8_t i;
	i = 0;
	do { // generate digits in reverse order
		s[i++] = n % 10 + '0'; // get next digit
     922:	81 2f       	mov	r24, r17
	}while ((n /= 10) > 0); // delete it
     924:	41 15       	cp	r20, r1
     926:	51 05       	cpc	r21, r1
     928:	89 f6       	brne	.-94     	; 0x8cc <FUNCui16toa+0xc>
	s[i] = '\0';
     92a:	df 01       	movw	r26, r30
     92c:	a1 0f       	add	r26, r17
     92e:	b1 1d       	adc	r27, r1
     930:	1c 92       	st	X, r1
	Reverse(s);
     932:	cf 01       	movw	r24, r30
     934:	0e 94 a7 03 	call	0x74e	; 0x74e <Reverse>
}
     938:	df 91       	pop	r29
     93a:	cf 91       	pop	r28
     93c:	1f 91       	pop	r17
     93e:	08 95       	ret

00000940 <FUNCbcd2bin>:
		s[j] = c;
	}
}
unsigned char FUNCbcd2bin(unsigned char val)
{
	return (val & 0x0f) + (val >> 4) * 10;
     940:	98 2f       	mov	r25, r24
     942:	92 95       	swap	r25
     944:	9f 70       	andi	r25, 0x0F	; 15
     946:	99 0f       	add	r25, r25
     948:	29 2f       	mov	r18, r25
     94a:	22 0f       	add	r18, r18
     94c:	22 0f       	add	r18, r18
     94e:	92 0f       	add	r25, r18
     950:	8f 70       	andi	r24, 0x0F	; 15
}
     952:	89 0f       	add	r24, r25
     954:	08 95       	ret

00000956 <FUNCbin2bcd>:
unsigned char FUNCbin2bcd(unsigned val)
{
     956:	ac 01       	movw	r20, r24
	return ((val / 10) << 4) + val % 10;
     958:	9c 01       	movw	r18, r24
     95a:	ad ec       	ldi	r26, 0xCD	; 205
     95c:	bc ec       	ldi	r27, 0xCC	; 204
     95e:	0e 94 4d 12 	call	0x249a	; 0x249a <__umulhisi3>
     962:	96 95       	lsr	r25
     964:	87 95       	ror	r24
     966:	96 95       	lsr	r25
     968:	87 95       	ror	r24
     96a:	96 95       	lsr	r25
     96c:	87 95       	ror	r24
     96e:	bc 01       	movw	r22, r24
     970:	66 0f       	add	r22, r22
     972:	77 1f       	adc	r23, r23
     974:	9c 01       	movw	r18, r24
     976:	22 0f       	add	r18, r18
     978:	33 1f       	adc	r19, r19
     97a:	22 0f       	add	r18, r18
     97c:	33 1f       	adc	r19, r19
     97e:	22 0f       	add	r18, r18
     980:	33 1f       	adc	r19, r19
     982:	26 0f       	add	r18, r22
     984:	37 1f       	adc	r19, r23
     986:	42 1b       	sub	r20, r18
     988:	53 0b       	sbc	r21, r19
}
     98a:	34 2f       	mov	r19, r20
     98c:	20 e1       	ldi	r18, 0x10	; 16
     98e:	82 9f       	mul	r24, r18
     990:	30 0d       	add	r19, r0
     992:	11 24       	eor	r1, r1
     994:	83 2f       	mov	r24, r19
     996:	08 95       	ret

00000998 <FUNCgcd1>:
long FUNCgcd1(long a, long b)
{
     998:	cf 92       	push	r12
     99a:	df 92       	push	r13
     99c:	ef 92       	push	r14
     99e:	ff 92       	push	r15
     9a0:	cf 93       	push	r28
     9a2:	df 93       	push	r29
     9a4:	cd b7       	in	r28, 0x3d	; 61
     9a6:	de b7       	in	r29, 0x3e	; 62
     9a8:	28 97       	sbiw	r28, 0x08	; 8
     9aa:	0f b6       	in	r0, 0x3f	; 63
     9ac:	f8 94       	cli
     9ae:	de bf       	out	0x3e, r29	; 62
     9b0:	0f be       	out	0x3f, r0	; 63
     9b2:	cd bf       	out	0x3d, r28	; 61
     9b4:	6b 01       	movw	r12, r22
     9b6:	7c 01       	movw	r14, r24
     9b8:	69 83       	std	Y+1, r22	; 0x01
     9ba:	7a 83       	std	Y+2, r23	; 0x02
     9bc:	8b 83       	std	Y+3, r24	; 0x03
     9be:	9c 83       	std	Y+4, r25	; 0x04
     9c0:	2d 83       	std	Y+5, r18	; 0x05
     9c2:	3e 83       	std	Y+6, r19	; 0x06
     9c4:	4f 83       	std	Y+7, r20	; 0x07
     9c6:	58 87       	std	Y+8, r21	; 0x08
	long r;
	if (a < b)
     9c8:	c2 16       	cp	r12, r18
     9ca:	d3 06       	cpc	r13, r19
     9cc:	e4 06       	cpc	r14, r20
     9ce:	f5 06       	cpc	r15, r21
     9d0:	3c f4       	brge	.+14     	; 0x9e0 <FUNCgcd1+0x48>
		FUNCswap(&a, &b);
     9d2:	be 01       	movw	r22, r28
     9d4:	6b 5f       	subi	r22, 0xFB	; 251
     9d6:	7f 4f       	sbci	r23, 0xFF	; 255
     9d8:	ce 01       	movw	r24, r28
     9da:	01 96       	adiw	r24, 0x01	; 1
     9dc:	0e 94 69 01 	call	0x2d2	; 0x2d2 <FUNCswap>
	if (!b){
     9e0:	8d 81       	ldd	r24, Y+5	; 0x05
     9e2:	9e 81       	ldd	r25, Y+6	; 0x06
     9e4:	af 81       	ldd	r26, Y+7	; 0x07
     9e6:	b8 85       	ldd	r27, Y+8	; 0x08
     9e8:	89 2b       	or	r24, r25
     9ea:	8a 2b       	or	r24, r26
     9ec:	8b 2b       	or	r24, r27
     9ee:	71 f4       	brne	.+28     	; 0xa0c <FUNCgcd1+0x74>
		while ((r = a % b) != 0) {
     9f0:	69 81       	ldd	r22, Y+1	; 0x01
     9f2:	7a 81       	ldd	r23, Y+2	; 0x02
     9f4:	8b 81       	ldd	r24, Y+3	; 0x03
     9f6:	9c 81       	ldd	r25, Y+4	; 0x04
     9f8:	20 e0       	ldi	r18, 0x00	; 0
     9fa:	30 e0       	ldi	r19, 0x00	; 0
     9fc:	a9 01       	movw	r20, r18
     9fe:	0e 94 28 12 	call	0x2450	; 0x2450 <__divmodsi4>
     a02:	61 15       	cp	r22, r1
     a04:	71 05       	cpc	r23, r1
     a06:	81 05       	cpc	r24, r1
     a08:	91 05       	cpc	r25, r1
     a0a:	29 f4       	brne	.+10     	; 0xa16 <FUNCgcd1+0x7e>
			a = b;
			b = r;
		}
	}	
	return b;
     a0c:	6d 81       	ldd	r22, Y+5	; 0x05
     a0e:	7e 81       	ldd	r23, Y+6	; 0x06
     a10:	8f 81       	ldd	r24, Y+7	; 0x07
     a12:	98 85       	ldd	r25, Y+8	; 0x08
     a14:	05 c0       	rjmp	.+10     	; 0xa20 <FUNCgcd1+0x88>
	if (a < b)
		FUNCswap(&a, &b);
	if (!b){
		while ((r = a % b) != 0) {
			a = b;
			b = r;
     a16:	6d 83       	std	Y+5, r22	; 0x05
     a18:	7e 83       	std	Y+6, r23	; 0x06
     a1a:	8f 83       	std	Y+7, r24	; 0x07
     a1c:	98 87       	std	Y+8, r25	; 0x08
     a1e:	f6 cf       	rjmp	.-20     	; 0xa0c <FUNCgcd1+0x74>
		}
	}	
	return b;
}
     a20:	28 96       	adiw	r28, 0x08	; 8
     a22:	0f b6       	in	r0, 0x3f	; 63
     a24:	f8 94       	cli
     a26:	de bf       	out	0x3e, r29	; 62
     a28:	0f be       	out	0x3f, r0	; 63
     a2a:	cd bf       	out	0x3d, r28	; 61
     a2c:	df 91       	pop	r29
     a2e:	cf 91       	pop	r28
     a30:	ff 90       	pop	r15
     a32:	ef 90       	pop	r14
     a34:	df 90       	pop	r13
     a36:	cf 90       	pop	r12
     a38:	08 95       	ret

00000a3a <FUNCpincheck>:
	uint8_t lh;
	if(port & (1<<pin))
		lh=1;
	else
		lh=0;
	return lh;
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	02 c0       	rjmp	.+4      	; 0xa42 <FUNCpincheck+0x8>
     a3e:	95 95       	asr	r25
     a40:	87 95       	ror	r24
     a42:	6a 95       	dec	r22
     a44:	e2 f7       	brpl	.-8      	; 0xa3e <FUNCpincheck+0x4>
}
     a46:	81 70       	andi	r24, 0x01	; 1
     a48:	08 95       	ret

00000a4a <FUNCprint_binary>:
char* FUNCprint_binary(uint8_t number)
{
     a4a:	e3 ef       	ldi	r30, 0xF3	; 243
     a4c:	f1 e0       	ldi	r31, 0x01	; 1
	uint8_t i,c;
    for(i=128,c=0;i;i>>=1,c++){
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	20 e8       	ldi	r18, 0x80	; 128
	(number & i) ? (FUNCstr[c]='1') : (FUNCstr[c]='0');
     a52:	50 e3       	ldi	r21, 0x30	; 48
     a54:	41 e3       	ldi	r20, 0x31	; 49
     a56:	38 2f       	mov	r19, r24
     a58:	32 23       	and	r19, r18
     a5a:	11 f0       	breq	.+4      	; 0xa60 <FUNCprint_binary+0x16>
     a5c:	40 83       	st	Z, r20
     a5e:	01 c0       	rjmp	.+2      	; 0xa62 <FUNCprint_binary+0x18>
     a60:	50 83       	st	Z, r21
	return lh;
}
char* FUNCprint_binary(uint8_t number)
{
	uint8_t i,c;
    for(i=128,c=0;i;i>>=1,c++){
     a62:	26 95       	lsr	r18
     a64:	9f 5f       	subi	r25, 0xFF	; 255
     a66:	31 96       	adiw	r30, 0x01	; 1
     a68:	98 30       	cpi	r25, 0x08	; 8
     a6a:	a9 f7       	brne	.-22     	; 0xa56 <FUNCprint_binary+0xc>
	(number & i) ? (FUNCstr[c]='1') : (FUNCstr[c]='0');
	}
	FUNCstr[c]='\0';
     a6c:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <FUNCstr+0x8>
	return FUNCstr;
}
     a70:	83 ef       	ldi	r24, 0xF3	; 243
     a72:	91 e0       	ldi	r25, 0x01	; 1
     a74:	08 95       	ret

00000a76 <FUNCmayia>:
// power: raise base to n-th power; n >= 0
unsigned int Power(uint8_t base, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
     a76:	a4 2f       	mov	r26, r20
     a78:	b0 e0       	ldi	r27, 0x00	; 0
     a7a:	10 97       	sbiw	r26, 0x00	; 0
     a7c:	61 f0       	breq	.+24     	; 0xa96 <FUNCmayia+0x20>
     a7e:	21 e0       	ldi	r18, 0x01	; 1
     a80:	30 e0       	ldi	r19, 0x00	; 0
     a82:	e1 e0       	ldi	r30, 0x01	; 1
     a84:	f0 e0       	ldi	r31, 0x00	; 0
        p = p * base;
     a86:	ee 0f       	add	r30, r30
     a88:	ff 1f       	adc	r31, r31
// power: raise base to n-th power; n >= 0
unsigned int Power(uint8_t base, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
     a8a:	2f 5f       	subi	r18, 0xFF	; 255
     a8c:	3f 4f       	sbci	r19, 0xFF	; 255
     a8e:	a2 17       	cp	r26, r18
     a90:	b3 07       	cpc	r27, r19
     a92:	c8 f7       	brcc	.-14     	; 0xa86 <FUNCmayia+0x10>
     a94:	02 c0       	rjmp	.+4      	; 0xa9a <FUNCmayia+0x24>
}
// power: raise base to n-th power; n >= 0
unsigned int Power(uint8_t base, uint8_t n)
{
    unsigned int i, p;
    p = 1;
     a96:	e1 e0       	ldi	r30, 0x01	; 1
     a98:	f0 e0       	ldi	r31, 0x00	; 0
unsigned int FUNCmayia(unsigned int xi, unsigned int xf, uint8_t nbits)
{//magic formula
	unsigned int mask;
	unsigned int diff;
	unsigned int trans;
	mask=Power(2,nbits)-1;
     a9a:	31 97       	sbiw	r30, 0x01	; 1
	xi&=mask;
	xf&=mask;
     a9c:	6e 23       	and	r22, r30
     a9e:	7f 23       	and	r23, r31
	diff=xf^xi;
     aa0:	8e 23       	and	r24, r30
     aa2:	9f 23       	and	r25, r31
     aa4:	86 27       	eor	r24, r22
     aa6:	97 27       	eor	r25, r23
	trans=diff&xf;
	return (trans<<nbits)|diff;
     aa8:	68 23       	and	r22, r24
     aaa:	79 23       	and	r23, r25
     aac:	02 c0       	rjmp	.+4      	; 0xab2 <FUNCmayia+0x3c>
     aae:	66 0f       	add	r22, r22
     ab0:	77 1f       	adc	r23, r23
     ab2:	4a 95       	dec	r20
     ab4:	e2 f7       	brpl	.-8      	; 0xaae <FUNCmayia+0x38>
}
     ab6:	86 2b       	or	r24, r22
     ab8:	97 2b       	or	r25, r23
     aba:	08 95       	ret

00000abc <FUNCenable>:
// uint8_t TRANupdate(struct TRAN *tr, uint8_t idata);
/*
** procedure and function
*/
FUNC FUNCenable( void )
{
     abc:	fc 01       	movw	r30, r24
	uint8_t tSREG;
	tSREG=SREG;
     abe:	9f b7       	in	r25, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
     ac0:	8f b7       	in	r24, 0x3f	; 63
     ac2:	8f 77       	andi	r24, 0x7F	; 127
     ac4:	8f bf       	out	0x3f, r24	; 63
	func.putstr=FUNCputstr;
	func.getnum=FUNCgetnum;
	func.getnumv2=FUNCgetnumv2;
	func.readint=FUNCreadint;
	*/
	SREG=tSREG;
     ac6:	9f bf       	out	0x3f, r25	; 63
	/******/
	return func;
     ac8:	81 e6       	ldi	r24, 0x61	; 97
     aca:	93 e0       	ldi	r25, 0x03	; 3
     acc:	91 83       	std	Z+1, r25	; 0x01
     ace:	80 83       	st	Z, r24
     ad0:	8c e7       	ldi	r24, 0x7C	; 124
     ad2:	93 e0       	ldi	r25, 0x03	; 3
     ad4:	93 83       	std	Z+3, r25	; 0x03
     ad6:	82 83       	std	Z+2, r24	; 0x02
     ad8:	87 ea       	ldi	r24, 0xA7	; 167
     ada:	93 e0       	ldi	r25, 0x03	; 3
     adc:	95 83       	std	Z+5, r25	; 0x05
     ade:	84 83       	std	Z+4, r24	; 0x04
     ae0:	8b e3       	ldi	r24, 0x3B	; 59
     ae2:	95 e0       	ldi	r25, 0x05	; 5
     ae4:	97 83       	std	Z+7, r25	; 0x07
     ae6:	86 83       	std	Z+6, r24	; 0x06
     ae8:	8e e4       	ldi	r24, 0x4E	; 78
     aea:	91 e0       	ldi	r25, 0x01	; 1
     aec:	91 87       	std	Z+9, r25	; 0x09
     aee:	80 87       	std	Z+8, r24	; 0x08
     af0:	8c e5       	ldi	r24, 0x5C	; 92
     af2:	91 e0       	ldi	r25, 0x01	; 1
     af4:	93 87       	std	Z+11, r25	; 0x0b
     af6:	82 87       	std	Z+10, r24	; 0x0a
     af8:	8e e5       	ldi	r24, 0x5E	; 94
     afa:	91 e0       	ldi	r25, 0x01	; 1
     afc:	95 87       	std	Z+13, r25	; 0x0d
     afe:	84 87       	std	Z+12, r24	; 0x0c
     b00:	81 e6       	ldi	r24, 0x61	; 97
     b02:	91 e0       	ldi	r25, 0x01	; 1
     b04:	97 87       	std	Z+15, r25	; 0x0f
     b06:	86 87       	std	Z+14, r24	; 0x0e
     b08:	84 e6       	ldi	r24, 0x64	; 100
     b0a:	91 e0       	ldi	r25, 0x01	; 1
     b0c:	91 8b       	std	Z+17, r25	; 0x11
     b0e:	80 8b       	std	Z+16, r24	; 0x10
     b10:	87 e6       	ldi	r24, 0x67	; 103
     b12:	91 e0       	ldi	r25, 0x01	; 1
     b14:	93 8b       	std	Z+19, r25	; 0x13
     b16:	82 8b       	std	Z+18, r24	; 0x12
     b18:	88 e5       	ldi	r24, 0x58	; 88
     b1a:	91 e0       	ldi	r25, 0x01	; 1
     b1c:	95 8b       	std	Z+21, r25	; 0x15
     b1e:	84 8b       	std	Z+20, r24	; 0x14
     b20:	8a e5       	ldi	r24, 0x5A	; 90
     b22:	91 e0       	ldi	r25, 0x01	; 1
     b24:	97 8b       	std	Z+23, r25	; 0x17
     b26:	86 8b       	std	Z+22, r24	; 0x16
     b28:	89 e6       	ldi	r24, 0x69	; 105
     b2a:	91 e0       	ldi	r25, 0x01	; 1
     b2c:	91 8f       	std	Z+25, r25	; 0x19
     b2e:	80 8f       	std	Z+24, r24	; 0x18
     b30:	8a e8       	ldi	r24, 0x8A	; 138
     b32:	91 e0       	ldi	r25, 0x01	; 1
     b34:	93 8f       	std	Z+27, r25	; 0x1b
     b36:	82 8f       	std	Z+26, r24	; 0x1a
     b38:	88 e9       	ldi	r24, 0x98	; 152
     b3a:	91 e0       	ldi	r25, 0x01	; 1
     b3c:	95 8f       	std	Z+29, r25	; 0x1d
     b3e:	84 8f       	std	Z+28, r24	; 0x1c
     b40:	8a eb       	ldi	r24, 0xBA	; 186
     b42:	91 e0       	ldi	r25, 0x01	; 1
     b44:	97 8f       	std	Z+31, r25	; 0x1f
     b46:	86 8f       	std	Z+30, r24	; 0x1e
     b48:	84 e2       	ldi	r24, 0x24	; 36
     b4a:	94 e0       	ldi	r25, 0x04	; 4
     b4c:	91 a3       	std	Z+33, r25	; 0x21
     b4e:	80 a3       	std	Z+32, r24	; 0x20
     b50:	80 e6       	ldi	r24, 0x60	; 96
     b52:	94 e0       	ldi	r25, 0x04	; 4
     b54:	93 a3       	std	Z+35, r25	; 0x23
     b56:	82 a3       	std	Z+34, r24	; 0x22
     b58:	85 ec       	ldi	r24, 0xC5	; 197
     b5a:	93 e0       	ldi	r25, 0x03	; 3
     b5c:	95 a3       	std	Z+37, r25	; 0x25
     b5e:	84 a3       	std	Z+36, r24	; 0x24
     b60:	8b e8       	ldi	r24, 0x8B	; 139
     b62:	93 e0       	ldi	r25, 0x03	; 3
     b64:	97 a3       	std	Z+39, r25	; 0x27
     b66:	86 a3       	std	Z+38, r24	; 0x26
     b68:	80 e6       	ldi	r24, 0x60	; 96
     b6a:	92 e0       	ldi	r25, 0x02	; 2
     b6c:	91 a7       	std	Z+41, r25	; 0x29
     b6e:	80 a7       	std	Z+40, r24	; 0x28
     b70:	85 e6       	ldi	r24, 0x65	; 101
     b72:	92 e0       	ldi	r25, 0x02	; 2
     b74:	93 a7       	std	Z+43, r25	; 0x2b
     b76:	82 a7       	std	Z+42, r24	; 0x2a
     b78:	84 e7       	ldi	r24, 0x74	; 116
     b7a:	92 e0       	ldi	r25, 0x02	; 2
     b7c:	95 a7       	std	Z+45, r25	; 0x2d
     b7e:	84 a7       	std	Z+44, r24	; 0x2c
     b80:	88 e9       	ldi	r24, 0x98	; 152
     b82:	92 e0       	ldi	r25, 0x02	; 2
     b84:	97 a7       	std	Z+47, r25	; 0x2f
     b86:	86 a7       	std	Z+46, r24	; 0x2e
     b88:	8a e9       	ldi	r24, 0x9A	; 154
     b8a:	92 e0       	ldi	r25, 0x02	; 2
     b8c:	91 ab       	std	Z+49, r25	; 0x31
     b8e:	80 ab       	std	Z+48, r24	; 0x30
     b90:	84 ea       	ldi	r24, 0xA4	; 164
     b92:	92 e0       	ldi	r25, 0x02	; 2
     b94:	93 ab       	std	Z+51, r25	; 0x33
     b96:	82 ab       	std	Z+50, r24	; 0x32
     b98:	81 eb       	ldi	r24, 0xB1	; 177
     b9a:	92 e0       	ldi	r25, 0x02	; 2
     b9c:	95 ab       	std	Z+53, r25	; 0x35
     b9e:	84 ab       	std	Z+52, r24	; 0x34
     ba0:	8d eb       	ldi	r24, 0xBD	; 189
     ba2:	92 e0       	ldi	r25, 0x02	; 2
     ba4:	97 ab       	std	Z+55, r25	; 0x37
     ba6:	86 ab       	std	Z+54, r24	; 0x36
     ba8:	85 ed       	ldi	r24, 0xD5	; 213
     baa:	92 e0       	ldi	r25, 0x02	; 2
     bac:	91 af       	std	Z+57, r25	; 0x39
     bae:	80 af       	std	Z+56, r24	; 0x38
     bb0:	88 ee       	ldi	r24, 0xE8	; 232
     bb2:	92 e0       	ldi	r25, 0x02	; 2
     bb4:	93 af       	std	Z+59, r25	; 0x3b
     bb6:	82 af       	std	Z+58, r24	; 0x3a
     bb8:	83 ef       	ldi	r24, 0xF3	; 243
     bba:	92 e0       	ldi	r25, 0x02	; 2
     bbc:	95 af       	std	Z+61, r25	; 0x3d
     bbe:	84 af       	std	Z+60, r24	; 0x3c
     bc0:	80 e2       	ldi	r24, 0x20	; 32
     bc2:	93 e0       	ldi	r25, 0x03	; 3
     bc4:	97 af       	std	Z+63, r25	; 0x3f
     bc6:	86 af       	std	Z+62, r24	; 0x3e
     bc8:	df 01       	movw	r26, r30
     bca:	a0 5c       	subi	r26, 0xC0	; 192
     bcc:	bf 4f       	sbci	r27, 0xFF	; 255
     bce:	80 ea       	ldi	r24, 0xA0	; 160
     bd0:	94 e0       	ldi	r25, 0x04	; 4
     bd2:	11 96       	adiw	r26, 0x01	; 1
     bd4:	9c 93       	st	X, r25
     bd6:	8e 93       	st	-X, r24
     bd8:	12 96       	adiw	r26, 0x02	; 2
     bda:	8b ea       	ldi	r24, 0xAB	; 171
     bdc:	94 e0       	ldi	r25, 0x04	; 4
     bde:	11 96       	adiw	r26, 0x01	; 1
     be0:	9c 93       	st	X, r25
     be2:	8e 93       	st	-X, r24
     be4:	12 96       	adiw	r26, 0x02	; 2
     be6:	8c ec       	ldi	r24, 0xCC	; 204
     be8:	94 e0       	ldi	r25, 0x04	; 4
     bea:	11 96       	adiw	r26, 0x01	; 1
     bec:	9c 93       	st	X, r25
     bee:	8e 93       	st	-X, r24
     bf0:	12 96       	adiw	r26, 0x02	; 2
     bf2:	8d e1       	ldi	r24, 0x1D	; 29
     bf4:	95 e0       	ldi	r25, 0x05	; 5
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	9c 93       	st	X, r25
     bfa:	8e 93       	st	-X, r24
     bfc:	12 96       	adiw	r26, 0x02	; 2
     bfe:	85 e2       	ldi	r24, 0x25	; 37
     c00:	95 e0       	ldi	r25, 0x05	; 5
     c02:	8d 93       	st	X+, r24
     c04:	9c 93       	st	X, r25
}
     c06:	cf 01       	movw	r24, r30
     c08:	08 95       	ret

00000c0a <KEYPAD_flush>:
}
/***flush***/
void KEYPAD_flush(void)
{
	uint8_t i;
	data.character=' ';
     c0a:	80 e2       	ldi	r24, 0x20	; 32
     c0c:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <data>
	KEYPADSTRINGINDEX=0;
     c10:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <KEYPADSTRINGINDEX>
     c14:	e1 e1       	ldi	r30, 0x11	; 17
     c16:	f2 e0       	ldi	r31, 0x02	; 2
     c18:	86 e2       	ldi	r24, 0x26	; 38
     c1a:	92 e0       	ldi	r25, 0x02	; 2
	for(i=0;i<KEYPADSTRINGSIZE+1;i++)
		data.string[i]='\0';
     c1c:	11 92       	st	Z+, r1
void KEYPAD_flush(void)
{
	uint8_t i;
	data.character=' ';
	KEYPADSTRINGINDEX=0;
	for(i=0;i<KEYPADSTRINGSIZE+1;i++)
     c1e:	e8 17       	cp	r30, r24
     c20:	f9 07       	cpc	r31, r25
     c22:	e1 f7       	brne	.-8      	; 0xc1c <KEYPAD_flush+0x12>
		data.string[i]='\0';
}
     c24:	08 95       	ret

00000c26 <KEYPAD_getkey>:
	*keypad_PORT|=(1<<KEYPADLINE_1) | (1<<KEYPADLINE_2) | (1<<KEYPADLINE_3) | (1<<KEYPADLINE_4);
	//Going to use pull down method.
	return keypad;
}
char KEYPAD_getkey(void)
{
     c26:	cf 93       	push	r28
     c28:	df 93       	push	r29
     c2a:	21 e0       	ldi	r18, 0x01	; 1
	uint8_t HL;
	char c='\0';
     c2c:	80 e0       	ldi	r24, 0x00	; 0
				*keypad_PORT|=(1<<KEYPADLINE_1);
				break;
			case 1: //line 2 index 1
				*keypad_DDR|=(1<<KEYPADLINE_2);
				*keypad_PORT&=~(1<<KEYPADLINE_2);
				keypad_dataf.line_2=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
     c2e:	a5 e0       	ldi	r26, 0x05	; 5
     c30:	b2 e0       	ldi	r27, 0x02	; 2
				HL=KEYPADhl(keypad_datai.line_2,keypad_dataf.line_2);
     c32:	e9 e0       	ldi	r30, 0x09	; 9
     c34:	f2 e0       	ldi	r31, 0x02	; 2
					if(HL == (1<<KEYPADDATA_2))
						c=keypadvalue[1][1];
					if(HL == (1<<KEYPADDATA_3))
						c=keypadvalue[1][2];
					if(HL == (1<<KEYPADDATA_4))
						c=keypadvalue[1][3];
     c36:	60 e0       	ldi	r22, 0x00	; 0
     c38:	71 e0       	ldi	r23, 0x01	; 1
     c3a:	01 c0       	rjmp	.+2      	; 0xc3e <KEYPAD_getkey+0x18>
     c3c:	2f 5f       	subi	r18, 0xFF	; 255
{
	uint8_t HL;
	char c='\0';
	uint8_t keypad_option;
	for(keypad_option=0;keypad_option<KEYPADLINES;keypad_option++){
		switch (keypad_option)
     c3e:	9f ef       	ldi	r25, 0xFF	; 255
     c40:	92 0f       	add	r25, r18
     c42:	91 30       	cpi	r25, 0x01	; 1
     c44:	09 f4       	brne	.+2      	; 0xc48 <KEYPAD_getkey+0x22>
     c46:	4b c0       	rjmp	.+150    	; 0xcde <KEYPAD_getkey+0xb8>
     c48:	38 f0       	brcs	.+14     	; 0xc58 <KEYPAD_getkey+0x32>
     c4a:	92 30       	cpi	r25, 0x02	; 2
     c4c:	09 f4       	brne	.+2      	; 0xc50 <KEYPAD_getkey+0x2a>
     c4e:	8c c0       	rjmp	.+280    	; 0xd68 <KEYPAD_getkey+0x142>
     c50:	93 30       	cpi	r25, 0x03	; 3
     c52:	09 f4       	brne	.+2      	; 0xc56 <KEYPAD_getkey+0x30>
     c54:	ce c0       	rjmp	.+412    	; 0xdf2 <KEYPAD_getkey+0x1cc>
     c56:	0e c1       	rjmp	.+540    	; 0xe74 <KEYPAD_getkey+0x24e>
		{
			case 0: //line 1 index 0
				*keypad_DDR|=(1<<KEYPADLINE_1);
     c58:	40 91 26 02 	lds	r20, 0x0226	; 0x800226 <keypad_DDR>
     c5c:	50 91 27 02 	lds	r21, 0x0227	; 0x800227 <keypad_DDR+0x1>
     c60:	ea 01       	movw	r28, r20
     c62:	98 81       	ld	r25, Y
     c64:	90 68       	ori	r25, 0x80	; 128
     c66:	98 83       	st	Y, r25
				*keypad_PORT&=~(1<<KEYPADLINE_1);
     c68:	40 91 03 02 	lds	r20, 0x0203	; 0x800203 <keypad_PORT>
     c6c:	50 91 04 02 	lds	r21, 0x0204	; 0x800204 <keypad_PORT+0x1>
     c70:	ea 01       	movw	r28, r20
     c72:	98 81       	ld	r25, Y
     c74:	9f 77       	andi	r25, 0x7F	; 127
     c76:	98 83       	st	Y, r25
				keypad_dataf.line_1=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
     c78:	40 91 0e 02 	lds	r20, 0x020E	; 0x80020e <keypad_PIN>
     c7c:	50 91 0f 02 	lds	r21, 0x020F	; 0x80020f <keypad_PIN+0x1>
     c80:	ea 01       	movw	r28, r20
     c82:	38 81       	ld	r19, Y
     c84:	34 77       	andi	r19, 0x74	; 116
     c86:	3c 93       	st	X, r19
				HL=KEYPADhl(keypad_datai.line_1,keypad_dataf.line_1);
     c88:	90 81       	ld	r25, Z
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
     c8a:	43 2f       	mov	r20, r19
     c8c:	49 27       	eor	r20, r25
     c8e:	94 23       	and	r25, r20
			case 0: //line 1 index 0
				*keypad_DDR|=(1<<KEYPADLINE_1);
				*keypad_PORT&=~(1<<KEYPADLINE_1);
				keypad_dataf.line_1=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_1,keypad_dataf.line_1);
				keypad_datai.line_1=keypad_dataf.line_1;
     c90:	30 83       	st	Z, r19
				if(HL){
     c92:	99 23       	and	r25, r25
     c94:	99 f0       	breq	.+38     	; 0xcbc <KEYPAD_getkey+0x96>
					//decode index line one column what ?
					if(HL == (1<<KEYPADDATA_1))
     c96:	94 30       	cpi	r25, 0x04	; 4
     c98:	19 f4       	brne	.+6      	; 0xca0 <KEYPAD_getkey+0x7a>
						c=keypadvalue[0][0];
     c9a:	eb 01       	movw	r28, r22
     c9c:	88 81       	ld	r24, Y
     c9e:	0a c0       	rjmp	.+20     	; 0xcb4 <KEYPAD_getkey+0x8e>
					if(HL == (1<<KEYPADDATA_2))
     ca0:	90 31       	cpi	r25, 0x10	; 16
     ca2:	19 f4       	brne	.+6      	; 0xcaa <KEYPAD_getkey+0x84>
						c=keypadvalue[0][1];
     ca4:	eb 01       	movw	r28, r22
     ca6:	89 81       	ldd	r24, Y+1	; 0x01
     ca8:	09 c0       	rjmp	.+18     	; 0xcbc <KEYPAD_getkey+0x96>
					if(HL == (1<<KEYPADDATA_3))
     caa:	90 32       	cpi	r25, 0x20	; 32
     cac:	19 f4       	brne	.+6      	; 0xcb4 <KEYPAD_getkey+0x8e>
						c=keypadvalue[0][2];
     cae:	eb 01       	movw	r28, r22
     cb0:	8a 81       	ldd	r24, Y+2	; 0x02
     cb2:	04 c0       	rjmp	.+8      	; 0xcbc <KEYPAD_getkey+0x96>
					if(HL == (1<<KEYPADDATA_4))
     cb4:	90 34       	cpi	r25, 0x40	; 64
     cb6:	11 f4       	brne	.+4      	; 0xcbc <KEYPAD_getkey+0x96>
						c=keypadvalue[0][3];
     cb8:	eb 01       	movw	r28, r22
     cba:	8b 81       	ldd	r24, Y+3	; 0x03
				}
				*keypad_DDR&=~(1<<KEYPADLINE_1);
     cbc:	40 91 26 02 	lds	r20, 0x0226	; 0x800226 <keypad_DDR>
     cc0:	50 91 27 02 	lds	r21, 0x0227	; 0x800227 <keypad_DDR+0x1>
     cc4:	ea 01       	movw	r28, r20
     cc6:	98 81       	ld	r25, Y
     cc8:	9f 77       	andi	r25, 0x7F	; 127
     cca:	98 83       	st	Y, r25
				*keypad_PORT|=(1<<KEYPADLINE_1);
     ccc:	40 91 03 02 	lds	r20, 0x0203	; 0x800203 <keypad_PORT>
     cd0:	50 91 04 02 	lds	r21, 0x0204	; 0x800204 <keypad_PORT+0x1>
     cd4:	ea 01       	movw	r28, r20
     cd6:	98 81       	ld	r25, Y
     cd8:	90 68       	ori	r25, 0x80	; 128
     cda:	98 83       	st	Y, r25
				break;
     cdc:	af cf       	rjmp	.-162    	; 0xc3c <KEYPAD_getkey+0x16>
			case 1: //line 2 index 1
				*keypad_DDR|=(1<<KEYPADLINE_2);
     cde:	40 91 26 02 	lds	r20, 0x0226	; 0x800226 <keypad_DDR>
     ce2:	50 91 27 02 	lds	r21, 0x0227	; 0x800227 <keypad_DDR+0x1>
     ce6:	ea 01       	movw	r28, r20
     ce8:	98 81       	ld	r25, Y
     cea:	91 60       	ori	r25, 0x01	; 1
     cec:	98 83       	st	Y, r25
				*keypad_PORT&=~(1<<KEYPADLINE_2);
     cee:	40 91 03 02 	lds	r20, 0x0203	; 0x800203 <keypad_PORT>
     cf2:	50 91 04 02 	lds	r21, 0x0204	; 0x800204 <keypad_PORT+0x1>
     cf6:	ea 01       	movw	r28, r20
     cf8:	98 81       	ld	r25, Y
     cfa:	9e 7f       	andi	r25, 0xFE	; 254
     cfc:	98 83       	st	Y, r25
				keypad_dataf.line_2=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
     cfe:	40 91 0e 02 	lds	r20, 0x020E	; 0x80020e <keypad_PIN>
     d02:	50 91 0f 02 	lds	r21, 0x020F	; 0x80020f <keypad_PIN+0x1>
     d06:	ea 01       	movw	r28, r20
     d08:	38 81       	ld	r19, Y
     d0a:	34 77       	andi	r19, 0x74	; 116
     d0c:	11 96       	adiw	r26, 0x01	; 1
     d0e:	3c 93       	st	X, r19
     d10:	11 97       	sbiw	r26, 0x01	; 1
				HL=KEYPADhl(keypad_datai.line_2,keypad_dataf.line_2);
     d12:	91 81       	ldd	r25, Z+1	; 0x01
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
     d14:	43 2f       	mov	r20, r19
     d16:	49 27       	eor	r20, r25
     d18:	94 23       	and	r25, r20
			case 1: //line 2 index 1
				*keypad_DDR|=(1<<KEYPADLINE_2);
				*keypad_PORT&=~(1<<KEYPADLINE_2);
				keypad_dataf.line_2=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_2,keypad_dataf.line_2);
				keypad_datai.line_2=keypad_dataf.line_2;
     d1a:	31 83       	std	Z+1, r19	; 0x01
				if(HL){
     d1c:	99 23       	and	r25, r25
     d1e:	99 f0       	breq	.+38     	; 0xd46 <KEYPAD_getkey+0x120>
					//decode index line two column what ?
					if(HL == (1<<KEYPADDATA_1))
     d20:	94 30       	cpi	r25, 0x04	; 4
     d22:	19 f4       	brne	.+6      	; 0xd2a <KEYPAD_getkey+0x104>
						c=keypadvalue[1][0];
     d24:	eb 01       	movw	r28, r22
     d26:	8c 81       	ldd	r24, Y+4	; 0x04
     d28:	0a c0       	rjmp	.+20     	; 0xd3e <KEYPAD_getkey+0x118>
					if(HL == (1<<KEYPADDATA_2))
     d2a:	90 31       	cpi	r25, 0x10	; 16
     d2c:	19 f4       	brne	.+6      	; 0xd34 <KEYPAD_getkey+0x10e>
						c=keypadvalue[1][1];
     d2e:	eb 01       	movw	r28, r22
     d30:	8d 81       	ldd	r24, Y+5	; 0x05
     d32:	09 c0       	rjmp	.+18     	; 0xd46 <KEYPAD_getkey+0x120>
					if(HL == (1<<KEYPADDATA_3))
     d34:	90 32       	cpi	r25, 0x20	; 32
     d36:	19 f4       	brne	.+6      	; 0xd3e <KEYPAD_getkey+0x118>
						c=keypadvalue[1][2];
     d38:	eb 01       	movw	r28, r22
     d3a:	8e 81       	ldd	r24, Y+6	; 0x06
     d3c:	04 c0       	rjmp	.+8      	; 0xd46 <KEYPAD_getkey+0x120>
					if(HL == (1<<KEYPADDATA_4))
     d3e:	90 34       	cpi	r25, 0x40	; 64
     d40:	11 f4       	brne	.+4      	; 0xd46 <KEYPAD_getkey+0x120>
						c=keypadvalue[1][3];
     d42:	eb 01       	movw	r28, r22
     d44:	8f 81       	ldd	r24, Y+7	; 0x07
				}
				*keypad_DDR&=~(1<<KEYPADLINE_2);
     d46:	40 91 26 02 	lds	r20, 0x0226	; 0x800226 <keypad_DDR>
     d4a:	50 91 27 02 	lds	r21, 0x0227	; 0x800227 <keypad_DDR+0x1>
     d4e:	ea 01       	movw	r28, r20
     d50:	98 81       	ld	r25, Y
     d52:	9e 7f       	andi	r25, 0xFE	; 254
     d54:	98 83       	st	Y, r25
				*keypad_PORT|=(1<<KEYPADLINE_2);
     d56:	40 91 03 02 	lds	r20, 0x0203	; 0x800203 <keypad_PORT>
     d5a:	50 91 04 02 	lds	r21, 0x0204	; 0x800204 <keypad_PORT+0x1>
     d5e:	ea 01       	movw	r28, r20
     d60:	98 81       	ld	r25, Y
     d62:	91 60       	ori	r25, 0x01	; 1
     d64:	98 83       	st	Y, r25
				break;
     d66:	6a cf       	rjmp	.-300    	; 0xc3c <KEYPAD_getkey+0x16>
			case 2: //line 3 index 2
				*keypad_DDR|=(1<<KEYPADLINE_3);
     d68:	40 91 26 02 	lds	r20, 0x0226	; 0x800226 <keypad_DDR>
     d6c:	50 91 27 02 	lds	r21, 0x0227	; 0x800227 <keypad_DDR+0x1>
     d70:	ea 01       	movw	r28, r20
     d72:	98 81       	ld	r25, Y
     d74:	92 60       	ori	r25, 0x02	; 2
     d76:	98 83       	st	Y, r25
				*keypad_PORT&=~(1<<KEYPADLINE_3);
     d78:	40 91 03 02 	lds	r20, 0x0203	; 0x800203 <keypad_PORT>
     d7c:	50 91 04 02 	lds	r21, 0x0204	; 0x800204 <keypad_PORT+0x1>
     d80:	ea 01       	movw	r28, r20
     d82:	98 81       	ld	r25, Y
     d84:	9d 7f       	andi	r25, 0xFD	; 253
     d86:	98 83       	st	Y, r25
				keypad_dataf.line_3=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
     d88:	40 91 0e 02 	lds	r20, 0x020E	; 0x80020e <keypad_PIN>
     d8c:	50 91 0f 02 	lds	r21, 0x020F	; 0x80020f <keypad_PIN+0x1>
     d90:	ea 01       	movw	r28, r20
     d92:	38 81       	ld	r19, Y
     d94:	34 77       	andi	r19, 0x74	; 116
     d96:	12 96       	adiw	r26, 0x02	; 2
     d98:	3c 93       	st	X, r19
     d9a:	12 97       	sbiw	r26, 0x02	; 2
				HL=KEYPADhl(keypad_datai.line_3,keypad_dataf.line_3);
     d9c:	92 81       	ldd	r25, Z+2	; 0x02
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
     d9e:	43 2f       	mov	r20, r19
     da0:	49 27       	eor	r20, r25
     da2:	94 23       	and	r25, r20
			case 2: //line 3 index 2
				*keypad_DDR|=(1<<KEYPADLINE_3);
				*keypad_PORT&=~(1<<KEYPADLINE_3);
				keypad_dataf.line_3=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_3,keypad_dataf.line_3);
				keypad_datai.line_3=keypad_dataf.line_3;
     da4:	32 83       	std	Z+2, r19	; 0x02
				if(HL){
     da6:	99 23       	and	r25, r25
     da8:	99 f0       	breq	.+38     	; 0xdd0 <KEYPAD_getkey+0x1aa>
					//decode index line three column what ?
					if(HL == (1<<KEYPADDATA_1))
     daa:	94 30       	cpi	r25, 0x04	; 4
     dac:	19 f4       	brne	.+6      	; 0xdb4 <KEYPAD_getkey+0x18e>
						c=keypadvalue[2][0];
     dae:	eb 01       	movw	r28, r22
     db0:	88 85       	ldd	r24, Y+8	; 0x08
     db2:	0a c0       	rjmp	.+20     	; 0xdc8 <KEYPAD_getkey+0x1a2>
					if(HL == (1<<KEYPADDATA_2))
     db4:	90 31       	cpi	r25, 0x10	; 16
     db6:	19 f4       	brne	.+6      	; 0xdbe <KEYPAD_getkey+0x198>
						c=keypadvalue[2][1];
     db8:	eb 01       	movw	r28, r22
     dba:	89 85       	ldd	r24, Y+9	; 0x09
     dbc:	09 c0       	rjmp	.+18     	; 0xdd0 <KEYPAD_getkey+0x1aa>
					if(HL == (1<<KEYPADDATA_3))
     dbe:	90 32       	cpi	r25, 0x20	; 32
     dc0:	19 f4       	brne	.+6      	; 0xdc8 <KEYPAD_getkey+0x1a2>
						c=keypadvalue[2][2];
     dc2:	eb 01       	movw	r28, r22
     dc4:	8a 85       	ldd	r24, Y+10	; 0x0a
     dc6:	04 c0       	rjmp	.+8      	; 0xdd0 <KEYPAD_getkey+0x1aa>
					if(HL == (1<<KEYPADDATA_4))
     dc8:	90 34       	cpi	r25, 0x40	; 64
     dca:	11 f4       	brne	.+4      	; 0xdd0 <KEYPAD_getkey+0x1aa>
						c=keypadvalue[2][3];
     dcc:	eb 01       	movw	r28, r22
     dce:	8b 85       	ldd	r24, Y+11	; 0x0b
				}
				*keypad_DDR&=~(1<<KEYPADLINE_3);
     dd0:	40 91 26 02 	lds	r20, 0x0226	; 0x800226 <keypad_DDR>
     dd4:	50 91 27 02 	lds	r21, 0x0227	; 0x800227 <keypad_DDR+0x1>
     dd8:	ea 01       	movw	r28, r20
     dda:	98 81       	ld	r25, Y
     ddc:	9d 7f       	andi	r25, 0xFD	; 253
     dde:	98 83       	st	Y, r25
				*keypad_PORT|=(1<<KEYPADLINE_3);
     de0:	40 91 03 02 	lds	r20, 0x0203	; 0x800203 <keypad_PORT>
     de4:	50 91 04 02 	lds	r21, 0x0204	; 0x800204 <keypad_PORT+0x1>
     de8:	ea 01       	movw	r28, r20
     dea:	98 81       	ld	r25, Y
     dec:	92 60       	ori	r25, 0x02	; 2
     dee:	98 83       	st	Y, r25
				break;
     df0:	25 cf       	rjmp	.-438    	; 0xc3c <KEYPAD_getkey+0x16>
			case 3: //line 4 index 3
				*keypad_DDR|=(1<<KEYPADLINE_4);
     df2:	e0 91 26 02 	lds	r30, 0x0226	; 0x800226 <keypad_DDR>
     df6:	f0 91 27 02 	lds	r31, 0x0227	; 0x800227 <keypad_DDR+0x1>
     dfa:	90 81       	ld	r25, Z
     dfc:	98 60       	ori	r25, 0x08	; 8
     dfe:	90 83       	st	Z, r25
				*keypad_PORT&=~(1<<KEYPADLINE_4);
     e00:	e0 91 03 02 	lds	r30, 0x0203	; 0x800203 <keypad_PORT>
     e04:	f0 91 04 02 	lds	r31, 0x0204	; 0x800204 <keypad_PORT+0x1>
     e08:	90 81       	ld	r25, Z
     e0a:	97 7f       	andi	r25, 0xF7	; 247
     e0c:	90 83       	st	Z, r25
				keypad_dataf.line_4=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
     e0e:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <keypad_PIN>
     e12:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <keypad_PIN+0x1>
     e16:	20 81       	ld	r18, Z
     e18:	24 77       	andi	r18, 0x74	; 116
     e1a:	20 93 08 02 	sts	0x0208, r18	; 0x800208 <keypad_dataf+0x3>
				HL=KEYPADhl(keypad_datai.line_4,keypad_dataf.line_4);
     e1e:	e9 e0       	ldi	r30, 0x09	; 9
     e20:	f2 e0       	ldi	r31, 0x02	; 2
     e22:	93 81       	ldd	r25, Z+3	; 0x03
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
     e24:	32 2f       	mov	r19, r18
     e26:	39 27       	eor	r19, r25
     e28:	93 23       	and	r25, r19
			case 3: //line 4 index 3
				*keypad_DDR|=(1<<KEYPADLINE_4);
				*keypad_PORT&=~(1<<KEYPADLINE_4);
				keypad_dataf.line_4=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_4,keypad_dataf.line_4);
				keypad_datai.line_4=keypad_dataf.line_4;
     e2a:	23 83       	std	Z+3, r18	; 0x03
				if(HL){
     e2c:	99 23       	and	r25, r25
     e2e:	99 f0       	breq	.+38     	; 0xe56 <KEYPAD_getkey+0x230>
					//decode index line four column what ?
					if(HL == (1<<KEYPADDATA_1))
     e30:	94 30       	cpi	r25, 0x04	; 4
     e32:	19 f4       	brne	.+6      	; 0xe3a <KEYPAD_getkey+0x214>
						c=keypadvalue[3][0];
     e34:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_start+0xc>
     e38:	0a c0       	rjmp	.+20     	; 0xe4e <KEYPAD_getkey+0x228>
					if(HL == (1<<KEYPADDATA_2))
     e3a:	90 31       	cpi	r25, 0x10	; 16
     e3c:	19 f4       	brne	.+6      	; 0xe44 <KEYPAD_getkey+0x21e>
						c=keypadvalue[3][1];
     e3e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <__data_start+0xd>
     e42:	09 c0       	rjmp	.+18     	; 0xe56 <KEYPAD_getkey+0x230>
					if(HL == (1<<KEYPADDATA_3))
     e44:	90 32       	cpi	r25, 0x20	; 32
     e46:	19 f4       	brne	.+6      	; 0xe4e <KEYPAD_getkey+0x228>
						c=keypadvalue[3][2];
     e48:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_start+0xe>
     e4c:	04 c0       	rjmp	.+8      	; 0xe56 <KEYPAD_getkey+0x230>
					if(HL == (1<<KEYPADDATA_4))
     e4e:	90 34       	cpi	r25, 0x40	; 64
     e50:	11 f4       	brne	.+4      	; 0xe56 <KEYPAD_getkey+0x230>
						c=keypadvalue[3][3];
     e52:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <__data_start+0xf>
				}
				*keypad_DDR&=~(1<<KEYPADLINE_4);
     e56:	e0 91 26 02 	lds	r30, 0x0226	; 0x800226 <keypad_DDR>
     e5a:	f0 91 27 02 	lds	r31, 0x0227	; 0x800227 <keypad_DDR+0x1>
     e5e:	90 81       	ld	r25, Z
     e60:	97 7f       	andi	r25, 0xF7	; 247
     e62:	90 83       	st	Z, r25
				*keypad_PORT|=(1<<KEYPADLINE_4);
     e64:	e0 91 03 02 	lds	r30, 0x0203	; 0x800203 <keypad_PORT>
     e68:	f0 91 04 02 	lds	r31, 0x0204	; 0x800204 <keypad_PORT+0x1>
     e6c:	90 81       	ld	r25, Z
     e6e:	98 60       	ori	r25, 0x08	; 8
     e70:	90 83       	st	Z, r25
     e72:	03 c0       	rjmp	.+6      	; 0xe7a <KEYPAD_getkey+0x254>
char KEYPAD_getkey(void)
{
	uint8_t HL;
	char c='\0';
	uint8_t keypad_option;
	for(keypad_option=0;keypad_option<KEYPADLINES;keypad_option++){
     e74:	24 30       	cpi	r18, 0x04	; 4
     e76:	08 f4       	brcc	.+2      	; 0xe7a <KEYPAD_getkey+0x254>
     e78:	e1 ce       	rjmp	.-574    	; 0xc3c <KEYPAD_getkey+0x16>
			default:
				break;
		}//endswitch
	}//endfor
	return c;
}
     e7a:	df 91       	pop	r29
     e7c:	cf 91       	pop	r28
     e7e:	08 95       	ret

00000e80 <KEYPAD_get>:
/***get***/
struct keypadata KEYPAD_get(void)
{
     e80:	cf 93       	push	r28
     e82:	df 93       	push	r29
     e84:	ec 01       	movw	r28, r24
	char c;
	c=KEYPAD_getkey();
     e86:	0e 94 13 06 	call	0xc26	; 0xc26 <KEYPAD_getkey>
	if(c){
     e8a:	88 23       	and	r24, r24
     e8c:	89 f0       	breq	.+34     	; 0xeb0 <KEYPAD_get+0x30>
		data.character=c;
     e8e:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <data>
		if(KEYPADSTRINGINDEX<(KEYPADSTRINGSIZE)){
     e92:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <KEYPADSTRINGINDEX>
     e96:	94 31       	cpi	r25, 0x14	; 20
     e98:	58 f4       	brcc	.+22     	; 0xeb0 <KEYPAD_get+0x30>
			data.string[KEYPADSTRINGINDEX]=c;
     e9a:	e0 91 0d 02 	lds	r30, 0x020D	; 0x80020d <KEYPADSTRINGINDEX>
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	e0 5f       	subi	r30, 0xF0	; 240
     ea2:	fd 4f       	sbci	r31, 0xFD	; 253
     ea4:	81 83       	std	Z+1, r24	; 0x01
			KEYPADSTRINGINDEX++;
     ea6:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <KEYPADSTRINGINDEX>
     eaa:	8f 5f       	subi	r24, 0xFF	; 255
     eac:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <KEYPADSTRINGINDEX>
		}
	}
	return data;
     eb0:	86 e1       	ldi	r24, 0x16	; 22
     eb2:	e0 e1       	ldi	r30, 0x10	; 16
     eb4:	f2 e0       	ldi	r31, 0x02	; 2
     eb6:	de 01       	movw	r26, r28
     eb8:	01 90       	ld	r0, Z+
     eba:	0d 92       	st	X+, r0
     ebc:	8a 95       	dec	r24
     ebe:	e1 f7       	brne	.-8      	; 0xeb8 <KEYPAD_get+0x38>
}
     ec0:	ce 01       	movw	r24, r28
     ec2:	df 91       	pop	r29
     ec4:	cf 91       	pop	r28
     ec6:	08 95       	ret

00000ec8 <KEYPADenable>:
uint8_t KEYPADhl(uint8_t xi, uint8_t xf);
/*
** procedure and function
*/
KEYPAD KEYPADenable(volatile uint8_t *ddr, volatile uint8_t *pin, volatile uint8_t *port)
{
     ec8:	cf 93       	push	r28
     eca:	df 93       	push	r29
     ecc:	00 d0       	rcall	.+0      	; 0xece <KEYPADenable+0x6>
     ece:	00 d0       	rcall	.+0      	; 0xed0 <KEYPADenable+0x8>
     ed0:	00 d0       	rcall	.+0      	; 0xed2 <KEYPADenable+0xa>
     ed2:	cd b7       	in	r28, 0x3d	; 61
     ed4:	de b7       	in	r29, 0x3e	; 62
     ed6:	fc 01       	movw	r30, r24
	//LOCAL VARIABLES
	uint8_t tSREG;
	tSREG=SREG;
     ed8:	2f b7       	in	r18, 0x3f	; 63
	data.character=' ';
     eda:	80 e2       	ldi	r24, 0x20	; 32
     edc:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <data>
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
     ee0:	9f b7       	in	r25, 0x3f	; 63
     ee2:	9f 77       	andi	r25, 0x7F	; 127
     ee4:	9f bf       	out	0x3f, r25	; 63
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	KEYPAD keypad;
	//import parametros
	keypad_DDR=ddr;
     ee6:	f0 93 27 02 	sts	0x0227, r31	; 0x800227 <keypad_DDR+0x1>
     eea:	e0 93 26 02 	sts	0x0226, r30	; 0x800226 <keypad_DDR>
	keypad_PIN=pin;
     eee:	70 93 0f 02 	sts	0x020F, r23	; 0x80020f <keypad_PIN+0x1>
     ef2:	60 93 0e 02 	sts	0x020E, r22	; 0x80020e <keypad_PIN>
	keypad_PORT=port;
     ef6:	50 93 04 02 	sts	0x0204, r21	; 0x800204 <keypad_PORT+0x1>
     efa:	40 93 03 02 	sts	0x0203, r20	; 0x800203 <keypad_PORT>
	//inic variables
	*keypad_DDR=(1<<KEYPADLINE_1) | (1<<KEYPADLINE_2) | (1<<KEYPADLINE_3) | (1<<KEYPADLINE_4);
     efe:	8b e8       	ldi	r24, 0x8B	; 139
     f00:	80 83       	st	Z, r24
	*keypad_PORT=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
     f02:	e0 91 03 02 	lds	r30, 0x0203	; 0x800203 <keypad_PORT>
     f06:	f0 91 04 02 	lds	r31, 0x0204	; 0x800204 <keypad_PORT+0x1>
     f0a:	84 e7       	ldi	r24, 0x74	; 116
     f0c:	80 83       	st	Z, r24
	keypad_datai.line_1=keypad_dataf.line_1=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
     f0e:	a5 e0       	ldi	r26, 0x05	; 5
     f10:	b2 e0       	ldi	r27, 0x02	; 2
     f12:	8c 93       	st	X, r24
     f14:	e9 e0       	ldi	r30, 0x09	; 9
     f16:	f2 e0       	ldi	r31, 0x02	; 2
     f18:	80 83       	st	Z, r24
	keypad_datai.line_2=keypad_dataf.line_2=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
     f1a:	11 96       	adiw	r26, 0x01	; 1
     f1c:	8c 93       	st	X, r24
     f1e:	11 97       	sbiw	r26, 0x01	; 1
     f20:	81 83       	std	Z+1, r24	; 0x01
	keypad_datai.line_3=keypad_dataf.line_3=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
     f22:	12 96       	adiw	r26, 0x02	; 2
     f24:	8c 93       	st	X, r24
     f26:	12 97       	sbiw	r26, 0x02	; 2
     f28:	82 83       	std	Z+2, r24	; 0x02
	keypad_datai.line_4=keypad_dataf.line_4=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
     f2a:	13 96       	adiw	r26, 0x03	; 3
     f2c:	8c 93       	st	X, r24
     f2e:	83 83       	std	Z+3, r24	; 0x03
	KEYPADSTRINGINDEX=0;
     f30:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <KEYPADSTRINGINDEX>
	//Direccionar apontadores para PROTOTIPOS
	keypad.getkey=KEYPAD_getkey;
	keypad.get=KEYPAD_get;
	keypad.flush=KEYPAD_flush;
	SREG=tSREG;
     f34:	2f bf       	out	0x3f, r18	; 63
	//
	*keypad_PORT|=(1<<KEYPADLINE_1) | (1<<KEYPADLINE_2) | (1<<KEYPADLINE_3) | (1<<KEYPADLINE_4);
     f36:	e0 91 03 02 	lds	r30, 0x0203	; 0x800203 <keypad_PORT>
     f3a:	f0 91 04 02 	lds	r31, 0x0204	; 0x800204 <keypad_PORT+0x1>
     f3e:	80 81       	ld	r24, Z
     f40:	8b 68       	ori	r24, 0x8B	; 139
     f42:	80 83       	st	Z, r24
	//Going to use pull down method.
	return keypad;
     f44:	23 e1       	ldi	r18, 0x13	; 19
     f46:	36 e0       	ldi	r19, 0x06	; 6
     f48:	3a 83       	std	Y+2, r19	; 0x02
     f4a:	29 83       	std	Y+1, r18	; 0x01
     f4c:	40 e4       	ldi	r20, 0x40	; 64
     f4e:	57 e0       	ldi	r21, 0x07	; 7
     f50:	5c 83       	std	Y+4, r21	; 0x04
     f52:	4b 83       	std	Y+3, r20	; 0x03
     f54:	65 e0       	ldi	r22, 0x05	; 5
     f56:	76 e0       	ldi	r23, 0x06	; 6
     f58:	7e 83       	std	Y+6, r23	; 0x06
     f5a:	6d 83       	std	Y+5, r22	; 0x05
     f5c:	3a 81       	ldd	r19, Y+2	; 0x02
     f5e:	5c 81       	ldd	r21, Y+4	; 0x04
     f60:	7e 81       	ldd	r23, Y+6	; 0x06
}
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	26 96       	adiw	r28, 0x06	; 6
     f68:	0f b6       	in	r0, 0x3f	; 63
     f6a:	f8 94       	cli
     f6c:	de bf       	out	0x3e, r29	; 62
     f6e:	0f be       	out	0x3f, r0	; 63
     f70:	cd bf       	out	0x3d, r28	; 61
     f72:	df 91       	pop	r29
     f74:	cf 91       	pop	r28
     f76:	08 95       	ret

00000f78 <LCD0_write>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f78:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <lcd0_PORT>
     f7c:	f0 91 33 02 	lds	r31, 0x0233	; 0x800233 <lcd0_PORT+0x1>
     f80:	90 81       	ld	r25, Z
     f82:	9d 7f       	andi	r25, 0xFD	; 253
     f84:	90 83       	st	Z, r25
     f86:	67 2b       	or	r22, r23
     f88:	41 f0       	breq	.+16     	; 0xf9a <LCD0_write+0x22>
     f8a:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <lcd0_PORT>
     f8e:	f0 91 33 02 	lds	r31, 0x0233	; 0x800233 <lcd0_PORT+0x1>
     f92:	90 81       	ld	r25, Z
     f94:	91 60       	ori	r25, 0x01	; 1
     f96:	90 83       	st	Z, r25
     f98:	07 c0       	rjmp	.+14     	; 0xfa8 <LCD0_write+0x30>
     f9a:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <lcd0_PORT>
     f9e:	f0 91 33 02 	lds	r31, 0x0233	; 0x800233 <lcd0_PORT+0x1>
     fa2:	90 81       	ld	r25, Z
     fa4:	9e 7f       	andi	r25, 0xFE	; 254
     fa6:	90 83       	st	Z, r25
     fa8:	e0 91 2f 02 	lds	r30, 0x022F	; 0x80022f <lcd0_DDR>
     fac:	f0 91 30 02 	lds	r31, 0x0230	; 0x800230 <lcd0_DDR+0x1>
     fb0:	90 81       	ld	r25, Z
     fb2:	90 6f       	ori	r25, 0xF0	; 240
     fb4:	90 83       	st	Z, r25
     fb6:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <lcd0_PORT>
     fba:	f0 91 33 02 	lds	r31, 0x0233	; 0x800233 <lcd0_PORT+0x1>
     fbe:	90 81       	ld	r25, Z
     fc0:	94 60       	ori	r25, 0x04	; 4
     fc2:	90 83       	st	Z, r25
     fc4:	88 23       	and	r24, r24
     fc6:	44 f4       	brge	.+16     	; 0xfd8 <LCD0_write+0x60>
     fc8:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <lcd0_PORT>
     fcc:	f0 91 33 02 	lds	r31, 0x0233	; 0x800233 <lcd0_PORT+0x1>
     fd0:	90 81       	ld	r25, Z
     fd2:	90 68       	ori	r25, 0x80	; 128
     fd4:	90 83       	st	Z, r25
     fd6:	07 c0       	rjmp	.+14     	; 0xfe6 <LCD0_write+0x6e>
     fd8:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <lcd0_PORT>
     fdc:	f0 91 33 02 	lds	r31, 0x0233	; 0x800233 <lcd0_PORT+0x1>
     fe0:	90 81       	ld	r25, Z
     fe2:	9f 77       	andi	r25, 0x7F	; 127
     fe4:	90 83       	st	Z, r25
     fe6:	86 ff       	sbrs	r24, 6
     fe8:	08 c0       	rjmp	.+16     	; 0xffa <LCD0_write+0x82>
     fea:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <lcd0_PORT>
     fee:	f0 91 33 02 	lds	r31, 0x0233	; 0x800233 <lcd0_PORT+0x1>
     ff2:	90 81       	ld	r25, Z
     ff4:	90 64       	ori	r25, 0x40	; 64
     ff6:	90 83       	st	Z, r25
     ff8:	07 c0       	rjmp	.+14     	; 0x1008 <LCD0_write+0x90>
     ffa:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <lcd0_PORT>
     ffe:	f0 91 33 02 	lds	r31, 0x0233	; 0x800233 <lcd0_PORT+0x1>
    1002:	90 81       	ld	r25, Z
    1004:	9f 7b       	andi	r25, 0xBF	; 191
    1006:	90 83       	st	Z, r25
    1008:	85 ff       	sbrs	r24, 5
    100a:	08 c0       	rjmp	.+16     	; 0x101c <LCD0_write+0xa4>
    100c:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <lcd0_PORT>
    1010:	f0 91 33 02 	lds	r31, 0x0233	; 0x800233 <lcd0_PORT+0x1>
    1014:	90 81       	ld	r25, Z
    1016:	90 62       	ori	r25, 0x20	; 32
    1018:	90 83       	st	Z, r25
    101a:	07 c0       	rjmp	.+14     	; 0x102a <LCD0_write+0xb2>
    101c:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <lcd0_PORT>
    1020:	f0 91 33 02 	lds	r31, 0x0233	; 0x800233 <lcd0_PORT+0x1>
    1024:	90 81       	ld	r25, Z
    1026:	9f 7d       	andi	r25, 0xDF	; 223
    1028:	90 83       	st	Z, r25
    102a:	84 ff       	sbrs	r24, 4
    102c:	08 c0       	rjmp	.+16     	; 0x103e <LCD0_write+0xc6>
    102e:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <lcd0_PORT>
    1032:	f0 91 33 02 	lds	r31, 0x0233	; 0x800233 <lcd0_PORT+0x1>
    1036:	90 81       	ld	r25, Z
    1038:	90 61       	ori	r25, 0x10	; 16
    103a:	90 83       	st	Z, r25
    103c:	07 c0       	rjmp	.+14     	; 0x104c <LCD0_write+0xd4>
    103e:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <lcd0_PORT>
    1042:	f0 91 33 02 	lds	r31, 0x0233	; 0x800233 <lcd0_PORT+0x1>
    1046:	90 81       	ld	r25, Z
    1048:	9f 7e       	andi	r25, 0xEF	; 239
    104a:	90 83       	st	Z, r25
    104c:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <lcd0_PORT>
    1050:	f0 91 33 02 	lds	r31, 0x0233	; 0x800233 <lcd0_PORT+0x1>
    1054:	90 81       	ld	r25, Z
    1056:	9b 7f       	andi	r25, 0xFB	; 251
    1058:	90 83       	st	Z, r25
    105a:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <lcd0_PORT>
    105e:	f0 91 33 02 	lds	r31, 0x0233	; 0x800233 <lcd0_PORT+0x1>
    1062:	90 81       	ld	r25, Z
    1064:	94 60       	ori	r25, 0x04	; 4
    1066:	90 83       	st	Z, r25
    1068:	83 ff       	sbrs	r24, 3
    106a:	08 c0       	rjmp	.+16     	; 0x107c <LCD0_write+0x104>
    106c:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <lcd0_PORT>
    1070:	f0 91 33 02 	lds	r31, 0x0233	; 0x800233 <lcd0_PORT+0x1>
    1074:	90 81       	ld	r25, Z
    1076:	90 68       	ori	r25, 0x80	; 128
    1078:	90 83       	st	Z, r25
    107a:	07 c0       	rjmp	.+14     	; 0x108a <LCD0_write+0x112>
    107c:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <lcd0_PORT>
    1080:	f0 91 33 02 	lds	r31, 0x0233	; 0x800233 <lcd0_PORT+0x1>
    1084:	90 81       	ld	r25, Z
    1086:	9f 77       	andi	r25, 0x7F	; 127
    1088:	90 83       	st	Z, r25
    108a:	82 ff       	sbrs	r24, 2
    108c:	08 c0       	rjmp	.+16     	; 0x109e <LCD0_write+0x126>
    108e:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <lcd0_PORT>
    1092:	f0 91 33 02 	lds	r31, 0x0233	; 0x800233 <lcd0_PORT+0x1>
    1096:	90 81       	ld	r25, Z
    1098:	90 64       	ori	r25, 0x40	; 64
    109a:	90 83       	st	Z, r25
    109c:	07 c0       	rjmp	.+14     	; 0x10ac <LCD0_write+0x134>
    109e:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <lcd0_PORT>
    10a2:	f0 91 33 02 	lds	r31, 0x0233	; 0x800233 <lcd0_PORT+0x1>
    10a6:	90 81       	ld	r25, Z
    10a8:	9f 7b       	andi	r25, 0xBF	; 191
    10aa:	90 83       	st	Z, r25
    10ac:	81 ff       	sbrs	r24, 1
    10ae:	08 c0       	rjmp	.+16     	; 0x10c0 <LCD0_write+0x148>
    10b0:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <lcd0_PORT>
    10b4:	f0 91 33 02 	lds	r31, 0x0233	; 0x800233 <lcd0_PORT+0x1>
    10b8:	90 81       	ld	r25, Z
    10ba:	90 62       	ori	r25, 0x20	; 32
    10bc:	90 83       	st	Z, r25
    10be:	07 c0       	rjmp	.+14     	; 0x10ce <LCD0_write+0x156>
    10c0:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <lcd0_PORT>
    10c4:	f0 91 33 02 	lds	r31, 0x0233	; 0x800233 <lcd0_PORT+0x1>
    10c8:	90 81       	ld	r25, Z
    10ca:	9f 7d       	andi	r25, 0xDF	; 223
    10cc:	90 83       	st	Z, r25
    10ce:	80 ff       	sbrs	r24, 0
    10d0:	08 c0       	rjmp	.+16     	; 0x10e2 <LCD0_write+0x16a>
    10d2:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <lcd0_PORT>
    10d6:	f0 91 33 02 	lds	r31, 0x0233	; 0x800233 <lcd0_PORT+0x1>
    10da:	80 81       	ld	r24, Z
    10dc:	80 61       	ori	r24, 0x10	; 16
    10de:	80 83       	st	Z, r24
    10e0:	07 c0       	rjmp	.+14     	; 0x10f0 <LCD0_write+0x178>
    10e2:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <lcd0_PORT>
    10e6:	f0 91 33 02 	lds	r31, 0x0233	; 0x800233 <lcd0_PORT+0x1>
    10ea:	80 81       	ld	r24, Z
    10ec:	8f 7e       	andi	r24, 0xEF	; 239
    10ee:	80 83       	st	Z, r24
    10f0:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <lcd0_PORT>
    10f4:	f0 91 33 02 	lds	r31, 0x0233	; 0x800233 <lcd0_PORT+0x1>
    10f8:	80 81       	ld	r24, Z
    10fa:	8b 7f       	andi	r24, 0xFB	; 251
    10fc:	80 83       	st	Z, r24
    10fe:	08 95       	ret

00001100 <LCD0_read>:
    1100:	e0 91 2f 02 	lds	r30, 0x022F	; 0x80022f <lcd0_DDR>
    1104:	f0 91 30 02 	lds	r31, 0x0230	; 0x800230 <lcd0_DDR+0x1>
    1108:	20 81       	ld	r18, Z
    110a:	2f 70       	andi	r18, 0x0F	; 15
    110c:	20 83       	st	Z, r18
    110e:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <lcd0_PORT>
    1112:	f0 91 33 02 	lds	r31, 0x0233	; 0x800233 <lcd0_PORT+0x1>
    1116:	20 81       	ld	r18, Z
    1118:	20 6f       	ori	r18, 0xF0	; 240
    111a:	20 83       	st	Z, r18
    111c:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <lcd0_PORT>
    1120:	f0 91 33 02 	lds	r31, 0x0233	; 0x800233 <lcd0_PORT+0x1>
    1124:	20 81       	ld	r18, Z
    1126:	22 60       	ori	r18, 0x02	; 2
    1128:	20 83       	st	Z, r18
    112a:	89 2b       	or	r24, r25
    112c:	41 f0       	breq	.+16     	; 0x113e <LCD0_read+0x3e>
    112e:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <lcd0_PORT>
    1132:	f0 91 33 02 	lds	r31, 0x0233	; 0x800233 <lcd0_PORT+0x1>
    1136:	80 81       	ld	r24, Z
    1138:	81 60       	ori	r24, 0x01	; 1
    113a:	80 83       	st	Z, r24
    113c:	07 c0       	rjmp	.+14     	; 0x114c <LCD0_read+0x4c>
    113e:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <lcd0_PORT>
    1142:	f0 91 33 02 	lds	r31, 0x0233	; 0x800233 <lcd0_PORT+0x1>
    1146:	80 81       	ld	r24, Z
    1148:	8e 7f       	andi	r24, 0xFE	; 254
    114a:	80 83       	st	Z, r24
    114c:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <lcd0_PORT>
    1150:	f0 91 33 02 	lds	r31, 0x0233	; 0x800233 <lcd0_PORT+0x1>
    1154:	80 81       	ld	r24, Z
    1156:	84 60       	ori	r24, 0x04	; 4
    1158:	80 83       	st	Z, r24
    115a:	e0 91 28 02 	lds	r30, 0x0228	; 0x800228 <lcd0_PIN>
    115e:	f0 91 29 02 	lds	r31, 0x0229	; 0x800229 <lcd0_PIN+0x1>
    1162:	80 81       	ld	r24, Z
    1164:	88 23       	and	r24, r24
    1166:	14 f0       	brlt	.+4      	; 0x116c <LCD0_read+0x6c>
    1168:	80 e0       	ldi	r24, 0x00	; 0
    116a:	01 c0       	rjmp	.+2      	; 0x116e <LCD0_read+0x6e>
    116c:	80 e8       	ldi	r24, 0x80	; 128
    116e:	90 81       	ld	r25, Z
    1170:	96 ff       	sbrs	r25, 6
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <LCD0_read+0x78>
    1174:	80 64       	ori	r24, 0x40	; 64
    1176:	01 c0       	rjmp	.+2      	; 0x117a <LCD0_read+0x7a>
    1178:	8f 7b       	andi	r24, 0xBF	; 191
    117a:	90 81       	ld	r25, Z
    117c:	95 ff       	sbrs	r25, 5
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <LCD0_read+0x84>
    1180:	80 62       	ori	r24, 0x20	; 32
    1182:	01 c0       	rjmp	.+2      	; 0x1186 <LCD0_read+0x86>
    1184:	8f 7d       	andi	r24, 0xDF	; 223
    1186:	90 81       	ld	r25, Z
    1188:	94 ff       	sbrs	r25, 4
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <LCD0_read+0x90>
    118c:	80 61       	ori	r24, 0x10	; 16
    118e:	01 c0       	rjmp	.+2      	; 0x1192 <LCD0_read+0x92>
    1190:	8f 7e       	andi	r24, 0xEF	; 239
    1192:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <lcd0_PORT>
    1196:	f0 91 33 02 	lds	r31, 0x0233	; 0x800233 <lcd0_PORT+0x1>
    119a:	90 81       	ld	r25, Z
    119c:	9b 7f       	andi	r25, 0xFB	; 251
    119e:	90 83       	st	Z, r25
    11a0:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <lcd0_PORT>
    11a4:	f0 91 33 02 	lds	r31, 0x0233	; 0x800233 <lcd0_PORT+0x1>
    11a8:	90 81       	ld	r25, Z
    11aa:	94 60       	ori	r25, 0x04	; 4
    11ac:	90 83       	st	Z, r25
    11ae:	e0 91 28 02 	lds	r30, 0x0228	; 0x800228 <lcd0_PIN>
    11b2:	f0 91 29 02 	lds	r31, 0x0229	; 0x800229 <lcd0_PIN+0x1>
    11b6:	90 81       	ld	r25, Z
    11b8:	99 23       	and	r25, r25
    11ba:	14 f4       	brge	.+4      	; 0x11c0 <LCD0_read+0xc0>
    11bc:	88 60       	ori	r24, 0x08	; 8
    11be:	01 c0       	rjmp	.+2      	; 0x11c2 <LCD0_read+0xc2>
    11c0:	87 7f       	andi	r24, 0xF7	; 247
    11c2:	90 81       	ld	r25, Z
    11c4:	96 ff       	sbrs	r25, 6
    11c6:	02 c0       	rjmp	.+4      	; 0x11cc <LCD0_read+0xcc>
    11c8:	84 60       	ori	r24, 0x04	; 4
    11ca:	01 c0       	rjmp	.+2      	; 0x11ce <LCD0_read+0xce>
    11cc:	8b 7f       	andi	r24, 0xFB	; 251
    11ce:	90 81       	ld	r25, Z
    11d0:	95 ff       	sbrs	r25, 5
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <LCD0_read+0xd8>
    11d4:	82 60       	ori	r24, 0x02	; 2
    11d6:	01 c0       	rjmp	.+2      	; 0x11da <LCD0_read+0xda>
    11d8:	8d 7f       	andi	r24, 0xFD	; 253
    11da:	90 81       	ld	r25, Z
    11dc:	94 ff       	sbrs	r25, 4
    11de:	02 c0       	rjmp	.+4      	; 0x11e4 <LCD0_read+0xe4>
    11e0:	81 60       	ori	r24, 0x01	; 1
    11e2:	01 c0       	rjmp	.+2      	; 0x11e6 <LCD0_read+0xe6>
    11e4:	8e 7f       	andi	r24, 0xFE	; 254
    11e6:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <lcd0_PORT>
    11ea:	f0 91 33 02 	lds	r31, 0x0233	; 0x800233 <lcd0_PORT+0x1>
    11ee:	90 81       	ld	r25, Z
    11f0:	9b 7f       	andi	r25, 0xFB	; 251
    11f2:	90 83       	st	Z, r25
    11f4:	08 95       	ret

000011f6 <LCD0_BF>:
    11f6:	cf 93       	push	r28
    11f8:	df 93       	push	r29
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	0e 94 80 08 	call	0x1100	; 0x1100 <LCD0_read>
    1202:	cb e0       	ldi	r28, 0x0B	; 11
    1204:	d0 e0       	ldi	r29, 0x00	; 0
    1206:	06 c0       	rjmp	.+12     	; 0x1214 <LCD0_BF+0x1e>
    1208:	80 e0       	ldi	r24, 0x00	; 0
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	0e 94 80 08 	call	0x1100	; 0x1100 <LCD0_read>
    1210:	21 97       	sbiw	r28, 0x01	; 1
    1212:	11 f0       	breq	.+4      	; 0x1218 <LCD0_BF+0x22>
    1214:	88 23       	and	r24, r24
    1216:	c4 f3       	brlt	.-16     	; 0x1208 <LCD0_BF+0x12>
    1218:	df 91       	pop	r29
    121a:	cf 91       	pop	r28
    121c:	08 95       	ret

0000121e <LCD0_putch>:
    121e:	61 e0       	ldi	r22, 0x01	; 1
    1220:	70 e0       	ldi	r23, 0x00	; 0
    1222:	0e 94 bc 07 	call	0xf78	; 0xf78 <LCD0_write>
    1226:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <LCD0_BF>
    122a:	08 95       	ret

0000122c <LCD0_getch>:
    122c:	cf 93       	push	r28
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	0e 94 80 08 	call	0x1100	; 0x1100 <LCD0_read>
    1236:	c8 2f       	mov	r28, r24
    1238:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <LCD0_BF>
    123c:	8c 2f       	mov	r24, r28
    123e:	cf 91       	pop	r28
    1240:	08 95       	ret

00001242 <LCD0_string>:
    1242:	cf 93       	push	r28
    1244:	df 93       	push	r29
    1246:	ec 01       	movw	r28, r24
    1248:	88 81       	ld	r24, Y
    124a:	88 23       	and	r24, r24
    124c:	51 f0       	breq	.+20     	; 0x1262 <LCD0_string+0x20>
    124e:	21 96       	adiw	r28, 0x01	; 1
    1250:	61 e0       	ldi	r22, 0x01	; 1
    1252:	70 e0       	ldi	r23, 0x00	; 0
    1254:	0e 94 bc 07 	call	0xf78	; 0xf78 <LCD0_write>
    1258:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <LCD0_BF>
    125c:	89 91       	ld	r24, Y+
    125e:	81 11       	cpse	r24, r1
    1260:	f7 cf       	rjmp	.-18     	; 0x1250 <LCD0_string+0xe>
    1262:	df 91       	pop	r29
    1264:	cf 91       	pop	r28
    1266:	08 95       	ret

00001268 <LCD0_string_size>:
    1268:	0f 93       	push	r16
    126a:	1f 93       	push	r17
    126c:	cf 93       	push	r28
    126e:	df 93       	push	r29
    1270:	fc 01       	movw	r30, r24
    1272:	d6 2f       	mov	r29, r22
    1274:	80 81       	ld	r24, Z
    1276:	88 23       	and	r24, r24
    1278:	51 f0       	breq	.+20     	; 0x128e <LCD0_string_size+0x26>
    127a:	8f 01       	movw	r16, r30
    127c:	0f 5f       	subi	r16, 0xFF	; 255
    127e:	1f 4f       	sbci	r17, 0xFF	; 255
    1280:	61 11       	cpse	r22, r1
    1282:	09 c0       	rjmp	.+18     	; 0x1296 <LCD0_string_size+0x2e>
    1284:	1f c0       	rjmp	.+62     	; 0x12c4 <LCD0_string_size+0x5c>
    1286:	cf 5f       	subi	r28, 0xFF	; 255
    1288:	dc 17       	cp	r29, r28
    128a:	30 f4       	brcc	.+12     	; 0x1298 <LCD0_string_size+0x30>
    128c:	01 c0       	rjmp	.+2      	; 0x1290 <LCD0_string_size+0x28>
    128e:	c0 e0       	ldi	r28, 0x00	; 0
    1290:	cd 17       	cp	r28, r29
    1292:	70 f0       	brcs	.+28     	; 0x12b0 <LCD0_string_size+0x48>
    1294:	17 c0       	rjmp	.+46     	; 0x12c4 <LCD0_string_size+0x5c>
    1296:	c1 e0       	ldi	r28, 0x01	; 1
    1298:	61 e0       	ldi	r22, 0x01	; 1
    129a:	70 e0       	ldi	r23, 0x00	; 0
    129c:	0e 94 bc 07 	call	0xf78	; 0xf78 <LCD0_write>
    12a0:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <LCD0_BF>
    12a4:	f8 01       	movw	r30, r16
    12a6:	81 91       	ld	r24, Z+
    12a8:	8f 01       	movw	r16, r30
    12aa:	81 11       	cpse	r24, r1
    12ac:	ec cf       	rjmp	.-40     	; 0x1286 <LCD0_string_size+0x1e>
    12ae:	f0 cf       	rjmp	.-32     	; 0x1290 <LCD0_string_size+0x28>
    12b0:	cf 5f       	subi	r28, 0xFF	; 255
    12b2:	61 e0       	ldi	r22, 0x01	; 1
    12b4:	70 e0       	ldi	r23, 0x00	; 0
    12b6:	80 e2       	ldi	r24, 0x20	; 32
    12b8:	0e 94 bc 07 	call	0xf78	; 0xf78 <LCD0_write>
    12bc:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <LCD0_BF>
    12c0:	cd 17       	cp	r28, r29
    12c2:	b0 f3       	brcs	.-20     	; 0x12b0 <LCD0_string_size+0x48>
    12c4:	df 91       	pop	r29
    12c6:	cf 91       	pop	r28
    12c8:	1f 91       	pop	r17
    12ca:	0f 91       	pop	r16
    12cc:	08 95       	ret

000012ce <LCD0_hspace>:
    12ce:	cf 93       	push	r28
    12d0:	c8 2f       	mov	r28, r24
    12d2:	88 23       	and	r24, r24
    12d4:	49 f0       	breq	.+18     	; 0x12e8 <LCD0_hspace+0x1a>
    12d6:	61 e0       	ldi	r22, 0x01	; 1
    12d8:	70 e0       	ldi	r23, 0x00	; 0
    12da:	80 e2       	ldi	r24, 0x20	; 32
    12dc:	0e 94 bc 07 	call	0xf78	; 0xf78 <LCD0_write>
    12e0:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <LCD0_BF>
    12e4:	c1 50       	subi	r28, 0x01	; 1
    12e6:	b9 f7       	brne	.-18     	; 0x12d6 <LCD0_hspace+0x8>
    12e8:	cf 91       	pop	r28
    12ea:	08 95       	ret

000012ec <LCD0_gotoxy>:
    12ec:	26 2f       	mov	r18, r22
    12ee:	81 30       	cpi	r24, 0x01	; 1
    12f0:	91 05       	cpc	r25, r1
    12f2:	81 f0       	breq	.+32     	; 0x1314 <LCD0_gotoxy+0x28>
    12f4:	30 f0       	brcs	.+12     	; 0x1302 <LCD0_gotoxy+0x16>
    12f6:	82 30       	cpi	r24, 0x02	; 2
    12f8:	91 05       	cpc	r25, r1
    12fa:	a9 f0       	breq	.+42     	; 0x1326 <LCD0_gotoxy+0x3a>
    12fc:	03 97       	sbiw	r24, 0x03	; 3
    12fe:	e1 f0       	breq	.+56     	; 0x1338 <LCD0_gotoxy+0x4c>
    1300:	08 95       	ret
    1302:	60 e0       	ldi	r22, 0x00	; 0
    1304:	70 e0       	ldi	r23, 0x00	; 0
    1306:	80 e8       	ldi	r24, 0x80	; 128
    1308:	82 0f       	add	r24, r18
    130a:	0e 94 bc 07 	call	0xf78	; 0xf78 <LCD0_write>
    130e:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <LCD0_BF>
    1312:	08 95       	ret
    1314:	60 e0       	ldi	r22, 0x00	; 0
    1316:	70 e0       	ldi	r23, 0x00	; 0
    1318:	80 ec       	ldi	r24, 0xC0	; 192
    131a:	82 0f       	add	r24, r18
    131c:	0e 94 bc 07 	call	0xf78	; 0xf78 <LCD0_write>
    1320:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <LCD0_BF>
    1324:	08 95       	ret
    1326:	60 e0       	ldi	r22, 0x00	; 0
    1328:	70 e0       	ldi	r23, 0x00	; 0
    132a:	84 e9       	ldi	r24, 0x94	; 148
    132c:	82 0f       	add	r24, r18
    132e:	0e 94 bc 07 	call	0xf78	; 0xf78 <LCD0_write>
    1332:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <LCD0_BF>
    1336:	08 95       	ret
    1338:	60 e0       	ldi	r22, 0x00	; 0
    133a:	70 e0       	ldi	r23, 0x00	; 0
    133c:	84 ed       	ldi	r24, 0xD4	; 212
    133e:	82 0f       	add	r24, r18
    1340:	0e 94 bc 07 	call	0xf78	; 0xf78 <LCD0_write>
    1344:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <LCD0_BF>
    1348:	08 95       	ret

0000134a <LCD0_clear>:
    134a:	60 e0       	ldi	r22, 0x00	; 0
    134c:	70 e0       	ldi	r23, 0x00	; 0
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	0e 94 bc 07 	call	0xf78	; 0xf78 <LCD0_write>
    1354:	83 ef       	ldi	r24, 0xF3	; 243
    1356:	9b e0       	ldi	r25, 0x0B	; 11
    1358:	01 97       	sbiw	r24, 0x01	; 1
    135a:	f1 f7       	brne	.-4      	; 0x1358 <LCD0_clear+0xe>
    135c:	00 c0       	rjmp	.+0      	; 0x135e <LCD0_clear+0x14>
    135e:	00 00       	nop
    1360:	08 95       	ret

00001362 <LCD0_inic>:
	return lcd0;
}
void LCD0_inic(void)
{
	//LCD INIC
	*lcd0_DDR=(1<<RS)|(1<<RW)|(1<<EN)|(0<<NC);
    1362:	e0 91 2f 02 	lds	r30, 0x022F	; 0x80022f <lcd0_DDR>
    1366:	f0 91 30 02 	lds	r31, 0x0230	; 0x800230 <lcd0_DDR+0x1>
    136a:	87 e0       	ldi	r24, 0x07	; 7
    136c:	80 83       	st	Z, r24
	*lcd0_PORT=(1<<NC);
    136e:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <lcd0_PORT>
    1372:	f0 91 33 02 	lds	r31, 0x0233	; 0x800233 <lcd0_PORT+0x1>
    1376:	88 e0       	ldi	r24, 0x08	; 8
    1378:	80 83       	st	Z, r24
    137a:	2f ef       	ldi	r18, 0xFF	; 255
    137c:	89 ef       	ldi	r24, 0xF9	; 249
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	21 50       	subi	r18, 0x01	; 1
    1382:	80 40       	sbci	r24, 0x00	; 0
    1384:	90 40       	sbci	r25, 0x00	; 0
    1386:	e1 f7       	brne	.-8      	; 0x1380 <LCD0_inic+0x1e>
    1388:	00 c0       	rjmp	.+0      	; 0x138a <LCD0_inic+0x28>
    138a:	00 00       	nop
	/***INICIALIZACAO LCD**datasheet*/
	_delay_ms(40);
	LCD0_write(0x33,INST); //function set
    138c:	60 e0       	ldi	r22, 0x00	; 0
    138e:	70 e0       	ldi	r23, 0x00	; 0
    1390:	83 e3       	ldi	r24, 0x33	; 51
    1392:	0e 94 bc 07 	call	0xf78	; 0xf78 <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1396:	28 e6       	ldi	r18, 0x68	; 104
    1398:	2a 95       	dec	r18
    139a:	f1 f7       	brne	.-4      	; 0x1398 <LCD0_inic+0x36>
	_delay_us(39);
	LCD0_write(0x33,INST); //function set
    139c:	60 e0       	ldi	r22, 0x00	; 0
    139e:	70 e0       	ldi	r23, 0x00	; 0
    13a0:	83 e3       	ldi	r24, 0x33	; 51
    13a2:	0e 94 bc 07 	call	0xf78	; 0xf78 <LCD0_write>
    13a6:	88 e6       	ldi	r24, 0x68	; 104
    13a8:	8a 95       	dec	r24
    13aa:	f1 f7       	brne	.-4      	; 0x13a8 <LCD0_inic+0x46>
	_delay_us(39);
	LCD0_write(0x2B,INST); //function set
    13ac:	60 e0       	ldi	r22, 0x00	; 0
    13ae:	70 e0       	ldi	r23, 0x00	; 0
    13b0:	8b e2       	ldi	r24, 0x2B	; 43
    13b2:	0e 94 bc 07 	call	0xf78	; 0xf78 <LCD0_write>
    13b6:	92 e6       	ldi	r25, 0x62	; 98
    13b8:	9a 95       	dec	r25
    13ba:	f1 f7       	brne	.-4      	; 0x13b8 <LCD0_inic+0x56>
    13bc:	00 c0       	rjmp	.+0      	; 0x13be <LCD0_inic+0x5c>
	_delay_us(37);
	LCD0_write(0x0C,INST);// display on/off control
    13be:	60 e0       	ldi	r22, 0x00	; 0
    13c0:	70 e0       	ldi	r23, 0x00	; 0
    13c2:	8c e0       	ldi	r24, 0x0C	; 12
    13c4:	0e 94 bc 07 	call	0xf78	; 0xf78 <LCD0_write>
    13c8:	22 e6       	ldi	r18, 0x62	; 98
    13ca:	2a 95       	dec	r18
    13cc:	f1 f7       	brne	.-4      	; 0x13ca <LCD0_inic+0x68>
    13ce:	00 c0       	rjmp	.+0      	; 0x13d0 <LCD0_inic+0x6e>
	_delay_us(37);
	LCD0_write(0x01,INST);// clear display
    13d0:	60 e0       	ldi	r22, 0x00	; 0
    13d2:	70 e0       	ldi	r23, 0x00	; 0
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	0e 94 bc 07 	call	0xf78	; 0xf78 <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13da:	83 ef       	ldi	r24, 0xF3	; 243
    13dc:	9b e0       	ldi	r25, 0x0B	; 11
    13de:	01 97       	sbiw	r24, 0x01	; 1
    13e0:	f1 f7       	brne	.-4      	; 0x13de <LCD0_inic+0x7c>
    13e2:	00 c0       	rjmp	.+0      	; 0x13e4 <LCD0_inic+0x82>
    13e4:	00 00       	nop
	_delay_ms(1.53);
	LCD0_write(0x06,INST);// entry mode set (crazy settings)
    13e6:	60 e0       	ldi	r22, 0x00	; 0
    13e8:	70 e0       	ldi	r23, 0x00	; 0
    13ea:	86 e0       	ldi	r24, 0x06	; 6
    13ec:	0e 94 bc 07 	call	0xf78	; 0xf78 <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13f0:	92 e6       	ldi	r25, 0x62	; 98
    13f2:	9a 95       	dec	r25
    13f4:	f1 f7       	brne	.-4      	; 0x13f2 <LCD0_inic+0x90>
    13f6:	00 c0       	rjmp	.+0      	; 0x13f8 <LCD0_inic+0x96>
    13f8:	08 95       	ret

000013fa <LCD0enable>:
unsigned int LCD_ticks(unsigned int num);
/*
** procedure and function
*/
LCD0 LCD0enable(volatile uint8_t *ddr, volatile uint8_t *pin, volatile uint8_t *port)
{
    13fa:	1f 93       	push	r17
    13fc:	cf 93       	push	r28
    13fe:	df 93       	push	r29
    1400:	ec 01       	movw	r28, r24
	//LOCAL VARIABLES
	uint8_t tSREG;
	tSREG=SREG;
    1402:	1f b7       	in	r17, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    1404:	8f b7       	in	r24, 0x3f	; 63
    1406:	8f 77       	andi	r24, 0x7F	; 127
    1408:	8f bf       	out	0x3f, r24	; 63
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	LCD0 lcd0;
	//import parametros
	lcd0_DDR=ddr;
    140a:	70 93 30 02 	sts	0x0230, r23	; 0x800230 <lcd0_DDR+0x1>
    140e:	60 93 2f 02 	sts	0x022F, r22	; 0x80022f <lcd0_DDR>
	lcd0_PIN=pin;
    1412:	50 93 29 02 	sts	0x0229, r21	; 0x800229 <lcd0_PIN+0x1>
    1416:	40 93 28 02 	sts	0x0228, r20	; 0x800228 <lcd0_PIN>
	lcd0_PORT=port;
    141a:	30 93 33 02 	sts	0x0233, r19	; 0x800233 <lcd0_PORT+0x1>
    141e:	20 93 32 02 	sts	0x0232, r18	; 0x800232 <lcd0_PORT>
	//inic variables
	*lcd0_DDR=0x00;
    1422:	fb 01       	movw	r30, r22
    1424:	10 82       	st	Z, r1
	*lcd0_PORT=0xFF;
    1426:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <lcd0_PORT>
    142a:	f0 91 33 02 	lds	r31, 0x0233	; 0x800233 <lcd0_PORT+0x1>
    142e:	8f ef       	ldi	r24, 0xFF	; 255
    1430:	80 83       	st	Z, r24
	lcd0_detect=*lcd0_PIN & (1<<NC);
    1432:	e0 91 28 02 	lds	r30, 0x0228	; 0x800228 <lcd0_PIN>
    1436:	f0 91 29 02 	lds	r31, 0x0229	; 0x800229 <lcd0_PIN+0x1>
    143a:	80 81       	ld	r24, Z
    143c:	88 70       	andi	r24, 0x08	; 8
    143e:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <lcd0_detect>
	lcd0.hspace=LCD0_hspace;
	lcd0.clear=LCD0_clear;
	lcd0.gotoxy=LCD0_gotoxy;
	lcd0.reboot=LCD0_reboot;
	//LCD INIC
	LCD0_inic();
    1442:	0e 94 b1 09 	call	0x1362	; 0x1362 <LCD0_inic>
	SREG=tSREG;
    1446:	1f bf       	out	0x3f, r17	; 63
	//
	return lcd0;
    1448:	8c eb       	ldi	r24, 0xBC	; 188
    144a:	97 e0       	ldi	r25, 0x07	; 7
    144c:	99 83       	std	Y+1, r25	; 0x01
    144e:	88 83       	st	Y, r24
    1450:	80 e8       	ldi	r24, 0x80	; 128
    1452:	98 e0       	ldi	r25, 0x08	; 8
    1454:	9b 83       	std	Y+3, r25	; 0x03
    1456:	8a 83       	std	Y+2, r24	; 0x02
    1458:	8b ef       	ldi	r24, 0xFB	; 251
    145a:	98 e0       	ldi	r25, 0x08	; 8
    145c:	9d 83       	std	Y+5, r25	; 0x05
    145e:	8c 83       	std	Y+4, r24	; 0x04
    1460:	8f e0       	ldi	r24, 0x0F	; 15
    1462:	99 e0       	ldi	r25, 0x09	; 9
    1464:	9f 83       	std	Y+7, r25	; 0x07
    1466:	8e 83       	std	Y+6, r24	; 0x06
    1468:	86 e1       	ldi	r24, 0x16	; 22
    146a:	99 e0       	ldi	r25, 0x09	; 9
    146c:	99 87       	std	Y+9, r25	; 0x09
    146e:	88 87       	std	Y+8, r24	; 0x08
    1470:	81 e2       	ldi	r24, 0x21	; 33
    1472:	99 e0       	ldi	r25, 0x09	; 9
    1474:	9b 87       	std	Y+11, r25	; 0x0b
    1476:	8a 87       	std	Y+10, r24	; 0x0a
    1478:	84 e3       	ldi	r24, 0x34	; 52
    147a:	99 e0       	ldi	r25, 0x09	; 9
    147c:	9d 87       	std	Y+13, r25	; 0x0d
    147e:	8c 87       	std	Y+12, r24	; 0x0c
    1480:	87 e6       	ldi	r24, 0x67	; 103
    1482:	99 e0       	ldi	r25, 0x09	; 9
    1484:	9f 87       	std	Y+15, r25	; 0x0f
    1486:	8e 87       	std	Y+14, r24	; 0x0e
    1488:	85 ea       	ldi	r24, 0xA5	; 165
    148a:	99 e0       	ldi	r25, 0x09	; 9
    148c:	99 8b       	std	Y+17, r25	; 0x11
    148e:	88 8b       	std	Y+16, r24	; 0x10
    1490:	86 e7       	ldi	r24, 0x76	; 118
    1492:	99 e0       	ldi	r25, 0x09	; 9
    1494:	9b 8b       	std	Y+19, r25	; 0x13
    1496:	8a 8b       	std	Y+18, r24	; 0x12
    1498:	85 e5       	ldi	r24, 0x55	; 85
    149a:	9a e0       	ldi	r25, 0x0A	; 10
    149c:	9d 8b       	std	Y+21, r25	; 0x15
    149e:	8c 8b       	std	Y+20, r24	; 0x14
}
    14a0:	ce 01       	movw	r24, r28
    14a2:	df 91       	pop	r29
    14a4:	cf 91       	pop	r28
    14a6:	1f 91       	pop	r17
    14a8:	08 95       	ret

000014aa <LCD0_reboot>:
	*lcd0_PORT|=(1<<EN);
	LCD_ticks(num);
	*lcd0_PORT&=~(1<<EN);
}
void LCD0_reboot(void)
{
    14aa:	cf 93       	push	r28
	//low high detect pin NC
	uint8_t i;
	uint8_t tmp;
	tmp=*lcd0_PIN & (1<<NC);
    14ac:	e0 91 28 02 	lds	r30, 0x0228	; 0x800228 <lcd0_PIN>
    14b0:	f0 91 29 02 	lds	r31, 0x0229	; 0x800229 <lcd0_PIN+0x1>
    14b4:	c0 81       	ld	r28, Z
    14b6:	c8 70       	andi	r28, 0x08	; 8
	i=tmp^lcd0_detect;
    14b8:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <lcd0_detect>
    14bc:	8c 27       	eor	r24, r28
	i&=tmp;
	if(i)
    14be:	8c 23       	and	r24, r28
    14c0:	11 f0       	breq	.+4      	; 0x14c6 <LCD0_reboot+0x1c>
		LCD0_inic();
    14c2:	0e 94 b1 09 	call	0x1362	; 0x1362 <LCD0_inic>
	lcd0_detect=tmp;
    14c6:	c0 93 31 02 	sts	0x0231, r28	; 0x800231 <lcd0_detect>
}
    14ca:	cf 91       	pop	r28
    14cc:	08 95       	ret

000014ce <LFSMquant>:
	}//End switch
	return status;
}
/***quant***/
uint8_t LFSMquant(struct lfsm *r)
{
    14ce:	ef 92       	push	r14
    14d0:	ff 92       	push	r15
    14d2:	0f 93       	push	r16
    14d4:	1f 93       	push	r17
    14d6:	cf 93       	push	r28
    14d8:	df 93       	push	r29
	uint8_t i1;
	uint8_t sizeblock=r->sizeblock;
    14da:	dc 01       	movw	r26, r24
    14dc:	13 96       	adiw	r26, 0x03	; 3
    14de:	ec 90       	ld	r14, X
    14e0:	13 97       	sbiw	r26, 0x03	; 3
	struct lfsmdata* pdata=&data;
	uint8_t programmed;
	for(i1=ZERO,programmed=ZERO;i1<r->sizeeeprom;i1++){
    14e2:	12 96       	adiw	r26, 0x02	; 2
    14e4:	2c 91       	ld	r18, X
    14e6:	22 23       	and	r18, r18
    14e8:	e9 f0       	breq	.+58     	; 0x1524 <LFSMquant+0x56>
    14ea:	8c 01       	movw	r16, r24
    14ec:	d0 e0       	ldi	r29, 0x00	; 0
    14ee:	c0 e0       	ldi	r28, 0x00	; 0
		r->eeprom->read_block(pdata, (const void*) (i1*sizeblock), sizeblock);
    14f0:	f1 2c       	mov	r15, r1
    14f2:	ce 9d       	mul	r28, r14
    14f4:	b0 01       	movw	r22, r0
    14f6:	cf 9d       	mul	r28, r15
    14f8:	70 0d       	add	r23, r0
    14fa:	11 24       	eor	r1, r1
    14fc:	d8 01       	movw	r26, r16
    14fe:	ed 91       	ld	r30, X+
    1500:	fc 91       	ld	r31, X
    1502:	00 8c       	ldd	r0, Z+24	; 0x18
    1504:	f1 8d       	ldd	r31, Z+25	; 0x19
    1506:	e0 2d       	mov	r30, r0
    1508:	a7 01       	movw	r20, r14
    150a:	80 e1       	ldi	r24, 0x10	; 16
    150c:	92 e0       	ldi	r25, 0x02	; 2
    150e:	09 95       	icall
		if(pdata->page!=EMPTY){ //Count memory used
    1510:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <data>
    1514:	81 11       	cpse	r24, r1
			programmed++;
    1516:	df 5f       	subi	r29, 0xFF	; 255
{
	uint8_t i1;
	uint8_t sizeblock=r->sizeblock;
	struct lfsmdata* pdata=&data;
	uint8_t programmed;
	for(i1=ZERO,programmed=ZERO;i1<r->sizeeeprom;i1++){
    1518:	cf 5f       	subi	r28, 0xFF	; 255
    151a:	f8 01       	movw	r30, r16
    151c:	82 81       	ldd	r24, Z+2	; 0x02
    151e:	c8 17       	cp	r28, r24
    1520:	40 f3       	brcs	.-48     	; 0x14f2 <LFSMquant+0x24>
    1522:	01 c0       	rjmp	.+2      	; 0x1526 <LFSMquant+0x58>
    1524:	d0 e0       	ldi	r29, 0x00	; 0
		if(pdata->page!=EMPTY){ //Count memory used
			programmed++;
		}
	}
	return programmed;
}
    1526:	8d 2f       	mov	r24, r29
    1528:	df 91       	pop	r29
    152a:	cf 91       	pop	r28
    152c:	1f 91       	pop	r17
    152e:	0f 91       	pop	r16
    1530:	ff 90       	pop	r15
    1532:	ef 90       	pop	r14
    1534:	08 95       	ret

00001536 <LFSMdeleteall>:
	}//End switch
	return status;
}//End main
/***deleteall***/
uint8_t LFSMdeleteall(struct lfsm *r)
{
    1536:	bf 92       	push	r11
    1538:	cf 92       	push	r12
    153a:	df 92       	push	r13
    153c:	ef 92       	push	r14
    153e:	ff 92       	push	r15
    1540:	0f 93       	push	r16
    1542:	1f 93       	push	r17
    1544:	cf 93       	push	r28
    1546:	df 93       	push	r29
    1548:	8c 01       	movw	r16, r24
	uint8_t i1;
	uint8_t status=ZERO;
	uint8_t sizeblock=r->sizeblock;
    154a:	dc 01       	movw	r26, r24
    154c:	13 96       	adiw	r26, 0x03	; 3
    154e:	ec 90       	ld	r14, X
    1550:	13 97       	sbiw	r26, 0x03	; 3
	struct lfsmdata* pdata=&data;
	for(i1=ZERO;i1<r->sizeeeprom;i1++){
    1552:	12 96       	adiw	r26, 0x02	; 2
    1554:	8c 91       	ld	r24, X
    1556:	88 23       	and	r24, r24
    1558:	61 f1       	breq	.+88     	; 0x15b2 <LFSMdeleteall+0x7c>
    155a:	b1 2c       	mov	r11, r1
    155c:	c0 e0       	ldi	r28, 0x00	; 0
		r->eeprom->read_block(pdata, (const void*) (i1*sizeblock), sizeblock);
    155e:	f1 2c       	mov	r15, r1
		if(pdata->page){
			pdata->page=EMPTY;
			r->eeprom->update_block(pdata, (void*) (i1*sizeblock), sizeblock);
			status=1; //All deleted
    1560:	d1 e0       	ldi	r29, 0x01	; 1
	uint8_t i1;
	uint8_t status=ZERO;
	uint8_t sizeblock=r->sizeblock;
	struct lfsmdata* pdata=&data;
	for(i1=ZERO;i1<r->sizeeeprom;i1++){
		r->eeprom->read_block(pdata, (const void*) (i1*sizeblock), sizeblock);
    1562:	ce 9d       	mul	r28, r14
    1564:	60 01       	movw	r12, r0
    1566:	cf 9d       	mul	r28, r15
    1568:	d0 0c       	add	r13, r0
    156a:	11 24       	eor	r1, r1
    156c:	d8 01       	movw	r26, r16
    156e:	ed 91       	ld	r30, X+
    1570:	fc 91       	ld	r31, X
    1572:	00 8c       	ldd	r0, Z+24	; 0x18
    1574:	f1 8d       	ldd	r31, Z+25	; 0x19
    1576:	e0 2d       	mov	r30, r0
    1578:	a7 01       	movw	r20, r14
    157a:	b6 01       	movw	r22, r12
    157c:	80 e1       	ldi	r24, 0x10	; 16
    157e:	92 e0       	ldi	r25, 0x02	; 2
    1580:	09 95       	icall
		if(pdata->page){
    1582:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <data>
    1586:	88 23       	and	r24, r24
    1588:	71 f0       	breq	.+28     	; 0x15a6 <LFSMdeleteall+0x70>
			pdata->page=EMPTY;
    158a:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <data>
			r->eeprom->update_block(pdata, (void*) (i1*sizeblock), sizeblock);
    158e:	d8 01       	movw	r26, r16
    1590:	ed 91       	ld	r30, X+
    1592:	fc 91       	ld	r31, X
    1594:	04 8c       	ldd	r0, Z+28	; 0x1c
    1596:	f5 8d       	ldd	r31, Z+29	; 0x1d
    1598:	e0 2d       	mov	r30, r0
    159a:	a7 01       	movw	r20, r14
    159c:	b6 01       	movw	r22, r12
    159e:	80 e1       	ldi	r24, 0x10	; 16
    15a0:	92 e0       	ldi	r25, 0x02	; 2
    15a2:	09 95       	icall
			status=1; //All deleted
    15a4:	bd 2e       	mov	r11, r29
{
	uint8_t i1;
	uint8_t status=ZERO;
	uint8_t sizeblock=r->sizeblock;
	struct lfsmdata* pdata=&data;
	for(i1=ZERO;i1<r->sizeeeprom;i1++){
    15a6:	cf 5f       	subi	r28, 0xFF	; 255
    15a8:	f8 01       	movw	r30, r16
    15aa:	82 81       	ldd	r24, Z+2	; 0x02
    15ac:	c8 17       	cp	r28, r24
    15ae:	c8 f2       	brcs	.-78     	; 0x1562 <LFSMdeleteall+0x2c>
    15b0:	01 c0       	rjmp	.+2      	; 0x15b4 <LFSMdeleteall+0x7e>
}//End main
/***deleteall***/
uint8_t LFSMdeleteall(struct lfsm *r)
{
	uint8_t i1;
	uint8_t status=ZERO;
    15b2:	b1 2c       	mov	r11, r1
			pdata->page=EMPTY;
			r->eeprom->update_block(pdata, (void*) (i1*sizeblock), sizeblock);
			status=1; //All deleted
		}
	}
	r->output=ZERO;
    15b4:	d8 01       	movw	r26, r16
    15b6:	16 96       	adiw	r26, 0x06	; 6
    15b8:	1c 92       	st	X, r1
    15ba:	16 97       	sbiw	r26, 0x06	; 6
	r->status=ZERO;
    15bc:	17 96       	adiw	r26, 0x07	; 7
    15be:	1c 92       	st	X, r1
	return status;
}
    15c0:	8b 2d       	mov	r24, r11
    15c2:	df 91       	pop	r29
    15c4:	cf 91       	pop	r28
    15c6:	1f 91       	pop	r17
    15c8:	0f 91       	pop	r16
    15ca:	ff 90       	pop	r15
    15cc:	ef 90       	pop	r14
    15ce:	df 90       	pop	r13
    15d0:	cf 90       	pop	r12
    15d2:	bf 90       	pop	r11
    15d4:	08 95       	ret

000015d6 <LFSMgetoutput>:
/***get***/
uint8_t LFSMgetoutput(struct lfsm *r)
{
	return r->output;
}
    15d6:	fc 01       	movw	r30, r24
    15d8:	86 81       	ldd	r24, Z+6	; 0x06
    15da:	08 95       	ret

000015dc <LFSMgetstatus>:
/***get***/
uint8_t LFSMgetstatus(struct lfsm *r)
{
	return r->status;
}
    15dc:	fc 01       	movw	r30, r24
    15de:	87 81       	ldd	r24, Z+7	; 0x07
    15e0:	08 95       	ret

000015e2 <LFSMsetoutput>:
/***set***/
void LFSMsetoutput(struct lfsm *r, uint8_t output)
{
	r->output=output;
    15e2:	fc 01       	movw	r30, r24
    15e4:	66 83       	std	Z+6, r22	; 0x06
	r->status=ZERO;
    15e6:	17 82       	std	Z+7, r1	; 0x07
    15e8:	08 95       	ret

000015ea <LFSMgetpage>:
}
/***get***/
uint8_t LFSMgetpage(struct lfsm *r)
{
	return r->page;
}
    15ea:	fc 01       	movw	r30, r24
    15ec:	84 81       	ldd	r24, Z+4	; 0x04
    15ee:	08 95       	ret

000015f0 <LFSMsetpage>:
/***set***/
void LFSMsetpage(struct lfsm *r, uint8_t page)
{
	r->page=page;
    15f0:	fc 01       	movw	r30, r24
    15f2:	64 83       	std	Z+4, r22	; 0x04
    15f4:	08 95       	ret

000015f6 <LFSMread>:
/*
** procedure and function
*/
/***read***/
uint8_t LFSMread(struct lfsm *r, uint8_t input)
{
    15f6:	3f 92       	push	r3
    15f8:	4f 92       	push	r4
    15fa:	5f 92       	push	r5
    15fc:	6f 92       	push	r6
    15fe:	7f 92       	push	r7
    1600:	8f 92       	push	r8
    1602:	9f 92       	push	r9
    1604:	af 92       	push	r10
    1606:	bf 92       	push	r11
    1608:	cf 92       	push	r12
    160a:	df 92       	push	r13
    160c:	ef 92       	push	r14
    160e:	ff 92       	push	r15
    1610:	0f 93       	push	r16
    1612:	1f 93       	push	r17
    1614:	cf 93       	push	r28
    1616:	df 93       	push	r29
    1618:	8c 01       	movw	r16, r24
    161a:	d6 2e       	mov	r13, r22
	struct lfsmdata* pdata=&data;
	int16_t n=ZERO;
	uint8_t n1=NPAGES,n2=NPAGES;
	uint8_t page=r->page;
	uint8_t HL,LH;
	HL=LFSMhl(r->input,input);
    161c:	dc 01       	movw	r26, r24
    161e:	15 96       	adiw	r26, 0x05	; 5
    1620:	dc 91       	ld	r29, X
    1622:	15 97       	sbiw	r26, 0x05	; 5
	LH=LFSMlh(r->input,input);
	if(HL || LH){ //To not waste time
    1624:	cd 2e       	mov	r12, r29
    1626:	c6 26       	eor	r12, r22
    1628:	d6 17       	cp	r29, r22
    162a:	09 f4       	brne	.+2      	; 0x162e <LFSMread+0x38>
    162c:	10 c1       	rjmp	.+544    	; 0x184e <LFSMread+0x258>
		status=1; //New entry
		for(i1=ZERO;i1<r->sizeeeprom;i1++){
    162e:	12 96       	adiw	r26, 0x02	; 2
    1630:	8c 91       	ld	r24, X
    1632:	12 97       	sbiw	r26, 0x02	; 2
    1634:	88 23       	and	r24, r24
    1636:	09 f4       	brne	.+2      	; 0x163a <LFSMread+0x44>
    1638:	99 c0       	rjmp	.+306    	; 0x176c <LFSMread+0x176>
/***read***/
uint8_t LFSMread(struct lfsm *r, uint8_t input)
{
	uint8_t i1;
	uint8_t status=ZERO;
	uint8_t sizeblock=r->sizeblock;
    163a:	13 96       	adiw	r26, 0x03	; 3
    163c:	ec 90       	ld	r14, X
    163e:	13 97       	sbiw	r26, 0x03	; 3
	struct lfsmdata* pdata=&data;
	int16_t n=ZERO;
	uint8_t n1=NPAGES,n2=NPAGES;
	uint8_t page=r->page;
    1640:	14 96       	adiw	r26, 0x04	; 4
    1642:	7c 90       	ld	r7, X
/***hl***/
uint8_t LFSMhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xf^xi;
	i&=xi;
    1644:	dc 21       	and	r29, r12
/***lh***/
uint8_t LFSMlh(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xf^xi;
	i&=xf;
    1646:	c6 22       	and	r12, r22
    1648:	66 24       	eor	r6, r6
    164a:	6a 94       	dec	r6
    164c:	88 24       	eor	r8, r8
    164e:	8a 94       	dec	r8
    1650:	99 24       	eor	r9, r9
    1652:	93 94       	inc	r9
    1654:	c0 e0       	ldi	r28, 0x00	; 0
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(HL || LH){ //To not waste time
		status=1; //New entry
		for(i1=ZERO;i1<r->sizeeeprom;i1++){
			r->eeprom->read_block(pdata, (const void*) (i1*sizeblock), sizeblock);
    1656:	f1 2c       	mov	r15, r1
							status=2; //Global logic exist
					}
					break;
				default: //Local logic
					if( (pdata->feedback & pdata->mask)==(r->output & pdata->mask) && pdata->inhl==HL && pdata->inlh==LH ){
						n=pdata->page - page;	
    1658:	a7 2c       	mov	r10, r7
    165a:	b1 2c       	mov	r11, r1
						}
						if(n<ZERO){
							if(n > -n2){
								tmp2=*pdata;
								n2=-n;
								status=4; //Local logic exist in page bellow
    165c:	68 94       	set
    165e:	33 24       	eor	r3, r3
    1660:	32 f8       	bld	r3, 2
				default: //Local logic
					if( (pdata->feedback & pdata->mask)==(r->output & pdata->mask) && pdata->inhl==HL && pdata->inlh==LH ){
						n=pdata->page - page;	
						if(!n){
							i1=r->sizeeeprom;
							status=3; //Local logic exist in present page
    1662:	0f 2e       	mov	r0, r31
    1664:	f3 e0       	ldi	r31, 0x03	; 3
    1666:	4f 2e       	mov	r4, r31
    1668:	f0 2d       	mov	r31, r0
					//Do nothing, continue search in status=1.
					break;
				case 1: //Global logic
					if( pdata->inhl==HL && pdata->inlh==LH ){
							i1=r->sizeeeprom;
							status=2; //Global logic exist
    166a:	68 94       	set
    166c:	55 24       	eor	r5, r5
    166e:	51 f8       	bld	r5, 1
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(HL || LH){ //To not waste time
		status=1; //New entry
		for(i1=ZERO;i1<r->sizeeeprom;i1++){
			r->eeprom->read_block(pdata, (const void*) (i1*sizeblock), sizeblock);
    1670:	ce 9d       	mul	r28, r14
    1672:	b0 01       	movw	r22, r0
    1674:	cf 9d       	mul	r28, r15
    1676:	70 0d       	add	r23, r0
    1678:	11 24       	eor	r1, r1
    167a:	d8 01       	movw	r26, r16
    167c:	ed 91       	ld	r30, X+
    167e:	fc 91       	ld	r31, X
    1680:	00 8c       	ldd	r0, Z+24	; 0x18
    1682:	f1 8d       	ldd	r31, Z+25	; 0x19
    1684:	e0 2d       	mov	r30, r0
    1686:	a7 01       	movw	r20, r14
    1688:	80 e1       	ldi	r24, 0x10	; 16
    168a:	92 e0       	ldi	r25, 0x02	; 2
    168c:	09 95       	icall
			switch(pdata->page){
    168e:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <data>
    1692:	88 23       	and	r24, r24
    1694:	09 f4       	brne	.+2      	; 0x1698 <LFSMread+0xa2>
    1696:	54 c0       	rjmp	.+168    	; 0x1740 <LFSMread+0x14a>
    1698:	81 30       	cpi	r24, 0x01	; 1
    169a:	61 f4       	brne	.+24     	; 0x16b4 <LFSMread+0xbe>
				case 0:
					//Do nothing, continue search in status=1.
					break;
				case 1: //Global logic
					if( pdata->inhl==HL && pdata->inlh==LH ){
    169c:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <data+0x2>
    16a0:	9d 13       	cpse	r25, r29
    16a2:	4e c0       	rjmp	.+156    	; 0x1740 <LFSMread+0x14a>
    16a4:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <data+0x3>
    16a8:	9c 11       	cpse	r25, r12
    16aa:	4a c0       	rjmp	.+148    	; 0x1740 <LFSMread+0x14a>
							i1=r->sizeeeprom;
    16ac:	f8 01       	movw	r30, r16
    16ae:	c2 81       	ldd	r28, Z+2	; 0x02
							status=2; //Global logic exist
    16b0:	95 2c       	mov	r9, r5
    16b2:	46 c0       	rjmp	.+140    	; 0x1740 <LFSMread+0x14a>
					}
					break;
				default: //Local logic
					if( (pdata->feedback & pdata->mask)==(r->output & pdata->mask) && pdata->inhl==HL && pdata->inlh==LH ){
    16b4:	e0 e1       	ldi	r30, 0x10	; 16
    16b6:	f2 e0       	ldi	r31, 0x02	; 2
    16b8:	21 81       	ldd	r18, Z+1	; 0x01
    16ba:	d8 01       	movw	r26, r16
    16bc:	16 96       	adiw	r26, 0x06	; 6
    16be:	9c 91       	ld	r25, X
    16c0:	16 97       	sbiw	r26, 0x06	; 6
    16c2:	92 27       	eor	r25, r18
    16c4:	24 81       	ldd	r18, Z+4	; 0x04
    16c6:	92 23       	and	r25, r18
    16c8:	d9 f5       	brne	.+118    	; 0x1740 <LFSMread+0x14a>
    16ca:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <data+0x2>
    16ce:	9d 13       	cpse	r25, r29
    16d0:	37 c0       	rjmp	.+110    	; 0x1740 <LFSMread+0x14a>
    16d2:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <data+0x3>
    16d6:	9c 11       	cpse	r25, r12
    16d8:	33 c0       	rjmp	.+102    	; 0x1740 <LFSMread+0x14a>
						n=pdata->page - page;	
    16da:	28 2f       	mov	r18, r24
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	2a 19       	sub	r18, r10
    16e0:	3b 09       	sbc	r19, r11
						if(!n){
    16e2:	21 f4       	brne	.+8      	; 0x16ec <LFSMread+0xf6>
							i1=r->sizeeeprom;
    16e4:	12 96       	adiw	r26, 0x02	; 2
    16e6:	cc 91       	ld	r28, X
							status=3; //Local logic exist in present page
    16e8:	94 2c       	mov	r9, r4
							break;
    16ea:	2a c0       	rjmp	.+84     	; 0x1740 <LFSMread+0x14a>
						}
						if(n>ZERO){
    16ec:	12 16       	cp	r1, r18
    16ee:	13 06       	cpc	r1, r19
    16f0:	8c f4       	brge	.+34     	; 0x1714 <LFSMread+0x11e>
							if(n < n1){
    16f2:	48 2d       	mov	r20, r8
    16f4:	50 e0       	ldi	r21, 0x00	; 0
    16f6:	24 17       	cp	r18, r20
    16f8:	35 07       	cpc	r19, r21
    16fa:	64 f4       	brge	.+24     	; 0x1714 <LFSMread+0x11e>
								tmp1=*pdata;
    16fc:	97 e0       	ldi	r25, 0x07	; 7
    16fe:	e0 e1       	ldi	r30, 0x10	; 16
    1700:	f2 e0       	ldi	r31, 0x02	; 2
    1702:	ad e3       	ldi	r26, 0x3D	; 61
    1704:	b2 e0       	ldi	r27, 0x02	; 2
    1706:	01 90       	ld	r0, Z+
    1708:	0d 92       	st	X+, r0
    170a:	9a 95       	dec	r25
    170c:	e1 f7       	brne	.-8      	; 0x1706 <LFSMread+0x110>
    170e:	88 2e       	mov	r8, r24
    1710:	87 18       	sub	r8, r7
								n1=n;
								status=4; //Local logic exist in page above
    1712:	93 2c       	mov	r9, r3
							}
						}
						if(n<ZERO){
    1714:	33 23       	and	r19, r19
    1716:	a4 f4       	brge	.+40     	; 0x1740 <LFSMread+0x14a>
							if(n > -n2){
    1718:	46 2d       	mov	r20, r6
    171a:	50 e0       	ldi	r21, 0x00	; 0
    171c:	51 95       	neg	r21
    171e:	41 95       	neg	r20
    1720:	51 09       	sbc	r21, r1
    1722:	42 17       	cp	r20, r18
    1724:	53 07       	cpc	r21, r19
    1726:	64 f4       	brge	.+24     	; 0x1740 <LFSMread+0x14a>
								tmp2=*pdata;
    1728:	97 e0       	ldi	r25, 0x07	; 7
    172a:	e0 e1       	ldi	r30, 0x10	; 16
    172c:	f2 e0       	ldi	r31, 0x02	; 2
    172e:	a6 e3       	ldi	r26, 0x36	; 54
    1730:	b2 e0       	ldi	r27, 0x02	; 2
    1732:	01 90       	ld	r0, Z+
    1734:	0d 92       	st	X+, r0
    1736:	9a 95       	dec	r25
    1738:	e1 f7       	brne	.-8      	; 0x1732 <LFSMread+0x13c>
								n2=-n;
    173a:	67 2c       	mov	r6, r7
    173c:	68 1a       	sub	r6, r24
								status=4; //Local logic exist in page bellow
    173e:	93 2c       	mov	r9, r3
	uint8_t HL,LH;
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(HL || LH){ //To not waste time
		status=1; //New entry
		for(i1=ZERO;i1<r->sizeeeprom;i1++){
    1740:	cf 5f       	subi	r28, 0xFF	; 255
    1742:	f8 01       	movw	r30, r16
    1744:	92 81       	ldd	r25, Z+2	; 0x02
    1746:	c9 17       	cp	r28, r25
    1748:	08 f4       	brcc	.+2      	; 0x174c <LFSMread+0x156>
    174a:	92 cf       	rjmp	.-220    	; 0x1670 <LFSMread+0x7a>
					break;
			}//End switch
		}
	}
/***status confirmation***/
	switch (status){
    174c:	f2 e0       	ldi	r31, 0x02	; 2
    174e:	9f 16       	cp	r9, r31
    1750:	81 f0       	breq	.+32     	; 0x1772 <LFSMread+0x17c>
    1752:	f9 15       	cp	r31, r9
    1754:	20 f0       	brcs	.+8      	; 0x175e <LFSMread+0x168>
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	98 16       	cp	r9, r24
    175a:	41 f0       	breq	.+16     	; 0x176c <LFSMread+0x176>
    175c:	78 c0       	rjmp	.+240    	; 0x184e <LFSMread+0x258>
    175e:	93 e0       	ldi	r25, 0x03	; 3
    1760:	99 16       	cp	r9, r25
    1762:	11 f1       	breq	.+68     	; 0x17a8 <LFSMread+0x1b2>
    1764:	a4 e0       	ldi	r26, 0x04	; 4
    1766:	9a 16       	cp	r9, r26
    1768:	b9 f1       	breq	.+110    	; 0x17d8 <LFSMread+0x1e2>
    176a:	71 c0       	rjmp	.+226    	; 0x184e <LFSMread+0x258>
		case ZERO: //No entry
			break;
		case 1: //New entry
			//Give warning and pause waiting for decision (very important).
			//Serves has flag to main function.
			r->input=input; //Update
    176c:	f8 01       	movw	r30, r16
    176e:	d5 82       	std	Z+5, r13	; 0x05
			break;
    1770:	6e c0       	rjmp	.+220    	; 0x184e <LFSMread+0x258>
		case 2: //Global logic exist
			r->page=pdata->page;
    1772:	d8 01       	movw	r26, r16
    1774:	14 96       	adiw	r26, 0x04	; 4
    1776:	8c 93       	st	X, r24
    1778:	14 97       	sbiw	r26, 0x04	; 4
			r->input=input; //Update
    177a:	15 96       	adiw	r26, 0x05	; 5
    177c:	dc 92       	st	X, r13
    177e:	15 97       	sbiw	r26, 0x05	; 5
			r->output=LFSMoutputcalc(r->output,pdata->outhl,pdata->outlh,pdata->mask);
    1780:	e0 e1       	ldi	r30, 0x10	; 16
    1782:	f2 e0       	ldi	r31, 0x02	; 2
    1784:	34 81       	ldd	r19, Z+4	; 0x04
*/
/***output***/
uint8_t LFSMoutputcalc(uint8_t feedback, uint8_t hl, uint8_t lh, uint8_t mask)
{
	feedback|=(lh & mask);
	feedback&=~(hl & mask);
    1786:	86 81       	ldd	r24, Z+6	; 0x06
    1788:	83 23       	and	r24, r19
    178a:	16 96       	adiw	r26, 0x06	; 6
    178c:	2c 91       	ld	r18, X
    178e:	16 97       	sbiw	r26, 0x06	; 6
    1790:	82 2b       	or	r24, r18
    1792:	95 81       	ldd	r25, Z+5	; 0x05
    1794:	93 23       	and	r25, r19
    1796:	90 95       	com	r25
    1798:	89 23       	and	r24, r25
			r->input=input; //Update
			break;
		case 2: //Global logic exist
			r->page=pdata->page;
			r->input=input; //Update
			r->output=LFSMoutputcalc(r->output,pdata->outhl,pdata->outlh,pdata->mask);
    179a:	16 96       	adiw	r26, 0x06	; 6
    179c:	8c 93       	st	X, r24
    179e:	16 97       	sbiw	r26, 0x06	; 6
			r->status=2;
    17a0:	82 e0       	ldi	r24, 0x02	; 2
    17a2:	17 96       	adiw	r26, 0x07	; 7
    17a4:	8c 93       	st	X, r24
			break;
    17a6:	53 c0       	rjmp	.+166    	; 0x184e <LFSMread+0x258>
		case 3: //Local logic exist in present page
			r->page=pdata->page;
    17a8:	f8 01       	movw	r30, r16
    17aa:	84 83       	std	Z+4, r24	; 0x04
			r->input=input; //Update
    17ac:	d5 82       	std	Z+5, r13	; 0x05
			r->output=LFSMoutputcalc(r->output,pdata->outhl,pdata->outlh,pdata->mask);
    17ae:	e0 e1       	ldi	r30, 0x10	; 16
    17b0:	f2 e0       	ldi	r31, 0x02	; 2
    17b2:	34 81       	ldd	r19, Z+4	; 0x04
*/
/***output***/
uint8_t LFSMoutputcalc(uint8_t feedback, uint8_t hl, uint8_t lh, uint8_t mask)
{
	feedback|=(lh & mask);
	feedback&=~(hl & mask);
    17b4:	86 81       	ldd	r24, Z+6	; 0x06
    17b6:	83 23       	and	r24, r19
    17b8:	d8 01       	movw	r26, r16
    17ba:	16 96       	adiw	r26, 0x06	; 6
    17bc:	2c 91       	ld	r18, X
    17be:	16 97       	sbiw	r26, 0x06	; 6
    17c0:	82 2b       	or	r24, r18
    17c2:	95 81       	ldd	r25, Z+5	; 0x05
    17c4:	93 23       	and	r25, r19
    17c6:	90 95       	com	r25
    17c8:	89 23       	and	r24, r25
			r->status=2;
			break;
		case 3: //Local logic exist in present page
			r->page=pdata->page;
			r->input=input; //Update
			r->output=LFSMoutputcalc(r->output,pdata->outhl,pdata->outlh,pdata->mask);
    17ca:	16 96       	adiw	r26, 0x06	; 6
    17cc:	8c 93       	st	X, r24
    17ce:	16 97       	sbiw	r26, 0x06	; 6
			r->status=3;
    17d0:	83 e0       	ldi	r24, 0x03	; 3
    17d2:	17 96       	adiw	r26, 0x07	; 7
    17d4:	8c 93       	st	X, r24
			break;
    17d6:	3b c0       	rjmp	.+118    	; 0x184e <LFSMread+0x258>
		case 4: //Local logic exist in page above versus local logic exist in page bellow
			//Choose closest page above otherwise closest bellow.
			r->input=input; //update
    17d8:	f8 01       	movw	r30, r16
    17da:	d5 82       	std	Z+5, r13	; 0x05
			if(n1>ZERO && n1<NPAGES){
    17dc:	8f ef       	ldi	r24, 0xFF	; 255
    17de:	88 0d       	add	r24, r8
    17e0:	8e 3f       	cpi	r24, 0xFE	; 254
    17e2:	c8 f4       	brcc	.+50     	; 0x1816 <LFSMread+0x220>
				r->page = tmp1.page;
    17e4:	ed e3       	ldi	r30, 0x3D	; 61
    17e6:	f2 e0       	ldi	r31, 0x02	; 2
    17e8:	80 81       	ld	r24, Z
    17ea:	d8 01       	movw	r26, r16
    17ec:	14 96       	adiw	r26, 0x04	; 4
    17ee:	8c 93       	st	X, r24
    17f0:	14 97       	sbiw	r26, 0x04	; 4
				r->output=LFSMoutputcalc(r->output,tmp1.outhl,tmp1.outlh,tmp1.mask);
    17f2:	84 81       	ldd	r24, Z+4	; 0x04
*/
/***output***/
uint8_t LFSMoutputcalc(uint8_t feedback, uint8_t hl, uint8_t lh, uint8_t mask)
{
	feedback|=(lh & mask);
	feedback&=~(hl & mask);
    17f4:	26 81       	ldd	r18, Z+6	; 0x06
    17f6:	28 23       	and	r18, r24
    17f8:	16 96       	adiw	r26, 0x06	; 6
    17fa:	9c 91       	ld	r25, X
    17fc:	16 97       	sbiw	r26, 0x06	; 6
    17fe:	29 2b       	or	r18, r25
    1800:	95 81       	ldd	r25, Z+5	; 0x05
    1802:	89 23       	and	r24, r25
    1804:	80 95       	com	r24
    1806:	82 23       	and	r24, r18
		case 4: //Local logic exist in page above versus local logic exist in page bellow
			//Choose closest page above otherwise closest bellow.
			r->input=input; //update
			if(n1>ZERO && n1<NPAGES){
				r->page = tmp1.page;
				r->output=LFSMoutputcalc(r->output,tmp1.outhl,tmp1.outlh,tmp1.mask);
    1808:	16 96       	adiw	r26, 0x06	; 6
    180a:	8c 93       	st	X, r24
    180c:	16 97       	sbiw	r26, 0x06	; 6
				r->status=41;
    180e:	89 e2       	ldi	r24, 0x29	; 41
    1810:	17 96       	adiw	r26, 0x07	; 7
    1812:	8c 93       	st	X, r24
    1814:	1c c0       	rjmp	.+56     	; 0x184e <LFSMread+0x258>
			}
			else if(n2>ZERO && n2<NPAGES){
    1816:	8f ef       	ldi	r24, 0xFF	; 255
    1818:	86 0d       	add	r24, r6
    181a:	8e 3f       	cpi	r24, 0xFE	; 254
    181c:	c0 f4       	brcc	.+48     	; 0x184e <LFSMread+0x258>
				r->page=tmp2.page;
    181e:	e6 e3       	ldi	r30, 0x36	; 54
    1820:	f2 e0       	ldi	r31, 0x02	; 2
    1822:	80 81       	ld	r24, Z
    1824:	d8 01       	movw	r26, r16
    1826:	14 96       	adiw	r26, 0x04	; 4
    1828:	8c 93       	st	X, r24
    182a:	14 97       	sbiw	r26, 0x04	; 4
				r->output=LFSMoutputcalc(r->output,tmp2.outhl,tmp2.outlh,tmp2.mask);
    182c:	84 81       	ldd	r24, Z+4	; 0x04
*/
/***output***/
uint8_t LFSMoutputcalc(uint8_t feedback, uint8_t hl, uint8_t lh, uint8_t mask)
{
	feedback|=(lh & mask);
	feedback&=~(hl & mask);
    182e:	26 81       	ldd	r18, Z+6	; 0x06
    1830:	28 23       	and	r18, r24
    1832:	16 96       	adiw	r26, 0x06	; 6
    1834:	9c 91       	ld	r25, X
    1836:	16 97       	sbiw	r26, 0x06	; 6
    1838:	29 2b       	or	r18, r25
    183a:	95 81       	ldd	r25, Z+5	; 0x05
    183c:	89 23       	and	r24, r25
    183e:	80 95       	com	r24
    1840:	82 23       	and	r24, r18
				r->output=LFSMoutputcalc(r->output,tmp1.outhl,tmp1.outlh,tmp1.mask);
				r->status=41;
			}
			else if(n2>ZERO && n2<NPAGES){
				r->page=tmp2.page;
				r->output=LFSMoutputcalc(r->output,tmp2.outhl,tmp2.outlh,tmp2.mask);
    1842:	16 96       	adiw	r26, 0x06	; 6
    1844:	8c 93       	st	X, r24
    1846:	16 97       	sbiw	r26, 0x06	; 6
				r->status=42;
    1848:	8a e2       	ldi	r24, 0x2A	; 42
    184a:	17 96       	adiw	r26, 0x07	; 7
    184c:	8c 93       	st	X, r24
			break;
		default:
			break;
	}//End switch
	return r->status;
}
    184e:	f8 01       	movw	r30, r16
    1850:	87 81       	ldd	r24, Z+7	; 0x07
    1852:	df 91       	pop	r29
    1854:	cf 91       	pop	r28
    1856:	1f 91       	pop	r17
    1858:	0f 91       	pop	r16
    185a:	ff 90       	pop	r15
    185c:	ef 90       	pop	r14
    185e:	df 90       	pop	r13
    1860:	cf 90       	pop	r12
    1862:	bf 90       	pop	r11
    1864:	af 90       	pop	r10
    1866:	9f 90       	pop	r9
    1868:	8f 90       	pop	r8
    186a:	7f 90       	pop	r7
    186c:	6f 90       	pop	r6
    186e:	5f 90       	pop	r5
    1870:	4f 90       	pop	r4
    1872:	3f 90       	pop	r3
    1874:	08 95       	ret

00001876 <LFSMremove>:
	}
	return programmed;
}
/***remove***/
uint8_t LFSMremove(struct lfsm *r, uint8_t input)
{
    1876:	2f 92       	push	r2
    1878:	3f 92       	push	r3
    187a:	4f 92       	push	r4
    187c:	5f 92       	push	r5
    187e:	6f 92       	push	r6
    1880:	7f 92       	push	r7
    1882:	8f 92       	push	r8
    1884:	9f 92       	push	r9
    1886:	af 92       	push	r10
    1888:	bf 92       	push	r11
    188a:	cf 92       	push	r12
    188c:	df 92       	push	r13
    188e:	ef 92       	push	r14
    1890:	ff 92       	push	r15
    1892:	0f 93       	push	r16
    1894:	1f 93       	push	r17
    1896:	cf 93       	push	r28
    1898:	df 93       	push	r29
    189a:	00 d0       	rcall	.+0      	; 0x189c <LFSMremove+0x26>
    189c:	00 d0       	rcall	.+0      	; 0x189e <LFSMremove+0x28>
    189e:	00 d0       	rcall	.+0      	; 0x18a0 <LFSMremove+0x2a>
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62
    18a4:	fc 01       	movw	r30, r24
	uint8_t k,k1,k2,i1;
	k=k1=k2=ZERO;
	uint8_t status=ZERO;
	uint8_t sizeblock=r->sizeblock;
    18a6:	03 81       	ldd	r16, Z+3	; 0x03
	struct lfsmdata* pdata=&data;
	struct lfsmdata* ptmp1=&tmp1;
	ptmp1->page=EMPTY;
    18a8:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <tmp1>
	int16_t n=ZERO;
	uint8_t n1=NPAGES,n2=NPAGES;
	uint8_t page=r->page;
	uint8_t HL,LH;
	HL=LFSMhl(r->input,input);
    18ac:	85 80       	ldd	r8, Z+5	; 0x05
	LH=LFSMlh(r->input,input);
	if(HL || LH){ //To not waste time
    18ae:	68 2c       	mov	r6, r8
    18b0:	66 26       	eor	r6, r22
    18b2:	86 16       	cp	r8, r22
    18b4:	09 f4       	brne	.+2      	; 0x18b8 <LFSMremove+0x42>
    18b6:	f0 c0       	rjmp	.+480    	; 0x1a98 <LFSMremove+0x222>
		status=1; //New entry
		for(i1=ZERO;i1<r->sizeeeprom;i1++){
    18b8:	82 81       	ldd	r24, Z+2	; 0x02
    18ba:	88 23       	and	r24, r24
    18bc:	09 f4       	brne	.+2      	; 0x18c0 <LFSMremove+0x4a>
    18be:	ee c0       	rjmp	.+476    	; 0x1a9c <LFSMremove+0x226>
    18c0:	6f 01       	movw	r12, r30
	struct lfsmdata* pdata=&data;
	struct lfsmdata* ptmp1=&tmp1;
	ptmp1->page=EMPTY;
	int16_t n=ZERO;
	uint8_t n1=NPAGES,n2=NPAGES;
	uint8_t page=r->page;
    18c2:	34 80       	ldd	r3, Z+4	; 0x04
/***hl***/
uint8_t LFSMhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xf^xi;
	i&=xi;
    18c4:	86 20       	and	r8, r6
/***lh***/
uint8_t LFSMlh(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xf^xi;
	i&=xf;
    18c6:	66 22       	and	r6, r22
    18c8:	4f ef       	ldi	r20, 0xFF	; 255
    18ca:	49 83       	std	Y+1, r20	; 0x01
    18cc:	55 24       	eor	r5, r5
    18ce:	5a 94       	dec	r5
    18d0:	77 24       	eor	r7, r7
    18d2:	73 94       	inc	r7
    18d4:	1d 82       	std	Y+5, r1	; 0x05
    18d6:	1c 82       	std	Y+4, r1	; 0x04
    18d8:	21 2c       	mov	r2, r1
    18da:	41 2c       	mov	r4, r1
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(HL || LH){ //To not waste time
		status=1; //New entry
		for(i1=ZERO;i1<r->sizeeeprom;i1++){
			r->eeprom->read_block(pdata, (const void*) (i1*sizeblock), sizeblock);
    18dc:	10 e0       	ldi	r17, 0x00	; 0
    18de:	b0 2e       	mov	r11, r16
    18e0:	1e 83       	std	Y+6, r17	; 0x06
						status=2; //Global logic exist
					}
					break;
				default: //Local logic
					if( (pdata->feedback & pdata->mask)==(r->output & pdata->mask) && pdata->inhl==HL && pdata->inlh==LH ){
						n=pdata->page - page;
    18e2:	83 2d       	mov	r24, r3
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	9b 83       	std	Y+3, r25	; 0x03
    18e8:	8a 83       	std	Y+2, r24	; 0x02
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(HL || LH){ //To not waste time
		status=1; //New entry
		for(i1=ZERO;i1<r->sizeeeprom;i1++){
			r->eeprom->read_block(pdata, (const void*) (i1*sizeblock), sizeblock);
    18ea:	90 2e       	mov	r9, r16
    18ec:	a1 2e       	mov	r10, r17
    18ee:	eb 2c       	mov	r14, r11
    18f0:	fe 80       	ldd	r15, Y+6	; 0x06
    18f2:	bd 81       	ldd	r27, Y+5	; 0x05
    18f4:	b0 9f       	mul	r27, r16
    18f6:	b0 01       	movw	r22, r0
    18f8:	b1 9f       	mul	r27, r17
    18fa:	70 0d       	add	r23, r0
    18fc:	11 24       	eor	r1, r1
    18fe:	d6 01       	movw	r26, r12
    1900:	ed 91       	ld	r30, X+
    1902:	fc 91       	ld	r31, X
    1904:	00 8c       	ldd	r0, Z+24	; 0x18
    1906:	f1 8d       	ldd	r31, Z+25	; 0x19
    1908:	e0 2d       	mov	r30, r0
    190a:	4b 2d       	mov	r20, r11
    190c:	5f 2d       	mov	r21, r15
    190e:	80 e1       	ldi	r24, 0x10	; 16
    1910:	92 e0       	ldi	r25, 0x02	; 2
    1912:	09 95       	icall
			switch(pdata->page){
    1914:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <data>
    1918:	88 23       	and	r24, r24
    191a:	09 f4       	brne	.+2      	; 0x191e <LFSMremove+0xa8>
    191c:	56 c0       	rjmp	.+172    	; 0x19ca <LFSMremove+0x154>
    191e:	81 30       	cpi	r24, 0x01	; 1
    1920:	81 f4       	brne	.+32     	; 0x1942 <LFSMremove+0xcc>
				case 0:
					//Do nothing, continue search in status=1.
					break;
				case 1: //Global logic
					if( pdata->inhl==HL && pdata->inlh==LH ){
    1922:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <data+0x2>
    1926:	88 11       	cpse	r24, r8
    1928:	50 c0       	rjmp	.+160    	; 0x19ca <LFSMremove+0x154>
    192a:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <data+0x3>
    192e:	86 11       	cpse	r24, r6
    1930:	4c c0       	rjmp	.+152    	; 0x19ca <LFSMremove+0x154>
						k=i1;
						i1=r->sizeeeprom;
    1932:	4d 80       	ldd	r4, Y+5	; 0x05
    1934:	f6 01       	movw	r30, r12
    1936:	f2 81       	ldd	r31, Z+2	; 0x02
    1938:	fd 83       	std	Y+5, r31	; 0x05
						status=2; //Global logic exist
    193a:	68 94       	set
    193c:	77 24       	eor	r7, r7
    193e:	71 f8       	bld	r7, 1
    1940:	44 c0       	rjmp	.+136    	; 0x19ca <LFSMremove+0x154>
					}
					break;
				default: //Local logic
					if( (pdata->feedback & pdata->mask)==(r->output & pdata->mask) && pdata->inhl==HL && pdata->inlh==LH ){
    1942:	e0 e1       	ldi	r30, 0x10	; 16
    1944:	f2 e0       	ldi	r31, 0x02	; 2
    1946:	21 81       	ldd	r18, Z+1	; 0x01
    1948:	d6 01       	movw	r26, r12
    194a:	16 96       	adiw	r26, 0x06	; 6
    194c:	9c 91       	ld	r25, X
    194e:	16 97       	sbiw	r26, 0x06	; 6
    1950:	92 27       	eor	r25, r18
    1952:	24 81       	ldd	r18, Z+4	; 0x04
    1954:	92 23       	and	r25, r18
    1956:	c9 f5       	brne	.+114    	; 0x19ca <LFSMremove+0x154>
    1958:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <data+0x2>
    195c:	98 11       	cpse	r25, r8
    195e:	35 c0       	rjmp	.+106    	; 0x19ca <LFSMremove+0x154>
    1960:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <data+0x3>
    1964:	96 11       	cpse	r25, r6
    1966:	31 c0       	rjmp	.+98     	; 0x19ca <LFSMremove+0x154>
						n=pdata->page - page;
    1968:	28 2f       	mov	r18, r24
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	ea 81       	ldd	r30, Y+2	; 0x02
    196e:	fb 81       	ldd	r31, Y+3	; 0x03
    1970:	2e 1b       	sub	r18, r30
    1972:	3f 0b       	sbc	r19, r31
						if(!n){
    1974:	49 f4       	brne	.+18     	; 0x1988 <LFSMremove+0x112>
							k=i1;
							i1=r->sizeeeprom;
							status=3; //Local logic exist in present page
							break;
    1976:	4d 80       	ldd	r4, Y+5	; 0x05
				default: //Local logic
					if( (pdata->feedback & pdata->mask)==(r->output & pdata->mask) && pdata->inhl==HL && pdata->inlh==LH ){
						n=pdata->page - page;
						if(!n){
							k=i1;
							i1=r->sizeeeprom;
    1978:	12 96       	adiw	r26, 0x02	; 2
    197a:	fc 91       	ld	r31, X
    197c:	fd 83       	std	Y+5, r31	; 0x05
							status=3; //Local logic exist in present page
    197e:	0f 2e       	mov	r0, r31
    1980:	f3 e0       	ldi	r31, 0x03	; 3
    1982:	7f 2e       	mov	r7, r31
    1984:	f0 2d       	mov	r31, r0
							break;
    1986:	21 c0       	rjmp	.+66     	; 0x19ca <LFSMremove+0x154>
						}
						if(n>ZERO){
    1988:	12 16       	cp	r1, r18
    198a:	13 06       	cpc	r1, r19
    198c:	5c f4       	brge	.+22     	; 0x19a4 <LFSMremove+0x12e>
							if(n < n1){
    198e:	45 2d       	mov	r20, r5
    1990:	50 e0       	ldi	r21, 0x00	; 0
    1992:	24 17       	cp	r18, r20
    1994:	35 07       	cpc	r19, r21
    1996:	34 f4       	brge	.+12     	; 0x19a4 <LFSMremove+0x12e>
    1998:	58 2e       	mov	r5, r24
    199a:	53 18       	sub	r5, r3
    199c:	2d 80       	ldd	r2, Y+5	; 0x05
								k1=i1;
								n1=n;
								status=4; //Local logic exist in page above
    199e:	68 94       	set
    19a0:	77 24       	eor	r7, r7
    19a2:	72 f8       	bld	r7, 2
							}
						}
						if(n<ZERO){
    19a4:	33 23       	and	r19, r19
    19a6:	8c f4       	brge	.+34     	; 0x19ca <LFSMremove+0x154>
							if(n > -n2){
    19a8:	99 81       	ldd	r25, Y+1	; 0x01
    19aa:	49 2f       	mov	r20, r25
    19ac:	50 e0       	ldi	r21, 0x00	; 0
    19ae:	51 95       	neg	r21
    19b0:	41 95       	neg	r20
    19b2:	51 09       	sbc	r21, r1
    19b4:	42 17       	cp	r20, r18
    19b6:	53 07       	cpc	r21, r19
    19b8:	44 f4       	brge	.+16     	; 0x19ca <LFSMremove+0x154>
								k2=i1;
								n2=-n;
    19ba:	a3 2d       	mov	r26, r3
    19bc:	a8 1b       	sub	r26, r24
    19be:	a9 83       	std	Y+1, r26	; 0x01
    19c0:	bd 81       	ldd	r27, Y+5	; 0x05
    19c2:	bc 83       	std	Y+4, r27	; 0x04
								status=4; //Local logic exist in page bellow
    19c4:	68 94       	set
    19c6:	77 24       	eor	r7, r7
    19c8:	72 f8       	bld	r7, 2
	uint8_t HL,LH;
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(HL || LH){ //To not waste time
		status=1; //New entry
		for(i1=ZERO;i1<r->sizeeeprom;i1++){
    19ca:	ed 81       	ldd	r30, Y+5	; 0x05
    19cc:	ef 5f       	subi	r30, 0xFF	; 255
    19ce:	ed 83       	std	Y+5, r30	; 0x05
    19d0:	d6 01       	movw	r26, r12
    19d2:	12 96       	adiw	r26, 0x02	; 2
    19d4:	8c 91       	ld	r24, X
    19d6:	e8 17       	cp	r30, r24
    19d8:	08 f4       	brcc	.+2      	; 0x19dc <LFSMremove+0x166>
    19da:	87 cf       	rjmp	.-242    	; 0x18ea <LFSMremove+0x74>
				break;
			}//End switch
		}//End for
	}//End if
	/***status confirmation***/
	switch (status){
    19dc:	b3 e0       	ldi	r27, 0x03	; 3
    19de:	7b 16       	cp	r7, r27
    19e0:	b9 f0       	breq	.+46     	; 0x1a10 <LFSMremove+0x19a>
    19e2:	e4 e0       	ldi	r30, 0x04	; 4
    19e4:	7e 16       	cp	r7, r30
    19e6:	29 f1       	breq	.+74     	; 0x1a32 <LFSMremove+0x1bc>
    19e8:	f2 e0       	ldi	r31, 0x02	; 2
    19ea:	7f 12       	cpse	r7, r31
    19ec:	59 c0       	rjmp	.+178    	; 0x1aa0 <LFSMremove+0x22a>
		case ZERO: //No entry
			break;
		case 1: //New entry
			break;
		case 2: //Global logic exist
			r->eeprom->update_block(ptmp1, (void*) (k*sizeblock), sizeblock);
    19ee:	4e 9c       	mul	r4, r14
    19f0:	b0 01       	movw	r22, r0
    19f2:	4f 9c       	mul	r4, r15
    19f4:	70 0d       	add	r23, r0
    19f6:	11 24       	eor	r1, r1
    19f8:	d6 01       	movw	r26, r12
    19fa:	ed 91       	ld	r30, X+
    19fc:	fc 91       	ld	r31, X
    19fe:	04 8c       	ldd	r0, Z+28	; 0x1c
    1a00:	f5 8d       	ldd	r31, Z+29	; 0x1d
    1a02:	e0 2d       	mov	r30, r0
    1a04:	49 2d       	mov	r20, r9
    1a06:	5a 2d       	mov	r21, r10
    1a08:	8d e3       	ldi	r24, 0x3D	; 61
    1a0a:	92 e0       	ldi	r25, 0x02	; 2
    1a0c:	09 95       	icall
			break;
    1a0e:	48 c0       	rjmp	.+144    	; 0x1aa0 <LFSMremove+0x22a>
		case 3: //Local logic exist in present page
			r->eeprom->update_block(ptmp1, (void*) (k*sizeblock), sizeblock);
    1a10:	4e 9c       	mul	r4, r14
    1a12:	b0 01       	movw	r22, r0
    1a14:	4f 9c       	mul	r4, r15
    1a16:	70 0d       	add	r23, r0
    1a18:	11 24       	eor	r1, r1
    1a1a:	d6 01       	movw	r26, r12
    1a1c:	ed 91       	ld	r30, X+
    1a1e:	fc 91       	ld	r31, X
    1a20:	04 8c       	ldd	r0, Z+28	; 0x1c
    1a22:	f5 8d       	ldd	r31, Z+29	; 0x1d
    1a24:	e0 2d       	mov	r30, r0
    1a26:	49 2d       	mov	r20, r9
    1a28:	5a 2d       	mov	r21, r10
    1a2a:	8d e3       	ldi	r24, 0x3D	; 61
    1a2c:	92 e0       	ldi	r25, 0x02	; 2
    1a2e:	09 95       	icall
			break;
    1a30:	37 c0       	rjmp	.+110    	; 0x1aa0 <LFSMremove+0x22a>
		case 4: //Local logic exist in page above versus local logic exist in page bellow
			//choose closest page above otherwise closest bellow.
			if(n1>ZERO && n1<NPAGES){
    1a32:	8f ef       	ldi	r24, 0xFF	; 255
    1a34:	85 0d       	add	r24, r5
    1a36:	8e 3f       	cpi	r24, 0xFE	; 254
    1a38:	a8 f4       	brcc	.+42     	; 0x1a64 <LFSMremove+0x1ee>
				r->eeprom->update_block(ptmp1, (void*) (k1*sizeblock), sizeblock);
    1a3a:	2e 9c       	mul	r2, r14
    1a3c:	b0 01       	movw	r22, r0
    1a3e:	2f 9c       	mul	r2, r15
    1a40:	70 0d       	add	r23, r0
    1a42:	11 24       	eor	r1, r1
    1a44:	d6 01       	movw	r26, r12
    1a46:	ed 91       	ld	r30, X+
    1a48:	fc 91       	ld	r31, X
    1a4a:	04 8c       	ldd	r0, Z+28	; 0x1c
    1a4c:	f5 8d       	ldd	r31, Z+29	; 0x1d
    1a4e:	e0 2d       	mov	r30, r0
    1a50:	49 2d       	mov	r20, r9
    1a52:	5a 2d       	mov	r21, r10
    1a54:	8d e3       	ldi	r24, 0x3D	; 61
    1a56:	92 e0       	ldi	r25, 0x02	; 2
    1a58:	09 95       	icall
				status=41;
    1a5a:	0f 2e       	mov	r0, r31
    1a5c:	f9 e2       	ldi	r31, 0x29	; 41
    1a5e:	7f 2e       	mov	r7, r31
    1a60:	f0 2d       	mov	r31, r0
    1a62:	1e c0       	rjmp	.+60     	; 0x1aa0 <LFSMremove+0x22a>
			}
			else if(n2>ZERO && n2<NPAGES){
    1a64:	89 81       	ldd	r24, Y+1	; 0x01
    1a66:	81 50       	subi	r24, 0x01	; 1
    1a68:	8e 3f       	cpi	r24, 0xFE	; 254
    1a6a:	d0 f4       	brcc	.+52     	; 0x1aa0 <LFSMremove+0x22a>
				r->eeprom->update_block(ptmp1, (void*) (k2*sizeblock), sizeblock);
    1a6c:	bc 81       	ldd	r27, Y+4	; 0x04
    1a6e:	be 9d       	mul	r27, r14
    1a70:	b0 01       	movw	r22, r0
    1a72:	bf 9d       	mul	r27, r15
    1a74:	70 0d       	add	r23, r0
    1a76:	11 24       	eor	r1, r1
    1a78:	d6 01       	movw	r26, r12
    1a7a:	ed 91       	ld	r30, X+
    1a7c:	fc 91       	ld	r31, X
    1a7e:	04 8c       	ldd	r0, Z+28	; 0x1c
    1a80:	f5 8d       	ldd	r31, Z+29	; 0x1d
    1a82:	e0 2d       	mov	r30, r0
    1a84:	49 2d       	mov	r20, r9
    1a86:	5a 2d       	mov	r21, r10
    1a88:	8d e3       	ldi	r24, 0x3D	; 61
    1a8a:	92 e0       	ldi	r25, 0x02	; 2
    1a8c:	09 95       	icall
				status=42;
    1a8e:	0f 2e       	mov	r0, r31
    1a90:	fa e2       	ldi	r31, 0x2A	; 42
    1a92:	7f 2e       	mov	r7, r31
    1a94:	f0 2d       	mov	r31, r0
    1a96:	04 c0       	rjmp	.+8      	; 0x1aa0 <LFSMremove+0x22a>
/***remove***/
uint8_t LFSMremove(struct lfsm *r, uint8_t input)
{
	uint8_t k,k1,k2,i1;
	k=k1=k2=ZERO;
	uint8_t status=ZERO;
    1a98:	71 2c       	mov	r7, r1
    1a9a:	02 c0       	rjmp	.+4      	; 0x1aa0 <LFSMremove+0x22a>
	uint8_t HL,LH;
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(HL || LH){ //To not waste time
		status=1; //New entry
		for(i1=ZERO;i1<r->sizeeeprom;i1++){
    1a9c:	77 24       	eor	r7, r7
    1a9e:	73 94       	inc	r7
			break;
		default:
			break;
	}//End switch
	return status;
}//End main
    1aa0:	87 2d       	mov	r24, r7
    1aa2:	26 96       	adiw	r28, 0x06	; 6
    1aa4:	0f b6       	in	r0, 0x3f	; 63
    1aa6:	f8 94       	cli
    1aa8:	de bf       	out	0x3e, r29	; 62
    1aaa:	0f be       	out	0x3f, r0	; 63
    1aac:	cd bf       	out	0x3d, r28	; 61
    1aae:	df 91       	pop	r29
    1ab0:	cf 91       	pop	r28
    1ab2:	1f 91       	pop	r17
    1ab4:	0f 91       	pop	r16
    1ab6:	ff 90       	pop	r15
    1ab8:	ef 90       	pop	r14
    1aba:	df 90       	pop	r13
    1abc:	cf 90       	pop	r12
    1abe:	bf 90       	pop	r11
    1ac0:	af 90       	pop	r10
    1ac2:	9f 90       	pop	r9
    1ac4:	8f 90       	pop	r8
    1ac6:	7f 90       	pop	r7
    1ac8:	6f 90       	pop	r6
    1aca:	5f 90       	pop	r5
    1acc:	4f 90       	pop	r4
    1ace:	3f 90       	pop	r3
    1ad0:	2f 90       	pop	r2
    1ad2:	08 95       	ret

00001ad4 <LFSMlearn>:
	}//End switch
	return r->status;
}
/***learn***/
uint8_t LFSMlearn(struct lfsm *r, const uint8_t input, const uint8_t next, const uint8_t mask, const uint8_t page)
{
    1ad4:	2f 92       	push	r2
    1ad6:	3f 92       	push	r3
    1ad8:	4f 92       	push	r4
    1ada:	5f 92       	push	r5
    1adc:	6f 92       	push	r6
    1ade:	7f 92       	push	r7
    1ae0:	8f 92       	push	r8
    1ae2:	9f 92       	push	r9
    1ae4:	af 92       	push	r10
    1ae6:	bf 92       	push	r11
    1ae8:	cf 92       	push	r12
    1aea:	df 92       	push	r13
    1aec:	ef 92       	push	r14
    1aee:	ff 92       	push	r15
    1af0:	0f 93       	push	r16
    1af2:	1f 93       	push	r17
    1af4:	cf 93       	push	r28
    1af6:	df 93       	push	r29
	struct lfsmdata* pdata=&data;
	struct lfsmdata* ptmp1=&tmp1;
	uint8_t HL,LH;
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(page>ZERO){ //Enable
    1af8:	00 23       	and	r16, r16
    1afa:	09 f4       	brne	.+2      	; 0x1afe <LFSMlearn+0x2a>
    1afc:	93 c0       	rjmp	.+294    	; 0x1c24 <LFSMlearn+0x150>
	uint8_t status=ZERO;
	uint8_t sizeblock=r->sizeblock;
	struct lfsmdata* pdata=&data;
	struct lfsmdata* ptmp1=&tmp1;
	uint8_t HL,LH;
	HL=LFSMhl(r->input,input);
    1afe:	fc 01       	movw	r30, r24
    1b00:	45 80       	ldd	r4, Z+5	; 0x05
	LH=LFSMlh(r->input,input);
	if(page>ZERO){ //Enable
		if(HL || LH){ //There is a change ?
    1b02:	24 2c       	mov	r2, r4
    1b04:	26 26       	eor	r2, r22
    1b06:	46 16       	cp	r4, r22
    1b08:	09 f4       	brne	.+2      	; 0x1b0c <LFSMlearn+0x38>
    1b0a:	8e c0       	rjmp	.+284    	; 0x1c28 <LFSMlearn+0x154>
			for(i1=ZERO;i1<r->sizeeeprom;i1++){
    1b0c:	32 81       	ldd	r19, Z+2	; 0x02
    1b0e:	33 23       	and	r19, r19
    1b10:	09 f4       	brne	.+2      	; 0x1b14 <LFSMlearn+0x40>
    1b12:	8c c0       	rjmp	.+280    	; 0x1c2c <LFSMlearn+0x158>
    1b14:	60 2e       	mov	r6, r16
    1b16:	52 2e       	mov	r5, r18
    1b18:	34 2e       	mov	r3, r20
    1b1a:	ec 01       	movw	r28, r24
/***learn***/
uint8_t LFSMlearn(struct lfsm *r, const uint8_t input, const uint8_t next, const uint8_t mask, const uint8_t page)
{
	uint8_t i1;
	uint8_t status=ZERO;
	uint8_t sizeblock=r->sizeblock;
    1b1c:	c3 80       	ldd	r12, Z+3	; 0x03
/***hl***/
uint8_t LFSMhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xf^xi;
	i&=xi;
    1b1e:	42 20       	and	r4, r2
/***lh***/
uint8_t LFSMlh(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xf^xi;
	i&=xf;
    1b20:	26 22       	and	r2, r22
    1b22:	00 e0       	ldi	r16, 0x00	; 0
    1b24:	10 e0       	ldi	r17, 0x00	; 0
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(page>ZERO){ //Enable
		if(HL || LH){ //There is a change ?
			for(i1=ZERO;i1<r->sizeeeprom;i1++){
				r->eeprom->read_block(pdata, (const void*) (i1*sizeblock), sizeblock);
    1b26:	d1 2c       	mov	r13, r1
    1b28:	ac 2c       	mov	r10, r12
    1b2a:	bd 2c       	mov	r11, r13
					if( (pdata->page==1 && pdata->inhl==HL && pdata->inlh==LH)
					|| (pdata->page==page && (pdata->feedback & mask)==(r->output & mask) && pdata->inhl==HL && pdata->inlh==LH) ){
						break;
					}
				}
				status=1; //Record
    1b2c:	77 24       	eor	r7, r7
    1b2e:	73 94       	inc	r7
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(page>ZERO){ //Enable
		if(HL || LH){ //There is a change ?
			for(i1=ZERO;i1<r->sizeeeprom;i1++){
				r->eeprom->read_block(pdata, (const void*) (i1*sizeblock), sizeblock);
    1b30:	8c 2c       	mov	r8, r12
    1b32:	9d 2c       	mov	r9, r13
    1b34:	ea 2c       	mov	r14, r10
    1b36:	fb 2c       	mov	r15, r11
    1b38:	1c 9d       	mul	r17, r12
    1b3a:	b0 01       	movw	r22, r0
    1b3c:	1d 9d       	mul	r17, r13
    1b3e:	70 0d       	add	r23, r0
    1b40:	11 24       	eor	r1, r1
    1b42:	e8 81       	ld	r30, Y
    1b44:	f9 81       	ldd	r31, Y+1	; 0x01
    1b46:	00 8c       	ldd	r0, Z+24	; 0x18
    1b48:	f1 8d       	ldd	r31, Z+25	; 0x19
    1b4a:	e0 2d       	mov	r30, r0
    1b4c:	4a 2d       	mov	r20, r10
    1b4e:	5b 2d       	mov	r21, r11
    1b50:	80 e1       	ldi	r24, 0x10	; 16
    1b52:	92 e0       	ldi	r25, 0x02	; 2
    1b54:	09 95       	icall
				if(pdata->page){ //Find if it exists already
    1b56:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <data>
    1b5a:	88 23       	and	r24, r24
    1b5c:	91 f0       	breq	.+36     	; 0x1b82 <LFSMlearn+0xae>
					if( (pdata->page==1 && pdata->inhl==HL && pdata->inlh==LH)
    1b5e:	81 30       	cpi	r24, 0x01	; 1
    1b60:	41 f0       	breq	.+16     	; 0x1b72 <LFSMlearn+0x9e>
					|| (pdata->page==page && (pdata->feedback & mask)==(r->output & mask) && pdata->inhl==HL && pdata->inlh==LH) ){
    1b62:	68 12       	cpse	r6, r24
    1b64:	0e c0       	rjmp	.+28     	; 0x1b82 <LFSMlearn+0xae>
    1b66:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <data+0x1>
    1b6a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b6c:	89 27       	eor	r24, r25
    1b6e:	85 21       	and	r24, r5
    1b70:	41 f4       	brne	.+16     	; 0x1b82 <LFSMlearn+0xae>
    1b72:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <data+0x2>
    1b76:	84 11       	cpse	r24, r4
    1b78:	04 c0       	rjmp	.+8      	; 0x1b82 <LFSMlearn+0xae>
    1b7a:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <data+0x3>
    1b7e:	82 15       	cp	r24, r2
    1b80:	31 f0       	breq	.+12     	; 0x1b8e <LFSMlearn+0xba>
	uint8_t HL,LH;
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(page>ZERO){ //Enable
		if(HL || LH){ //There is a change ?
			for(i1=ZERO;i1<r->sizeeeprom;i1++){
    1b82:	1f 5f       	subi	r17, 0xFF	; 255
					if( (pdata->page==1 && pdata->inhl==HL && pdata->inlh==LH)
					|| (pdata->page==page && (pdata->feedback & mask)==(r->output & mask) && pdata->inhl==HL && pdata->inlh==LH) ){
						break;
					}
				}
				status=1; //Record
    1b84:	07 2d       	mov	r16, r7
	uint8_t HL,LH;
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(page>ZERO){ //Enable
		if(HL || LH){ //There is a change ?
			for(i1=ZERO;i1<r->sizeeeprom;i1++){
    1b86:	8a 81       	ldd	r24, Y+2	; 0x02
    1b88:	18 17       	cp	r17, r24
    1b8a:	90 f2       	brcs	.-92     	; 0x1b30 <LFSMlearn+0x5c>
    1b8c:	03 c0       	rjmp	.+6      	; 0x1b94 <LFSMlearn+0xc0>
				}
				status=1; //Record
			}
		}
	}
	switch (status){
    1b8e:	01 30       	cpi	r16, 0x01	; 1
    1b90:	09 f0       	breq	.+2      	; 0x1b94 <LFSMlearn+0xc0>
    1b92:	4f c0       	rjmp	.+158    	; 0x1c32 <LFSMlearn+0x15e>
		case ZERO: //Not enabled
			break;
		case 1: //Record
			ptmp1->page=page;
    1b94:	ed e3       	ldi	r30, 0x3D	; 61
    1b96:	f2 e0       	ldi	r31, 0x02	; 2
    1b98:	60 82       	st	Z, r6
			ptmp1->feedback=r->output;
    1b9a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b9c:	81 83       	std	Z+1, r24	; 0x01
			ptmp1->inhl=HL;
    1b9e:	42 82       	std	Z+2, r4	; 0x02
			ptmp1->inlh=LH;
    1ba0:	23 82       	std	Z+3, r2	; 0x03
			ptmp1->mask=mask;
    1ba2:	54 82       	std	Z+4, r5	; 0x04
			if(page>1){ //Local logic
    1ba4:	f1 e0       	ldi	r31, 0x01	; 1
    1ba6:	f6 15       	cp	r31, r6
    1ba8:	50 f4       	brcc	.+20     	; 0x1bbe <LFSMlearn+0xea>
    1baa:	28 2f       	mov	r18, r24
    1bac:	23 25       	eor	r18, r3
    1bae:	52 22       	and	r5, r18
				ptmp1->outhl=LFSMhl(r->output,next) & mask;
    1bb0:	ed e3       	ldi	r30, 0x3D	; 61
    1bb2:	f2 e0       	ldi	r31, 0x02	; 2
    1bb4:	85 21       	and	r24, r5
    1bb6:	85 83       	std	Z+5, r24	; 0x05
				ptmp1->outlh=LFSMlh(r->output,next) & mask;
    1bb8:	53 20       	and	r5, r3
    1bba:	56 82       	std	Z+6, r5	; 0x06
    1bbc:	08 c0       	rjmp	.+16     	; 0x1bce <LFSMlearn+0xfa>
			}else{ //Global logic
				ptmp1->outhl=LFSMhl(BYTEH,next) & mask;
    1bbe:	ed e3       	ldi	r30, 0x3D	; 61
    1bc0:	f2 e0       	ldi	r31, 0x02	; 2
    1bc2:	83 2d       	mov	r24, r3
    1bc4:	80 95       	com	r24
    1bc6:	85 21       	and	r24, r5
    1bc8:	85 83       	std	Z+5, r24	; 0x05
				ptmp1->outlh=LFSMlh(BYTEL,next) & mask;
    1bca:	53 20       	and	r5, r3
    1bcc:	56 82       	std	Z+6, r5	; 0x06
			}
			for(i1=ZERO;i1<r->sizeeeprom;i1++){
    1bce:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd0:	88 23       	and	r24, r24
    1bd2:	71 f1       	breq	.+92     	; 0x1c30 <LFSMlearn+0x15c>
    1bd4:	10 e0       	ldi	r17, 0x00	; 0
				r->eeprom->read_block(pdata, (const void*) (i1*sizeblock), sizeblock);
    1bd6:	1e 9d       	mul	r17, r14
    1bd8:	60 01       	movw	r12, r0
    1bda:	1f 9d       	mul	r17, r15
    1bdc:	d0 0c       	add	r13, r0
    1bde:	11 24       	eor	r1, r1
    1be0:	e8 81       	ld	r30, Y
    1be2:	f9 81       	ldd	r31, Y+1	; 0x01
    1be4:	00 8c       	ldd	r0, Z+24	; 0x18
    1be6:	f1 8d       	ldd	r31, Z+25	; 0x19
    1be8:	e0 2d       	mov	r30, r0
    1bea:	48 2d       	mov	r20, r8
    1bec:	59 2d       	mov	r21, r9
    1bee:	b6 01       	movw	r22, r12
    1bf0:	80 e1       	ldi	r24, 0x10	; 16
    1bf2:	92 e0       	ldi	r25, 0x02	; 2
    1bf4:	09 95       	icall
				if(pdata->page==EMPTY){
    1bf6:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <data>
    1bfa:	81 11       	cpse	r24, r1
    1bfc:	0d c0       	rjmp	.+26     	; 0x1c18 <LFSMlearn+0x144>
					r->eeprom->update_block(ptmp1, (void*) (i1*sizeblock), sizeblock);
    1bfe:	e8 81       	ld	r30, Y
    1c00:	f9 81       	ldd	r31, Y+1	; 0x01
    1c02:	04 8c       	ldd	r0, Z+28	; 0x1c
    1c04:	f5 8d       	ldd	r31, Z+29	; 0x1d
    1c06:	e0 2d       	mov	r30, r0
    1c08:	48 2d       	mov	r20, r8
    1c0a:	59 2d       	mov	r21, r9
    1c0c:	b6 01       	movw	r22, r12
    1c0e:	8d e3       	ldi	r24, 0x3D	; 61
    1c10:	92 e0       	ldi	r25, 0x02	; 2
    1c12:	09 95       	icall
					status=2; //Created
    1c14:	02 e0       	ldi	r16, 0x02	; 2
					break;
    1c16:	0d c0       	rjmp	.+26     	; 0x1c32 <LFSMlearn+0x15e>
				ptmp1->outlh=LFSMlh(r->output,next) & mask;
			}else{ //Global logic
				ptmp1->outhl=LFSMhl(BYTEH,next) & mask;
				ptmp1->outlh=LFSMlh(BYTEL,next) & mask;
			}
			for(i1=ZERO;i1<r->sizeeeprom;i1++){
    1c18:	1f 5f       	subi	r17, 0xFF	; 255
    1c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1c:	18 17       	cp	r17, r24
    1c1e:	d8 f2       	brcs	.-74     	; 0x1bd6 <LFSMlearn+0x102>
				if(pdata->page==EMPTY){
					r->eeprom->update_block(ptmp1, (void*) (i1*sizeblock), sizeblock);
					status=2; //Created
					break;
				}
				status=3; //Memory full
    1c20:	03 e0       	ldi	r16, 0x03	; 3
    1c22:	07 c0       	rjmp	.+14     	; 0x1c32 <LFSMlearn+0x15e>
    1c24:	00 e0       	ldi	r16, 0x00	; 0
    1c26:	05 c0       	rjmp	.+10     	; 0x1c32 <LFSMlearn+0x15e>
    1c28:	00 e0       	ldi	r16, 0x00	; 0
    1c2a:	03 c0       	rjmp	.+6      	; 0x1c32 <LFSMlearn+0x15e>
	uint8_t HL,LH;
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(page>ZERO){ //Enable
		if(HL || LH){ //There is a change ?
			for(i1=ZERO;i1<r->sizeeeprom;i1++){
    1c2c:	00 e0       	ldi	r16, 0x00	; 0
    1c2e:	01 c0       	rjmp	.+2      	; 0x1c32 <LFSMlearn+0x15e>
				ptmp1->outlh=LFSMlh(r->output,next) & mask;
			}else{ //Global logic
				ptmp1->outhl=LFSMhl(BYTEH,next) & mask;
				ptmp1->outlh=LFSMlh(BYTEL,next) & mask;
			}
			for(i1=ZERO;i1<r->sizeeeprom;i1++){
    1c30:	01 e0       	ldi	r16, 0x01	; 1
			break;
		default:
			break;
	}//End switch
	return status;
}
    1c32:	80 2f       	mov	r24, r16
    1c34:	df 91       	pop	r29
    1c36:	cf 91       	pop	r28
    1c38:	1f 91       	pop	r17
    1c3a:	0f 91       	pop	r16
    1c3c:	ff 90       	pop	r15
    1c3e:	ef 90       	pop	r14
    1c40:	df 90       	pop	r13
    1c42:	cf 90       	pop	r12
    1c44:	bf 90       	pop	r11
    1c46:	af 90       	pop	r10
    1c48:	9f 90       	pop	r9
    1c4a:	8f 90       	pop	r8
    1c4c:	7f 90       	pop	r7
    1c4e:	6f 90       	pop	r6
    1c50:	5f 90       	pop	r5
    1c52:	4f 90       	pop	r4
    1c54:	3f 90       	pop	r3
    1c56:	2f 90       	pop	r2
    1c58:	08 95       	ret

00001c5a <LFSMenable>:
uint8_t LFSMoutputcalc(uint8_t feedback, uint8_t hl, uint8_t lh, uint8_t mask);
/*
** Object Initialize
*/
LFSM LFSMenable(EEPROM* eeprom, const uint8_t sizeeeprom)
{
    1c5a:	fc 01       	movw	r30, r24
	r.getstatus=LFSMgetstatus;
	r.setoutput=LFSMsetoutput;
	r.getpage=LFSMgetpage;
	r.setpage=LFSMsetpage;
	/******/
	return r;
    1c5c:	71 83       	std	Z+1, r23	; 0x01
    1c5e:	60 83       	st	Z, r22
    1c60:	42 83       	std	Z+2, r20	; 0x02
    1c62:	87 e0       	ldi	r24, 0x07	; 7
    1c64:	83 83       	std	Z+3, r24	; 0x03
    1c66:	14 82       	std	Z+4, r1	; 0x04
    1c68:	8f ef       	ldi	r24, 0xFF	; 255
    1c6a:	86 83       	std	Z+6, r24	; 0x06
    1c6c:	8b ef       	ldi	r24, 0xFB	; 251
    1c6e:	9a e0       	ldi	r25, 0x0A	; 10
    1c70:	91 87       	std	Z+9, r25	; 0x09
    1c72:	80 87       	std	Z+8, r24	; 0x08
    1c74:	8a e6       	ldi	r24, 0x6A	; 106
    1c76:	9d e0       	ldi	r25, 0x0D	; 13
    1c78:	93 87       	std	Z+11, r25	; 0x0b
    1c7a:	82 87       	std	Z+10, r24	; 0x0a
    1c7c:	87 e6       	ldi	r24, 0x67	; 103
    1c7e:	9a e0       	ldi	r25, 0x0A	; 10
    1c80:	95 87       	std	Z+13, r25	; 0x0d
    1c82:	84 87       	std	Z+12, r24	; 0x0c
    1c84:	8b e3       	ldi	r24, 0x3B	; 59
    1c86:	9c e0       	ldi	r25, 0x0C	; 12
    1c88:	97 87       	std	Z+15, r25	; 0x0f
    1c8a:	86 87       	std	Z+14, r24	; 0x0e
    1c8c:	8b e9       	ldi	r24, 0x9B	; 155
    1c8e:	9a e0       	ldi	r25, 0x0A	; 10
    1c90:	91 8b       	std	Z+17, r25	; 0x11
    1c92:	80 8b       	std	Z+16, r24	; 0x10
    1c94:	8b ee       	ldi	r24, 0xEB	; 235
    1c96:	9a e0       	ldi	r25, 0x0A	; 10
    1c98:	93 8b       	std	Z+19, r25	; 0x13
    1c9a:	82 8b       	std	Z+18, r24	; 0x12
    1c9c:	8e ee       	ldi	r24, 0xEE	; 238
    1c9e:	9a e0       	ldi	r25, 0x0A	; 10
    1ca0:	95 8b       	std	Z+21, r25	; 0x15
    1ca2:	84 8b       	std	Z+20, r24	; 0x14
    1ca4:	81 ef       	ldi	r24, 0xF1	; 241
    1ca6:	9a e0       	ldi	r25, 0x0A	; 10
    1ca8:	97 8b       	std	Z+23, r25	; 0x17
    1caa:	86 8b       	std	Z+22, r24	; 0x16
    1cac:	85 ef       	ldi	r24, 0xF5	; 245
    1cae:	9a e0       	ldi	r25, 0x0A	; 10
    1cb0:	91 8f       	std	Z+25, r25	; 0x19
    1cb2:	80 8f       	std	Z+24, r24	; 0x18
    1cb4:	88 ef       	ldi	r24, 0xF8	; 248
    1cb6:	9a e0       	ldi	r25, 0x0A	; 10
    1cb8:	93 8f       	std	Z+27, r25	; 0x1b
    1cba:	82 8f       	std	Z+26, r24	; 0x1a
}
    1cbc:	cf 01       	movw	r24, r30
    1cbe:	08 95       	ret

00001cc0 <PORTINIT>:
		
	}//End while
}//End main
/***Def***/
void PORTINIT(void){
	DDRB=0XFF;
    1cc0:	8f ef       	ldi	r24, 0xFF	; 255
    1cc2:	84 b9       	out	0x04, r24	; 4
	PORTB=0XFF;
    1cc4:	85 b9       	out	0x05, r24	; 5
	DDRD=0X00;
    1cc6:	1a b8       	out	0x0a, r1	; 10
	PORTD=0XFF;
    1cc8:	8b b9       	out	0x0b, r24	; 11
    1cca:	08 95       	ret

00001ccc <main>:
#include "lfsm.h"
char string[20];
#define True 1
void PORTINIT(void);
int main(void)
{
    1ccc:	cf 93       	push	r28
    1cce:	df 93       	push	r29
    1cd0:	cd b7       	in	r28, 0x3d	; 61
    1cd2:	de b7       	in	r29, 0x3e	; 62
    1cd4:	c1 5d       	subi	r28, 0xD1	; 209
    1cd6:	d1 09       	sbc	r29, r1
    1cd8:	0f b6       	in	r0, 0x3f	; 63
    1cda:	f8 94       	cli
    1cdc:	de bf       	out	0x3e, r29	; 62
    1cde:	0f be       	out	0x3f, r0	; 63
    1ce0:	cd bf       	out	0x3d, r28	; 61
	PORTINIT();
    1ce2:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <PORTINIT>
	struct keypadata keypadinput;
	uint8_t output=0;
	uint8_t mask=0;
	uint8_t page=0;
	uint8_t n;
	KEYPAD keypad = KEYPADenable(&DDRA,&PINA,&PORTA);
    1ce6:	42 e2       	ldi	r20, 0x22	; 34
    1ce8:	50 e0       	ldi	r21, 0x00	; 0
    1cea:	60 e2       	ldi	r22, 0x20	; 32
    1cec:	70 e0       	ldi	r23, 0x00	; 0
    1cee:	81 e2       	ldi	r24, 0x21	; 33
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	0e 94 64 07 	call	0xec8	; 0xec8 <KEYPADenable>
    1cf6:	2f 8b       	std	Y+23, r18	; 0x17
    1cf8:	38 8f       	std	Y+24, r19	; 0x18
    1cfa:	49 8f       	std	Y+25, r20	; 0x19
    1cfc:	5a 8f       	std	Y+26, r21	; 0x1a
    1cfe:	6b 8f       	std	Y+27, r22	; 0x1b
    1d00:	7c 8f       	std	Y+28, r23	; 0x1c
    1d02:	8b 8c       	ldd	r8, Y+27	; 0x1b
    1d04:	9c 8c       	ldd	r9, Y+28	; 0x1c
	LCD0 lcd = LCD0enable(&DDRC,&PINC,&PORTC);
    1d06:	28 e2       	ldi	r18, 0x28	; 40
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	46 e2       	ldi	r20, 0x26	; 38
    1d0c:	50 e0       	ldi	r21, 0x00	; 0
    1d0e:	67 e2       	ldi	r22, 0x27	; 39
    1d10:	70 e0       	ldi	r23, 0x00	; 0
    1d12:	ce 01       	movw	r24, r28
    1d14:	4d 96       	adiw	r24, 0x1d	; 29
    1d16:	0e 94 fd 09 	call	0x13fa	; 0x13fa <LCD0enable>
    1d1a:	4f a0       	ldd	r4, Y+39	; 0x27
    1d1c:	58 a4       	ldd	r5, Y+40	; 0x28
    1d1e:	e9 a4       	ldd	r14, Y+41	; 0x29
    1d20:	fa a4       	ldd	r15, Y+42	; 0x2a
    1d22:	6b a4       	ldd	r6, Y+43	; 0x2b
    1d24:	7c a4       	ldd	r7, Y+44	; 0x2c
    1d26:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d28:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d2a:	c2 53       	subi	r28, 0x32	; 50
    1d2c:	df 4f       	sbci	r29, 0xFF	; 255
    1d2e:	99 83       	std	Y+1, r25	; 0x01
    1d30:	88 83       	st	Y, r24
    1d32:	ce 5c       	subi	r28, 0xCE	; 206
    1d34:	d0 40       	sbci	r29, 0x00	; 0
    1d36:	cf a4       	ldd	r12, Y+47	; 0x2f
    1d38:	d8 a8       	ldd	r13, Y+48	; 0x30
	EEPROM eeprom = EEPROMenable();
    1d3a:	ce 01       	movw	r24, r28
    1d3c:	c3 96       	adiw	r24, 0x33	; 51
    1d3e:	0e 94 1b 01 	call	0x236	; 0x236 <EEPROMenable>
	LFSM lfsm = LFSMenable(&eeprom,146);
    1d42:	42 e9       	ldi	r20, 0x92	; 146
    1d44:	be 01       	movw	r22, r28
    1d46:	6d 5c       	subi	r22, 0xCD	; 205
    1d48:	7f 4f       	sbci	r23, 0xFF	; 255
    1d4a:	ce 01       	movw	r24, r28
    1d4c:	8f 5a       	subi	r24, 0xAF	; 175
    1d4e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d50:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <LFSMenable>
	FUNC func = FUNCenable();
    1d54:	ce 01       	movw	r24, r28
    1d56:	83 59       	subi	r24, 0x93	; 147
    1d58:	9f 4f       	sbci	r25, 0xFF	; 255
    1d5a:	0e 94 5e 05 	call	0xabc	; 0xabc <FUNCenable>
    1d5e:	c1 57       	subi	r28, 0x71	; 113
    1d60:	df 4f       	sbci	r29, 0xFF	; 255
    1d62:	a8 80       	ld	r10, Y
    1d64:	b9 80       	ldd	r11, Y+1	; 0x01
    1d66:	cf 58       	subi	r28, 0x8F	; 143
    1d68:	d0 40       	sbci	r29, 0x00	; 0
    1d6a:	c7 56       	subi	r28, 0x67	; 103
    1d6c:	df 4f       	sbci	r29, 0xFF	; 255
    1d6e:	28 80       	ld	r2, Y
    1d70:	39 80       	ldd	r3, Y+1	; 0x01
    1d72:	c9 59       	subi	r28, 0x99	; 153
    1d74:	d0 40       	sbci	r29, 0x00	; 0
	/**************************************/
	lfsm.setoutput(&lfsm,255);
    1d76:	a9 96       	adiw	r28, 0x29	; 41
    1d78:	ee ad       	ldd	r30, Y+62	; 0x3e
    1d7a:	ff ad       	ldd	r31, Y+63	; 0x3f
    1d7c:	a9 97       	sbiw	r28, 0x29	; 41
    1d7e:	6f ef       	ldi	r22, 0xFF	; 255
    1d80:	ce 01       	movw	r24, r28
    1d82:	8f 5a       	subi	r24, 0xAF	; 175
    1d84:	9f 4f       	sbci	r25, 0xFF	; 255
    1d86:	09 95       	icall
	PORTINIT();
	uint8_t option=0;
	uint8_t input_tmp=0;
	struct keypadata keypadinput;
	uint8_t output=0;
	uint8_t mask=0;
    1d88:	cf 52       	subi	r28, 0x2F	; 47
    1d8a:	df 4f       	sbci	r29, 0xFF	; 255
    1d8c:	18 82       	st	Y, r1
    1d8e:	c1 5d       	subi	r28, 0xD1	; 209
    1d90:	d0 40       	sbci	r29, 0x00	; 0
{
	PORTINIT();
	uint8_t option=0;
	uint8_t input_tmp=0;
	struct keypadata keypadinput;
	uint8_t output=0;
    1d92:	c0 53       	subi	r28, 0x30	; 48
    1d94:	df 4f       	sbci	r29, 0xFF	; 255
    1d96:	18 82       	st	Y, r1
    1d98:	c0 5d       	subi	r28, 0xD0	; 208
    1d9a:	d0 40       	sbci	r29, 0x00	; 0
void PORTINIT(void);
int main(void)
{
	PORTINIT();
	uint8_t option=0;
	uint8_t input_tmp=0;
    1d9c:	c3 53       	subi	r28, 0x33	; 51
    1d9e:	df 4f       	sbci	r29, 0xFF	; 255
    1da0:	18 82       	st	Y, r1
    1da2:	cd 5c       	subi	r28, 0xCD	; 205
    1da4:	d0 40       	sbci	r29, 0x00	; 0
#define True 1
void PORTINIT(void);
int main(void)
{
	PORTINIT();
	uint8_t option=0;
    1da6:	10 e0       	ldi	r17, 0x00	; 0
	lfsm.setoutput(&lfsm,255);
	/* Replace with your application code */
	while (True)
	{
		/******/
		keypadinput=keypad.get();
    1da8:	e9 8d       	ldd	r30, Y+25	; 0x19
    1daa:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1dac:	ce 01       	movw	r24, r28
    1dae:	89 54       	subi	r24, 0x49	; 73
    1db0:	9f 4f       	sbci	r25, 0xFF	; 255
    1db2:	09 95       	icall
    1db4:	86 e1       	ldi	r24, 0x16	; 22
    1db6:	fe 01       	movw	r30, r28
    1db8:	e9 54       	subi	r30, 0x49	; 73
    1dba:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbc:	de 01       	movw	r26, r28
    1dbe:	11 96       	adiw	r26, 0x01	; 1
    1dc0:	01 90       	ld	r0, Z+
    1dc2:	0d 92       	st	X+, r0
    1dc4:	8a 95       	dec	r24
    1dc6:	e1 f7       	brne	.-8      	; 0x1dc0 <main+0xf4>
		n=PIND;
    1dc8:	09 b1       	in	r16, 0x09	; 9
		/******/
		if(keypadinput.character){
    1dca:	89 81       	ldd	r24, Y+1	; 0x01
    1dcc:	88 23       	and	r24, r24
    1dce:	51 f0       	breq	.+20     	; 0x1de4 <main+0x118>
			lcd.gotoxy(0,8);
    1dd0:	68 e0       	ldi	r22, 0x08	; 8
    1dd2:	70 e0       	ldi	r23, 0x00	; 0
    1dd4:	80 e0       	ldi	r24, 0x00	; 0
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	f6 01       	movw	r30, r12
    1dda:	09 95       	icall
			lcd.putch(keypadinput.character);
    1ddc:	eb a1       	ldd	r30, Y+35	; 0x23
    1dde:	fc a1       	ldd	r31, Y+36	; 0x24
    1de0:	89 81       	ldd	r24, Y+1	; 0x01
    1de2:	09 95       	icall
		}
		lcd.gotoxy(0,16);
    1de4:	60 e1       	ldi	r22, 0x10	; 16
    1de6:	70 e0       	ldi	r23, 0x00	; 0
    1de8:	80 e0       	ldi	r24, 0x00	; 0
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	f6 01       	movw	r30, r12
    1dee:	09 95       	icall
		func.ui16toa(n,string);
    1df0:	64 e4       	ldi	r22, 0x44	; 68
    1df2:	72 e0       	ldi	r23, 0x02	; 2
    1df4:	80 2f       	mov	r24, r16
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	f5 01       	movw	r30, r10
    1dfa:	09 95       	icall
		lcd.string_size(string,4);
    1dfc:	64 e0       	ldi	r22, 0x04	; 4
    1dfe:	84 e4       	ldi	r24, 0x44	; 68
    1e00:	92 e0       	ldi	r25, 0x02	; 2
    1e02:	f7 01       	movw	r30, r14
    1e04:	09 95       	icall
		/******/
		switch(option){
    1e06:	81 2f       	mov	r24, r17
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	8a 30       	cpi	r24, 0x0A	; 10
    1e0c:	91 05       	cpc	r25, r1
    1e0e:	08 f0       	brcs	.+2      	; 0x1e12 <main+0x146>
    1e10:	d4 c2       	rjmp	.+1448   	; 0x23ba <main+0x6ee>
    1e12:	fc 01       	movw	r30, r24
    1e14:	e2 5c       	subi	r30, 0xC2	; 194
    1e16:	ff 4f       	sbci	r31, 0xFF	; 255
    1e18:	0c 94 47 12 	jmp	0x248e	; 0x248e <__tablejump2__>
			case 0:
				lcd.gotoxy(0,0);
    1e1c:	60 e0       	ldi	r22, 0x00	; 0
    1e1e:	70 e0       	ldi	r23, 0x00	; 0
    1e20:	80 e0       	ldi	r24, 0x00	; 0
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	f6 01       	movw	r30, r12
    1e26:	09 95       	icall
				lcd.string_size("Running ",8);
    1e28:	68 e0       	ldi	r22, 0x08	; 8
    1e2a:	80 e1       	ldi	r24, 0x10	; 16
    1e2c:	91 e0       	ldi	r25, 0x01	; 1
    1e2e:	f7 01       	movw	r30, r14
    1e30:	09 95       	icall
				func.ui16toa(lfsm.getpage(&lfsm),string);
    1e32:	ab 96       	adiw	r28, 0x2b	; 43
    1e34:	ee ad       	ldd	r30, Y+62	; 0x3e
    1e36:	ff ad       	ldd	r31, Y+63	; 0x3f
    1e38:	ab 97       	sbiw	r28, 0x2b	; 43
    1e3a:	ce 01       	movw	r24, r28
    1e3c:	8f 5a       	subi	r24, 0xAF	; 175
    1e3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e40:	09 95       	icall
    1e42:	64 e4       	ldi	r22, 0x44	; 68
    1e44:	72 e0       	ldi	r23, 0x02	; 2
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	f5 01       	movw	r30, r10
    1e4a:	09 95       	icall
				lcd.string_size(string,3);
    1e4c:	63 e0       	ldi	r22, 0x03	; 3
    1e4e:	84 e4       	ldi	r24, 0x44	; 68
    1e50:	92 e0       	ldi	r25, 0x02	; 2
    1e52:	f7 01       	movw	r30, r14
    1e54:	09 95       	icall
				if(keypadinput.character == 'A'){//Clear screen and empty buffer
    1e56:	89 81       	ldd	r24, Y+1	; 0x01
    1e58:	81 34       	cpi	r24, 0x41	; 65
    1e5a:	51 f4       	brne	.+20     	; 0x1e70 <main+0x1a4>
					lcd.clear();
    1e5c:	c2 53       	subi	r28, 0x32	; 50
    1e5e:	df 4f       	sbci	r29, 0xFF	; 255
    1e60:	e8 81       	ld	r30, Y
    1e62:	f9 81       	ldd	r31, Y+1	; 0x01
    1e64:	ce 5c       	subi	r28, 0xCE	; 206
    1e66:	d0 40       	sbci	r29, 0x00	; 0
    1e68:	09 95       	icall
					keypad.flush();
    1e6a:	f4 01       	movw	r30, r8
    1e6c:	09 95       	icall
					continue;
    1e6e:	9c cf       	rjmp	.-200    	; 0x1da8 <main+0xdc>
				}
				if(keypadinput.character == 'B'){//Learn
    1e70:	82 34       	cpi	r24, 0x42	; 66
    1e72:	51 f4       	brne	.+20     	; 0x1e88 <main+0x1bc>
					lcd.clear();
    1e74:	c2 53       	subi	r28, 0x32	; 50
    1e76:	df 4f       	sbci	r29, 0xFF	; 255
    1e78:	e8 81       	ld	r30, Y
    1e7a:	f9 81       	ldd	r31, Y+1	; 0x01
    1e7c:	ce 5c       	subi	r28, 0xCE	; 206
    1e7e:	d0 40       	sbci	r29, 0x00	; 0
    1e80:	09 95       	icall
					keypad.flush();
    1e82:	f4 01       	movw	r30, r8
    1e84:	09 95       	icall
					option=1;
    1e86:	11 e0       	ldi	r17, 0x01	; 1
				}
				if(keypadinput.character == 'C'){//Delete or remove
    1e88:	89 81       	ldd	r24, Y+1	; 0x01
    1e8a:	83 34       	cpi	r24, 0x43	; 67
    1e8c:	51 f4       	brne	.+20     	; 0x1ea2 <main+0x1d6>
					lcd.clear();
    1e8e:	c2 53       	subi	r28, 0x32	; 50
    1e90:	df 4f       	sbci	r29, 0xFF	; 255
    1e92:	e8 81       	ld	r30, Y
    1e94:	f9 81       	ldd	r31, Y+1	; 0x01
    1e96:	ce 5c       	subi	r28, 0xCE	; 206
    1e98:	d0 40       	sbci	r29, 0x00	; 0
    1e9a:	09 95       	icall
					keypad.flush();
    1e9c:	f4 01       	movw	r30, r8
    1e9e:	09 95       	icall
					option=6;
    1ea0:	16 e0       	ldi	r17, 0x06	; 6
				}
				lfsm.read(&lfsm,n);
    1ea2:	6b 96       	adiw	r28, 0x1b	; 27
    1ea4:	ee ad       	ldd	r30, Y+62	; 0x3e
    1ea6:	ff ad       	ldd	r31, Y+63	; 0x3f
    1ea8:	6b 97       	sbiw	r28, 0x1b	; 27
    1eaa:	60 2f       	mov	r22, r16
    1eac:	ce 01       	movw	r24, r28
    1eae:	8f 5a       	subi	r24, 0xAF	; 175
    1eb0:	9f 4f       	sbci	r25, 0xFF	; 255
    1eb2:	09 95       	icall
				break;
    1eb4:	82 c2       	rjmp	.+1284   	; 0x23ba <main+0x6ee>
			case 1:
				// Menu
				lcd.gotoxy(0,0);
    1eb6:	60 e0       	ldi	r22, 0x00	; 0
    1eb8:	70 e0       	ldi	r23, 0x00	; 0
    1eba:	80 e0       	ldi	r24, 0x00	; 0
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	f6 01       	movw	r30, r12
    1ec0:	09 95       	icall
				lcd.string_size("Enter: ",12);
    1ec2:	6c e0       	ldi	r22, 0x0C	; 12
    1ec4:	89 e1       	ldi	r24, 0x19	; 25
    1ec6:	91 e0       	ldi	r25, 0x01	; 1
    1ec8:	f7 01       	movw	r30, r14
    1eca:	09 95       	icall
				lcd.gotoxy(1,0);
    1ecc:	60 e0       	ldi	r22, 0x00	; 0
    1ece:	70 e0       	ldi	r23, 0x00	; 0
    1ed0:	81 e0       	ldi	r24, 0x01	; 1
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	f6 01       	movw	r30, r12
    1ed6:	09 95       	icall
				lcd.string_size("In   Out  Mask Page",20);
    1ed8:	64 e1       	ldi	r22, 0x14	; 20
    1eda:	81 e2       	ldi	r24, 0x21	; 33
    1edc:	91 e0       	ldi	r25, 0x01	; 1
    1ede:	f7 01       	movw	r30, r14
    1ee0:	09 95       	icall
				option=2;
    1ee2:	12 e0       	ldi	r17, 0x02	; 2
				break;
    1ee4:	6a c2       	rjmp	.+1236   	; 0x23ba <main+0x6ee>
			case 2:
				lcd.gotoxy(0,7);
    1ee6:	67 e0       	ldi	r22, 0x07	; 7
    1ee8:	70 e0       	ldi	r23, 0x00	; 0
    1eea:	80 e0       	ldi	r24, 0x00	; 0
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	f6 01       	movw	r30, r12
    1ef0:	09 95       	icall
				lcd.string_size(keypadinput.string,4);
    1ef2:	64 e0       	ldi	r22, 0x04	; 4
    1ef4:	ce 01       	movw	r24, r28
    1ef6:	02 96       	adiw	r24, 0x02	; 2
    1ef8:	f7 01       	movw	r30, r14
    1efa:	09 95       	icall
				if(keypadinput.character == 'D'){
    1efc:	89 81       	ldd	r24, Y+1	; 0x01
    1efe:	84 34       	cpi	r24, 0x44	; 68
    1f00:	f1 f4       	brne	.+60     	; 0x1f3e <main+0x272>
					input_tmp=func.strToInt(keypadinput.string);
    1f02:	ce 01       	movw	r24, r28
    1f04:	02 96       	adiw	r24, 0x02	; 2
    1f06:	f1 01       	movw	r30, r2
    1f08:	09 95       	icall
    1f0a:	08 2f       	mov	r16, r24
    1f0c:	c3 53       	subi	r28, 0x33	; 51
    1f0e:	df 4f       	sbci	r29, 0xFF	; 255
    1f10:	88 83       	st	Y, r24
    1f12:	cd 5c       	subi	r28, 0xCD	; 205
    1f14:	d0 40       	sbci	r29, 0x00	; 0
					lcd.gotoxy(2,0);
    1f16:	60 e0       	ldi	r22, 0x00	; 0
    1f18:	70 e0       	ldi	r23, 0x00	; 0
    1f1a:	82 e0       	ldi	r24, 0x02	; 2
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	f6 01       	movw	r30, r12
    1f20:	09 95       	icall
					func.ui16toa(input_tmp,string);
    1f22:	64 e4       	ldi	r22, 0x44	; 68
    1f24:	72 e0       	ldi	r23, 0x02	; 2
    1f26:	80 2f       	mov	r24, r16
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	f5 01       	movw	r30, r10
    1f2c:	09 95       	icall
					lcd.string(string);
    1f2e:	84 e4       	ldi	r24, 0x44	; 68
    1f30:	92 e0       	ldi	r25, 0x02	; 2
    1f32:	f2 01       	movw	r30, r4
    1f34:	09 95       	icall
					keypad.flush();
    1f36:	f4 01       	movw	r30, r8
    1f38:	09 95       	icall
					option=3;
    1f3a:	93 e0       	ldi	r25, 0x03	; 3
    1f3c:	01 c0       	rjmp	.+2      	; 0x1f40 <main+0x274>
    1f3e:	91 2f       	mov	r25, r17
				}
				if(keypadinput.character == 'C'){
    1f40:	89 81       	ldd	r24, Y+1	; 0x01
    1f42:	83 34       	cpi	r24, 0x43	; 67
    1f44:	09 f0       	breq	.+2      	; 0x1f48 <main+0x27c>
    1f46:	32 c2       	rjmp	.+1124   	; 0x23ac <main+0x6e0>
					keypad.flush();
    1f48:	f4 01       	movw	r30, r8
    1f4a:	09 95       	icall
    1f4c:	36 c2       	rjmp	.+1132   	; 0x23ba <main+0x6ee>
					option=2;
				}
				break;
			case 3:
				lcd.gotoxy(0,7);
    1f4e:	67 e0       	ldi	r22, 0x07	; 7
    1f50:	70 e0       	ldi	r23, 0x00	; 0
    1f52:	80 e0       	ldi	r24, 0x00	; 0
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	f6 01       	movw	r30, r12
    1f58:	09 95       	icall
				lcd.string_size(keypadinput.string,4);
    1f5a:	64 e0       	ldi	r22, 0x04	; 4
    1f5c:	ce 01       	movw	r24, r28
    1f5e:	02 96       	adiw	r24, 0x02	; 2
    1f60:	f7 01       	movw	r30, r14
    1f62:	09 95       	icall
				if(keypadinput.character == 'D'){
    1f64:	89 81       	ldd	r24, Y+1	; 0x01
    1f66:	84 34       	cpi	r24, 0x44	; 68
    1f68:	f1 f4       	brne	.+60     	; 0x1fa6 <main+0x2da>
					output=func.strToInt(keypadinput.string);
    1f6a:	ce 01       	movw	r24, r28
    1f6c:	02 96       	adiw	r24, 0x02	; 2
    1f6e:	f1 01       	movw	r30, r2
    1f70:	09 95       	icall
    1f72:	08 2f       	mov	r16, r24
    1f74:	c0 53       	subi	r28, 0x30	; 48
    1f76:	df 4f       	sbci	r29, 0xFF	; 255
    1f78:	88 83       	st	Y, r24
    1f7a:	c0 5d       	subi	r28, 0xD0	; 208
    1f7c:	d0 40       	sbci	r29, 0x00	; 0
					lcd.gotoxy(2,5);
    1f7e:	65 e0       	ldi	r22, 0x05	; 5
    1f80:	70 e0       	ldi	r23, 0x00	; 0
    1f82:	82 e0       	ldi	r24, 0x02	; 2
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	f6 01       	movw	r30, r12
    1f88:	09 95       	icall
					func.ui16toa(output,string);
    1f8a:	64 e4       	ldi	r22, 0x44	; 68
    1f8c:	72 e0       	ldi	r23, 0x02	; 2
    1f8e:	80 2f       	mov	r24, r16
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	f5 01       	movw	r30, r10
    1f94:	09 95       	icall
					lcd.string(string);
    1f96:	84 e4       	ldi	r24, 0x44	; 68
    1f98:	92 e0       	ldi	r25, 0x02	; 2
    1f9a:	f2 01       	movw	r30, r4
    1f9c:	09 95       	icall
					keypad.flush();
    1f9e:	f4 01       	movw	r30, r8
    1fa0:	09 95       	icall
					option=4;
    1fa2:	94 e0       	ldi	r25, 0x04	; 4
    1fa4:	01 c0       	rjmp	.+2      	; 0x1fa8 <main+0x2dc>
    1fa6:	91 2f       	mov	r25, r17
				}
				if(keypadinput.character == 'C'){
    1fa8:	89 81       	ldd	r24, Y+1	; 0x01
    1faa:	83 34       	cpi	r24, 0x43	; 67
    1fac:	09 f0       	breq	.+2      	; 0x1fb0 <main+0x2e4>
    1fae:	00 c2       	rjmp	.+1024   	; 0x23b0 <main+0x6e4>
					keypad.flush();
    1fb0:	f4 01       	movw	r30, r8
    1fb2:	09 95       	icall
    1fb4:	02 c2       	rjmp	.+1028   	; 0x23ba <main+0x6ee>
					option=3;
				}
				break;
			case 4:
				lcd.gotoxy(0,7);
    1fb6:	67 e0       	ldi	r22, 0x07	; 7
    1fb8:	70 e0       	ldi	r23, 0x00	; 0
    1fba:	80 e0       	ldi	r24, 0x00	; 0
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	f6 01       	movw	r30, r12
    1fc0:	09 95       	icall
				lcd.string_size(keypadinput.string,4);
    1fc2:	64 e0       	ldi	r22, 0x04	; 4
    1fc4:	ce 01       	movw	r24, r28
    1fc6:	02 96       	adiw	r24, 0x02	; 2
    1fc8:	f7 01       	movw	r30, r14
    1fca:	09 95       	icall
				if(keypadinput.character == 'D'){
    1fcc:	89 81       	ldd	r24, Y+1	; 0x01
    1fce:	84 34       	cpi	r24, 0x44	; 68
    1fd0:	f1 f4       	brne	.+60     	; 0x200e <main+0x342>
					mask=func.strToInt(keypadinput.string);
    1fd2:	ce 01       	movw	r24, r28
    1fd4:	02 96       	adiw	r24, 0x02	; 2
    1fd6:	f1 01       	movw	r30, r2
    1fd8:	09 95       	icall
    1fda:	08 2f       	mov	r16, r24
    1fdc:	cf 52       	subi	r28, 0x2F	; 47
    1fde:	df 4f       	sbci	r29, 0xFF	; 255
    1fe0:	88 83       	st	Y, r24
    1fe2:	c1 5d       	subi	r28, 0xD1	; 209
    1fe4:	d0 40       	sbci	r29, 0x00	; 0
					lcd.gotoxy(2,10);
    1fe6:	6a e0       	ldi	r22, 0x0A	; 10
    1fe8:	70 e0       	ldi	r23, 0x00	; 0
    1fea:	82 e0       	ldi	r24, 0x02	; 2
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	f6 01       	movw	r30, r12
    1ff0:	09 95       	icall
					func.ui16toa(mask,string);
    1ff2:	64 e4       	ldi	r22, 0x44	; 68
    1ff4:	72 e0       	ldi	r23, 0x02	; 2
    1ff6:	80 2f       	mov	r24, r16
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	f5 01       	movw	r30, r10
    1ffc:	09 95       	icall
					lcd.string(string);
    1ffe:	84 e4       	ldi	r24, 0x44	; 68
    2000:	92 e0       	ldi	r25, 0x02	; 2
    2002:	f2 01       	movw	r30, r4
    2004:	09 95       	icall
					keypad.flush();
    2006:	f4 01       	movw	r30, r8
    2008:	09 95       	icall
					option=5;
    200a:	95 e0       	ldi	r25, 0x05	; 5
    200c:	01 c0       	rjmp	.+2      	; 0x2010 <main+0x344>
    200e:	91 2f       	mov	r25, r17
				}
				if(keypadinput.character == 'C'){
    2010:	89 81       	ldd	r24, Y+1	; 0x01
    2012:	83 34       	cpi	r24, 0x43	; 67
    2014:	09 f0       	breq	.+2      	; 0x2018 <main+0x34c>
    2016:	ce c1       	rjmp	.+924    	; 0x23b4 <main+0x6e8>
					keypad.flush();
    2018:	f4 01       	movw	r30, r8
    201a:	09 95       	icall
    201c:	ce c1       	rjmp	.+924    	; 0x23ba <main+0x6ee>
					option=4;
				}
				break;
			case 5:
				lcd.gotoxy(0,7);
    201e:	67 e0       	ldi	r22, 0x07	; 7
    2020:	70 e0       	ldi	r23, 0x00	; 0
    2022:	80 e0       	ldi	r24, 0x00	; 0
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	f6 01       	movw	r30, r12
    2028:	09 95       	icall
				lcd.string_size(keypadinput.string,4);
    202a:	64 e0       	ldi	r22, 0x04	; 4
    202c:	ce 01       	movw	r24, r28
    202e:	02 96       	adiw	r24, 0x02	; 2
    2030:	f7 01       	movw	r30, r14
    2032:	09 95       	icall
				if(keypadinput.character == 'D'){
    2034:	89 81       	ldd	r24, Y+1	; 0x01
    2036:	84 34       	cpi	r24, 0x44	; 68
    2038:	09 f0       	breq	.+2      	; 0x203c <main+0x370>
    203a:	78 c0       	rjmp	.+240    	; 0x212c <main+0x460>
					page=func.strToInt(keypadinput.string);
    203c:	ce 01       	movw	r24, r28
    203e:	02 96       	adiw	r24, 0x02	; 2
    2040:	f1 01       	movw	r30, r2
    2042:	09 95       	icall
    2044:	08 2f       	mov	r16, r24
					lcd.gotoxy(2,15);
    2046:	6f e0       	ldi	r22, 0x0F	; 15
    2048:	70 e0       	ldi	r23, 0x00	; 0
    204a:	82 e0       	ldi	r24, 0x02	; 2
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	f6 01       	movw	r30, r12
    2050:	09 95       	icall
					func.ui16toa(page,string);
    2052:	64 e4       	ldi	r22, 0x44	; 68
    2054:	72 e0       	ldi	r23, 0x02	; 2
    2056:	80 2f       	mov	r24, r16
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	f5 01       	movw	r30, r10
    205c:	09 95       	icall
					lcd.string(string);
    205e:	84 e4       	ldi	r24, 0x44	; 68
    2060:	92 e0       	ldi	r25, 0x02	; 2
    2062:	f2 01       	movw	r30, r4
    2064:	09 95       	icall
					switch(lfsm.learn(&lfsm,input_tmp,output,mask,page)){
    2066:	6d 96       	adiw	r28, 0x1d	; 29
    2068:	ee ad       	ldd	r30, Y+62	; 0x3e
    206a:	ff ad       	ldd	r31, Y+63	; 0x3f
    206c:	6d 97       	sbiw	r28, 0x1d	; 29
    206e:	cf 52       	subi	r28, 0x2F	; 47
    2070:	df 4f       	sbci	r29, 0xFF	; 255
    2072:	28 81       	ld	r18, Y
    2074:	c1 5d       	subi	r28, 0xD1	; 209
    2076:	d0 40       	sbci	r29, 0x00	; 0
    2078:	c0 53       	subi	r28, 0x30	; 48
    207a:	df 4f       	sbci	r29, 0xFF	; 255
    207c:	48 81       	ld	r20, Y
    207e:	c0 5d       	subi	r28, 0xD0	; 208
    2080:	d0 40       	sbci	r29, 0x00	; 0
    2082:	c3 53       	subi	r28, 0x33	; 51
    2084:	df 4f       	sbci	r29, 0xFF	; 255
    2086:	68 81       	ld	r22, Y
    2088:	cd 5c       	subi	r28, 0xCD	; 205
    208a:	d0 40       	sbci	r29, 0x00	; 0
    208c:	ce 01       	movw	r24, r28
    208e:	8f 5a       	subi	r24, 0xAF	; 175
    2090:	9f 4f       	sbci	r25, 0xFF	; 255
    2092:	09 95       	icall
    2094:	82 30       	cpi	r24, 0x02	; 2
    2096:	19 f1       	breq	.+70     	; 0x20de <main+0x412>
    2098:	28 f4       	brcc	.+10     	; 0x20a4 <main+0x3d8>
    209a:	88 23       	and	r24, r24
    209c:	41 f0       	breq	.+16     	; 0x20ae <main+0x3e2>
    209e:	81 30       	cpi	r24, 0x01	; 1
    20a0:	91 f0       	breq	.+36     	; 0x20c6 <main+0x3fa>
    20a2:	40 c0       	rjmp	.+128    	; 0x2124 <main+0x458>
    20a4:	83 30       	cpi	r24, 0x03	; 3
    20a6:	39 f1       	breq	.+78     	; 0x20f6 <main+0x42a>
    20a8:	84 30       	cpi	r24, 0x04	; 4
    20aa:	89 f1       	breq	.+98     	; 0x210e <main+0x442>
    20ac:	3b c0       	rjmp	.+118    	; 0x2124 <main+0x458>
						case 0:
							lcd.gotoxy(3,12);
    20ae:	6c e0       	ldi	r22, 0x0C	; 12
    20b0:	70 e0       	ldi	r23, 0x00	; 0
    20b2:	83 e0       	ldi	r24, 0x03	; 3
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	f6 01       	movw	r30, r12
    20b8:	09 95       	icall
							lcd.string_size("disabled",7);
    20ba:	67 e0       	ldi	r22, 0x07	; 7
    20bc:	85 e3       	ldi	r24, 0x35	; 53
    20be:	91 e0       	ldi	r25, 0x01	; 1
    20c0:	f7 01       	movw	r30, r14
    20c2:	09 95       	icall
							break;
    20c4:	2f c0       	rjmp	.+94     	; 0x2124 <main+0x458>
						case 1:
							lcd.gotoxy(3,12);
    20c6:	6c e0       	ldi	r22, 0x0C	; 12
    20c8:	70 e0       	ldi	r23, 0x00	; 0
    20ca:	83 e0       	ldi	r24, 0x03	; 3
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	f6 01       	movw	r30, r12
    20d0:	09 95       	icall
							lcd.string_size("exists",7);
    20d2:	67 e0       	ldi	r22, 0x07	; 7
    20d4:	8e e3       	ldi	r24, 0x3E	; 62
    20d6:	91 e0       	ldi	r25, 0x01	; 1
    20d8:	f7 01       	movw	r30, r14
    20da:	09 95       	icall
							break;
    20dc:	23 c0       	rjmp	.+70     	; 0x2124 <main+0x458>
						case 2:
							lcd.gotoxy(3,12);
    20de:	6c e0       	ldi	r22, 0x0C	; 12
    20e0:	70 e0       	ldi	r23, 0x00	; 0
    20e2:	83 e0       	ldi	r24, 0x03	; 3
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	f6 01       	movw	r30, r12
    20e8:	09 95       	icall
							lcd.string_size("upload",7);
    20ea:	67 e0       	ldi	r22, 0x07	; 7
    20ec:	85 e4       	ldi	r24, 0x45	; 69
    20ee:	91 e0       	ldi	r25, 0x01	; 1
    20f0:	f7 01       	movw	r30, r14
    20f2:	09 95       	icall
							break;
    20f4:	17 c0       	rjmp	.+46     	; 0x2124 <main+0x458>
						case 3:
							lcd.gotoxy(3,12);
    20f6:	6c e0       	ldi	r22, 0x0C	; 12
    20f8:	70 e0       	ldi	r23, 0x00	; 0
    20fa:	83 e0       	ldi	r24, 0x03	; 3
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	f6 01       	movw	r30, r12
    2100:	09 95       	icall
							lcd.string_size("upload",7);
    2102:	67 e0       	ldi	r22, 0x07	; 7
    2104:	85 e4       	ldi	r24, 0x45	; 69
    2106:	91 e0       	ldi	r25, 0x01	; 1
    2108:	f7 01       	movw	r30, r14
    210a:	09 95       	icall
							break;
    210c:	0b c0       	rjmp	.+22     	; 0x2124 <main+0x458>
						case 4:
							lcd.gotoxy(3,12);
    210e:	6c e0       	ldi	r22, 0x0C	; 12
    2110:	70 e0       	ldi	r23, 0x00	; 0
    2112:	83 e0       	ldi	r24, 0x03	; 3
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	f6 01       	movw	r30, r12
    2118:	09 95       	icall
							lcd.string_size("full",7);
    211a:	67 e0       	ldi	r22, 0x07	; 7
    211c:	8c e4       	ldi	r24, 0x4C	; 76
    211e:	91 e0       	ldi	r25, 0x01	; 1
    2120:	f7 01       	movw	r30, r14
    2122:	09 95       	icall
							break;
					}//End switch
				/******/
				//lfsm.read(&lfsm,input_tmp);
				
				keypad.flush();
    2124:	f4 01       	movw	r30, r8
    2126:	09 95       	icall
				option=0;
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	01 c0       	rjmp	.+2      	; 0x212e <main+0x462>
    212c:	91 2f       	mov	r25, r17
				}//End if
				if(keypadinput.character == 'C'){
    212e:	89 81       	ldd	r24, Y+1	; 0x01
    2130:	83 34       	cpi	r24, 0x43	; 67
    2132:	09 f0       	breq	.+2      	; 0x2136 <main+0x46a>
    2134:	41 c1       	rjmp	.+642    	; 0x23b8 <main+0x6ec>
					keypad.flush();
    2136:	f4 01       	movw	r30, r8
    2138:	09 95       	icall
    213a:	3f c1       	rjmp	.+638    	; 0x23ba <main+0x6ee>
					option=5;
				}
				break;
			case 6:
				lcd.gotoxy(1,0);
    213c:	60 e0       	ldi	r22, 0x00	; 0
    213e:	70 e0       	ldi	r23, 0x00	; 0
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	f6 01       	movw	r30, r12
    2146:	09 95       	icall
				lcd.string_size("Delete - 1",10);
    2148:	6a e0       	ldi	r22, 0x0A	; 10
    214a:	81 e5       	ldi	r24, 0x51	; 81
    214c:	91 e0       	ldi	r25, 0x01	; 1
    214e:	f7 01       	movw	r30, r14
    2150:	09 95       	icall
				lcd.gotoxy(2,0);
    2152:	60 e0       	ldi	r22, 0x00	; 0
    2154:	70 e0       	ldi	r23, 0x00	; 0
    2156:	82 e0       	ldi	r24, 0x02	; 2
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	f6 01       	movw	r30, r12
    215c:	09 95       	icall
				lcd.string_size("Remove - 2 No - 3",17);
    215e:	61 e1       	ldi	r22, 0x11	; 17
    2160:	8c e5       	ldi	r24, 0x5C	; 92
    2162:	91 e0       	ldi	r25, 0x01	; 1
    2164:	f7 01       	movw	r30, r14
    2166:	09 95       	icall
				option=7;
    2168:	17 e0       	ldi	r17, 0x07	; 7
				break;
    216a:	27 c1       	rjmp	.+590    	; 0x23ba <main+0x6ee>
			case 7:
				if(keypadinput.character == '1'){//Clear eeprom
    216c:	89 81       	ldd	r24, Y+1	; 0x01
    216e:	81 33       	cpi	r24, 0x31	; 49
    2170:	d9 f5       	brne	.+118    	; 0x21e8 <main+0x51c>
					lcd.gotoxy(1,0);
    2172:	60 e0       	ldi	r22, 0x00	; 0
    2174:	70 e0       	ldi	r23, 0x00	; 0
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	f6 01       	movw	r30, r12
    217c:	09 95       	icall
					lcd.hspace(10);
    217e:	8a e0       	ldi	r24, 0x0A	; 10
    2180:	f3 01       	movw	r30, r6
    2182:	09 95       	icall
					lcd.gotoxy(2,0);
    2184:	60 e0       	ldi	r22, 0x00	; 0
    2186:	70 e0       	ldi	r23, 0x00	; 0
    2188:	82 e0       	ldi	r24, 0x02	; 2
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	f6 01       	movw	r30, r12
    218e:	09 95       	icall
					lcd.hspace(17);
    2190:	81 e1       	ldi	r24, 0x11	; 17
    2192:	f3 01       	movw	r30, r6
    2194:	09 95       	icall
					lfsm.deleteall(&lfsm);
    2196:	a3 96       	adiw	r28, 0x23	; 35
    2198:	ee ad       	ldd	r30, Y+62	; 0x3e
    219a:	ff ad       	ldd	r31, Y+63	; 0x3f
    219c:	a3 97       	sbiw	r28, 0x23	; 35
    219e:	ce 01       	movw	r24, r28
    21a0:	8f 5a       	subi	r24, 0xAF	; 175
    21a2:	9f 4f       	sbci	r25, 0xFF	; 255
    21a4:	09 95       	icall
					lfsm.setpage(&lfsm,0);
    21a6:	ad 96       	adiw	r28, 0x2d	; 45
    21a8:	ee ad       	ldd	r30, Y+62	; 0x3e
    21aa:	ff ad       	ldd	r31, Y+63	; 0x3f
    21ac:	ad 97       	sbiw	r28, 0x2d	; 45
    21ae:	60 e0       	ldi	r22, 0x00	; 0
    21b0:	ce 01       	movw	r24, r28
    21b2:	8f 5a       	subi	r24, 0xAF	; 175
    21b4:	9f 4f       	sbci	r25, 0xFF	; 255
    21b6:	09 95       	icall
					lfsm.setoutput(&lfsm,0XFF);
    21b8:	a9 96       	adiw	r28, 0x29	; 41
    21ba:	ee ad       	ldd	r30, Y+62	; 0x3e
    21bc:	ff ad       	ldd	r31, Y+63	; 0x3f
    21be:	a9 97       	sbiw	r28, 0x29	; 41
    21c0:	6f ef       	ldi	r22, 0xFF	; 255
    21c2:	ce 01       	movw	r24, r28
    21c4:	8f 5a       	subi	r24, 0xAF	; 175
    21c6:	9f 4f       	sbci	r25, 0xFF	; 255
    21c8:	09 95       	icall
					keypad.flush();
    21ca:	f4 01       	movw	r30, r8
    21cc:	09 95       	icall
					lcd.gotoxy(3,12);
    21ce:	6c e0       	ldi	r22, 0x0C	; 12
    21d0:	70 e0       	ldi	r23, 0x00	; 0
    21d2:	83 e0       	ldi	r24, 0x03	; 3
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	f6 01       	movw	r30, r12
    21d8:	09 95       	icall
					lcd.string_size("deleted",7);
    21da:	67 e0       	ldi	r22, 0x07	; 7
    21dc:	8e e6       	ldi	r24, 0x6E	; 110
    21de:	91 e0       	ldi	r25, 0x01	; 1
    21e0:	f7 01       	movw	r30, r14
    21e2:	09 95       	icall
					option=0;
    21e4:	10 e0       	ldi	r17, 0x00	; 0
    21e6:	e9 c0       	rjmp	.+466    	; 0x23ba <main+0x6ee>
				}else if(keypadinput.character == '2'){//Remove one entry
    21e8:	82 33       	cpi	r24, 0x32	; 50
    21ea:	b1 f4       	brne	.+44     	; 0x2218 <main+0x54c>
					lcd.gotoxy(1,0);
    21ec:	60 e0       	ldi	r22, 0x00	; 0
    21ee:	70 e0       	ldi	r23, 0x00	; 0
    21f0:	81 e0       	ldi	r24, 0x01	; 1
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	f6 01       	movw	r30, r12
    21f6:	09 95       	icall
					lcd.hspace(10);
    21f8:	8a e0       	ldi	r24, 0x0A	; 10
    21fa:	f3 01       	movw	r30, r6
    21fc:	09 95       	icall
					lcd.gotoxy(2,0);
    21fe:	60 e0       	ldi	r22, 0x00	; 0
    2200:	70 e0       	ldi	r23, 0x00	; 0
    2202:	82 e0       	ldi	r24, 0x02	; 2
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	f6 01       	movw	r30, r12
    2208:	09 95       	icall
					lcd.hspace(17);
    220a:	81 e1       	ldi	r24, 0x11	; 17
    220c:	f3 01       	movw	r30, r6
    220e:	09 95       	icall
					keypad.flush();
    2210:	f4 01       	movw	r30, r8
    2212:	09 95       	icall
					option=8;
    2214:	18 e0       	ldi	r17, 0x08	; 8
    2216:	d1 c0       	rjmp	.+418    	; 0x23ba <main+0x6ee>
				}else if(keypadinput.character == '3'){//Exit
    2218:	83 33       	cpi	r24, 0x33	; 51
    221a:	09 f0       	breq	.+2      	; 0x221e <main+0x552>
    221c:	ce c0       	rjmp	.+412    	; 0x23ba <main+0x6ee>
					lcd.gotoxy(1,0);
    221e:	60 e0       	ldi	r22, 0x00	; 0
    2220:	70 e0       	ldi	r23, 0x00	; 0
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	f6 01       	movw	r30, r12
    2228:	09 95       	icall
					lcd.hspace(10);
    222a:	8a e0       	ldi	r24, 0x0A	; 10
    222c:	f3 01       	movw	r30, r6
    222e:	09 95       	icall
					lcd.gotoxy(2,0);
    2230:	60 e0       	ldi	r22, 0x00	; 0
    2232:	70 e0       	ldi	r23, 0x00	; 0
    2234:	82 e0       	ldi	r24, 0x02	; 2
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	f6 01       	movw	r30, r12
    223a:	09 95       	icall
					lcd.hspace(17);
    223c:	81 e1       	ldi	r24, 0x11	; 17
    223e:	f3 01       	movw	r30, r6
    2240:	09 95       	icall
					keypad.flush();
    2242:	f4 01       	movw	r30, r8
    2244:	09 95       	icall
					option=0;
    2246:	10 e0       	ldi	r17, 0x00	; 0
    2248:	b8 c0       	rjmp	.+368    	; 0x23ba <main+0x6ee>
				}
				break;
			case 8:
				lcd.gotoxy(0,0);
    224a:	60 e0       	ldi	r22, 0x00	; 0
    224c:	70 e0       	ldi	r23, 0x00	; 0
    224e:	80 e0       	ldi	r24, 0x00	; 0
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	f6 01       	movw	r30, r12
    2254:	09 95       	icall
				lcd.string_size("Enter: ",12);
    2256:	6c e0       	ldi	r22, 0x0C	; 12
    2258:	89 e1       	ldi	r24, 0x19	; 25
    225a:	91 e0       	ldi	r25, 0x01	; 1
    225c:	f7 01       	movw	r30, r14
    225e:	09 95       	icall
				lcd.gotoxy(1,0);
    2260:	60 e0       	ldi	r22, 0x00	; 0
    2262:	70 e0       	ldi	r23, 0x00	; 0
    2264:	81 e0       	ldi	r24, 0x01	; 1
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	f6 01       	movw	r30, r12
    226a:	09 95       	icall
				lcd.string_size("Input",20);
    226c:	64 e1       	ldi	r22, 0x14	; 20
    226e:	86 e7       	ldi	r24, 0x76	; 118
    2270:	91 e0       	ldi	r25, 0x01	; 1
    2272:	f7 01       	movw	r30, r14
    2274:	09 95       	icall
				option=9;
    2276:	19 e0       	ldi	r17, 0x09	; 9
				break;
    2278:	a0 c0       	rjmp	.+320    	; 0x23ba <main+0x6ee>
			case 9:
				lcd.gotoxy(0,7);
    227a:	67 e0       	ldi	r22, 0x07	; 7
    227c:	70 e0       	ldi	r23, 0x00	; 0
    227e:	80 e0       	ldi	r24, 0x00	; 0
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	f6 01       	movw	r30, r12
    2284:	09 95       	icall
				lcd.string_size(keypadinput.string,4);
    2286:	64 e0       	ldi	r22, 0x04	; 4
    2288:	ce 01       	movw	r24, r28
    228a:	02 96       	adiw	r24, 0x02	; 2
    228c:	f7 01       	movw	r30, r14
    228e:	09 95       	icall
				if(keypadinput.character == 'D'){
    2290:	89 81       	ldd	r24, Y+1	; 0x01
    2292:	84 34       	cpi	r24, 0x44	; 68
    2294:	09 f0       	breq	.+2      	; 0x2298 <main+0x5cc>
    2296:	83 c0       	rjmp	.+262    	; 0x239e <main+0x6d2>
					input_tmp=func.strToInt(keypadinput.string);
    2298:	ce 01       	movw	r24, r28
    229a:	02 96       	adiw	r24, 0x02	; 2
    229c:	f1 01       	movw	r30, r2
    229e:	09 95       	icall
    22a0:	18 2f       	mov	r17, r24
    22a2:	c3 53       	subi	r28, 0x33	; 51
    22a4:	df 4f       	sbci	r29, 0xFF	; 255
    22a6:	88 83       	st	Y, r24
    22a8:	cd 5c       	subi	r28, 0xCD	; 205
    22aa:	d0 40       	sbci	r29, 0x00	; 0
					lcd.gotoxy(2,0);
    22ac:	60 e0       	ldi	r22, 0x00	; 0
    22ae:	70 e0       	ldi	r23, 0x00	; 0
    22b0:	82 e0       	ldi	r24, 0x02	; 2
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	f6 01       	movw	r30, r12
    22b6:	09 95       	icall
					func.ui16toa(input_tmp,string);
    22b8:	64 e4       	ldi	r22, 0x44	; 68
    22ba:	72 e0       	ldi	r23, 0x02	; 2
    22bc:	81 2f       	mov	r24, r17
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	f5 01       	movw	r30, r10
    22c2:	09 95       	icall
					lcd.string(string);
    22c4:	84 e4       	ldi	r24, 0x44	; 68
    22c6:	92 e0       	ldi	r25, 0x02	; 2
    22c8:	f2 01       	movw	r30, r4
    22ca:	09 95       	icall
					switch(lfsm.remove(&lfsm,input_tmp)){
    22cc:	a1 96       	adiw	r28, 0x21	; 33
    22ce:	ee ad       	ldd	r30, Y+62	; 0x3e
    22d0:	ff ad       	ldd	r31, Y+63	; 0x3f
    22d2:	a1 97       	sbiw	r28, 0x21	; 33
    22d4:	61 2f       	mov	r22, r17
    22d6:	ce 01       	movw	r24, r28
    22d8:	8f 5a       	subi	r24, 0xAF	; 175
    22da:	9f 4f       	sbci	r25, 0xFF	; 255
    22dc:	09 95       	icall
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	8b 32       	cpi	r24, 0x2B	; 43
    22e2:	91 05       	cpc	r25, r1
    22e4:	08 f0       	brcs	.+2      	; 0x22e8 <main+0x61c>
    22e6:	58 c0       	rjmp	.+176    	; 0x2398 <main+0x6cc>
    22e8:	fc 01       	movw	r30, r24
    22ea:	e8 5b       	subi	r30, 0xB8	; 184
    22ec:	ff 4f       	sbci	r31, 0xFF	; 255
    22ee:	0c 94 47 12 	jmp	0x248e	; 0x248e <__tablejump2__>
						case 0:
							lcd.gotoxy(3,12);
    22f2:	6c e0       	ldi	r22, 0x0C	; 12
    22f4:	70 e0       	ldi	r23, 0x00	; 0
    22f6:	83 e0       	ldi	r24, 0x03	; 3
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	f6 01       	movw	r30, r12
    22fc:	09 95       	icall
							lcd.string_size("No entry",7);
    22fe:	67 e0       	ldi	r22, 0x07	; 7
    2300:	8c e7       	ldi	r24, 0x7C	; 124
    2302:	91 e0       	ldi	r25, 0x01	; 1
    2304:	f7 01       	movw	r30, r14
    2306:	09 95       	icall
							break;
    2308:	47 c0       	rjmp	.+142    	; 0x2398 <main+0x6cc>
						case 1:
							lcd.gotoxy(3,12);
    230a:	6c e0       	ldi	r22, 0x0C	; 12
    230c:	70 e0       	ldi	r23, 0x00	; 0
    230e:	83 e0       	ldi	r24, 0x03	; 3
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	f6 01       	movw	r30, r12
    2314:	09 95       	icall
							lcd.string_size("New Entry",7);
    2316:	67 e0       	ldi	r22, 0x07	; 7
    2318:	85 e8       	ldi	r24, 0x85	; 133
    231a:	91 e0       	ldi	r25, 0x01	; 1
    231c:	f7 01       	movw	r30, r14
    231e:	09 95       	icall
							break;
    2320:	3b c0       	rjmp	.+118    	; 0x2398 <main+0x6cc>
						case 2:
							lcd.gotoxy(3,12);
    2322:	6c e0       	ldi	r22, 0x0C	; 12
    2324:	70 e0       	ldi	r23, 0x00	; 0
    2326:	83 e0       	ldi	r24, 0x03	; 3
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	f6 01       	movw	r30, r12
    232c:	09 95       	icall
							lcd.string_size("global logic",7);
    232e:	67 e0       	ldi	r22, 0x07	; 7
    2330:	8f e8       	ldi	r24, 0x8F	; 143
    2332:	91 e0       	ldi	r25, 0x01	; 1
    2334:	f7 01       	movw	r30, r14
    2336:	09 95       	icall
							break;
    2338:	2f c0       	rjmp	.+94     	; 0x2398 <main+0x6cc>
						case 3:
							lcd.gotoxy(3,12);
    233a:	6c e0       	ldi	r22, 0x0C	; 12
    233c:	70 e0       	ldi	r23, 0x00	; 0
    233e:	83 e0       	ldi	r24, 0x03	; 3
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	f6 01       	movw	r30, r12
    2344:	09 95       	icall
							lcd.string_size("local logic",7);
    2346:	67 e0       	ldi	r22, 0x07	; 7
    2348:	8c e9       	ldi	r24, 0x9C	; 156
    234a:	91 e0       	ldi	r25, 0x01	; 1
    234c:	f7 01       	movw	r30, r14
    234e:	09 95       	icall
							break;
    2350:	23 c0       	rjmp	.+70     	; 0x2398 <main+0x6cc>
						case 4:
							lcd.gotoxy(3,12);
    2352:	6c e0       	ldi	r22, 0x0C	; 12
    2354:	70 e0       	ldi	r23, 0x00	; 0
    2356:	83 e0       	ldi	r24, 0x03	; 3
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	f6 01       	movw	r30, r12
    235c:	09 95       	icall
							lcd.string_size("local logic",7);
    235e:	67 e0       	ldi	r22, 0x07	; 7
    2360:	8c e9       	ldi	r24, 0x9C	; 156
    2362:	91 e0       	ldi	r25, 0x01	; 1
    2364:	f7 01       	movw	r30, r14
    2366:	09 95       	icall
							break;
    2368:	17 c0       	rjmp	.+46     	; 0x2398 <main+0x6cc>
						case 41:
							lcd.gotoxy(3,12);
    236a:	6c e0       	ldi	r22, 0x0C	; 12
    236c:	70 e0       	ldi	r23, 0x00	; 0
    236e:	83 e0       	ldi	r24, 0x03	; 3
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	f6 01       	movw	r30, r12
    2374:	09 95       	icall
							lcd.string_size("local above",7);
    2376:	67 e0       	ldi	r22, 0x07	; 7
    2378:	88 ea       	ldi	r24, 0xA8	; 168
    237a:	91 e0       	ldi	r25, 0x01	; 1
    237c:	f7 01       	movw	r30, r14
    237e:	09 95       	icall
							break;
    2380:	0b c0       	rjmp	.+22     	; 0x2398 <main+0x6cc>
						case 42:
							lcd.gotoxy(3,12);
    2382:	6c e0       	ldi	r22, 0x0C	; 12
    2384:	70 e0       	ldi	r23, 0x00	; 0
    2386:	83 e0       	ldi	r24, 0x03	; 3
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	f6 01       	movw	r30, r12
    238c:	09 95       	icall
							lcd.string_size("local bellow",7);
    238e:	67 e0       	ldi	r22, 0x07	; 7
    2390:	84 eb       	ldi	r24, 0xB4	; 180
    2392:	91 e0       	ldi	r25, 0x01	; 1
    2394:	f7 01       	movw	r30, r14
    2396:	09 95       	icall
							break;
					}//End switch
					/******/
					//lfsm.read(&lfsm,input_tmp);
					
					keypad.flush();
    2398:	f4 01       	movw	r30, r8
    239a:	09 95       	icall
					option=0;
    239c:	10 e0       	ldi	r17, 0x00	; 0
				}//End if
				if(keypadinput.character == 'C'){
    239e:	89 81       	ldd	r24, Y+1	; 0x01
    23a0:	83 34       	cpi	r24, 0x43	; 67
    23a2:	59 f4       	brne	.+22     	; 0x23ba <main+0x6ee>
					keypad.flush();
    23a4:	f4 01       	movw	r30, r8
    23a6:	09 95       	icall
					option=8;
    23a8:	18 e0       	ldi	r17, 0x08	; 8
    23aa:	07 c0       	rjmp	.+14     	; 0x23ba <main+0x6ee>
    23ac:	19 2f       	mov	r17, r25
    23ae:	05 c0       	rjmp	.+10     	; 0x23ba <main+0x6ee>
    23b0:	19 2f       	mov	r17, r25
    23b2:	03 c0       	rjmp	.+6      	; 0x23ba <main+0x6ee>
    23b4:	19 2f       	mov	r17, r25
    23b6:	01 c0       	rjmp	.+2      	; 0x23ba <main+0x6ee>
    23b8:	19 2f       	mov	r17, r25
				break;
			default:
				break;
		}//End switch
		/***DISPLAY***/
		lcd.gotoxy(3,0);
    23ba:	60 e0       	ldi	r22, 0x00	; 0
    23bc:	70 e0       	ldi	r23, 0x00	; 0
    23be:	83 e0       	ldi	r24, 0x03	; 3
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	f6 01       	movw	r30, r12
    23c4:	09 95       	icall
		lcd.string_size("Output ",7);
    23c6:	67 e0       	ldi	r22, 0x07	; 7
    23c8:	81 ec       	ldi	r24, 0xC1	; 193
    23ca:	91 e0       	ldi	r25, 0x01	; 1
    23cc:	f7 01       	movw	r30, r14
    23ce:	09 95       	icall
		func.ui16toa(lfsm.getoutput(&lfsm),string);
    23d0:	a5 96       	adiw	r28, 0x25	; 37
    23d2:	ee ad       	ldd	r30, Y+62	; 0x3e
    23d4:	ff ad       	ldd	r31, Y+63	; 0x3f
    23d6:	a5 97       	sbiw	r28, 0x25	; 37
    23d8:	ce 01       	movw	r24, r28
    23da:	8f 5a       	subi	r24, 0xAF	; 175
    23dc:	9f 4f       	sbci	r25, 0xFF	; 255
    23de:	09 95       	icall
    23e0:	64 e4       	ldi	r22, 0x44	; 68
    23e2:	72 e0       	ldi	r23, 0x02	; 2
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	f5 01       	movw	r30, r10
    23e8:	09 95       	icall
		lcd.string_size(string,4);
    23ea:	64 e0       	ldi	r22, 0x04	; 4
    23ec:	84 e4       	ldi	r24, 0x44	; 68
    23ee:	92 e0       	ldi	r25, 0x02	; 2
    23f0:	f7 01       	movw	r30, r14
    23f2:	09 95       	icall
		//lcd.hspace(2);
		//func.ui16toa(lfsm.getstatus(&lfsm),string);
		//lcd.string_size(string,4);
		PORTB=lfsm.getoutput(&lfsm);
    23f4:	a5 96       	adiw	r28, 0x25	; 37
    23f6:	ee ad       	ldd	r30, Y+62	; 0x3e
    23f8:	ff ad       	ldd	r31, Y+63	; 0x3f
    23fa:	a5 97       	sbiw	r28, 0x25	; 37
    23fc:	ce 01       	movw	r24, r28
    23fe:	8f 5a       	subi	r24, 0xAF	; 175
    2400:	9f 4f       	sbci	r25, 0xFF	; 255
    2402:	09 95       	icall
    2404:	85 b9       	out	0x05, r24	; 5
    2406:	d0 cc       	rjmp	.-1632   	; 0x1da8 <main+0xdc>

00002408 <__mulsi3>:
    2408:	db 01       	movw	r26, r22
    240a:	8f 93       	push	r24
    240c:	9f 93       	push	r25
    240e:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <__muluhisi3>
    2412:	bf 91       	pop	r27
    2414:	af 91       	pop	r26
    2416:	a2 9f       	mul	r26, r18
    2418:	80 0d       	add	r24, r0
    241a:	91 1d       	adc	r25, r1
    241c:	a3 9f       	mul	r26, r19
    241e:	90 0d       	add	r25, r0
    2420:	b2 9f       	mul	r27, r18
    2422:	90 0d       	add	r25, r0
    2424:	11 24       	eor	r1, r1
    2426:	08 95       	ret

00002428 <__divmodhi4>:
    2428:	97 fb       	bst	r25, 7
    242a:	07 2e       	mov	r0, r23
    242c:	16 f4       	brtc	.+4      	; 0x2432 <__divmodhi4+0xa>
    242e:	00 94       	com	r0
    2430:	07 d0       	rcall	.+14     	; 0x2440 <__divmodhi4_neg1>
    2432:	77 fd       	sbrc	r23, 7
    2434:	09 d0       	rcall	.+18     	; 0x2448 <__divmodhi4_neg2>
    2436:	0e 94 67 12 	call	0x24ce	; 0x24ce <__udivmodhi4>
    243a:	07 fc       	sbrc	r0, 7
    243c:	05 d0       	rcall	.+10     	; 0x2448 <__divmodhi4_neg2>
    243e:	3e f4       	brtc	.+14     	; 0x244e <__divmodhi4_exit>

00002440 <__divmodhi4_neg1>:
    2440:	90 95       	com	r25
    2442:	81 95       	neg	r24
    2444:	9f 4f       	sbci	r25, 0xFF	; 255
    2446:	08 95       	ret

00002448 <__divmodhi4_neg2>:
    2448:	70 95       	com	r23
    244a:	61 95       	neg	r22
    244c:	7f 4f       	sbci	r23, 0xFF	; 255

0000244e <__divmodhi4_exit>:
    244e:	08 95       	ret

00002450 <__divmodsi4>:
    2450:	05 2e       	mov	r0, r21
    2452:	97 fb       	bst	r25, 7
    2454:	1e f4       	brtc	.+6      	; 0x245c <__divmodsi4+0xc>
    2456:	00 94       	com	r0
    2458:	0e 94 3f 12 	call	0x247e	; 0x247e <__negsi2>
    245c:	57 fd       	sbrc	r21, 7
    245e:	07 d0       	rcall	.+14     	; 0x246e <__divmodsi4_neg2>
    2460:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <__udivmodsi4>
    2464:	07 fc       	sbrc	r0, 7
    2466:	03 d0       	rcall	.+6      	; 0x246e <__divmodsi4_neg2>
    2468:	4e f4       	brtc	.+18     	; 0x247c <__divmodsi4_exit>
    246a:	0c 94 3f 12 	jmp	0x247e	; 0x247e <__negsi2>

0000246e <__divmodsi4_neg2>:
    246e:	50 95       	com	r21
    2470:	40 95       	com	r20
    2472:	30 95       	com	r19
    2474:	21 95       	neg	r18
    2476:	3f 4f       	sbci	r19, 0xFF	; 255
    2478:	4f 4f       	sbci	r20, 0xFF	; 255
    247a:	5f 4f       	sbci	r21, 0xFF	; 255

0000247c <__divmodsi4_exit>:
    247c:	08 95       	ret

0000247e <__negsi2>:
    247e:	90 95       	com	r25
    2480:	80 95       	com	r24
    2482:	70 95       	com	r23
    2484:	61 95       	neg	r22
    2486:	7f 4f       	sbci	r23, 0xFF	; 255
    2488:	8f 4f       	sbci	r24, 0xFF	; 255
    248a:	9f 4f       	sbci	r25, 0xFF	; 255
    248c:	08 95       	ret

0000248e <__tablejump2__>:
    248e:	ee 0f       	add	r30, r30
    2490:	ff 1f       	adc	r31, r31
    2492:	05 90       	lpm	r0, Z+
    2494:	f4 91       	lpm	r31, Z
    2496:	e0 2d       	mov	r30, r0
    2498:	09 94       	ijmp

0000249a <__umulhisi3>:
    249a:	a2 9f       	mul	r26, r18
    249c:	b0 01       	movw	r22, r0
    249e:	b3 9f       	mul	r27, r19
    24a0:	c0 01       	movw	r24, r0
    24a2:	a3 9f       	mul	r26, r19
    24a4:	70 0d       	add	r23, r0
    24a6:	81 1d       	adc	r24, r1
    24a8:	11 24       	eor	r1, r1
    24aa:	91 1d       	adc	r25, r1
    24ac:	b2 9f       	mul	r27, r18
    24ae:	70 0d       	add	r23, r0
    24b0:	81 1d       	adc	r24, r1
    24b2:	11 24       	eor	r1, r1
    24b4:	91 1d       	adc	r25, r1
    24b6:	08 95       	ret

000024b8 <__muluhisi3>:
    24b8:	0e 94 4d 12 	call	0x249a	; 0x249a <__umulhisi3>
    24bc:	a5 9f       	mul	r26, r21
    24be:	90 0d       	add	r25, r0
    24c0:	b4 9f       	mul	r27, r20
    24c2:	90 0d       	add	r25, r0
    24c4:	a4 9f       	mul	r26, r20
    24c6:	80 0d       	add	r24, r0
    24c8:	91 1d       	adc	r25, r1
    24ca:	11 24       	eor	r1, r1
    24cc:	08 95       	ret

000024ce <__udivmodhi4>:
    24ce:	aa 1b       	sub	r26, r26
    24d0:	bb 1b       	sub	r27, r27
    24d2:	51 e1       	ldi	r21, 0x11	; 17
    24d4:	07 c0       	rjmp	.+14     	; 0x24e4 <__udivmodhi4_ep>

000024d6 <__udivmodhi4_loop>:
    24d6:	aa 1f       	adc	r26, r26
    24d8:	bb 1f       	adc	r27, r27
    24da:	a6 17       	cp	r26, r22
    24dc:	b7 07       	cpc	r27, r23
    24de:	10 f0       	brcs	.+4      	; 0x24e4 <__udivmodhi4_ep>
    24e0:	a6 1b       	sub	r26, r22
    24e2:	b7 0b       	sbc	r27, r23

000024e4 <__udivmodhi4_ep>:
    24e4:	88 1f       	adc	r24, r24
    24e6:	99 1f       	adc	r25, r25
    24e8:	5a 95       	dec	r21
    24ea:	a9 f7       	brne	.-22     	; 0x24d6 <__udivmodhi4_loop>
    24ec:	80 95       	com	r24
    24ee:	90 95       	com	r25
    24f0:	bc 01       	movw	r22, r24
    24f2:	cd 01       	movw	r24, r26
    24f4:	08 95       	ret

000024f6 <__udivmodsi4>:
    24f6:	a1 e2       	ldi	r26, 0x21	; 33
    24f8:	1a 2e       	mov	r1, r26
    24fa:	aa 1b       	sub	r26, r26
    24fc:	bb 1b       	sub	r27, r27
    24fe:	fd 01       	movw	r30, r26
    2500:	0d c0       	rjmp	.+26     	; 0x251c <__udivmodsi4_ep>

00002502 <__udivmodsi4_loop>:
    2502:	aa 1f       	adc	r26, r26
    2504:	bb 1f       	adc	r27, r27
    2506:	ee 1f       	adc	r30, r30
    2508:	ff 1f       	adc	r31, r31
    250a:	a2 17       	cp	r26, r18
    250c:	b3 07       	cpc	r27, r19
    250e:	e4 07       	cpc	r30, r20
    2510:	f5 07       	cpc	r31, r21
    2512:	20 f0       	brcs	.+8      	; 0x251c <__udivmodsi4_ep>
    2514:	a2 1b       	sub	r26, r18
    2516:	b3 0b       	sbc	r27, r19
    2518:	e4 0b       	sbc	r30, r20
    251a:	f5 0b       	sbc	r31, r21

0000251c <__udivmodsi4_ep>:
    251c:	66 1f       	adc	r22, r22
    251e:	77 1f       	adc	r23, r23
    2520:	88 1f       	adc	r24, r24
    2522:	99 1f       	adc	r25, r25
    2524:	1a 94       	dec	r1
    2526:	69 f7       	brne	.-38     	; 0x2502 <__udivmodsi4_loop>
    2528:	60 95       	com	r22
    252a:	70 95       	com	r23
    252c:	80 95       	com	r24
    252e:	90 95       	com	r25
    2530:	9b 01       	movw	r18, r22
    2532:	ac 01       	movw	r20, r24
    2534:	bd 01       	movw	r22, r26
    2536:	cf 01       	movw	r24, r30
    2538:	08 95       	ret

0000253a <eeprom_read_block>:
    253a:	dc 01       	movw	r26, r24
    253c:	cb 01       	movw	r24, r22

0000253e <eeprom_read_blraw>:
    253e:	fc 01       	movw	r30, r24
    2540:	f9 99       	sbic	0x1f, 1	; 31
    2542:	fe cf       	rjmp	.-4      	; 0x2540 <eeprom_read_blraw+0x2>
    2544:	06 c0       	rjmp	.+12     	; 0x2552 <eeprom_read_blraw+0x14>
    2546:	f2 bd       	out	0x22, r31	; 34
    2548:	e1 bd       	out	0x21, r30	; 33
    254a:	f8 9a       	sbi	0x1f, 0	; 31
    254c:	31 96       	adiw	r30, 0x01	; 1
    254e:	00 b4       	in	r0, 0x20	; 32
    2550:	0d 92       	st	X+, r0
    2552:	41 50       	subi	r20, 0x01	; 1
    2554:	50 40       	sbci	r21, 0x00	; 0
    2556:	b8 f7       	brcc	.-18     	; 0x2546 <eeprom_read_blraw+0x8>
    2558:	08 95       	ret

0000255a <eeprom_read_byte>:
    255a:	f9 99       	sbic	0x1f, 1	; 31
    255c:	fe cf       	rjmp	.-4      	; 0x255a <eeprom_read_byte>
    255e:	92 bd       	out	0x22, r25	; 34
    2560:	81 bd       	out	0x21, r24	; 33
    2562:	f8 9a       	sbi	0x1f, 0	; 31
    2564:	99 27       	eor	r25, r25
    2566:	80 b5       	in	r24, 0x20	; 32
    2568:	08 95       	ret

0000256a <eeprom_read_word>:
    256a:	a8 e1       	ldi	r26, 0x18	; 24
    256c:	b0 e0       	ldi	r27, 0x00	; 0
    256e:	42 e0       	ldi	r20, 0x02	; 2
    2570:	50 e0       	ldi	r21, 0x00	; 0
    2572:	0c 94 9f 12 	jmp	0x253e	; 0x253e <eeprom_read_blraw>

00002576 <eeprom_update_block>:
    2576:	dc 01       	movw	r26, r24
    2578:	a4 0f       	add	r26, r20
    257a:	b5 1f       	adc	r27, r21
    257c:	41 50       	subi	r20, 0x01	; 1
    257e:	50 40       	sbci	r21, 0x00	; 0
    2580:	48 f0       	brcs	.+18     	; 0x2594 <eeprom_update_block+0x1e>
    2582:	cb 01       	movw	r24, r22
    2584:	84 0f       	add	r24, r20
    2586:	95 1f       	adc	r25, r21
    2588:	2e 91       	ld	r18, -X
    258a:	0e 94 cc 12 	call	0x2598	; 0x2598 <eeprom_update_r18>
    258e:	41 50       	subi	r20, 0x01	; 1
    2590:	50 40       	sbci	r21, 0x00	; 0
    2592:	d0 f7       	brcc	.-12     	; 0x2588 <eeprom_update_block+0x12>
    2594:	08 95       	ret

00002596 <eeprom_update_byte>:
    2596:	26 2f       	mov	r18, r22

00002598 <eeprom_update_r18>:
    2598:	f9 99       	sbic	0x1f, 1	; 31
    259a:	fe cf       	rjmp	.-4      	; 0x2598 <eeprom_update_r18>
    259c:	92 bd       	out	0x22, r25	; 34
    259e:	81 bd       	out	0x21, r24	; 33
    25a0:	f8 9a       	sbi	0x1f, 0	; 31
    25a2:	01 97       	sbiw	r24, 0x01	; 1
    25a4:	00 b4       	in	r0, 0x20	; 32
    25a6:	02 16       	cp	r0, r18
    25a8:	39 f0       	breq	.+14     	; 0x25b8 <eeprom_update_r18+0x20>
    25aa:	1f ba       	out	0x1f, r1	; 31
    25ac:	20 bd       	out	0x20, r18	; 32
    25ae:	0f b6       	in	r0, 0x3f	; 63
    25b0:	f8 94       	cli
    25b2:	fa 9a       	sbi	0x1f, 2	; 31
    25b4:	f9 9a       	sbi	0x1f, 1	; 31
    25b6:	0f be       	out	0x3f, r0	; 63
    25b8:	08 95       	ret

000025ba <eeprom_update_dword>:
    25ba:	03 96       	adiw	r24, 0x03	; 3
    25bc:	27 2f       	mov	r18, r23
    25be:	0e 94 cc 12 	call	0x2598	; 0x2598 <eeprom_update_r18>
    25c2:	0e 94 cb 12 	call	0x2596	; 0x2596 <eeprom_update_byte>
    25c6:	25 2f       	mov	r18, r21
    25c8:	0e 94 cc 12 	call	0x2598	; 0x2598 <eeprom_update_r18>
    25cc:	24 2f       	mov	r18, r20
    25ce:	0c 94 cc 12 	jmp	0x2598	; 0x2598 <eeprom_update_r18>

000025d2 <eeprom_update_word>:
    25d2:	01 96       	adiw	r24, 0x01	; 1
    25d4:	27 2f       	mov	r18, r23
    25d6:	0e 94 cc 12 	call	0x2598	; 0x2598 <eeprom_update_r18>
    25da:	0c 94 cb 12 	jmp	0x2596	; 0x2596 <eeprom_update_byte>

000025de <eeprom_write_block>:
    25de:	dc 01       	movw	r26, r24
    25e0:	cb 01       	movw	r24, r22
    25e2:	03 c0       	rjmp	.+6      	; 0x25ea <eeprom_write_block+0xc>
    25e4:	2d 91       	ld	r18, X+
    25e6:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <eeprom_write_r18>
    25ea:	41 50       	subi	r20, 0x01	; 1
    25ec:	50 40       	sbci	r21, 0x00	; 0
    25ee:	d0 f7       	brcc	.-12     	; 0x25e4 <eeprom_write_block+0x6>
    25f0:	08 95       	ret

000025f2 <eeprom_write_byte>:
    25f2:	26 2f       	mov	r18, r22

000025f4 <eeprom_write_r18>:
    25f4:	f9 99       	sbic	0x1f, 1	; 31
    25f6:	fe cf       	rjmp	.-4      	; 0x25f4 <eeprom_write_r18>
    25f8:	1f ba       	out	0x1f, r1	; 31
    25fa:	92 bd       	out	0x22, r25	; 34
    25fc:	81 bd       	out	0x21, r24	; 33
    25fe:	20 bd       	out	0x20, r18	; 32
    2600:	0f b6       	in	r0, 0x3f	; 63
    2602:	f8 94       	cli
    2604:	fa 9a       	sbi	0x1f, 2	; 31
    2606:	f9 9a       	sbi	0x1f, 1	; 31
    2608:	0f be       	out	0x3f, r0	; 63
    260a:	01 96       	adiw	r24, 0x01	; 1
    260c:	08 95       	ret

0000260e <eeprom_write_dword>:
    260e:	24 2f       	mov	r18, r20
    2610:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <eeprom_write_r18>
    2614:	25 2f       	mov	r18, r21
    2616:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <eeprom_write_r18>
    261a:	0c 94 0f 13 	jmp	0x261e	; 0x261e <eeprom_write_word>

0000261e <eeprom_write_word>:
    261e:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <eeprom_write_byte>
    2622:	27 2f       	mov	r18, r23
    2624:	0c 94 fa 12 	jmp	0x25f4	; 0x25f4 <eeprom_write_r18>

00002628 <_exit>:
    2628:	f8 94       	cli

0000262a <__stop_program>:
    262a:	ff cf       	rjmp	.-2      	; 0x262a <__stop_program>
