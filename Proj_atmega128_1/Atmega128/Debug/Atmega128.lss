
Atmega128.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  0000324c  00003300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000324c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000016c  0080013e  0080013e  0000333e  2**0
                  ALLOC
  3 .eeprom       00000013  00810000  00810000  0000333e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00003351  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003384  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000638  00000000  00000000  000033c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006242  00000000  00000000  000039f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001a82  00000000  00000000  00009c3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003d85  00000000  00000000  0000b6bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000108c  00000000  00000000  0000f444  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000145c  00000000  00000000  000104d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005133  00000000  00000000  0001192c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000005c8  00000000  00000000  00016a5f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	8b c0       	rjmp	.+278    	; 0x118 <__ctors_end>
       2:	00 00       	nop
       4:	a8 c0       	rjmp	.+336    	; 0x156 <__bad_interrupt>
       6:	00 00       	nop
       8:	a6 c0       	rjmp	.+332    	; 0x156 <__bad_interrupt>
       a:	00 00       	nop
       c:	a4 c0       	rjmp	.+328    	; 0x156 <__bad_interrupt>
       e:	00 00       	nop
      10:	a2 c0       	rjmp	.+324    	; 0x156 <__bad_interrupt>
      12:	00 00       	nop
      14:	a0 c0       	rjmp	.+320    	; 0x156 <__bad_interrupt>
      16:	00 00       	nop
      18:	9e c0       	rjmp	.+316    	; 0x156 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0c 94 5f 18 	jmp	0x30be	; 0x30be <__vector_7>
      20:	9a c0       	rjmp	.+308    	; 0x156 <__bad_interrupt>
      22:	00 00       	nop
      24:	98 c0       	rjmp	.+304    	; 0x156 <__bad_interrupt>
      26:	00 00       	nop
      28:	a6 c6       	rjmp	.+3404   	; 0xd76 <__vector_10>
      2a:	00 00       	nop
      2c:	ae c6       	rjmp	.+3420   	; 0xd8a <__vector_11>
      2e:	00 00       	nop
      30:	b6 c6       	rjmp	.+3436   	; 0xd9e <__vector_12>
      32:	00 00       	nop
      34:	be c6       	rjmp	.+3452   	; 0xdb2 <__vector_13>
      36:	00 00       	nop
      38:	c6 c6       	rjmp	.+3468   	; 0xdc6 <__vector_14>
      3a:	00 00       	nop
      3c:	ce c6       	rjmp	.+3484   	; 0xdda <__vector_15>
      3e:	00 00       	nop
      40:	d6 c6       	rjmp	.+3500   	; 0xdee <__vector_16>
      42:	00 00       	nop
      44:	88 c0       	rjmp	.+272    	; 0x156 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 a3 08 	jmp	0x1146	; 0x1146 <__vector_18>
      4c:	0c 94 db 08 	jmp	0x11b6	; 0x11b6 <__vector_19>
      50:	82 c0       	rjmp	.+260    	; 0x156 <__bad_interrupt>
      52:	00 00       	nop
      54:	21 c1       	rjmp	.+578    	; 0x298 <__vector_21>
      56:	00 00       	nop
      58:	7e c0       	rjmp	.+252    	; 0x156 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	7c c0       	rjmp	.+248    	; 0x156 <__bad_interrupt>
      5e:	00 00       	nop
      60:	d0 c6       	rjmp	.+3488   	; 0xe02 <__vector_24>
      62:	00 00       	nop
      64:	d8 c6       	rjmp	.+3504   	; 0xe16 <__vector_25>
      66:	00 00       	nop
      68:	e0 c6       	rjmp	.+3520   	; 0xe2a <__vector_26>
      6a:	00 00       	nop
      6c:	e8 c6       	rjmp	.+3536   	; 0xe3e <__vector_27>
      6e:	00 00       	nop
      70:	f0 c6       	rjmp	.+3552   	; 0xe52 <__vector_28>
      72:	00 00       	nop
      74:	0c 94 0e 18 	jmp	0x301c	; 0x301c <__vector_29>
      78:	0c 94 75 0a 	jmp	0x14ea	; 0x14ea <__vector_30>
      7c:	0c 94 b0 0a 	jmp	0x1560	; 0x1560 <__vector_31>
      80:	6a c0       	rjmp	.+212    	; 0x156 <__bad_interrupt>
      82:	00 00       	nop
      84:	68 c0       	rjmp	.+208    	; 0x156 <__bad_interrupt>
      86:	00 00       	nop
      88:	66 c0       	rjmp	.+204    	; 0x156 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	08 02       	muls	r16, r24
      8e:	24 02       	muls	r18, r20
      90:	40 02       	muls	r20, r16
      92:	5c 02       	muls	r21, r28
      94:	78 02       	muls	r23, r24
      96:	93 02       	muls	r25, r19
      98:	ae 02       	muls	r26, r30
      9a:	c9 02       	muls	r28, r25
      9c:	ef 02       	muls	r30, r31
      9e:	f3 02       	muls	r31, r19
      a0:	f7 02       	muls	r31, r23
      a2:	fb 02       	muls	r31, r27
      a4:	ff 02       	muls	r31, r31
      a6:	03 03       	mulsu	r16, r19
      a8:	07 03       	mulsu	r16, r23
      aa:	0b 03       	fmul	r16, r19
      ac:	aa 04       	cpc	r10, r10
      ae:	ae 04       	cpc	r10, r14
      b0:	b2 04       	cpc	r11, r2
      b2:	b6 04       	cpc	r11, r6
      b4:	ba 04       	cpc	r11, r10
      b6:	c1 04       	cpc	r12, r1
      b8:	c8 04       	cpc	r12, r8
      ba:	cf 04       	cpc	r12, r15
      bc:	d3 04       	cpc	r13, r3
      be:	da 04       	cpc	r13, r10
      c0:	e1 04       	cpc	r14, r1
      c2:	e8 04       	cpc	r14, r8
      c4:	ec 04       	cpc	r14, r12
      c6:	f3 04       	cpc	r15, r3
      c8:	fa 04       	cpc	r15, r10
      ca:	16 05       	cpc	r17, r6
      cc:	1a 05       	cpc	r17, r10
      ce:	1e 05       	cpc	r17, r14
      d0:	22 05       	cpc	r18, r2
      d2:	28 05       	cpc	r18, r8
      d4:	2c 05       	cpc	r18, r12
      d6:	30 05       	cpc	r19, r0
      d8:	34 05       	cpc	r19, r4
      da:	3d 05       	cpc	r19, r13
      dc:	41 05       	cpc	r20, r1
      de:	45 05       	cpc	r20, r5
      e0:	4e 05       	cpc	r20, r14
      e2:	a6 05       	cpc	r26, r6
      e4:	ac 05       	cpc	r26, r12
      e6:	b2 05       	cpc	r27, r2
      e8:	b8 05       	cpc	r27, r8
      ea:	be 05       	cpc	r27, r14
      ec:	c9 05       	cpc	r28, r9
      ee:	d4 05       	cpc	r29, r4
      f0:	df 05       	cpc	r29, r15
      f2:	e5 05       	cpc	r30, r5
      f4:	f0 05       	cpc	r31, r0
      f6:	fb 05       	cpc	r31, r11
      f8:	06 06       	cpc	r0, r22
      fa:	0c 06       	cpc	r0, r28
      fc:	17 06       	cpc	r1, r23
      fe:	22 06       	cpc	r2, r18
     100:	41 06       	cpc	r4, r17
     102:	45 06       	cpc	r4, r21
     104:	4b 06       	cpc	r4, r27
     106:	51 06       	cpc	r5, r17
     108:	57 06       	cpc	r5, r23
     10a:	5d 06       	cpc	r5, r29
     10c:	63 06       	cpc	r6, r19
     10e:	69 06       	cpc	r6, r25
     110:	6f 06       	cpc	r6, r31
     112:	75 06       	cpc	r7, r21
     114:	7b 06       	cpc	r7, r27
     116:	81 06       	cpc	r8, r17

00000118 <__ctors_end>:
     118:	11 24       	eor	r1, r1
     11a:	1f be       	out	0x3f, r1	; 63
     11c:	cf ef       	ldi	r28, 0xFF	; 255
     11e:	d0 e1       	ldi	r29, 0x10	; 16
     120:	de bf       	out	0x3e, r29	; 62
     122:	cd bf       	out	0x3d, r28	; 61

00000124 <__do_copy_data>:
     124:	11 e0       	ldi	r17, 0x01	; 1
     126:	a0 e0       	ldi	r26, 0x00	; 0
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	ec e4       	ldi	r30, 0x4C	; 76
     12c:	f2 e3       	ldi	r31, 0x32	; 50
     12e:	00 e0       	ldi	r16, 0x00	; 0
     130:	0b bf       	out	0x3b, r16	; 59
     132:	02 c0       	rjmp	.+4      	; 0x138 <__do_copy_data+0x14>
     134:	07 90       	elpm	r0, Z+
     136:	0d 92       	st	X+, r0
     138:	ae 33       	cpi	r26, 0x3E	; 62
     13a:	b1 07       	cpc	r27, r17
     13c:	d9 f7       	brne	.-10     	; 0x134 <__do_copy_data+0x10>

0000013e <__do_clear_bss>:
     13e:	22 e0       	ldi	r18, 0x02	; 2
     140:	ae e3       	ldi	r26, 0x3E	; 62
     142:	b1 e0       	ldi	r27, 0x01	; 1
     144:	01 c0       	rjmp	.+2      	; 0x148 <.do_clear_bss_start>

00000146 <.do_clear_bss_loop>:
     146:	1d 92       	st	X+, r1

00000148 <.do_clear_bss_start>:
     148:	aa 3a       	cpi	r26, 0xAA	; 170
     14a:	b2 07       	cpc	r27, r18
     14c:	e1 f7       	brne	.-8      	; 0x146 <.do_clear_bss_loop>
     14e:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <main>
     152:	0c 94 24 19 	jmp	0x3248	; 0x3248 <_exit>

00000156 <__bad_interrupt>:
     156:	54 cf       	rjmp	.-344    	; 0x0 <__vectors>

00000158 <ANALOG_read>:
* Returns selected Channel ADC_VALUE
*/
{
	uint8_t ADSC_FLAG;
	ADSC_FLAG=(1<<ADSC);
	if( !(ADC_CONTROL & ADSC_FLAG) ){
     158:	36 9b       	sbis	0x06, 6	; 6
		//ADC_SELECT
		/***/
		ADC_CONTROL|=(1<<ADSC);
     15a:	36 9a       	sbi	0x06, 6	; 6
	}	
	return ADC_VALUE[selection];
     15c:	fc 01       	movw	r30, r24
     15e:	ee 0f       	add	r30, r30
     160:	ff 1f       	adc	r31, r31
     162:	e9 5a       	subi	r30, 0xA9	; 169
     164:	fe 4f       	sbci	r31, 0xFE	; 254
     166:	80 81       	ld	r24, Z
     168:	91 81       	ldd	r25, Z+1	; 0x01
}
     16a:	08 95       	ret

0000016c <ANALOGenable>:
ANALOG ANALOGenable( uint8_t Vreff, uint8_t Divfactor, int n_channel, ... )
/*
* Interrupt running mode setup
* setup, and list of channels to be probed
*/
{
     16c:	0f 93       	push	r16
     16e:	1f 93       	push	r17
     170:	cf 93       	push	r28
     172:	df 93       	push	r29
     174:	cd b7       	in	r28, 0x3d	; 61
     176:	de b7       	in	r29, 0x3e	; 62
     178:	9f 81       	ldd	r25, Y+7	; 0x07
     17a:	68 85       	ldd	r22, Y+8	; 0x08
     17c:	49 85       	ldd	r20, Y+9	; 0x09
     17e:	5a 85       	ldd	r21, Y+10	; 0x0a
	/***LOCAL VARIABLES***/
	uint8_t tSREG;
	va_list list;
	int i;
	//inic variables
	tSREG=SREG;
     180:	1f b7       	in	r17, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
     182:	8f b7       	in	r24, 0x3f	; 63
     184:	8f 77       	andi	r24, 0x7F	; 127
     186:	8f bf       	out	0x3f, r24	; 63
	/***GLOBAL VARIABLES INICIALIZE***/
	ADC_N_CHANNEL=n_channel;
     188:	50 93 46 01 	sts	0x0146, r21	; 0x800146 <ADC_N_CHANNEL+0x1>
     18c:	40 93 45 01 	sts	0x0145, r20	; 0x800145 <ADC_N_CHANNEL>
	ADC_SELECTOR=0;
     190:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <ADC_SELECTOR+0x1>
     194:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <ADC_SELECTOR>
	adc_n_sample=0;
     198:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__data_end>
	//import parametros
	//inic parameters
	//Direccionar apontadores para PROTOTIPOS
	analog.read=ANALOG_read;
		/******/
		ADC_SELECT&=~(3<<REFS0);
     19c:	87 b1       	in	r24, 0x07	; 7
     19e:	8f 73       	andi	r24, 0x3F	; 63
     1a0:	87 b9       	out	0x07, r24	; 7
		switch( Vreff ){
     1a2:	91 30       	cpi	r25, 0x01	; 1
     1a4:	19 f0       	breq	.+6      	; 0x1ac <ANALOGenable+0x40>
     1a6:	93 30       	cpi	r25, 0x03	; 3
     1a8:	21 f0       	breq	.+8      	; 0x1b2 <ANALOGenable+0x46>
     1aa:	08 c0       	rjmp	.+16     	; 0x1bc <ANALOGenable+0x50>
			case 0:
				analog.VREFF=0;
				break;
			case 1:
				ADC_SELECT|=(1<<REFS0);
     1ac:	3e 9a       	sbi	0x07, 6	; 7
				analog.VREFF=1;
     1ae:	01 e0       	ldi	r16, 0x01	; 1
				break;
     1b0:	06 c0       	rjmp	.+12     	; 0x1be <ANALOGenable+0x52>
			case 3:
				ADC_SELECT|=(3<<REFS0);
     1b2:	87 b1       	in	r24, 0x07	; 7
     1b4:	80 6c       	ori	r24, 0xC0	; 192
     1b6:	87 b9       	out	0x07, r24	; 7
				analog.VREFF=3;
     1b8:	03 e0       	ldi	r16, 0x03	; 3
				break;
     1ba:	01 c0       	rjmp	.+2      	; 0x1be <ANALOGenable+0x52>
	analog.read=ANALOG_read;
		/******/
		ADC_SELECT&=~(3<<REFS0);
		switch( Vreff ){
			case 0:
				analog.VREFF=0;
     1bc:	00 e0       	ldi	r16, 0x00	; 0
			default:
				analog.VREFF=0;
				break;
		}
		//
		ADC_SELECT&=~(1<<ADLAR);
     1be:	3d 98       	cbi	0x07, 5	; 7
		/******/
		va_start(list, n_channel);
		for(i=0;i<n_channel;i++){
     1c0:	14 16       	cp	r1, r20
     1c2:	15 06       	cpc	r1, r21
     1c4:	8c f4       	brge	.+34     	; 0x1e8 <ANALOGenable+0x7c>
     1c6:	de 01       	movw	r26, r28
     1c8:	1b 96       	adiw	r26, 0x0b	; 11
     1ca:	80 e0       	ldi	r24, 0x00	; 0
     1cc:	90 e0       	ldi	r25, 0x00	; 0
			ADC_CHANNEL_GAIN[i] = va_arg(list, int);
     1ce:	2d 91       	ld	r18, X+
     1d0:	3d 91       	ld	r19, X+
     1d2:	fc 01       	movw	r30, r24
     1d4:	ee 0f       	add	r30, r30
     1d6:	ff 1f       	adc	r31, r31
     1d8:	e9 5b       	subi	r30, 0xB9	; 185
     1da:	fe 4f       	sbci	r31, 0xFE	; 254
     1dc:	31 83       	std	Z+1, r19	; 0x01
     1de:	20 83       	st	Z, r18
		}
		//
		ADC_SELECT&=~(1<<ADLAR);
		/******/
		va_start(list, n_channel);
		for(i=0;i<n_channel;i++){
     1e0:	01 96       	adiw	r24, 0x01	; 1
     1e2:	48 17       	cp	r20, r24
     1e4:	59 07       	cpc	r21, r25
     1e6:	99 f7       	brne	.-26     	; 0x1ce <ANALOGenable+0x62>
			ADC_CHANNEL_GAIN[i] = va_arg(list, int);
		}
		va_end(list);
		ADC_SELECT&=~MUX_MASK;
     1e8:	87 b1       	in	r24, 0x07	; 7
     1ea:	80 7e       	andi	r24, 0xE0	; 224
     1ec:	87 b9       	out	0x07, r24	; 7
		ADC_SELECT|=(MUX_MASK & ADC_CHANNEL_GAIN[ADC_SELECTOR]);
     1ee:	e0 91 43 01 	lds	r30, 0x0143	; 0x800143 <ADC_SELECTOR>
     1f2:	f0 91 44 01 	lds	r31, 0x0144	; 0x800144 <ADC_SELECTOR+0x1>
     1f6:	ee 0f       	add	r30, r30
     1f8:	ff 1f       	adc	r31, r31
     1fa:	e9 5b       	subi	r30, 0xB9	; 185
     1fc:	fe 4f       	sbci	r31, 0xFE	; 254
     1fe:	80 81       	ld	r24, Z
     200:	91 81       	ldd	r25, Z+1	; 0x01
     202:	27 b1       	in	r18, 0x07	; 7
     204:	8f 71       	andi	r24, 0x1F	; 31
     206:	99 27       	eor	r25, r25
     208:	82 2b       	or	r24, r18
     20a:	87 b9       	out	0x07, r24	; 7
		/******/
		ADC_CONTROL|=(1<<ADEN);
     20c:	37 9a       	sbi	0x06, 7	; 6
		ADC_CONTROL|=(1<<ADSC);
     20e:	36 9a       	sbi	0x06, 6	; 6
		ADC_CONTROL&=~(1<<ADFR);
     210:	35 98       	cbi	0x06, 5	; 6
		ADC_CONTROL|=(1<<ADIE);
     212:	33 9a       	sbi	0x06, 3	; 6
		/******/
		ADC_CONTROL&=~(7<<ADPS0);
     214:	86 b1       	in	r24, 0x06	; 6
     216:	88 7f       	andi	r24, 0xF8	; 248
     218:	86 b9       	out	0x06, r24	; 6
		switch( Divfactor ){
     21a:	60 31       	cpi	r22, 0x10	; 16
     21c:	d1 f0       	breq	.+52     	; 0x252 <ANALOGenable+0xe6>
     21e:	38 f4       	brcc	.+14     	; 0x22e <ANALOGenable+0xc2>
     220:	64 30       	cpi	r22, 0x04	; 4
     222:	79 f0       	breq	.+30     	; 0x242 <ANALOGenable+0xd6>
     224:	68 30       	cpi	r22, 0x08	; 8
     226:	81 f0       	breq	.+32     	; 0x248 <ANALOGenable+0xdc>
     228:	62 30       	cpi	r22, 0x02	; 2
     22a:	29 f5       	brne	.+74     	; 0x276 <ANALOGenable+0x10a>
     22c:	07 c0       	rjmp	.+14     	; 0x23c <ANALOGenable+0xd0>
     22e:	60 34       	cpi	r22, 0x40	; 64
     230:	c1 f0       	breq	.+48     	; 0x262 <ANALOGenable+0xf6>
     232:	60 38       	cpi	r22, 0x80	; 128
     234:	d9 f0       	breq	.+54     	; 0x26c <ANALOGenable+0x100>
     236:	60 32       	cpi	r22, 0x20	; 32
     238:	f1 f4       	brne	.+60     	; 0x276 <ANALOGenable+0x10a>
     23a:	0e c0       	rjmp	.+28     	; 0x258 <ANALOGenable+0xec>
			case 2://1
				ADC_CONTROL|=(1<<ADPS0);
     23c:	30 9a       	sbi	0x06, 0	; 6
				analog.DIVISION_FACTOR=2;
     23e:	22 e0       	ldi	r18, 0x02	; 2
				break;
     240:	1e c0       	rjmp	.+60     	; 0x27e <ANALOGenable+0x112>
			case 4://2
				ADC_CONTROL|=(1<<ADPS1);
     242:	31 9a       	sbi	0x06, 1	; 6
				analog.DIVISION_FACTOR=4;
     244:	24 e0       	ldi	r18, 0x04	; 4
				break;
     246:	1b c0       	rjmp	.+54     	; 0x27e <ANALOGenable+0x112>
			case 8://3
				ADC_CONTROL|=(3<<ADPS0);
     248:	86 b1       	in	r24, 0x06	; 6
     24a:	83 60       	ori	r24, 0x03	; 3
     24c:	86 b9       	out	0x06, r24	; 6
				analog.DIVISION_FACTOR=8;
     24e:	28 e0       	ldi	r18, 0x08	; 8
				break;
     250:	16 c0       	rjmp	.+44     	; 0x27e <ANALOGenable+0x112>
			case 16://4
				ADC_CONTROL|=(1<<ADPS2);
     252:	32 9a       	sbi	0x06, 2	; 6
				analog.DIVISION_FACTOR=16;
     254:	20 e1       	ldi	r18, 0x10	; 16
				break;
     256:	13 c0       	rjmp	.+38     	; 0x27e <ANALOGenable+0x112>
			case 32://5
				ADC_CONTROL|=(5<<ADPS0);
     258:	86 b1       	in	r24, 0x06	; 6
     25a:	85 60       	ori	r24, 0x05	; 5
     25c:	86 b9       	out	0x06, r24	; 6
				analog.DIVISION_FACTOR=32;
     25e:	20 e2       	ldi	r18, 0x20	; 32
				break;
     260:	0e c0       	rjmp	.+28     	; 0x27e <ANALOGenable+0x112>
			case 64://6
				ADC_CONTROL|=(6<<ADPS0);
     262:	86 b1       	in	r24, 0x06	; 6
     264:	86 60       	ori	r24, 0x06	; 6
     266:	86 b9       	out	0x06, r24	; 6
				analog.DIVISION_FACTOR=64;
     268:	20 e4       	ldi	r18, 0x40	; 64
				break;
     26a:	09 c0       	rjmp	.+18     	; 0x27e <ANALOGenable+0x112>
			case 128://7
				ADC_CONTROL|=(7<<ADPS0);
     26c:	86 b1       	in	r24, 0x06	; 6
     26e:	87 60       	ori	r24, 0x07	; 7
     270:	86 b9       	out	0x06, r24	; 6
				analog.DIVISION_FACTOR=128;
     272:	20 e8       	ldi	r18, 0x80	; 128
				break;
     274:	04 c0       	rjmp	.+8      	; 0x27e <ANALOGenable+0x112>
			default:
				ADC_CONTROL|=(7<<ADPS0);
     276:	86 b1       	in	r24, 0x06	; 6
     278:	87 60       	ori	r24, 0x07	; 7
     27a:	86 b9       	out	0x06, r24	; 6
				analog.DIVISION_FACTOR=128;
     27c:	20 e8       	ldi	r18, 0x80	; 128
				break;
		}		
		
	SREG=tSREG;
     27e:	1f bf       	out	0x3f, r17	; 63
	SREG|=(1<<GLOBAL_INTERRUPT_ENABLE);
     280:	8f b7       	in	r24, 0x3f	; 63
     282:	80 68       	ori	r24, 0x80	; 128
     284:	8f bf       	out	0x3f, r24	; 63
	/******/
	return analog;
     286:	60 2f       	mov	r22, r16
     288:	72 2f       	mov	r23, r18
     28a:	8c ea       	ldi	r24, 0xAC	; 172
     28c:	90 e0       	ldi	r25, 0x00	; 0
}
     28e:	df 91       	pop	r29
     290:	cf 91       	pop	r28
     292:	1f 91       	pop	r17
     294:	0f 91       	pop	r16
     296:	08 95       	ret

00000298 <__vector_21>:
ISR(ANALOG_INTERRUPT)
/*************************************************************************
Function: ANALOG interrupt
Purpose:  Read Analog Input
**************************************************************************/
{
     298:	1f 92       	push	r1
     29a:	0f 92       	push	r0
     29c:	0f b6       	in	r0, 0x3f	; 63
     29e:	0f 92       	push	r0
     2a0:	11 24       	eor	r1, r1
     2a2:	0b b6       	in	r0, 0x3b	; 59
     2a4:	0f 92       	push	r0
     2a6:	2f 93       	push	r18
     2a8:	3f 93       	push	r19
     2aa:	8f 93       	push	r24
     2ac:	9f 93       	push	r25
     2ae:	ef 93       	push	r30
     2b0:	ff 93       	push	r31
	/******/
	adc_tmp=ADCL;
     2b2:	84 b1       	in	r24, 0x04	; 4
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <adc_tmp+0x1>
     2ba:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <adc_tmp>
	adc_tmp|=(ADCH<<8);
     2be:	25 b1       	in	r18, 0x05	; 5
     2c0:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <adc_tmp>
     2c4:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <adc_tmp+0x1>
     2c8:	92 2b       	or	r25, r18
     2ca:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <adc_tmp+0x1>
     2ce:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <adc_tmp>
	if(adc_n_sample < (1<<ADC_NUMBER_SAMPLE)){
     2d2:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     2d6:	84 30       	cpi	r24, 0x04	; 4
     2d8:	a0 f4       	brcc	.+40     	; 0x302 <__vector_21+0x6a>
		adc_n_sample++;
     2da:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     2de:	8f 5f       	subi	r24, 0xFF	; 255
     2e0:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
		adc_sample+=adc_tmp;
     2e4:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <adc_tmp>
     2e8:	30 91 40 01 	lds	r19, 0x0140	; 0x800140 <adc_tmp+0x1>
     2ec:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <adc_sample>
     2f0:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <adc_sample+0x1>
     2f4:	82 0f       	add	r24, r18
     2f6:	93 1f       	adc	r25, r19
     2f8:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <adc_sample+0x1>
     2fc:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <adc_sample>
     300:	43 c0       	rjmp	.+134    	; 0x388 <__vector_21+0xf0>
	}else{
		ADC_VALUE[ADC_SELECTOR]=adc_sample>>ADC_NUMBER_SAMPLE;
     302:	e0 91 43 01 	lds	r30, 0x0143	; 0x800143 <ADC_SELECTOR>
     306:	f0 91 44 01 	lds	r31, 0x0144	; 0x800144 <ADC_SELECTOR+0x1>
     30a:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <adc_sample>
     30e:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <adc_sample+0x1>
     312:	95 95       	asr	r25
     314:	87 95       	ror	r24
     316:	95 95       	asr	r25
     318:	87 95       	ror	r24
     31a:	ee 0f       	add	r30, r30
     31c:	ff 1f       	adc	r31, r31
     31e:	e9 5a       	subi	r30, 0xA9	; 169
     320:	fe 4f       	sbci	r31, 0xFE	; 254
     322:	91 83       	std	Z+1, r25	; 0x01
     324:	80 83       	st	Z, r24
		adc_n_sample=adc_sample=0;
     326:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <adc_sample+0x1>
     32a:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <adc_sample>
     32e:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__data_end>
		/******/
		if(ADC_SELECTOR < ADC_N_CHANNEL)
     332:	20 91 43 01 	lds	r18, 0x0143	; 0x800143 <ADC_SELECTOR>
     336:	30 91 44 01 	lds	r19, 0x0144	; 0x800144 <ADC_SELECTOR+0x1>
     33a:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <ADC_N_CHANNEL>
     33e:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <ADC_N_CHANNEL+0x1>
     342:	28 17       	cp	r18, r24
     344:	39 07       	cpc	r19, r25
     346:	54 f4       	brge	.+20     	; 0x35c <__vector_21+0xc4>
			ADC_SELECTOR++;
     348:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <ADC_SELECTOR>
     34c:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <ADC_SELECTOR+0x1>
     350:	01 96       	adiw	r24, 0x01	; 1
     352:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <ADC_SELECTOR+0x1>
     356:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <ADC_SELECTOR>
     35a:	04 c0       	rjmp	.+8      	; 0x364 <__vector_21+0xcc>
		else
			ADC_SELECTOR=0;
     35c:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <ADC_SELECTOR+0x1>
     360:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <ADC_SELECTOR>
		ADC_SELECT &= ~MUX_MASK;
     364:	87 b1       	in	r24, 0x07	; 7
     366:	80 7e       	andi	r24, 0xE0	; 224
     368:	87 b9       	out	0x07, r24	; 7
		ADC_SELECT |= (ADC_CHANNEL_GAIN[ADC_SELECTOR] & MUX_MASK);
     36a:	e0 91 43 01 	lds	r30, 0x0143	; 0x800143 <ADC_SELECTOR>
     36e:	f0 91 44 01 	lds	r31, 0x0144	; 0x800144 <ADC_SELECTOR+0x1>
     372:	ee 0f       	add	r30, r30
     374:	ff 1f       	adc	r31, r31
     376:	e9 5b       	subi	r30, 0xB9	; 185
     378:	fe 4f       	sbci	r31, 0xFE	; 254
     37a:	80 81       	ld	r24, Z
     37c:	91 81       	ldd	r25, Z+1	; 0x01
     37e:	27 b1       	in	r18, 0x07	; 7
     380:	8f 71       	andi	r24, 0x1F	; 31
     382:	99 27       	eor	r25, r25
     384:	82 2b       	or	r24, r18
     386:	87 b9       	out	0x07, r24	; 7
	}		
}
     388:	ff 91       	pop	r31
     38a:	ef 91       	pop	r30
     38c:	9f 91       	pop	r25
     38e:	8f 91       	pop	r24
     390:	3f 91       	pop	r19
     392:	2f 91       	pop	r18
     394:	0f 90       	pop	r0
     396:	0b be       	out	0x3b, r0	; 59
     398:	0f 90       	pop	r0
     39a:	0f be       	out	0x3f, r0	; 63
     39c:	0f 90       	pop	r0
     39e:	1f 90       	pop	r1
     3a0:	18 95       	reti

000003a2 <INTERRUPT_reset_status>:
	return interrupt;
}
	uint8_t INTERRUPT_reset_status(void)
	{
		uint8_t reset,ret=0;
		reset=(MCU_Control_Status_Register & MCU_Control_Status_Register_Mask);
     3a2:	84 b7       	in	r24, 0x34	; 52
		switch(reset){
     3a4:	8f 71       	andi	r24, 0x1F	; 31
     3a6:	84 30       	cpi	r24, 0x04	; 4
     3a8:	a9 f0       	breq	.+42     	; 0x3d4 <INTERRUPT_reset_status+0x32>
     3aa:	28 f4       	brcc	.+10     	; 0x3b6 <INTERRUPT_reset_status+0x14>
     3ac:	81 30       	cpi	r24, 0x01	; 1
     3ae:	41 f0       	breq	.+16     	; 0x3c0 <INTERRUPT_reset_status+0x1e>
     3b0:	82 30       	cpi	r24, 0x02	; 2
     3b2:	59 f0       	breq	.+22     	; 0x3ca <INTERRUPT_reset_status+0x28>
     3b4:	1e c0       	rjmp	.+60     	; 0x3f2 <INTERRUPT_reset_status+0x50>
     3b6:	88 30       	cpi	r24, 0x08	; 8
     3b8:	91 f0       	breq	.+36     	; 0x3de <INTERRUPT_reset_status+0x3c>
     3ba:	80 31       	cpi	r24, 0x10	; 16
     3bc:	a9 f0       	breq	.+42     	; 0x3e8 <INTERRUPT_reset_status+0x46>
     3be:	19 c0       	rjmp	.+50     	; 0x3f2 <INTERRUPT_reset_status+0x50>
			case 1: // Power-On Reset Flag
				ret=0;
				MCU_Control_Status_Register&=~(1<<PORF);
     3c0:	84 b7       	in	r24, 0x34	; 52
     3c2:	8e 7f       	andi	r24, 0xFE	; 254
     3c4:	84 bf       	out	0x34, r24	; 52
	{
		uint8_t reset,ret=0;
		reset=(MCU_Control_Status_Register & MCU_Control_Status_Register_Mask);
		switch(reset){
			case 1: // Power-On Reset Flag
				ret=0;
     3c6:	80 e0       	ldi	r24, 0x00	; 0
				MCU_Control_Status_Register&=~(1<<PORF);
				break;
     3c8:	08 95       	ret
			case 2: // External Reset Flag
				MCU_Control_Status_Register&=~(1<<EXTRF);
     3ca:	84 b7       	in	r24, 0x34	; 52
     3cc:	8d 7f       	andi	r24, 0xFD	; 253
     3ce:	84 bf       	out	0x34, r24	; 52
				ret=1;
     3d0:	81 e0       	ldi	r24, 0x01	; 1
				break;
     3d2:	08 95       	ret
			case 4: // Brown-out Reset Flag
				MCU_Control_Status_Register&=~(1<<BORF);
     3d4:	84 b7       	in	r24, 0x34	; 52
     3d6:	8b 7f       	andi	r24, 0xFB	; 251
     3d8:	84 bf       	out	0x34, r24	; 52
				ret=2;
     3da:	82 e0       	ldi	r24, 0x02	; 2
				break;
     3dc:	08 95       	ret
			case 8: // Watchdog Reset Flag
				MCU_Control_Status_Register&=~(1<<WDRF);
     3de:	84 b7       	in	r24, 0x34	; 52
     3e0:	87 7f       	andi	r24, 0xF7	; 247
     3e2:	84 bf       	out	0x34, r24	; 52
				ret=3;
     3e4:	83 e0       	ldi	r24, 0x03	; 3
				break;
     3e6:	08 95       	ret
			case 16: // JTAG Reset Flag
				MCU_Control_Status_Register&=~(1<<JTRF);
     3e8:	84 b7       	in	r24, 0x34	; 52
     3ea:	8f 7e       	andi	r24, 0xEF	; 239
     3ec:	84 bf       	out	0x34, r24	; 52
				ret=4;
     3ee:	84 e0       	ldi	r24, 0x04	; 4
				break;
     3f0:	08 95       	ret
			default: // clear all status
				MCU_Control_Status_Register&=~(MCU_Control_Status_Register_Mask);
     3f2:	84 b7       	in	r24, 0x34	; 52
     3f4:	80 7e       	andi	r24, 0xE0	; 224
     3f6:	84 bf       	out	0x34, r24	; 52
	interrupt.reset_status=INTERRUPT_reset_status;
	return interrupt;
}
	uint8_t INTERRUPT_reset_status(void)
	{
		uint8_t reset,ret=0;
     3f8:	80 e0       	ldi	r24, 0x00	; 0
			default: // clear all status
				MCU_Control_Status_Register&=~(MCU_Control_Status_Register_Mask);
				break;
		}
		return ret;
	}
     3fa:	08 95       	ret

000003fc <INTERRUPT_set>:
	void INTERRUPT_set(uint8_t channel, uint8_t sense)
	{
		switch( channel ){
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	88 30       	cpi	r24, 0x08	; 8
     400:	91 05       	cpc	r25, r1
     402:	08 f0       	brcs	.+2      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     404:	e1 c0       	rjmp	.+450    	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
     406:	fc 01       	movw	r30, r24
     408:	ea 5b       	subi	r30, 0xBA	; 186
     40a:	ff 4f       	sbci	r31, 0xFF	; 255
     40c:	0c 94 02 19 	jmp	0x3204	; 0x3204 <__tablejump2__>
			case 0: 
				External_Interrupt_Mask_Register&=~(1<<INT0);
     410:	89 b7       	in	r24, 0x39	; 57
     412:	8e 7f       	andi	r24, 0xFE	; 254
     414:	89 bf       	out	0x39, r24	; 57
				External_Interrupt_Control_Register_A&=~((1<<ISC01) | (1<<ISC00));
     416:	ea e6       	ldi	r30, 0x6A	; 106
     418:	f0 e0       	ldi	r31, 0x00	; 0
     41a:	80 81       	ld	r24, Z
     41c:	8c 7f       	andi	r24, 0xFC	; 252
     41e:	80 83       	st	Z, r24
				switch(sense){
     420:	62 30       	cpi	r22, 0x02	; 2
     422:	19 f0       	breq	.+6      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     424:	63 30       	cpi	r22, 0x03	; 3
     426:	39 f0       	breq	.+14     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     428:	0b c0       	rjmp	.+22     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
					case 0: // The low level of INTn generates an interrupt request.
					case 1: // The low level of INTn generates an interrupt request.
						break;
					case 2: // The falling edge of INTn generates asynchronously an interrupt request.
						External_Interrupt_Control_Register_A|=(1<<ISC01);
     42a:	ea e6       	ldi	r30, 0x6A	; 106
     42c:	f0 e0       	ldi	r31, 0x00	; 0
     42e:	80 81       	ld	r24, Z
     430:	82 60       	ori	r24, 0x02	; 2
     432:	80 83       	st	Z, r24
						break;
     434:	05 c0       	rjmp	.+10     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
					case 3: // The rising edge of INTn generates asynchronously an interrupt request.
						External_Interrupt_Control_Register_A|=((1<<ISC01) | (1<<ISC00));
     436:	ea e6       	ldi	r30, 0x6A	; 106
     438:	f0 e0       	ldi	r31, 0x00	; 0
     43a:	80 81       	ld	r24, Z
     43c:	83 60       	ori	r24, 0x03	; 3
     43e:	80 83       	st	Z, r24
						break;
					default: // The low level of INTn generates an interrupt request.
						break;
				}
				External_Interrupt_Mask_Register|=(1<<INT0);
     440:	89 b7       	in	r24, 0x39	; 57
     442:	81 60       	ori	r24, 0x01	; 1
     444:	89 bf       	out	0x39, r24	; 57
				break;
     446:	08 95       	ret
			case 1:
				External_Interrupt_Mask_Register&=~(1<<INT1);
     448:	89 b7       	in	r24, 0x39	; 57
     44a:	8d 7f       	andi	r24, 0xFD	; 253
     44c:	89 bf       	out	0x39, r24	; 57
				External_Interrupt_Control_Register_A&=~((1<<ISC11) | (1<<ISC10));
     44e:	ea e6       	ldi	r30, 0x6A	; 106
     450:	f0 e0       	ldi	r31, 0x00	; 0
     452:	80 81       	ld	r24, Z
     454:	83 7f       	andi	r24, 0xF3	; 243
     456:	80 83       	st	Z, r24
				switch(sense){
     458:	62 30       	cpi	r22, 0x02	; 2
     45a:	19 f0       	breq	.+6      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     45c:	63 30       	cpi	r22, 0x03	; 3
     45e:	39 f0       	breq	.+14     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     460:	0b c0       	rjmp	.+22     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
					case 0: // The low level of INTn generates an interrupt request.
					case 1: // The low level of INTn generates an interrupt request.
						break;
					case 2: // The falling edge of INTn generates asynchronously an interrupt request.
						External_Interrupt_Control_Register_A|=(1<<ISC11);
     462:	ea e6       	ldi	r30, 0x6A	; 106
     464:	f0 e0       	ldi	r31, 0x00	; 0
     466:	80 81       	ld	r24, Z
     468:	88 60       	ori	r24, 0x08	; 8
     46a:	80 83       	st	Z, r24
						break;
     46c:	05 c0       	rjmp	.+10     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
					case 3: // The rising edge of INTn generates asynchronously an interrupt request.
						External_Interrupt_Control_Register_A|=((1<<ISC11) | (1<<ISC10));
     46e:	ea e6       	ldi	r30, 0x6A	; 106
     470:	f0 e0       	ldi	r31, 0x00	; 0
     472:	80 81       	ld	r24, Z
     474:	8c 60       	ori	r24, 0x0C	; 12
     476:	80 83       	st	Z, r24
						break;
					default: // The low level of INTn generates an interrupt request.
						break;
				}
				External_Interrupt_Mask_Register|=(1<<INT1);
     478:	89 b7       	in	r24, 0x39	; 57
     47a:	82 60       	ori	r24, 0x02	; 2
     47c:	89 bf       	out	0x39, r24	; 57
				break;
     47e:	08 95       	ret
			case 2:
				External_Interrupt_Mask_Register&=~(1<<INT2);
     480:	89 b7       	in	r24, 0x39	; 57
     482:	8b 7f       	andi	r24, 0xFB	; 251
     484:	89 bf       	out	0x39, r24	; 57
				External_Interrupt_Control_Register_A&=~((1<<ISC21) | (1<<ISC20));
     486:	ea e6       	ldi	r30, 0x6A	; 106
     488:	f0 e0       	ldi	r31, 0x00	; 0
     48a:	80 81       	ld	r24, Z
     48c:	8f 7c       	andi	r24, 0xCF	; 207
     48e:	80 83       	st	Z, r24
				switch(sense){
     490:	62 30       	cpi	r22, 0x02	; 2
     492:	19 f0       	breq	.+6      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
     494:	63 30       	cpi	r22, 0x03	; 3
     496:	39 f0       	breq	.+14     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     498:	0b c0       	rjmp	.+22     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
					case 0: // The low level of INTn generates an interrupt request.
					case 1: // The low level of INTn generates an interrupt request.
						break;
					case 2: // The falling edge of INTn generates asynchronously an interrupt request.
						External_Interrupt_Control_Register_A|=(1<<ISC21);
     49a:	ea e6       	ldi	r30, 0x6A	; 106
     49c:	f0 e0       	ldi	r31, 0x00	; 0
     49e:	80 81       	ld	r24, Z
     4a0:	80 62       	ori	r24, 0x20	; 32
     4a2:	80 83       	st	Z, r24
						break;
     4a4:	05 c0       	rjmp	.+10     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
					case 3: // The rising edge of INTn generates asynchronously an interrupt request.
						External_Interrupt_Control_Register_A|=((1<<ISC21) | (1<<ISC20));
     4a6:	ea e6       	ldi	r30, 0x6A	; 106
     4a8:	f0 e0       	ldi	r31, 0x00	; 0
     4aa:	80 81       	ld	r24, Z
     4ac:	80 63       	ori	r24, 0x30	; 48
     4ae:	80 83       	st	Z, r24
						break;
					default: // The low level of INTn generates an interrupt request.
						break;
				}
				External_Interrupt_Mask_Register|=(1<<INT2);
     4b0:	89 b7       	in	r24, 0x39	; 57
     4b2:	84 60       	ori	r24, 0x04	; 4
     4b4:	89 bf       	out	0x39, r24	; 57
				break;
     4b6:	08 95       	ret
			case 3:
				External_Interrupt_Mask_Register&=~(1<<INT3);
     4b8:	89 b7       	in	r24, 0x39	; 57
     4ba:	87 7f       	andi	r24, 0xF7	; 247
     4bc:	89 bf       	out	0x39, r24	; 57
				External_Interrupt_Control_Register_A&=~((1<<ISC31) | (1<<ISC30));
     4be:	ea e6       	ldi	r30, 0x6A	; 106
     4c0:	f0 e0       	ldi	r31, 0x00	; 0
     4c2:	80 81       	ld	r24, Z
     4c4:	8f 73       	andi	r24, 0x3F	; 63
     4c6:	80 83       	st	Z, r24
				switch(sense){
     4c8:	62 30       	cpi	r22, 0x02	; 2
     4ca:	19 f0       	breq	.+6      	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
     4cc:	63 30       	cpi	r22, 0x03	; 3
     4ce:	39 f0       	breq	.+14     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
     4d0:	0b c0       	rjmp	.+22     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
					case 0: // The low level of INTn generates an interrupt request.
					case 1: // The low level of INTn generates an interrupt request.
						break;
					case 2: // The falling edge of INTn generates asynchronously an interrupt request.
						External_Interrupt_Control_Register_A|=(1<<ISC31);
     4d2:	ea e6       	ldi	r30, 0x6A	; 106
     4d4:	f0 e0       	ldi	r31, 0x00	; 0
     4d6:	80 81       	ld	r24, Z
     4d8:	80 68       	ori	r24, 0x80	; 128
     4da:	80 83       	st	Z, r24
						break;
     4dc:	05 c0       	rjmp	.+10     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
					case 3: // The rising edge of INTn generates asynchronously an interrupt request.
						External_Interrupt_Control_Register_A|=((1<<ISC31) | (1<<ISC30));
     4de:	ea e6       	ldi	r30, 0x6A	; 106
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	80 81       	ld	r24, Z
     4e4:	80 6c       	ori	r24, 0xC0	; 192
     4e6:	80 83       	st	Z, r24
						break;
					default: // The low level of INTn generates an interrupt request.
						break;
				}
				External_Interrupt_Mask_Register|=(1<<INT3);
     4e8:	89 b7       	in	r24, 0x39	; 57
     4ea:	88 60       	ori	r24, 0x08	; 8
     4ec:	89 bf       	out	0x39, r24	; 57
				break;
     4ee:	08 95       	ret
			case 4:
				External_Interrupt_Mask_Register&=~(1<<INT4);
     4f0:	89 b7       	in	r24, 0x39	; 57
     4f2:	8f 7e       	andi	r24, 0xEF	; 239
     4f4:	89 bf       	out	0x39, r24	; 57
				External_Interrupt_Control_Register_B&=~((1<<ISC41) | (1<<ISC40));
     4f6:	8a b7       	in	r24, 0x3a	; 58
     4f8:	8c 7f       	andi	r24, 0xFC	; 252
     4fa:	8a bf       	out	0x3a, r24	; 58
				switch(sense){
     4fc:	62 30       	cpi	r22, 0x02	; 2
     4fe:	41 f0       	breq	.+16     	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
     500:	63 30       	cpi	r22, 0x03	; 3
     502:	51 f0       	breq	.+20     	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
     504:	61 30       	cpi	r22, 0x01	; 1
     506:	59 f4       	brne	.+22     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
					case 0: // The low level of INTn generates an interrupt request.
						break;
					case 1: // Any logical change on INTn generates an interrupt request
						External_Interrupt_Control_Register_B|=(1<<ISC40);
     508:	8a b7       	in	r24, 0x3a	; 58
     50a:	81 60       	ori	r24, 0x01	; 1
     50c:	8a bf       	out	0x3a, r24	; 58
						break;
     50e:	07 c0       	rjmp	.+14     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
					case 2: // The falling edge between two samples of INTn generates an interrupt request.
						External_Interrupt_Control_Register_B|=(1<<ISC41);
     510:	8a b7       	in	r24, 0x3a	; 58
     512:	82 60       	ori	r24, 0x02	; 2
     514:	8a bf       	out	0x3a, r24	; 58
						break;
     516:	03 c0       	rjmp	.+6      	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
					case 3: // The rising edge between two samples of INTn generates an interrupt request.
						External_Interrupt_Control_Register_B|=((1<<ISC41) | (1<<ISC40));
     518:	8a b7       	in	r24, 0x3a	; 58
     51a:	83 60       	ori	r24, 0x03	; 3
     51c:	8a bf       	out	0x3a, r24	; 58
						break;
					default: // The low level of INTn generates an interrupt request.
						break;
				}
				External_Interrupt_Mask_Register|=(1<<INT4);
     51e:	89 b7       	in	r24, 0x39	; 57
     520:	80 61       	ori	r24, 0x10	; 16
     522:	89 bf       	out	0x39, r24	; 57
				break;
     524:	08 95       	ret
			case 5:
				External_Interrupt_Mask_Register&=~(1<<INT5);
     526:	89 b7       	in	r24, 0x39	; 57
     528:	8f 7d       	andi	r24, 0xDF	; 223
     52a:	89 bf       	out	0x39, r24	; 57
				External_Interrupt_Control_Register_B&=~((1<<ISC51) | (1<<ISC50));
     52c:	8a b7       	in	r24, 0x3a	; 58
     52e:	83 7f       	andi	r24, 0xF3	; 243
     530:	8a bf       	out	0x3a, r24	; 58
				switch(sense){
     532:	62 30       	cpi	r22, 0x02	; 2
     534:	41 f0       	breq	.+16     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     536:	63 30       	cpi	r22, 0x03	; 3
     538:	51 f0       	breq	.+20     	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
     53a:	61 30       	cpi	r22, 0x01	; 1
     53c:	59 f4       	brne	.+22     	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
					case 0: // The low level of INTn generates an interrupt request.
						break;
					case 1: // Any logical change on INTn generates an interrupt request
						External_Interrupt_Control_Register_B|=(1<<ISC50);
     53e:	8a b7       	in	r24, 0x3a	; 58
     540:	84 60       	ori	r24, 0x04	; 4
     542:	8a bf       	out	0x3a, r24	; 58
						break;
     544:	07 c0       	rjmp	.+14     	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
					case 2: // The falling edge between two samples of INTn generates an interrupt request.
						External_Interrupt_Control_Register_B|=(1<<ISC51);
     546:	8a b7       	in	r24, 0x3a	; 58
     548:	88 60       	ori	r24, 0x08	; 8
     54a:	8a bf       	out	0x3a, r24	; 58
						break;
     54c:	03 c0       	rjmp	.+6      	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
					case 3: // The rising edge between two samples of INTn generates an interrupt request.
						External_Interrupt_Control_Register_B|=((1<<ISC51) | (1<<ISC50));
     54e:	8a b7       	in	r24, 0x3a	; 58
     550:	8c 60       	ori	r24, 0x0C	; 12
     552:	8a bf       	out	0x3a, r24	; 58
						break;
					default: // The low level of INTn generates an interrupt request.
						break;
				}
				External_Interrupt_Mask_Register|=(1<<INT5);
     554:	89 b7       	in	r24, 0x39	; 57
     556:	80 62       	ori	r24, 0x20	; 32
     558:	89 bf       	out	0x39, r24	; 57
				break;
     55a:	08 95       	ret
			case 6:
				External_Interrupt_Mask_Register&=~(1<<INT6);
     55c:	89 b7       	in	r24, 0x39	; 57
     55e:	8f 7b       	andi	r24, 0xBF	; 191
     560:	89 bf       	out	0x39, r24	; 57
				External_Interrupt_Control_Register_B&=~((1<<ISC61) | (1<<ISC60));
     562:	8a b7       	in	r24, 0x3a	; 58
     564:	8f 7c       	andi	r24, 0xCF	; 207
     566:	8a bf       	out	0x3a, r24	; 58
				switch(sense){
     568:	62 30       	cpi	r22, 0x02	; 2
     56a:	41 f0       	breq	.+16     	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
     56c:	63 30       	cpi	r22, 0x03	; 3
     56e:	51 f0       	breq	.+20     	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
     570:	61 30       	cpi	r22, 0x01	; 1
     572:	59 f4       	brne	.+22     	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
					case 0: // The low level of INTn generates an interrupt request.
						break;
					case 1: // Any logical change on INTn generates an interrupt request
						External_Interrupt_Control_Register_B|=(1<<ISC60);
     574:	8a b7       	in	r24, 0x3a	; 58
     576:	80 61       	ori	r24, 0x10	; 16
     578:	8a bf       	out	0x3a, r24	; 58
						break;
     57a:	07 c0       	rjmp	.+14     	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
					case 2: // The falling edge between two samples of INTn generates an interrupt request.
						External_Interrupt_Control_Register_B|=(1<<ISC61);
     57c:	8a b7       	in	r24, 0x3a	; 58
     57e:	80 62       	ori	r24, 0x20	; 32
     580:	8a bf       	out	0x3a, r24	; 58
						break;
     582:	03 c0       	rjmp	.+6      	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
					case 3: // The rising edge between two samples of INTn generates an interrupt request.
						External_Interrupt_Control_Register_B|=((1<<ISC61) | (1<<ISC60));
     584:	8a b7       	in	r24, 0x3a	; 58
     586:	80 63       	ori	r24, 0x30	; 48
     588:	8a bf       	out	0x3a, r24	; 58
						break;
					default: // The low level of INTn generates an interrupt request.
						break;
				}
				External_Interrupt_Mask_Register|=(1<<INT6);
     58a:	89 b7       	in	r24, 0x39	; 57
     58c:	80 64       	ori	r24, 0x40	; 64
     58e:	89 bf       	out	0x39, r24	; 57
				break;
     590:	08 95       	ret
			case 7:
				External_Interrupt_Mask_Register&=~(1<<INT7);
     592:	89 b7       	in	r24, 0x39	; 57
     594:	8f 77       	andi	r24, 0x7F	; 127
     596:	89 bf       	out	0x39, r24	; 57
				External_Interrupt_Control_Register_B&=~((1<<ISC71) | (1<<ISC70));
     598:	8a b7       	in	r24, 0x3a	; 58
     59a:	8f 73       	andi	r24, 0x3F	; 63
     59c:	8a bf       	out	0x3a, r24	; 58
				switch(sense){
     59e:	62 30       	cpi	r22, 0x02	; 2
     5a0:	41 f0       	breq	.+16     	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
     5a2:	63 30       	cpi	r22, 0x03	; 3
     5a4:	51 f0       	breq	.+20     	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
     5a6:	61 30       	cpi	r22, 0x01	; 1
     5a8:	59 f4       	brne	.+22     	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
					case 0: // The low level of INTn generates an interrupt request.
						break;
					case 1: // Any logical change on INTn generates an interrupt request
						External_Interrupt_Control_Register_B|=(1<<ISC70);
     5aa:	8a b7       	in	r24, 0x3a	; 58
     5ac:	80 64       	ori	r24, 0x40	; 64
     5ae:	8a bf       	out	0x3a, r24	; 58
						break;
     5b0:	07 c0       	rjmp	.+14     	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
					case 2: // The falling edge between two samples of INTn generates an interrupt request.
						External_Interrupt_Control_Register_B|=(1<<ISC71);
     5b2:	8a b7       	in	r24, 0x3a	; 58
     5b4:	80 68       	ori	r24, 0x80	; 128
     5b6:	8a bf       	out	0x3a, r24	; 58
						break;
     5b8:	03 c0       	rjmp	.+6      	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
					case 3: // The rising edge between two samples of INTn generates an interrupt request.
						External_Interrupt_Control_Register_B|=((1<<ISC71) | (1<<ISC70));
     5ba:	8a b7       	in	r24, 0x3a	; 58
     5bc:	80 6c       	ori	r24, 0xC0	; 192
     5be:	8a bf       	out	0x3a, r24	; 58
						break;
					default: // The low level of INTn generates an interrupt request.
						break;
				}
				External_Interrupt_Mask_Register|=(1<<INT7);
     5c0:	89 b7       	in	r24, 0x39	; 57
     5c2:	80 68       	ori	r24, 0x80	; 128
     5c4:	89 bf       	out	0x39, r24	; 57
				break;
     5c6:	08 95       	ret
			default:
				External_Interrupt_Mask_Register=0X00;
     5c8:	19 be       	out	0x39, r1	; 57
     5ca:	08 95       	ret

000005cc <INTERRUPT_off>:
				break;
		}
	}
	void INTERRUPT_off(uint8_t channel)
	{
		switch( channel ){
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	88 30       	cpi	r24, 0x08	; 8
     5d0:	91 05       	cpc	r25, r1
     5d2:	28 f5       	brcc	.+74     	; 0x61e <INTERRUPT_off+0x52>
     5d4:	fc 01       	movw	r30, r24
     5d6:	e2 5b       	subi	r30, 0xB2	; 178
     5d8:	ff 4f       	sbci	r31, 0xFF	; 255
     5da:	0c 94 02 19 	jmp	0x3204	; 0x3204 <__tablejump2__>
			case 0: // desable
				External_Interrupt_Mask_Register&=~(1<<INT0);
     5de:	89 b7       	in	r24, 0x39	; 57
     5e0:	8e 7f       	andi	r24, 0xFE	; 254
     5e2:	89 bf       	out	0x39, r24	; 57
				break;
     5e4:	08 95       	ret
			case 1: // desable
				External_Interrupt_Mask_Register&=~(1<<INT1);
     5e6:	89 b7       	in	r24, 0x39	; 57
     5e8:	8d 7f       	andi	r24, 0xFD	; 253
     5ea:	89 bf       	out	0x39, r24	; 57
				break;
     5ec:	08 95       	ret
			case 2: // desable
				External_Interrupt_Mask_Register&=~(1<<INT2);
     5ee:	89 b7       	in	r24, 0x39	; 57
     5f0:	8b 7f       	andi	r24, 0xFB	; 251
     5f2:	89 bf       	out	0x39, r24	; 57
				break;
     5f4:	08 95       	ret
			case 3: // desable
				External_Interrupt_Mask_Register&=~(1<<INT3);
     5f6:	89 b7       	in	r24, 0x39	; 57
     5f8:	87 7f       	andi	r24, 0xF7	; 247
     5fa:	89 bf       	out	0x39, r24	; 57
				break;
     5fc:	08 95       	ret
			case 4: // desable
				External_Interrupt_Mask_Register&=~(1<<INT4);
     5fe:	89 b7       	in	r24, 0x39	; 57
     600:	8f 7e       	andi	r24, 0xEF	; 239
     602:	89 bf       	out	0x39, r24	; 57
				break;
     604:	08 95       	ret
			case 5: // desable
				External_Interrupt_Mask_Register&=~(1<<INT5);
     606:	89 b7       	in	r24, 0x39	; 57
     608:	8f 7d       	andi	r24, 0xDF	; 223
     60a:	89 bf       	out	0x39, r24	; 57
				break;
     60c:	08 95       	ret
			case 6: // desable
				External_Interrupt_Mask_Register&=~(1<<INT6);
     60e:	89 b7       	in	r24, 0x39	; 57
     610:	8f 7b       	andi	r24, 0xBF	; 191
     612:	89 bf       	out	0x39, r24	; 57
				break;
     614:	08 95       	ret
			case 7: // desable
				External_Interrupt_Mask_Register&=~(1<<INT7);
     616:	89 b7       	in	r24, 0x39	; 57
     618:	8f 77       	andi	r24, 0x7F	; 127
     61a:	89 bf       	out	0x39, r24	; 57
				break;
     61c:	08 95       	ret
			default: // all disable
				External_Interrupt_Mask_Register=0X00;
     61e:	19 be       	out	0x39, r1	; 57
     620:	08 95       	ret

00000622 <INTERRUPTenable>:
*/
INTERRUPT INTERRUPTenable(void)
/*
* setup blank
*/
{
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
     626:	00 d0       	rcall	.+0      	; 0x628 <INTERRUPTenable+0x6>
     628:	00 d0       	rcall	.+0      	; 0x62a <INTERRUPTenable+0x8>
     62a:	00 d0       	rcall	.+0      	; 0x62c <INTERRUPTenable+0xa>
     62c:	cd b7       	in	r28, 0x3d	; 61
     62e:	de b7       	in	r29, 0x3e	; 62
	INTERRUPT interrupt;
	External_Interrupt_Mask_Register=0X00;
     630:	19 be       	out	0x39, r1	; 57
	/******/
	interrupt.set=INTERRUPT_set;
	interrupt.off=INTERRUPT_off;
	interrupt.reset_status=INTERRUPT_reset_status;
	return interrupt;
     632:	2e ef       	ldi	r18, 0xFE	; 254
     634:	31 e0       	ldi	r19, 0x01	; 1
     636:	3a 83       	std	Y+2, r19	; 0x02
     638:	29 83       	std	Y+1, r18	; 0x01
     63a:	46 ee       	ldi	r20, 0xE6	; 230
     63c:	52 e0       	ldi	r21, 0x02	; 2
     63e:	5c 83       	std	Y+4, r21	; 0x04
     640:	4b 83       	std	Y+3, r20	; 0x03
     642:	61 ed       	ldi	r22, 0xD1	; 209
     644:	71 e0       	ldi	r23, 0x01	; 1
     646:	7e 83       	std	Y+6, r23	; 0x06
     648:	6d 83       	std	Y+5, r22	; 0x05
     64a:	3a 81       	ldd	r19, Y+2	; 0x02
     64c:	5c 81       	ldd	r21, Y+4	; 0x04
     64e:	7e 81       	ldd	r23, Y+6	; 0x06
}
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	26 96       	adiw	r28, 0x06	; 6
     656:	0f b6       	in	r0, 0x3f	; 63
     658:	f8 94       	cli
     65a:	de bf       	out	0x3e, r29	; 62
     65c:	0f be       	out	0x3f, r0	; 63
     65e:	cd bf       	out	0x3d, r28	; 61
     660:	df 91       	pop	r29
     662:	cf 91       	pop	r28
     664:	08 95       	ret

00000666 <TIMER_COUNTER1_start>:
		timer2.compare=TIMER_COUNTER2_compare;
		timer2.start=TIMER_COUNTER2_start;
		timer2.stop=TIMER_COUNTER2_stop;
	
	return timer2;
}
     666:	20 91 f1 01 	lds	r18, 0x01F1	; 0x8001f1 <timer1_state>
     66a:	21 11       	cpse	r18, r1
     66c:	42 c0       	rjmp	.+132    	; 0x6f2 <TIMER_COUNTER1_start+0x8c>
     66e:	2f ef       	ldi	r18, 0xFF	; 255
     670:	3f ef       	ldi	r19, 0xFF	; 255
     672:	3b bd       	out	0x2b, r19	; 43
     674:	2a bd       	out	0x2a, r18	; 42
     676:	2e b5       	in	r18, 0x2e	; 46
     678:	28 7f       	andi	r18, 0xF8	; 248
     67a:	2e bd       	out	0x2e, r18	; 46
     67c:	88 30       	cpi	r24, 0x08	; 8
     67e:	91 05       	cpc	r25, r1
     680:	d1 f0       	breq	.+52     	; 0x6b6 <TIMER_COUNTER1_start+0x50>
     682:	48 f4       	brcc	.+18     	; 0x696 <TIMER_COUNTER1_start+0x30>
     684:	83 30       	cpi	r24, 0x03	; 3
     686:	91 05       	cpc	r25, r1
     688:	31 f1       	breq	.+76     	; 0x6d6 <TIMER_COUNTER1_start+0x70>
     68a:	85 30       	cpi	r24, 0x05	; 5
     68c:	91 05       	cpc	r25, r1
     68e:	39 f1       	breq	.+78     	; 0x6de <TIMER_COUNTER1_start+0x78>
     690:	01 97       	sbiw	r24, 0x01	; 1
     692:	49 f5       	brne	.+82     	; 0x6e6 <TIMER_COUNTER1_start+0x80>
     694:	0c c0       	rjmp	.+24     	; 0x6ae <TIMER_COUNTER1_start+0x48>
     696:	81 15       	cp	r24, r1
     698:	21 e0       	ldi	r18, 0x01	; 1
     69a:	92 07       	cpc	r25, r18
     69c:	a1 f0       	breq	.+40     	; 0x6c6 <TIMER_COUNTER1_start+0x60>
     69e:	81 15       	cp	r24, r1
     6a0:	24 e0       	ldi	r18, 0x04	; 4
     6a2:	92 07       	cpc	r25, r18
     6a4:	a1 f0       	breq	.+40     	; 0x6ce <TIMER_COUNTER1_start+0x68>
     6a6:	80 34       	cpi	r24, 0x40	; 64
     6a8:	91 05       	cpc	r25, r1
     6aa:	e9 f4       	brne	.+58     	; 0x6e6 <TIMER_COUNTER1_start+0x80>
     6ac:	08 c0       	rjmp	.+16     	; 0x6be <TIMER_COUNTER1_start+0x58>
     6ae:	8e b5       	in	r24, 0x2e	; 46
     6b0:	81 60       	ori	r24, 0x01	; 1
     6b2:	8e bd       	out	0x2e, r24	; 46
     6b4:	1b c0       	rjmp	.+54     	; 0x6ec <TIMER_COUNTER1_start+0x86>
     6b6:	8e b5       	in	r24, 0x2e	; 46
     6b8:	82 60       	ori	r24, 0x02	; 2
     6ba:	8e bd       	out	0x2e, r24	; 46
     6bc:	17 c0       	rjmp	.+46     	; 0x6ec <TIMER_COUNTER1_start+0x86>
     6be:	8e b5       	in	r24, 0x2e	; 46
     6c0:	83 60       	ori	r24, 0x03	; 3
     6c2:	8e bd       	out	0x2e, r24	; 46
     6c4:	13 c0       	rjmp	.+38     	; 0x6ec <TIMER_COUNTER1_start+0x86>
     6c6:	8e b5       	in	r24, 0x2e	; 46
     6c8:	84 60       	ori	r24, 0x04	; 4
     6ca:	8e bd       	out	0x2e, r24	; 46
     6cc:	0f c0       	rjmp	.+30     	; 0x6ec <TIMER_COUNTER1_start+0x86>
     6ce:	8e b5       	in	r24, 0x2e	; 46
     6d0:	85 60       	ori	r24, 0x05	; 5
     6d2:	8e bd       	out	0x2e, r24	; 46
     6d4:	0b c0       	rjmp	.+22     	; 0x6ec <TIMER_COUNTER1_start+0x86>
     6d6:	8e b5       	in	r24, 0x2e	; 46
     6d8:	86 60       	ori	r24, 0x06	; 6
     6da:	8e bd       	out	0x2e, r24	; 46
     6dc:	07 c0       	rjmp	.+14     	; 0x6ec <TIMER_COUNTER1_start+0x86>
     6de:	8e b5       	in	r24, 0x2e	; 46
     6e0:	87 60       	ori	r24, 0x07	; 7
     6e2:	8e bd       	out	0x2e, r24	; 46
     6e4:	03 c0       	rjmp	.+6      	; 0x6ec <TIMER_COUNTER1_start+0x86>
     6e6:	8e b5       	in	r24, 0x2e	; 46
     6e8:	85 60       	ori	r24, 0x05	; 5
     6ea:	8e bd       	out	0x2e, r24	; 46
     6ec:	81 e0       	ldi	r24, 0x01	; 1
     6ee:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <timer1_state>
     6f2:	08 95       	ret

000006f4 <TIMER_COUNTER1_compoutmodeA>:
     6f4:	9f b5       	in	r25, 0x2f	; 47
     6f6:	9f 73       	andi	r25, 0x3F	; 63
     6f8:	9f bd       	out	0x2f, r25	; 47
     6fa:	82 30       	cpi	r24, 0x02	; 2
     6fc:	41 f0       	breq	.+16     	; 0x70e <TIMER_COUNTER1_compoutmodeA+0x1a>
     6fe:	83 30       	cpi	r24, 0x03	; 3
     700:	51 f0       	breq	.+20     	; 0x716 <TIMER_COUNTER1_compoutmodeA+0x22>
     702:	81 30       	cpi	r24, 0x01	; 1
     704:	59 f4       	brne	.+22     	; 0x71c <TIMER_COUNTER1_compoutmodeA+0x28>
     706:	8f b5       	in	r24, 0x2f	; 47
     708:	80 64       	ori	r24, 0x40	; 64
     70a:	8f bd       	out	0x2f, r24	; 47
     70c:	08 95       	ret
     70e:	8f b5       	in	r24, 0x2f	; 47
     710:	80 68       	ori	r24, 0x80	; 128
     712:	8f bd       	out	0x2f, r24	; 47
     714:	08 95       	ret
     716:	8f b5       	in	r24, 0x2f	; 47
     718:	80 6c       	ori	r24, 0xC0	; 192
     71a:	8f bd       	out	0x2f, r24	; 47
     71c:	08 95       	ret

0000071e <TIMER_COUNTER1_compoutmodeB>:
     71e:	9f b5       	in	r25, 0x2f	; 47
     720:	9f 7c       	andi	r25, 0xCF	; 207
     722:	9f bd       	out	0x2f, r25	; 47
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	41 f0       	breq	.+16     	; 0x738 <TIMER_COUNTER1_compoutmodeB+0x1a>
     728:	83 30       	cpi	r24, 0x03	; 3
     72a:	51 f0       	breq	.+20     	; 0x740 <TIMER_COUNTER1_compoutmodeB+0x22>
     72c:	81 30       	cpi	r24, 0x01	; 1
     72e:	59 f4       	brne	.+22     	; 0x746 <TIMER_COUNTER1_compoutmodeB+0x28>
     730:	8f b5       	in	r24, 0x2f	; 47
     732:	80 61       	ori	r24, 0x10	; 16
     734:	8f bd       	out	0x2f, r24	; 47
     736:	08 95       	ret
     738:	8f b5       	in	r24, 0x2f	; 47
     73a:	80 62       	ori	r24, 0x20	; 32
     73c:	8f bd       	out	0x2f, r24	; 47
     73e:	08 95       	ret
     740:	8f b5       	in	r24, 0x2f	; 47
     742:	80 63       	ori	r24, 0x30	; 48
     744:	8f bd       	out	0x2f, r24	; 47
     746:	08 95       	ret

00000748 <TIMER_COUNTER1_compoutmodeC>:
     748:	9f b5       	in	r25, 0x2f	; 47
     74a:	93 7f       	andi	r25, 0xF3	; 243
     74c:	9f bd       	out	0x2f, r25	; 47
     74e:	82 30       	cpi	r24, 0x02	; 2
     750:	41 f0       	breq	.+16     	; 0x762 <TIMER_COUNTER1_compoutmodeC+0x1a>
     752:	83 30       	cpi	r24, 0x03	; 3
     754:	51 f0       	breq	.+20     	; 0x76a <TIMER_COUNTER1_compoutmodeC+0x22>
     756:	81 30       	cpi	r24, 0x01	; 1
     758:	59 f4       	brne	.+22     	; 0x770 <TIMER_COUNTER1_compoutmodeC+0x28>
     75a:	8f b5       	in	r24, 0x2f	; 47
     75c:	84 60       	ori	r24, 0x04	; 4
     75e:	8f bd       	out	0x2f, r24	; 47
     760:	08 95       	ret
     762:	8f b5       	in	r24, 0x2f	; 47
     764:	88 60       	ori	r24, 0x08	; 8
     766:	8f bd       	out	0x2f, r24	; 47
     768:	08 95       	ret
     76a:	8f b5       	in	r24, 0x2f	; 47
     76c:	8c 60       	ori	r24, 0x0C	; 12
     76e:	8f bd       	out	0x2f, r24	; 47
     770:	08 95       	ret

00000772 <TIMER_COUNTER1_compareA>:
     772:	9b bd       	out	0x2b, r25	; 43
     774:	8a bd       	out	0x2a, r24	; 42
     776:	08 95       	ret

00000778 <TIMER_COUNTER1_compareB>:
     778:	99 bd       	out	0x29, r25	; 41
     77a:	88 bd       	out	0x28, r24	; 40
     77c:	08 95       	ret

0000077e <TIMER_COUNTER1_compareC>:
     77e:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     782:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     786:	08 95       	ret

00000788 <TIMER_COUNTER1_stop>:
     788:	8e b5       	in	r24, 0x2e	; 46
     78a:	88 7f       	andi	r24, 0xF8	; 248
     78c:	8e bd       	out	0x2e, r24	; 46
     78e:	1d bc       	out	0x2d, r1	; 45
     790:	1c bc       	out	0x2c, r1	; 44
     792:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <timer1_state>
     796:	08 95       	ret

00000798 <TIMER_COUNTER3_start>:
     798:	20 91 f2 01 	lds	r18, 0x01F2	; 0x8001f2 <timer3_state>
     79c:	21 11       	cpse	r18, r1
     79e:	56 c0       	rjmp	.+172    	; 0x84c <TIMER_COUNTER3_start+0xb4>
     7a0:	2f ef       	ldi	r18, 0xFF	; 255
     7a2:	3f ef       	ldi	r19, 0xFF	; 255
     7a4:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     7a8:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     7ac:	ea e8       	ldi	r30, 0x8A	; 138
     7ae:	f0 e0       	ldi	r31, 0x00	; 0
     7b0:	20 81       	ld	r18, Z
     7b2:	28 7f       	andi	r18, 0xF8	; 248
     7b4:	20 83       	st	Z, r18
     7b6:	88 30       	cpi	r24, 0x08	; 8
     7b8:	91 05       	cpc	r25, r1
     7ba:	e1 f0       	breq	.+56     	; 0x7f4 <TIMER_COUNTER3_start+0x5c>
     7bc:	48 f4       	brcc	.+18     	; 0x7d0 <TIMER_COUNTER3_start+0x38>
     7be:	83 30       	cpi	r24, 0x03	; 3
     7c0:	91 05       	cpc	r25, r1
     7c2:	81 f1       	breq	.+96     	; 0x824 <TIMER_COUNTER3_start+0x8c>
     7c4:	85 30       	cpi	r24, 0x05	; 5
     7c6:	91 05       	cpc	r25, r1
     7c8:	99 f1       	breq	.+102    	; 0x830 <TIMER_COUNTER3_start+0x98>
     7ca:	01 97       	sbiw	r24, 0x01	; 1
     7cc:	b9 f5       	brne	.+110    	; 0x83c <TIMER_COUNTER3_start+0xa4>
     7ce:	0c c0       	rjmp	.+24     	; 0x7e8 <TIMER_COUNTER3_start+0x50>
     7d0:	81 15       	cp	r24, r1
     7d2:	21 e0       	ldi	r18, 0x01	; 1
     7d4:	92 07       	cpc	r25, r18
     7d6:	d1 f0       	breq	.+52     	; 0x80c <TIMER_COUNTER3_start+0x74>
     7d8:	81 15       	cp	r24, r1
     7da:	24 e0       	ldi	r18, 0x04	; 4
     7dc:	92 07       	cpc	r25, r18
     7de:	e1 f0       	breq	.+56     	; 0x818 <TIMER_COUNTER3_start+0x80>
     7e0:	80 34       	cpi	r24, 0x40	; 64
     7e2:	91 05       	cpc	r25, r1
     7e4:	59 f5       	brne	.+86     	; 0x83c <TIMER_COUNTER3_start+0xa4>
     7e6:	0c c0       	rjmp	.+24     	; 0x800 <TIMER_COUNTER3_start+0x68>
     7e8:	ea e8       	ldi	r30, 0x8A	; 138
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	80 81       	ld	r24, Z
     7ee:	81 60       	ori	r24, 0x01	; 1
     7f0:	80 83       	st	Z, r24
     7f2:	29 c0       	rjmp	.+82     	; 0x846 <TIMER_COUNTER3_start+0xae>
     7f4:	ea e8       	ldi	r30, 0x8A	; 138
     7f6:	f0 e0       	ldi	r31, 0x00	; 0
     7f8:	80 81       	ld	r24, Z
     7fa:	82 60       	ori	r24, 0x02	; 2
     7fc:	80 83       	st	Z, r24
     7fe:	23 c0       	rjmp	.+70     	; 0x846 <TIMER_COUNTER3_start+0xae>
     800:	ea e8       	ldi	r30, 0x8A	; 138
     802:	f0 e0       	ldi	r31, 0x00	; 0
     804:	80 81       	ld	r24, Z
     806:	83 60       	ori	r24, 0x03	; 3
     808:	80 83       	st	Z, r24
     80a:	1d c0       	rjmp	.+58     	; 0x846 <TIMER_COUNTER3_start+0xae>
     80c:	ea e8       	ldi	r30, 0x8A	; 138
     80e:	f0 e0       	ldi	r31, 0x00	; 0
     810:	80 81       	ld	r24, Z
     812:	84 60       	ori	r24, 0x04	; 4
     814:	80 83       	st	Z, r24
     816:	17 c0       	rjmp	.+46     	; 0x846 <TIMER_COUNTER3_start+0xae>
     818:	ea e8       	ldi	r30, 0x8A	; 138
     81a:	f0 e0       	ldi	r31, 0x00	; 0
     81c:	80 81       	ld	r24, Z
     81e:	85 60       	ori	r24, 0x05	; 5
     820:	80 83       	st	Z, r24
     822:	11 c0       	rjmp	.+34     	; 0x846 <TIMER_COUNTER3_start+0xae>
     824:	ea e8       	ldi	r30, 0x8A	; 138
     826:	f0 e0       	ldi	r31, 0x00	; 0
     828:	80 81       	ld	r24, Z
     82a:	86 60       	ori	r24, 0x06	; 6
     82c:	80 83       	st	Z, r24
     82e:	0b c0       	rjmp	.+22     	; 0x846 <TIMER_COUNTER3_start+0xae>
     830:	ea e8       	ldi	r30, 0x8A	; 138
     832:	f0 e0       	ldi	r31, 0x00	; 0
     834:	80 81       	ld	r24, Z
     836:	87 60       	ori	r24, 0x07	; 7
     838:	80 83       	st	Z, r24
     83a:	05 c0       	rjmp	.+10     	; 0x846 <TIMER_COUNTER3_start+0xae>
     83c:	ea e8       	ldi	r30, 0x8A	; 138
     83e:	f0 e0       	ldi	r31, 0x00	; 0
     840:	80 81       	ld	r24, Z
     842:	85 60       	ori	r24, 0x05	; 5
     844:	80 83       	st	Z, r24
     846:	81 e0       	ldi	r24, 0x01	; 1
     848:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <timer3_state>
     84c:	08 95       	ret

0000084e <TIMER_COUNTER3_compoutmodeA>:
     84e:	eb e8       	ldi	r30, 0x8B	; 139
     850:	f0 e0       	ldi	r31, 0x00	; 0
     852:	90 81       	ld	r25, Z
     854:	9f 73       	andi	r25, 0x3F	; 63
     856:	90 83       	st	Z, r25
     858:	82 30       	cpi	r24, 0x02	; 2
     85a:	41 f0       	breq	.+16     	; 0x86c <TIMER_COUNTER3_compoutmodeA+0x1e>
     85c:	83 30       	cpi	r24, 0x03	; 3
     85e:	61 f0       	breq	.+24     	; 0x878 <TIMER_COUNTER3_compoutmodeA+0x2a>
     860:	81 30       	cpi	r24, 0x01	; 1
     862:	79 f4       	brne	.+30     	; 0x882 <TIMER_COUNTER3_compoutmodeA+0x34>
     864:	80 81       	ld	r24, Z
     866:	80 64       	ori	r24, 0x40	; 64
     868:	80 83       	st	Z, r24
     86a:	08 95       	ret
     86c:	eb e8       	ldi	r30, 0x8B	; 139
     86e:	f0 e0       	ldi	r31, 0x00	; 0
     870:	80 81       	ld	r24, Z
     872:	80 68       	ori	r24, 0x80	; 128
     874:	80 83       	st	Z, r24
     876:	08 95       	ret
     878:	eb e8       	ldi	r30, 0x8B	; 139
     87a:	f0 e0       	ldi	r31, 0x00	; 0
     87c:	80 81       	ld	r24, Z
     87e:	80 6c       	ori	r24, 0xC0	; 192
     880:	80 83       	st	Z, r24
     882:	08 95       	ret

00000884 <TIMER_COUNTER3_compoutmodeB>:
     884:	eb e8       	ldi	r30, 0x8B	; 139
     886:	f0 e0       	ldi	r31, 0x00	; 0
     888:	90 81       	ld	r25, Z
     88a:	9f 7c       	andi	r25, 0xCF	; 207
     88c:	90 83       	st	Z, r25
     88e:	82 30       	cpi	r24, 0x02	; 2
     890:	41 f0       	breq	.+16     	; 0x8a2 <TIMER_COUNTER3_compoutmodeB+0x1e>
     892:	83 30       	cpi	r24, 0x03	; 3
     894:	61 f0       	breq	.+24     	; 0x8ae <TIMER_COUNTER3_compoutmodeB+0x2a>
     896:	81 30       	cpi	r24, 0x01	; 1
     898:	79 f4       	brne	.+30     	; 0x8b8 <TIMER_COUNTER3_compoutmodeB+0x34>
     89a:	80 81       	ld	r24, Z
     89c:	80 61       	ori	r24, 0x10	; 16
     89e:	80 83       	st	Z, r24
     8a0:	08 95       	ret
     8a2:	eb e8       	ldi	r30, 0x8B	; 139
     8a4:	f0 e0       	ldi	r31, 0x00	; 0
     8a6:	80 81       	ld	r24, Z
     8a8:	80 62       	ori	r24, 0x20	; 32
     8aa:	80 83       	st	Z, r24
     8ac:	08 95       	ret
     8ae:	eb e8       	ldi	r30, 0x8B	; 139
     8b0:	f0 e0       	ldi	r31, 0x00	; 0
     8b2:	80 81       	ld	r24, Z
     8b4:	80 63       	ori	r24, 0x30	; 48
     8b6:	80 83       	st	Z, r24
     8b8:	08 95       	ret

000008ba <TIMER_COUNTER3_compoutmodeC>:
     8ba:	eb e8       	ldi	r30, 0x8B	; 139
     8bc:	f0 e0       	ldi	r31, 0x00	; 0
     8be:	90 81       	ld	r25, Z
     8c0:	93 7f       	andi	r25, 0xF3	; 243
     8c2:	90 83       	st	Z, r25
     8c4:	82 30       	cpi	r24, 0x02	; 2
     8c6:	41 f0       	breq	.+16     	; 0x8d8 <TIMER_COUNTER3_compoutmodeC+0x1e>
     8c8:	83 30       	cpi	r24, 0x03	; 3
     8ca:	61 f0       	breq	.+24     	; 0x8e4 <TIMER_COUNTER3_compoutmodeC+0x2a>
     8cc:	81 30       	cpi	r24, 0x01	; 1
     8ce:	79 f4       	brne	.+30     	; 0x8ee <TIMER_COUNTER3_compoutmodeC+0x34>
     8d0:	80 81       	ld	r24, Z
     8d2:	84 60       	ori	r24, 0x04	; 4
     8d4:	80 83       	st	Z, r24
     8d6:	08 95       	ret
     8d8:	eb e8       	ldi	r30, 0x8B	; 139
     8da:	f0 e0       	ldi	r31, 0x00	; 0
     8dc:	80 81       	ld	r24, Z
     8de:	88 60       	ori	r24, 0x08	; 8
     8e0:	80 83       	st	Z, r24
     8e2:	08 95       	ret
     8e4:	eb e8       	ldi	r30, 0x8B	; 139
     8e6:	f0 e0       	ldi	r31, 0x00	; 0
     8e8:	80 81       	ld	r24, Z
     8ea:	8c 60       	ori	r24, 0x0C	; 12
     8ec:	80 83       	st	Z, r24
     8ee:	08 95       	ret

000008f0 <TIMER_COUNTER3_compareA>:
     8f0:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     8f4:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     8f8:	08 95       	ret

000008fa <TIMER_COUNTER3_compareB>:
     8fa:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     8fe:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     902:	08 95       	ret

00000904 <TIMER_COUNTER3_compareC>:
     904:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     908:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     90c:	08 95       	ret

0000090e <TIMER_COUNTER3_stop>:
     90e:	ea e8       	ldi	r30, 0x8A	; 138
     910:	f0 e0       	ldi	r31, 0x00	; 0
     912:	80 81       	ld	r24, Z
     914:	88 7f       	andi	r24, 0xF8	; 248
     916:	80 83       	st	Z, r24
     918:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     91c:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     920:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <timer3_state>
     924:	08 95       	ret

00000926 <TIMER_COUNTER1enable>:
     926:	0f 93       	push	r16
     928:	1f 93       	push	r17
     92a:	dc 01       	movw	r26, r24
     92c:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <timer1_state>
     930:	8f b5       	in	r24, 0x2f	; 47
     932:	8c 7f       	andi	r24, 0xFC	; 252
     934:	8f bd       	out	0x2f, r24	; 47
     936:	8e b5       	in	r24, 0x2e	; 46
     938:	87 7e       	andi	r24, 0xE7	; 231
     93a:	8e bd       	out	0x2e, r24	; 46
     93c:	06 2f       	mov	r16, r22
     93e:	10 e0       	ldi	r17, 0x00	; 0
     940:	f8 01       	movw	r30, r16
     942:	31 97       	sbiw	r30, 0x01	; 1
     944:	ef 30       	cpi	r30, 0x0F	; 15
     946:	f1 05       	cpc	r31, r1
     948:	08 f0       	brcs	.+2      	; 0x94c <TIMER_COUNTER1enable+0x26>
     94a:	5a c0       	rjmp	.+180    	; 0xa00 <TIMER_COUNTER1enable+0xda>
     94c:	ea 5a       	subi	r30, 0xAA	; 170
     94e:	ff 4f       	sbci	r31, 0xFF	; 255
     950:	0c 94 02 19 	jmp	0x3204	; 0x3204 <__tablejump2__>
     954:	8f b5       	in	r24, 0x2f	; 47
     956:	81 60       	ori	r24, 0x01	; 1
     958:	8f bd       	out	0x2f, r24	; 47
     95a:	52 c0       	rjmp	.+164    	; 0xa00 <TIMER_COUNTER1enable+0xda>
     95c:	8f b5       	in	r24, 0x2f	; 47
     95e:	82 60       	ori	r24, 0x02	; 2
     960:	8f bd       	out	0x2f, r24	; 47
     962:	4e c0       	rjmp	.+156    	; 0xa00 <TIMER_COUNTER1enable+0xda>
     964:	8f b5       	in	r24, 0x2f	; 47
     966:	83 60       	ori	r24, 0x03	; 3
     968:	8f bd       	out	0x2f, r24	; 47
     96a:	4a c0       	rjmp	.+148    	; 0xa00 <TIMER_COUNTER1enable+0xda>
     96c:	8e b5       	in	r24, 0x2e	; 46
     96e:	88 60       	ori	r24, 0x08	; 8
     970:	8e bd       	out	0x2e, r24	; 46
     972:	46 c0       	rjmp	.+140    	; 0xa00 <TIMER_COUNTER1enable+0xda>
     974:	8f b5       	in	r24, 0x2f	; 47
     976:	81 60       	ori	r24, 0x01	; 1
     978:	8f bd       	out	0x2f, r24	; 47
     97a:	8e b5       	in	r24, 0x2e	; 46
     97c:	88 60       	ori	r24, 0x08	; 8
     97e:	8e bd       	out	0x2e, r24	; 46
     980:	3f c0       	rjmp	.+126    	; 0xa00 <TIMER_COUNTER1enable+0xda>
     982:	8f b5       	in	r24, 0x2f	; 47
     984:	82 60       	ori	r24, 0x02	; 2
     986:	8f bd       	out	0x2f, r24	; 47
     988:	8e b5       	in	r24, 0x2e	; 46
     98a:	88 60       	ori	r24, 0x08	; 8
     98c:	8e bd       	out	0x2e, r24	; 46
     98e:	38 c0       	rjmp	.+112    	; 0xa00 <TIMER_COUNTER1enable+0xda>
     990:	8f b5       	in	r24, 0x2f	; 47
     992:	83 60       	ori	r24, 0x03	; 3
     994:	8f bd       	out	0x2f, r24	; 47
     996:	8e b5       	in	r24, 0x2e	; 46
     998:	88 60       	ori	r24, 0x08	; 8
     99a:	8e bd       	out	0x2e, r24	; 46
     99c:	31 c0       	rjmp	.+98     	; 0xa00 <TIMER_COUNTER1enable+0xda>
     99e:	8e b5       	in	r24, 0x2e	; 46
     9a0:	80 61       	ori	r24, 0x10	; 16
     9a2:	8e bd       	out	0x2e, r24	; 46
     9a4:	2d c0       	rjmp	.+90     	; 0xa00 <TIMER_COUNTER1enable+0xda>
     9a6:	8f b5       	in	r24, 0x2f	; 47
     9a8:	81 60       	ori	r24, 0x01	; 1
     9aa:	8f bd       	out	0x2f, r24	; 47
     9ac:	8e b5       	in	r24, 0x2e	; 46
     9ae:	80 61       	ori	r24, 0x10	; 16
     9b0:	8e bd       	out	0x2e, r24	; 46
     9b2:	26 c0       	rjmp	.+76     	; 0xa00 <TIMER_COUNTER1enable+0xda>
     9b4:	8f b5       	in	r24, 0x2f	; 47
     9b6:	82 60       	ori	r24, 0x02	; 2
     9b8:	8f bd       	out	0x2f, r24	; 47
     9ba:	8e b5       	in	r24, 0x2e	; 46
     9bc:	80 61       	ori	r24, 0x10	; 16
     9be:	8e bd       	out	0x2e, r24	; 46
     9c0:	1f c0       	rjmp	.+62     	; 0xa00 <TIMER_COUNTER1enable+0xda>
     9c2:	8f b5       	in	r24, 0x2f	; 47
     9c4:	83 60       	ori	r24, 0x03	; 3
     9c6:	8f bd       	out	0x2f, r24	; 47
     9c8:	8e b5       	in	r24, 0x2e	; 46
     9ca:	80 61       	ori	r24, 0x10	; 16
     9cc:	8e bd       	out	0x2e, r24	; 46
     9ce:	18 c0       	rjmp	.+48     	; 0xa00 <TIMER_COUNTER1enable+0xda>
     9d0:	8e b5       	in	r24, 0x2e	; 46
     9d2:	88 61       	ori	r24, 0x18	; 24
     9d4:	8e bd       	out	0x2e, r24	; 46
     9d6:	14 c0       	rjmp	.+40     	; 0xa00 <TIMER_COUNTER1enable+0xda>
     9d8:	8f b5       	in	r24, 0x2f	; 47
     9da:	81 60       	ori	r24, 0x01	; 1
     9dc:	8f bd       	out	0x2f, r24	; 47
     9de:	8e b5       	in	r24, 0x2e	; 46
     9e0:	88 61       	ori	r24, 0x18	; 24
     9e2:	8e bd       	out	0x2e, r24	; 46
     9e4:	0d c0       	rjmp	.+26     	; 0xa00 <TIMER_COUNTER1enable+0xda>
     9e6:	8f b5       	in	r24, 0x2f	; 47
     9e8:	82 60       	ori	r24, 0x02	; 2
     9ea:	8f bd       	out	0x2f, r24	; 47
     9ec:	8e b5       	in	r24, 0x2e	; 46
     9ee:	88 61       	ori	r24, 0x18	; 24
     9f0:	8e bd       	out	0x2e, r24	; 46
     9f2:	06 c0       	rjmp	.+12     	; 0xa00 <TIMER_COUNTER1enable+0xda>
     9f4:	8f b5       	in	r24, 0x2f	; 47
     9f6:	83 60       	ori	r24, 0x03	; 3
     9f8:	8f bd       	out	0x2f, r24	; 47
     9fa:	8e b5       	in	r24, 0x2e	; 46
     9fc:	88 61       	ori	r24, 0x18	; 24
     9fe:	8e bd       	out	0x2e, r24	; 46
     a00:	8f b5       	in	r24, 0x2f	; 47
     a02:	83 70       	andi	r24, 0x03	; 3
     a04:	8f bd       	out	0x2f, r24	; 47
     a06:	87 b7       	in	r24, 0x37	; 55
     a08:	83 7c       	andi	r24, 0xC3	; 195
     a0a:	87 bf       	out	0x37, r24	; 55
     a0c:	ed e7       	ldi	r30, 0x7D	; 125
     a0e:	f0 e0       	ldi	r31, 0x00	; 0
     a10:	80 81       	ld	r24, Z
     a12:	8e 7f       	andi	r24, 0xFE	; 254
     a14:	80 83       	st	Z, r24
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	fa 01       	movw	r30, r20
     a1a:	31 97       	sbiw	r30, 0x01	; 1
     a1c:	ec 30       	cpi	r30, 0x0C	; 12
     a1e:	f1 05       	cpc	r31, r1
     a20:	08 f0       	brcs	.+2      	; 0xa24 <TIMER_COUNTER1enable+0xfe>
     a22:	44 c0       	rjmp	.+136    	; 0xaac <TIMER_COUNTER1enable+0x186>
     a24:	eb 59       	subi	r30, 0x9B	; 155
     a26:	ff 4f       	sbci	r31, 0xFF	; 255
     a28:	0c 94 02 19 	jmp	0x3204	; 0x3204 <__tablejump2__>
     a2c:	87 b7       	in	r24, 0x37	; 55
     a2e:	84 60       	ori	r24, 0x04	; 4
     a30:	87 bf       	out	0x37, r24	; 55
     a32:	3c c0       	rjmp	.+120    	; 0xaac <TIMER_COUNTER1enable+0x186>
     a34:	87 b7       	in	r24, 0x37	; 55
     a36:	80 61       	ori	r24, 0x10	; 16
     a38:	87 bf       	out	0x37, r24	; 55
     a3a:	38 c0       	rjmp	.+112    	; 0xaac <TIMER_COUNTER1enable+0x186>
     a3c:	87 b7       	in	r24, 0x37	; 55
     a3e:	88 60       	ori	r24, 0x08	; 8
     a40:	87 bf       	out	0x37, r24	; 55
     a42:	34 c0       	rjmp	.+104    	; 0xaac <TIMER_COUNTER1enable+0x186>
     a44:	ed e7       	ldi	r30, 0x7D	; 125
     a46:	f0 e0       	ldi	r31, 0x00	; 0
     a48:	80 81       	ld	r24, Z
     a4a:	81 60       	ori	r24, 0x01	; 1
     a4c:	80 83       	st	Z, r24
     a4e:	2e c0       	rjmp	.+92     	; 0xaac <TIMER_COUNTER1enable+0x186>
     a50:	87 b7       	in	r24, 0x37	; 55
     a52:	80 62       	ori	r24, 0x20	; 32
     a54:	87 bf       	out	0x37, r24	; 55
     a56:	2a c0       	rjmp	.+84     	; 0xaac <TIMER_COUNTER1enable+0x186>
     a58:	87 b7       	in	r24, 0x37	; 55
     a5a:	84 61       	ori	r24, 0x14	; 20
     a5c:	87 bf       	out	0x37, r24	; 55
     a5e:	26 c0       	rjmp	.+76     	; 0xaac <TIMER_COUNTER1enable+0x186>
     a60:	87 b7       	in	r24, 0x37	; 55
     a62:	8c 60       	ori	r24, 0x0C	; 12
     a64:	87 bf       	out	0x37, r24	; 55
     a66:	22 c0       	rjmp	.+68     	; 0xaac <TIMER_COUNTER1enable+0x186>
     a68:	87 b7       	in	r24, 0x37	; 55
     a6a:	84 60       	ori	r24, 0x04	; 4
     a6c:	87 bf       	out	0x37, r24	; 55
     a6e:	ed e7       	ldi	r30, 0x7D	; 125
     a70:	f0 e0       	ldi	r31, 0x00	; 0
     a72:	80 81       	ld	r24, Z
     a74:	81 60       	ori	r24, 0x01	; 1
     a76:	80 83       	st	Z, r24
     a78:	19 c0       	rjmp	.+50     	; 0xaac <TIMER_COUNTER1enable+0x186>
     a7a:	87 b7       	in	r24, 0x37	; 55
     a7c:	84 62       	ori	r24, 0x24	; 36
     a7e:	87 bf       	out	0x37, r24	; 55
     a80:	15 c0       	rjmp	.+42     	; 0xaac <TIMER_COUNTER1enable+0x186>
     a82:	87 b7       	in	r24, 0x37	; 55
     a84:	8c 61       	ori	r24, 0x1C	; 28
     a86:	87 bf       	out	0x37, r24	; 55
     a88:	11 c0       	rjmp	.+34     	; 0xaac <TIMER_COUNTER1enable+0x186>
     a8a:	87 b7       	in	r24, 0x37	; 55
     a8c:	8c 61       	ori	r24, 0x1C	; 28
     a8e:	87 bf       	out	0x37, r24	; 55
     a90:	ed e7       	ldi	r30, 0x7D	; 125
     a92:	f0 e0       	ldi	r31, 0x00	; 0
     a94:	80 81       	ld	r24, Z
     a96:	81 60       	ori	r24, 0x01	; 1
     a98:	80 83       	st	Z, r24
     a9a:	08 c0       	rjmp	.+16     	; 0xaac <TIMER_COUNTER1enable+0x186>
     a9c:	87 b7       	in	r24, 0x37	; 55
     a9e:	88 61       	ori	r24, 0x18	; 24
     aa0:	87 bf       	out	0x37, r24	; 55
     aa2:	ed e7       	ldi	r30, 0x7D	; 125
     aa4:	f0 e0       	ldi	r31, 0x00	; 0
     aa6:	80 81       	ld	r24, Z
     aa8:	81 60       	ori	r24, 0x01	; 1
     aaa:	80 83       	st	Z, r24
     aac:	8a e7       	ldi	r24, 0x7A	; 122
     aae:	93 e0       	ldi	r25, 0x03	; 3
     ab0:	11 96       	adiw	r26, 0x01	; 1
     ab2:	9c 93       	st	X, r25
     ab4:	8e 93       	st	-X, r24
     ab6:	8f e8       	ldi	r24, 0x8F	; 143
     ab8:	93 e0       	ldi	r25, 0x03	; 3
     aba:	13 96       	adiw	r26, 0x03	; 3
     abc:	9c 93       	st	X, r25
     abe:	8e 93       	st	-X, r24
     ac0:	12 97       	sbiw	r26, 0x02	; 2
     ac2:	84 ea       	ldi	r24, 0xA4	; 164
     ac4:	93 e0       	ldi	r25, 0x03	; 3
     ac6:	15 96       	adiw	r26, 0x05	; 5
     ac8:	9c 93       	st	X, r25
     aca:	8e 93       	st	-X, r24
     acc:	14 97       	sbiw	r26, 0x04	; 4
     ace:	89 eb       	ldi	r24, 0xB9	; 185
     ad0:	93 e0       	ldi	r25, 0x03	; 3
     ad2:	17 96       	adiw	r26, 0x07	; 7
     ad4:	9c 93       	st	X, r25
     ad6:	8e 93       	st	-X, r24
     ad8:	16 97       	sbiw	r26, 0x06	; 6
     ada:	8c eb       	ldi	r24, 0xBC	; 188
     adc:	93 e0       	ldi	r25, 0x03	; 3
     ade:	19 96       	adiw	r26, 0x09	; 9
     ae0:	9c 93       	st	X, r25
     ae2:	8e 93       	st	-X, r24
     ae4:	18 97       	sbiw	r26, 0x08	; 8
     ae6:	8f eb       	ldi	r24, 0xBF	; 191
     ae8:	93 e0       	ldi	r25, 0x03	; 3
     aea:	1b 96       	adiw	r26, 0x0b	; 11
     aec:	9c 93       	st	X, r25
     aee:	8e 93       	st	-X, r24
     af0:	1a 97       	sbiw	r26, 0x0a	; 10
     af2:	83 e3       	ldi	r24, 0x33	; 51
     af4:	93 e0       	ldi	r25, 0x03	; 3
     af6:	1d 96       	adiw	r26, 0x0d	; 13
     af8:	9c 93       	st	X, r25
     afa:	8e 93       	st	-X, r24
     afc:	1c 97       	sbiw	r26, 0x0c	; 12
     afe:	84 ec       	ldi	r24, 0xC4	; 196
     b00:	93 e0       	ldi	r25, 0x03	; 3
     b02:	1f 96       	adiw	r26, 0x0f	; 15
     b04:	9c 93       	st	X, r25
     b06:	8e 93       	st	-X, r24
     b08:	1e 97       	sbiw	r26, 0x0e	; 14
     b0a:	cd 01       	movw	r24, r26
     b0c:	1f 91       	pop	r17
     b0e:	0f 91       	pop	r16
     b10:	08 95       	ret

00000b12 <TIMER_COUNTER3enable>:
		CTC; Fast PWM, 8-bit; Fast PWM, 9-bit; Fast PWM, 10-bit; PWM, Phase and Frequency Correct; PWM, Phase and Frequency Correct;
		PWM, Phase Correct; PWM, Phase Correct; CTC; (Reserved); Fast PWM; Fast PWM.
		interrupt: off; overflow; output compare; both; default - non.
		for more information read datasheet.
	*/
	{
     b12:	0f 93       	push	r16
     b14:	1f 93       	push	r17
     b16:	cf 93       	push	r28
     b18:	df 93       	push	r29
     b1a:	dc 01       	movw	r26, r24
		TIMER_COUNTER3 timer3;
		timer3_state=0;
     b1c:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <timer3_state>
		TIMER_COUNTER3A_CONTROL_REGISTER&=~((1<<WGM31) | (1<<WGM30));
     b20:	cb e8       	ldi	r28, 0x8B	; 139
     b22:	d0 e0       	ldi	r29, 0x00	; 0
     b24:	88 81       	ld	r24, Y
     b26:	8c 7f       	andi	r24, 0xFC	; 252
     b28:	88 83       	st	Y, r24
		TIMER_COUNTER3B_CONTROL_REGISTER&=~((1<<WGM33) | (1<<WGM32));
     b2a:	ca e8       	ldi	r28, 0x8A	; 138
     b2c:	d0 e0       	ldi	r29, 0x00	; 0
     b2e:	88 81       	ld	r24, Y
     b30:	87 7e       	andi	r24, 0xE7	; 231
     b32:	88 83       	st	Y, r24
		switch(wavegenmode){
     b34:	06 2f       	mov	r16, r22
     b36:	10 e0       	ldi	r17, 0x00	; 0
     b38:	f8 01       	movw	r30, r16
     b3a:	31 97       	sbiw	r30, 0x01	; 1
     b3c:	ef 30       	cpi	r30, 0x0F	; 15
     b3e:	f1 05       	cpc	r31, r1
     b40:	08 f0       	brcs	.+2      	; 0xb44 <TIMER_COUNTER3enable+0x32>
     b42:	8a c0       	rjmp	.+276    	; 0xc58 <TIMER_COUNTER3enable+0x146>
     b44:	ef 58       	subi	r30, 0x8F	; 143
     b46:	ff 4f       	sbci	r31, 0xFF	; 255
     b48:	0c 94 02 19 	jmp	0x3204	; 0x3204 <__tablejump2__>
			case 0: // Normal
				break;
			case 1: // PWM, Phase Correct, 8-bit
				TIMER_COUNTER3A_CONTROL_REGISTER|=(1<<WGM30);
     b4c:	eb e8       	ldi	r30, 0x8B	; 139
     b4e:	f0 e0       	ldi	r31, 0x00	; 0
     b50:	80 81       	ld	r24, Z
     b52:	81 60       	ori	r24, 0x01	; 1
     b54:	80 83       	st	Z, r24
				break;
     b56:	80 c0       	rjmp	.+256    	; 0xc58 <TIMER_COUNTER3enable+0x146>
			case 2:	// PWM, Phase Correct, 9-bit
				TIMER_COUNTER3A_CONTROL_REGISTER|=(1<<WGM31);
     b58:	eb e8       	ldi	r30, 0x8B	; 139
     b5a:	f0 e0       	ldi	r31, 0x00	; 0
     b5c:	80 81       	ld	r24, Z
     b5e:	82 60       	ori	r24, 0x02	; 2
     b60:	80 83       	st	Z, r24
				break;
     b62:	7a c0       	rjmp	.+244    	; 0xc58 <TIMER_COUNTER3enable+0x146>
			case 3:	// PWM, Phase Correct, 10-bit
				TIMER_COUNTER3A_CONTROL_REGISTER|=(1<<WGM31) | (1<<WGM30);
     b64:	eb e8       	ldi	r30, 0x8B	; 139
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	80 81       	ld	r24, Z
     b6a:	83 60       	ori	r24, 0x03	; 3
     b6c:	80 83       	st	Z, r24
				break;
     b6e:	74 c0       	rjmp	.+232    	; 0xc58 <TIMER_COUNTER3enable+0x146>
			case 4:	// CTC
				TIMER_COUNTER3B_CONTROL_REGISTER|=(1<<WGM32);
     b70:	ea e8       	ldi	r30, 0x8A	; 138
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	80 81       	ld	r24, Z
     b76:	88 60       	ori	r24, 0x08	; 8
     b78:	80 83       	st	Z, r24
				break;
     b7a:	6e c0       	rjmp	.+220    	; 0xc58 <TIMER_COUNTER3enable+0x146>
			case 5:	// Fast PWM, 8-bit
				TIMER_COUNTER3A_CONTROL_REGISTER|=(1<<WGM30);
     b7c:	eb e8       	ldi	r30, 0x8B	; 139
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	81 60       	ori	r24, 0x01	; 1
     b84:	80 83       	st	Z, r24
				TIMER_COUNTER3B_CONTROL_REGISTER|=(1<<WGM32);
     b86:	ea e8       	ldi	r30, 0x8A	; 138
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	80 81       	ld	r24, Z
     b8c:	88 60       	ori	r24, 0x08	; 8
     b8e:	80 83       	st	Z, r24
				break;
     b90:	63 c0       	rjmp	.+198    	; 0xc58 <TIMER_COUNTER3enable+0x146>
			case 6:	// Fast PWM, 9-bit
				TIMER_COUNTER3A_CONTROL_REGISTER|=(1<<WGM31);
     b92:	eb e8       	ldi	r30, 0x8B	; 139
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 81       	ld	r24, Z
     b98:	82 60       	ori	r24, 0x02	; 2
     b9a:	80 83       	st	Z, r24
				TIMER_COUNTER3B_CONTROL_REGISTER|=(1<<WGM32);
     b9c:	ea e8       	ldi	r30, 0x8A	; 138
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	80 81       	ld	r24, Z
     ba2:	88 60       	ori	r24, 0x08	; 8
     ba4:	80 83       	st	Z, r24
				break;
     ba6:	58 c0       	rjmp	.+176    	; 0xc58 <TIMER_COUNTER3enable+0x146>
			case 7:	// Fast PWM, 10-bit
				TIMER_COUNTER3A_CONTROL_REGISTER|=(1<<WGM31) | (1<<WGM30);
     ba8:	eb e8       	ldi	r30, 0x8B	; 139
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	80 81       	ld	r24, Z
     bae:	83 60       	ori	r24, 0x03	; 3
     bb0:	80 83       	st	Z, r24
				TIMER_COUNTER3B_CONTROL_REGISTER|=(1<<WGM32);
     bb2:	ea e8       	ldi	r30, 0x8A	; 138
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	80 81       	ld	r24, Z
     bb8:	88 60       	ori	r24, 0x08	; 8
     bba:	80 83       	st	Z, r24
				break;
     bbc:	4d c0       	rjmp	.+154    	; 0xc58 <TIMER_COUNTER3enable+0x146>
			case 8:	// PWM, Phase and Frequency Correct
				TIMER_COUNTER3B_CONTROL_REGISTER|=(1<<WGM33);
     bbe:	ea e8       	ldi	r30, 0x8A	; 138
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	80 61       	ori	r24, 0x10	; 16
     bc6:	80 83       	st	Z, r24
				break;
     bc8:	47 c0       	rjmp	.+142    	; 0xc58 <TIMER_COUNTER3enable+0x146>
			case 9:	// PWM, Phase and Frequency Correct
				TIMER_COUNTER3A_CONTROL_REGISTER|=(1<<WGM30);
     bca:	eb e8       	ldi	r30, 0x8B	; 139
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	80 81       	ld	r24, Z
     bd0:	81 60       	ori	r24, 0x01	; 1
     bd2:	80 83       	st	Z, r24
				TIMER_COUNTER3B_CONTROL_REGISTER|=(1<<WGM33);
     bd4:	ea e8       	ldi	r30, 0x8A	; 138
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	80 81       	ld	r24, Z
     bda:	80 61       	ori	r24, 0x10	; 16
     bdc:	80 83       	st	Z, r24
				break;
     bde:	3c c0       	rjmp	.+120    	; 0xc58 <TIMER_COUNTER3enable+0x146>
			case 10: // PWM, Phase Correct
				TIMER_COUNTER3A_CONTROL_REGISTER|=(1<<WGM31);
     be0:	eb e8       	ldi	r30, 0x8B	; 139
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	82 60       	ori	r24, 0x02	; 2
     be8:	80 83       	st	Z, r24
				TIMER_COUNTER3B_CONTROL_REGISTER|=(1<<WGM33);
     bea:	ea e8       	ldi	r30, 0x8A	; 138
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	80 61       	ori	r24, 0x10	; 16
     bf2:	80 83       	st	Z, r24
				break;
     bf4:	31 c0       	rjmp	.+98     	; 0xc58 <TIMER_COUNTER3enable+0x146>
			case 11: // PWM, Phase Correct
				TIMER_COUNTER3A_CONTROL_REGISTER|=(1<<WGM31) | (1<<WGM30);
     bf6:	eb e8       	ldi	r30, 0x8B	; 139
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	80 81       	ld	r24, Z
     bfc:	83 60       	ori	r24, 0x03	; 3
     bfe:	80 83       	st	Z, r24
				TIMER_COUNTER3B_CONTROL_REGISTER|=(1<<WGM33);
     c00:	ea e8       	ldi	r30, 0x8A	; 138
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	80 61       	ori	r24, 0x10	; 16
     c08:	80 83       	st	Z, r24
				break;
     c0a:	26 c0       	rjmp	.+76     	; 0xc58 <TIMER_COUNTER3enable+0x146>
			case 12: // CTC
				TIMER_COUNTER3B_CONTROL_REGISTER|=(1<<WGM33) | (1<<WGM32);
     c0c:	ea e8       	ldi	r30, 0x8A	; 138
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	80 81       	ld	r24, Z
     c12:	88 61       	ori	r24, 0x18	; 24
     c14:	80 83       	st	Z, r24
				break;
     c16:	20 c0       	rjmp	.+64     	; 0xc58 <TIMER_COUNTER3enable+0x146>
			case 13: // (Reserved)
				TIMER_COUNTER3A_CONTROL_REGISTER|=(1<<WGM30);
     c18:	eb e8       	ldi	r30, 0x8B	; 139
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	80 81       	ld	r24, Z
     c1e:	81 60       	ori	r24, 0x01	; 1
     c20:	80 83       	st	Z, r24
				TIMER_COUNTER3B_CONTROL_REGISTER|=(1<<WGM33) | (1<<WGM32);
     c22:	ea e8       	ldi	r30, 0x8A	; 138
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	88 61       	ori	r24, 0x18	; 24
     c2a:	80 83       	st	Z, r24
				break;
     c2c:	15 c0       	rjmp	.+42     	; 0xc58 <TIMER_COUNTER3enable+0x146>
			case 14: // Fast PWM
				TIMER_COUNTER3A_CONTROL_REGISTER|=(1<<WGM31);
     c2e:	eb e8       	ldi	r30, 0x8B	; 139
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	80 81       	ld	r24, Z
     c34:	82 60       	ori	r24, 0x02	; 2
     c36:	80 83       	st	Z, r24
				TIMER_COUNTER3B_CONTROL_REGISTER|=(1<<WGM33) | (1<<WGM32);
     c38:	ea e8       	ldi	r30, 0x8A	; 138
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	88 61       	ori	r24, 0x18	; 24
     c40:	80 83       	st	Z, r24
				break;
     c42:	0a c0       	rjmp	.+20     	; 0xc58 <TIMER_COUNTER3enable+0x146>
			case 15: // Fast PWM
				TIMER_COUNTER3A_CONTROL_REGISTER|=(1<<WGM31) | (1<<WGM30);
     c44:	eb e8       	ldi	r30, 0x8B	; 139
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	80 81       	ld	r24, Z
     c4a:	83 60       	ori	r24, 0x03	; 3
     c4c:	80 83       	st	Z, r24
				TIMER_COUNTER3B_CONTROL_REGISTER|=(1<<WGM33) | (1<<WGM32);
     c4e:	ea e8       	ldi	r30, 0x8A	; 138
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 81       	ld	r24, Z
     c54:	88 61       	ori	r24, 0x18	; 24
     c56:	80 83       	st	Z, r24
				break;
			default:
				break;
		}
		TIMER_COUNTER3A_CONTROL_REGISTER&=~((3<<COM3A0) | (3<<COM3B0)| (3<<COM3C0));
     c58:	eb e8       	ldi	r30, 0x8B	; 139
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	80 81       	ld	r24, Z
     c5e:	83 70       	andi	r24, 0x03	; 3
     c60:	80 83       	st	Z, r24
		EXTENDED_TIMER_COUNTER_INTERRUPT_MASK_REGISTER&=~((1<<TICIE3) | (1<<OCIE3A) | (1<<OCIE3B) | (1<<TOIE3) | (1<<OCIE3C));
     c62:	ed e7       	ldi	r30, 0x7D	; 125
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	80 81       	ld	r24, Z
     c68:	81 7c       	andi	r24, 0xC1	; 193
     c6a:	80 83       	st	Z, r24
		switch(interrupt){
     c6c:	50 e0       	ldi	r21, 0x00	; 0
     c6e:	fa 01       	movw	r30, r20
     c70:	31 97       	sbiw	r30, 0x01	; 1
     c72:	ec 30       	cpi	r30, 0x0C	; 12
     c74:	f1 05       	cpc	r31, r1
     c76:	08 f0       	brcs	.+2      	; 0xc7a <TIMER_COUNTER3enable+0x168>
     c78:	49 c0       	rjmp	.+146    	; 0xd0c <TIMER_COUNTER3enable+0x1fa>
     c7a:	e0 58       	subi	r30, 0x80	; 128
     c7c:	ff 4f       	sbci	r31, 0xFF	; 255
     c7e:	0c 94 02 19 	jmp	0x3204	; 0x3204 <__tablejump2__>
			case 0:
				break;
			case 1:
				EXTENDED_TIMER_COUNTER_INTERRUPT_MASK_REGISTER=(1<<TOIE3);
     c82:	84 e0       	ldi	r24, 0x04	; 4
     c84:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x7e007d>
				break;
     c88:	41 c0       	rjmp	.+130    	; 0xd0c <TIMER_COUNTER3enable+0x1fa>
			case 2:
				EXTENDED_TIMER_COUNTER_INTERRUPT_MASK_REGISTER|=(1<<OCIE3A);
     c8a:	ed e7       	ldi	r30, 0x7D	; 125
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 81       	ld	r24, Z
     c90:	80 61       	ori	r24, 0x10	; 16
     c92:	80 83       	st	Z, r24
				break;
     c94:	3b c0       	rjmp	.+118    	; 0xd0c <TIMER_COUNTER3enable+0x1fa>
			case 3:
				EXTENDED_TIMER_COUNTER_INTERRUPT_MASK_REGISTER|=(1<<OCIE3B);
     c96:	ed e7       	ldi	r30, 0x7D	; 125
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 81       	ld	r24, Z
     c9c:	88 60       	ori	r24, 0x08	; 8
     c9e:	80 83       	st	Z, r24
				break;
     ca0:	35 c0       	rjmp	.+106    	; 0xd0c <TIMER_COUNTER3enable+0x1fa>
			case 4:
				EXTENDED_TIMER_COUNTER_INTERRUPT_MASK_REGISTER|=(1<<OCIE3C);
     ca2:	ed e7       	ldi	r30, 0x7D	; 125
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 81       	ld	r24, Z
     ca8:	82 60       	ori	r24, 0x02	; 2
     caa:	80 83       	st	Z, r24
				break;
     cac:	2f c0       	rjmp	.+94     	; 0xd0c <TIMER_COUNTER3enable+0x1fa>
			case 5:
				EXTENDED_TIMER_COUNTER_INTERRUPT_MASK_REGISTER|=(1<<TICIE3);
     cae:	ed e7       	ldi	r30, 0x7D	; 125
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	80 62       	ori	r24, 0x20	; 32
     cb6:	80 83       	st	Z, r24
				break;
     cb8:	29 c0       	rjmp	.+82     	; 0xd0c <TIMER_COUNTER3enable+0x1fa>
			case 6:
				EXTENDED_TIMER_COUNTER_INTERRUPT_MASK_REGISTER|=(1<<OCIE3A) | (1<<TOIE3);
     cba:	ed e7       	ldi	r30, 0x7D	; 125
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	84 61       	ori	r24, 0x14	; 20
     cc2:	80 83       	st	Z, r24
				break;
     cc4:	23 c0       	rjmp	.+70     	; 0xd0c <TIMER_COUNTER3enable+0x1fa>
			case 7:
				EXTENDED_TIMER_COUNTER_INTERRUPT_MASK_REGISTER|=(1<<OCIE3B) | (1<<TOIE3);
     cc6:	ed e7       	ldi	r30, 0x7D	; 125
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	8c 60       	ori	r24, 0x0C	; 12
     cce:	80 83       	st	Z, r24
				break;
     cd0:	1d c0       	rjmp	.+58     	; 0xd0c <TIMER_COUNTER3enable+0x1fa>
			case 8:
				EXTENDED_TIMER_COUNTER_INTERRUPT_MASK_REGISTER|=(1<<TOIE3) | (1<<OCIE3C);
     cd2:	ed e7       	ldi	r30, 0x7D	; 125
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	86 60       	ori	r24, 0x06	; 6
     cda:	80 83       	st	Z, r24
				break;
     cdc:	17 c0       	rjmp	.+46     	; 0xd0c <TIMER_COUNTER3enable+0x1fa>
			case 9:
				EXTENDED_TIMER_COUNTER_INTERRUPT_MASK_REGISTER|=(1<<TICIE3) | (1<<TOIE3);
     cde:	ed e7       	ldi	r30, 0x7D	; 125
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
     ce4:	84 62       	ori	r24, 0x24	; 36
     ce6:	80 83       	st	Z, r24
				break;
     ce8:	11 c0       	rjmp	.+34     	; 0xd0c <TIMER_COUNTER3enable+0x1fa>
			case 10:
				EXTENDED_TIMER_COUNTER_INTERRUPT_MASK_REGISTER|=(1<<OCIE3A) | (1<<OCIE3B) | (1<<TOIE3);
     cea:	ed e7       	ldi	r30, 0x7D	; 125
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	8c 61       	ori	r24, 0x1C	; 28
     cf2:	80 83       	st	Z, r24
				break;
     cf4:	0b c0       	rjmp	.+22     	; 0xd0c <TIMER_COUNTER3enable+0x1fa>
			case 11:
				EXTENDED_TIMER_COUNTER_INTERRUPT_MASK_REGISTER|=(1<<OCIE3A) | (1<<OCIE3B) | (1<<TOIE3) | (1<<OCIE3C);
     cf6:	ed e7       	ldi	r30, 0x7D	; 125
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	8e 61       	ori	r24, 0x1E	; 30
     cfe:	80 83       	st	Z, r24
				break;
     d00:	05 c0       	rjmp	.+10     	; 0xd0c <TIMER_COUNTER3enable+0x1fa>
			case 12:
				EXTENDED_TIMER_COUNTER_INTERRUPT_MASK_REGISTER|=(1<<OCIE3A) | (1<<OCIE3B) | (1<<OCIE3C);
     d02:	ed e7       	ldi	r30, 0x7D	; 125
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	8a 61       	ori	r24, 0x1A	; 26
     d0a:	80 83       	st	Z, r24
		timer3.compareB=TIMER_COUNTER3_compareB;
		timer3.compareC=TIMER_COUNTER3_compareC;
		timer3.start=TIMER_COUNTER3_start;
		timer3.stop=TIMER_COUNTER3_stop;
		//
		return timer3;
     d0c:	87 e2       	ldi	r24, 0x27	; 39
     d0e:	94 e0       	ldi	r25, 0x04	; 4
     d10:	11 96       	adiw	r26, 0x01	; 1
     d12:	9c 93       	st	X, r25
     d14:	8e 93       	st	-X, r24
     d16:	82 e4       	ldi	r24, 0x42	; 66
     d18:	94 e0       	ldi	r25, 0x04	; 4
     d1a:	13 96       	adiw	r26, 0x03	; 3
     d1c:	9c 93       	st	X, r25
     d1e:	8e 93       	st	-X, r24
     d20:	12 97       	sbiw	r26, 0x02	; 2
     d22:	8d e5       	ldi	r24, 0x5D	; 93
     d24:	94 e0       	ldi	r25, 0x04	; 4
     d26:	15 96       	adiw	r26, 0x05	; 5
     d28:	9c 93       	st	X, r25
     d2a:	8e 93       	st	-X, r24
     d2c:	14 97       	sbiw	r26, 0x04	; 4
     d2e:	88 e7       	ldi	r24, 0x78	; 120
     d30:	94 e0       	ldi	r25, 0x04	; 4
     d32:	17 96       	adiw	r26, 0x07	; 7
     d34:	9c 93       	st	X, r25
     d36:	8e 93       	st	-X, r24
     d38:	16 97       	sbiw	r26, 0x06	; 6
     d3a:	8d e7       	ldi	r24, 0x7D	; 125
     d3c:	94 e0       	ldi	r25, 0x04	; 4
     d3e:	19 96       	adiw	r26, 0x09	; 9
     d40:	9c 93       	st	X, r25
     d42:	8e 93       	st	-X, r24
     d44:	18 97       	sbiw	r26, 0x08	; 8
     d46:	82 e8       	ldi	r24, 0x82	; 130
     d48:	94 e0       	ldi	r25, 0x04	; 4
     d4a:	1b 96       	adiw	r26, 0x0b	; 11
     d4c:	9c 93       	st	X, r25
     d4e:	8e 93       	st	-X, r24
     d50:	1a 97       	sbiw	r26, 0x0a	; 10
     d52:	8c ec       	ldi	r24, 0xCC	; 204
     d54:	93 e0       	ldi	r25, 0x03	; 3
     d56:	1d 96       	adiw	r26, 0x0d	; 13
     d58:	9c 93       	st	X, r25
     d5a:	8e 93       	st	-X, r24
     d5c:	1c 97       	sbiw	r26, 0x0c	; 12
     d5e:	87 e8       	ldi	r24, 0x87	; 135
     d60:	94 e0       	ldi	r25, 0x04	; 4
     d62:	1f 96       	adiw	r26, 0x0f	; 15
     d64:	9c 93       	st	X, r25
     d66:	8e 93       	st	-X, r24
     d68:	1e 97       	sbiw	r26, 0x0e	; 14
	}
     d6a:	cd 01       	movw	r24, r26
     d6c:	df 91       	pop	r29
     d6e:	cf 91       	pop	r28
     d70:	1f 91       	pop	r17
     d72:	0f 91       	pop	r16
     d74:	08 95       	ret

00000d76 <__vector_10>:

/*
** interrupt
*/
// So that main will not freeze when not defined, but rather exclude.
ISR(TIMER2_OVF_vect){ }
     d76:	1f 92       	push	r1
     d78:	0f 92       	push	r0
     d7a:	0f b6       	in	r0, 0x3f	; 63
     d7c:	0f 92       	push	r0
     d7e:	11 24       	eor	r1, r1
     d80:	0f 90       	pop	r0
     d82:	0f be       	out	0x3f, r0	; 63
     d84:	0f 90       	pop	r0
     d86:	1f 90       	pop	r1
     d88:	18 95       	reti

00000d8a <__vector_11>:
ISR(TIMER1_CAPT_vect){ }
     d8a:	1f 92       	push	r1
     d8c:	0f 92       	push	r0
     d8e:	0f b6       	in	r0, 0x3f	; 63
     d90:	0f 92       	push	r0
     d92:	11 24       	eor	r1, r1
     d94:	0f 90       	pop	r0
     d96:	0f be       	out	0x3f, r0	; 63
     d98:	0f 90       	pop	r0
     d9a:	1f 90       	pop	r1
     d9c:	18 95       	reti

00000d9e <__vector_12>:
ISR(TIMER1_COMPA_vect){ }
     d9e:	1f 92       	push	r1
     da0:	0f 92       	push	r0
     da2:	0f b6       	in	r0, 0x3f	; 63
     da4:	0f 92       	push	r0
     da6:	11 24       	eor	r1, r1
     da8:	0f 90       	pop	r0
     daa:	0f be       	out	0x3f, r0	; 63
     dac:	0f 90       	pop	r0
     dae:	1f 90       	pop	r1
     db0:	18 95       	reti

00000db2 <__vector_13>:
ISR(TIMER1_COMPB_vect){ }
     db2:	1f 92       	push	r1
     db4:	0f 92       	push	r0
     db6:	0f b6       	in	r0, 0x3f	; 63
     db8:	0f 92       	push	r0
     dba:	11 24       	eor	r1, r1
     dbc:	0f 90       	pop	r0
     dbe:	0f be       	out	0x3f, r0	; 63
     dc0:	0f 90       	pop	r0
     dc2:	1f 90       	pop	r1
     dc4:	18 95       	reti

00000dc6 <__vector_14>:
ISR(TIMER1_OVF_vect){ }
     dc6:	1f 92       	push	r1
     dc8:	0f 92       	push	r0
     dca:	0f b6       	in	r0, 0x3f	; 63
     dcc:	0f 92       	push	r0
     dce:	11 24       	eor	r1, r1
     dd0:	0f 90       	pop	r0
     dd2:	0f be       	out	0x3f, r0	; 63
     dd4:	0f 90       	pop	r0
     dd6:	1f 90       	pop	r1
     dd8:	18 95       	reti

00000dda <__vector_15>:
ISR(TIMER0_COMP_vect){ }
     dda:	1f 92       	push	r1
     ddc:	0f 92       	push	r0
     dde:	0f b6       	in	r0, 0x3f	; 63
     de0:	0f 92       	push	r0
     de2:	11 24       	eor	r1, r1
     de4:	0f 90       	pop	r0
     de6:	0f be       	out	0x3f, r0	; 63
     de8:	0f 90       	pop	r0
     dea:	1f 90       	pop	r1
     dec:	18 95       	reti

00000dee <__vector_16>:
ISR(TIMER0_OVF_vect){ }
     dee:	1f 92       	push	r1
     df0:	0f 92       	push	r0
     df2:	0f b6       	in	r0, 0x3f	; 63
     df4:	0f 92       	push	r0
     df6:	11 24       	eor	r1, r1
     df8:	0f 90       	pop	r0
     dfa:	0f be       	out	0x3f, r0	; 63
     dfc:	0f 90       	pop	r0
     dfe:	1f 90       	pop	r1
     e00:	18 95       	reti

00000e02 <__vector_24>:
ISR(TIMER1_COMPC_vect){ }
     e02:	1f 92       	push	r1
     e04:	0f 92       	push	r0
     e06:	0f b6       	in	r0, 0x3f	; 63
     e08:	0f 92       	push	r0
     e0a:	11 24       	eor	r1, r1
     e0c:	0f 90       	pop	r0
     e0e:	0f be       	out	0x3f, r0	; 63
     e10:	0f 90       	pop	r0
     e12:	1f 90       	pop	r1
     e14:	18 95       	reti

00000e16 <__vector_25>:
ISR(TIMER3_CAPT_vect){ }
     e16:	1f 92       	push	r1
     e18:	0f 92       	push	r0
     e1a:	0f b6       	in	r0, 0x3f	; 63
     e1c:	0f 92       	push	r0
     e1e:	11 24       	eor	r1, r1
     e20:	0f 90       	pop	r0
     e22:	0f be       	out	0x3f, r0	; 63
     e24:	0f 90       	pop	r0
     e26:	1f 90       	pop	r1
     e28:	18 95       	reti

00000e2a <__vector_26>:
ISR(TIMER3_COMPA_vect){ }
     e2a:	1f 92       	push	r1
     e2c:	0f 92       	push	r0
     e2e:	0f b6       	in	r0, 0x3f	; 63
     e30:	0f 92       	push	r0
     e32:	11 24       	eor	r1, r1
     e34:	0f 90       	pop	r0
     e36:	0f be       	out	0x3f, r0	; 63
     e38:	0f 90       	pop	r0
     e3a:	1f 90       	pop	r1
     e3c:	18 95       	reti

00000e3e <__vector_27>:
ISR(TIMER3_COMPB_vect){ }
     e3e:	1f 92       	push	r1
     e40:	0f 92       	push	r0
     e42:	0f b6       	in	r0, 0x3f	; 63
     e44:	0f 92       	push	r0
     e46:	11 24       	eor	r1, r1
     e48:	0f 90       	pop	r0
     e4a:	0f be       	out	0x3f, r0	; 63
     e4c:	0f 90       	pop	r0
     e4e:	1f 90       	pop	r1
     e50:	18 95       	reti

00000e52 <__vector_28>:
ISR(TIMER3_COMPC_vect){ }
     e52:	1f 92       	push	r1
     e54:	0f 92       	push	r0
     e56:	0f b6       	in	r0, 0x3f	; 63
     e58:	0f 92       	push	r0
     e5a:	11 24       	eor	r1, r1
     e5c:	0f 90       	pop	r0
     e5e:	0f be       	out	0x3f, r0	; 63
     e60:	0f 90       	pop	r0
     e62:	1f 90       	pop	r1
     e64:	18 95       	reti

00000e66 <I2Cenable>:
}
unsigned char twi_status(void){
	unsigned char status;
	status = TWI_STATUS_REGISTER & TWI_STATUS_MASK;
	return status;
}
     e66:	1f 93       	push	r17
     e68:	cf 93       	push	r28
     e6a:	df 93       	push	r29
     e6c:	ec 01       	movw	r28, r24
     e6e:	1f b7       	in	r17, 0x3f	; 63
     e70:	8f b7       	in	r24, 0x3f	; 63
     e72:	8f 77       	andi	r24, 0x7F	; 127
     e74:	8f bf       	out	0x3f, r24	; 63
     e76:	16 16       	cp	r1, r22
     e78:	3c f4       	brge	.+14     	; 0xe88 <I2Cenable+0x22>
     e7a:	60 93 f5 01 	sts	0x01F5, r22	; 0x8001f5 <twi_chip_id>
     e7e:	66 0f       	add	r22, r22
     e80:	61 60       	ori	r22, 0x01	; 1
     e82:	60 93 72 00 	sts	0x0072, r22	; 0x800072 <__TEXT_REGION_LENGTH__+0x7e0072>
     e86:	03 c0       	rjmp	.+6      	; 0xe8e <I2Cenable+0x28>
     e88:	82 e0       	ldi	r24, 0x02	; 2
     e8a:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <twi_chip_id>
     e8e:	81 b3       	in	r24, 0x11	; 17
     e90:	83 60       	ori	r24, 0x03	; 3
     e92:	81 bb       	out	0x11, r24	; 17
     e94:	82 b3       	in	r24, 0x12	; 18
     e96:	83 60       	ori	r24, 0x03	; 3
     e98:	82 bb       	out	0x12, r24	; 18
     e9a:	44 30       	cpi	r20, 0x04	; 4
     e9c:	79 f0       	breq	.+30     	; 0xebc <I2Cenable+0x56>
     e9e:	18 f4       	brcc	.+6      	; 0xea6 <I2Cenable+0x40>
     ea0:	41 30       	cpi	r20, 0x01	; 1
     ea2:	31 f0       	breq	.+12     	; 0xeb0 <I2Cenable+0x4a>
     ea4:	1d c0       	rjmp	.+58     	; 0xee0 <I2Cenable+0x7a>
     ea6:	40 31       	cpi	r20, 0x10	; 16
     ea8:	79 f0       	breq	.+30     	; 0xec8 <I2Cenable+0x62>
     eaa:	40 34       	cpi	r20, 0x40	; 64
     eac:	99 f0       	breq	.+38     	; 0xed4 <I2Cenable+0x6e>
     eae:	18 c0       	rjmp	.+48     	; 0xee0 <I2Cenable+0x7a>
     eb0:	e1 e7       	ldi	r30, 0x71	; 113
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	8c 7f       	andi	r24, 0xFC	; 252
     eb8:	80 83       	st	Z, r24
     eba:	18 c0       	rjmp	.+48     	; 0xeec <I2Cenable+0x86>
     ebc:	e1 e7       	ldi	r30, 0x71	; 113
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	81 60       	ori	r24, 0x01	; 1
     ec4:	80 83       	st	Z, r24
     ec6:	12 c0       	rjmp	.+36     	; 0xeec <I2Cenable+0x86>
     ec8:	e1 e7       	ldi	r30, 0x71	; 113
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	82 60       	ori	r24, 0x02	; 2
     ed0:	80 83       	st	Z, r24
     ed2:	0c c0       	rjmp	.+24     	; 0xeec <I2Cenable+0x86>
     ed4:	e1 e7       	ldi	r30, 0x71	; 113
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	83 60       	ori	r24, 0x03	; 3
     edc:	80 83       	st	Z, r24
     ede:	06 c0       	rjmp	.+12     	; 0xeec <I2Cenable+0x86>
     ee0:	e1 e7       	ldi	r30, 0x71	; 113
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	8c 7f       	andi	r24, 0xFC	; 252
     ee8:	80 83       	st	Z, r24
     eea:	41 e0       	ldi	r20, 0x01	; 1
     eec:	24 2f       	mov	r18, r20
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	22 0f       	add	r18, r18
     ef2:	33 1f       	adc	r19, r19
     ef4:	03 2e       	mov	r0, r19
     ef6:	00 0c       	add	r0, r0
     ef8:	44 0b       	sbc	r20, r20
     efa:	55 0b       	sbc	r21, r21
     efc:	60 e9       	ldi	r22, 0x90	; 144
     efe:	70 e0       	ldi	r23, 0x00	; 0
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	0e 94 c4 18 	call	0x3188	; 0x3188 <__udivmodsi4>
     f08:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     f0c:	1f bf       	out	0x3f, r17	; 63
     f0e:	8f b7       	in	r24, 0x3f	; 63
     f10:	80 68       	ori	r24, 0x80	; 128
     f12:	8f bf       	out	0x3f, r24	; 63
     f14:	8f ee       	ldi	r24, 0xEF	; 239
     f16:	97 e0       	ldi	r25, 0x07	; 7
     f18:	99 83       	std	Y+1, r25	; 0x01
     f1a:	88 83       	st	Y, r24
     f1c:	8f ef       	ldi	r24, 0xFF	; 255
     f1e:	97 e0       	ldi	r25, 0x07	; 7
     f20:	9b 83       	std	Y+3, r25	; 0x03
     f22:	8a 83       	std	Y+2, r24	; 0x02
     f24:	88 e1       	ldi	r24, 0x18	; 24
     f26:	98 e0       	ldi	r25, 0x08	; 8
     f28:	9d 83       	std	Y+5, r25	; 0x05
     f2a:	8c 83       	std	Y+4, r24	; 0x04
     f2c:	80 e3       	ldi	r24, 0x30	; 48
     f2e:	98 e0       	ldi	r25, 0x08	; 8
     f30:	9f 83       	std	Y+7, r25	; 0x07
     f32:	8e 83       	std	Y+6, r24	; 0x06
     f34:	87 ec       	ldi	r24, 0xC7	; 199
     f36:	97 e0       	ldi	r25, 0x07	; 7
     f38:	99 87       	std	Y+9, r25	; 0x09
     f3a:	88 87       	std	Y+8, r24	; 0x08
     f3c:	ce 01       	movw	r24, r28
     f3e:	df 91       	pop	r29
     f40:	cf 91       	pop	r28
     f42:	1f 91       	pop	r17
     f44:	08 95       	ret

00000f46 <twi_transmit>:
     f46:	81 30       	cpi	r24, 0x01	; 1
     f48:	61 f0       	breq	.+24     	; 0xf62 <twi_transmit+0x1c>
     f4a:	28 f0       	brcs	.+10     	; 0xf56 <twi_transmit+0x10>
     f4c:	82 30       	cpi	r24, 0x02	; 2
     f4e:	79 f0       	breq	.+30     	; 0xf6e <twi_transmit+0x28>
     f50:	83 30       	cpi	r24, 0x03	; 3
     f52:	99 f0       	breq	.+38     	; 0xf7a <twi_transmit+0x34>
     f54:	18 c0       	rjmp	.+48     	; 0xf86 <twi_transmit+0x40>
     f56:	e4 e7       	ldi	r30, 0x74	; 116
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	84 6a       	ori	r24, 0xA4	; 164
     f5e:	80 83       	st	Z, r24
     f60:	08 95       	ret
     f62:	e4 e7       	ldi	r30, 0x74	; 116
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	84 68       	ori	r24, 0x84	; 132
     f6a:	80 83       	st	Z, r24
     f6c:	08 95       	ret
     f6e:	e4 e7       	ldi	r30, 0x74	; 116
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	84 6c       	ori	r24, 0xC4	; 196
     f76:	80 83       	st	Z, r24
     f78:	08 95       	ret
     f7a:	e4 e7       	ldi	r30, 0x74	; 116
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	84 69       	ori	r24, 0x94	; 148
     f82:	80 83       	st	Z, r24
     f84:	08 95       	ret
     f86:	84 e9       	ldi	r24, 0x94	; 148
     f88:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     f8c:	08 95       	ret

00000f8e <twi_stop>:
     f8e:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
     f92:	88 7f       	andi	r24, 0xF8	; 248
     f94:	88 33       	cpi	r24, 0x38	; 56
     f96:	51 f0       	breq	.+20     	; 0xfac <twi_stop+0x1e>
     f98:	28 f4       	brcc	.+10     	; 0xfa4 <twi_stop+0x16>
     f9a:	80 32       	cpi	r24, 0x20	; 32
     f9c:	39 f0       	breq	.+14     	; 0xfac <twi_stop+0x1e>
     f9e:	80 33       	cpi	r24, 0x30	; 48
     fa0:	39 f4       	brne	.+14     	; 0xfb0 <twi_stop+0x22>
     fa2:	04 c0       	rjmp	.+8      	; 0xfac <twi_stop+0x1e>
     fa4:	88 34       	cpi	r24, 0x48	; 72
     fa6:	11 f0       	breq	.+4      	; 0xfac <twi_stop+0x1e>
     fa8:	88 35       	cpi	r24, 0x58	; 88
     faa:	11 f4       	brne	.+4      	; 0xfb0 <twi_stop+0x22>
     fac:	83 e0       	ldi	r24, 0x03	; 3
     fae:	cb df       	rcall	.-106    	; 0xf46 <twi_transmit>
     fb0:	83 e0       	ldi	r24, 0x03	; 3
     fb2:	c9 cf       	rjmp	.-110    	; 0xf46 <twi_transmit>
     fb4:	08 95       	ret

00000fb6 <twi_poll>:
void twi_poll(unsigned int ticks)
{
     fb6:	ac 01       	movw	r20, r24
	unsigned int i;
	for(i=0;!(TWI_CONTROL_REGISTER & (1<<TWINT));i++) // polling.
     fb8:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     fbc:	88 23       	and	r24, r24
     fbe:	2c f4       	brge	.+10     	; 0xfca <twi_poll+0x14>
     fc0:	08 95       	ret
		if(i > ticks)
     fc2:	42 17       	cp	r20, r18
     fc4:	53 07       	cpc	r21, r19
     fc6:	28 f4       	brcc	.+10     	; 0xfd2 <twi_poll+0x1c>
     fc8:	08 95       	ret
	return status;
}
void twi_poll(unsigned int ticks)
{
	unsigned int i;
	for(i=0;!(TWI_CONTROL_REGISTER & (1<<TWINT));i++) // polling.
     fca:	20 e0       	ldi	r18, 0x00	; 0
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	e4 e7       	ldi	r30, 0x74	; 116
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	2f 5f       	subi	r18, 0xFF	; 255
     fd4:	3f 4f       	sbci	r19, 0xFF	; 255
     fd6:	90 81       	ld	r25, Z
     fd8:	99 23       	and	r25, r25
     fda:	9c f7       	brge	.-26     	; 0xfc2 <twi_poll+0xc>
     fdc:	08 95       	ret

00000fde <twi_start>:
		if(i > ticks)
			break;
}
void twi_start(unsigned char mode)
{
	if(mode){
     fde:	88 23       	and	r24, r24
     fe0:	41 f0       	breq	.+16     	; 0xff2 <twi_start+0x14>
		TWI_CONTROL_REGISTER = (1<<TWEA) | (1<<TWEN) | (1<<TWIE);
     fe2:	e4 e7       	ldi	r30, 0x74	; 116
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	85 e4       	ldi	r24, 0x45	; 69
     fe8:	80 83       	st	Z, r24
		TWI_CONTROL_REGISTER &= ~((1<<TWSTA) | (1<<TWSTO));
     fea:	80 81       	ld	r24, Z
     fec:	8f 7c       	andi	r24, 0xCF	; 207
     fee:	80 83       	st	Z, r24
     ff0:	08 95       	ret
	}else{
		twi_transmit(TWI_START_CONDITION);
     ff2:	80 e0       	ldi	r24, 0x00	; 0
     ff4:	a8 df       	rcall	.-176    	; 0xf46 <twi_transmit>
		twi_poll(680);
     ff6:	88 ea       	ldi	r24, 0xA8	; 168
     ff8:	92 e0       	ldi	r25, 0x02	; 2
     ffa:	dd cf       	rjmp	.-70     	; 0xfb6 <twi_poll>
     ffc:	08 95       	ret

00000ffe <twi_master_connect>:
			break;
	}
}
unsigned char twi_status(void){
	unsigned char status;
	status = TWI_STATUS_REGISTER & TWI_STATUS_MASK;
     ffe:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
		twi_poll(680);
	}	
}
void twi_master_connect(unsigned char addr, unsigned char rw)
{
	switch(twi_status()){
    1002:	98 7f       	andi	r25, 0xF8	; 248
    1004:	98 30       	cpi	r25, 0x08	; 8
    1006:	99 f4       	brne	.+38     	; 0x102e <twi_master_connect+0x30>
		case TWI_SENT_START:
			TWI_CONTROL_REGISTER &= ~(1<<TWSTA);
    1008:	e4 e7       	ldi	r30, 0x74	; 116
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	90 81       	ld	r25, Z
    100e:	9f 7d       	andi	r25, 0xDF	; 223
    1010:	90 83       	st	Z, r25
			if(addr>0 && addr<128){
    1012:	18 16       	cp	r1, r24
    1014:	2c f4       	brge	.+10     	; 0x1020 <twi_master_connect+0x22>
				TWI_DATA_REGISTER=(addr<<TWA0) | rw;
    1016:	88 0f       	add	r24, r24
    1018:	86 2b       	or	r24, r22
    101a:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <twi_master_connect+0x26>
			}else{
				TWI_DATA_REGISTER=0;
    1020:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
			}
			twi_transmit(TWI_DATA_NO_ACK);
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	8f df       	rcall	.-226    	; 0xf46 <twi_transmit>
			twi_poll(680);
    1028:	88 ea       	ldi	r24, 0xA8	; 168
    102a:	92 e0       	ldi	r25, 0x02	; 2
    102c:	c4 cf       	rjmp	.-120    	; 0xfb6 <twi_poll>
    102e:	08 95       	ret

00001030 <twi_master_write>:
			break;
	}
}
unsigned char twi_status(void){
	unsigned char status;
	status = TWI_STATUS_REGISTER & TWI_STATUS_MASK;
    1030:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
			break;
	}
}
void twi_master_write(unsigned char data)
{
	switch(twi_status()){
    1034:	98 7f       	andi	r25, 0xF8	; 248
    1036:	98 31       	cpi	r25, 0x18	; 24
    1038:	19 f0       	breq	.+6      	; 0x1040 <twi_master_write+0x10>
    103a:	98 32       	cpi	r25, 0x28	; 40
    103c:	49 f0       	breq	.+18     	; 0x1050 <twi_master_write+0x20>
    103e:	08 95       	ret
		case TWI_MASTER_SENT_SLA_W_RECEIVED_ACK:
			TWI_DATA_REGISTER=data; // 8 bit data + ack = 9bit
    1040:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
			twi_transmit(TWI_DATA_NO_ACK);
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	7f df       	rcall	.-258    	; 0xf46 <twi_transmit>
			twi_poll(680);
    1048:	88 ea       	ldi	r24, 0xA8	; 168
    104a:	92 e0       	ldi	r25, 0x02	; 2
    104c:	b4 cf       	rjmp	.-152    	; 0xfb6 <twi_poll>
			break;
    104e:	08 95       	ret
		case TWI_MASTER_SENT_DATABYTE_RECEIVED_ACK:
			TWI_DATA_REGISTER=data; // 8 bit data + ack = 9bit
    1050:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
			twi_transmit(TWI_DATA_NO_ACK);
    1054:	81 e0       	ldi	r24, 0x01	; 1
			twi_poll(680);
    1056:	77 df       	rcall	.-274    	; 0xf46 <twi_transmit>
    1058:	88 ea       	ldi	r24, 0xA8	; 168
    105a:	92 e0       	ldi	r25, 0x02	; 2
    105c:	ac cf       	rjmp	.-168    	; 0xfb6 <twi_poll>
    105e:	08 95       	ret

00001060 <twi_master_read>:
		default:
			break;
	}					
}
unsigned char twi_master_read(unsigned char request)
{
    1060:	cf 93       	push	r28
    1062:	c8 2f       	mov	r28, r24
			break;
	}
}
unsigned char twi_status(void){
	unsigned char status;
	status = TWI_STATUS_REGISTER & TWI_STATUS_MASK;
    1064:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
	}					
}
unsigned char twi_master_read(unsigned char request)
{
	unsigned char data='X';
	switch(twi_status()){
    1068:	88 7f       	andi	r24, 0xF8	; 248
    106a:	80 34       	cpi	r24, 0x40	; 64
    106c:	19 f0       	breq	.+6      	; 0x1074 <twi_master_read+0x14>
    106e:	80 35       	cpi	r24, 0x50	; 80
    1070:	e1 f0       	breq	.+56     	; 0x10aa <twi_master_read+0x4a>
    1072:	37 c0       	rjmp	.+110    	; 0x10e2 <twi_master_read+0x82>
		case TWI_MASTER_SENT_SLA_R_RECEIVED_ACK:
			switch(request){
    1074:	c1 30       	cpi	r28, 0x01	; 1
    1076:	51 f0       	breq	.+20     	; 0x108c <twi_master_read+0x2c>
    1078:	c2 30       	cpi	r28, 0x02	; 2
    107a:	81 f4       	brne	.+32     	; 0x109c <twi_master_read+0x3c>
				case TWI_DATA_ACK:
					twi_transmit(TWI_DATA_ACK);
    107c:	82 e0       	ldi	r24, 0x02	; 2
    107e:	63 df       	rcall	.-314    	; 0xf46 <twi_transmit>
					twi_poll(680);
    1080:	88 ea       	ldi	r24, 0xA8	; 168
    1082:	92 e0       	ldi	r25, 0x02	; 2
    1084:	98 df       	rcall	.-208    	; 0xfb6 <twi_poll>
					data=TWI_DATA_REGISTER; // 8 bit data + ack = 9bit
    1086:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
					break;
				case TWI_DATA_NO_ACK:
					twi_transmit(TWI_DATA_NO_ACK); // last byte to read
    108a:	13 c0       	rjmp	.+38     	; 0x10b2 <twi_master_read+0x52>
    108c:	81 e0       	ldi	r24, 0x01	; 1
					twi_poll(680);
    108e:	5b df       	rcall	.-330    	; 0xf46 <twi_transmit>
    1090:	88 ea       	ldi	r24, 0xA8	; 168
    1092:	92 e0       	ldi	r25, 0x02	; 2
    1094:	90 df       	rcall	.-224    	; 0xfb6 <twi_poll>
					data=TWI_DATA_REGISTER; // 8 bit data + ack = 9bit
    1096:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
					break;
				default:
					twi_transmit(TWI_DATA_NO_ACK); // last byte to read
    109a:	13 c0       	rjmp	.+38     	; 0x10c2 <twi_master_read+0x62>
    109c:	81 e0       	ldi	r24, 0x01	; 1
					twi_poll(680);
    109e:	53 df       	rcall	.-346    	; 0xf46 <twi_transmit>
    10a0:	88 ea       	ldi	r24, 0xA8	; 168
    10a2:	92 e0       	ldi	r25, 0x02	; 2
    10a4:	88 df       	rcall	.-240    	; 0xfb6 <twi_poll>
					data=TWI_DATA_REGISTER; // 8 bit data + ack = 9bit
    10a6:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
					break;
			}
		case TWI_MASTER_RECEIVED_DATABYTE_SENT_ACK:
			switch(request){
    10aa:	c1 30       	cpi	r28, 0x01	; 1
    10ac:	51 f0       	breq	.+20     	; 0x10c2 <twi_master_read+0x62>
				case TWI_DATA_ACK:
					twi_transmit(TWI_DATA_ACK);
    10ae:	c2 30       	cpi	r28, 0x02	; 2
    10b0:	81 f4       	brne	.+32     	; 0x10d2 <twi_master_read+0x72>
    10b2:	82 e0       	ldi	r24, 0x02	; 2
					twi_poll(680);
    10b4:	48 df       	rcall	.-368    	; 0xf46 <twi_transmit>
    10b6:	88 ea       	ldi	r24, 0xA8	; 168
    10b8:	92 e0       	ldi	r25, 0x02	; 2
					data=TWI_DATA_REGISTER; // 8 bit data + ack = 9bit
    10ba:	7d df       	rcall	.-262    	; 0xfb6 <twi_poll>
    10bc:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
					break;
				case TWI_DATA_NO_ACK:
					twi_transmit(TWI_DATA_NO_ACK); // last byte to read
    10c0:	11 c0       	rjmp	.+34     	; 0x10e4 <twi_master_read+0x84>
    10c2:	81 e0       	ldi	r24, 0x01	; 1
					twi_poll(680);
    10c4:	40 df       	rcall	.-384    	; 0xf46 <twi_transmit>
    10c6:	88 ea       	ldi	r24, 0xA8	; 168
    10c8:	92 e0       	ldi	r25, 0x02	; 2
					data=TWI_DATA_REGISTER; // 8 bit data + ack = 9bit
    10ca:	75 df       	rcall	.-278    	; 0xfb6 <twi_poll>
    10cc:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
					break;
				default:
					twi_transmit(TWI_DATA_NO_ACK); // last byte to read
    10d0:	09 c0       	rjmp	.+18     	; 0x10e4 <twi_master_read+0x84>
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	38 df       	rcall	.-400    	; 0xf46 <twi_transmit>
					twi_poll(680);
    10d6:	88 ea       	ldi	r24, 0xA8	; 168
    10d8:	92 e0       	ldi	r25, 0x02	; 2
    10da:	6d df       	rcall	.-294    	; 0xfb6 <twi_poll>
    10dc:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
					data=TWI_DATA_REGISTER; // 8 bit data + ack = 9bit
    10e0:	01 c0       	rjmp	.+2      	; 0x10e4 <twi_master_read+0x84>
					break;
    10e2:	88 e5       	ldi	r24, 0x58	; 88
			break;
	}					
}
unsigned char twi_master_read(unsigned char request)
{
	unsigned char data='X';
    10e4:	cf 91       	pop	r28
			}
		default:
			break;
	}
	return data;
}
    10e6:	08 95       	ret

000010e8 <uart1_getc>:
    10e8:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <UART1_RxHead>
void uart1_puts_p(const char *progmem_s )
{
    register char c;
    while ( (c = pgm_read_byte(progmem_s++)) ) 
      uart1_putc(c);
}/* uart1_puts_p */
    10ec:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <UART1_RxTail>
    10f0:	98 17       	cp	r25, r24
    10f2:	a1 f0       	breq	.+40     	; 0x111c <__stack+0x1d>
    10f4:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <UART1_RxTail>
    10f8:	8f 5f       	subi	r24, 0xFF	; 255
    10fa:	8f 71       	andi	r24, 0x1F	; 31
    10fc:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <UART1_RxTail>
    1100:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <UART1_RxTail>
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	e4 59       	subi	r30, 0x94	; 148
    1108:	fe 4f       	sbci	r31, 0xFE	; 254
    110a:	20 81       	ld	r18, Z
    110c:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <UART1_LastRxError>
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	98 2f       	mov	r25, r24
    1114:	88 27       	eor	r24, r24
    1116:	82 0f       	add	r24, r18
    1118:	91 1d       	adc	r25, r1
    111a:	08 95       	ret
    111c:	80 e0       	ldi	r24, 0x00	; 0
    111e:	91 e0       	ldi	r25, 0x01	; 1
    1120:	08 95       	ret

00001122 <uart1_available>:
    1122:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <UART1_RxHead>
    1126:	20 91 68 01 	lds	r18, 0x0168	; 0x800168 <UART1_RxTail>
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	4f 96       	adiw	r24, 0x1f	; 31
    112e:	82 1b       	sub	r24, r18
    1130:	91 09       	sbc	r25, r1
    1132:	6f e1       	ldi	r22, 0x1F	; 31
    1134:	70 e0       	ldi	r23, 0x00	; 0
    1136:	0c 94 b1 18 	jmp	0x3162	; 0x3162 <__divmodhi4>
    113a:	08 95       	ret

0000113c <uart1_flush>:
    113c:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <UART1_RxTail>
    1140:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <UART1_RxHead>
    1144:	08 95       	ret

00001146 <__vector_18>:
    1146:	1f 92       	push	r1
    1148:	0f 92       	push	r0
    114a:	0f b6       	in	r0, 0x3f	; 63
    114c:	0f 92       	push	r0
    114e:	11 24       	eor	r1, r1
    1150:	0b b6       	in	r0, 0x3b	; 59
    1152:	0f 92       	push	r0
    1154:	8f 93       	push	r24
    1156:	9f 93       	push	r25
    1158:	ef 93       	push	r30
    115a:	ff 93       	push	r31
    115c:	8b b1       	in	r24, 0x0b	; 11
    115e:	9a b1       	in	r25, 0x0a	; 10
    1160:	88 71       	andi	r24, 0x18	; 24
    1162:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <UART_LastRxError>
    1166:	e0 91 ae 01 	lds	r30, 0x01AE	; 0x8001ae <UART_RxHead>
    116a:	ef 5f       	subi	r30, 0xFF	; 255
    116c:	ef 71       	andi	r30, 0x1F	; 31
    116e:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <UART_RxTail>
    1172:	e8 13       	cpse	r30, r24
    1174:	04 c0       	rjmp	.+8      	; 0x117e <__vector_18+0x38>
    1176:	82 e0       	ldi	r24, 0x02	; 2
    1178:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <UART_LastRxError>
    117c:	11 c0       	rjmp	.+34     	; 0x11a0 <__vector_18+0x5a>
    117e:	9c b1       	in	r25, 0x0c	; 12
    1180:	e0 93 ae 01 	sts	0x01AE, r30	; 0x8001ae <UART_RxHead>
    1184:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <UART_LastRxError>
    1188:	88 23       	and	r24, r24
    118a:	31 f0       	breq	.+12     	; 0x1198 <__vector_18+0x52>
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	ef 54       	subi	r30, 0x4F	; 79
    1190:	fe 4f       	sbci	r31, 0xFE	; 254
    1192:	88 e5       	ldi	r24, 0x58	; 88
    1194:	80 83       	st	Z, r24
    1196:	04 c0       	rjmp	.+8      	; 0x11a0 <__vector_18+0x5a>
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	ef 54       	subi	r30, 0x4F	; 79
    119c:	fe 4f       	sbci	r31, 0xFE	; 254
    119e:	90 83       	st	Z, r25
    11a0:	ff 91       	pop	r31
    11a2:	ef 91       	pop	r30
    11a4:	9f 91       	pop	r25
    11a6:	8f 91       	pop	r24
    11a8:	0f 90       	pop	r0
    11aa:	0b be       	out	0x3b, r0	; 59
    11ac:	0f 90       	pop	r0
    11ae:	0f be       	out	0x3f, r0	; 63
    11b0:	0f 90       	pop	r0
    11b2:	1f 90       	pop	r1
    11b4:	18 95       	reti

000011b6 <__vector_19>:
    11b6:	1f 92       	push	r1
    11b8:	0f 92       	push	r0
    11ba:	0f b6       	in	r0, 0x3f	; 63
    11bc:	0f 92       	push	r0
    11be:	11 24       	eor	r1, r1
    11c0:	0b b6       	in	r0, 0x3b	; 59
    11c2:	0f 92       	push	r0
    11c4:	8f 93       	push	r24
    11c6:	9f 93       	push	r25
    11c8:	ef 93       	push	r30
    11ca:	ff 93       	push	r31
    11cc:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <UART_TxHead>
    11d0:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <UART_TxTail>
    11d4:	98 13       	cpse	r25, r24
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <__vector_19+0x26>
    11d8:	55 98       	cbi	0x0a, 5	; 10
    11da:	0b c0       	rjmp	.+22     	; 0x11f2 <__vector_19+0x3c>
    11dc:	e0 91 af 01 	lds	r30, 0x01AF	; 0x8001af <UART_TxTail>
    11e0:	ef 5f       	subi	r30, 0xFF	; 255
    11e2:	ef 71       	andi	r30, 0x1F	; 31
    11e4:	e0 93 af 01 	sts	0x01AF, r30	; 0x8001af <UART_TxTail>
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	ef 52       	subi	r30, 0x2F	; 47
    11ec:	fe 4f       	sbci	r31, 0xFE	; 254
    11ee:	80 81       	ld	r24, Z
    11f0:	8c b9       	out	0x0c, r24	; 12
    11f2:	ff 91       	pop	r31
    11f4:	ef 91       	pop	r30
    11f6:	9f 91       	pop	r25
    11f8:	8f 91       	pop	r24
    11fa:	0f 90       	pop	r0
    11fc:	0b be       	out	0x3b, r0	; 59
    11fe:	0f 90       	pop	r0
    1200:	0f be       	out	0x3f, r0	; 63
    1202:	0f 90       	pop	r0
    1204:	1f 90       	pop	r1
    1206:	18 95       	reti

00001208 <UART1enable>:
    1208:	ff 92       	push	r15
    120a:	0f 93       	push	r16
    120c:	1f 93       	push	r17
    120e:	cf 93       	push	r28
    1210:	df 93       	push	r29
    1212:	fc 01       	movw	r30, r24
    1214:	ff b6       	in	r15, 0x3f	; 63
    1216:	8f b7       	in	r24, 0x3f	; 63
    1218:	8f 77       	andi	r24, 0x7F	; 127
    121a:	8f bf       	out	0x3f, r24	; 63
    121c:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <UART1_TxHead>
    1220:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <UART1_TxTail>
    1224:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <UART1_RxHead>
    1228:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <UART1_RxTail>
    122c:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <uart1_index+0x1>
    1230:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <uart1_index>
    1234:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <uart1_msg>
    1238:	77 23       	and	r23, r23
    123a:	34 f4       	brge	.+12     	; 0x1248 <UART1enable+0x40>
    123c:	82 e0       	ldi	r24, 0x02	; 2
    123e:	80 93 9b 00 	sts	0x009B, r24	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    1242:	cb 01       	movw	r24, r22
    1244:	9f 77       	andi	r25, 0x7F	; 127
    1246:	01 c0       	rjmp	.+2      	; 0x124a <UART1enable+0x42>
    1248:	cb 01       	movw	r24, r22
    124a:	90 93 98 00 	sts	0x0098, r25	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
    124e:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    1252:	88 e9       	ldi	r24, 0x98	; 152
    1254:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
    1258:	47 30       	cpi	r20, 0x07	; 7
    125a:	51 05       	cpc	r21, r1
    125c:	51 f1       	breq	.+84     	; 0x12b2 <UART1enable+0xaa>
    125e:	40 f4       	brcc	.+16     	; 0x1270 <UART1enable+0x68>
    1260:	45 30       	cpi	r20, 0x05	; 5
    1262:	51 05       	cpc	r21, r1
    1264:	09 f4       	brne	.+2      	; 0x1268 <UART1enable+0x60>
    1266:	45 c0       	rjmp	.+138    	; 0x12f2 <UART1enable+0xea>
    1268:	46 30       	cpi	r20, 0x06	; 6
    126a:	51 05       	cpc	r21, r1
    126c:	91 f1       	breq	.+100    	; 0x12d2 <UART1enable+0xca>
    126e:	4e c0       	rjmp	.+156    	; 0x130c <UART1enable+0x104>
    1270:	48 30       	cpi	r20, 0x08	; 8
    1272:	51 05       	cpc	r21, r1
    1274:	89 f0       	breq	.+34     	; 0x1298 <UART1enable+0x90>
    1276:	49 30       	cpi	r20, 0x09	; 9
    1278:	51 05       	cpc	r21, r1
    127a:	09 f0       	breq	.+2      	; 0x127e <UART1enable+0x76>
    127c:	47 c0       	rjmp	.+142    	; 0x130c <UART1enable+0x104>
    127e:	ca e9       	ldi	r28, 0x9A	; 154
    1280:	d0 e0       	ldi	r29, 0x00	; 0
    1282:	88 81       	ld	r24, Y
    1284:	84 60       	ori	r24, 0x04	; 4
    1286:	88 83       	st	Y, r24
    1288:	cd e9       	ldi	r28, 0x9D	; 157
    128a:	d0 e0       	ldi	r29, 0x00	; 0
    128c:	88 81       	ld	r24, Y
    128e:	86 60       	ori	r24, 0x06	; 6
    1290:	88 83       	st	Y, r24
    1292:	c9 e0       	ldi	r28, 0x09	; 9
    1294:	d0 e0       	ldi	r29, 0x00	; 0
    1296:	46 c0       	rjmp	.+140    	; 0x1324 <UART1enable+0x11c>
    1298:	ca e9       	ldi	r28, 0x9A	; 154
    129a:	d0 e0       	ldi	r29, 0x00	; 0
    129c:	88 81       	ld	r24, Y
    129e:	8b 7f       	andi	r24, 0xFB	; 251
    12a0:	88 83       	st	Y, r24
    12a2:	cd e9       	ldi	r28, 0x9D	; 157
    12a4:	d0 e0       	ldi	r29, 0x00	; 0
    12a6:	88 81       	ld	r24, Y
    12a8:	86 60       	ori	r24, 0x06	; 6
    12aa:	88 83       	st	Y, r24
    12ac:	c8 e0       	ldi	r28, 0x08	; 8
    12ae:	d0 e0       	ldi	r29, 0x00	; 0
    12b0:	39 c0       	rjmp	.+114    	; 0x1324 <UART1enable+0x11c>
    12b2:	ca e9       	ldi	r28, 0x9A	; 154
    12b4:	d0 e0       	ldi	r29, 0x00	; 0
    12b6:	88 81       	ld	r24, Y
    12b8:	8b 7f       	andi	r24, 0xFB	; 251
    12ba:	88 83       	st	Y, r24
    12bc:	cd e9       	ldi	r28, 0x9D	; 157
    12be:	d0 e0       	ldi	r29, 0x00	; 0
    12c0:	88 81       	ld	r24, Y
    12c2:	84 60       	ori	r24, 0x04	; 4
    12c4:	88 83       	st	Y, r24
    12c6:	88 81       	ld	r24, Y
    12c8:	8d 7f       	andi	r24, 0xFD	; 253
    12ca:	88 83       	st	Y, r24
    12cc:	c7 e0       	ldi	r28, 0x07	; 7
    12ce:	d0 e0       	ldi	r29, 0x00	; 0
    12d0:	29 c0       	rjmp	.+82     	; 0x1324 <UART1enable+0x11c>
    12d2:	ca e9       	ldi	r28, 0x9A	; 154
    12d4:	d0 e0       	ldi	r29, 0x00	; 0
    12d6:	88 81       	ld	r24, Y
    12d8:	8b 7f       	andi	r24, 0xFB	; 251
    12da:	88 83       	st	Y, r24
    12dc:	cd e9       	ldi	r28, 0x9D	; 157
    12de:	d0 e0       	ldi	r29, 0x00	; 0
    12e0:	88 81       	ld	r24, Y
    12e2:	8b 7f       	andi	r24, 0xFB	; 251
    12e4:	88 83       	st	Y, r24
    12e6:	88 81       	ld	r24, Y
    12e8:	82 60       	ori	r24, 0x02	; 2
    12ea:	88 83       	st	Y, r24
    12ec:	c6 e0       	ldi	r28, 0x06	; 6
    12ee:	d0 e0       	ldi	r29, 0x00	; 0
    12f0:	19 c0       	rjmp	.+50     	; 0x1324 <UART1enable+0x11c>
    12f2:	ca e9       	ldi	r28, 0x9A	; 154
    12f4:	d0 e0       	ldi	r29, 0x00	; 0
    12f6:	88 81       	ld	r24, Y
    12f8:	8b 7f       	andi	r24, 0xFB	; 251
    12fa:	88 83       	st	Y, r24
    12fc:	cd e9       	ldi	r28, 0x9D	; 157
    12fe:	d0 e0       	ldi	r29, 0x00	; 0
    1300:	88 81       	ld	r24, Y
    1302:	89 7f       	andi	r24, 0xF9	; 249
    1304:	88 83       	st	Y, r24
    1306:	c5 e0       	ldi	r28, 0x05	; 5
    1308:	d0 e0       	ldi	r29, 0x00	; 0
    130a:	0c c0       	rjmp	.+24     	; 0x1324 <UART1enable+0x11c>
    130c:	ca e9       	ldi	r28, 0x9A	; 154
    130e:	d0 e0       	ldi	r29, 0x00	; 0
    1310:	88 81       	ld	r24, Y
    1312:	8b 7f       	andi	r24, 0xFB	; 251
    1314:	88 83       	st	Y, r24
    1316:	cd e9       	ldi	r28, 0x9D	; 157
    1318:	d0 e0       	ldi	r29, 0x00	; 0
    131a:	88 81       	ld	r24, Y
    131c:	86 60       	ori	r24, 0x06	; 6
    131e:	88 83       	st	Y, r24
    1320:	c8 e0       	ldi	r28, 0x08	; 8
    1322:	d0 e0       	ldi	r29, 0x00	; 0
    1324:	21 30       	cpi	r18, 0x01	; 1
    1326:	31 05       	cpc	r19, r1
    1328:	21 f0       	breq	.+8      	; 0x1332 <UART1enable+0x12a>
    132a:	22 30       	cpi	r18, 0x02	; 2
    132c:	31 05       	cpc	r19, r1
    132e:	51 f0       	breq	.+20     	; 0x1344 <UART1enable+0x13c>
    1330:	12 c0       	rjmp	.+36     	; 0x1356 <UART1enable+0x14e>
    1332:	2d e9       	ldi	r18, 0x9D	; 157
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	d9 01       	movw	r26, r18
    1338:	8c 91       	ld	r24, X
    133a:	87 7f       	andi	r24, 0xF7	; 247
    133c:	8c 93       	st	X, r24
    133e:	41 e0       	ldi	r20, 0x01	; 1
    1340:	50 e0       	ldi	r21, 0x00	; 0
    1342:	11 c0       	rjmp	.+34     	; 0x1366 <UART1enable+0x15e>
    1344:	2d e9       	ldi	r18, 0x9D	; 157
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	d9 01       	movw	r26, r18
    134a:	8c 91       	ld	r24, X
    134c:	88 60       	ori	r24, 0x08	; 8
    134e:	8c 93       	st	X, r24
    1350:	42 e0       	ldi	r20, 0x02	; 2
    1352:	50 e0       	ldi	r21, 0x00	; 0
    1354:	08 c0       	rjmp	.+16     	; 0x1366 <UART1enable+0x15e>
    1356:	2d e9       	ldi	r18, 0x9D	; 157
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	d9 01       	movw	r26, r18
    135c:	8c 91       	ld	r24, X
    135e:	87 7f       	andi	r24, 0xF7	; 247
    1360:	8c 93       	st	X, r24
    1362:	41 e0       	ldi	r20, 0x01	; 1
    1364:	50 e0       	ldi	r21, 0x00	; 0
    1366:	02 30       	cpi	r16, 0x02	; 2
    1368:	11 05       	cpc	r17, r1
    136a:	71 f0       	breq	.+28     	; 0x1388 <UART1enable+0x180>
    136c:	03 30       	cpi	r16, 0x03	; 3
    136e:	11 05       	cpc	r17, r1
    1370:	b9 f0       	breq	.+46     	; 0x13a0 <UART1enable+0x198>
    1372:	01 2b       	or	r16, r17
    1374:	f1 f4       	brne	.+60     	; 0x13b2 <UART1enable+0x1aa>
    1376:	2d e9       	ldi	r18, 0x9D	; 157
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	d9 01       	movw	r26, r18
    137c:	8c 91       	ld	r24, X
    137e:	8f 7c       	andi	r24, 0xCF	; 207
    1380:	8c 93       	st	X, r24
    1382:	20 e0       	ldi	r18, 0x00	; 0
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	1d c0       	rjmp	.+58     	; 0x13c2 <UART1enable+0x1ba>
    1388:	8d e9       	ldi	r24, 0x9D	; 157
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	dc 01       	movw	r26, r24
    138e:	2c 91       	ld	r18, X
    1390:	20 62       	ori	r18, 0x20	; 32
    1392:	2c 93       	st	X, r18
    1394:	2c 91       	ld	r18, X
    1396:	2f 7e       	andi	r18, 0xEF	; 239
    1398:	2c 93       	st	X, r18
    139a:	22 e0       	ldi	r18, 0x02	; 2
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	11 c0       	rjmp	.+34     	; 0x13c2 <UART1enable+0x1ba>
    13a0:	2d e9       	ldi	r18, 0x9D	; 157
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	d9 01       	movw	r26, r18
    13a6:	8c 91       	ld	r24, X
    13a8:	80 63       	ori	r24, 0x30	; 48
    13aa:	8c 93       	st	X, r24
    13ac:	23 e0       	ldi	r18, 0x03	; 3
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	08 c0       	rjmp	.+16     	; 0x13c2 <UART1enable+0x1ba>
    13b2:	2d e9       	ldi	r18, 0x9D	; 157
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	d9 01       	movw	r26, r18
    13b8:	8c 91       	ld	r24, X
    13ba:	8f 7c       	andi	r24, 0xCF	; 207
    13bc:	8c 93       	st	X, r24
    13be:	20 e0       	ldi	r18, 0x00	; 0
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	ff be       	out	0x3f, r15	; 63
    13c4:	8f b7       	in	r24, 0x3f	; 63
    13c6:	80 68       	ori	r24, 0x80	; 128
    13c8:	8f bf       	out	0x3f, r24	; 63
    13ca:	71 83       	std	Z+1, r23	; 0x01
    13cc:	60 83       	st	Z, r22
    13ce:	d3 83       	std	Z+3, r29	; 0x03
    13d0:	c2 83       	std	Z+2, r28	; 0x02
    13d2:	55 83       	std	Z+5, r21	; 0x05
    13d4:	44 83       	std	Z+4, r20	; 0x04
    13d6:	37 83       	std	Z+7, r19	; 0x07
    13d8:	26 83       	std	Z+6, r18	; 0x06
    13da:	81 e2       	ldi	r24, 0x21	; 33
    13dc:	9a e0       	ldi	r25, 0x0A	; 10
    13de:	91 87       	std	Z+9, r25	; 0x09
    13e0:	80 87       	std	Z+8, r24	; 0x08
    13e2:	84 e7       	ldi	r24, 0x74	; 116
    13e4:	98 e0       	ldi	r25, 0x08	; 8
    13e6:	93 87       	std	Z+11, r25	; 0x0b
    13e8:	82 87       	std	Z+10, r24	; 0x0a
    13ea:	80 e6       	ldi	r24, 0x60	; 96
    13ec:	9a e0       	ldi	r25, 0x0A	; 10
    13ee:	95 87       	std	Z+13, r25	; 0x0d
    13f0:	84 87       	std	Z+12, r24	; 0x0c
    13f2:	87 e6       	ldi	r24, 0x67	; 103
    13f4:	9a e0       	ldi	r25, 0x0A	; 10
    13f6:	97 87       	std	Z+15, r25	; 0x0f
    13f8:	86 87       	std	Z+14, r24	; 0x0e
    13fa:	81 e9       	ldi	r24, 0x91	; 145
    13fc:	98 e0       	ldi	r25, 0x08	; 8
    13fe:	91 8b       	std	Z+17, r25	; 0x11
    1400:	80 8b       	std	Z+16, r24	; 0x10
    1402:	8e e9       	ldi	r24, 0x9E	; 158
    1404:	98 e0       	ldi	r25, 0x08	; 8
    1406:	93 8b       	std	Z+19, r25	; 0x13
    1408:	82 8b       	std	Z+18, r24	; 0x12
    140a:	cf 01       	movw	r24, r30
    140c:	df 91       	pop	r29
    140e:	cf 91       	pop	r28
    1410:	1f 91       	pop	r17
    1412:	0f 91       	pop	r16
    1414:	ff 90       	pop	r15
    1416:	08 95       	ret

00001418 <UART1_Rx_pop>:
    1418:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <UART1_RxHead>
    141c:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <UART1_RxTail>
    1420:	98 17       	cp	r25, r24
    1422:	69 f0       	breq	.+26     	; 0x143e <UART1_Rx_pop+0x26>
    1424:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <UART1_RxTail>
    1428:	8f 5f       	subi	r24, 0xFF	; 255
    142a:	8f 71       	andi	r24, 0x1F	; 31
    142c:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <UART1_RxTail>
    1430:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <UART1_RxTail>
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	e4 59       	subi	r30, 0x94	; 148
    1438:	fe 4f       	sbci	r31, 0xFE	; 254
    143a:	80 81       	ld	r24, Z
    143c:	08 95       	ret
    143e:	80 e0       	ldi	r24, 0x00	; 0
    1440:	08 95       	ret

00001442 <uart1_read>:
    1442:	cf 93       	push	r28
    1444:	df 93       	push	r29
    1446:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <UART1_RxTail>
    144a:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <UART1_RxHead>
    144e:	98 17       	cp	r25, r24
    1450:	d9 f0       	breq	.+54     	; 0x1488 <uart1_read+0x46>
    1452:	c0 91 17 02 	lds	r28, 0x0217	; 0x800217 <uart1_index>
    1456:	d0 91 18 02 	lds	r29, 0x0218	; 0x800218 <uart1_index+0x1>
    145a:	cf 31       	cpi	r28, 0x1F	; 31
    145c:	d1 05       	cpc	r29, r1
    145e:	a4 f4       	brge	.+40     	; 0x1488 <uart1_read+0x46>
    1460:	db df       	rcall	.-74     	; 0x1418 <UART1_Rx_pop>
    1462:	c7 5e       	subi	r28, 0xE7	; 231
    1464:	dd 4f       	sbci	r29, 0xFD	; 253
    1466:	88 83       	st	Y, r24
    1468:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <uart1_index>
    146c:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <uart1_index+0x1>
    1470:	01 96       	adiw	r24, 0x01	; 1
    1472:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <uart1_index+0x1>
    1476:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <uart1_index>
    147a:	fc 01       	movw	r30, r24
    147c:	e7 5e       	subi	r30, 0xE7	; 231
    147e:	fd 4f       	sbci	r31, 0xFD	; 253
    1480:	10 82       	st	Z, r1
    1482:	80 e2       	ldi	r24, 0x20	; 32
    1484:	91 e0       	ldi	r25, 0x01	; 1
    1486:	06 c0       	rjmp	.+12     	; 0x1494 <uart1_read+0x52>
    1488:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <uart1_index+0x1>
    148c:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <uart1_index>
    1490:	89 e1       	ldi	r24, 0x19	; 25
    1492:	92 e0       	ldi	r25, 0x02	; 2
    1494:	df 91       	pop	r29
    1496:	cf 91       	pop	r28
    1498:	08 95       	ret

0000149a <UART1_Tx_push>:
    149a:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <UART1_TxHead>
    149e:	9f 5f       	subi	r25, 0xFF	; 255
    14a0:	9f 71       	andi	r25, 0x1F	; 31
    14a2:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <UART1_TxHead>
    14a6:	20 91 6b 01 	lds	r18, 0x016B	; 0x80016b <UART1_TxHead>
    14aa:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <UART1_TxTail>
    14ae:	29 17       	cp	r18, r25
    14b0:	d1 f3       	breq	.-12     	; 0x14a6 <UART1_Tx_push+0xc>
    14b2:	e0 91 6b 01 	lds	r30, 0x016B	; 0x80016b <UART1_TxHead>
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	e4 57       	subi	r30, 0x74	; 116
    14ba:	fe 4f       	sbci	r31, 0xFE	; 254
    14bc:	80 83       	st	Z, r24
    14be:	08 95       	ret

000014c0 <uart1_putc>:
    14c0:	ec df       	rcall	.-40     	; 0x149a <UART1_Tx_push>
    14c2:	ea e9       	ldi	r30, 0x9A	; 154
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
    14c8:	80 62       	ori	r24, 0x20	; 32
    14ca:	80 83       	st	Z, r24
    14cc:	08 95       	ret

000014ce <uart1_puts>:
    14ce:	cf 93       	push	r28
    14d0:	df 93       	push	r29
    14d2:	ec 01       	movw	r28, r24
    14d4:	88 81       	ld	r24, Y
    14d6:	88 23       	and	r24, r24
    14d8:	29 f0       	breq	.+10     	; 0x14e4 <uart1_puts+0x16>
    14da:	21 96       	adiw	r28, 0x01	; 1
    14dc:	f1 df       	rcall	.-30     	; 0x14c0 <uart1_putc>
    14de:	89 91       	ld	r24, Y+
    14e0:	81 11       	cpse	r24, r1
    14e2:	fc cf       	rjmp	.-8      	; 0x14dc <uart1_puts+0xe>
    14e4:	df 91       	pop	r29
    14e6:	cf 91       	pop	r28
    14e8:	08 95       	ret

000014ea <__vector_30>:
SIGNAL(UART1_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART1 Receive Complete interrupt
Purpose:  called when the UART1 has received a character
**************************************************************************/
{
    14ea:	1f 92       	push	r1
    14ec:	0f 92       	push	r0
    14ee:	0f b6       	in	r0, 0x3f	; 63
    14f0:	0f 92       	push	r0
    14f2:	11 24       	eor	r1, r1
    14f4:	0b b6       	in	r0, 0x3b	; 59
    14f6:	0f 92       	push	r0
    14f8:	8f 93       	push	r24
    14fa:	9f 93       	push	r25
    14fc:	ef 93       	push	r30
    14fe:	ff 93       	push	r31
    unsigned char tmphead;
	unsigned char data;
	unsigned char bit9;
    unsigned char usr;
    /* read UART status register and UART data register */
	usr  = UART1_STATUS;
    1500:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    bit9 = UART1_CONTROL;
    1504:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
    bit9 = 0x01 & (bit9>>1);
    /* */
    UART1_LastRxError = (usr & (_BV(FE1)|_BV(DOR1)));
    1508:	88 71       	andi	r24, 0x18	; 24
    150a:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <UART1_LastRxError>
	/* calculate buffer index */ 
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
    150e:	e0 91 69 01 	lds	r30, 0x0169	; 0x800169 <UART1_RxHead>
    1512:	ef 5f       	subi	r30, 0xFF	; 255
    1514:	ef 71       	andi	r30, 0x1F	; 31
    if ( tmphead == UART1_RxTail ) {	
    1516:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <UART1_RxTail>
    151a:	e8 13       	cpse	r30, r24
    151c:	04 c0       	rjmp	.+8      	; 0x1526 <__vector_30+0x3c>
        /* error: receive buffer overflow, caracter is lost*/
        UART1_LastRxError = UART_BUFFER_OVERFLOW >> 8; 
    151e:	82 e0       	ldi	r24, 0x02	; 2
    1520:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <UART1_LastRxError>
    1524:	12 c0       	rjmp	.+36     	; 0x154a <__vector_30+0x60>
	}else{
		data = UART1_DATA;
    1526:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
        /* store new index */
        UART1_RxHead = tmphead;
    152a:	e0 93 69 01 	sts	0x0169, r30	; 0x800169 <UART1_RxHead>
		if(UART1_LastRxError){
    152e:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <UART1_LastRxError>
    1532:	88 23       	and	r24, r24
    1534:	31 f0       	breq	.+12     	; 0x1542 <__vector_30+0x58>
			/* store indication data error in buffer */
			UART1_RxBuf[tmphead] = 'X';
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	e4 59       	subi	r30, 0x94	; 148
    153a:	fe 4f       	sbci	r31, 0xFE	; 254
    153c:	88 e5       	ldi	r24, 0x58	; 88
    153e:	80 83       	st	Z, r24
    1540:	04 c0       	rjmp	.+8      	; 0x154a <__vector_30+0x60>
		}else{
			/* store received data in buffer */
			UART1_RxBuf[tmphead] = data;
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	e4 59       	subi	r30, 0x94	; 148
    1546:	fe 4f       	sbci	r31, 0xFE	; 254
    1548:	90 83       	st	Z, r25
		}
    }
}
    154a:	ff 91       	pop	r31
    154c:	ef 91       	pop	r30
    154e:	9f 91       	pop	r25
    1550:	8f 91       	pop	r24
    1552:	0f 90       	pop	r0
    1554:	0b be       	out	0x3b, r0	; 59
    1556:	0f 90       	pop	r0
    1558:	0f be       	out	0x3f, r0	; 63
    155a:	0f 90       	pop	r0
    155c:	1f 90       	pop	r1
    155e:	18 95       	reti

00001560 <__vector_31>:
SIGNAL(UART1_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART1 Data Register Empty interrupt
Purpose:  called when the UART1 is ready to transmit the next byte
**************************************************************************/
{
    1560:	1f 92       	push	r1
    1562:	0f 92       	push	r0
    1564:	0f b6       	in	r0, 0x3f	; 63
    1566:	0f 92       	push	r0
    1568:	11 24       	eor	r1, r1
    156a:	0b b6       	in	r0, 0x3b	; 59
    156c:	0f 92       	push	r0
    156e:	8f 93       	push	r24
    1570:	9f 93       	push	r25
    1572:	ef 93       	push	r30
    1574:	ff 93       	push	r31
    if ( UART1_TxHead == UART1_TxTail ) {
    1576:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <UART1_TxHead>
    157a:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <UART1_TxTail>
    157e:	98 13       	cpse	r25, r24
    1580:	06 c0       	rjmp	.+12     	; 0x158e <__vector_31+0x2e>
        /* tx buffer empty, disable UDRE interrupt */
        UART1_CONTROL &= ~_BV(UART1_UDRIE);
    1582:	ea e9       	ldi	r30, 0x9A	; 154
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	8f 7d       	andi	r24, 0xDF	; 223
    158a:	80 83       	st	Z, r24
    158c:	0e c0       	rjmp	.+28     	; 0x15aa <__vector_31+0x4a>
    }else{
		/* calculate and store new buffer index */
        UART1_TxTail = (UART1_TxTail + 1) & UART_TX_BUFFER_MASK;
    158e:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <UART1_TxTail>
    1592:	8f 5f       	subi	r24, 0xFF	; 255
    1594:	8f 71       	andi	r24, 0x1F	; 31
    1596:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <UART1_TxTail>
        /* get one byte from buffer and write it to UART */
		UART1_DATA = UART1_TxBuf[UART1_TxTail];  /* start transmission */
    159a:	e0 91 6a 01 	lds	r30, 0x016A	; 0x80016a <UART1_TxTail>
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	e4 57       	subi	r30, 0x74	; 116
    15a2:	fe 4f       	sbci	r31, 0xFE	; 254
    15a4:	80 81       	ld	r24, Z
    15a6:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
	}	
}
    15aa:	ff 91       	pop	r31
    15ac:	ef 91       	pop	r30
    15ae:	9f 91       	pop	r25
    15b0:	8f 91       	pop	r24
    15b2:	0f 90       	pop	r0
    15b4:	0b be       	out	0x3b, r0	; 59
    15b6:	0f 90       	pop	r0
    15b8:	0f be       	out	0x3f, r0	; 63
    15ba:	0f 90       	pop	r0
    15bc:	1f 90       	pop	r1
    15be:	18 95       	reti

000015c0 <CLOCK_set>:
	clock.show=CLOCK_show;
	return clock;
}
void CLOCK_set(uint8_t hour, uint8_t minute, uint8_t second)
{
	time.hour=hour;
    15c0:	e8 e4       	ldi	r30, 0x48	; 72
    15c2:	f2 e0       	ldi	r31, 0x02	; 2
    15c4:	80 83       	st	Z, r24
	time.minute=minute;
    15c6:	61 83       	std	Z+1, r22	; 0x01
	time.second=second;
    15c8:	42 83       	std	Z+2, r20	; 0x02
    15ca:	08 95       	ret

000015cc <CLOCK_increment>:
}
void CLOCK_increment(void)
{
	time.second++;
    15cc:	e8 e4       	ldi	r30, 0x48	; 72
    15ce:	f2 e0       	ldi	r31, 0x02	; 2
    15d0:	82 81       	ldd	r24, Z+2	; 0x02
    15d2:	8f 5f       	subi	r24, 0xFF	; 255
    15d4:	82 83       	std	Z+2, r24	; 0x02
	if(time.second>59){
    15d6:	8c 33       	cpi	r24, 0x3C	; 60
    15d8:	0c f4       	brge	.+2      	; 0x15dc <CLOCK_increment+0x10>
    15da:	7a c0       	rjmp	.+244    	; 0x16d0 <CLOCK_increment+0x104>
		time.minute++;
    15dc:	81 81       	ldd	r24, Z+1	; 0x01
    15de:	8f 5f       	subi	r24, 0xFF	; 255
    15e0:	81 83       	std	Z+1, r24	; 0x01
		time.second=0;
    15e2:	12 82       	std	Z+2, r1	; 0x02
		if(time.minute>59){
    15e4:	8c 33       	cpi	r24, 0x3C	; 60
    15e6:	44 f0       	brlt	.+16     	; 0x15f8 <CLOCK_increment+0x2c>
			time.hour++;
    15e8:	80 81       	ld	r24, Z
    15ea:	8f 5f       	subi	r24, 0xFF	; 255
    15ec:	80 83       	st	Z, r24
			time.minute=0;
    15ee:	11 82       	std	Z+1, r1	; 0x01
			switch (HORA){
				case 24:
					if(time.hour>23)
    15f0:	88 31       	cpi	r24, 0x18	; 24
    15f2:	14 f0       	brlt	.+4      	; 0x15f8 <CLOCK_increment+0x2c>
						time.hour=0;
    15f4:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <time>
					break;
			}
		}
	}
	/******************************************************************************************************************/
	if(time.hour==laptime.hour && CLOCK_compare_active==4)
    15f8:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <time>
    15fc:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <laptime>
    1600:	89 13       	cpse	r24, r25
    1602:	2a c0       	rjmp	.+84     	; 0x1658 <CLOCK_increment+0x8c>
    1604:	90 91 4e 02 	lds	r25, 0x024E	; 0x80024e <CLOCK_compare_active>
    1608:	94 30       	cpi	r25, 0x04	; 4
    160a:	09 f0       	breq	.+2      	; 0x160e <CLOCK_increment+0x42>
    160c:	53 c0       	rjmp	.+166    	; 0x16b4 <CLOCK_increment+0xe8>
		CLOCK_compare_active=3;
    160e:	93 e0       	ldi	r25, 0x03	; 3
    1610:	90 93 4e 02 	sts	0x024E, r25	; 0x80024e <CLOCK_compare_active>
	if(time.hour==laptime.hour && time.minute==laptime.minute && CLOCK_compare_active==3)
    1614:	20 91 4c 02 	lds	r18, 0x024C	; 0x80024c <laptime+0x1>
    1618:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <time+0x1>
    161c:	29 13       	cpse	r18, r25
    161e:	09 c0       	rjmp	.+18     	; 0x1632 <CLOCK_increment+0x66>
    1620:	04 c0       	rjmp	.+8      	; 0x162a <CLOCK_increment+0x5e>
    1622:	90 91 4e 02 	lds	r25, 0x024E	; 0x80024e <CLOCK_compare_active>
    1626:	93 30       	cpi	r25, 0x03	; 3
    1628:	51 f4       	brne	.+20     	; 0x163e <CLOCK_increment+0x72>
		CLOCK_compare_active=2;
    162a:	92 e0       	ldi	r25, 0x02	; 2
    162c:	90 93 4e 02 	sts	0x024E, r25	; 0x80024e <CLOCK_compare_active>
    1630:	06 c0       	rjmp	.+12     	; 0x163e <CLOCK_increment+0x72>
	if(time.hour==laptime.hour && time.minute==laptime.minute && time.second==laptime.second && CLOCK_compare_active==2)
    1632:	20 91 49 02 	lds	r18, 0x0249	; 0x800249 <time+0x1>
    1636:	90 91 4c 02 	lds	r25, 0x024C	; 0x80024c <laptime+0x1>
    163a:	29 13       	cpse	r18, r25
    163c:	0d c0       	rjmp	.+26     	; 0x1658 <CLOCK_increment+0x8c>
    163e:	20 91 4a 02 	lds	r18, 0x024A	; 0x80024a <time+0x2>
    1642:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <laptime+0x2>
    1646:	29 13       	cpse	r18, r25
    1648:	07 c0       	rjmp	.+14     	; 0x1658 <CLOCK_increment+0x8c>
    164a:	90 91 4e 02 	lds	r25, 0x024E	; 0x80024e <CLOCK_compare_active>
    164e:	92 30       	cpi	r25, 0x02	; 2
    1650:	19 f4       	brne	.+6      	; 0x1658 <CLOCK_increment+0x8c>
		CLOCK_compare_active=1;
    1652:	91 e0       	ldi	r25, 0x01	; 1
    1654:	90 93 4e 02 	sts	0x024E, r25	; 0x80024e <CLOCK_compare_active>
	/******************************************************************************************************************/
	if(time.hour==alarmtime.hour && CLOCK_alarm_flag==4)
    1658:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <alarmtime>
    165c:	98 13       	cpse	r25, r24
    165e:	3f c0       	rjmp	.+126    	; 0x16de <CLOCK_increment+0x112>
    1660:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <CLOCK_alarm_flag>
    1664:	84 30       	cpi	r24, 0x04	; 4
    1666:	69 f5       	brne	.+90     	; 0x16c2 <CLOCK_increment+0xf6>
		CLOCK_alarm_flag=3;
    1668:	83 e0       	ldi	r24, 0x03	; 3
    166a:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <CLOCK_alarm_flag>
	if(time.hour==alarmtime.hour && time.minute==alarmtime.minute && CLOCK_alarm_flag==3)
    166e:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <time+0x1>
    1672:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <alarmtime+0x1>
    1676:	98 13       	cpse	r25, r24
    1678:	09 c0       	rjmp	.+18     	; 0x168c <CLOCK_increment+0xc0>
    167a:	04 c0       	rjmp	.+8      	; 0x1684 <CLOCK_increment+0xb8>
    167c:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <CLOCK_alarm_flag>
    1680:	83 30       	cpi	r24, 0x03	; 3
    1682:	51 f4       	brne	.+20     	; 0x1698 <CLOCK_increment+0xcc>
		CLOCK_alarm_flag=2;
    1684:	82 e0       	ldi	r24, 0x02	; 2
    1686:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <CLOCK_alarm_flag>
    168a:	06 c0       	rjmp	.+12     	; 0x1698 <CLOCK_increment+0xcc>
	if(time.hour==alarmtime.hour && time.minute==alarmtime.minute && time.second==alarmtime.second && CLOCK_alarm_flag==2)
    168c:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <time+0x1>
    1690:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <alarmtime+0x1>
    1694:	98 13       	cpse	r25, r24
    1696:	23 c0       	rjmp	.+70     	; 0x16de <CLOCK_increment+0x112>
    1698:	90 91 4a 02 	lds	r25, 0x024A	; 0x80024a <time+0x2>
    169c:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <alarmtime+0x2>
    16a0:	98 13       	cpse	r25, r24
    16a2:	1d c0       	rjmp	.+58     	; 0x16de <CLOCK_increment+0x112>
    16a4:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <CLOCK_alarm_flag>
    16a8:	82 30       	cpi	r24, 0x02	; 2
    16aa:	c9 f4       	brne	.+50     	; 0x16de <CLOCK_increment+0x112>
		CLOCK_alarm_flag=1;
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <CLOCK_alarm_flag>
}
    16b2:	08 95       	ret
		}
	}
	/******************************************************************************************************************/
	if(time.hour==laptime.hour && CLOCK_compare_active==4)
		CLOCK_compare_active=3;
	if(time.hour==laptime.hour && time.minute==laptime.minute && CLOCK_compare_active==3)
    16b4:	20 91 49 02 	lds	r18, 0x0249	; 0x800249 <time+0x1>
    16b8:	90 91 4c 02 	lds	r25, 0x024C	; 0x80024c <laptime+0x1>
    16bc:	29 13       	cpse	r18, r25
    16be:	cc cf       	rjmp	.-104    	; 0x1658 <CLOCK_increment+0x8c>
    16c0:	b0 cf       	rjmp	.-160    	; 0x1622 <CLOCK_increment+0x56>
	if(time.hour==laptime.hour && time.minute==laptime.minute && time.second==laptime.second && CLOCK_compare_active==2)
		CLOCK_compare_active=1;
	/******************************************************************************************************************/
	if(time.hour==alarmtime.hour && CLOCK_alarm_flag==4)
		CLOCK_alarm_flag=3;
	if(time.hour==alarmtime.hour && time.minute==alarmtime.minute && CLOCK_alarm_flag==3)
    16c2:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <time+0x1>
    16c6:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <alarmtime+0x1>
    16ca:	98 13       	cpse	r25, r24
    16cc:	08 c0       	rjmp	.+16     	; 0x16de <CLOCK_increment+0x112>
    16ce:	d6 cf       	rjmp	.-84     	; 0x167c <CLOCK_increment+0xb0>
					break;
			}
		}
	}
	/******************************************************************************************************************/
	if(time.hour==laptime.hour && CLOCK_compare_active==4)
    16d0:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <time>
    16d4:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <laptime>
    16d8:	98 13       	cpse	r25, r24
    16da:	be cf       	rjmp	.-132    	; 0x1658 <CLOCK_increment+0x8c>
    16dc:	93 cf       	rjmp	.-218    	; 0x1604 <CLOCK_increment+0x38>
    16de:	08 95       	ret

000016e0 <CLOCK_decrement>:
	if(time.hour==alarmtime.hour && time.minute==alarmtime.minute && time.second==alarmtime.second && CLOCK_alarm_flag==2)
		CLOCK_alarm_flag=1;
}
void CLOCK_decrement(void)
{
	time.second--;
    16e0:	e8 e4       	ldi	r30, 0x48	; 72
    16e2:	f2 e0       	ldi	r31, 0x02	; 2
    16e4:	82 81       	ldd	r24, Z+2	; 0x02
    16e6:	81 50       	subi	r24, 0x01	; 1
    16e8:	82 83       	std	Z+2, r24	; 0x02
	if(time.second<0){
    16ea:	88 23       	and	r24, r24
    16ec:	0c f0       	brlt	.+2      	; 0x16f0 <CLOCK_decrement+0x10>
    16ee:	47 c0       	rjmp	.+142    	; 0x177e <CLOCK_decrement+0x9e>
		time.minute--;
    16f0:	81 81       	ldd	r24, Z+1	; 0x01
    16f2:	81 50       	subi	r24, 0x01	; 1
    16f4:	81 83       	std	Z+1, r24	; 0x01
		time.second=59;
    16f6:	9b e3       	ldi	r25, 0x3B	; 59
    16f8:	92 83       	std	Z+2, r25	; 0x02
		if(time.minute<0){
    16fa:	88 23       	and	r24, r24
    16fc:	4c f4       	brge	.+18     	; 0x1710 <CLOCK_decrement+0x30>
			time.hour--;
    16fe:	80 81       	ld	r24, Z
    1700:	81 50       	subi	r24, 0x01	; 1
    1702:	80 83       	st	Z, r24
			time.minute=59;
    1704:	91 83       	std	Z+1, r25	; 0x01
			switch (HORA){
				case 24:
					if(time.hour<0)
    1706:	88 23       	and	r24, r24
    1708:	1c f4       	brge	.+6      	; 0x1710 <CLOCK_decrement+0x30>
						time.hour=23;
    170a:	87 e1       	ldi	r24, 0x17	; 23
    170c:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <time>
					break;
			}
		}
	}
	/******************************************************************************************************************/
	if(time.hour==alarmtime.hour && CLOCK_alarm_flag==4)
    1710:	90 91 48 02 	lds	r25, 0x0248	; 0x800248 <time>
    1714:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <alarmtime>
    1718:	98 13       	cpse	r25, r24
    171a:	37 c0       	rjmp	.+110    	; 0x178a <CLOCK_decrement+0xaa>
    171c:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <CLOCK_alarm_flag>
    1720:	84 30       	cpi	r24, 0x04	; 4
    1722:	31 f5       	brne	.+76     	; 0x1770 <CLOCK_decrement+0x90>
		CLOCK_alarm_flag=3;
    1724:	83 e0       	ldi	r24, 0x03	; 3
    1726:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <CLOCK_alarm_flag>
	if(time.hour==alarmtime.hour && time.minute==alarmtime.minute && CLOCK_alarm_flag==3)
    172a:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <time+0x1>
    172e:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <alarmtime+0x1>
    1732:	98 13       	cpse	r25, r24
    1734:	09 c0       	rjmp	.+18     	; 0x1748 <CLOCK_decrement+0x68>
    1736:	04 c0       	rjmp	.+8      	; 0x1740 <CLOCK_decrement+0x60>
    1738:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <CLOCK_alarm_flag>
    173c:	83 30       	cpi	r24, 0x03	; 3
    173e:	51 f4       	brne	.+20     	; 0x1754 <CLOCK_decrement+0x74>
		CLOCK_alarm_flag=2;
    1740:	82 e0       	ldi	r24, 0x02	; 2
    1742:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <CLOCK_alarm_flag>
    1746:	06 c0       	rjmp	.+12     	; 0x1754 <CLOCK_decrement+0x74>
	if(time.hour==alarmtime.hour && time.minute==alarmtime.minute && time.second==alarmtime.second && CLOCK_alarm_flag==2)
    1748:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <time+0x1>
    174c:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <alarmtime+0x1>
    1750:	98 13       	cpse	r25, r24
    1752:	1b c0       	rjmp	.+54     	; 0x178a <CLOCK_decrement+0xaa>
    1754:	90 91 4a 02 	lds	r25, 0x024A	; 0x80024a <time+0x2>
    1758:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <alarmtime+0x2>
    175c:	98 13       	cpse	r25, r24
    175e:	15 c0       	rjmp	.+42     	; 0x178a <CLOCK_decrement+0xaa>
    1760:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <CLOCK_alarm_flag>
    1764:	82 30       	cpi	r24, 0x02	; 2
    1766:	89 f4       	brne	.+34     	; 0x178a <CLOCK_decrement+0xaa>
		CLOCK_alarm_flag=1;		
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <CLOCK_alarm_flag>
}
    176e:	08 95       	ret
		}
	}
	/******************************************************************************************************************/
	if(time.hour==alarmtime.hour && CLOCK_alarm_flag==4)
		CLOCK_alarm_flag=3;
	if(time.hour==alarmtime.hour && time.minute==alarmtime.minute && CLOCK_alarm_flag==3)
    1770:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <time+0x1>
    1774:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <alarmtime+0x1>
    1778:	98 13       	cpse	r25, r24
    177a:	07 c0       	rjmp	.+14     	; 0x178a <CLOCK_decrement+0xaa>
    177c:	dd cf       	rjmp	.-70     	; 0x1738 <CLOCK_decrement+0x58>
					break;
			}
		}
	}
	/******************************************************************************************************************/
	if(time.hour==alarmtime.hour && CLOCK_alarm_flag==4)
    177e:	90 91 48 02 	lds	r25, 0x0248	; 0x800248 <time>
    1782:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <alarmtime>
    1786:	98 17       	cp	r25, r24
    1788:	49 f2       	breq	.-110    	; 0x171c <CLOCK_decrement+0x3c>
    178a:	08 95       	ret

0000178c <CLOCK_alarm>:
	if(time.hour==alarmtime.hour && time.minute==alarmtime.minute && time.second==alarmtime.second && CLOCK_alarm_flag==2)
		CLOCK_alarm_flag=1;		
}
uint8_t CLOCK_alarm(uint8_t hour, uint8_t minute, uint8_t second)
{
	if(!CLOCK_alarm_flag){
    178c:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <CLOCK_alarm_flag>
    1790:	91 11       	cpse	r25, r1
    1792:	08 c0       	rjmp	.+16     	; 0x17a4 <CLOCK_alarm+0x18>
		alarmtime.hour=hour;
    1794:	e5 e4       	ldi	r30, 0x45	; 69
    1796:	f2 e0       	ldi	r31, 0x02	; 2
    1798:	80 83       	st	Z, r24
		alarmtime.minute=minute;
    179a:	61 83       	std	Z+1, r22	; 0x01
		alarmtime.second=second;
    179c:	42 83       	std	Z+2, r20	; 0x02
		CLOCK_alarm_flag=4;
    179e:	84 e0       	ldi	r24, 0x04	; 4
    17a0:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <CLOCK_alarm_flag>
	}	
	return CLOCK_alarm_flag;
}
    17a4:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <CLOCK_alarm_flag>
    17a8:	08 95       	ret

000017aa <CLOCK_second_count>:
uint8_t CLOCK_second_count(uint16_t second)
{
    17aa:	cf 92       	push	r12
    17ac:	df 92       	push	r13
    17ae:	ef 92       	push	r14
    17b0:	ff 92       	push	r15
    17b2:	0f 93       	push	r16
    17b4:	1f 93       	push	r17
    17b6:	cf 93       	push	r28
    17b8:	df 93       	push	r29
    17ba:	fc 01       	movw	r30, r24
	uint16_t tmp;
	uint8_t tmp_1;
	uint8_t tmp_2;
	uint8_t tmp_3;
	if(!CLOCK_compare_active){
    17bc:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <CLOCK_compare_active>
    17c0:	81 11       	cpse	r24, r1
    17c2:	65 c0       	rjmp	.+202    	; 0x188e <CLOCK_second_count+0xe4>
		tmp_3=(int8_t)(second % 60);
		tmp=second/60;
		tmp_2=(int8_t)(tmp % 60);
		tmp=tmp/60;
		tmp_1=(int8_t)tmp;
		laptime.second=(time.second + tmp_3) % 60;
    17c4:	9f 01       	movw	r18, r30
    17c6:	a9 e8       	ldi	r26, 0x89	; 137
    17c8:	b8 e8       	ldi	r27, 0x88	; 136
    17ca:	0e 94 0b 19 	call	0x3216	; 0x3216 <__umulhisi3>
    17ce:	6c 01       	movw	r12, r24
    17d0:	d6 94       	lsr	r13
    17d2:	c7 94       	ror	r12
    17d4:	d6 94       	lsr	r13
    17d6:	c7 94       	ror	r12
    17d8:	d6 94       	lsr	r13
    17da:	c7 94       	ror	r12
    17dc:	d6 94       	lsr	r13
    17de:	c7 94       	ror	r12
    17e0:	d6 94       	lsr	r13
    17e2:	c7 94       	ror	r12
    17e4:	4c e3       	ldi	r20, 0x3C	; 60
    17e6:	4c 9d       	mul	r20, r12
    17e8:	c0 01       	movw	r24, r0
    17ea:	4d 9d       	mul	r20, r13
    17ec:	90 0d       	add	r25, r0
    17ee:	11 24       	eor	r1, r1
    17f0:	28 1b       	sub	r18, r24
    17f2:	39 0b       	sbc	r19, r25
    17f4:	c8 e4       	ldi	r28, 0x48	; 72
    17f6:	d2 e0       	ldi	r29, 0x02	; 2
    17f8:	8a 81       	ldd	r24, Y+2	; 0x02
    17fa:	08 2e       	mov	r0, r24
    17fc:	00 0c       	add	r0, r0
    17fe:	99 0b       	sbc	r25, r25
    1800:	82 0f       	add	r24, r18
    1802:	91 1d       	adc	r25, r1
    1804:	0b e4       	ldi	r16, 0x4B	; 75
    1806:	12 e0       	ldi	r17, 0x02	; 2
    1808:	0f 2e       	mov	r0, r31
    180a:	fc e3       	ldi	r31, 0x3C	; 60
    180c:	ef 2e       	mov	r14, r31
    180e:	f1 2c       	mov	r15, r1
    1810:	f0 2d       	mov	r31, r0
    1812:	b7 01       	movw	r22, r14
    1814:	0e 94 b1 18 	call	0x3162	; 0x3162 <__divmodhi4>
    1818:	56 2f       	mov	r21, r22
    181a:	d8 01       	movw	r26, r16
    181c:	12 96       	adiw	r26, 0x02	; 2
    181e:	8c 93       	st	X, r24
		tmp_3=(time.second + tmp_3)/60;
		laptime.minute=(time.minute + tmp_2 + tmp_3) % 60;
    1820:	96 01       	movw	r18, r12
    1822:	a9 e8       	ldi	r26, 0x89	; 137
    1824:	b8 e8       	ldi	r27, 0x88	; 136
    1826:	0e 94 0b 19 	call	0x3216	; 0x3216 <__umulhisi3>
    182a:	96 95       	lsr	r25
    182c:	87 95       	ror	r24
    182e:	92 95       	swap	r25
    1830:	82 95       	swap	r24
    1832:	8f 70       	andi	r24, 0x0F	; 15
    1834:	89 27       	eor	r24, r25
    1836:	9f 70       	andi	r25, 0x0F	; 15
    1838:	89 27       	eor	r24, r25
    183a:	48 9f       	mul	r20, r24
    183c:	90 01       	movw	r18, r0
    183e:	49 9f       	mul	r20, r25
    1840:	30 0d       	add	r19, r0
    1842:	11 24       	eor	r1, r1
    1844:	c2 1a       	sub	r12, r18
    1846:	d3 0a       	sbc	r13, r19
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	08 2e       	mov	r0, r24
    184c:	00 0c       	add	r0, r0
    184e:	99 0b       	sbc	r25, r25
    1850:	8c 0d       	add	r24, r12
    1852:	91 1d       	adc	r25, r1
    1854:	85 0f       	add	r24, r21
    1856:	91 1d       	adc	r25, r1
    1858:	b7 01       	movw	r22, r14
    185a:	0e 94 b1 18 	call	0x3162	; 0x3162 <__divmodhi4>
    185e:	26 2f       	mov	r18, r22
    1860:	d8 01       	movw	r26, r16
    1862:	11 96       	adiw	r26, 0x01	; 1
    1864:	8c 93       	st	X, r24
		tmp_2=(time.minute + tmp_2 + tmp_3)/60;
		tmp_1=time.hour+ tmp_1 + tmp_2;
    1866:	cf 01       	movw	r24, r30
    1868:	60 e1       	ldi	r22, 0x10	; 16
    186a:	7e e0       	ldi	r23, 0x0E	; 14
    186c:	0e 94 9d 18 	call	0x313a	; 0x313a <__udivmodhi4>
    1870:	88 81       	ld	r24, Y
    1872:	68 0f       	add	r22, r24
    1874:	62 0f       	add	r22, r18
		if(tmp_1 > HORA)
    1876:	69 31       	cpi	r22, 0x19	; 25
    1878:	28 f0       	brcs	.+10     	; 0x1884 <CLOCK_second_count+0xda>
			laptime.hour=HORA-tmp_1;
    187a:	88 e1       	ldi	r24, 0x18	; 24
    187c:	86 1b       	sub	r24, r22
    187e:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <laptime>
    1882:	02 c0       	rjmp	.+4      	; 0x1888 <CLOCK_second_count+0xde>
		else
			laptime.hour=tmp_1;
    1884:	60 93 4b 02 	sts	0x024B, r22	; 0x80024b <laptime>
		CLOCK_compare_active=4;
    1888:	84 e0       	ldi	r24, 0x04	; 4
    188a:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <CLOCK_compare_active>
	}
	return CLOCK_compare_active;
}
    188e:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <CLOCK_compare_active>
    1892:	df 91       	pop	r29
    1894:	cf 91       	pop	r28
    1896:	1f 91       	pop	r17
    1898:	0f 91       	pop	r16
    189a:	ff 90       	pop	r15
    189c:	ef 90       	pop	r14
    189e:	df 90       	pop	r13
    18a0:	cf 90       	pop	r12
    18a2:	08 95       	ret

000018a4 <CLOCK_alarm_reset>:
void CLOCK_alarm_reset(void)
{
	CLOCK_alarm_flag=0;
    18a4:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <CLOCK_alarm_flag>
    18a8:	08 95       	ret

000018aa <CLOCK_alarm_stop>:
}
void CLOCK_alarm_stop(void)
{
	CLOCK_alarm_flag=0X0F;
    18aa:	8f e0       	ldi	r24, 0x0F	; 15
    18ac:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <CLOCK_alarm_flag>
    18b0:	08 95       	ret

000018b2 <CLOCK_second_count_reset>:
}
void CLOCK_second_count_reset(void)
{
	CLOCK_compare_active=0;
    18b2:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <CLOCK_compare_active>
    18b6:	08 95       	ret

000018b8 <CLOCK_second_count_stop>:
}
void CLOCK_second_count_stop(void)
{
	CLOCK_compare_active=0X0F;
    18b8:	8f e0       	ldi	r24, 0x0F	; 15
    18ba:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <CLOCK_compare_active>
    18be:	08 95       	ret

000018c0 <CLOCK_show>:
}
char* CLOCK_show(void)
{
	uint8_t tmp;
	CLOCK_timp[8]='\0';
    18c0:	eb e3       	ldi	r30, 0x3B	; 59
    18c2:	f2 e0       	ldi	r31, 0x02	; 2
    18c4:	10 86       	std	Z+8, r1	; 0x08
	CLOCK_timp[7]=time.second % 10 + '0';
    18c6:	a8 e4       	ldi	r26, 0x48	; 72
    18c8:	b2 e0       	ldi	r27, 0x02	; 2
    18ca:	12 96       	adiw	r26, 0x02	; 2
    18cc:	2c 91       	ld	r18, X
    18ce:	12 97       	sbiw	r26, 0x02	; 2
    18d0:	87 e6       	ldi	r24, 0x67	; 103
    18d2:	28 02       	muls	r18, r24
    18d4:	91 2d       	mov	r25, r1
    18d6:	11 24       	eor	r1, r1
    18d8:	95 95       	asr	r25
    18da:	95 95       	asr	r25
    18dc:	27 fd       	sbrc	r18, 7
    18de:	93 95       	inc	r25
    18e0:	49 2f       	mov	r20, r25
    18e2:	44 0f       	add	r20, r20
    18e4:	34 2f       	mov	r19, r20
    18e6:	33 0f       	add	r19, r19
    18e8:	33 0f       	add	r19, r19
    18ea:	34 0f       	add	r19, r20
    18ec:	23 1b       	sub	r18, r19
    18ee:	20 5d       	subi	r18, 0xD0	; 208
    18f0:	27 83       	std	Z+7, r18	; 0x07
	tmp = time.second / 10;
	CLOCK_timp[6]=tmp % 10 + '0';
    18f2:	2d ec       	ldi	r18, 0xCD	; 205
    18f4:	92 9f       	mul	r25, r18
    18f6:	31 2d       	mov	r19, r1
    18f8:	11 24       	eor	r1, r1
    18fa:	36 95       	lsr	r19
    18fc:	36 95       	lsr	r19
    18fe:	36 95       	lsr	r19
    1900:	33 0f       	add	r19, r19
    1902:	43 2f       	mov	r20, r19
    1904:	44 0f       	add	r20, r20
    1906:	44 0f       	add	r20, r20
    1908:	34 0f       	add	r19, r20
    190a:	93 1b       	sub	r25, r19
    190c:	90 5d       	subi	r25, 0xD0	; 208
    190e:	96 83       	std	Z+6, r25	; 0x06
	CLOCK_timp[5]=':';
    1910:	5a e3       	ldi	r21, 0x3A	; 58
    1912:	55 83       	std	Z+5, r21	; 0x05
	CLOCK_timp[4]=time.minute % 10 + '0';
    1914:	11 96       	adiw	r26, 0x01	; 1
    1916:	3c 91       	ld	r19, X
    1918:	11 97       	sbiw	r26, 0x01	; 1
    191a:	38 02       	muls	r19, r24
    191c:	91 2d       	mov	r25, r1
    191e:	11 24       	eor	r1, r1
    1920:	95 95       	asr	r25
    1922:	95 95       	asr	r25
    1924:	37 fd       	sbrc	r19, 7
    1926:	93 95       	inc	r25
    1928:	69 2f       	mov	r22, r25
    192a:	66 0f       	add	r22, r22
    192c:	46 2f       	mov	r20, r22
    192e:	44 0f       	add	r20, r20
    1930:	44 0f       	add	r20, r20
    1932:	46 0f       	add	r20, r22
    1934:	34 1b       	sub	r19, r20
    1936:	30 5d       	subi	r19, 0xD0	; 208
    1938:	34 83       	std	Z+4, r19	; 0x04
	tmp = time.minute / 10;
	CLOCK_timp[3]=tmp % 10 + '0';
    193a:	92 9f       	mul	r25, r18
    193c:	31 2d       	mov	r19, r1
    193e:	11 24       	eor	r1, r1
    1940:	36 95       	lsr	r19
    1942:	36 95       	lsr	r19
    1944:	36 95       	lsr	r19
    1946:	33 0f       	add	r19, r19
    1948:	43 2f       	mov	r20, r19
    194a:	44 0f       	add	r20, r20
    194c:	44 0f       	add	r20, r20
    194e:	34 0f       	add	r19, r20
    1950:	93 1b       	sub	r25, r19
    1952:	90 5d       	subi	r25, 0xD0	; 208
    1954:	93 83       	std	Z+3, r25	; 0x03
	CLOCK_timp[2]=':';
    1956:	52 83       	std	Z+2, r21	; 0x02
	CLOCK_timp[1]=time.hour % 10 + '0';
    1958:	9c 91       	ld	r25, X
    195a:	98 02       	muls	r25, r24
    195c:	81 2d       	mov	r24, r1
    195e:	11 24       	eor	r1, r1
    1960:	85 95       	asr	r24
    1962:	85 95       	asr	r24
    1964:	97 fd       	sbrc	r25, 7
    1966:	83 95       	inc	r24
    1968:	48 2f       	mov	r20, r24
    196a:	44 0f       	add	r20, r20
    196c:	34 2f       	mov	r19, r20
    196e:	33 0f       	add	r19, r19
    1970:	33 0f       	add	r19, r19
    1972:	34 0f       	add	r19, r20
    1974:	93 1b       	sub	r25, r19
    1976:	90 5d       	subi	r25, 0xD0	; 208
    1978:	91 83       	std	Z+1, r25	; 0x01
	tmp = time.hour / 10;
	CLOCK_timp[0]=tmp % 10 + '0';
    197a:	82 9f       	mul	r24, r18
    197c:	21 2d       	mov	r18, r1
    197e:	11 24       	eor	r1, r1
    1980:	26 95       	lsr	r18
    1982:	26 95       	lsr	r18
    1984:	26 95       	lsr	r18
    1986:	22 0f       	add	r18, r18
    1988:	92 2f       	mov	r25, r18
    198a:	99 0f       	add	r25, r25
    198c:	99 0f       	add	r25, r25
    198e:	29 0f       	add	r18, r25
    1990:	82 1b       	sub	r24, r18
    1992:	80 5d       	subi	r24, 0xD0	; 208
    1994:	80 83       	st	Z, r24
	return CLOCK_timp;
}
    1996:	cf 01       	movw	r24, r30
    1998:	08 95       	ret

0000199a <CLOCKenable>:
char* CLOCK_show(void);
/*
** procedure and function
*/
CLOCK CLOCKenable(uint8_t hour, uint8_t minute, uint8_t second)
{
    199a:	fc 01       	movw	r30, r24
	CLOCK clock;
	time.hour=hour;
    199c:	a8 e4       	ldi	r26, 0x48	; 72
    199e:	b2 e0       	ldi	r27, 0x02	; 2
    19a0:	6c 93       	st	X, r22
	time.minute=minute;
    19a2:	11 96       	adiw	r26, 0x01	; 1
    19a4:	4c 93       	st	X, r20
    19a6:	11 97       	sbiw	r26, 0x01	; 1
	time.second=second;
    19a8:	12 96       	adiw	r26, 0x02	; 2
    19aa:	2c 93       	st	X, r18
	CLOCK_alarm_flag=0X0F;
    19ac:	8f e0       	ldi	r24, 0x0F	; 15
    19ae:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <CLOCK_alarm_flag>
	CLOCK_compare_active=0X0F;
    19b2:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <CLOCK_compare_active>
	clock.second_count_reset=CLOCK_second_count_reset;
	clock.second_count_stop=CLOCK_second_count_stop;
	clock.alarm_reset=CLOCK_alarm_reset;
	clock.alarm_stop=CLOCK_alarm_stop;
	clock.show=CLOCK_show;
	return clock;
    19b6:	80 ee       	ldi	r24, 0xE0	; 224
    19b8:	9a e0       	ldi	r25, 0x0A	; 10
    19ba:	91 83       	std	Z+1, r25	; 0x01
    19bc:	80 83       	st	Z, r24
    19be:	86 ee       	ldi	r24, 0xE6	; 230
    19c0:	9a e0       	ldi	r25, 0x0A	; 10
    19c2:	93 83       	std	Z+3, r25	; 0x03
    19c4:	82 83       	std	Z+2, r24	; 0x02
    19c6:	80 e7       	ldi	r24, 0x70	; 112
    19c8:	9b e0       	ldi	r25, 0x0B	; 11
    19ca:	95 83       	std	Z+5, r25	; 0x05
    19cc:	84 83       	std	Z+4, r24	; 0x04
    19ce:	86 ec       	ldi	r24, 0xC6	; 198
    19d0:	9b e0       	ldi	r25, 0x0B	; 11
    19d2:	97 83       	std	Z+7, r25	; 0x07
    19d4:	86 83       	std	Z+6, r24	; 0x06
    19d6:	85 ed       	ldi	r24, 0xD5	; 213
    19d8:	9b e0       	ldi	r25, 0x0B	; 11
    19da:	91 87       	std	Z+9, r25	; 0x09
    19dc:	80 87       	std	Z+8, r24	; 0x08
    19de:	89 e5       	ldi	r24, 0x59	; 89
    19e0:	9c e0       	ldi	r25, 0x0C	; 12
    19e2:	93 87       	std	Z+11, r25	; 0x0b
    19e4:	82 87       	std	Z+10, r24	; 0x0a
    19e6:	8c e5       	ldi	r24, 0x5C	; 92
    19e8:	9c e0       	ldi	r25, 0x0C	; 12
    19ea:	95 87       	std	Z+13, r25	; 0x0d
    19ec:	84 87       	std	Z+12, r24	; 0x0c
    19ee:	82 e5       	ldi	r24, 0x52	; 82
    19f0:	9c e0       	ldi	r25, 0x0C	; 12
    19f2:	97 87       	std	Z+15, r25	; 0x0f
    19f4:	86 87       	std	Z+14, r24	; 0x0e
    19f6:	85 e5       	ldi	r24, 0x55	; 85
    19f8:	9c e0       	ldi	r25, 0x0C	; 12
    19fa:	91 8b       	std	Z+17, r25	; 0x11
    19fc:	80 8b       	std	Z+16, r24	; 0x10
    19fe:	80 e6       	ldi	r24, 0x60	; 96
    1a00:	9c e0       	ldi	r25, 0x0C	; 12
    1a02:	93 8b       	std	Z+19, r25	; 0x13
    1a04:	82 8b       	std	Z+18, r24	; 0x12
}
    1a06:	cf 01       	movw	r24, r30
    1a08:	08 95       	ret

00001a0a <FUNCpinmatch>:
}
//pinmatch
uint8_t FUNCpinmatch(uint8_t match, uint8_t pin, uint8_t HL)
{
	uint8_t result;
	result=match&pin;
    1a0a:	68 23       	and	r22, r24
	if(HL){
    1a0c:	44 23       	and	r20, r20
    1a0e:	21 f0       	breq	.+8      	; 0x1a18 <FUNCpinmatch+0xe>
		if(result==match);
    1a10:	86 17       	cp	r24, r22
    1a12:	21 f0       	breq	.+8      	; 0x1a1c <FUNCpinmatch+0x12>
		else
			result=0;
    1a14:	80 e0       	ldi	r24, 0x00	; 0
    1a16:	08 95       	ret
	}else{
		if(result)
    1a18:	61 11       	cpse	r22, r1
			result=0;
    1a1a:	80 e0       	ldi	r24, 0x00	; 0
		else
			result=match;
	}
	return result;
}
    1a1c:	08 95       	ret

00001a1e <FUNChmerge>:
// hmerge
uint8_t FUNChmerge(uint8_t X, uint8_t Y)
{
	return (X | Y);
}
    1a1e:	86 2b       	or	r24, r22
    1a20:	08 95       	ret

00001a22 <FUNClmerge>:
// lmerge
uint8_t FUNClmerge(uint8_t X, uint8_t Y)
{
	return (X & Y);
}
    1a22:	86 23       	and	r24, r22
    1a24:	08 95       	ret

00001a26 <FUNChh>:
uint8_t FUNChh(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi&xf;
	return i;
}
    1a26:	86 23       	and	r24, r22
    1a28:	08 95       	ret

00001a2a <FUNCll>:
// ll
uint8_t FUNCll(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi|xf;
	return ~i;
    1a2a:	86 2b       	or	r24, r22
}
    1a2c:	80 95       	com	r24
    1a2e:	08 95       	ret

00001a30 <FUNClh>:
// lh
uint8_t FUNClh(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi^xf;
    1a30:	86 27       	eor	r24, r22
	i&=xf;
	return i;
}
    1a32:	86 23       	and	r24, r22
    1a34:	08 95       	ret

00001a36 <FUNChl>:
// hl
uint8_t FUNChl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xf^xi;
    1a36:	60 95       	com	r22
	i&=xi;
	return i;
}
    1a38:	86 23       	and	r24, r22
    1a3a:	08 95       	ret

00001a3c <FUNCdiff>:
// diff
uint8_t FUNCdiff(uint8_t xi, uint8_t xf)
{
	return xf^xi;
}
    1a3c:	86 27       	eor	r24, r22
    1a3e:	08 95       	ret

00001a40 <FUNCswap>:
// interchange *px and *py
void FUNCswap(long *px, long *py)
{
    1a40:	cf 92       	push	r12
    1a42:	df 92       	push	r13
    1a44:	ef 92       	push	r14
    1a46:	ff 92       	push	r15
    1a48:	0f 93       	push	r16
    1a4a:	1f 93       	push	r17
	long temp;
	temp = *px;
    1a4c:	fc 01       	movw	r30, r24
    1a4e:	00 81       	ld	r16, Z
    1a50:	11 81       	ldd	r17, Z+1	; 0x01
    1a52:	22 81       	ldd	r18, Z+2	; 0x02
    1a54:	33 81       	ldd	r19, Z+3	; 0x03
	*px = *py;
    1a56:	fb 01       	movw	r30, r22
    1a58:	c0 80       	ld	r12, Z
    1a5a:	d1 80       	ldd	r13, Z+1	; 0x01
    1a5c:	e2 80       	ldd	r14, Z+2	; 0x02
    1a5e:	f3 80       	ldd	r15, Z+3	; 0x03
    1a60:	fc 01       	movw	r30, r24
    1a62:	c0 82       	st	Z, r12
    1a64:	d1 82       	std	Z+1, r13	; 0x01
    1a66:	e2 82       	std	Z+2, r14	; 0x02
    1a68:	f3 82       	std	Z+3, r15	; 0x03
	*py = temp;
    1a6a:	fb 01       	movw	r30, r22
    1a6c:	00 83       	st	Z, r16
    1a6e:	11 83       	std	Z+1, r17	; 0x01
    1a70:	22 83       	std	Z+2, r18	; 0x02
    1a72:	33 83       	std	Z+3, r19	; 0x03
}
    1a74:	1f 91       	pop	r17
    1a76:	0f 91       	pop	r16
    1a78:	ff 90       	pop	r15
    1a7a:	ef 90       	pop	r14
    1a7c:	df 90       	pop	r13
    1a7e:	cf 90       	pop	r12
    1a80:	08 95       	ret

00001a82 <FUNCcopy>:
// copy: copy 'from' into 'to'; assume to is big enough
void FUNCcopy(char to[], char from[])
{
	int i;
	i = 0;
	while ((to[i] = from[i]) != '\0')
    1a82:	fb 01       	movw	r30, r22
    1a84:	20 81       	ld	r18, Z
    1a86:	fc 01       	movw	r30, r24
    1a88:	20 83       	st	Z, r18
    1a8a:	22 23       	and	r18, r18
    1a8c:	39 f0       	breq	.+14     	; 0x1a9c <FUNCcopy+0x1a>
    1a8e:	db 01       	movw	r26, r22
    1a90:	11 96       	adiw	r26, 0x01	; 1
    1a92:	31 96       	adiw	r30, 0x01	; 1
    1a94:	9d 91       	ld	r25, X+
    1a96:	91 93       	st	Z+, r25
    1a98:	91 11       	cpse	r25, r1
    1a9a:	fc cf       	rjmp	.-8      	; 0x1a94 <FUNCcopy+0x12>
    1a9c:	08 95       	ret

00001a9e <FUNCsqueeze>:
		++i;
}
// squeeze: delete all c from s
void FUNCsqueeze(char s[], int c)
{
    1a9e:	cf 93       	push	r28
    1aa0:	df 93       	push	r29
    1aa2:	ec 01       	movw	r28, r24
	int i, j;
	for (i = j = 0; s[i] != '\0'; i++)
    1aa4:	98 81       	ld	r25, Y
    1aa6:	99 23       	and	r25, r25
    1aa8:	99 f0       	breq	.+38     	; 0x1ad0 <FUNCsqueeze+0x32>
    1aaa:	fe 01       	movw	r30, r28
    1aac:	31 96       	adiw	r30, 0x01	; 1
    1aae:	20 e0       	ldi	r18, 0x00	; 0
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
		if (s[i] != c)
    1ab2:	49 2f       	mov	r20, r25
    1ab4:	50 e0       	ldi	r21, 0x00	; 0
    1ab6:	46 17       	cp	r20, r22
    1ab8:	57 07       	cpc	r21, r23
    1aba:	31 f0       	breq	.+12     	; 0x1ac8 <FUNCsqueeze+0x2a>
			s[j++] = s[i];
    1abc:	de 01       	movw	r26, r28
    1abe:	a2 0f       	add	r26, r18
    1ac0:	b3 1f       	adc	r27, r19
    1ac2:	9c 93       	st	X, r25
    1ac4:	2f 5f       	subi	r18, 0xFF	; 255
    1ac6:	3f 4f       	sbci	r19, 0xFF	; 255
}
// squeeze: delete all c from s
void FUNCsqueeze(char s[], int c)
{
	int i, j;
	for (i = j = 0; s[i] != '\0'; i++)
    1ac8:	91 91       	ld	r25, Z+
    1aca:	91 11       	cpse	r25, r1
    1acc:	f2 cf       	rjmp	.-28     	; 0x1ab2 <FUNCsqueeze+0x14>
    1ace:	02 c0       	rjmp	.+4      	; 0x1ad4 <FUNCsqueeze+0x36>
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
		if (s[i] != c)
			s[j++] = s[i];
		s[j] = '\0';
    1ad4:	fe 01       	movw	r30, r28
    1ad6:	e2 0f       	add	r30, r18
    1ad8:	f3 1f       	adc	r31, r19
    1ada:	10 82       	st	Z, r1
}
    1adc:	df 91       	pop	r29
    1ade:	cf 91       	pop	r28
    1ae0:	08 95       	ret

00001ae2 <FUNCshellsort>:
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
    1ae2:	2f 92       	push	r2
    1ae4:	3f 92       	push	r3
    1ae6:	4f 92       	push	r4
    1ae8:	5f 92       	push	r5
    1aea:	6f 92       	push	r6
    1aec:	7f 92       	push	r7
    1aee:	8f 92       	push	r8
    1af0:	9f 92       	push	r9
    1af2:	af 92       	push	r10
    1af4:	bf 92       	push	r11
    1af6:	cf 92       	push	r12
    1af8:	df 92       	push	r13
    1afa:	ef 92       	push	r14
    1afc:	ff 92       	push	r15
    1afe:	0f 93       	push	r16
    1b00:	1f 93       	push	r17
    1b02:	cf 93       	push	r28
    1b04:	df 93       	push	r29
    1b06:	00 d0       	rcall	.+0      	; 0x1b08 <FUNCshellsort+0x26>
    1b08:	00 d0       	rcall	.+0      	; 0x1b0a <FUNCshellsort+0x28>
    1b0a:	cd b7       	in	r28, 0x3d	; 61
    1b0c:	de b7       	in	r29, 0x3e	; 62
    1b0e:	2c 01       	movw	r4, r24
    1b10:	1b 01       	movw	r2, r22
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
    1b12:	4b 01       	movw	r8, r22
    1b14:	77 23       	and	r23, r23
    1b16:	1c f4       	brge	.+6      	; 0x1b1e <FUNCshellsort+0x3c>
    1b18:	2f ef       	ldi	r18, 0xFF	; 255
    1b1a:	82 1a       	sub	r8, r18
    1b1c:	92 0a       	sbc	r9, r18
    1b1e:	95 94       	asr	r9
    1b20:	87 94       	ror	r8
    1b22:	18 14       	cp	r1, r8
    1b24:	19 04       	cpc	r1, r9
    1b26:	0c f4       	brge	.+2      	; 0x1b2a <FUNCshellsort+0x48>
    1b28:	51 c0       	rjmp	.+162    	; 0x1bcc <FUNCshellsort+0xea>
    1b2a:	6a c0       	rjmp	.+212    	; 0x1c00 <FUNCshellsort+0x11e>
		for (i = gap; i < n; i++)
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
    1b2c:	96 01       	movw	r18, r12
    1b2e:	dd 20       	and	r13, r13
    1b30:	9c f1       	brlt	.+102    	; 0x1b98 <FUNCshellsort+0xb6>
    1b32:	f5 01       	movw	r30, r10
    1b34:	40 81       	ld	r20, Z
    1b36:	51 81       	ldd	r21, Z+1	; 0x01
    1b38:	f4 01       	movw	r30, r8
    1b3a:	60 81       	ld	r22, Z
    1b3c:	71 81       	ldd	r23, Z+1	; 0x01
    1b3e:	64 17       	cp	r22, r20
    1b40:	75 07       	cpc	r23, r21
    1b42:	54 f5       	brge	.+84     	; 0x1b98 <FUNCshellsort+0xb6>
    1b44:	8c 01       	movw	r16, r24
    1b46:	0a 0d       	add	r16, r10
    1b48:	1b 1d       	adc	r17, r11
    1b4a:	d4 01       	movw	r26, r8
    1b4c:	bc 82       	std	Y+4, r11	; 0x04
    1b4e:	ab 82       	std	Y+3, r10	; 0x03
    1b50:	ba 82       	std	Y+2, r11	; 0x02
    1b52:	a9 82       	std	Y+1, r10	; 0x01
				temp = v[j];
				v[j] = v[j+gap];
    1b54:	eb 81       	ldd	r30, Y+3	; 0x03
    1b56:	fc 81       	ldd	r31, Y+4	; 0x04
    1b58:	71 83       	std	Z+1, r23	; 0x01
    1b5a:	60 83       	st	Z, r22
				v[j+gap] = temp;
    1b5c:	11 96       	adiw	r26, 0x01	; 1
    1b5e:	5c 93       	st	X, r21
    1b60:	4e 93       	st	-X, r20
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
		for (i = gap; i < n; i++)
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
    1b62:	2e 19       	sub	r18, r14
    1b64:	3f 09       	sbc	r19, r15
    1b66:	c2 f0       	brmi	.+48     	; 0x1b98 <FUNCshellsort+0xb6>
    1b68:	f8 01       	movw	r30, r16
    1b6a:	40 81       	ld	r20, Z
    1b6c:	51 81       	ldd	r21, Z+1	; 0x01
    1b6e:	e9 81       	ldd	r30, Y+1	; 0x01
    1b70:	fa 81       	ldd	r31, Y+2	; 0x02
    1b72:	60 81       	ld	r22, Z
    1b74:	71 81       	ldd	r23, Z+1	; 0x01
    1b76:	08 0f       	add	r16, r24
    1b78:	19 1f       	adc	r17, r25
    1b7a:	e8 0f       	add	r30, r24
    1b7c:	f9 1f       	adc	r31, r25
    1b7e:	fa 83       	std	Y+2, r31	; 0x02
    1b80:	e9 83       	std	Y+1, r30	; 0x01
    1b82:	eb 81       	ldd	r30, Y+3	; 0x03
    1b84:	fc 81       	ldd	r31, Y+4	; 0x04
    1b86:	e8 0f       	add	r30, r24
    1b88:	f9 1f       	adc	r31, r25
    1b8a:	fc 83       	std	Y+4, r31	; 0x04
    1b8c:	eb 83       	std	Y+3, r30	; 0x03
    1b8e:	a8 0f       	add	r26, r24
    1b90:	b9 1f       	adc	r27, r25
    1b92:	64 17       	cp	r22, r20
    1b94:	75 07       	cpc	r23, r21
    1b96:	f4 f2       	brlt	.-68     	; 0x1b54 <FUNCshellsort+0x72>
    1b98:	ff ef       	ldi	r31, 0xFF	; 255
    1b9a:	cf 1a       	sub	r12, r31
    1b9c:	df 0a       	sbc	r13, r31
    1b9e:	22 e0       	ldi	r18, 0x02	; 2
    1ba0:	a2 0e       	add	r10, r18
    1ba2:	b1 1c       	adc	r11, r1
    1ba4:	e2 e0       	ldi	r30, 0x02	; 2
    1ba6:	8e 0e       	add	r8, r30
    1ba8:	91 1c       	adc	r9, r1
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
		for (i = gap; i < n; i++)
    1baa:	c6 14       	cp	r12, r6
    1bac:	d7 04       	cpc	r13, r7
    1bae:	09 f0       	breq	.+2      	; 0x1bb2 <FUNCshellsort+0xd0>
    1bb0:	bd cf       	rjmp	.-134    	; 0x1b2c <FUNCshellsort+0x4a>
}
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
    1bb2:	47 01       	movw	r8, r14
    1bb4:	ff 20       	and	r15, r15
    1bb6:	1c f4       	brge	.+6      	; 0x1bbe <FUNCshellsort+0xdc>
    1bb8:	ff ef       	ldi	r31, 0xFF	; 255
    1bba:	8f 1a       	sub	r8, r31
    1bbc:	9f 0a       	sbc	r9, r31
    1bbe:	95 94       	asr	r9
    1bc0:	87 94       	ror	r8
    1bc2:	18 14       	cp	r1, r8
    1bc4:	19 04       	cpc	r1, r9
    1bc6:	e4 f4       	brge	.+56     	; 0x1c00 <FUNCshellsort+0x11e>
    1bc8:	74 01       	movw	r14, r8
    1bca:	01 c0       	rjmp	.+2      	; 0x1bce <FUNCshellsort+0xec>
    1bcc:	74 01       	movw	r14, r8
		for (i = gap; i < n; i++)
    1bce:	82 14       	cp	r8, r2
    1bd0:	93 04       	cpc	r9, r3
    1bd2:	7c f7       	brge	.-34     	; 0x1bb2 <FUNCshellsort+0xd0>
    1bd4:	64 01       	movw	r12, r8
    1bd6:	ce 18       	sub	r12, r14
    1bd8:	df 08       	sbc	r13, r15
    1bda:	56 01       	movw	r10, r12
    1bdc:	aa 0c       	add	r10, r10
    1bde:	bb 1c       	adc	r11, r11
    1be0:	a4 0c       	add	r10, r4
    1be2:	b5 1c       	adc	r11, r5
    1be4:	88 0c       	add	r8, r8
    1be6:	99 1c       	adc	r9, r9
    1be8:	84 0c       	add	r8, r4
    1bea:	95 1c       	adc	r9, r5
    1bec:	31 01       	movw	r6, r2
    1bee:	6e 18       	sub	r6, r14
    1bf0:	7f 08       	sbc	r7, r15
    1bf2:	c7 01       	movw	r24, r14
    1bf4:	88 0f       	add	r24, r24
    1bf6:	99 1f       	adc	r25, r25
    1bf8:	91 95       	neg	r25
    1bfa:	81 95       	neg	r24
    1bfc:	91 09       	sbc	r25, r1
    1bfe:	96 cf       	rjmp	.-212    	; 0x1b2c <FUNCshellsort+0x4a>
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
				temp = v[j];
				v[j] = v[j+gap];
				v[j+gap] = temp;
			}
}
    1c00:	0f 90       	pop	r0
    1c02:	0f 90       	pop	r0
    1c04:	0f 90       	pop	r0
    1c06:	0f 90       	pop	r0
    1c08:	df 91       	pop	r29
    1c0a:	cf 91       	pop	r28
    1c0c:	1f 91       	pop	r17
    1c0e:	0f 91       	pop	r16
    1c10:	ff 90       	pop	r15
    1c12:	ef 90       	pop	r14
    1c14:	df 90       	pop	r13
    1c16:	cf 90       	pop	r12
    1c18:	bf 90       	pop	r11
    1c1a:	af 90       	pop	r10
    1c1c:	9f 90       	pop	r9
    1c1e:	8f 90       	pop	r8
    1c20:	7f 90       	pop	r7
    1c22:	6f 90       	pop	r6
    1c24:	5f 90       	pop	r5
    1c26:	4f 90       	pop	r4
    1c28:	3f 90       	pop	r3
    1c2a:	2f 90       	pop	r2
    1c2c:	08 95       	ret

00001c2e <FUNCpmax>:
	if(a1 > a2){
		biggest = a1;
	}else{
		biggest = a2;
	}
	return biggest;
    1c2e:	86 17       	cp	r24, r22
    1c30:	97 07       	cpc	r25, r23
    1c32:	0c f4       	brge	.+2      	; 0x1c36 <FUNCpmax+0x8>
    1c34:	cb 01       	movw	r24, r22
}
    1c36:	08 95       	ret

00001c38 <FUNCgcd>:
// common divisor
int FUNCgcd (int u, int v)
{
    1c38:	9b 01       	movw	r18, r22
	int temp;
	while ( v != 0 ) {
    1c3a:	67 2b       	or	r22, r23
    1c3c:	11 f4       	brne	.+4      	; 0x1c42 <FUNCgcd+0xa>
    1c3e:	08 95       	ret
		temp = u % v;
		u = v;
		v = temp;
    1c40:	9a 01       	movw	r18, r20
// common divisor
int FUNCgcd (int u, int v)
{
	int temp;
	while ( v != 0 ) {
		temp = u % v;
    1c42:	b9 01       	movw	r22, r18
    1c44:	0e 94 b1 18 	call	0x3162	; 0x3162 <__divmodhi4>
    1c48:	ac 01       	movw	r20, r24
    1c4a:	82 2f       	mov	r24, r18
    1c4c:	93 2f       	mov	r25, r19
}
// common divisor
int FUNCgcd (int u, int v)
{
	int temp;
	while ( v != 0 ) {
    1c4e:	41 15       	cp	r20, r1
    1c50:	51 05       	cpc	r21, r1
    1c52:	b1 f7       	brne	.-20     	; 0x1c40 <FUNCgcd+0x8>
		temp = u % v;
		u = v;
		v = temp;
	}
	return u;
}
    1c54:	08 95       	ret

00001c56 <FUNCstrToInt>:
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
    1c56:	fc 01       	movw	r30, r24
	int i, intValue, result = 0;
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
    1c58:	90 81       	ld	r25, Z
    1c5a:	80 ed       	ldi	r24, 0xD0	; 208
    1c5c:	89 0f       	add	r24, r25
    1c5e:	8a 30       	cpi	r24, 0x0A	; 10
    1c60:	d0 f4       	brcc	.+52     	; 0x1c96 <FUNCstrToInt+0x40>
    1c62:	31 96       	adiw	r30, 0x01	; 1
    1c64:	20 e0       	ldi	r18, 0x00	; 0
    1c66:	30 e0       	ldi	r19, 0x00	; 0
		intValue = string[i] - '0';
		result = result * 10 + intValue;
    1c68:	a9 01       	movw	r20, r18
    1c6a:	44 0f       	add	r20, r20
    1c6c:	55 1f       	adc	r21, r21
    1c6e:	22 0f       	add	r18, r18
    1c70:	33 1f       	adc	r19, r19
    1c72:	22 0f       	add	r18, r18
    1c74:	33 1f       	adc	r19, r19
    1c76:	22 0f       	add	r18, r18
    1c78:	33 1f       	adc	r19, r19
    1c7a:	42 0f       	add	r20, r18
    1c7c:	53 1f       	adc	r21, r19
    1c7e:	29 2f       	mov	r18, r25
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	20 53       	subi	r18, 0x30	; 48
    1c84:	31 09       	sbc	r19, r1
    1c86:	24 0f       	add	r18, r20
    1c88:	35 1f       	adc	r19, r21
}
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
	int i, intValue, result = 0;
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
    1c8a:	91 91       	ld	r25, Z+
    1c8c:	80 ed       	ldi	r24, 0xD0	; 208
    1c8e:	89 0f       	add	r24, r25
    1c90:	8a 30       	cpi	r24, 0x0A	; 10
    1c92:	50 f3       	brcs	.-44     	; 0x1c68 <FUNCstrToInt+0x12>
    1c94:	02 c0       	rjmp	.+4      	; 0x1c9a <FUNCstrToInt+0x44>
	return u;
}
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
	int i, intValue, result = 0;
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	30 e0       	ldi	r19, 0x00	; 0
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
		intValue = string[i] - '0';
		result = result * 10 + intValue;
	}
	return result;
}
    1c9a:	c9 01       	movw	r24, r18
    1c9c:	08 95       	ret

00001c9e <FUNCfilter>:
uint8_t FUNCfilter(uint8_t mask, uint8_t data)
{
	uint8_t Z;
	Z=mask & data;
	return Z;
}
    1c9e:	86 23       	and	r24, r22
    1ca0:	08 95       	ret

00001ca2 <FUNCticks>:
// ticks
unsigned int FUNCticks(unsigned int num)
{
	unsigned int count;
	for(count=0;count<num;count++)
    1ca2:	00 97       	sbiw	r24, 0x00	; 0
    1ca4:	39 f0       	breq	.+14     	; 0x1cb4 <FUNCticks+0x12>
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	2f 5f       	subi	r18, 0xFF	; 255
    1cac:	3f 4f       	sbci	r19, 0xFF	; 255
    1cae:	82 17       	cp	r24, r18
    1cb0:	93 07       	cpc	r25, r19
    1cb2:	d9 f7       	brne	.-10     	; 0x1caa <FUNCticks+0x8>
		;
	return count;
}
    1cb4:	08 95       	ret

00001cb6 <FUNCtwocomptoint8bit>:
// Two's Complement function
int FUNCtwocomptoint8bit(int twoscomp){
  
  //Let's see if the byte is negative
  if (twoscomp & 0B10000000){
    1cb6:	87 ff       	sbrs	r24, 7
    1cb8:	08 c0       	rjmp	.+16     	; 0x1cca <FUNCtwocomptoint8bit+0x14>
    //Invert
    twoscomp = ~twoscomp + 1;
    1cba:	91 95       	neg	r25
    1cbc:	81 95       	neg	r24
    1cbe:	91 09       	sbc	r25, r1
	twoscomp = (twoscomp & 0B11111111);
    //Cast as int and multiply by negative one
    int value = (int)(twoscomp)*(-1);
    1cc0:	99 27       	eor	r25, r25
    1cc2:	91 95       	neg	r25
    1cc4:	81 95       	neg	r24
    1cc6:	91 09       	sbc	r25, r1
    return value;
    1cc8:	08 95       	ret
    //Byte is non-negative, therefore convert to decimal and display
    //Make sure we are never over 1279
    twoscomp = (twoscomp & 0B01111111);
    //Cast as int and return
    int value = (int)(twoscomp);
    return value;
    1cca:	8f 77       	andi	r24, 0x7F	; 127
    1ccc:	99 27       	eor	r25, r25
  }
}
    1cce:	08 95       	ret

00001cd0 <FUNCtwocomptoint10bit>:
// Two's Complement function, shifts 10 bit binary to signed integers (-512 to 512)
int FUNCtwocomptoint10bit(int twoscomp){
	
  //Let's see if the byte is negative
  if (twoscomp & 0x200){
    1cd0:	91 ff       	sbrs	r25, 1
    1cd2:	08 c0       	rjmp	.+16     	; 0x1ce4 <FUNCtwocomptoint10bit+0x14>
    //Invert
    twoscomp = ~twoscomp + 1;
    1cd4:	91 95       	neg	r25
    1cd6:	81 95       	neg	r24
    1cd8:	91 09       	sbc	r25, r1
    twoscomp = (twoscomp & 0x3FF);
    //Cast as int and multiply by negative one
    int value = (int)(twoscomp)*(-1);
    1cda:	93 70       	andi	r25, 0x03	; 3
    1cdc:	91 95       	neg	r25
    1cde:	81 95       	neg	r24
    1ce0:	91 09       	sbc	r25, r1
    return value;
    1ce2:	08 95       	ret
    //Byte is non-negative, therefore convert to decimal and display
    twoscomp = (twoscomp & 0x1FF);
    //Cast as int and return
    //Serial.println(twoscomp);
    int value = (int)(twoscomp);
    return value;
    1ce4:	91 70       	andi	r25, 0x01	; 1
  }
}
    1ce6:	08 95       	ret

00001ce8 <FUNCtwocomptointnbit>:
// Two's Complement function, nbits
int FUNCtwocomptointnbit(int twoscomp, uint8_t nbits){
  unsigned int signmask;
  unsigned int mask;
  signmask = (1<<(nbits-1));
    1ce8:	61 50       	subi	r22, 0x01	; 1
    1cea:	21 e0       	ldi	r18, 0x01	; 1
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	02 c0       	rjmp	.+4      	; 0x1cf4 <FUNCtwocomptointnbit+0xc>
    1cf0:	22 0f       	add	r18, r18
    1cf2:	33 1f       	adc	r19, r19
    1cf4:	6a 95       	dec	r22
    1cf6:	e2 f7       	brpl	.-8      	; 0x1cf0 <FUNCtwocomptointnbit+0x8>
  mask=signmask-1;
    1cf8:	a9 01       	movw	r20, r18
    1cfa:	41 50       	subi	r20, 0x01	; 1
    1cfc:	51 09       	sbc	r21, r1
  //Let's see if the number is negative
  if (twoscomp & signmask){
    1cfe:	b9 01       	movw	r22, r18
    1d00:	68 23       	and	r22, r24
    1d02:	79 23       	and	r23, r25
    1d04:	67 2b       	or	r22, r23
    1d06:	29 f0       	breq	.+10     	; 0x1d12 <FUNCtwocomptointnbit+0x2a>
	twoscomp &= mask;
    twoscomp -= signmask;
    1d08:	84 23       	and	r24, r20
    1d0a:	95 23       	and	r25, r21
    1d0c:	82 1b       	sub	r24, r18
    1d0e:	93 0b       	sbc	r25, r19
    1d10:	08 95       	ret
  }else{
	  twoscomp &= mask;
    1d12:	84 23       	and	r24, r20
    1d14:	95 23       	and	r25, r21
  }
  return twoscomp;
}
    1d16:	08 95       	ret

00001d18 <FUNCdec2bcd>:
// Convert Decimal to Binary Coded Decimal (BCD)
char FUNCdec2bcd(char num)
{
	return ((num/10 * 16) + (num % 10));
    1d18:	9d ec       	ldi	r25, 0xCD	; 205
    1d1a:	89 9f       	mul	r24, r25
    1d1c:	91 2d       	mov	r25, r1
    1d1e:	11 24       	eor	r1, r1
    1d20:	96 95       	lsr	r25
    1d22:	96 95       	lsr	r25
    1d24:	96 95       	lsr	r25
    1d26:	39 2f       	mov	r19, r25
    1d28:	33 0f       	add	r19, r19
    1d2a:	23 2f       	mov	r18, r19
    1d2c:	22 0f       	add	r18, r18
    1d2e:	22 0f       	add	r18, r18
    1d30:	23 0f       	add	r18, r19
    1d32:	82 1b       	sub	r24, r18
}
    1d34:	20 e1       	ldi	r18, 0x10	; 16
    1d36:	92 9f       	mul	r25, r18
    1d38:	80 0d       	add	r24, r0
    1d3a:	11 24       	eor	r1, r1
    1d3c:	08 95       	ret

00001d3e <FUNCbcd2dec>:
// Convert Binary Coded Decimal (BCD) to Decimal
char FUNCbcd2dec(char num)
{
	return ((num/16 * 10) + (num % 16));
    1d3e:	98 2f       	mov	r25, r24
    1d40:	92 95       	swap	r25
    1d42:	9f 70       	andi	r25, 0x0F	; 15
    1d44:	99 0f       	add	r25, r25
    1d46:	29 2f       	mov	r18, r25
    1d48:	22 0f       	add	r18, r18
    1d4a:	22 0f       	add	r18, r18
    1d4c:	92 0f       	add	r25, r18
    1d4e:	8f 70       	andi	r24, 0x0F	; 15
}
    1d50:	89 0f       	add	r24, r25
    1d52:	08 95       	ret

00001d54 <FUNCresizestr>:
char* FUNCresizestr(char *string, int size)
{
    1d54:	fc 01       	movw	r30, r24
	int i;
	FUNCstr[size]='\0';
    1d56:	db 01       	movw	r26, r22
    1d58:	a1 5b       	subi	r26, 0xB1	; 177
    1d5a:	bd 4f       	sbci	r27, 0xFD	; 253
    1d5c:	1c 92       	st	X, r1
	for(i=0;i<size;i++){
    1d5e:	16 16       	cp	r1, r22
    1d60:	17 06       	cpc	r1, r23
    1d62:	14 f5       	brge	.+68     	; 0x1da8 <FUNCresizestr+0x54>
		if(*(string+i)=='\0'){
    1d64:	90 81       	ld	r25, Z
    1d66:	91 11       	cpse	r25, r1
    1d68:	0c c0       	rjmp	.+24     	; 0x1d82 <FUNCresizestr+0x2e>
    1d6a:	17 c0       	rjmp	.+46     	; 0x1d9a <FUNCresizestr+0x46>
    1d6c:	91 91       	ld	r25, Z+
    1d6e:	91 11       	cpse	r25, r1
    1d70:	0d c0       	rjmp	.+26     	; 0x1d8c <FUNCresizestr+0x38>
    1d72:	15 c0       	rjmp	.+42     	; 0x1d9e <FUNCresizestr+0x4a>
			for(;i<size;i++){
				FUNCstr[i]=' ';
    1d74:	81 93       	st	Z+, r24
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
		if(*(string+i)=='\0'){
			for(;i<size;i++){
    1d76:	2f 5f       	subi	r18, 0xFF	; 255
    1d78:	3f 4f       	sbci	r19, 0xFF	; 255
    1d7a:	26 17       	cp	r18, r22
    1d7c:	37 07       	cpc	r19, r23
    1d7e:	d4 f3       	brlt	.-12     	; 0x1d74 <FUNCresizestr+0x20>
    1d80:	13 c0       	rjmp	.+38     	; 0x1da8 <FUNCresizestr+0x54>
    1d82:	af e4       	ldi	r26, 0x4F	; 79
    1d84:	b2 e0       	ldi	r27, 0x02	; 2
    1d86:	31 96       	adiw	r30, 0x01	; 1
char* FUNCresizestr(char *string, int size)
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
		if(*(string+i)=='\0'){
    1d88:	20 e0       	ldi	r18, 0x00	; 0
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
			for(;i<size;i++){
				FUNCstr[i]=' ';
			}
			break;
		}
		FUNCstr[i]=*(string+i);
    1d8c:	9d 93       	st	X+, r25
}
char* FUNCresizestr(char *string, int size)
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
    1d8e:	2f 5f       	subi	r18, 0xFF	; 255
    1d90:	3f 4f       	sbci	r19, 0xFF	; 255
    1d92:	62 17       	cp	r22, r18
    1d94:	73 07       	cpc	r23, r19
    1d96:	51 f7       	brne	.-44     	; 0x1d6c <FUNCresizestr+0x18>
    1d98:	07 c0       	rjmp	.+14     	; 0x1da8 <FUNCresizestr+0x54>
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	f9 01       	movw	r30, r18
    1da0:	e1 5b       	subi	r30, 0xB1	; 177
    1da2:	fd 4f       	sbci	r31, 0xFD	; 253
		if(*(string+i)=='\0'){
			for(;i<size;i++){
				FUNCstr[i]=' ';
    1da4:	80 e2       	ldi	r24, 0x20	; 32
    1da6:	e6 cf       	rjmp	.-52     	; 0x1d74 <FUNCresizestr+0x20>
			break;
		}
		FUNCstr[i]=*(string+i);
	}
	return FUNCstr;
}
    1da8:	8f e4       	ldi	r24, 0x4F	; 79
    1daa:	92 e0       	ldi	r25, 0x02	; 2
    1dac:	08 95       	ret

00001dae <FUNCtrimmer>:
long FUNCtrimmer(long x, long in_min, long in_max, long out_min, long out_max)
/*
	same as arduino map function.
*/
{
    1dae:	4f 92       	push	r4
    1db0:	5f 92       	push	r5
    1db2:	6f 92       	push	r6
    1db4:	7f 92       	push	r7
    1db6:	af 92       	push	r10
    1db8:	bf 92       	push	r11
    1dba:	cf 92       	push	r12
    1dbc:	df 92       	push	r13
    1dbe:	ef 92       	push	r14
    1dc0:	ff 92       	push	r15
    1dc2:	0f 93       	push	r16
    1dc4:	1f 93       	push	r17
    1dc6:	cf 93       	push	r28
    1dc8:	df 93       	push	r29
    1dca:	cd b7       	in	r28, 0x3d	; 61
    1dcc:	de b7       	in	r29, 0x3e	; 62
    1dce:	29 01       	movw	r4, r18
    1dd0:	3a 01       	movw	r6, r20
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    1dd2:	9b 01       	movw	r18, r22
    1dd4:	ac 01       	movw	r20, r24
    1dd6:	24 19       	sub	r18, r4
    1dd8:	35 09       	sbc	r19, r5
    1dda:	46 09       	sbc	r20, r6
    1ddc:	57 09       	sbc	r21, r7
    1dde:	89 89       	ldd	r24, Y+17	; 0x11
    1de0:	9a 89       	ldd	r25, Y+18	; 0x12
    1de2:	ab 89       	ldd	r26, Y+19	; 0x13
    1de4:	bc 89       	ldd	r27, Y+20	; 0x14
    1de6:	bc 01       	movw	r22, r24
    1de8:	cd 01       	movw	r24, r26
    1dea:	6a 19       	sub	r22, r10
    1dec:	7b 09       	sbc	r23, r11
    1dee:	8c 09       	sbc	r24, r12
    1df0:	9d 09       	sbc	r25, r13
    1df2:	0e 94 8e 18 	call	0x311c	; 0x311c <__mulsi3>
    1df6:	a8 01       	movw	r20, r16
    1df8:	97 01       	movw	r18, r14
    1dfa:	24 19       	sub	r18, r4
    1dfc:	35 09       	sbc	r19, r5
    1dfe:	46 09       	sbc	r20, r6
    1e00:	57 09       	sbc	r21, r7
    1e02:	0e 94 e6 18 	call	0x31cc	; 0x31cc <__divmodsi4>
    1e06:	ca 01       	movw	r24, r20
    1e08:	b9 01       	movw	r22, r18
    1e0a:	6a 0d       	add	r22, r10
    1e0c:	7b 1d       	adc	r23, r11
    1e0e:	8c 1d       	adc	r24, r12
    1e10:	9d 1d       	adc	r25, r13
}
    1e12:	df 91       	pop	r29
    1e14:	cf 91       	pop	r28
    1e16:	1f 91       	pop	r17
    1e18:	0f 91       	pop	r16
    1e1a:	ff 90       	pop	r15
    1e1c:	ef 90       	pop	r14
    1e1e:	df 90       	pop	r13
    1e20:	cf 90       	pop	r12
    1e22:	bf 90       	pop	r11
    1e24:	af 90       	pop	r10
    1e26:	7f 90       	pop	r7
    1e28:	6f 90       	pop	r6
    1e2a:	5f 90       	pop	r5
    1e2c:	4f 90       	pop	r4
    1e2e:	08 95       	ret

00001e30 <Power>:
// power: raise base to n-th power; n >= 0
unsigned int Power(uint8_t base, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
    1e30:	70 e0       	ldi	r23, 0x00	; 0
    1e32:	61 15       	cp	r22, r1
    1e34:	71 05       	cpc	r23, r1
    1e36:	99 f0       	breq	.+38     	; 0x1e5e <Power+0x2e>
    1e38:	41 e0       	ldi	r20, 0x01	; 1
    1e3a:	50 e0       	ldi	r21, 0x00	; 0
    1e3c:	21 e0       	ldi	r18, 0x01	; 1
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
        p = p * base;
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	fa 01       	movw	r30, r20
    1e44:	e8 9f       	mul	r30, r24
    1e46:	a0 01       	movw	r20, r0
    1e48:	e9 9f       	mul	r30, r25
    1e4a:	50 0d       	add	r21, r0
    1e4c:	f8 9f       	mul	r31, r24
    1e4e:	50 0d       	add	r21, r0
    1e50:	11 24       	eor	r1, r1
// power: raise base to n-th power; n >= 0
unsigned int Power(uint8_t base, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
    1e52:	2f 5f       	subi	r18, 0xFF	; 255
    1e54:	3f 4f       	sbci	r19, 0xFF	; 255
    1e56:	62 17       	cp	r22, r18
    1e58:	73 07       	cpc	r23, r19
    1e5a:	98 f7       	brcc	.-26     	; 0x1e42 <Power+0x12>
    1e5c:	02 c0       	rjmp	.+4      	; 0x1e62 <Power+0x32>
}
// power: raise base to n-th power; n >= 0
unsigned int Power(uint8_t base, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    1e5e:	41 e0       	ldi	r20, 0x01	; 1
    1e60:	50 e0       	ldi	r21, 0x00	; 0
    for (i = 1; i <= n; ++i)
        p = p * base;
    return p;
}
    1e62:	ca 01       	movw	r24, r20
    1e64:	08 95       	ret

00001e66 <StringLength>:
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
	while ( string[count] != '\0' )
    1e66:	fc 01       	movw	r30, r24
    1e68:	20 81       	ld	r18, Z
    1e6a:	22 23       	and	r18, r18
    1e6c:	41 f0       	breq	.+16     	; 0x1e7e <StringLength+0x18>
    1e6e:	31 96       	adiw	r30, 0x01	; 1
    1e70:	80 e0       	ldi	r24, 0x00	; 0
    1e72:	90 e0       	ldi	r25, 0x00	; 0
		++count;
    1e74:	01 96       	adiw	r24, 0x01	; 1
}
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
	while ( string[count] != '\0' )
    1e76:	21 91       	ld	r18, Z+
    1e78:	21 11       	cpse	r18, r1
    1e7a:	fc cf       	rjmp	.-8      	; 0x1e74 <StringLength+0xe>
    1e7c:	08 95       	ret
    return p;
}
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
    1e7e:	80 e0       	ldi	r24, 0x00	; 0
    1e80:	90 e0       	ldi	r25, 0x00	; 0
	while ( string[count] != '\0' )
		++count;
	return count;
}
    1e82:	08 95       	ret

00001e84 <FUNCtrim>:
	s[i] = '\0';
	Reverse(s);
}
// trim: remove trailing blanks, tabs, newlines
int FUNCtrim(char s[])
{
    1e84:	cf 93       	push	r28
    1e86:	df 93       	push	r29
    1e88:	ec 01       	movw	r28, r24
	int n;
	for (n = StringLength(s)-1; n >= 0; n--)
    1e8a:	ed df       	rcall	.-38     	; 0x1e66 <StringLength>
    1e8c:	9c 01       	movw	r18, r24
    1e8e:	21 50       	subi	r18, 0x01	; 1
    1e90:	31 09       	sbc	r19, r1
    1e92:	62 f0       	brmi	.+24     	; 0x1eac <FUNCtrim+0x28>
    1e94:	fe 01       	movw	r30, r28
    1e96:	e8 0f       	add	r30, r24
    1e98:	f9 1f       	adc	r31, r25
		if (s[n] != ' ' && s[n] != '\t' && s[n] != '\n')
    1e9a:	92 91       	ld	r25, -Z
    1e9c:	90 32       	cpi	r25, 0x20	; 32
    1e9e:	19 f0       	breq	.+6      	; 0x1ea6 <FUNCtrim+0x22>
    1ea0:	99 50       	subi	r25, 0x09	; 9
    1ea2:	92 30       	cpi	r25, 0x02	; 2
    1ea4:	18 f4       	brcc	.+6      	; 0x1eac <FUNCtrim+0x28>
}
// trim: remove trailing blanks, tabs, newlines
int FUNCtrim(char s[])
{
	int n;
	for (n = StringLength(s)-1; n >= 0; n--)
    1ea6:	21 50       	subi	r18, 0x01	; 1
    1ea8:	31 09       	sbc	r19, r1
    1eaa:	b8 f7       	brcc	.-18     	; 0x1e9a <FUNCtrim+0x16>
		if (s[n] != ' ' && s[n] != '\t' && s[n] != '\n')
			break;
	s[n+1] = '\0';
    1eac:	c2 0f       	add	r28, r18
    1eae:	d3 1f       	adc	r29, r19
    1eb0:	19 82       	std	Y+1, r1	; 0x01
	return n;
}
    1eb2:	c9 01       	movw	r24, r18
    1eb4:	df 91       	pop	r29
    1eb6:	cf 91       	pop	r28
    1eb8:	08 95       	ret

00001eba <Reverse>:
		++count;
	return count;
}
// reverse: reverse string s in place
void Reverse(char s[])
{
    1eba:	cf 93       	push	r28
    1ebc:	df 93       	push	r29
    1ebe:	ec 01       	movw	r28, r24
	int c, i, j;
	for (i = 0, j = StringLength(s)-1; i < j; i++, j--){
    1ec0:	d2 df       	rcall	.-92     	; 0x1e66 <StringLength>
    1ec2:	9c 01       	movw	r18, r24
    1ec4:	21 50       	subi	r18, 0x01	; 1
    1ec6:	31 09       	sbc	r19, r1
    1ec8:	12 16       	cp	r1, r18
    1eca:	13 06       	cpc	r1, r19
    1ecc:	84 f4       	brge	.+32     	; 0x1eee <Reverse+0x34>
    1ece:	de 01       	movw	r26, r28
    1ed0:	a8 0f       	add	r26, r24
    1ed2:	b9 1f       	adc	r27, r25
    1ed4:	fe 01       	movw	r30, r28
    1ed6:	80 e0       	ldi	r24, 0x00	; 0
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
		c = s[i];
    1eda:	40 81       	ld	r20, Z
		s[i] = s[j];
    1edc:	5e 91       	ld	r21, -X
    1ede:	51 93       	st	Z+, r21
		s[j] = c;
    1ee0:	4c 93       	st	X, r20
}
// reverse: reverse string s in place
void Reverse(char s[])
{
	int c, i, j;
	for (i = 0, j = StringLength(s)-1; i < j; i++, j--){
    1ee2:	01 96       	adiw	r24, 0x01	; 1
    1ee4:	21 50       	subi	r18, 0x01	; 1
    1ee6:	31 09       	sbc	r19, r1
    1ee8:	82 17       	cp	r24, r18
    1eea:	93 07       	cpc	r25, r19
    1eec:	b4 f3       	brlt	.-20     	; 0x1eda <Reverse+0x20>
		c = s[i];
		s[i] = s[j];
		s[j] = c;
	}
}
    1eee:	df 91       	pop	r29
    1ef0:	cf 91       	pop	r28
    1ef2:	08 95       	ret

00001ef4 <FUNCi32toa>:
				v[j+gap] = temp;
			}
}
// i32toa: convert n to characters in s
void FUNCi32toa(int32_t n, char s[])
{
    1ef4:	6f 92       	push	r6
    1ef6:	7f 92       	push	r7
    1ef8:	8f 92       	push	r8
    1efa:	9f 92       	push	r9
    1efc:	af 92       	push	r10
    1efe:	bf 92       	push	r11
    1f00:	cf 92       	push	r12
    1f02:	df 92       	push	r13
    1f04:	ef 92       	push	r14
    1f06:	ff 92       	push	r15
    1f08:	0f 93       	push	r16
    1f0a:	1f 93       	push	r17
    1f0c:	cf 93       	push	r28
    1f0e:	df 93       	push	r29
    1f10:	6b 01       	movw	r12, r22
    1f12:	7c 01       	movw	r14, r24
    1f14:	ea 01       	movw	r28, r20
    1f16:	dc 01       	movw	r26, r24
    1f18:	cb 01       	movw	r24, r22
    1f1a:	ff 20       	and	r15, r15
    1f1c:	3c f4       	brge	.+14     	; 0x1f2c <FUNCi32toa+0x38>
    1f1e:	88 27       	eor	r24, r24
    1f20:	99 27       	eor	r25, r25
    1f22:	dc 01       	movw	r26, r24
    1f24:	8c 19       	sub	r24, r12
    1f26:	9d 09       	sbc	r25, r13
    1f28:	ae 09       	sbc	r26, r14
    1f2a:	bf 09       	sbc	r27, r15
    1f2c:	bc 01       	movw	r22, r24
    1f2e:	cd 01       	movw	r24, r26
    1f30:	71 2c       	mov	r7, r1
	int32_t sign;
	if ((sign = n) < 0) // record sign
	n = -n; // make n positive
	i = 0;
	do { // generate digits in reverse order
		s[i++] = n % 10 + '0'; // get next digit
    1f32:	0f 2e       	mov	r0, r31
    1f34:	fa e0       	ldi	r31, 0x0A	; 10
    1f36:	8f 2e       	mov	r8, r31
    1f38:	91 2c       	mov	r9, r1
    1f3a:	a1 2c       	mov	r10, r1
    1f3c:	b1 2c       	mov	r11, r1
    1f3e:	f0 2d       	mov	r31, r0
    1f40:	01 c0       	rjmp	.+2      	; 0x1f44 <FUNCi32toa+0x50>
    1f42:	76 2c       	mov	r7, r6
    1f44:	66 24       	eor	r6, r6
    1f46:	63 94       	inc	r6
    1f48:	67 0c       	add	r6, r7
    1f4a:	8e 01       	movw	r16, r28
    1f4c:	07 0d       	add	r16, r7
    1f4e:	11 1d       	adc	r17, r1
    1f50:	a5 01       	movw	r20, r10
    1f52:	94 01       	movw	r18, r8
    1f54:	0e 94 e6 18 	call	0x31cc	; 0x31cc <__divmodsi4>
    1f58:	60 5d       	subi	r22, 0xD0	; 208
    1f5a:	f8 01       	movw	r30, r16
    1f5c:	60 83       	st	Z, r22
	}while ((n /= 10) > 0); // delete it
    1f5e:	62 2f       	mov	r22, r18
    1f60:	73 2f       	mov	r23, r19
    1f62:	84 2f       	mov	r24, r20
    1f64:	95 2f       	mov	r25, r21
    1f66:	16 16       	cp	r1, r22
    1f68:	17 06       	cpc	r1, r23
    1f6a:	18 06       	cpc	r1, r24
    1f6c:	19 06       	cpc	r1, r25
    1f6e:	4c f3       	brlt	.-46     	; 0x1f42 <FUNCi32toa+0x4e>
	if (sign < 0)
    1f70:	ff 20       	and	r15, r15
    1f72:	4c f4       	brge	.+18     	; 0x1f86 <FUNCi32toa+0x92>
	s[i++] = '-';
    1f74:	fe 01       	movw	r30, r28
    1f76:	e6 0d       	add	r30, r6
    1f78:	f1 1d       	adc	r31, r1
    1f7a:	8d e2       	ldi	r24, 0x2D	; 45
    1f7c:	80 83       	st	Z, r24
    1f7e:	68 94       	set
    1f80:	66 24       	eor	r6, r6
    1f82:	61 f8       	bld	r6, 1
    1f84:	67 0c       	add	r6, r7
	s[i] = '\0';
    1f86:	fe 01       	movw	r30, r28
    1f88:	e6 0d       	add	r30, r6
    1f8a:	f1 1d       	adc	r31, r1
    1f8c:	10 82       	st	Z, r1
	Reverse(s);
    1f8e:	ce 01       	movw	r24, r28
    1f90:	94 df       	rcall	.-216    	; 0x1eba <Reverse>
}
    1f92:	df 91       	pop	r29
    1f94:	cf 91       	pop	r28
    1f96:	1f 91       	pop	r17
    1f98:	0f 91       	pop	r16
    1f9a:	ff 90       	pop	r15
    1f9c:	ef 90       	pop	r14
    1f9e:	df 90       	pop	r13
    1fa0:	cf 90       	pop	r12
    1fa2:	bf 90       	pop	r11
    1fa4:	af 90       	pop	r10
    1fa6:	9f 90       	pop	r9
    1fa8:	8f 90       	pop	r8
    1faa:	7f 90       	pop	r7
    1fac:	6f 90       	pop	r6
    1fae:	08 95       	ret

00001fb0 <FUNCi16toa>:
// i16toa: convert n to characters in s
void FUNCi16toa(int16_t n, char s[])
{
    1fb0:	ef 92       	push	r14
    1fb2:	ff 92       	push	r15
    1fb4:	0f 93       	push	r16
    1fb6:	1f 93       	push	r17
    1fb8:	cf 93       	push	r28
    1fba:	df 93       	push	r29
    1fbc:	8c 01       	movw	r16, r24
    1fbe:	eb 01       	movw	r28, r22
    1fc0:	99 23       	and	r25, r25
    1fc2:	24 f4       	brge	.+8      	; 0x1fcc <FUNCi16toa+0x1c>
    1fc4:	88 27       	eor	r24, r24
    1fc6:	99 27       	eor	r25, r25
    1fc8:	80 1b       	sub	r24, r16
    1fca:	91 0b       	sbc	r25, r17
    1fcc:	20 e0       	ldi	r18, 0x00	; 0
	int16_t sign;
	if ((sign = n) < 0) // record sign
		n = -n; // make n positive
	i = 0;
	do { // generate digits in reverse order
		s[i++] = n % 10 + '0'; // get next digit
    1fce:	0f 2e       	mov	r0, r31
    1fd0:	fa e0       	ldi	r31, 0x0A	; 10
    1fd2:	ef 2e       	mov	r14, r31
    1fd4:	f1 2c       	mov	r15, r1
    1fd6:	f0 2d       	mov	r31, r0
    1fd8:	01 c0       	rjmp	.+2      	; 0x1fdc <FUNCi16toa+0x2c>
    1fda:	23 2f       	mov	r18, r19
    1fdc:	31 e0       	ldi	r19, 0x01	; 1
    1fde:	32 0f       	add	r19, r18
    1fe0:	fe 01       	movw	r30, r28
    1fe2:	e2 0f       	add	r30, r18
    1fe4:	f1 1d       	adc	r31, r1
    1fe6:	b7 01       	movw	r22, r14
    1fe8:	0e 94 b1 18 	call	0x3162	; 0x3162 <__divmodhi4>
    1fec:	80 5d       	subi	r24, 0xD0	; 208
    1fee:	80 83       	st	Z, r24
	}while ((n /= 10) > 0); // delete it
    1ff0:	86 2f       	mov	r24, r22
    1ff2:	97 2f       	mov	r25, r23
    1ff4:	18 16       	cp	r1, r24
    1ff6:	19 06       	cpc	r1, r25
    1ff8:	84 f3       	brlt	.-32     	; 0x1fda <FUNCi16toa+0x2a>
	if (sign < 0)
    1ffa:	11 23       	and	r17, r17
    1ffc:	3c f4       	brge	.+14     	; 0x200c <FUNCi16toa+0x5c>
		s[i++] = '-';
    1ffe:	fe 01       	movw	r30, r28
    2000:	e3 0f       	add	r30, r19
    2002:	f1 1d       	adc	r31, r1
    2004:	8d e2       	ldi	r24, 0x2D	; 45
    2006:	80 83       	st	Z, r24
    2008:	32 e0       	ldi	r19, 0x02	; 2
    200a:	32 0f       	add	r19, r18
	s[i] = '\0';
    200c:	fe 01       	movw	r30, r28
    200e:	e3 0f       	add	r30, r19
    2010:	f1 1d       	adc	r31, r1
    2012:	10 82       	st	Z, r1
	Reverse(s);
    2014:	ce 01       	movw	r24, r28
    2016:	51 df       	rcall	.-350    	; 0x1eba <Reverse>
}
    2018:	df 91       	pop	r29
    201a:	cf 91       	pop	r28
    201c:	1f 91       	pop	r17
    201e:	0f 91       	pop	r16
    2020:	ff 90       	pop	r15
    2022:	ef 90       	pop	r14
    2024:	08 95       	ret

00002026 <FUNCui16toa>:
// ui16toa: convert n to characters in s
void FUNCui16toa(uint16_t n, char s[])
{
    2026:	1f 93       	push	r17
    2028:	cf 93       	push	r28
    202a:	df 93       	push	r29
    202c:	ac 01       	movw	r20, r24
    202e:	fb 01       	movw	r30, r22
	uint8_t i;
	i = 0;
    2030:	80 e0       	ldi	r24, 0x00	; 0
	do { // generate digits in reverse order
		s[i++] = n % 10 + '0'; // get next digit
    2032:	11 e0       	ldi	r17, 0x01	; 1
    2034:	18 0f       	add	r17, r24
    2036:	ef 01       	movw	r28, r30
    2038:	c8 0f       	add	r28, r24
    203a:	d1 1d       	adc	r29, r1
    203c:	9a 01       	movw	r18, r20
    203e:	ad ec       	ldi	r26, 0xCD	; 205
    2040:	bc ec       	ldi	r27, 0xCC	; 204
    2042:	0e 94 0b 19 	call	0x3216	; 0x3216 <__umulhisi3>
    2046:	96 95       	lsr	r25
    2048:	87 95       	ror	r24
    204a:	96 95       	lsr	r25
    204c:	87 95       	ror	r24
    204e:	96 95       	lsr	r25
    2050:	87 95       	ror	r24
    2052:	9c 01       	movw	r18, r24
    2054:	22 0f       	add	r18, r18
    2056:	33 1f       	adc	r19, r19
    2058:	88 0f       	add	r24, r24
    205a:	99 1f       	adc	r25, r25
    205c:	88 0f       	add	r24, r24
    205e:	99 1f       	adc	r25, r25
    2060:	88 0f       	add	r24, r24
    2062:	99 1f       	adc	r25, r25
    2064:	82 0f       	add	r24, r18
    2066:	93 1f       	adc	r25, r19
    2068:	9a 01       	movw	r18, r20
    206a:	28 1b       	sub	r18, r24
    206c:	39 0b       	sbc	r19, r25
    206e:	c9 01       	movw	r24, r18
    2070:	80 5d       	subi	r24, 0xD0	; 208
    2072:	88 83       	st	Y, r24
	}while ((n /= 10) > 0); // delete it
    2074:	9a 01       	movw	r18, r20
    2076:	0e 94 0b 19 	call	0x3216	; 0x3216 <__umulhisi3>
    207a:	ac 01       	movw	r20, r24
    207c:	56 95       	lsr	r21
    207e:	47 95       	ror	r20
    2080:	56 95       	lsr	r21
    2082:	47 95       	ror	r20
    2084:	56 95       	lsr	r21
    2086:	47 95       	ror	r20
void FUNCui16toa(uint16_t n, char s[])
{
	uint8_t i;
	i = 0;
	do { // generate digits in reverse order
		s[i++] = n % 10 + '0'; // get next digit
    2088:	81 2f       	mov	r24, r17
	}while ((n /= 10) > 0); // delete it
    208a:	41 15       	cp	r20, r1
    208c:	51 05       	cpc	r21, r1
    208e:	89 f6       	brne	.-94     	; 0x2032 <FUNCui16toa+0xc>
	s[i] = '\0';
    2090:	df 01       	movw	r26, r30
    2092:	a1 0f       	add	r26, r17
    2094:	b1 1d       	adc	r27, r1
    2096:	1c 92       	st	X, r1
	Reverse(s);
    2098:	cf 01       	movw	r24, r30
    209a:	0f df       	rcall	.-482    	; 0x1eba <Reverse>
}
    209c:	df 91       	pop	r29
    209e:	cf 91       	pop	r28
    20a0:	1f 91       	pop	r17
    20a2:	08 95       	ret

000020a4 <FUNCbcd2bin>:
		s[j] = c;
	}
}
unsigned char FUNCbcd2bin(unsigned char val)
{
	return (val & 0x0f) + (val >> 4) * 10;
    20a4:	98 2f       	mov	r25, r24
    20a6:	92 95       	swap	r25
    20a8:	9f 70       	andi	r25, 0x0F	; 15
    20aa:	99 0f       	add	r25, r25
    20ac:	29 2f       	mov	r18, r25
    20ae:	22 0f       	add	r18, r18
    20b0:	22 0f       	add	r18, r18
    20b2:	92 0f       	add	r25, r18
    20b4:	8f 70       	andi	r24, 0x0F	; 15
}
    20b6:	89 0f       	add	r24, r25
    20b8:	08 95       	ret

000020ba <FUNCbin2bcd>:
unsigned char FUNCbin2bcd(unsigned val)
{
    20ba:	ac 01       	movw	r20, r24
	return ((val / 10) << 4) + val % 10;
    20bc:	9c 01       	movw	r18, r24
    20be:	ad ec       	ldi	r26, 0xCD	; 205
    20c0:	bc ec       	ldi	r27, 0xCC	; 204
    20c2:	0e 94 0b 19 	call	0x3216	; 0x3216 <__umulhisi3>
    20c6:	96 95       	lsr	r25
    20c8:	87 95       	ror	r24
    20ca:	96 95       	lsr	r25
    20cc:	87 95       	ror	r24
    20ce:	96 95       	lsr	r25
    20d0:	87 95       	ror	r24
    20d2:	bc 01       	movw	r22, r24
    20d4:	66 0f       	add	r22, r22
    20d6:	77 1f       	adc	r23, r23
    20d8:	9c 01       	movw	r18, r24
    20da:	22 0f       	add	r18, r18
    20dc:	33 1f       	adc	r19, r19
    20de:	22 0f       	add	r18, r18
    20e0:	33 1f       	adc	r19, r19
    20e2:	22 0f       	add	r18, r18
    20e4:	33 1f       	adc	r19, r19
    20e6:	26 0f       	add	r18, r22
    20e8:	37 1f       	adc	r19, r23
    20ea:	42 1b       	sub	r20, r18
    20ec:	53 0b       	sbc	r21, r19
}
    20ee:	34 2f       	mov	r19, r20
    20f0:	20 e1       	ldi	r18, 0x10	; 16
    20f2:	82 9f       	mul	r24, r18
    20f4:	30 0d       	add	r19, r0
    20f6:	11 24       	eor	r1, r1
    20f8:	83 2f       	mov	r24, r19
    20fa:	08 95       	ret

000020fc <FUNCgcd1>:
long FUNCgcd1(long a, long b)
{
    20fc:	cf 92       	push	r12
    20fe:	df 92       	push	r13
    2100:	ef 92       	push	r14
    2102:	ff 92       	push	r15
    2104:	cf 93       	push	r28
    2106:	df 93       	push	r29
    2108:	cd b7       	in	r28, 0x3d	; 61
    210a:	de b7       	in	r29, 0x3e	; 62
    210c:	28 97       	sbiw	r28, 0x08	; 8
    210e:	0f b6       	in	r0, 0x3f	; 63
    2110:	f8 94       	cli
    2112:	de bf       	out	0x3e, r29	; 62
    2114:	0f be       	out	0x3f, r0	; 63
    2116:	cd bf       	out	0x3d, r28	; 61
    2118:	6b 01       	movw	r12, r22
    211a:	7c 01       	movw	r14, r24
    211c:	69 83       	std	Y+1, r22	; 0x01
    211e:	7a 83       	std	Y+2, r23	; 0x02
    2120:	8b 83       	std	Y+3, r24	; 0x03
    2122:	9c 83       	std	Y+4, r25	; 0x04
    2124:	2d 83       	std	Y+5, r18	; 0x05
    2126:	3e 83       	std	Y+6, r19	; 0x06
    2128:	4f 83       	std	Y+7, r20	; 0x07
    212a:	58 87       	std	Y+8, r21	; 0x08
	long r;
	if (a < b)
    212c:	c2 16       	cp	r12, r18
    212e:	d3 06       	cpc	r13, r19
    2130:	e4 06       	cpc	r14, r20
    2132:	f5 06       	cpc	r15, r21
    2134:	34 f4       	brge	.+12     	; 0x2142 <FUNCgcd1+0x46>
		FUNCswap(&a, &b);
    2136:	be 01       	movw	r22, r28
    2138:	6b 5f       	subi	r22, 0xFB	; 251
    213a:	7f 4f       	sbci	r23, 0xFF	; 255
    213c:	ce 01       	movw	r24, r28
    213e:	01 96       	adiw	r24, 0x01	; 1
    2140:	7f dc       	rcall	.-1794   	; 0x1a40 <FUNCswap>
	if (!b){
    2142:	8d 81       	ldd	r24, Y+5	; 0x05
    2144:	9e 81       	ldd	r25, Y+6	; 0x06
    2146:	af 81       	ldd	r26, Y+7	; 0x07
    2148:	b8 85       	ldd	r27, Y+8	; 0x08
    214a:	89 2b       	or	r24, r25
    214c:	8a 2b       	or	r24, r26
    214e:	8b 2b       	or	r24, r27
    2150:	71 f4       	brne	.+28     	; 0x216e <FUNCgcd1+0x72>
		while ((r = a % b) != 0) {
    2152:	69 81       	ldd	r22, Y+1	; 0x01
    2154:	7a 81       	ldd	r23, Y+2	; 0x02
    2156:	8b 81       	ldd	r24, Y+3	; 0x03
    2158:	9c 81       	ldd	r25, Y+4	; 0x04
    215a:	20 e0       	ldi	r18, 0x00	; 0
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	a9 01       	movw	r20, r18
    2160:	0e 94 e6 18 	call	0x31cc	; 0x31cc <__divmodsi4>
    2164:	61 15       	cp	r22, r1
    2166:	71 05       	cpc	r23, r1
    2168:	81 05       	cpc	r24, r1
    216a:	91 05       	cpc	r25, r1
    216c:	29 f4       	brne	.+10     	; 0x2178 <FUNCgcd1+0x7c>
			a = b;
			b = r;
		}
	}	
	return b;
    216e:	6d 81       	ldd	r22, Y+5	; 0x05
    2170:	7e 81       	ldd	r23, Y+6	; 0x06
    2172:	8f 81       	ldd	r24, Y+7	; 0x07
    2174:	98 85       	ldd	r25, Y+8	; 0x08
    2176:	05 c0       	rjmp	.+10     	; 0x2182 <FUNCgcd1+0x86>
	if (a < b)
		FUNCswap(&a, &b);
	if (!b){
		while ((r = a % b) != 0) {
			a = b;
			b = r;
    2178:	6d 83       	std	Y+5, r22	; 0x05
    217a:	7e 83       	std	Y+6, r23	; 0x06
    217c:	8f 83       	std	Y+7, r24	; 0x07
    217e:	98 87       	std	Y+8, r25	; 0x08
    2180:	f6 cf       	rjmp	.-20     	; 0x216e <FUNCgcd1+0x72>
		}
	}	
	return b;
}
    2182:	28 96       	adiw	r28, 0x08	; 8
    2184:	0f b6       	in	r0, 0x3f	; 63
    2186:	f8 94       	cli
    2188:	de bf       	out	0x3e, r29	; 62
    218a:	0f be       	out	0x3f, r0	; 63
    218c:	cd bf       	out	0x3d, r28	; 61
    218e:	df 91       	pop	r29
    2190:	cf 91       	pop	r28
    2192:	ff 90       	pop	r15
    2194:	ef 90       	pop	r14
    2196:	df 90       	pop	r13
    2198:	cf 90       	pop	r12
    219a:	08 95       	ret

0000219c <FUNCpincheck>:
	uint8_t lh;
	if(port & (1<<pin))
		lh=1;
	else
		lh=0;
	return lh;
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	02 c0       	rjmp	.+4      	; 0x21a4 <FUNCpincheck+0x8>
    21a0:	95 95       	asr	r25
    21a2:	87 95       	ror	r24
    21a4:	6a 95       	dec	r22
    21a6:	e2 f7       	brpl	.-8      	; 0x21a0 <FUNCpincheck+0x4>
}
    21a8:	81 70       	andi	r24, 0x01	; 1
    21aa:	08 95       	ret

000021ac <FUNCprint_binary>:
char* FUNCprint_binary(uint8_t number)
{
    21ac:	ef e4       	ldi	r30, 0x4F	; 79
    21ae:	f2 e0       	ldi	r31, 0x02	; 2
	uint8_t i,c;
    for(i=128,c=0;i;i>>=1,c++){
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	20 e8       	ldi	r18, 0x80	; 128
	(number & i) ? (FUNCstr[c]='1') : (FUNCstr[c]='0');
    21b4:	50 e3       	ldi	r21, 0x30	; 48
    21b6:	41 e3       	ldi	r20, 0x31	; 49
    21b8:	38 2f       	mov	r19, r24
    21ba:	32 23       	and	r19, r18
    21bc:	11 f0       	breq	.+4      	; 0x21c2 <FUNCprint_binary+0x16>
    21be:	40 83       	st	Z, r20
    21c0:	01 c0       	rjmp	.+2      	; 0x21c4 <FUNCprint_binary+0x18>
    21c2:	50 83       	st	Z, r21
	return lh;
}
char* FUNCprint_binary(uint8_t number)
{
	uint8_t i,c;
    for(i=128,c=0;i;i>>=1,c++){
    21c4:	26 95       	lsr	r18
    21c6:	9f 5f       	subi	r25, 0xFF	; 255
    21c8:	31 96       	adiw	r30, 0x01	; 1
    21ca:	98 30       	cpi	r25, 0x08	; 8
    21cc:	a9 f7       	brne	.-22     	; 0x21b8 <FUNCprint_binary+0xc>
	(number & i) ? (FUNCstr[c]='1') : (FUNCstr[c]='0');
	}
	FUNCstr[c]='\0';
    21ce:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <FUNCstr+0x8>
	return FUNCstr;
}
    21d2:	8f e4       	ldi	r24, 0x4F	; 79
    21d4:	92 e0       	ldi	r25, 0x02	; 2
    21d6:	08 95       	ret

000021d8 <FUNCmayia>:
// power: raise base to n-th power; n >= 0
unsigned int Power(uint8_t base, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
    21d8:	a4 2f       	mov	r26, r20
    21da:	b0 e0       	ldi	r27, 0x00	; 0
    21dc:	10 97       	sbiw	r26, 0x00	; 0
    21de:	61 f0       	breq	.+24     	; 0x21f8 <FUNCmayia+0x20>
    21e0:	21 e0       	ldi	r18, 0x01	; 1
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	e1 e0       	ldi	r30, 0x01	; 1
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
        p = p * base;
    21e8:	ee 0f       	add	r30, r30
    21ea:	ff 1f       	adc	r31, r31
// power: raise base to n-th power; n >= 0
unsigned int Power(uint8_t base, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
    21ec:	2f 5f       	subi	r18, 0xFF	; 255
    21ee:	3f 4f       	sbci	r19, 0xFF	; 255
    21f0:	a2 17       	cp	r26, r18
    21f2:	b3 07       	cpc	r27, r19
    21f4:	c8 f7       	brcc	.-14     	; 0x21e8 <FUNCmayia+0x10>
    21f6:	02 c0       	rjmp	.+4      	; 0x21fc <FUNCmayia+0x24>
}
// power: raise base to n-th power; n >= 0
unsigned int Power(uint8_t base, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    21f8:	e1 e0       	ldi	r30, 0x01	; 1
    21fa:	f0 e0       	ldi	r31, 0x00	; 0
unsigned int FUNCmayia(unsigned int xi, unsigned int xf, uint8_t nbits)
{//magic formula
	unsigned int mask;
	unsigned int diff;
	unsigned int trans;
	mask=Power(2,nbits)-1;
    21fc:	31 97       	sbiw	r30, 0x01	; 1
	xi&=mask;
	xf&=mask;
    21fe:	6e 23       	and	r22, r30
    2200:	7f 23       	and	r23, r31
	diff=xf^xi;
    2202:	8e 23       	and	r24, r30
    2204:	9f 23       	and	r25, r31
    2206:	86 27       	eor	r24, r22
    2208:	97 27       	eor	r25, r23
	trans=diff&xf;
	return (trans<<nbits)|diff;
    220a:	68 23       	and	r22, r24
    220c:	79 23       	and	r23, r25
    220e:	02 c0       	rjmp	.+4      	; 0x2214 <FUNCmayia+0x3c>
    2210:	66 0f       	add	r22, r22
    2212:	77 1f       	adc	r23, r23
    2214:	4a 95       	dec	r20
    2216:	e2 f7       	brpl	.-8      	; 0x2210 <FUNCmayia+0x38>
}
    2218:	86 2b       	or	r24, r22
    221a:	97 2b       	or	r25, r23
    221c:	08 95       	ret

0000221e <FUNCenable>:
// uint8_t TRANupdate(struct TRAN *tr, uint8_t idata);
/*
** procedure and function
*/
FUNC FUNCenable( void )
{
    221e:	fc 01       	movw	r30, r24
	uint8_t tSREG;
	tSREG=SREG;
    2220:	9f b7       	in	r25, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    2222:	8f b7       	in	r24, 0x3f	; 63
    2224:	8f 77       	andi	r24, 0x7F	; 127
    2226:	8f bf       	out	0x3f, r24	; 63
	func.putstr=FUNCputstr;
	func.getnum=FUNCgetnum;
	func.getnumv2=FUNCgetnumv2;
	func.readint=FUNCreadint;
	*/
	SREG=tSREG;
    2228:	9f bf       	out	0x3f, r25	; 63
	/******/
	return func;
    222a:	88 e1       	ldi	r24, 0x18	; 24
    222c:	9f e0       	ldi	r25, 0x0F	; 15
    222e:	91 83       	std	Z+1, r25	; 0x01
    2230:	80 83       	st	Z, r24
    2232:	83 e3       	ldi	r24, 0x33	; 51
    2234:	9f e0       	ldi	r25, 0x0F	; 15
    2236:	93 83       	std	Z+3, r25	; 0x03
    2238:	82 83       	std	Z+2, r24	; 0x02
    223a:	8d e5       	ldi	r24, 0x5D	; 93
    223c:	9f e0       	ldi	r25, 0x0F	; 15
    223e:	95 83       	std	Z+5, r25	; 0x05
    2240:	84 83       	std	Z+4, r24	; 0x04
    2242:	8c ee       	ldi	r24, 0xEC	; 236
    2244:	90 e1       	ldi	r25, 0x10	; 16
    2246:	97 83       	std	Z+7, r25	; 0x07
    2248:	86 83       	std	Z+6, r24	; 0x06
    224a:	85 e0       	ldi	r24, 0x05	; 5
    224c:	9d e0       	ldi	r25, 0x0D	; 13
    224e:	91 87       	std	Z+9, r25	; 0x09
    2250:	80 87       	std	Z+8, r24	; 0x08
    2252:	83 e1       	ldi	r24, 0x13	; 19
    2254:	9d e0       	ldi	r25, 0x0D	; 13
    2256:	93 87       	std	Z+11, r25	; 0x0b
    2258:	82 87       	std	Z+10, r24	; 0x0a
    225a:	85 e1       	ldi	r24, 0x15	; 21
    225c:	9d e0       	ldi	r25, 0x0D	; 13
    225e:	95 87       	std	Z+13, r25	; 0x0d
    2260:	84 87       	std	Z+12, r24	; 0x0c
    2262:	88 e1       	ldi	r24, 0x18	; 24
    2264:	9d e0       	ldi	r25, 0x0D	; 13
    2266:	97 87       	std	Z+15, r25	; 0x0f
    2268:	86 87       	std	Z+14, r24	; 0x0e
    226a:	8b e1       	ldi	r24, 0x1B	; 27
    226c:	9d e0       	ldi	r25, 0x0D	; 13
    226e:	91 8b       	std	Z+17, r25	; 0x11
    2270:	80 8b       	std	Z+16, r24	; 0x10
    2272:	8e e1       	ldi	r24, 0x1E	; 30
    2274:	9d e0       	ldi	r25, 0x0D	; 13
    2276:	93 8b       	std	Z+19, r25	; 0x13
    2278:	82 8b       	std	Z+18, r24	; 0x12
    227a:	8f e0       	ldi	r24, 0x0F	; 15
    227c:	9d e0       	ldi	r25, 0x0D	; 13
    227e:	95 8b       	std	Z+21, r25	; 0x15
    2280:	84 8b       	std	Z+20, r24	; 0x14
    2282:	81 e1       	ldi	r24, 0x11	; 17
    2284:	9d e0       	ldi	r25, 0x0D	; 13
    2286:	97 8b       	std	Z+23, r25	; 0x17
    2288:	86 8b       	std	Z+22, r24	; 0x16
    228a:	80 e2       	ldi	r24, 0x20	; 32
    228c:	9d e0       	ldi	r25, 0x0D	; 13
    228e:	91 8f       	std	Z+25, r25	; 0x19
    2290:	80 8f       	std	Z+24, r24	; 0x18
    2292:	81 e4       	ldi	r24, 0x41	; 65
    2294:	9d e0       	ldi	r25, 0x0D	; 13
    2296:	93 8f       	std	Z+27, r25	; 0x1b
    2298:	82 8f       	std	Z+26, r24	; 0x1a
    229a:	8f e4       	ldi	r24, 0x4F	; 79
    229c:	9d e0       	ldi	r25, 0x0D	; 13
    229e:	95 8f       	std	Z+29, r25	; 0x1d
    22a0:	84 8f       	std	Z+28, r24	; 0x1c
    22a2:	81 e7       	ldi	r24, 0x71	; 113
    22a4:	9d e0       	ldi	r25, 0x0D	; 13
    22a6:	97 8f       	std	Z+31, r25	; 0x1f
    22a8:	86 8f       	std	Z+30, r24	; 0x1e
    22aa:	88 ed       	ldi	r24, 0xD8	; 216
    22ac:	9f e0       	ldi	r25, 0x0F	; 15
    22ae:	91 a3       	std	Z+33, r25	; 0x21
    22b0:	80 a3       	std	Z+32, r24	; 0x20
    22b2:	83 e1       	ldi	r24, 0x13	; 19
    22b4:	90 e1       	ldi	r25, 0x10	; 16
    22b6:	93 a3       	std	Z+35, r25	; 0x23
    22b8:	82 a3       	std	Z+34, r24	; 0x22
    22ba:	8a e7       	ldi	r24, 0x7A	; 122
    22bc:	9f e0       	ldi	r25, 0x0F	; 15
    22be:	95 a3       	std	Z+37, r25	; 0x25
    22c0:	84 a3       	std	Z+36, r24	; 0x24
    22c2:	82 e4       	ldi	r24, 0x42	; 66
    22c4:	9f e0       	ldi	r25, 0x0F	; 15
    22c6:	97 a3       	std	Z+39, r25	; 0x27
    22c8:	86 a3       	std	Z+38, r24	; 0x26
    22ca:	87 e1       	ldi	r24, 0x17	; 23
    22cc:	9e e0       	ldi	r25, 0x0E	; 14
    22ce:	91 a7       	std	Z+41, r25	; 0x29
    22d0:	80 a7       	std	Z+40, r24	; 0x28
    22d2:	8c e1       	ldi	r24, 0x1C	; 28
    22d4:	9e e0       	ldi	r25, 0x0E	; 14
    22d6:	93 a7       	std	Z+43, r25	; 0x2b
    22d8:	82 a7       	std	Z+42, r24	; 0x2a
    22da:	8b e2       	ldi	r24, 0x2B	; 43
    22dc:	9e e0       	ldi	r25, 0x0E	; 14
    22de:	95 a7       	std	Z+45, r25	; 0x2d
    22e0:	84 a7       	std	Z+44, r24	; 0x2c
    22e2:	8f e4       	ldi	r24, 0x4F	; 79
    22e4:	9e e0       	ldi	r25, 0x0E	; 14
    22e6:	97 a7       	std	Z+47, r25	; 0x2f
    22e8:	86 a7       	std	Z+46, r24	; 0x2e
    22ea:	81 e5       	ldi	r24, 0x51	; 81
    22ec:	9e e0       	ldi	r25, 0x0E	; 14
    22ee:	91 ab       	std	Z+49, r25	; 0x31
    22f0:	80 ab       	std	Z+48, r24	; 0x30
    22f2:	8b e5       	ldi	r24, 0x5B	; 91
    22f4:	9e e0       	ldi	r25, 0x0E	; 14
    22f6:	93 ab       	std	Z+51, r25	; 0x33
    22f8:	82 ab       	std	Z+50, r24	; 0x32
    22fa:	88 e6       	ldi	r24, 0x68	; 104
    22fc:	9e e0       	ldi	r25, 0x0E	; 14
    22fe:	95 ab       	std	Z+53, r25	; 0x35
    2300:	84 ab       	std	Z+52, r24	; 0x34
    2302:	84 e7       	ldi	r24, 0x74	; 116
    2304:	9e e0       	ldi	r25, 0x0E	; 14
    2306:	97 ab       	std	Z+55, r25	; 0x37
    2308:	86 ab       	std	Z+54, r24	; 0x36
    230a:	8c e8       	ldi	r24, 0x8C	; 140
    230c:	9e e0       	ldi	r25, 0x0E	; 14
    230e:	91 af       	std	Z+57, r25	; 0x39
    2310:	80 af       	std	Z+56, r24	; 0x38
    2312:	8f e9       	ldi	r24, 0x9F	; 159
    2314:	9e e0       	ldi	r25, 0x0E	; 14
    2316:	93 af       	std	Z+59, r25	; 0x3b
    2318:	82 af       	std	Z+58, r24	; 0x3a
    231a:	8a ea       	ldi	r24, 0xAA	; 170
    231c:	9e e0       	ldi	r25, 0x0E	; 14
    231e:	95 af       	std	Z+61, r25	; 0x3d
    2320:	84 af       	std	Z+60, r24	; 0x3c
    2322:	87 ed       	ldi	r24, 0xD7	; 215
    2324:	9e e0       	ldi	r25, 0x0E	; 14
    2326:	97 af       	std	Z+63, r25	; 0x3f
    2328:	86 af       	std	Z+62, r24	; 0x3e
    232a:	df 01       	movw	r26, r30
    232c:	a0 5c       	subi	r26, 0xC0	; 192
    232e:	bf 4f       	sbci	r27, 0xFF	; 255
    2330:	82 e5       	ldi	r24, 0x52	; 82
    2332:	90 e1       	ldi	r25, 0x10	; 16
    2334:	11 96       	adiw	r26, 0x01	; 1
    2336:	9c 93       	st	X, r25
    2338:	8e 93       	st	-X, r24
    233a:	12 96       	adiw	r26, 0x02	; 2
    233c:	8d e5       	ldi	r24, 0x5D	; 93
    233e:	90 e1       	ldi	r25, 0x10	; 16
    2340:	11 96       	adiw	r26, 0x01	; 1
    2342:	9c 93       	st	X, r25
    2344:	8e 93       	st	-X, r24
    2346:	12 96       	adiw	r26, 0x02	; 2
    2348:	8e e7       	ldi	r24, 0x7E	; 126
    234a:	90 e1       	ldi	r25, 0x10	; 16
    234c:	11 96       	adiw	r26, 0x01	; 1
    234e:	9c 93       	st	X, r25
    2350:	8e 93       	st	-X, r24
    2352:	12 96       	adiw	r26, 0x02	; 2
    2354:	8e ec       	ldi	r24, 0xCE	; 206
    2356:	90 e1       	ldi	r25, 0x10	; 16
    2358:	11 96       	adiw	r26, 0x01	; 1
    235a:	9c 93       	st	X, r25
    235c:	8e 93       	st	-X, r24
    235e:	12 96       	adiw	r26, 0x02	; 2
    2360:	86 ed       	ldi	r24, 0xD6	; 214
    2362:	90 e1       	ldi	r25, 0x10	; 16
    2364:	8d 93       	st	X+, r24
    2366:	9c 93       	st	X, r25
}
    2368:	cf 01       	movw	r24, r30
    236a:	08 95       	ret

0000236c <KEYPAD_flush>:
	return data;
}
/***flush***/
void KEYPAD_flush(void)
{
	KEYPADSTRINGINDEX=0;
    236c:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <KEYPADSTRINGINDEX>
	keypadstring[KEYPADSTRINGINDEX]='\0';
    2370:	e0 91 78 02 	lds	r30, 0x0278	; 0x800278 <KEYPADSTRINGINDEX>
    2374:	f0 e0       	ldi	r31, 0x00	; 0
    2376:	ef 59       	subi	r30, 0x9F	; 159
    2378:	fd 4f       	sbci	r31, 0xFD	; 253
    237a:	10 82       	st	Z, r1
    237c:	08 95       	ret

0000237e <KEYPAD_getkey>:
	*keypad_PORT|=(1<<KEYPADLINE_1) | (1<<KEYPADLINE_2) | (1<<KEYPADLINE_3) | (1<<KEYPADLINE_4);
	//Going to use pull down method.
	return keypad;
}
char KEYPAD_getkey(void)
{
    237e:	cf 93       	push	r28
    2380:	df 93       	push	r29
    2382:	21 e0       	ldi	r18, 0x01	; 1
	uint8_t HL;
	char c='\0';
    2384:	80 e0       	ldi	r24, 0x00	; 0
				*keypad_PORT|=(1<<KEYPADLINE_1);
				break;
			case 1: //line 2 index 1
				*keypad_DDR|=(1<<KEYPADLINE_2);
				*keypad_PORT&=~(1<<KEYPADLINE_2);
				keypad_dataf.line_2=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    2386:	a0 e7       	ldi	r26, 0x70	; 112
    2388:	b2 e0       	ldi	r27, 0x02	; 2
				HL=KEYPADhl(keypad_datai.line_2,keypad_dataf.line_2);
    238a:	e4 e7       	ldi	r30, 0x74	; 116
    238c:	f2 e0       	ldi	r31, 0x02	; 2
					if(HL == (1<<KEYPADDATA_2))
						c=keypadvalue[1][1];
					if(HL == (1<<KEYPADDATA_3))
						c=keypadvalue[1][2];
					if(HL == (1<<KEYPADDATA_4))
						c=keypadvalue[1][3];
    238e:	60 e0       	ldi	r22, 0x00	; 0
    2390:	71 e0       	ldi	r23, 0x01	; 1
    2392:	01 c0       	rjmp	.+2      	; 0x2396 <KEYPAD_getkey+0x18>
    2394:	2f 5f       	subi	r18, 0xFF	; 255
{
	uint8_t HL;
	char c='\0';
	uint8_t keypad_option;
	for(keypad_option=0;keypad_option<KEYPADLINES;keypad_option++){
		switch (keypad_option)
    2396:	9f ef       	ldi	r25, 0xFF	; 255
    2398:	92 0f       	add	r25, r18
    239a:	91 30       	cpi	r25, 0x01	; 1
    239c:	09 f4       	brne	.+2      	; 0x23a0 <KEYPAD_getkey+0x22>
    239e:	4b c0       	rjmp	.+150    	; 0x2436 <KEYPAD_getkey+0xb8>
    23a0:	38 f0       	brcs	.+14     	; 0x23b0 <KEYPAD_getkey+0x32>
    23a2:	92 30       	cpi	r25, 0x02	; 2
    23a4:	09 f4       	brne	.+2      	; 0x23a8 <KEYPAD_getkey+0x2a>
    23a6:	8c c0       	rjmp	.+280    	; 0x24c0 <KEYPAD_getkey+0x142>
    23a8:	93 30       	cpi	r25, 0x03	; 3
    23aa:	09 f4       	brne	.+2      	; 0x23ae <KEYPAD_getkey+0x30>
    23ac:	ce c0       	rjmp	.+412    	; 0x254a <KEYPAD_getkey+0x1cc>
    23ae:	0e c1       	rjmp	.+540    	; 0x25cc <KEYPAD_getkey+0x24e>
		{
			case 0: //line 1 index 0
				*keypad_DDR|=(1<<KEYPADLINE_1);
    23b0:	40 91 7b 02 	lds	r20, 0x027B	; 0x80027b <keypad_DDR>
    23b4:	50 91 7c 02 	lds	r21, 0x027C	; 0x80027c <keypad_DDR+0x1>
    23b8:	ea 01       	movw	r28, r20
    23ba:	98 81       	ld	r25, Y
    23bc:	90 68       	ori	r25, 0x80	; 128
    23be:	98 83       	st	Y, r25
				*keypad_PORT&=~(1<<KEYPADLINE_1);
    23c0:	40 91 5f 02 	lds	r20, 0x025F	; 0x80025f <keypad_PORT>
    23c4:	50 91 60 02 	lds	r21, 0x0260	; 0x800260 <keypad_PORT+0x1>
    23c8:	ea 01       	movw	r28, r20
    23ca:	98 81       	ld	r25, Y
    23cc:	9f 77       	andi	r25, 0x7F	; 127
    23ce:	98 83       	st	Y, r25
				keypad_dataf.line_1=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    23d0:	40 91 79 02 	lds	r20, 0x0279	; 0x800279 <keypad_PIN>
    23d4:	50 91 7a 02 	lds	r21, 0x027A	; 0x80027a <keypad_PIN+0x1>
    23d8:	ea 01       	movw	r28, r20
    23da:	38 81       	ld	r19, Y
    23dc:	34 77       	andi	r19, 0x74	; 116
    23de:	3c 93       	st	X, r19
				HL=KEYPADhl(keypad_datai.line_1,keypad_dataf.line_1);
    23e0:	90 81       	ld	r25, Z
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
    23e2:	43 2f       	mov	r20, r19
    23e4:	49 27       	eor	r20, r25
    23e6:	94 23       	and	r25, r20
			case 0: //line 1 index 0
				*keypad_DDR|=(1<<KEYPADLINE_1);
				*keypad_PORT&=~(1<<KEYPADLINE_1);
				keypad_dataf.line_1=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_1,keypad_dataf.line_1);
				keypad_datai.line_1=keypad_dataf.line_1;
    23e8:	30 83       	st	Z, r19
				if(HL){
    23ea:	99 23       	and	r25, r25
    23ec:	99 f0       	breq	.+38     	; 0x2414 <KEYPAD_getkey+0x96>
					//decode index line one column what ?
					if(HL == (1<<KEYPADDATA_1))
    23ee:	94 30       	cpi	r25, 0x04	; 4
    23f0:	19 f4       	brne	.+6      	; 0x23f8 <KEYPAD_getkey+0x7a>
						c=keypadvalue[0][0];
    23f2:	eb 01       	movw	r28, r22
    23f4:	88 81       	ld	r24, Y
    23f6:	0a c0       	rjmp	.+20     	; 0x240c <KEYPAD_getkey+0x8e>
					if(HL == (1<<KEYPADDATA_2))
    23f8:	90 31       	cpi	r25, 0x10	; 16
    23fa:	19 f4       	brne	.+6      	; 0x2402 <KEYPAD_getkey+0x84>
						c=keypadvalue[0][1];
    23fc:	eb 01       	movw	r28, r22
    23fe:	89 81       	ldd	r24, Y+1	; 0x01
    2400:	09 c0       	rjmp	.+18     	; 0x2414 <KEYPAD_getkey+0x96>
					if(HL == (1<<KEYPADDATA_3))
    2402:	90 32       	cpi	r25, 0x20	; 32
    2404:	19 f4       	brne	.+6      	; 0x240c <KEYPAD_getkey+0x8e>
						c=keypadvalue[0][2];
    2406:	eb 01       	movw	r28, r22
    2408:	8a 81       	ldd	r24, Y+2	; 0x02
    240a:	04 c0       	rjmp	.+8      	; 0x2414 <KEYPAD_getkey+0x96>
					if(HL == (1<<KEYPADDATA_4))
    240c:	90 34       	cpi	r25, 0x40	; 64
    240e:	11 f4       	brne	.+4      	; 0x2414 <KEYPAD_getkey+0x96>
						c=keypadvalue[0][3];
    2410:	eb 01       	movw	r28, r22
    2412:	8b 81       	ldd	r24, Y+3	; 0x03
				}
				*keypad_DDR&=~(1<<KEYPADLINE_1);
    2414:	40 91 7b 02 	lds	r20, 0x027B	; 0x80027b <keypad_DDR>
    2418:	50 91 7c 02 	lds	r21, 0x027C	; 0x80027c <keypad_DDR+0x1>
    241c:	ea 01       	movw	r28, r20
    241e:	98 81       	ld	r25, Y
    2420:	9f 77       	andi	r25, 0x7F	; 127
    2422:	98 83       	st	Y, r25
				*keypad_PORT|=(1<<KEYPADLINE_1);
    2424:	40 91 5f 02 	lds	r20, 0x025F	; 0x80025f <keypad_PORT>
    2428:	50 91 60 02 	lds	r21, 0x0260	; 0x800260 <keypad_PORT+0x1>
    242c:	ea 01       	movw	r28, r20
    242e:	98 81       	ld	r25, Y
    2430:	90 68       	ori	r25, 0x80	; 128
    2432:	98 83       	st	Y, r25
				break;
    2434:	af cf       	rjmp	.-162    	; 0x2394 <KEYPAD_getkey+0x16>
			case 1: //line 2 index 1
				*keypad_DDR|=(1<<KEYPADLINE_2);
    2436:	40 91 7b 02 	lds	r20, 0x027B	; 0x80027b <keypad_DDR>
    243a:	50 91 7c 02 	lds	r21, 0x027C	; 0x80027c <keypad_DDR+0x1>
    243e:	ea 01       	movw	r28, r20
    2440:	98 81       	ld	r25, Y
    2442:	91 60       	ori	r25, 0x01	; 1
    2444:	98 83       	st	Y, r25
				*keypad_PORT&=~(1<<KEYPADLINE_2);
    2446:	40 91 5f 02 	lds	r20, 0x025F	; 0x80025f <keypad_PORT>
    244a:	50 91 60 02 	lds	r21, 0x0260	; 0x800260 <keypad_PORT+0x1>
    244e:	ea 01       	movw	r28, r20
    2450:	98 81       	ld	r25, Y
    2452:	9e 7f       	andi	r25, 0xFE	; 254
    2454:	98 83       	st	Y, r25
				keypad_dataf.line_2=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    2456:	40 91 79 02 	lds	r20, 0x0279	; 0x800279 <keypad_PIN>
    245a:	50 91 7a 02 	lds	r21, 0x027A	; 0x80027a <keypad_PIN+0x1>
    245e:	ea 01       	movw	r28, r20
    2460:	38 81       	ld	r19, Y
    2462:	34 77       	andi	r19, 0x74	; 116
    2464:	11 96       	adiw	r26, 0x01	; 1
    2466:	3c 93       	st	X, r19
    2468:	11 97       	sbiw	r26, 0x01	; 1
				HL=KEYPADhl(keypad_datai.line_2,keypad_dataf.line_2);
    246a:	91 81       	ldd	r25, Z+1	; 0x01
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
    246c:	43 2f       	mov	r20, r19
    246e:	49 27       	eor	r20, r25
    2470:	94 23       	and	r25, r20
			case 1: //line 2 index 1
				*keypad_DDR|=(1<<KEYPADLINE_2);
				*keypad_PORT&=~(1<<KEYPADLINE_2);
				keypad_dataf.line_2=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_2,keypad_dataf.line_2);
				keypad_datai.line_2=keypad_dataf.line_2;
    2472:	31 83       	std	Z+1, r19	; 0x01
				if(HL){
    2474:	99 23       	and	r25, r25
    2476:	99 f0       	breq	.+38     	; 0x249e <KEYPAD_getkey+0x120>
					//decode index line two column what ?
					if(HL == (1<<KEYPADDATA_1))
    2478:	94 30       	cpi	r25, 0x04	; 4
    247a:	19 f4       	brne	.+6      	; 0x2482 <KEYPAD_getkey+0x104>
						c=keypadvalue[1][0];
    247c:	eb 01       	movw	r28, r22
    247e:	8c 81       	ldd	r24, Y+4	; 0x04
    2480:	0a c0       	rjmp	.+20     	; 0x2496 <KEYPAD_getkey+0x118>
					if(HL == (1<<KEYPADDATA_2))
    2482:	90 31       	cpi	r25, 0x10	; 16
    2484:	19 f4       	brne	.+6      	; 0x248c <KEYPAD_getkey+0x10e>
						c=keypadvalue[1][1];
    2486:	eb 01       	movw	r28, r22
    2488:	8d 81       	ldd	r24, Y+5	; 0x05
    248a:	09 c0       	rjmp	.+18     	; 0x249e <KEYPAD_getkey+0x120>
					if(HL == (1<<KEYPADDATA_3))
    248c:	90 32       	cpi	r25, 0x20	; 32
    248e:	19 f4       	brne	.+6      	; 0x2496 <KEYPAD_getkey+0x118>
						c=keypadvalue[1][2];
    2490:	eb 01       	movw	r28, r22
    2492:	8e 81       	ldd	r24, Y+6	; 0x06
    2494:	04 c0       	rjmp	.+8      	; 0x249e <KEYPAD_getkey+0x120>
					if(HL == (1<<KEYPADDATA_4))
    2496:	90 34       	cpi	r25, 0x40	; 64
    2498:	11 f4       	brne	.+4      	; 0x249e <KEYPAD_getkey+0x120>
						c=keypadvalue[1][3];
    249a:	eb 01       	movw	r28, r22
    249c:	8f 81       	ldd	r24, Y+7	; 0x07
				}
				*keypad_DDR&=~(1<<KEYPADLINE_2);
    249e:	40 91 7b 02 	lds	r20, 0x027B	; 0x80027b <keypad_DDR>
    24a2:	50 91 7c 02 	lds	r21, 0x027C	; 0x80027c <keypad_DDR+0x1>
    24a6:	ea 01       	movw	r28, r20
    24a8:	98 81       	ld	r25, Y
    24aa:	9e 7f       	andi	r25, 0xFE	; 254
    24ac:	98 83       	st	Y, r25
				*keypad_PORT|=(1<<KEYPADLINE_2);
    24ae:	40 91 5f 02 	lds	r20, 0x025F	; 0x80025f <keypad_PORT>
    24b2:	50 91 60 02 	lds	r21, 0x0260	; 0x800260 <keypad_PORT+0x1>
    24b6:	ea 01       	movw	r28, r20
    24b8:	98 81       	ld	r25, Y
    24ba:	91 60       	ori	r25, 0x01	; 1
    24bc:	98 83       	st	Y, r25
				break;
    24be:	6a cf       	rjmp	.-300    	; 0x2394 <KEYPAD_getkey+0x16>
			case 2: //line 3 index 2
				*keypad_DDR|=(1<<KEYPADLINE_3);
    24c0:	40 91 7b 02 	lds	r20, 0x027B	; 0x80027b <keypad_DDR>
    24c4:	50 91 7c 02 	lds	r21, 0x027C	; 0x80027c <keypad_DDR+0x1>
    24c8:	ea 01       	movw	r28, r20
    24ca:	98 81       	ld	r25, Y
    24cc:	92 60       	ori	r25, 0x02	; 2
    24ce:	98 83       	st	Y, r25
				*keypad_PORT&=~(1<<KEYPADLINE_3);
    24d0:	40 91 5f 02 	lds	r20, 0x025F	; 0x80025f <keypad_PORT>
    24d4:	50 91 60 02 	lds	r21, 0x0260	; 0x800260 <keypad_PORT+0x1>
    24d8:	ea 01       	movw	r28, r20
    24da:	98 81       	ld	r25, Y
    24dc:	9d 7f       	andi	r25, 0xFD	; 253
    24de:	98 83       	st	Y, r25
				keypad_dataf.line_3=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    24e0:	40 91 79 02 	lds	r20, 0x0279	; 0x800279 <keypad_PIN>
    24e4:	50 91 7a 02 	lds	r21, 0x027A	; 0x80027a <keypad_PIN+0x1>
    24e8:	ea 01       	movw	r28, r20
    24ea:	38 81       	ld	r19, Y
    24ec:	34 77       	andi	r19, 0x74	; 116
    24ee:	12 96       	adiw	r26, 0x02	; 2
    24f0:	3c 93       	st	X, r19
    24f2:	12 97       	sbiw	r26, 0x02	; 2
				HL=KEYPADhl(keypad_datai.line_3,keypad_dataf.line_3);
    24f4:	92 81       	ldd	r25, Z+2	; 0x02
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
    24f6:	43 2f       	mov	r20, r19
    24f8:	49 27       	eor	r20, r25
    24fa:	94 23       	and	r25, r20
			case 2: //line 3 index 2
				*keypad_DDR|=(1<<KEYPADLINE_3);
				*keypad_PORT&=~(1<<KEYPADLINE_3);
				keypad_dataf.line_3=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_3,keypad_dataf.line_3);
				keypad_datai.line_3=keypad_dataf.line_3;
    24fc:	32 83       	std	Z+2, r19	; 0x02
				if(HL){
    24fe:	99 23       	and	r25, r25
    2500:	99 f0       	breq	.+38     	; 0x2528 <KEYPAD_getkey+0x1aa>
					//decode index line three column what ?
					if(HL == (1<<KEYPADDATA_1))
    2502:	94 30       	cpi	r25, 0x04	; 4
    2504:	19 f4       	brne	.+6      	; 0x250c <KEYPAD_getkey+0x18e>
						c=keypadvalue[2][0];
    2506:	eb 01       	movw	r28, r22
    2508:	88 85       	ldd	r24, Y+8	; 0x08
    250a:	0a c0       	rjmp	.+20     	; 0x2520 <KEYPAD_getkey+0x1a2>
					if(HL == (1<<KEYPADDATA_2))
    250c:	90 31       	cpi	r25, 0x10	; 16
    250e:	19 f4       	brne	.+6      	; 0x2516 <KEYPAD_getkey+0x198>
						c=keypadvalue[2][1];
    2510:	eb 01       	movw	r28, r22
    2512:	89 85       	ldd	r24, Y+9	; 0x09
    2514:	09 c0       	rjmp	.+18     	; 0x2528 <KEYPAD_getkey+0x1aa>
					if(HL == (1<<KEYPADDATA_3))
    2516:	90 32       	cpi	r25, 0x20	; 32
    2518:	19 f4       	brne	.+6      	; 0x2520 <KEYPAD_getkey+0x1a2>
						c=keypadvalue[2][2];
    251a:	eb 01       	movw	r28, r22
    251c:	8a 85       	ldd	r24, Y+10	; 0x0a
    251e:	04 c0       	rjmp	.+8      	; 0x2528 <KEYPAD_getkey+0x1aa>
					if(HL == (1<<KEYPADDATA_4))
    2520:	90 34       	cpi	r25, 0x40	; 64
    2522:	11 f4       	brne	.+4      	; 0x2528 <KEYPAD_getkey+0x1aa>
						c=keypadvalue[2][3];
    2524:	eb 01       	movw	r28, r22
    2526:	8b 85       	ldd	r24, Y+11	; 0x0b
				}
				*keypad_DDR&=~(1<<KEYPADLINE_3);
    2528:	40 91 7b 02 	lds	r20, 0x027B	; 0x80027b <keypad_DDR>
    252c:	50 91 7c 02 	lds	r21, 0x027C	; 0x80027c <keypad_DDR+0x1>
    2530:	ea 01       	movw	r28, r20
    2532:	98 81       	ld	r25, Y
    2534:	9d 7f       	andi	r25, 0xFD	; 253
    2536:	98 83       	st	Y, r25
				*keypad_PORT|=(1<<KEYPADLINE_3);
    2538:	40 91 5f 02 	lds	r20, 0x025F	; 0x80025f <keypad_PORT>
    253c:	50 91 60 02 	lds	r21, 0x0260	; 0x800260 <keypad_PORT+0x1>
    2540:	ea 01       	movw	r28, r20
    2542:	98 81       	ld	r25, Y
    2544:	92 60       	ori	r25, 0x02	; 2
    2546:	98 83       	st	Y, r25
				break;
    2548:	25 cf       	rjmp	.-438    	; 0x2394 <KEYPAD_getkey+0x16>
			case 3: //line 4 index 3
				*keypad_DDR|=(1<<KEYPADLINE_4);
    254a:	e0 91 7b 02 	lds	r30, 0x027B	; 0x80027b <keypad_DDR>
    254e:	f0 91 7c 02 	lds	r31, 0x027C	; 0x80027c <keypad_DDR+0x1>
    2552:	90 81       	ld	r25, Z
    2554:	98 60       	ori	r25, 0x08	; 8
    2556:	90 83       	st	Z, r25
				*keypad_PORT&=~(1<<KEYPADLINE_4);
    2558:	e0 91 5f 02 	lds	r30, 0x025F	; 0x80025f <keypad_PORT>
    255c:	f0 91 60 02 	lds	r31, 0x0260	; 0x800260 <keypad_PORT+0x1>
    2560:	90 81       	ld	r25, Z
    2562:	97 7f       	andi	r25, 0xF7	; 247
    2564:	90 83       	st	Z, r25
				keypad_dataf.line_4=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    2566:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <keypad_PIN>
    256a:	f0 91 7a 02 	lds	r31, 0x027A	; 0x80027a <keypad_PIN+0x1>
    256e:	20 81       	ld	r18, Z
    2570:	24 77       	andi	r18, 0x74	; 116
    2572:	20 93 73 02 	sts	0x0273, r18	; 0x800273 <keypad_dataf+0x3>
				HL=KEYPADhl(keypad_datai.line_4,keypad_dataf.line_4);
    2576:	e4 e7       	ldi	r30, 0x74	; 116
    2578:	f2 e0       	ldi	r31, 0x02	; 2
    257a:	93 81       	ldd	r25, Z+3	; 0x03
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
    257c:	32 2f       	mov	r19, r18
    257e:	39 27       	eor	r19, r25
    2580:	93 23       	and	r25, r19
			case 3: //line 4 index 3
				*keypad_DDR|=(1<<KEYPADLINE_4);
				*keypad_PORT&=~(1<<KEYPADLINE_4);
				keypad_dataf.line_4=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_4,keypad_dataf.line_4);
				keypad_datai.line_4=keypad_dataf.line_4;
    2582:	23 83       	std	Z+3, r18	; 0x03
				if(HL){
    2584:	99 23       	and	r25, r25
    2586:	99 f0       	breq	.+38     	; 0x25ae <KEYPAD_getkey+0x230>
					//decode index line four column what ?
					if(HL == (1<<KEYPADDATA_1))
    2588:	94 30       	cpi	r25, 0x04	; 4
    258a:	19 f4       	brne	.+6      	; 0x2592 <KEYPAD_getkey+0x214>
						c=keypadvalue[3][0];
    258c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__DATA_REGION_ORIGIN__+0xc>
    2590:	0a c0       	rjmp	.+20     	; 0x25a6 <KEYPAD_getkey+0x228>
					if(HL == (1<<KEYPADDATA_2))
    2592:	90 31       	cpi	r25, 0x10	; 16
    2594:	19 f4       	brne	.+6      	; 0x259c <KEYPAD_getkey+0x21e>
						c=keypadvalue[3][1];
    2596:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <__DATA_REGION_ORIGIN__+0xd>
    259a:	09 c0       	rjmp	.+18     	; 0x25ae <KEYPAD_getkey+0x230>
					if(HL == (1<<KEYPADDATA_3))
    259c:	90 32       	cpi	r25, 0x20	; 32
    259e:	19 f4       	brne	.+6      	; 0x25a6 <KEYPAD_getkey+0x228>
						c=keypadvalue[3][2];
    25a0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__DATA_REGION_ORIGIN__+0xe>
    25a4:	04 c0       	rjmp	.+8      	; 0x25ae <KEYPAD_getkey+0x230>
					if(HL == (1<<KEYPADDATA_4))
    25a6:	90 34       	cpi	r25, 0x40	; 64
    25a8:	11 f4       	brne	.+4      	; 0x25ae <KEYPAD_getkey+0x230>
						c=keypadvalue[3][3];
    25aa:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <__DATA_REGION_ORIGIN__+0xf>
				}
				*keypad_DDR&=~(1<<KEYPADLINE_4);
    25ae:	e0 91 7b 02 	lds	r30, 0x027B	; 0x80027b <keypad_DDR>
    25b2:	f0 91 7c 02 	lds	r31, 0x027C	; 0x80027c <keypad_DDR+0x1>
    25b6:	90 81       	ld	r25, Z
    25b8:	97 7f       	andi	r25, 0xF7	; 247
    25ba:	90 83       	st	Z, r25
				*keypad_PORT|=(1<<KEYPADLINE_4);
    25bc:	e0 91 5f 02 	lds	r30, 0x025F	; 0x80025f <keypad_PORT>
    25c0:	f0 91 60 02 	lds	r31, 0x0260	; 0x800260 <keypad_PORT+0x1>
    25c4:	90 81       	ld	r25, Z
    25c6:	98 60       	ori	r25, 0x08	; 8
    25c8:	90 83       	st	Z, r25
    25ca:	03 c0       	rjmp	.+6      	; 0x25d2 <KEYPAD_getkey+0x254>
char KEYPAD_getkey(void)
{
	uint8_t HL;
	char c='\0';
	uint8_t keypad_option;
	for(keypad_option=0;keypad_option<KEYPADLINES;keypad_option++){
    25cc:	24 30       	cpi	r18, 0x04	; 4
    25ce:	08 f4       	brcc	.+2      	; 0x25d2 <KEYPAD_getkey+0x254>
    25d0:	e1 ce       	rjmp	.-574    	; 0x2394 <KEYPAD_getkey+0x16>
			default:
				break;
		}//endswitch
	}//endfor
	return c;
}
    25d2:	df 91       	pop	r29
    25d4:	cf 91       	pop	r28
    25d6:	08 95       	ret

000025d8 <KEYPAD_get>:
/***get***/
struct keypadata KEYPAD_get(void)
{
	char c;
	struct keypadata data;
	c=KEYPAD_getkey();
    25d8:	d2 de       	rcall	.-604    	; 0x237e <KEYPAD_getkey>
	if(c){
    25da:	88 23       	and	r24, r24
    25dc:	09 f1       	breq	.+66     	; 0x2620 <KEYPAD_get+0x48>
		if(c==KEYPADENTERKEY){
    25de:	84 34       	cpi	r24, 0x44	; 68
    25e0:	49 f4       	brne	.+18     	; 0x25f4 <KEYPAD_get+0x1c>
			keypadstring[KEYPADSTRINGINDEX]='\0';
    25e2:	e0 91 78 02 	lds	r30, 0x0278	; 0x800278 <KEYPADSTRINGINDEX>
    25e6:	f0 e0       	ldi	r31, 0x00	; 0
    25e8:	ef 59       	subi	r30, 0x9F	; 159
    25ea:	fd 4f       	sbci	r31, 0xFD	; 253
    25ec:	10 82       	st	Z, r1
			KEYPADSTRINGINDEX=0;
    25ee:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <KEYPADSTRINGINDEX>
    25f2:	17 c0       	rjmp	.+46     	; 0x2622 <KEYPAD_get+0x4a>
			data.string=keypadstring;
		}else{
			if(KEYPADSTRINGINDEX<(KEYPADSTRINGSIZE-1)){
    25f4:	90 91 78 02 	lds	r25, 0x0278	; 0x800278 <KEYPADSTRINGINDEX>
    25f8:	9e 30       	cpi	r25, 0x0E	; 14
    25fa:	98 f4       	brcc	.+38     	; 0x2622 <KEYPAD_get+0x4a>
				keypadstring[KEYPADSTRINGINDEX]=c;
    25fc:	e0 91 78 02 	lds	r30, 0x0278	; 0x800278 <KEYPADSTRINGINDEX>
    2600:	f0 e0       	ldi	r31, 0x00	; 0
    2602:	ef 59       	subi	r30, 0x9F	; 159
    2604:	fd 4f       	sbci	r31, 0xFD	; 253
    2606:	80 83       	st	Z, r24
				KEYPADSTRINGINDEX++;
    2608:	90 91 78 02 	lds	r25, 0x0278	; 0x800278 <KEYPADSTRINGINDEX>
    260c:	9f 5f       	subi	r25, 0xFF	; 255
    260e:	90 93 78 02 	sts	0x0278, r25	; 0x800278 <KEYPADSTRINGINDEX>
				keypadstring[KEYPADSTRINGINDEX]='\0';
    2612:	e0 91 78 02 	lds	r30, 0x0278	; 0x800278 <KEYPADSTRINGINDEX>
    2616:	f0 e0       	ldi	r31, 0x00	; 0
    2618:	ef 59       	subi	r30, 0x9F	; 159
    261a:	fd 4f       	sbci	r31, 0xFD	; 253
    261c:	10 82       	st	Z, r1
    261e:	01 c0       	rjmp	.+2      	; 0x2622 <KEYPAD_get+0x4a>
    2620:	80 e0       	ldi	r24, 0x00	; 0
				data.string=keypadstring;
			}
		}
		data.character=c;
	}
	return data;
    2622:	21 e6       	ldi	r18, 0x61	; 97
    2624:	32 e0       	ldi	r19, 0x02	; 2
    2626:	48 2f       	mov	r20, r24
}
    2628:	84 2f       	mov	r24, r20
    262a:	b9 01       	movw	r22, r18
    262c:	08 95       	ret

0000262e <KEYPADenable>:
uint8_t KEYPADhl(uint8_t xi, uint8_t xf);
/*
** procedure and function
*/
KEYPAD KEYPADenable(volatile uint8_t *ddr, volatile uint8_t *pin, volatile uint8_t *port)
{
    262e:	cf 93       	push	r28
    2630:	df 93       	push	r29
    2632:	00 d0       	rcall	.+0      	; 0x2634 <KEYPADenable+0x6>
    2634:	00 d0       	rcall	.+0      	; 0x2636 <KEYPADenable+0x8>
    2636:	00 d0       	rcall	.+0      	; 0x2638 <KEYPADenable+0xa>
    2638:	cd b7       	in	r28, 0x3d	; 61
    263a:	de b7       	in	r29, 0x3e	; 62
    263c:	fc 01       	movw	r30, r24
	//LOCAL VARIABLES
	uint8_t tSREG;
	tSREG=SREG;
    263e:	2f b7       	in	r18, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    2640:	9f b7       	in	r25, 0x3f	; 63
    2642:	9f 77       	andi	r25, 0x7F	; 127
    2644:	9f bf       	out	0x3f, r25	; 63
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	KEYPAD keypad;
	//import parametros
	keypad_DDR=ddr;
    2646:	f0 93 7c 02 	sts	0x027C, r31	; 0x80027c <keypad_DDR+0x1>
    264a:	e0 93 7b 02 	sts	0x027B, r30	; 0x80027b <keypad_DDR>
	keypad_PIN=pin;
    264e:	70 93 7a 02 	sts	0x027A, r23	; 0x80027a <keypad_PIN+0x1>
    2652:	60 93 79 02 	sts	0x0279, r22	; 0x800279 <keypad_PIN>
	keypad_PORT=port;
    2656:	50 93 60 02 	sts	0x0260, r21	; 0x800260 <keypad_PORT+0x1>
    265a:	40 93 5f 02 	sts	0x025F, r20	; 0x80025f <keypad_PORT>
	//inic variables
	*keypad_DDR=(1<<KEYPADLINE_1) | (1<<KEYPADLINE_2) | (1<<KEYPADLINE_3) | (1<<KEYPADLINE_4);
    265e:	8b e8       	ldi	r24, 0x8B	; 139
    2660:	80 83       	st	Z, r24
	*keypad_PORT=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    2662:	e0 91 5f 02 	lds	r30, 0x025F	; 0x80025f <keypad_PORT>
    2666:	f0 91 60 02 	lds	r31, 0x0260	; 0x800260 <keypad_PORT+0x1>
    266a:	84 e7       	ldi	r24, 0x74	; 116
    266c:	80 83       	st	Z, r24
	keypad_datai.line_1=keypad_dataf.line_1=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    266e:	a0 e7       	ldi	r26, 0x70	; 112
    2670:	b2 e0       	ldi	r27, 0x02	; 2
    2672:	8c 93       	st	X, r24
    2674:	e4 e7       	ldi	r30, 0x74	; 116
    2676:	f2 e0       	ldi	r31, 0x02	; 2
    2678:	80 83       	st	Z, r24
	keypad_datai.line_2=keypad_dataf.line_2=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    267a:	11 96       	adiw	r26, 0x01	; 1
    267c:	8c 93       	st	X, r24
    267e:	11 97       	sbiw	r26, 0x01	; 1
    2680:	81 83       	std	Z+1, r24	; 0x01
	keypad_datai.line_3=keypad_dataf.line_3=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    2682:	12 96       	adiw	r26, 0x02	; 2
    2684:	8c 93       	st	X, r24
    2686:	12 97       	sbiw	r26, 0x02	; 2
    2688:	82 83       	std	Z+2, r24	; 0x02
	keypad_datai.line_4=keypad_dataf.line_4=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    268a:	13 96       	adiw	r26, 0x03	; 3
    268c:	8c 93       	st	X, r24
    268e:	83 83       	std	Z+3, r24	; 0x03
	KEYPADSTRINGINDEX=0;
    2690:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <KEYPADSTRINGINDEX>
	//Direccionar apontadores para PROTOTIPOS
	keypad.getkey=KEYPAD_getkey;
	keypad.get=KEYPAD_get;
	keypad.flush=KEYPAD_flush;
	SREG=tSREG;
    2694:	2f bf       	out	0x3f, r18	; 63
	//
	*keypad_PORT|=(1<<KEYPADLINE_1) | (1<<KEYPADLINE_2) | (1<<KEYPADLINE_3) | (1<<KEYPADLINE_4);
    2696:	e0 91 5f 02 	lds	r30, 0x025F	; 0x80025f <keypad_PORT>
    269a:	f0 91 60 02 	lds	r31, 0x0260	; 0x800260 <keypad_PORT+0x1>
    269e:	80 81       	ld	r24, Z
    26a0:	8b 68       	ori	r24, 0x8B	; 139
    26a2:	80 83       	st	Z, r24
	//Going to use pull down method.
	return keypad;
    26a4:	2f eb       	ldi	r18, 0xBF	; 191
    26a6:	31 e1       	ldi	r19, 0x11	; 17
    26a8:	3a 83       	std	Y+2, r19	; 0x02
    26aa:	29 83       	std	Y+1, r18	; 0x01
    26ac:	4c ee       	ldi	r20, 0xEC	; 236
    26ae:	52 e1       	ldi	r21, 0x12	; 18
    26b0:	5c 83       	std	Y+4, r21	; 0x04
    26b2:	4b 83       	std	Y+3, r20	; 0x03
    26b4:	66 eb       	ldi	r22, 0xB6	; 182
    26b6:	71 e1       	ldi	r23, 0x11	; 17
    26b8:	7e 83       	std	Y+6, r23	; 0x06
    26ba:	6d 83       	std	Y+5, r22	; 0x05
    26bc:	3a 81       	ldd	r19, Y+2	; 0x02
    26be:	5c 81       	ldd	r21, Y+4	; 0x04
    26c0:	7e 81       	ldd	r23, Y+6	; 0x06
}
    26c2:	80 e0       	ldi	r24, 0x00	; 0
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	26 96       	adiw	r28, 0x06	; 6
    26c8:	0f b6       	in	r0, 0x3f	; 63
    26ca:	f8 94       	cli
    26cc:	de bf       	out	0x3e, r29	; 62
    26ce:	0f be       	out	0x3f, r0	; 63
    26d0:	cd bf       	out	0x3d, r28	; 61
    26d2:	df 91       	pop	r29
    26d4:	cf 91       	pop	r28
    26d6:	08 95       	ret

000026d8 <LCD1_write>:
}
void LCD0_strobe(unsigned int num)
{
	*lcd0_PORT|=(1<<EN);
	LCD_ticks(num);
	*lcd0_PORT&=~(1<<EN);
    26d8:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    26dc:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    26e0:	90 81       	ld	r25, Z
    26e2:	9d 7f       	andi	r25, 0xFD	; 253
    26e4:	90 83       	st	Z, r25
    26e6:	67 2b       	or	r22, r23
    26e8:	41 f0       	breq	.+16     	; 0x26fa <LCD1_write+0x22>
    26ea:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    26ee:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    26f2:	90 81       	ld	r25, Z
    26f4:	91 60       	ori	r25, 0x01	; 1
    26f6:	90 83       	st	Z, r25
    26f8:	07 c0       	rjmp	.+14     	; 0x2708 <LCD1_write+0x30>
    26fa:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    26fe:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    2702:	90 81       	ld	r25, Z
    2704:	9e 7f       	andi	r25, 0xFE	; 254
    2706:	90 83       	st	Z, r25
    2708:	e0 91 7f 02 	lds	r30, 0x027F	; 0x80027f <lcd1_DDR>
    270c:	f0 91 80 02 	lds	r31, 0x0280	; 0x800280 <lcd1_DDR+0x1>
    2710:	90 81       	ld	r25, Z
    2712:	90 6f       	ori	r25, 0xF0	; 240
    2714:	90 83       	st	Z, r25
    2716:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    271a:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    271e:	90 81       	ld	r25, Z
    2720:	94 60       	ori	r25, 0x04	; 4
    2722:	90 83       	st	Z, r25
    2724:	88 23       	and	r24, r24
    2726:	44 f4       	brge	.+16     	; 0x2738 <LCD1_write+0x60>
    2728:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    272c:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    2730:	90 81       	ld	r25, Z
    2732:	90 68       	ori	r25, 0x80	; 128
    2734:	90 83       	st	Z, r25
    2736:	07 c0       	rjmp	.+14     	; 0x2746 <LCD1_write+0x6e>
    2738:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    273c:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    2740:	90 81       	ld	r25, Z
    2742:	9f 77       	andi	r25, 0x7F	; 127
    2744:	90 83       	st	Z, r25
    2746:	86 ff       	sbrs	r24, 6
    2748:	08 c0       	rjmp	.+16     	; 0x275a <LCD1_write+0x82>
    274a:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    274e:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    2752:	90 81       	ld	r25, Z
    2754:	90 64       	ori	r25, 0x40	; 64
    2756:	90 83       	st	Z, r25
    2758:	07 c0       	rjmp	.+14     	; 0x2768 <LCD1_write+0x90>
    275a:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    275e:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    2762:	90 81       	ld	r25, Z
    2764:	9f 7b       	andi	r25, 0xBF	; 191
    2766:	90 83       	st	Z, r25
    2768:	85 ff       	sbrs	r24, 5
    276a:	08 c0       	rjmp	.+16     	; 0x277c <LCD1_write+0xa4>
    276c:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    2770:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    2774:	90 81       	ld	r25, Z
    2776:	90 62       	ori	r25, 0x20	; 32
    2778:	90 83       	st	Z, r25
    277a:	07 c0       	rjmp	.+14     	; 0x278a <LCD1_write+0xb2>
    277c:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    2780:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    2784:	90 81       	ld	r25, Z
    2786:	9f 7d       	andi	r25, 0xDF	; 223
    2788:	90 83       	st	Z, r25
    278a:	84 ff       	sbrs	r24, 4
    278c:	08 c0       	rjmp	.+16     	; 0x279e <LCD1_write+0xc6>
    278e:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    2792:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    2796:	90 81       	ld	r25, Z
    2798:	90 61       	ori	r25, 0x10	; 16
    279a:	90 83       	st	Z, r25
    279c:	07 c0       	rjmp	.+14     	; 0x27ac <LCD1_write+0xd4>
    279e:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    27a2:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    27a6:	90 81       	ld	r25, Z
    27a8:	9f 7e       	andi	r25, 0xEF	; 239
    27aa:	90 83       	st	Z, r25
    27ac:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    27b0:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    27b4:	90 81       	ld	r25, Z
    27b6:	9b 7f       	andi	r25, 0xFB	; 251
    27b8:	90 83       	st	Z, r25
    27ba:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    27be:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    27c2:	90 81       	ld	r25, Z
    27c4:	94 60       	ori	r25, 0x04	; 4
    27c6:	90 83       	st	Z, r25
    27c8:	83 ff       	sbrs	r24, 3
    27ca:	08 c0       	rjmp	.+16     	; 0x27dc <LCD1_write+0x104>
    27cc:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    27d0:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    27d4:	90 81       	ld	r25, Z
    27d6:	90 68       	ori	r25, 0x80	; 128
    27d8:	90 83       	st	Z, r25
    27da:	07 c0       	rjmp	.+14     	; 0x27ea <LCD1_write+0x112>
    27dc:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    27e0:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    27e4:	90 81       	ld	r25, Z
    27e6:	9f 77       	andi	r25, 0x7F	; 127
    27e8:	90 83       	st	Z, r25
    27ea:	82 ff       	sbrs	r24, 2
    27ec:	08 c0       	rjmp	.+16     	; 0x27fe <LCD1_write+0x126>
    27ee:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    27f2:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    27f6:	90 81       	ld	r25, Z
    27f8:	90 64       	ori	r25, 0x40	; 64
    27fa:	90 83       	st	Z, r25
    27fc:	07 c0       	rjmp	.+14     	; 0x280c <LCD1_write+0x134>
    27fe:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    2802:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    2806:	90 81       	ld	r25, Z
    2808:	9f 7b       	andi	r25, 0xBF	; 191
    280a:	90 83       	st	Z, r25
    280c:	81 ff       	sbrs	r24, 1
    280e:	08 c0       	rjmp	.+16     	; 0x2820 <LCD1_write+0x148>
    2810:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    2814:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    2818:	90 81       	ld	r25, Z
    281a:	90 62       	ori	r25, 0x20	; 32
    281c:	90 83       	st	Z, r25
    281e:	07 c0       	rjmp	.+14     	; 0x282e <LCD1_write+0x156>
    2820:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    2824:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    2828:	90 81       	ld	r25, Z
    282a:	9f 7d       	andi	r25, 0xDF	; 223
    282c:	90 83       	st	Z, r25
    282e:	80 ff       	sbrs	r24, 0
    2830:	08 c0       	rjmp	.+16     	; 0x2842 <LCD1_write+0x16a>
    2832:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    2836:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    283a:	80 81       	ld	r24, Z
    283c:	80 61       	ori	r24, 0x10	; 16
    283e:	80 83       	st	Z, r24
    2840:	07 c0       	rjmp	.+14     	; 0x2850 <LCD1_write+0x178>
    2842:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    2846:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    284a:	80 81       	ld	r24, Z
    284c:	8f 7e       	andi	r24, 0xEF	; 239
    284e:	80 83       	st	Z, r24
    2850:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    2854:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    2858:	80 81       	ld	r24, Z
    285a:	8b 7f       	andi	r24, 0xFB	; 251
    285c:	80 83       	st	Z, r24
    285e:	08 95       	ret

00002860 <LCD1_read>:
    2860:	e0 91 7f 02 	lds	r30, 0x027F	; 0x80027f <lcd1_DDR>
    2864:	f0 91 80 02 	lds	r31, 0x0280	; 0x800280 <lcd1_DDR+0x1>
    2868:	20 81       	ld	r18, Z
    286a:	2f 70       	andi	r18, 0x0F	; 15
    286c:	20 83       	st	Z, r18
    286e:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    2872:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    2876:	20 81       	ld	r18, Z
    2878:	20 6f       	ori	r18, 0xF0	; 240
    287a:	20 83       	st	Z, r18
    287c:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    2880:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    2884:	20 81       	ld	r18, Z
    2886:	22 60       	ori	r18, 0x02	; 2
    2888:	20 83       	st	Z, r18
    288a:	89 2b       	or	r24, r25
    288c:	41 f0       	breq	.+16     	; 0x289e <LCD1_read+0x3e>
    288e:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    2892:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    2896:	80 81       	ld	r24, Z
    2898:	81 60       	ori	r24, 0x01	; 1
    289a:	80 83       	st	Z, r24
    289c:	07 c0       	rjmp	.+14     	; 0x28ac <LCD1_read+0x4c>
    289e:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    28a2:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    28a6:	80 81       	ld	r24, Z
    28a8:	8e 7f       	andi	r24, 0xFE	; 254
    28aa:	80 83       	st	Z, r24
    28ac:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    28b0:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    28b4:	80 81       	ld	r24, Z
    28b6:	84 60       	ori	r24, 0x04	; 4
    28b8:	80 83       	st	Z, r24
    28ba:	e0 91 82 02 	lds	r30, 0x0282	; 0x800282 <lcd1_PIN>
    28be:	f0 91 83 02 	lds	r31, 0x0283	; 0x800283 <lcd1_PIN+0x1>
    28c2:	80 81       	ld	r24, Z
    28c4:	88 23       	and	r24, r24
    28c6:	14 f0       	brlt	.+4      	; 0x28cc <LCD1_read+0x6c>
    28c8:	80 e0       	ldi	r24, 0x00	; 0
    28ca:	01 c0       	rjmp	.+2      	; 0x28ce <LCD1_read+0x6e>
    28cc:	80 e8       	ldi	r24, 0x80	; 128
    28ce:	90 81       	ld	r25, Z
    28d0:	96 ff       	sbrs	r25, 6
    28d2:	02 c0       	rjmp	.+4      	; 0x28d8 <LCD1_read+0x78>
    28d4:	80 64       	ori	r24, 0x40	; 64
    28d6:	01 c0       	rjmp	.+2      	; 0x28da <LCD1_read+0x7a>
    28d8:	8f 7b       	andi	r24, 0xBF	; 191
    28da:	90 81       	ld	r25, Z
    28dc:	95 ff       	sbrs	r25, 5
    28de:	02 c0       	rjmp	.+4      	; 0x28e4 <LCD1_read+0x84>
    28e0:	80 62       	ori	r24, 0x20	; 32
    28e2:	01 c0       	rjmp	.+2      	; 0x28e6 <LCD1_read+0x86>
    28e4:	8f 7d       	andi	r24, 0xDF	; 223
    28e6:	90 81       	ld	r25, Z
    28e8:	94 ff       	sbrs	r25, 4
    28ea:	02 c0       	rjmp	.+4      	; 0x28f0 <LCD1_read+0x90>
    28ec:	80 61       	ori	r24, 0x10	; 16
    28ee:	01 c0       	rjmp	.+2      	; 0x28f2 <LCD1_read+0x92>
    28f0:	8f 7e       	andi	r24, 0xEF	; 239
    28f2:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    28f6:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    28fa:	90 81       	ld	r25, Z
    28fc:	9b 7f       	andi	r25, 0xFB	; 251
    28fe:	90 83       	st	Z, r25
    2900:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    2904:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    2908:	90 81       	ld	r25, Z
    290a:	94 60       	ori	r25, 0x04	; 4
    290c:	90 83       	st	Z, r25
    290e:	e0 91 82 02 	lds	r30, 0x0282	; 0x800282 <lcd1_PIN>
    2912:	f0 91 83 02 	lds	r31, 0x0283	; 0x800283 <lcd1_PIN+0x1>
    2916:	90 81       	ld	r25, Z
    2918:	99 23       	and	r25, r25
    291a:	14 f4       	brge	.+4      	; 0x2920 <LCD1_read+0xc0>
    291c:	88 60       	ori	r24, 0x08	; 8
    291e:	01 c0       	rjmp	.+2      	; 0x2922 <LCD1_read+0xc2>
    2920:	87 7f       	andi	r24, 0xF7	; 247
    2922:	90 81       	ld	r25, Z
    2924:	96 ff       	sbrs	r25, 6
    2926:	02 c0       	rjmp	.+4      	; 0x292c <LCD1_read+0xcc>
    2928:	84 60       	ori	r24, 0x04	; 4
    292a:	01 c0       	rjmp	.+2      	; 0x292e <LCD1_read+0xce>
    292c:	8b 7f       	andi	r24, 0xFB	; 251
    292e:	90 81       	ld	r25, Z
    2930:	95 ff       	sbrs	r25, 5
    2932:	02 c0       	rjmp	.+4      	; 0x2938 <LCD1_read+0xd8>
    2934:	82 60       	ori	r24, 0x02	; 2
    2936:	01 c0       	rjmp	.+2      	; 0x293a <LCD1_read+0xda>
    2938:	8d 7f       	andi	r24, 0xFD	; 253
    293a:	90 81       	ld	r25, Z
    293c:	94 ff       	sbrs	r25, 4
    293e:	02 c0       	rjmp	.+4      	; 0x2944 <LCD1_read+0xe4>
    2940:	81 60       	ori	r24, 0x01	; 1
    2942:	01 c0       	rjmp	.+2      	; 0x2946 <LCD1_read+0xe6>
    2944:	8e 7f       	andi	r24, 0xFE	; 254
    2946:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    294a:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    294e:	90 81       	ld	r25, Z
    2950:	9b 7f       	andi	r25, 0xFB	; 251
    2952:	90 83       	st	Z, r25
    2954:	08 95       	ret

00002956 <LCD1_BF>:
    2956:	cf 93       	push	r28
    2958:	df 93       	push	r29
    295a:	80 e0       	ldi	r24, 0x00	; 0
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	80 df       	rcall	.-256    	; 0x2860 <LCD1_read>
    2960:	cb e0       	ldi	r28, 0x0B	; 11
    2962:	d0 e0       	ldi	r29, 0x00	; 0
    2964:	05 c0       	rjmp	.+10     	; 0x2970 <LCD1_BF+0x1a>
    2966:	80 e0       	ldi	r24, 0x00	; 0
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	7a df       	rcall	.-268    	; 0x2860 <LCD1_read>
    296c:	21 97       	sbiw	r28, 0x01	; 1
    296e:	11 f0       	breq	.+4      	; 0x2974 <LCD1_BF+0x1e>
    2970:	88 23       	and	r24, r24
    2972:	cc f3       	brlt	.-14     	; 0x2966 <LCD1_BF+0x10>
    2974:	df 91       	pop	r29
    2976:	cf 91       	pop	r28
    2978:	08 95       	ret

0000297a <LCD1_putch>:
    297a:	61 e0       	ldi	r22, 0x01	; 1
    297c:	70 e0       	ldi	r23, 0x00	; 0
    297e:	ac de       	rcall	.-680    	; 0x26d8 <LCD1_write>
    2980:	ea cf       	rjmp	.-44     	; 0x2956 <LCD1_BF>
    2982:	08 95       	ret

00002984 <LCD1_getch>:
    2984:	cf 93       	push	r28
    2986:	81 e0       	ldi	r24, 0x01	; 1
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	6a df       	rcall	.-300    	; 0x2860 <LCD1_read>
    298c:	c8 2f       	mov	r28, r24
    298e:	e3 df       	rcall	.-58     	; 0x2956 <LCD1_BF>
    2990:	8c 2f       	mov	r24, r28
    2992:	cf 91       	pop	r28
    2994:	08 95       	ret

00002996 <LCD1_string>:
    2996:	cf 93       	push	r28
    2998:	df 93       	push	r29
    299a:	ec 01       	movw	r28, r24
    299c:	88 81       	ld	r24, Y
    299e:	88 23       	and	r24, r24
    29a0:	41 f0       	breq	.+16     	; 0x29b2 <LCD1_string+0x1c>
    29a2:	21 96       	adiw	r28, 0x01	; 1
    29a4:	61 e0       	ldi	r22, 0x01	; 1
    29a6:	70 e0       	ldi	r23, 0x00	; 0
    29a8:	97 de       	rcall	.-722    	; 0x26d8 <LCD1_write>
    29aa:	d5 df       	rcall	.-86     	; 0x2956 <LCD1_BF>
    29ac:	89 91       	ld	r24, Y+
    29ae:	81 11       	cpse	r24, r1
    29b0:	f9 cf       	rjmp	.-14     	; 0x29a4 <LCD1_string+0xe>
    29b2:	df 91       	pop	r29
    29b4:	cf 91       	pop	r28
    29b6:	08 95       	ret

000029b8 <LCD1_string_size>:
    29b8:	0f 93       	push	r16
    29ba:	1f 93       	push	r17
    29bc:	cf 93       	push	r28
    29be:	df 93       	push	r29
    29c0:	fc 01       	movw	r30, r24
    29c2:	d6 2f       	mov	r29, r22
    29c4:	80 81       	ld	r24, Z
    29c6:	88 23       	and	r24, r24
    29c8:	51 f0       	breq	.+20     	; 0x29de <LCD1_string_size+0x26>
    29ca:	8f 01       	movw	r16, r30
    29cc:	0f 5f       	subi	r16, 0xFF	; 255
    29ce:	1f 4f       	sbci	r17, 0xFF	; 255
    29d0:	61 11       	cpse	r22, r1
    29d2:	09 c0       	rjmp	.+18     	; 0x29e6 <LCD1_string_size+0x2e>
    29d4:	1b c0       	rjmp	.+54     	; 0x2a0c <LCD1_string_size+0x54>
    29d6:	cf 5f       	subi	r28, 0xFF	; 255
    29d8:	dc 17       	cp	r29, r28
    29da:	30 f4       	brcc	.+12     	; 0x29e8 <LCD1_string_size+0x30>
    29dc:	01 c0       	rjmp	.+2      	; 0x29e0 <LCD1_string_size+0x28>
    29de:	c0 e0       	ldi	r28, 0x00	; 0
    29e0:	cd 17       	cp	r28, r29
    29e2:	60 f0       	brcs	.+24     	; 0x29fc <LCD1_string_size+0x44>
    29e4:	13 c0       	rjmp	.+38     	; 0x2a0c <LCD1_string_size+0x54>
    29e6:	c1 e0       	ldi	r28, 0x01	; 1
    29e8:	61 e0       	ldi	r22, 0x01	; 1
    29ea:	70 e0       	ldi	r23, 0x00	; 0
    29ec:	75 de       	rcall	.-790    	; 0x26d8 <LCD1_write>
    29ee:	b3 df       	rcall	.-154    	; 0x2956 <LCD1_BF>
    29f0:	f8 01       	movw	r30, r16
    29f2:	81 91       	ld	r24, Z+
    29f4:	8f 01       	movw	r16, r30
    29f6:	81 11       	cpse	r24, r1
    29f8:	ee cf       	rjmp	.-36     	; 0x29d6 <LCD1_string_size+0x1e>
    29fa:	f2 cf       	rjmp	.-28     	; 0x29e0 <LCD1_string_size+0x28>
    29fc:	cf 5f       	subi	r28, 0xFF	; 255
    29fe:	61 e0       	ldi	r22, 0x01	; 1
    2a00:	70 e0       	ldi	r23, 0x00	; 0
    2a02:	80 e2       	ldi	r24, 0x20	; 32
    2a04:	69 de       	rcall	.-814    	; 0x26d8 <LCD1_write>
    2a06:	a7 df       	rcall	.-178    	; 0x2956 <LCD1_BF>
    2a08:	cd 17       	cp	r28, r29
    2a0a:	c0 f3       	brcs	.-16     	; 0x29fc <LCD1_string_size+0x44>
    2a0c:	df 91       	pop	r29
    2a0e:	cf 91       	pop	r28
    2a10:	1f 91       	pop	r17
    2a12:	0f 91       	pop	r16
    2a14:	08 95       	ret

00002a16 <LCD1_hspace>:
    2a16:	cf 93       	push	r28
    2a18:	c8 2f       	mov	r28, r24
    2a1a:	88 23       	and	r24, r24
    2a1c:	39 f0       	breq	.+14     	; 0x2a2c <LCD1_hspace+0x16>
    2a1e:	61 e0       	ldi	r22, 0x01	; 1
    2a20:	70 e0       	ldi	r23, 0x00	; 0
    2a22:	80 e2       	ldi	r24, 0x20	; 32
    2a24:	59 de       	rcall	.-846    	; 0x26d8 <LCD1_write>
    2a26:	97 df       	rcall	.-210    	; 0x2956 <LCD1_BF>
    2a28:	c1 50       	subi	r28, 0x01	; 1
    2a2a:	c9 f7       	brne	.-14     	; 0x2a1e <LCD1_hspace+0x8>
    2a2c:	cf 91       	pop	r28
    2a2e:	08 95       	ret

00002a30 <LCD1_gotoxy>:
    2a30:	26 2f       	mov	r18, r22
    2a32:	81 30       	cpi	r24, 0x01	; 1
    2a34:	91 05       	cpc	r25, r1
    2a36:	71 f0       	breq	.+28     	; 0x2a54 <LCD1_gotoxy+0x24>
    2a38:	30 f0       	brcs	.+12     	; 0x2a46 <LCD1_gotoxy+0x16>
    2a3a:	82 30       	cpi	r24, 0x02	; 2
    2a3c:	91 05       	cpc	r25, r1
    2a3e:	89 f0       	breq	.+34     	; 0x2a62 <LCD1_gotoxy+0x32>
    2a40:	03 97       	sbiw	r24, 0x03	; 3
    2a42:	b1 f0       	breq	.+44     	; 0x2a70 <LCD1_gotoxy+0x40>
    2a44:	08 95       	ret
    2a46:	60 e0       	ldi	r22, 0x00	; 0
    2a48:	70 e0       	ldi	r23, 0x00	; 0
    2a4a:	80 e8       	ldi	r24, 0x80	; 128
    2a4c:	82 0f       	add	r24, r18
    2a4e:	44 de       	rcall	.-888    	; 0x26d8 <LCD1_write>
    2a50:	82 cf       	rjmp	.-252    	; 0x2956 <LCD1_BF>
    2a52:	08 95       	ret
    2a54:	60 e0       	ldi	r22, 0x00	; 0
    2a56:	70 e0       	ldi	r23, 0x00	; 0
    2a58:	80 ec       	ldi	r24, 0xC0	; 192
    2a5a:	82 0f       	add	r24, r18
    2a5c:	3d de       	rcall	.-902    	; 0x26d8 <LCD1_write>
    2a5e:	7b cf       	rjmp	.-266    	; 0x2956 <LCD1_BF>
    2a60:	08 95       	ret
    2a62:	60 e0       	ldi	r22, 0x00	; 0
    2a64:	70 e0       	ldi	r23, 0x00	; 0
    2a66:	84 e9       	ldi	r24, 0x94	; 148
    2a68:	82 0f       	add	r24, r18
    2a6a:	36 de       	rcall	.-916    	; 0x26d8 <LCD1_write>
    2a6c:	74 cf       	rjmp	.-280    	; 0x2956 <LCD1_BF>
    2a6e:	08 95       	ret
    2a70:	60 e0       	ldi	r22, 0x00	; 0
    2a72:	70 e0       	ldi	r23, 0x00	; 0
    2a74:	84 ed       	ldi	r24, 0xD4	; 212
    2a76:	82 0f       	add	r24, r18
    2a78:	2f de       	rcall	.-930    	; 0x26d8 <LCD1_write>
    2a7a:	6d cf       	rjmp	.-294    	; 0x2956 <LCD1_BF>
    2a7c:	08 95       	ret

00002a7e <LCD1_clear>:
    2a7e:	60 e0       	ldi	r22, 0x00	; 0
    2a80:	70 e0       	ldi	r23, 0x00	; 0
    2a82:	81 e0       	ldi	r24, 0x01	; 1
    2a84:	29 de       	rcall	.-942    	; 0x26d8 <LCD1_write>
    2a86:	87 ee       	ldi	r24, 0xE7	; 231
    2a88:	97 e1       	ldi	r25, 0x17	; 23
    2a8a:	01 97       	sbiw	r24, 0x01	; 1
    2a8c:	f1 f7       	brne	.-4      	; 0x2a8a <LCD1_clear+0xc>
    2a8e:	00 c0       	rjmp	.+0      	; 0x2a90 <LCD1_clear+0x12>
    2a90:	00 00       	nop
    2a92:	08 95       	ret

00002a94 <LCD1_inic>:
	return lcd1;
}
void LCD1_inic(void)
{
	//LCD INIC
	*lcd1_DDR=(1<<RS)|(1<<RW)|(1<<EN)|(0<<NC);
    2a94:	e0 91 7f 02 	lds	r30, 0x027F	; 0x80027f <lcd1_DDR>
    2a98:	f0 91 80 02 	lds	r31, 0x0280	; 0x800280 <lcd1_DDR+0x1>
    2a9c:	87 e0       	ldi	r24, 0x07	; 7
    2a9e:	80 83       	st	Z, r24
	*lcd1_PORT=(1<<NC);
    2aa0:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    2aa4:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    2aa8:	88 e0       	ldi	r24, 0x08	; 8
    2aaa:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2aac:	2f ef       	ldi	r18, 0xFF	; 255
    2aae:	83 ef       	ldi	r24, 0xF3	; 243
    2ab0:	91 e0       	ldi	r25, 0x01	; 1
    2ab2:	21 50       	subi	r18, 0x01	; 1
    2ab4:	80 40       	sbci	r24, 0x00	; 0
    2ab6:	90 40       	sbci	r25, 0x00	; 0
    2ab8:	e1 f7       	brne	.-8      	; 0x2ab2 <LCD1_inic+0x1e>
    2aba:	00 c0       	rjmp	.+0      	; 0x2abc <LCD1_inic+0x28>
    2abc:	00 00       	nop
	/***INICIALIZACAO LCD**datasheet*/
	_delay_ms(40);
	LCD1_write(0x33,INST); //function set
    2abe:	60 e0       	ldi	r22, 0x00	; 0
    2ac0:	70 e0       	ldi	r23, 0x00	; 0
    2ac2:	83 e3       	ldi	r24, 0x33	; 51
    2ac4:	09 de       	rcall	.-1006   	; 0x26d8 <LCD1_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2ac6:	20 ed       	ldi	r18, 0xD0	; 208
    2ac8:	2a 95       	dec	r18
    2aca:	f1 f7       	brne	.-4      	; 0x2ac8 <LCD1_inic+0x34>
	_delay_us(39);
	LCD1_write(0x33,INST); //function set
    2acc:	60 e0       	ldi	r22, 0x00	; 0
    2ace:	70 e0       	ldi	r23, 0x00	; 0
    2ad0:	83 e3       	ldi	r24, 0x33	; 51
    2ad2:	02 de       	rcall	.-1020   	; 0x26d8 <LCD1_write>
    2ad4:	80 ed       	ldi	r24, 0xD0	; 208
    2ad6:	8a 95       	dec	r24
    2ad8:	f1 f7       	brne	.-4      	; 0x2ad6 <LCD1_inic+0x42>
	_delay_us(39);
	LCD1_write(0x2B,INST); //function set
    2ada:	60 e0       	ldi	r22, 0x00	; 0
    2adc:	70 e0       	ldi	r23, 0x00	; 0
    2ade:	8b e2       	ldi	r24, 0x2B	; 43
    2ae0:	fb dd       	rcall	.-1034   	; 0x26d8 <LCD1_write>
    2ae2:	95 ec       	ldi	r25, 0xC5	; 197
    2ae4:	9a 95       	dec	r25
    2ae6:	f1 f7       	brne	.-4      	; 0x2ae4 <LCD1_inic+0x50>
    2ae8:	00 00       	nop
	_delay_us(37);
	LCD1_write(0x0C,INST);// display on/off control
    2aea:	60 e0       	ldi	r22, 0x00	; 0
    2aec:	70 e0       	ldi	r23, 0x00	; 0
    2aee:	8c e0       	ldi	r24, 0x0C	; 12
    2af0:	f3 dd       	rcall	.-1050   	; 0x26d8 <LCD1_write>
    2af2:	25 ec       	ldi	r18, 0xC5	; 197
    2af4:	2a 95       	dec	r18
    2af6:	f1 f7       	brne	.-4      	; 0x2af4 <LCD1_inic+0x60>
	_delay_us(37);
	LCD1_write(0x01,INST);// clear display
    2af8:	00 00       	nop
    2afa:	60 e0       	ldi	r22, 0x00	; 0
    2afc:	70 e0       	ldi	r23, 0x00	; 0
    2afe:	81 e0       	ldi	r24, 0x01	; 1
    2b00:	eb dd       	rcall	.-1066   	; 0x26d8 <LCD1_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2b02:	87 ee       	ldi	r24, 0xE7	; 231
    2b04:	97 e1       	ldi	r25, 0x17	; 23
    2b06:	01 97       	sbiw	r24, 0x01	; 1
    2b08:	f1 f7       	brne	.-4      	; 0x2b06 <LCD1_inic+0x72>
    2b0a:	00 c0       	rjmp	.+0      	; 0x2b0c <LCD1_inic+0x78>
	_delay_ms(1.53);
	LCD1_write(0x06,INST);// entry mode set (crazy settings)
    2b0c:	00 00       	nop
    2b0e:	60 e0       	ldi	r22, 0x00	; 0
    2b10:	70 e0       	ldi	r23, 0x00	; 0
    2b12:	86 e0       	ldi	r24, 0x06	; 6
    2b14:	e1 dd       	rcall	.-1086   	; 0x26d8 <LCD1_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2b16:	95 ec       	ldi	r25, 0xC5	; 197
    2b18:	9a 95       	dec	r25
    2b1a:	f1 f7       	brne	.-4      	; 0x2b18 <LCD1_inic+0x84>
    2b1c:	00 00       	nop
    2b1e:	08 95       	ret

00002b20 <LCD1enable>:
		LCD0_inic();
	lcd0_detect=tmp;
}
/*******************************************************************/
LCD1 LCD1enable(volatile uint8_t *ddr, volatile uint8_t *pin, volatile uint8_t *port)
{
    2b20:	1f 93       	push	r17
    2b22:	cf 93       	push	r28
    2b24:	df 93       	push	r29
    2b26:	ec 01       	movw	r28, r24
	//LOCAL VARIABLES
	uint8_t tSREG;
	tSREG=SREG;
    2b28:	1f b7       	in	r17, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    2b2a:	8f b7       	in	r24, 0x3f	; 63
    2b2c:	8f 77       	andi	r24, 0x7F	; 127
    2b2e:	8f bf       	out	0x3f, r24	; 63
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	LCD1 lcd1;
	//import parametros
	lcd1_DDR=ddr;
    2b30:	70 93 80 02 	sts	0x0280, r23	; 0x800280 <lcd1_DDR+0x1>
    2b34:	60 93 7f 02 	sts	0x027F, r22	; 0x80027f <lcd1_DDR>
	lcd1_PIN=pin;
    2b38:	50 93 83 02 	sts	0x0283, r21	; 0x800283 <lcd1_PIN+0x1>
    2b3c:	40 93 82 02 	sts	0x0282, r20	; 0x800282 <lcd1_PIN>
	lcd1_PORT=port;
    2b40:	30 93 8a 02 	sts	0x028A, r19	; 0x80028a <lcd1_PORT+0x1>
    2b44:	20 93 89 02 	sts	0x0289, r18	; 0x800289 <lcd1_PORT>
	//inic variables
	*lcd1_DDR=0x00;
    2b48:	fb 01       	movw	r30, r22
    2b4a:	10 82       	st	Z, r1
	*lcd1_PORT=0xFF;
    2b4c:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    2b50:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    2b54:	8f ef       	ldi	r24, 0xFF	; 255
    2b56:	80 83       	st	Z, r24
	lcd1_detect=*lcd1_PIN & (1<<NC);
    2b58:	e0 91 82 02 	lds	r30, 0x0282	; 0x800282 <lcd1_PIN>
    2b5c:	f0 91 83 02 	lds	r31, 0x0283	; 0x800283 <lcd1_PIN+0x1>
    2b60:	80 81       	ld	r24, Z
    2b62:	88 70       	andi	r24, 0x08	; 8
    2b64:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <lcd1_detect>
	lcd1.hspace=LCD1_hspace;
	lcd1.clear=LCD1_clear;
	lcd1.gotoxy=LCD1_gotoxy;
	lcd1.reboot=LCD1_reboot;
	//LCD INIC
	LCD1_inic();
    2b68:	95 df       	rcall	.-214    	; 0x2a94 <LCD1_inic>
	SREG=tSREG;
    2b6a:	1f bf       	out	0x3f, r17	; 63
	//
	return lcd1;
    2b6c:	8c e6       	ldi	r24, 0x6C	; 108
    2b6e:	93 e1       	ldi	r25, 0x13	; 19
    2b70:	99 83       	std	Y+1, r25	; 0x01
    2b72:	88 83       	st	Y, r24
    2b74:	80 e3       	ldi	r24, 0x30	; 48
    2b76:	94 e1       	ldi	r25, 0x14	; 20
    2b78:	9b 83       	std	Y+3, r25	; 0x03
    2b7a:	8a 83       	std	Y+2, r24	; 0x02
    2b7c:	8b ea       	ldi	r24, 0xAB	; 171
    2b7e:	94 e1       	ldi	r25, 0x14	; 20
    2b80:	9d 83       	std	Y+5, r25	; 0x05
    2b82:	8c 83       	std	Y+4, r24	; 0x04
    2b84:	8d eb       	ldi	r24, 0xBD	; 189
    2b86:	94 e1       	ldi	r25, 0x14	; 20
    2b88:	9f 83       	std	Y+7, r25	; 0x07
    2b8a:	8e 83       	std	Y+6, r24	; 0x06
    2b8c:	82 ec       	ldi	r24, 0xC2	; 194
    2b8e:	94 e1       	ldi	r25, 0x14	; 20
    2b90:	99 87       	std	Y+9, r25	; 0x09
    2b92:	88 87       	std	Y+8, r24	; 0x08
    2b94:	8b ec       	ldi	r24, 0xCB	; 203
    2b96:	94 e1       	ldi	r25, 0x14	; 20
    2b98:	9b 87       	std	Y+11, r25	; 0x0b
    2b9a:	8a 87       	std	Y+10, r24	; 0x0a
    2b9c:	8c ed       	ldi	r24, 0xDC	; 220
    2b9e:	94 e1       	ldi	r25, 0x14	; 20
    2ba0:	9d 87       	std	Y+13, r25	; 0x0d
    2ba2:	8c 87       	std	Y+12, r24	; 0x0c
    2ba4:	8b e0       	ldi	r24, 0x0B	; 11
    2ba6:	95 e1       	ldi	r25, 0x15	; 21
    2ba8:	9f 87       	std	Y+15, r25	; 0x0f
    2baa:	8e 87       	std	Y+14, r24	; 0x0e
    2bac:	8f e3       	ldi	r24, 0x3F	; 63
    2bae:	95 e1       	ldi	r25, 0x15	; 21
    2bb0:	99 8b       	std	Y+17, r25	; 0x11
    2bb2:	88 8b       	std	Y+16, r24	; 0x10
    2bb4:	88 e1       	ldi	r24, 0x18	; 24
    2bb6:	95 e1       	ldi	r25, 0x15	; 21
    2bb8:	9b 8b       	std	Y+19, r25	; 0x13
    2bba:	8a 8b       	std	Y+18, r24	; 0x12
    2bbc:	87 ee       	ldi	r24, 0xE7	; 231
    2bbe:	95 e1       	ldi	r25, 0x15	; 21
    2bc0:	9d 8b       	std	Y+21, r25	; 0x15
    2bc2:	8c 8b       	std	Y+20, r24	; 0x14
}
    2bc4:	ce 01       	movw	r24, r28
    2bc6:	df 91       	pop	r29
    2bc8:	cf 91       	pop	r28
    2bca:	1f 91       	pop	r17
    2bcc:	08 95       	ret

00002bce <LCD1_reboot>:
	*lcd1_PORT|=(1<<EN);
	LCD_ticks(num);
	*lcd1_PORT&=~(1<<EN);
}
void LCD1_reboot(void)
{
    2bce:	cf 93       	push	r28
	//low high detect pin NC
	uint8_t i;
	uint8_t tmp;
	tmp=*lcd1_PIN & (1<<NC);
    2bd0:	e0 91 82 02 	lds	r30, 0x0282	; 0x800282 <lcd1_PIN>
    2bd4:	f0 91 83 02 	lds	r31, 0x0283	; 0x800283 <lcd1_PIN+0x1>
    2bd8:	c0 81       	ld	r28, Z
    2bda:	c8 70       	andi	r28, 0x08	; 8
	i=tmp^lcd1_detect;
    2bdc:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <lcd1_detect>
    2be0:	8c 27       	eor	r24, r28
	i&=tmp;
	if(i)
    2be2:	8c 23       	and	r24, r28
    2be4:	09 f0       	breq	.+2      	; 0x2be8 <LCD1_reboot+0x1a>
		LCD1_inic();
    2be6:	56 df       	rcall	.-340    	; 0x2a94 <LCD1_inic>
	lcd1_detect=tmp;
    2be8:	c0 93 81 02 	sts	0x0281, r28	; 0x800281 <lcd1_detect>
}
    2bec:	cf 91       	pop	r28
    2bee:	08 95       	ret

00002bf0 <PORTINIT>:
** procedure and function definition
*/
void PORTINIT()
{
	//INPUT
	DDRF=0x00;
    2bf0:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	PORTF=0x0F;
    2bf4:	8f e0       	ldi	r24, 0x0F	; 15
    2bf6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	DDRE=0X00;
    2bfa:	12 b8       	out	0x02, r1	; 2
	PORTE=0XFF;
    2bfc:	8f ef       	ldi	r24, 0xFF	; 255
    2bfe:	83 b9       	out	0x03, r24	; 3
	DDRD=0X00;
    2c00:	11 ba       	out	0x11, r1	; 17
	PORTD=0XFF;
    2c02:	82 bb       	out	0x12, r24	; 18
	//OUTPUT
	DDRC=0XFF;
    2c04:	84 bb       	out	0x14, r24	; 20
	PORTC=0x00;
    2c06:	15 ba       	out	0x15, r1	; 21
	DDRB|=(1<<5) | (1<<6) | (1<<7);
    2c08:	87 b3       	in	r24, 0x17	; 23
    2c0a:	80 6e       	ori	r24, 0xE0	; 224
    2c0c:	87 bb       	out	0x17, r24	; 23
	//UART0
	//DDRE=0X02;
	SREG|=(1<<GI);
    2c0e:	8f b7       	in	r24, 0x3f	; 63
    2c10:	80 68       	ori	r24, 0x80	; 128
    2c12:	8f bf       	out	0x3f, r24	; 63
    2c14:	08 95       	ret

00002c16 <main>:
/*
** procedure and function
*/
/*MAIN*/
int main(void)
{
    2c16:	cf 93       	push	r28
    2c18:	df 93       	push	r29
    2c1a:	cd b7       	in	r28, 0x3d	; 61
    2c1c:	de b7       	in	r29, 0x3e	; 62
    2c1e:	ce 5c       	subi	r28, 0xCE	; 206
    2c20:	d1 09       	sbc	r29, r1
    2c22:	0f b6       	in	r0, 0x3f	; 63
    2c24:	f8 94       	cli
    2c26:	de bf       	out	0x3e, r29	; 62
    2c28:	0f be       	out	0x3f, r0	; 63
    2c2a:	cd bf       	out	0x3d, r28	; 61
	/***INICIALIZE OBJECTS***/
	FUNC function= FUNCenable();
    2c2c:	ce 01       	movw	r24, r28
    2c2e:	01 96       	adiw	r24, 0x01	; 1
    2c30:	f6 da       	rcall	.-2580   	; 0x221e <FUNCenable>
    2c32:	4b a0       	ldd	r4, Y+35	; 0x23
    2c34:	5c a0       	ldd	r5, Y+36	; 0x24
    2c36:	2d ad       	ldd	r18, Y+61	; 0x3d
    2c38:	3e ad       	ldd	r19, Y+62	; 0x3e
    2c3a:	c7 53       	subi	r28, 0x37	; 55
    2c3c:	df 4f       	sbci	r29, 0xFF	; 255
    2c3e:	39 83       	std	Y+1, r19	; 0x01
    2c40:	28 83       	st	Y, r18
    2c42:	c9 5c       	subi	r28, 0xC9	; 201
    2c44:	d0 40       	sbci	r29, 0x00	; 0
    2c46:	21 96       	adiw	r28, 0x01	; 1
    2c48:	8e ad       	ldd	r24, Y+62	; 0x3e
    2c4a:	9f ad       	ldd	r25, Y+63	; 0x3f
    2c4c:	21 97       	sbiw	r28, 0x01	; 1
    2c4e:	c5 53       	subi	r28, 0x35	; 53
    2c50:	df 4f       	sbci	r29, 0xFF	; 255
    2c52:	99 83       	std	Y+1, r25	; 0x01
    2c54:	88 83       	st	Y, r24
    2c56:	cb 5c       	subi	r28, 0xCB	; 203
    2c58:	d0 40       	sbci	r29, 0x00	; 0
	LCD1 lcd0 = LCD1enable(&DDRA,&PINA,&PORTA);
    2c5a:	2b e3       	ldi	r18, 0x3B	; 59
    2c5c:	30 e0       	ldi	r19, 0x00	; 0
    2c5e:	49 e3       	ldi	r20, 0x39	; 57
    2c60:	50 e0       	ldi	r21, 0x00	; 0
    2c62:	6a e3       	ldi	r22, 0x3A	; 58
    2c64:	70 e0       	ldi	r23, 0x00	; 0
    2c66:	ce 01       	movw	r24, r28
    2c68:	85 5b       	subi	r24, 0xB5	; 181
    2c6a:	9f 4f       	sbci	r25, 0xFF	; 255
    2c6c:	59 df       	rcall	.-334    	; 0x2b20 <LCD1enable>
    2c6e:	67 96       	adiw	r28, 0x17	; 23
    2c70:	6e ac       	ldd	r6, Y+62	; 0x3e
    2c72:	7f ac       	ldd	r7, Y+63	; 0x3f
    2c74:	67 97       	sbiw	r28, 0x17	; 23
    2c76:	6f 96       	adiw	r28, 0x1f	; 31
    2c78:	8e ac       	ldd	r8, Y+62	; 0x3e
    2c7a:	9f ac       	ldd	r9, Y+63	; 0x3f
    2c7c:	6f 97       	sbiw	r28, 0x1f	; 31
	//LCD1 lcd1 = LCD1enable(&DDRC,&PINC,&PORTC);
	UART1 uart= UART1enable(103,8,1,NONE);//103 para 9600, 68 para 14400
    2c7e:	00 e0       	ldi	r16, 0x00	; 0
    2c80:	10 e0       	ldi	r17, 0x00	; 0
    2c82:	21 e0       	ldi	r18, 0x01	; 1
    2c84:	30 e0       	ldi	r19, 0x00	; 0
    2c86:	48 e0       	ldi	r20, 0x08	; 8
    2c88:	50 e0       	ldi	r21, 0x00	; 0
    2c8a:	67 e6       	ldi	r22, 0x67	; 103
    2c8c:	70 e0       	ldi	r23, 0x00	; 0
    2c8e:	ce 01       	movw	r24, r28
    2c90:	8f 59       	subi	r24, 0x9F	; 159
    2c92:	9f 4f       	sbci	r25, 0xFF	; 255
    2c94:	0e 94 04 09 	call	0x1208	; 0x1208 <UART1enable>
	I2C i2c = I2Cenable(85, 1);
    2c98:	41 e0       	ldi	r20, 0x01	; 1
    2c9a:	65 e5       	ldi	r22, 0x55	; 85
    2c9c:	ce 01       	movw	r24, r28
    2c9e:	8b 58       	subi	r24, 0x8B	; 139
    2ca0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ca2:	0e 94 33 07 	call	0xe66	; 0xe66 <I2Cenable>
	ANALOG analog = ANALOGenable(1, 128, 3, 0, 4, 7);
    2ca6:	1f 92       	push	r1
    2ca8:	87 e0       	ldi	r24, 0x07	; 7
    2caa:	8f 93       	push	r24
    2cac:	1f 92       	push	r1
    2cae:	84 e0       	ldi	r24, 0x04	; 4
    2cb0:	8f 93       	push	r24
    2cb2:	1f 92       	push	r1
    2cb4:	1f 92       	push	r1
    2cb6:	1f 92       	push	r1
    2cb8:	83 e0       	ldi	r24, 0x03	; 3
    2cba:	8f 93       	push	r24
    2cbc:	80 e8       	ldi	r24, 0x80	; 128
    2cbe:	8f 93       	push	r24
    2cc0:	81 e0       	ldi	r24, 0x01	; 1
    2cc2:	8f 93       	push	r24
    2cc4:	0e 94 b6 00 	call	0x16c	; 0x16c <ANALOGenable>
    2cc8:	1c 01       	movw	r2, r24
	TIMER_COUNTER3 timer3 = TIMER_COUNTER3enable(0,1); // 0,1
    2cca:	41 e0       	ldi	r20, 0x01	; 1
    2ccc:	60 e0       	ldi	r22, 0x00	; 0
    2cce:	ce 01       	movw	r24, r28
    2cd0:	81 58       	subi	r24, 0x81	; 129
    2cd2:	9f 4f       	sbci	r25, 0xFF	; 255
    2cd4:	0e 94 89 05 	call	0xb12	; 0xb12 <TIMER_COUNTER3enable>
	TIMER_COUNTER1 timer1 = TIMER_COUNTER1enable(9,0);
    2cd8:	40 e0       	ldi	r20, 0x00	; 0
    2cda:	69 e0       	ldi	r22, 0x09	; 9
    2cdc:	ce 01       	movw	r24, r28
    2cde:	81 57       	subi	r24, 0x71	; 113
    2ce0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ce2:	0e 94 93 04 	call	0x926	; 0x926 <TIMER_COUNTER1enable>
	//SPI spi = SPIenable(SPI_MASTER_MODE, SPI_MSB_DATA_ORDER, 0, 8);
	//EEPROM eeprom = EEPROMenable();
	PORTINIT();
    2ce6:	84 df       	rcall	.-248    	; 0x2bf0 <PORTINIT>
	int6=INTERRUPTenable();
    2ce8:	0e 94 11 03 	call	0x622	; 0x622 <INTERRUPTenable>
    2cec:	20 93 8b 02 	sts	0x028B, r18	; 0x80028b <int6>
    2cf0:	30 93 8c 02 	sts	0x028C, r19	; 0x80028c <int6+0x1>
    2cf4:	40 93 8d 02 	sts	0x028D, r20	; 0x80028d <int6+0x2>
    2cf8:	50 93 8e 02 	sts	0x028E, r21	; 0x80028e <int6+0x3>
    2cfc:	60 93 8f 02 	sts	0x028F, r22	; 0x80028f <int6+0x4>
    2d00:	70 93 90 02 	sts	0x0290, r23	; 0x800290 <int6+0x5>
	relogio=CLOCKenable(0,0,0);
    2d04:	20 e0       	ldi	r18, 0x00	; 0
    2d06:	40 e0       	ldi	r20, 0x00	; 0
    2d08:	60 e0       	ldi	r22, 0x00	; 0
    2d0a:	ce 01       	movw	r24, r28
    2d0c:	8b 54       	subi	r24, 0x4B	; 75
    2d0e:	9f 4f       	sbci	r25, 0xFF	; 255
    2d10:	0e 94 cd 0c 	call	0x199a	; 0x199a <CLOCKenable>
    2d14:	84 e1       	ldi	r24, 0x14	; 20
    2d16:	fe 01       	movw	r30, r28
    2d18:	eb 54       	subi	r30, 0x4B	; 75
    2d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1c:	a3 e9       	ldi	r26, 0x93	; 147
    2d1e:	b2 e0       	ldi	r27, 0x02	; 2
    2d20:	01 90       	ld	r0, Z+
    2d22:	0d 92       	st	X+, r0
    2d24:	8a 95       	dec	r24
    2d26:	e1 f7       	brne	.-8      	; 0x2d20 <main+0x10a>
	struct keypadata keypadinput={"Ola",'0'};
	KEYPAD keypad = KEYPADenable(&DDRE,&PINE,&PORTE);
    2d28:	43 e2       	ldi	r20, 0x23	; 35
    2d2a:	50 e0       	ldi	r21, 0x00	; 0
    2d2c:	61 e2       	ldi	r22, 0x21	; 33
    2d2e:	70 e0       	ldi	r23, 0x00	; 0
    2d30:	82 e2       	ldi	r24, 0x22	; 34
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	7c dc       	rcall	.-1800   	; 0x262e <KEYPADenable>
    2d36:	c1 56       	subi	r28, 0x61	; 97
    2d38:	df 4f       	sbci	r29, 0xFF	; 255
    2d3a:	28 83       	st	Y, r18
    2d3c:	cf 59       	subi	r28, 0x9F	; 159
    2d3e:	d0 40       	sbci	r29, 0x00	; 0
    2d40:	c0 56       	subi	r28, 0x60	; 96
    2d42:	df 4f       	sbci	r29, 0xFF	; 255
    2d44:	38 83       	st	Y, r19
    2d46:	c0 5a       	subi	r28, 0xA0	; 160
    2d48:	d0 40       	sbci	r29, 0x00	; 0
    2d4a:	cf 55       	subi	r28, 0x5F	; 95
    2d4c:	df 4f       	sbci	r29, 0xFF	; 255
    2d4e:	48 83       	st	Y, r20
    2d50:	c1 5a       	subi	r28, 0xA1	; 161
    2d52:	d0 40       	sbci	r29, 0x00	; 0
    2d54:	ce 55       	subi	r28, 0x5E	; 94
    2d56:	df 4f       	sbci	r29, 0xFF	; 255
    2d58:	58 83       	st	Y, r21
    2d5a:	c2 5a       	subi	r28, 0xA2	; 162
    2d5c:	d0 40       	sbci	r29, 0x00	; 0
    2d5e:	cd 55       	subi	r28, 0x5D	; 93
    2d60:	df 4f       	sbci	r29, 0xFF	; 255
    2d62:	68 83       	st	Y, r22
    2d64:	c3 5a       	subi	r28, 0xA3	; 163
    2d66:	d0 40       	sbci	r29, 0x00	; 0
    2d68:	cc 55       	subi	r28, 0x5C	; 92
    2d6a:	df 4f       	sbci	r29, 0xFF	; 255
    2d6c:	78 83       	st	Y, r23
    2d6e:	c4 5a       	subi	r28, 0xA4	; 164
    2d70:	d0 40       	sbci	r29, 0x00	; 0
	/******/
	//eeprom.update_block( "Sergio !!" , (uint8_t*)&NonVolatileString, 16);
	count=0;
    2d72:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <count>
	char tmp[16];
	uart.putc('>');
    2d76:	af 96       	adiw	r28, 0x2f	; 47
    2d78:	ee ad       	ldd	r30, Y+62	; 0x3e
    2d7a:	ff ad       	ldd	r31, Y+63	; 0x3f
    2d7c:	af 97       	sbiw	r28, 0x2f	; 47
    2d7e:	8e e3       	ldi	r24, 0x3E	; 62
    2d80:	09 95       	icall
	uart.puts("SERGIO CODE");
    2d82:	e1 96       	adiw	r28, 0x31	; 49
    2d84:	ee ad       	ldd	r30, Y+62	; 0x3e
    2d86:	ff ad       	ldd	r31, Y+63	; 0x3f
    2d88:	e1 97       	sbiw	r28, 0x31	; 49
    2d8a:	86 e2       	ldi	r24, 0x26	; 38
    2d8c:	91 e0       	ldi	r25, 0x01	; 1
    2d8e:	09 95       	icall
	timer1.compoutmodeB(2);
    2d90:	cf 56       	subi	r28, 0x6F	; 111
    2d92:	df 4f       	sbci	r29, 0xFF	; 255
    2d94:	e8 81       	ld	r30, Y
    2d96:	f9 81       	ldd	r31, Y+1	; 0x01
    2d98:	c1 59       	subi	r28, 0x91	; 145
    2d9a:	d0 40       	sbci	r29, 0x00	; 0
    2d9c:	82 e0       	ldi	r24, 0x02	; 2
    2d9e:	09 95       	icall
	timer1.compareA(20000);
    2da0:	cb 56       	subi	r28, 0x6B	; 107
    2da2:	df 4f       	sbci	r29, 0xFF	; 255
    2da4:	e8 81       	ld	r30, Y
    2da6:	f9 81       	ldd	r31, Y+1	; 0x01
    2da8:	c5 59       	subi	r28, 0x95	; 149
    2daa:	d0 40       	sbci	r29, 0x00	; 0
    2dac:	80 e2       	ldi	r24, 0x20	; 32
    2dae:	9e e4       	ldi	r25, 0x4E	; 78
    2db0:	09 95       	icall
	timer1.start(8);
    2db2:	c5 56       	subi	r28, 0x65	; 101
    2db4:	df 4f       	sbci	r29, 0xFF	; 255
    2db6:	e8 81       	ld	r30, Y
    2db8:	f9 81       	ldd	r31, Y+1	; 0x01
    2dba:	cb 59       	subi	r28, 0x9B	; 155
    2dbc:	d0 40       	sbci	r29, 0x00	; 0
    2dbe:	88 e0       	ldi	r24, 0x08	; 8
    2dc0:	90 e0       	ldi	r25, 0x00	; 0
    2dc2:	09 95       	icall
	timer3.start(1);
    2dc4:	c5 57       	subi	r28, 0x75	; 117
    2dc6:	df 4f       	sbci	r29, 0xFF	; 255
    2dc8:	e8 81       	ld	r30, Y
    2dca:	f9 81       	ldd	r31, Y+1	; 0x01
    2dcc:	cb 58       	subi	r28, 0x8B	; 139
    2dce:	d0 40       	sbci	r29, 0x00	; 0
    2dd0:	81 e0       	ldi	r24, 0x01	; 1
    2dd2:	90 e0       	ldi	r25, 0x00	; 0
    2dd4:	09 95       	icall
	int6.set(6,1);
    2dd6:	e0 91 8b 02 	lds	r30, 0x028B	; 0x80028b <int6>
    2dda:	f0 91 8c 02 	lds	r31, 0x028C	; 0x80028c <int6+0x1>
    2dde:	61 e0       	ldi	r22, 0x01	; 1
    2de0:	86 e0       	ldi	r24, 0x06	; 6
    2de2:	09 95       	icall
	lcd0.clear();
    2de4:	6d 96       	adiw	r28, 0x1d	; 29
    2de6:	ee ad       	ldd	r30, Y+62	; 0x3e
    2de8:	ff ad       	ldd	r31, Y+63	; 0x3f
    2dea:	6d 97       	sbiw	r28, 0x1d	; 29
    2dec:	09 95       	icall
    2dee:	0f b6       	in	r0, 0x3f	; 63
    2df0:	f8 94       	cli
    2df2:	de bf       	out	0x3e, r29	; 62
    2df4:	0f be       	out	0x3f, r0	; 63
    2df6:	cd bf       	out	0x3d, r28	; 61
	/**********/
	while(TRUE){
		lcd0.reboot();
    2df8:	a1 96       	adiw	r28, 0x21	; 33
    2dfa:	ee ad       	ldd	r30, Y+62	; 0x3e
    2dfc:	ff ad       	ldd	r31, Y+63	; 0x3f
    2dfe:	a1 97       	sbiw	r28, 0x21	; 33
    2e00:	09 95       	icall
		//lcd1.reboot();
		//TODO:: Please write your application code
		keypadinput=keypad.get();
    2e02:	cf 55       	subi	r28, 0x5F	; 95
    2e04:	df 4f       	sbci	r29, 0xFF	; 255
    2e06:	e8 81       	ld	r30, Y
    2e08:	f9 81       	ldd	r31, Y+1	; 0x01
    2e0a:	c1 5a       	subi	r28, 0xA1	; 161
    2e0c:	d0 40       	sbci	r29, 0x00	; 0
    2e0e:	09 95       	icall
    2e10:	18 2f       	mov	r17, r24
		if(keypadinput.character){
    2e12:	88 23       	and	r24, r24
    2e14:	d9 f0       	breq	.+54     	; 0x2e4c <main+0x236>
			lcd0.gotoxy(0,0);
    2e16:	60 e0       	ldi	r22, 0x00	; 0
    2e18:	70 e0       	ldi	r23, 0x00	; 0
    2e1a:	80 e0       	ldi	r24, 0x00	; 0
    2e1c:	90 e0       	ldi	r25, 0x00	; 0
    2e1e:	f4 01       	movw	r30, r8
    2e20:	09 95       	icall
			lcd0.putch(keypadinput.character);
    2e22:	63 96       	adiw	r28, 0x13	; 19
    2e24:	ee ad       	ldd	r30, Y+62	; 0x3e
    2e26:	ff ad       	ldd	r31, Y+63	; 0x3f
    2e28:	63 97       	sbiw	r28, 0x13	; 19
    2e2a:	81 2f       	mov	r24, r17
    2e2c:	09 95       	icall
		}
		if(keypadinput.character == 'A'){
    2e2e:	11 34       	cpi	r17, 0x41	; 65
    2e30:	31 f4       	brne	.+12     	; 0x2e3e <main+0x228>
			relogio.second_count_reset();
    2e32:	e0 91 9d 02 	lds	r30, 0x029D	; 0x80029d <relogio+0xa>
    2e36:	f0 91 9e 02 	lds	r31, 0x029E	; 0x80029e <relogio+0xb>
    2e3a:	09 95       	icall
    2e3c:	07 c0       	rjmp	.+14     	; 0x2e4c <main+0x236>
		}
		if(keypadinput.character == 'B'){
    2e3e:	12 34       	cpi	r17, 0x42	; 66
    2e40:	29 f4       	brne	.+10     	; 0x2e4c <main+0x236>
			relogio.second_count_stop();
    2e42:	e0 91 9f 02 	lds	r30, 0x029F	; 0x80029f <relogio+0xc>
    2e46:	f0 91 a0 02 	lds	r31, 0x02A0	; 0x8002a0 <relogio+0xd>
    2e4a:	09 95       	icall
		}
		//lcd0.string(function.resizestr(tmp,3));
		lcd0.gotoxy(0,4);
    2e4c:	64 e0       	ldi	r22, 0x04	; 4
    2e4e:	70 e0       	ldi	r23, 0x00	; 0
    2e50:	80 e0       	ldi	r24, 0x00	; 0
    2e52:	90 e0       	ldi	r25, 0x00	; 0
    2e54:	f4 01       	movw	r30, r8
    2e56:	09 95       	icall
		function.ui16toa(PORTC,tmp);
    2e58:	85 b3       	in	r24, 0x15	; 21
    2e5a:	be 01       	movw	r22, r28
    2e5c:	6b 55       	subi	r22, 0x5B	; 91
    2e5e:	7f 4f       	sbci	r23, 0xFF	; 255
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	f2 01       	movw	r30, r4
    2e64:	09 95       	icall
		//lcd0.string(function.resizestr(tmp,3));
		lcd0.string(relogio.show());
    2e66:	e0 91 a5 02 	lds	r30, 0x02A5	; 0x8002a5 <relogio+0x12>
    2e6a:	f0 91 a6 02 	lds	r31, 0x02A6	; 0x8002a6 <relogio+0x13>
    2e6e:	09 95       	icall
    2e70:	f3 01       	movw	r30, r6
    2e72:	09 95       	icall
		//lcd1.gotoxy(0,0);
		//lcd1.string("Ola Sergio");
		lcd0.gotoxy(0,13);
    2e74:	6d e0       	ldi	r22, 0x0D	; 13
    2e76:	70 e0       	ldi	r23, 0x00	; 0
    2e78:	80 e0       	ldi	r24, 0x00	; 0
    2e7a:	90 e0       	ldi	r25, 0x00	; 0
    2e7c:	f4 01       	movw	r30, r8
    2e7e:	09 95       	icall
		a=function.trimmer(analog.read(0),0,1023,0,255);
    2e80:	80 e0       	ldi	r24, 0x00	; 0
    2e82:	90 e0       	ldi	r25, 0x00	; 0
    2e84:	f1 01       	movw	r30, r2
    2e86:	09 95       	icall
    2e88:	bc 01       	movw	r22, r24
    2e8a:	99 0f       	add	r25, r25
    2e8c:	88 0b       	sbc	r24, r24
    2e8e:	99 0b       	sbc	r25, r25
    2e90:	1f 92       	push	r1
    2e92:	1f 92       	push	r1
    2e94:	1f 92       	push	r1
    2e96:	ff ef       	ldi	r31, 0xFF	; 255
    2e98:	ff 93       	push	r31
    2e9a:	a1 2c       	mov	r10, r1
    2e9c:	b1 2c       	mov	r11, r1
    2e9e:	65 01       	movw	r12, r10
    2ea0:	ee 24       	eor	r14, r14
    2ea2:	ea 94       	dec	r14
    2ea4:	13 e0       	ldi	r17, 0x03	; 3
    2ea6:	f1 2e       	mov	r15, r17
    2ea8:	00 e0       	ldi	r16, 0x00	; 0
    2eaa:	10 e0       	ldi	r17, 0x00	; 0
    2eac:	20 e0       	ldi	r18, 0x00	; 0
    2eae:	30 e0       	ldi	r19, 0x00	; 0
    2eb0:	a9 01       	movw	r20, r18
    2eb2:	c5 53       	subi	r28, 0x35	; 53
    2eb4:	df 4f       	sbci	r29, 0xFF	; 255
    2eb6:	e8 81       	ld	r30, Y
    2eb8:	f9 81       	ldd	r31, Y+1	; 0x01
    2eba:	cb 5c       	subi	r28, 0xCB	; 203
    2ebc:	d0 40       	sbci	r29, 0x00	; 0
    2ebe:	09 95       	icall
    2ec0:	70 93 a9 02 	sts	0x02A9, r23	; 0x8002a9 <a+0x1>
    2ec4:	60 93 a8 02 	sts	0x02A8, r22	; 0x8002a8 <a>
		timer1.compareB(function.trimmer(analog.read(0),0,1023,450,2450));
    2ec8:	c9 56       	subi	r28, 0x69	; 105
    2eca:	df 4f       	sbci	r29, 0xFF	; 255
    2ecc:	28 81       	ld	r18, Y
    2ece:	39 81       	ldd	r19, Y+1	; 0x01
    2ed0:	c7 59       	subi	r28, 0x97	; 151
    2ed2:	d0 40       	sbci	r29, 0x00	; 0
    2ed4:	c3 53       	subi	r28, 0x33	; 51
    2ed6:	df 4f       	sbci	r29, 0xFF	; 255
    2ed8:	39 83       	std	Y+1, r19	; 0x01
    2eda:	28 83       	st	Y, r18
    2edc:	cd 5c       	subi	r28, 0xCD	; 205
    2ede:	d0 40       	sbci	r29, 0x00	; 0
    2ee0:	80 e0       	ldi	r24, 0x00	; 0
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	f1 01       	movw	r30, r2
    2ee6:	09 95       	icall
    2ee8:	bc 01       	movw	r22, r24
    2eea:	99 0f       	add	r25, r25
    2eec:	88 0b       	sbc	r24, r24
    2eee:	99 0b       	sbc	r25, r25
    2ef0:	1f 92       	push	r1
    2ef2:	1f 92       	push	r1
    2ef4:	f9 e0       	ldi	r31, 0x09	; 9
    2ef6:	ff 93       	push	r31
    2ef8:	22 e9       	ldi	r18, 0x92	; 146
    2efa:	2f 93       	push	r18
    2efc:	0f 2e       	mov	r0, r31
    2efe:	f2 ec       	ldi	r31, 0xC2	; 194
    2f00:	af 2e       	mov	r10, r31
    2f02:	bb 24       	eor	r11, r11
    2f04:	b3 94       	inc	r11
    2f06:	c1 2c       	mov	r12, r1
    2f08:	d1 2c       	mov	r13, r1
    2f0a:	f0 2d       	mov	r31, r0
    2f0c:	20 e0       	ldi	r18, 0x00	; 0
    2f0e:	30 e0       	ldi	r19, 0x00	; 0
    2f10:	a9 01       	movw	r20, r18
    2f12:	c5 53       	subi	r28, 0x35	; 53
    2f14:	df 4f       	sbci	r29, 0xFF	; 255
    2f16:	e8 81       	ld	r30, Y
    2f18:	f9 81       	ldd	r31, Y+1	; 0x01
    2f1a:	cb 5c       	subi	r28, 0xCB	; 203
    2f1c:	d0 40       	sbci	r29, 0x00	; 0
    2f1e:	09 95       	icall
    2f20:	cb 01       	movw	r24, r22
    2f22:	c3 53       	subi	r28, 0x33	; 51
    2f24:	df 4f       	sbci	r29, 0xFF	; 255
    2f26:	e8 81       	ld	r30, Y
    2f28:	f9 81       	ldd	r31, Y+1	; 0x01
    2f2a:	cd 5c       	subi	r28, 0xCD	; 205
    2f2c:	d0 40       	sbci	r29, 0x00	; 0
    2f2e:	09 95       	icall
		function.ui16toa(a,tmp);
    2f30:	be 01       	movw	r22, r28
    2f32:	6b 55       	subi	r22, 0x5B	; 91
    2f34:	7f 4f       	sbci	r23, 0xFF	; 255
    2f36:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <a>
    2f3a:	90 91 a9 02 	lds	r25, 0x02A9	; 0x8002a9 <a+0x1>
    2f3e:	f2 01       	movw	r30, r4
    2f40:	09 95       	icall
		lcd0.string(function.resizestr(tmp,5));
    2f42:	65 e0       	ldi	r22, 0x05	; 5
    2f44:	70 e0       	ldi	r23, 0x00	; 0
    2f46:	ce 01       	movw	r24, r28
    2f48:	8b 55       	subi	r24, 0x5B	; 91
    2f4a:	9f 4f       	sbci	r25, 0xFF	; 255
    2f4c:	c7 53       	subi	r28, 0x37	; 55
    2f4e:	df 4f       	sbci	r29, 0xFF	; 255
    2f50:	e8 81       	ld	r30, Y
    2f52:	f9 81       	ldd	r31, Y+1	; 0x01
    2f54:	c9 5c       	subi	r28, 0xC9	; 201
    2f56:	d0 40       	sbci	r29, 0x00	; 0
    2f58:	09 95       	icall
    2f5a:	f3 01       	movw	r30, r6
    2f5c:	09 95       	icall
		lcd0.gotoxy(1,12);
    2f5e:	6c e0       	ldi	r22, 0x0C	; 12
    2f60:	70 e0       	ldi	r23, 0x00	; 0
    2f62:	81 e0       	ldi	r24, 0x01	; 1
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	f4 01       	movw	r30, r8
    2f68:	09 95       	icall
		function.ui16toa(analog.read(2),tmp);
    2f6a:	82 e0       	ldi	r24, 0x02	; 2
    2f6c:	90 e0       	ldi	r25, 0x00	; 0
    2f6e:	f1 01       	movw	r30, r2
    2f70:	09 95       	icall
    2f72:	be 01       	movw	r22, r28
    2f74:	6b 55       	subi	r22, 0x5B	; 91
    2f76:	7f 4f       	sbci	r23, 0xFF	; 255
    2f78:	f2 01       	movw	r30, r4
    2f7a:	09 95       	icall
		lcd0.string(function.resizestr(tmp,4));
    2f7c:	64 e0       	ldi	r22, 0x04	; 4
    2f7e:	70 e0       	ldi	r23, 0x00	; 0
    2f80:	ce 01       	movw	r24, r28
    2f82:	8b 55       	subi	r24, 0x5B	; 91
    2f84:	9f 4f       	sbci	r25, 0xFF	; 255
    2f86:	c7 53       	subi	r28, 0x37	; 55
    2f88:	df 4f       	sbci	r29, 0xFF	; 255
    2f8a:	e8 81       	ld	r30, Y
    2f8c:	f9 81       	ldd	r31, Y+1	; 0x01
    2f8e:	c9 5c       	subi	r28, 0xC9	; 201
    2f90:	d0 40       	sbci	r29, 0x00	; 0
    2f92:	09 95       	icall
    2f94:	f3 01       	movw	r30, r6
    2f96:	09 95       	icall
		//spi.fast_shift(10);
		/***/
		lcd0.gotoxy(1,0);
    2f98:	60 e0       	ldi	r22, 0x00	; 0
    2f9a:	70 e0       	ldi	r23, 0x00	; 0
    2f9c:	81 e0       	ldi	r24, 0x01	; 1
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	f4 01       	movw	r30, r8
    2fa2:	09 95       	icall
		//lcd0.string(function.resizestr(uart.read(),12));
		if(relogio.second_count(210)==1)
    2fa4:	e0 91 9b 02 	lds	r30, 0x029B	; 0x80029b <relogio+0x8>
    2fa8:	f0 91 9c 02 	lds	r31, 0x029C	; 0x80029c <relogio+0x9>
    2fac:	82 ed       	ldi	r24, 0xD2	; 210
    2fae:	90 e0       	ldi	r25, 0x00	; 0
    2fb0:	09 95       	icall
    2fb2:	0f b6       	in	r0, 0x3f	; 63
    2fb4:	f8 94       	cli
    2fb6:	de bf       	out	0x3e, r29	; 62
    2fb8:	0f be       	out	0x3f, r0	; 63
    2fba:	cd bf       	out	0x3d, r28	; 61
    2fbc:	81 30       	cpi	r24, 0x01	; 1
    2fbe:	29 f4       	brne	.+10     	; 0x2fca <main+0x3b4>
			lcd0.string("3.5 minute");
    2fc0:	82 e3       	ldi	r24, 0x32	; 50
    2fc2:	91 e0       	ldi	r25, 0x01	; 1
    2fc4:	f3 01       	movw	r30, r6
    2fc6:	09 95       	icall
    2fc8:	10 c0       	rjmp	.+32     	; 0x2fea <main+0x3d4>
		else
			lcd0.string(function.resizestr(uart.read(),12));
    2fca:	ab 96       	adiw	r28, 0x2b	; 43
    2fcc:	ee ad       	ldd	r30, Y+62	; 0x3e
    2fce:	ff ad       	ldd	r31, Y+63	; 0x3f
    2fd0:	ab 97       	sbiw	r28, 0x2b	; 43
    2fd2:	09 95       	icall
    2fd4:	6c e0       	ldi	r22, 0x0C	; 12
    2fd6:	70 e0       	ldi	r23, 0x00	; 0
    2fd8:	c7 53       	subi	r28, 0x37	; 55
    2fda:	df 4f       	sbci	r29, 0xFF	; 255
    2fdc:	e8 81       	ld	r30, Y
    2fde:	f9 81       	ldd	r31, Y+1	; 0x01
    2fe0:	c9 5c       	subi	r28, 0xC9	; 201
    2fe2:	d0 40       	sbci	r29, 0x00	; 0
    2fe4:	09 95       	icall
    2fe6:	f3 01       	movw	r30, r6
    2fe8:	09 95       	icall
		//eeprom.read_block((char*)tmp, (uint8_t*)NonVolatileString, 16);
		//lcd0.string(function.resizestr(tmp,12));
		/***/
		i2c.start(TWI_MASTER_MODE);
    2fea:	e7 96       	adiw	r28, 0x37	; 55
    2fec:	ee ad       	ldd	r30, Y+62	; 0x3e
    2fee:	ff ad       	ldd	r31, Y+63	; 0x3f
    2ff0:	e7 97       	sbiw	r28, 0x37	; 55
    2ff2:	80 e0       	ldi	r24, 0x00	; 0
    2ff4:	09 95       	icall
		i2c.master_connect(10,TWI_WRITE);
    2ff6:	e9 96       	adiw	r28, 0x39	; 57
    2ff8:	ee ad       	ldd	r30, Y+62	; 0x3e
    2ffa:	ff ad       	ldd	r31, Y+63	; 0x3f
    2ffc:	e9 97       	sbiw	r28, 0x39	; 57
    2ffe:	60 e0       	ldi	r22, 0x00	; 0
    3000:	8a e0       	ldi	r24, 0x0A	; 10
    3002:	09 95       	icall
		i2c.master_write('h');
    3004:	eb 96       	adiw	r28, 0x3b	; 59
    3006:	ee ad       	ldd	r30, Y+62	; 0x3e
    3008:	ff ad       	ldd	r31, Y+63	; 0x3f
    300a:	eb 97       	sbiw	r28, 0x3b	; 59
    300c:	88 e6       	ldi	r24, 0x68	; 104
    300e:	09 95       	icall
		i2c.stop();
    3010:	ef 96       	adiw	r28, 0x3f	; 63
    3012:	ee ad       	ldd	r30, Y+62	; 0x3e
    3014:	ff ad       	ldd	r31, Y+63	; 0x3f
    3016:	ef 97       	sbiw	r28, 0x3f	; 63
    3018:	09 95       	icall
	}
    301a:	ee ce       	rjmp	.-548    	; 0x2df8 <main+0x1e2>

0000301c <__vector_29>:
}
/*
** interrupt
*/
ISR(TIMER3_OVF_vect)
{
    301c:	1f 92       	push	r1
    301e:	0f 92       	push	r0
    3020:	0f b6       	in	r0, 0x3f	; 63
    3022:	0f 92       	push	r0
    3024:	11 24       	eor	r1, r1
    3026:	0b b6       	in	r0, 0x3b	; 59
    3028:	0f 92       	push	r0
    302a:	2f 93       	push	r18
    302c:	3f 93       	push	r19
    302e:	4f 93       	push	r20
    3030:	5f 93       	push	r21
    3032:	6f 93       	push	r22
    3034:	7f 93       	push	r23
    3036:	8f 93       	push	r24
    3038:	9f 93       	push	r25
    303a:	af 93       	push	r26
    303c:	bf 93       	push	r27
    303e:	ef 93       	push	r30
    3040:	ff 93       	push	r31
	PORTC=memoria_1[count];
    3042:	e0 91 a7 02 	lds	r30, 0x02A7	; 0x8002a7 <count>
    3046:	f0 e0       	ldi	r31, 0x00	; 0
    3048:	e0 5f       	subi	r30, 0xF0	; 240
    304a:	fe 4f       	sbci	r31, 0xFE	; 254
    304c:	80 81       	ld	r24, Z
    304e:	85 bb       	out	0x15, r24	; 21
	TIMER0_COMPARE_MATCH++;
    3050:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <TIMER0_COMPARE_MATCH>
    3054:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <TIMER0_COMPARE_MATCH+0x1>
    3058:	01 96       	adiw	r24, 0x01	; 1
    305a:	90 93 92 02 	sts	0x0292, r25	; 0x800292 <TIMER0_COMPARE_MATCH+0x1>
    305e:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <TIMER0_COMPARE_MATCH>
	if(TIMER0_COMPARE_MATCH > a){
    3062:	20 91 a8 02 	lds	r18, 0x02A8	; 0x8002a8 <a>
    3066:	30 91 a9 02 	lds	r19, 0x02A9	; 0x8002a9 <a+0x1>
    306a:	28 17       	cp	r18, r24
    306c:	39 07       	cpc	r19, r25
    306e:	70 f4       	brcc	.+28     	; 0x308c <__vector_29+0x70>
		TIMER0_COMPARE_MATCH=0;
    3070:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <TIMER0_COMPARE_MATCH+0x1>
    3074:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <TIMER0_COMPARE_MATCH>
		count++;
    3078:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <count>
    307c:	8f 5f       	subi	r24, 0xFF	; 255
    307e:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <count>
		relogio.increment();
    3082:	e0 91 95 02 	lds	r30, 0x0295	; 0x800295 <relogio+0x2>
    3086:	f0 91 96 02 	lds	r31, 0x0296	; 0x800296 <relogio+0x3>
    308a:	09 95       	icall
	}
	if(count == vector_size)
    308c:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <count>
    3090:	80 31       	cpi	r24, 0x10	; 16
    3092:	11 f4       	brne	.+4      	; 0x3098 <__vector_29+0x7c>
		count=0;
    3094:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <count>
}
    3098:	ff 91       	pop	r31
    309a:	ef 91       	pop	r30
    309c:	bf 91       	pop	r27
    309e:	af 91       	pop	r26
    30a0:	9f 91       	pop	r25
    30a2:	8f 91       	pop	r24
    30a4:	7f 91       	pop	r23
    30a6:	6f 91       	pop	r22
    30a8:	5f 91       	pop	r21
    30aa:	4f 91       	pop	r20
    30ac:	3f 91       	pop	r19
    30ae:	2f 91       	pop	r18
    30b0:	0f 90       	pop	r0
    30b2:	0b be       	out	0x3b, r0	; 59
    30b4:	0f 90       	pop	r0
    30b6:	0f be       	out	0x3f, r0	; 63
    30b8:	0f 90       	pop	r0
    30ba:	1f 90       	pop	r1
    30bc:	18 95       	reti

000030be <__vector_7>:
ISR(INT6_vect)
{
    30be:	1f 92       	push	r1
    30c0:	0f 92       	push	r0
    30c2:	0f b6       	in	r0, 0x3f	; 63
    30c4:	0f 92       	push	r0
    30c6:	11 24       	eor	r1, r1
    30c8:	0b b6       	in	r0, 0x3b	; 59
    30ca:	0f 92       	push	r0
    30cc:	2f 93       	push	r18
    30ce:	3f 93       	push	r19
    30d0:	4f 93       	push	r20
    30d2:	5f 93       	push	r21
    30d4:	6f 93       	push	r22
    30d6:	7f 93       	push	r23
    30d8:	8f 93       	push	r24
    30da:	9f 93       	push	r25
    30dc:	af 93       	push	r26
    30de:	bf 93       	push	r27
    30e0:	ef 93       	push	r30
    30e2:	ff 93       	push	r31
	int6.set(6,3);
    30e4:	e0 91 8b 02 	lds	r30, 0x028B	; 0x80028b <int6>
    30e8:	f0 91 8c 02 	lds	r31, 0x028C	; 0x80028c <int6+0x1>
    30ec:	63 e0       	ldi	r22, 0x03	; 3
    30ee:	86 e0       	ldi	r24, 0x06	; 6
    30f0:	09 95       	icall
	PORTC=0XFF;
    30f2:	8f ef       	ldi	r24, 0xFF	; 255
    30f4:	85 bb       	out	0x15, r24	; 21
}
    30f6:	ff 91       	pop	r31
    30f8:	ef 91       	pop	r30
    30fa:	bf 91       	pop	r27
    30fc:	af 91       	pop	r26
    30fe:	9f 91       	pop	r25
    3100:	8f 91       	pop	r24
    3102:	7f 91       	pop	r23
    3104:	6f 91       	pop	r22
    3106:	5f 91       	pop	r21
    3108:	4f 91       	pop	r20
    310a:	3f 91       	pop	r19
    310c:	2f 91       	pop	r18
    310e:	0f 90       	pop	r0
    3110:	0b be       	out	0x3b, r0	; 59
    3112:	0f 90       	pop	r0
    3114:	0f be       	out	0x3f, r0	; 63
    3116:	0f 90       	pop	r0
    3118:	1f 90       	pop	r1
    311a:	18 95       	reti

0000311c <__mulsi3>:
    311c:	db 01       	movw	r26, r22
    311e:	8f 93       	push	r24
    3120:	9f 93       	push	r25
    3122:	88 d0       	rcall	.+272    	; 0x3234 <__muluhisi3>
    3124:	bf 91       	pop	r27
    3126:	af 91       	pop	r26
    3128:	a2 9f       	mul	r26, r18
    312a:	80 0d       	add	r24, r0
    312c:	91 1d       	adc	r25, r1
    312e:	a3 9f       	mul	r26, r19
    3130:	90 0d       	add	r25, r0
    3132:	b2 9f       	mul	r27, r18
    3134:	90 0d       	add	r25, r0
    3136:	11 24       	eor	r1, r1
    3138:	08 95       	ret

0000313a <__udivmodhi4>:
    313a:	aa 1b       	sub	r26, r26
    313c:	bb 1b       	sub	r27, r27
    313e:	51 e1       	ldi	r21, 0x11	; 17
    3140:	07 c0       	rjmp	.+14     	; 0x3150 <__udivmodhi4_ep>

00003142 <__udivmodhi4_loop>:
    3142:	aa 1f       	adc	r26, r26
    3144:	bb 1f       	adc	r27, r27
    3146:	a6 17       	cp	r26, r22
    3148:	b7 07       	cpc	r27, r23
    314a:	10 f0       	brcs	.+4      	; 0x3150 <__udivmodhi4_ep>
    314c:	a6 1b       	sub	r26, r22
    314e:	b7 0b       	sbc	r27, r23

00003150 <__udivmodhi4_ep>:
    3150:	88 1f       	adc	r24, r24
    3152:	99 1f       	adc	r25, r25
    3154:	5a 95       	dec	r21
    3156:	a9 f7       	brne	.-22     	; 0x3142 <__udivmodhi4_loop>
    3158:	80 95       	com	r24
    315a:	90 95       	com	r25
    315c:	bc 01       	movw	r22, r24
    315e:	cd 01       	movw	r24, r26
    3160:	08 95       	ret

00003162 <__divmodhi4>:
    3162:	97 fb       	bst	r25, 7
    3164:	07 2e       	mov	r0, r23
    3166:	16 f4       	brtc	.+4      	; 0x316c <__divmodhi4+0xa>
    3168:	00 94       	com	r0
    316a:	06 d0       	rcall	.+12     	; 0x3178 <__divmodhi4_neg1>
    316c:	77 fd       	sbrc	r23, 7
    316e:	08 d0       	rcall	.+16     	; 0x3180 <__divmodhi4_neg2>
    3170:	e4 df       	rcall	.-56     	; 0x313a <__udivmodhi4>
    3172:	07 fc       	sbrc	r0, 7
    3174:	05 d0       	rcall	.+10     	; 0x3180 <__divmodhi4_neg2>
    3176:	3e f4       	brtc	.+14     	; 0x3186 <__divmodhi4_exit>

00003178 <__divmodhi4_neg1>:
    3178:	90 95       	com	r25
    317a:	81 95       	neg	r24
    317c:	9f 4f       	sbci	r25, 0xFF	; 255
    317e:	08 95       	ret

00003180 <__divmodhi4_neg2>:
    3180:	70 95       	com	r23
    3182:	61 95       	neg	r22
    3184:	7f 4f       	sbci	r23, 0xFF	; 255

00003186 <__divmodhi4_exit>:
    3186:	08 95       	ret

00003188 <__udivmodsi4>:
    3188:	a1 e2       	ldi	r26, 0x21	; 33
    318a:	1a 2e       	mov	r1, r26
    318c:	aa 1b       	sub	r26, r26
    318e:	bb 1b       	sub	r27, r27
    3190:	fd 01       	movw	r30, r26
    3192:	0d c0       	rjmp	.+26     	; 0x31ae <__udivmodsi4_ep>

00003194 <__udivmodsi4_loop>:
    3194:	aa 1f       	adc	r26, r26
    3196:	bb 1f       	adc	r27, r27
    3198:	ee 1f       	adc	r30, r30
    319a:	ff 1f       	adc	r31, r31
    319c:	a2 17       	cp	r26, r18
    319e:	b3 07       	cpc	r27, r19
    31a0:	e4 07       	cpc	r30, r20
    31a2:	f5 07       	cpc	r31, r21
    31a4:	20 f0       	brcs	.+8      	; 0x31ae <__udivmodsi4_ep>
    31a6:	a2 1b       	sub	r26, r18
    31a8:	b3 0b       	sbc	r27, r19
    31aa:	e4 0b       	sbc	r30, r20
    31ac:	f5 0b       	sbc	r31, r21

000031ae <__udivmodsi4_ep>:
    31ae:	66 1f       	adc	r22, r22
    31b0:	77 1f       	adc	r23, r23
    31b2:	88 1f       	adc	r24, r24
    31b4:	99 1f       	adc	r25, r25
    31b6:	1a 94       	dec	r1
    31b8:	69 f7       	brne	.-38     	; 0x3194 <__udivmodsi4_loop>
    31ba:	60 95       	com	r22
    31bc:	70 95       	com	r23
    31be:	80 95       	com	r24
    31c0:	90 95       	com	r25
    31c2:	9b 01       	movw	r18, r22
    31c4:	ac 01       	movw	r20, r24
    31c6:	bd 01       	movw	r22, r26
    31c8:	cf 01       	movw	r24, r30
    31ca:	08 95       	ret

000031cc <__divmodsi4>:
    31cc:	05 2e       	mov	r0, r21
    31ce:	97 fb       	bst	r25, 7
    31d0:	16 f4       	brtc	.+4      	; 0x31d6 <__divmodsi4+0xa>
    31d2:	00 94       	com	r0
    31d4:	0f d0       	rcall	.+30     	; 0x31f4 <__negsi2>
    31d6:	57 fd       	sbrc	r21, 7
    31d8:	05 d0       	rcall	.+10     	; 0x31e4 <__divmodsi4_neg2>
    31da:	d6 df       	rcall	.-84     	; 0x3188 <__udivmodsi4>
    31dc:	07 fc       	sbrc	r0, 7
    31de:	02 d0       	rcall	.+4      	; 0x31e4 <__divmodsi4_neg2>
    31e0:	46 f4       	brtc	.+16     	; 0x31f2 <__divmodsi4_exit>
    31e2:	08 c0       	rjmp	.+16     	; 0x31f4 <__negsi2>

000031e4 <__divmodsi4_neg2>:
    31e4:	50 95       	com	r21
    31e6:	40 95       	com	r20
    31e8:	30 95       	com	r19
    31ea:	21 95       	neg	r18
    31ec:	3f 4f       	sbci	r19, 0xFF	; 255
    31ee:	4f 4f       	sbci	r20, 0xFF	; 255
    31f0:	5f 4f       	sbci	r21, 0xFF	; 255

000031f2 <__divmodsi4_exit>:
    31f2:	08 95       	ret

000031f4 <__negsi2>:
    31f4:	90 95       	com	r25
    31f6:	80 95       	com	r24
    31f8:	70 95       	com	r23
    31fa:	61 95       	neg	r22
    31fc:	7f 4f       	sbci	r23, 0xFF	; 255
    31fe:	8f 4f       	sbci	r24, 0xFF	; 255
    3200:	9f 4f       	sbci	r25, 0xFF	; 255
    3202:	08 95       	ret

00003204 <__tablejump2__>:
    3204:	ee 0f       	add	r30, r30
    3206:	ff 1f       	adc	r31, r31
    3208:	00 24       	eor	r0, r0
    320a:	00 1c       	adc	r0, r0
    320c:	0b be       	out	0x3b, r0	; 59
    320e:	07 90       	elpm	r0, Z+
    3210:	f6 91       	elpm	r31, Z
    3212:	e0 2d       	mov	r30, r0
    3214:	09 94       	ijmp

00003216 <__umulhisi3>:
    3216:	a2 9f       	mul	r26, r18
    3218:	b0 01       	movw	r22, r0
    321a:	b3 9f       	mul	r27, r19
    321c:	c0 01       	movw	r24, r0
    321e:	a3 9f       	mul	r26, r19
    3220:	70 0d       	add	r23, r0
    3222:	81 1d       	adc	r24, r1
    3224:	11 24       	eor	r1, r1
    3226:	91 1d       	adc	r25, r1
    3228:	b2 9f       	mul	r27, r18
    322a:	70 0d       	add	r23, r0
    322c:	81 1d       	adc	r24, r1
    322e:	11 24       	eor	r1, r1
    3230:	91 1d       	adc	r25, r1
    3232:	08 95       	ret

00003234 <__muluhisi3>:
    3234:	f0 df       	rcall	.-32     	; 0x3216 <__umulhisi3>
    3236:	a5 9f       	mul	r26, r21
    3238:	90 0d       	add	r25, r0
    323a:	b4 9f       	mul	r27, r20
    323c:	90 0d       	add	r25, r0
    323e:	a4 9f       	mul	r26, r20
    3240:	80 0d       	add	r24, r0
    3242:	91 1d       	adc	r25, r1
    3244:	11 24       	eor	r1, r1
    3246:	08 95       	ret

00003248 <_exit>:
    3248:	f8 94       	cli

0000324a <__stop_program>:
    324a:	ff cf       	rjmp	.-2      	; 0x324a <__stop_program>
