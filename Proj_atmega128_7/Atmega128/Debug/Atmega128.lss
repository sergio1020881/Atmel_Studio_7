
Atmega128.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000cc  00800100  00002e18  00002eac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002e18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000228  008001cc  008001cc  00002f78  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002f78  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002fa8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000820  00000000  00000000  00002fe8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007e35  00000000  00000000  00003808  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001e91  00000000  00000000  0000b63d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004c9d  00000000  00000000  0000d4ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000012a8  00000000  00000000  0001216c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001592  00000000  00000000  00013414  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000665b  00000000  00000000  000149a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000600  00000000  00000000  0001b001  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7a c0       	rjmp	.+244    	; 0xf6 <__ctors_end>
       2:	00 00       	nop
       4:	03 c2       	rjmp	.+1030   	; 0x40c <__vector_1>
       6:	00 00       	nop
       8:	0b c2       	rjmp	.+1046   	; 0x420 <__vector_2>
       a:	00 00       	nop
       c:	13 c2       	rjmp	.+1062   	; 0x434 <__vector_3>
       e:	00 00       	nop
      10:	1b c2       	rjmp	.+1078   	; 0x448 <__vector_4>
      12:	00 00       	nop
      14:	23 c2       	rjmp	.+1094   	; 0x45c <__vector_5>
      16:	00 00       	nop
      18:	2b c2       	rjmp	.+1110   	; 0x470 <__vector_6>
      1a:	00 00       	nop
      1c:	33 c2       	rjmp	.+1126   	; 0x484 <__vector_7>
      1e:	00 00       	nop
      20:	3b c2       	rjmp	.+1142   	; 0x498 <__vector_8>
      22:	00 00       	nop
      24:	87 c0       	rjmp	.+270    	; 0x134 <__bad_interrupt>
      26:	00 00       	nop
      28:	87 c2       	rjmp	.+1294   	; 0x538 <__vector_10>
      2a:	00 00       	nop
      2c:	53 c2       	rjmp	.+1190   	; 0x4d4 <__vector_11>
      2e:	00 00       	nop
      30:	5b c2       	rjmp	.+1206   	; 0x4e8 <__vector_12>
      32:	00 00       	nop
      34:	63 c2       	rjmp	.+1222   	; 0x4fc <__vector_13>
      36:	00 00       	nop
      38:	75 c2       	rjmp	.+1258   	; 0x524 <__vector_14>
      3a:	00 00       	nop
      3c:	7b c0       	rjmp	.+246    	; 0x134 <__bad_interrupt>
      3e:	00 00       	nop
      40:	3f c2       	rjmp	.+1150   	; 0x4c0 <__vector_16>
      42:	00 00       	nop
      44:	33 c2       	rjmp	.+1126   	; 0x4ac <__vector_17>
      46:	00 00       	nop
      48:	b3 c2       	rjmp	.+1382   	; 0x5b0 <__vector_18>
      4a:	00 00       	nop
      4c:	e7 c2       	rjmp	.+1486   	; 0x61c <__vector_19>
      4e:	00 00       	nop
      50:	71 c0       	rjmp	.+226    	; 0x134 <__bad_interrupt>
      52:	00 00       	nop
      54:	4d c1       	rjmp	.+666    	; 0x2f0 <__vector_21>
      56:	00 00       	nop
      58:	6d c0       	rjmp	.+218    	; 0x134 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	6b c0       	rjmp	.+214    	; 0x134 <__bad_interrupt>
      5e:	00 00       	nop
      60:	57 c2       	rjmp	.+1198   	; 0x510 <__vector_24>
      62:	00 00       	nop
      64:	73 c2       	rjmp	.+1254   	; 0x54c <__vector_25>
      66:	00 00       	nop
      68:	7b c2       	rjmp	.+1270   	; 0x560 <__vector_26>
      6a:	00 00       	nop
      6c:	83 c2       	rjmp	.+1286   	; 0x574 <__vector_27>
      6e:	00 00       	nop
      70:	8b c2       	rjmp	.+1302   	; 0x588 <__vector_28>
      72:	00 00       	nop
      74:	93 c2       	rjmp	.+1318   	; 0x59c <__vector_29>
      76:	00 00       	nop
      78:	fa c2       	rjmp	.+1524   	; 0x66e <__vector_30>
      7a:	00 00       	nop
      7c:	31 c3       	rjmp	.+1634   	; 0x6e0 <__vector_31>
      7e:	00 00       	nop
      80:	59 c0       	rjmp	.+178    	; 0x134 <__bad_interrupt>
      82:	00 00       	nop
      84:	57 c0       	rjmp	.+174    	; 0x134 <__bad_interrupt>
      86:	00 00       	nop
      88:	55 c0       	rjmp	.+170    	; 0x134 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c5 12       	cpse	r12, r21
      8e:	18 13       	cpse	r17, r24
      90:	32 13       	cpse	r19, r18
      92:	6f 13       	cpse	r22, r31
      94:	af 13       	cpse	r26, r31
      96:	f0 13       	cpse	r31, r16
      98:	86 14       	cp	r8, r6
      9a:	a1 14       	cp	r10, r1
      9c:	26 15       	cp	r18, r6
      9e:	41 15       	cp	r20, r1
      a0:	83 15       	cp	r24, r3
      a2:	8f 15       	cp	r24, r15
      a4:	9b 15       	cp	r25, r11
      a6:	a7 15       	cp	r26, r7
      a8:	b3 15       	cp	r27, r3
      aa:	d6 15       	cp	r29, r6
      ac:	d6 15       	cp	r29, r6
      ae:	d6 15       	cp	r29, r6
      b0:	d6 15       	cp	r29, r6
      b2:	d6 15       	cp	r29, r6
      b4:	d6 15       	cp	r29, r6
      b6:	d6 15       	cp	r29, r6
      b8:	d6 15       	cp	r29, r6
      ba:	d6 15       	cp	r29, r6
      bc:	d6 15       	cp	r29, r6
      be:	d6 15       	cp	r29, r6
      c0:	d6 15       	cp	r29, r6
      c2:	d6 15       	cp	r29, r6
      c4:	d6 15       	cp	r29, r6
      c6:	d6 15       	cp	r29, r6
      c8:	d6 15       	cp	r29, r6
      ca:	d6 15       	cp	r29, r6
      cc:	d6 15       	cp	r29, r6
      ce:	d6 15       	cp	r29, r6
      d0:	d6 15       	cp	r29, r6
      d2:	d6 15       	cp	r29, r6
      d4:	d6 15       	cp	r29, r6
      d6:	d6 15       	cp	r29, r6
      d8:	d6 15       	cp	r29, r6
      da:	d6 15       	cp	r29, r6
      dc:	d6 15       	cp	r29, r6
      de:	d6 15       	cp	r29, r6
      e0:	d6 15       	cp	r29, r6
      e2:	d6 15       	cp	r29, r6
      e4:	d6 15       	cp	r29, r6
      e6:	d6 15       	cp	r29, r6
      e8:	d6 15       	cp	r29, r6
      ea:	d6 15       	cp	r29, r6
      ec:	d6 15       	cp	r29, r6
      ee:	d6 15       	cp	r29, r6
      f0:	d6 15       	cp	r29, r6
      f2:	bf 15       	cp	r27, r15
      f4:	cb 15       	cp	r28, r11

000000f6 <__ctors_end>:
      f6:	11 24       	eor	r1, r1
      f8:	1f be       	out	0x3f, r1	; 63
      fa:	cf ef       	ldi	r28, 0xFF	; 255
      fc:	d0 e1       	ldi	r29, 0x10	; 16
      fe:	de bf       	out	0x3e, r29	; 62
     100:	cd bf       	out	0x3d, r28	; 61

00000102 <__do_copy_data>:
     102:	11 e0       	ldi	r17, 0x01	; 1
     104:	a0 e0       	ldi	r26, 0x00	; 0
     106:	b1 e0       	ldi	r27, 0x01	; 1
     108:	e8 e1       	ldi	r30, 0x18	; 24
     10a:	fe e2       	ldi	r31, 0x2E	; 46
     10c:	00 e0       	ldi	r16, 0x00	; 0
     10e:	0b bf       	out	0x3b, r16	; 59
     110:	02 c0       	rjmp	.+4      	; 0x116 <__do_copy_data+0x14>
     112:	07 90       	elpm	r0, Z+
     114:	0d 92       	st	X+, r0
     116:	ac 3c       	cpi	r26, 0xCC	; 204
     118:	b1 07       	cpc	r27, r17
     11a:	d9 f7       	brne	.-10     	; 0x112 <__do_copy_data+0x10>

0000011c <__do_clear_bss>:
     11c:	23 e0       	ldi	r18, 0x03	; 3
     11e:	ac ec       	ldi	r26, 0xCC	; 204
     120:	b1 e0       	ldi	r27, 0x01	; 1
     122:	01 c0       	rjmp	.+2      	; 0x126 <.do_clear_bss_start>

00000124 <.do_clear_bss_loop>:
     124:	1d 92       	st	X+, r1

00000126 <.do_clear_bss_start>:
     126:	a4 3f       	cpi	r26, 0xF4	; 244
     128:	b2 07       	cpc	r27, r18
     12a:	e1 f7       	brne	.-8      	; 0x124 <.do_clear_bss_loop>
     12c:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <main>
     130:	0c 94 0a 17 	jmp	0x2e14	; 0x2e14 <_exit>

00000134 <__bad_interrupt>:
     134:	65 cf       	rjmp	.-310    	; 0x0 <__vectors>

00000136 <HC595_shift_bit>:
	//
	return hc595;
}
void HC595_shift_bit(uint8_t bool)
{
	if (bool)
     136:	88 23       	and	r24, r24
     138:	89 f0       	breq	.+34     	; 0x15c <HC595_shift_bit+0x26>
		*hc595_PORT |= (1<<HC595_datapin); //Data bit HIGH
     13a:	e0 91 f9 01 	lds	r30, 0x01F9	; 0x8001f9 <hc595_PORT>
     13e:	f0 91 fa 01 	lds	r31, 0x01FA	; 0x8001fa <hc595_PORT+0x1>
     142:	20 81       	ld	r18, Z
     144:	81 e0       	ldi	r24, 0x01	; 1
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	00 90 fb 01 	lds	r0, 0x01FB	; 0x8001fb <HC595_datapin>
     14c:	02 c0       	rjmp	.+4      	; 0x152 <HC595_shift_bit+0x1c>
     14e:	88 0f       	add	r24, r24
     150:	99 1f       	adc	r25, r25
     152:	0a 94       	dec	r0
     154:	e2 f7       	brpl	.-8      	; 0x14e <HC595_shift_bit+0x18>
     156:	82 2b       	or	r24, r18
     158:	80 83       	st	Z, r24
     15a:	11 c0       	rjmp	.+34     	; 0x17e <HC595_shift_bit+0x48>
	else
		*hc595_PORT &= ~(1<<HC595_datapin); //Data bit LOW
     15c:	e0 91 f9 01 	lds	r30, 0x01F9	; 0x8001f9 <hc595_PORT>
     160:	f0 91 fa 01 	lds	r31, 0x01FA	; 0x8001fa <hc595_PORT+0x1>
     164:	20 81       	ld	r18, Z
     166:	81 e0       	ldi	r24, 0x01	; 1
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	00 90 fb 01 	lds	r0, 0x01FB	; 0x8001fb <HC595_datapin>
     16e:	02 c0       	rjmp	.+4      	; 0x174 <HC595_shift_bit+0x3e>
     170:	88 0f       	add	r24, r24
     172:	99 1f       	adc	r25, r25
     174:	0a 94       	dec	r0
     176:	e2 f7       	brpl	.-8      	; 0x170 <HC595_shift_bit+0x3a>
     178:	80 95       	com	r24
     17a:	82 23       	and	r24, r18
     17c:	80 83       	st	Z, r24
	*hc595_PORT |= (1<<HC595_clkpin); // Shift bit
     17e:	e0 91 f9 01 	lds	r30, 0x01F9	; 0x8001f9 <hc595_PORT>
     182:	f0 91 fa 01 	lds	r31, 0x01FA	; 0x8001fa <hc595_PORT+0x1>
     186:	40 81       	ld	r20, Z
     188:	81 e0       	ldi	r24, 0x01	; 1
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	9c 01       	movw	r18, r24
     18e:	00 90 fd 01 	lds	r0, 0x01FD	; 0x8001fd <HC595_clkpin>
     192:	02 c0       	rjmp	.+4      	; 0x198 <HC595_shift_bit+0x62>
     194:	22 0f       	add	r18, r18
     196:	33 1f       	adc	r19, r19
     198:	0a 94       	dec	r0
     19a:	e2 f7       	brpl	.-8      	; 0x194 <HC595_shift_bit+0x5e>
     19c:	24 2b       	or	r18, r20
     19e:	20 83       	st	Z, r18
	*hc595_PORT &= ~(1<<HC595_clkpin); //Shift disable
     1a0:	e0 91 f9 01 	lds	r30, 0x01F9	; 0x8001f9 <hc595_PORT>
     1a4:	f0 91 fa 01 	lds	r31, 0x01FA	; 0x8001fa <hc595_PORT+0x1>
     1a8:	20 81       	ld	r18, Z
     1aa:	00 90 fd 01 	lds	r0, 0x01FD	; 0x8001fd <HC595_clkpin>
     1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <HC595_shift_bit+0x7e>
     1b0:	88 0f       	add	r24, r24
     1b2:	99 1f       	adc	r25, r25
     1b4:	0a 94       	dec	r0
     1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <HC595_shift_bit+0x7a>
     1b8:	80 95       	com	r24
     1ba:	82 23       	and	r24, r18
     1bc:	80 83       	st	Z, r24
     1be:	08 95       	ret

000001c0 <HC595_shift_out>:
		HC595_shift_bit(byte & (1<<i));
	HC595_shift_out();
}
void HC595_shift_out(void)
{
	*hc595_PORT |= (1<<HC595_outpin); //Output enable
     1c0:	e0 91 f9 01 	lds	r30, 0x01F9	; 0x8001f9 <hc595_PORT>
     1c4:	f0 91 fa 01 	lds	r31, 0x01FA	; 0x8001fa <hc595_PORT+0x1>
     1c8:	40 81       	ld	r20, Z
     1ca:	81 e0       	ldi	r24, 0x01	; 1
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	9c 01       	movw	r18, r24
     1d0:	00 90 fc 01 	lds	r0, 0x01FC	; 0x8001fc <HC595_outpin>
     1d4:	02 c0       	rjmp	.+4      	; 0x1da <HC595_shift_out+0x1a>
     1d6:	22 0f       	add	r18, r18
     1d8:	33 1f       	adc	r19, r19
     1da:	0a 94       	dec	r0
     1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <HC595_shift_out+0x16>
     1de:	24 2b       	or	r18, r20
     1e0:	20 83       	st	Z, r18
	*hc595_PORT &= ~(1<<HC595_outpin); //Output disable
     1e2:	e0 91 f9 01 	lds	r30, 0x01F9	; 0x8001f9 <hc595_PORT>
     1e6:	f0 91 fa 01 	lds	r31, 0x01FA	; 0x8001fa <hc595_PORT+0x1>
     1ea:	20 81       	ld	r18, Z
     1ec:	00 90 fc 01 	lds	r0, 0x01FC	; 0x8001fc <HC595_outpin>
     1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <HC595_shift_out+0x36>
     1f2:	88 0f       	add	r24, r24
     1f4:	99 1f       	adc	r25, r25
     1f6:	0a 94       	dec	r0
     1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <HC595_shift_out+0x32>
     1fa:	80 95       	com	r24
     1fc:	82 23       	and	r24, r18
     1fe:	80 83       	st	Z, r24
     200:	08 95       	ret

00000202 <HC595_shift_byte>:
		*hc595_PORT &= ~(1<<HC595_datapin); //Data bit LOW
	*hc595_PORT |= (1<<HC595_clkpin); // Shift bit
	*hc595_PORT &= ~(1<<HC595_clkpin); //Shift disable
}
void HC595_shift_byte(uint8_t byte)
{
     202:	ff 92       	push	r15
     204:	0f 93       	push	r16
     206:	1f 93       	push	r17
     208:	cf 93       	push	r28
     20a:	df 93       	push	r29
     20c:	f8 2e       	mov	r15, r24
     20e:	c0 e0       	ldi	r28, 0x00	; 0
     210:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i;
	for(i=0;i<8;i++)
		HC595_shift_bit(byte & (1<<i));
     212:	01 e0       	ldi	r16, 0x01	; 1
     214:	10 e0       	ldi	r17, 0x00	; 0
     216:	c8 01       	movw	r24, r16
     218:	0c 2e       	mov	r0, r28
     21a:	02 c0       	rjmp	.+4      	; 0x220 <HC595_shift_byte+0x1e>
     21c:	88 0f       	add	r24, r24
     21e:	99 1f       	adc	r25, r25
     220:	0a 94       	dec	r0
     222:	e2 f7       	brpl	.-8      	; 0x21c <HC595_shift_byte+0x1a>
     224:	8f 21       	and	r24, r15
     226:	87 df       	rcall	.-242    	; 0x136 <HC595_shift_bit>
     228:	21 96       	adiw	r28, 0x01	; 1
	*hc595_PORT &= ~(1<<HC595_clkpin); //Shift disable
}
void HC595_shift_byte(uint8_t byte)
{
	uint8_t i;
	for(i=0;i<8;i++)
     22a:	c8 30       	cpi	r28, 0x08	; 8
     22c:	d1 05       	cpc	r29, r1
		HC595_shift_bit(byte & (1<<i));
	HC595_shift_out();
     22e:	99 f7       	brne	.-26     	; 0x216 <HC595_shift_byte+0x14>
     230:	c7 df       	rcall	.-114    	; 0x1c0 <HC595_shift_out>
}
     232:	df 91       	pop	r29
     234:	cf 91       	pop	r28
     236:	1f 91       	pop	r17
     238:	0f 91       	pop	r16
     23a:	ff 90       	pop	r15
     23c:	08 95       	ret

0000023e <HC595enable>:
void HC595_shift_bit(uint8_t bool);
void HC595_shift_byte(uint8_t byte);
void HC595_shift_out(void);
/***Procedure & Function***/
HC595 HC595enable(volatile uint8_t *ddr, volatile uint8_t *port, uint8_t datapin, uint8_t clkpin, uint8_t outpin)
{
     23e:	0f 93       	push	r16
     240:	cf 93       	push	r28
     242:	df 93       	push	r29
     244:	00 d0       	rcall	.+0      	; 0x246 <HC595enable+0x8>
     246:	00 d0       	rcall	.+0      	; 0x248 <HC595enable+0xa>
     248:	00 d0       	rcall	.+0      	; 0x24a <HC595enable+0xc>
     24a:	cd b7       	in	r28, 0x3d	; 61
     24c:	de b7       	in	r29, 0x3e	; 62
	//LOCAL VARIABLES
	uint8_t tSREG;
	tSREG=SREG;
     24e:	5f b7       	in	r21, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
     250:	3f b7       	in	r19, 0x3f	; 63
     252:	3f 77       	andi	r19, 0x7F	; 127
     254:	3f bf       	out	0x3f, r19	; 63
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	HC595 hc595;
	//import parametros
	hc595_DDR=ddr;
     256:	90 93 f8 01 	sts	0x01F8, r25	; 0x8001f8 <hc595_DDR+0x1>
     25a:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <hc595_DDR>
	hc595_PORT=port;
     25e:	70 93 fa 01 	sts	0x01FA, r23	; 0x8001fa <hc595_PORT+0x1>
     262:	60 93 f9 01 	sts	0x01F9, r22	; 0x8001f9 <hc595_PORT>
	HC595_datapin=datapin;
     266:	40 93 fb 01 	sts	0x01FB, r20	; 0x8001fb <HC595_datapin>
	HC595_clkpin=clkpin;
     26a:	20 93 fd 01 	sts	0x01FD, r18	; 0x8001fd <HC595_clkpin>
	HC595_outpin=outpin;
     26e:	00 93 fc 01 	sts	0x01FC, r16	; 0x8001fc <HC595_outpin>
	//inic variables
    *hc595_DDR |= (1<<datapin) | (1<<clkpin) | (1<<outpin);
     272:	fc 01       	movw	r30, r24
     274:	30 81       	ld	r19, Z
     276:	61 e0       	ldi	r22, 0x01	; 1
     278:	70 e0       	ldi	r23, 0x00	; 0
     27a:	db 01       	movw	r26, r22
     27c:	02 c0       	rjmp	.+4      	; 0x282 <HC595enable+0x44>
     27e:	aa 0f       	add	r26, r26
     280:	bb 1f       	adc	r27, r27
     282:	2a 95       	dec	r18
     284:	e2 f7       	brpl	.-8      	; 0x27e <HC595enable+0x40>
     286:	fb 01       	movw	r30, r22
     288:	02 c0       	rjmp	.+4      	; 0x28e <HC595enable+0x50>
     28a:	ee 0f       	add	r30, r30
     28c:	ff 1f       	adc	r31, r31
     28e:	0a 95       	dec	r16
     290:	e2 f7       	brpl	.-8      	; 0x28a <HC595enable+0x4c>
     292:	ea 2b       	or	r30, r26
     294:	02 c0       	rjmp	.+4      	; 0x29a <HC595enable+0x5c>
     296:	66 0f       	add	r22, r22
     298:	77 1f       	adc	r23, r23
     29a:	4a 95       	dec	r20
     29c:	e2 f7       	brpl	.-8      	; 0x296 <HC595enable+0x58>
     29e:	6e 2b       	or	r22, r30
     2a0:	23 2f       	mov	r18, r19
     2a2:	26 2b       	or	r18, r22
     2a4:	fc 01       	movw	r30, r24
     2a6:	20 83       	st	Z, r18
	*hc595_PORT &= ~((1<<datapin) | (1<<clkpin) | (1<<outpin));
     2a8:	e0 91 f9 01 	lds	r30, 0x01F9	; 0x8001f9 <hc595_PORT>
     2ac:	f0 91 fa 01 	lds	r31, 0x01FA	; 0x8001fa <hc595_PORT+0x1>
     2b0:	80 81       	ld	r24, Z
     2b2:	60 95       	com	r22
     2b4:	68 23       	and	r22, r24
     2b6:	60 83       	st	Z, r22
	//Direccionar apontadores para PROTOTIPOS
	hc595.bit=HC595_shift_bit;
	hc595.byte=HC595_shift_byte;
	hc595.out=HC595_shift_out;
	SREG=tSREG;
     2b8:	5f bf       	out	0x3f, r21	; 63
	//
	return hc595;
     2ba:	2b e9       	ldi	r18, 0x9B	; 155
     2bc:	30 e0       	ldi	r19, 0x00	; 0
     2be:	3a 83       	std	Y+2, r19	; 0x02
     2c0:	29 83       	std	Y+1, r18	; 0x01
     2c2:	41 e0       	ldi	r20, 0x01	; 1
     2c4:	51 e0       	ldi	r21, 0x01	; 1
     2c6:	5c 83       	std	Y+4, r21	; 0x04
     2c8:	4b 83       	std	Y+3, r20	; 0x03
     2ca:	60 ee       	ldi	r22, 0xE0	; 224
     2cc:	70 e0       	ldi	r23, 0x00	; 0
     2ce:	7e 83       	std	Y+6, r23	; 0x06
     2d0:	6d 83       	std	Y+5, r22	; 0x05
     2d2:	3a 81       	ldd	r19, Y+2	; 0x02
     2d4:	5c 81       	ldd	r21, Y+4	; 0x04
     2d6:	7e 81       	ldd	r23, Y+6	; 0x06
}
     2d8:	80 e0       	ldi	r24, 0x00	; 0
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	26 96       	adiw	r28, 0x06	; 6
     2de:	0f b6       	in	r0, 0x3f	; 63
     2e0:	f8 94       	cli
     2e2:	de bf       	out	0x3e, r29	; 62
     2e4:	0f be       	out	0x3f, r0	; 63
     2e6:	cd bf       	out	0x3d, r28	; 61
     2e8:	df 91       	pop	r29
     2ea:	cf 91       	pop	r28
     2ec:	0f 91       	pop	r16
     2ee:	08 95       	ret

000002f0 <__vector_21>:
ISR(ANALOG_INTERRUPT)
/*************************************************************************
Function: ANALOG interrupt
Purpose:  Read Analog Input
**************************************************************************/
{
     2f0:	1f 92       	push	r1
     2f2:	0f 92       	push	r0
     2f4:	0f b6       	in	r0, 0x3f	; 63
     2f6:	0f 92       	push	r0
     2f8:	11 24       	eor	r1, r1
     2fa:	0b b6       	in	r0, 0x3b	; 59
     2fc:	0f 92       	push	r0
     2fe:	2f 93       	push	r18
     300:	3f 93       	push	r19
     302:	4f 93       	push	r20
     304:	5f 93       	push	r21
     306:	8f 93       	push	r24
     308:	9f 93       	push	r25
     30a:	ef 93       	push	r30
     30c:	ff 93       	push	r31
	uint8_t Sreg;
	Sreg=STATUS_REGISTER;
     30e:	2f b7       	in	r18, 0x3f	; 63
	STATUS_REGISTER&=~(1<<GLOBAL_INTERRUPT_ENABLE);
     310:	8f b7       	in	r24, 0x3f	; 63
     312:	8f 77       	andi	r24, 0x7F	; 127
     314:	8f bf       	out	0x3f, r24	; 63
	adc_tmp=ADCL;
     316:	84 b1       	in	r24, 0x04	; 4
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	90 93 ce 01 	sts	0x01CE, r25	; 0x8001ce <adc_tmp+0x1>
     31e:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <adc_tmp>
	adc_tmp|=(ADCH<<8);
     322:	35 b1       	in	r19, 0x05	; 5
     324:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <adc_tmp>
     328:	90 91 ce 01 	lds	r25, 0x01CE	; 0x8001ce <adc_tmp+0x1>
     32c:	93 2b       	or	r25, r19
     32e:	90 93 ce 01 	sts	0x01CE, r25	; 0x8001ce <adc_tmp+0x1>
     332:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <adc_tmp>
	if(adc_n_sample < (1<<ADC_NUMBER_SAMPLE)){
     336:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <__data_end>
     33a:	84 30       	cpi	r24, 0x04	; 4
     33c:	a0 f4       	brcc	.+40     	; 0x366 <__vector_21+0x76>
		adc_n_sample++;
     33e:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <__data_end>
     342:	8f 5f       	subi	r24, 0xFF	; 255
     344:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <__data_end>
		adc_sample+=adc_tmp;
     348:	40 91 cd 01 	lds	r20, 0x01CD	; 0x8001cd <adc_tmp>
     34c:	50 91 ce 01 	lds	r21, 0x01CE	; 0x8001ce <adc_tmp+0x1>
     350:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <adc_sample>
     354:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <adc_sample+0x1>
     358:	84 0f       	add	r24, r20
     35a:	95 1f       	adc	r25, r21
     35c:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <adc_sample+0x1>
     360:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <adc_sample>
     364:	43 c0       	rjmp	.+134    	; 0x3ec <__vector_21+0xfc>
	}else{
		ADC_VALUE[ADC_SELECTOR]=adc_sample>>ADC_NUMBER_SAMPLE;
     366:	e0 91 d1 01 	lds	r30, 0x01D1	; 0x8001d1 <ADC_SELECTOR>
     36a:	f0 91 d2 01 	lds	r31, 0x01D2	; 0x8001d2 <ADC_SELECTOR+0x1>
     36e:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <adc_sample>
     372:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <adc_sample+0x1>
     376:	95 95       	asr	r25
     378:	87 95       	ror	r24
     37a:	95 95       	asr	r25
     37c:	87 95       	ror	r24
     37e:	ee 0f       	add	r30, r30
     380:	ff 1f       	adc	r31, r31
     382:	eb 51       	subi	r30, 0x1B	; 27
     384:	fe 4f       	sbci	r31, 0xFE	; 254
     386:	91 83       	std	Z+1, r25	; 0x01
     388:	80 83       	st	Z, r24
		adc_n_sample=adc_sample=0;
     38a:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <adc_sample+0x1>
     38e:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <adc_sample>
     392:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <__data_end>
		/******/
		if(ADC_SELECTOR < ADC_N_CHANNEL)
     396:	40 91 d1 01 	lds	r20, 0x01D1	; 0x8001d1 <ADC_SELECTOR>
     39a:	50 91 d2 01 	lds	r21, 0x01D2	; 0x8001d2 <ADC_SELECTOR+0x1>
     39e:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <ADC_N_CHANNEL>
     3a2:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <ADC_N_CHANNEL+0x1>
     3a6:	48 17       	cp	r20, r24
     3a8:	59 07       	cpc	r21, r25
     3aa:	54 f4       	brge	.+20     	; 0x3c0 <__vector_21+0xd0>
			ADC_SELECTOR++;
     3ac:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <ADC_SELECTOR>
     3b0:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <ADC_SELECTOR+0x1>
     3b4:	01 96       	adiw	r24, 0x01	; 1
     3b6:	90 93 d2 01 	sts	0x01D2, r25	; 0x8001d2 <ADC_SELECTOR+0x1>
     3ba:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <ADC_SELECTOR>
     3be:	04 c0       	rjmp	.+8      	; 0x3c8 <__vector_21+0xd8>
		else
			ADC_SELECTOR=0;
     3c0:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <ADC_SELECTOR+0x1>
     3c4:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <ADC_SELECTOR>
		ADC_SELECT &= ~MUX_MASK;
     3c8:	87 b1       	in	r24, 0x07	; 7
     3ca:	80 7e       	andi	r24, 0xE0	; 224
     3cc:	87 b9       	out	0x07, r24	; 7
		ADC_SELECT |= (ADC_CHANNEL_GAIN[ADC_SELECTOR] & MUX_MASK);
     3ce:	e0 91 d1 01 	lds	r30, 0x01D1	; 0x8001d1 <ADC_SELECTOR>
     3d2:	f0 91 d2 01 	lds	r31, 0x01D2	; 0x8001d2 <ADC_SELECTOR+0x1>
     3d6:	ee 0f       	add	r30, r30
     3d8:	ff 1f       	adc	r31, r31
     3da:	eb 52       	subi	r30, 0x2B	; 43
     3dc:	fe 4f       	sbci	r31, 0xFE	; 254
     3de:	80 81       	ld	r24, Z
     3e0:	91 81       	ldd	r25, Z+1	; 0x01
     3e2:	37 b1       	in	r19, 0x07	; 7
     3e4:	8f 71       	andi	r24, 0x1F	; 31
     3e6:	99 27       	eor	r25, r25
     3e8:	83 2b       	or	r24, r19
     3ea:	87 b9       	out	0x07, r24	; 7
	}
	STATUS_REGISTER=Sreg;
     3ec:	2f bf       	out	0x3f, r18	; 63
}
     3ee:	ff 91       	pop	r31
     3f0:	ef 91       	pop	r30
     3f2:	9f 91       	pop	r25
     3f4:	8f 91       	pop	r24
     3f6:	5f 91       	pop	r21
     3f8:	4f 91       	pop	r20
     3fa:	3f 91       	pop	r19
     3fc:	2f 91       	pop	r18
     3fe:	0f 90       	pop	r0
     400:	0b be       	out	0x3b, r0	; 59
     402:	0f 90       	pop	r0
     404:	0f be       	out	0x3f, r0	; 63
     406:	0f 90       	pop	r0
     408:	1f 90       	pop	r1
     40a:	18 95       	reti

0000040c <__vector_1>:
			break;
	}
}
/***Interrupt***/
// cross out the ones being used and redefine in main
ISR(INT0_vect){ }
     40c:	1f 92       	push	r1
     40e:	0f 92       	push	r0
     410:	0f b6       	in	r0, 0x3f	; 63
     412:	0f 92       	push	r0
     414:	11 24       	eor	r1, r1
     416:	0f 90       	pop	r0
     418:	0f be       	out	0x3f, r0	; 63
     41a:	0f 90       	pop	r0
     41c:	1f 90       	pop	r1
     41e:	18 95       	reti

00000420 <__vector_2>:
ISR(INT1_vect){ }
     420:	1f 92       	push	r1
     422:	0f 92       	push	r0
     424:	0f b6       	in	r0, 0x3f	; 63
     426:	0f 92       	push	r0
     428:	11 24       	eor	r1, r1
     42a:	0f 90       	pop	r0
     42c:	0f be       	out	0x3f, r0	; 63
     42e:	0f 90       	pop	r0
     430:	1f 90       	pop	r1
     432:	18 95       	reti

00000434 <__vector_3>:
ISR(INT2_vect){ }
     434:	1f 92       	push	r1
     436:	0f 92       	push	r0
     438:	0f b6       	in	r0, 0x3f	; 63
     43a:	0f 92       	push	r0
     43c:	11 24       	eor	r1, r1
     43e:	0f 90       	pop	r0
     440:	0f be       	out	0x3f, r0	; 63
     442:	0f 90       	pop	r0
     444:	1f 90       	pop	r1
     446:	18 95       	reti

00000448 <__vector_4>:
ISR(INT3_vect){ }
     448:	1f 92       	push	r1
     44a:	0f 92       	push	r0
     44c:	0f b6       	in	r0, 0x3f	; 63
     44e:	0f 92       	push	r0
     450:	11 24       	eor	r1, r1
     452:	0f 90       	pop	r0
     454:	0f be       	out	0x3f, r0	; 63
     456:	0f 90       	pop	r0
     458:	1f 90       	pop	r1
     45a:	18 95       	reti

0000045c <__vector_5>:
ISR(INT4_vect){ }
     45c:	1f 92       	push	r1
     45e:	0f 92       	push	r0
     460:	0f b6       	in	r0, 0x3f	; 63
     462:	0f 92       	push	r0
     464:	11 24       	eor	r1, r1
     466:	0f 90       	pop	r0
     468:	0f be       	out	0x3f, r0	; 63
     46a:	0f 90       	pop	r0
     46c:	1f 90       	pop	r1
     46e:	18 95       	reti

00000470 <__vector_6>:
ISR(INT5_vect){ }
     470:	1f 92       	push	r1
     472:	0f 92       	push	r0
     474:	0f b6       	in	r0, 0x3f	; 63
     476:	0f 92       	push	r0
     478:	11 24       	eor	r1, r1
     47a:	0f 90       	pop	r0
     47c:	0f be       	out	0x3f, r0	; 63
     47e:	0f 90       	pop	r0
     480:	1f 90       	pop	r1
     482:	18 95       	reti

00000484 <__vector_7>:
ISR(INT6_vect){ }
     484:	1f 92       	push	r1
     486:	0f 92       	push	r0
     488:	0f b6       	in	r0, 0x3f	; 63
     48a:	0f 92       	push	r0
     48c:	11 24       	eor	r1, r1
     48e:	0f 90       	pop	r0
     490:	0f be       	out	0x3f, r0	; 63
     492:	0f 90       	pop	r0
     494:	1f 90       	pop	r1
     496:	18 95       	reti

00000498 <__vector_8>:
ISR(INT7_vect){ }
     498:	1f 92       	push	r1
     49a:	0f 92       	push	r0
     49c:	0f b6       	in	r0, 0x3f	; 63
     49e:	0f 92       	push	r0
     4a0:	11 24       	eor	r1, r1
     4a2:	0f 90       	pop	r0
     4a4:	0f be       	out	0x3f, r0	; 63
     4a6:	0f 90       	pop	r0
     4a8:	1f 90       	pop	r1
     4aa:	18 95       	reti

000004ac <__vector_17>:
    while((SPI_STATUS_REGISTER & (1<<SPIF))==0)
		; // polling, serial transfer is complete interrupt.
    return SPI_DATA_REGISTER;
}
/***Interrupt***/
ISR(SPI_STC_vect){ }
     4ac:	1f 92       	push	r1
     4ae:	0f 92       	push	r0
     4b0:	0f b6       	in	r0, 0x3f	; 63
     4b2:	0f 92       	push	r0
     4b4:	11 24       	eor	r1, r1
     4b6:	0f 90       	pop	r0
     4b8:	0f be       	out	0x3f, r0	; 63
     4ba:	0f 90       	pop	r0
     4bc:	1f 90       	pop	r1
     4be:	18 95       	reti

000004c0 <__vector_16>:
	timer3_state=0;
}
/***Interrupt***/
// So that main will not freeze when not defined, therefore exclude here! before use.
//ISR(TIMER0_COMP_vect){ }
ISR(TIMER0_OVF_vect){ }
     4c0:	1f 92       	push	r1
     4c2:	0f 92       	push	r0
     4c4:	0f b6       	in	r0, 0x3f	; 63
     4c6:	0f 92       	push	r0
     4c8:	11 24       	eor	r1, r1
     4ca:	0f 90       	pop	r0
     4cc:	0f be       	out	0x3f, r0	; 63
     4ce:	0f 90       	pop	r0
     4d0:	1f 90       	pop	r1
     4d2:	18 95       	reti

000004d4 <__vector_11>:
ISR(TIMER1_CAPT_vect){ }
     4d4:	1f 92       	push	r1
     4d6:	0f 92       	push	r0
     4d8:	0f b6       	in	r0, 0x3f	; 63
     4da:	0f 92       	push	r0
     4dc:	11 24       	eor	r1, r1
     4de:	0f 90       	pop	r0
     4e0:	0f be       	out	0x3f, r0	; 63
     4e2:	0f 90       	pop	r0
     4e4:	1f 90       	pop	r1
     4e6:	18 95       	reti

000004e8 <__vector_12>:
ISR(TIMER1_COMPA_vect){ }
     4e8:	1f 92       	push	r1
     4ea:	0f 92       	push	r0
     4ec:	0f b6       	in	r0, 0x3f	; 63
     4ee:	0f 92       	push	r0
     4f0:	11 24       	eor	r1, r1
     4f2:	0f 90       	pop	r0
     4f4:	0f be       	out	0x3f, r0	; 63
     4f6:	0f 90       	pop	r0
     4f8:	1f 90       	pop	r1
     4fa:	18 95       	reti

000004fc <__vector_13>:
ISR(TIMER1_COMPB_vect){ }
     4fc:	1f 92       	push	r1
     4fe:	0f 92       	push	r0
     500:	0f b6       	in	r0, 0x3f	; 63
     502:	0f 92       	push	r0
     504:	11 24       	eor	r1, r1
     506:	0f 90       	pop	r0
     508:	0f be       	out	0x3f, r0	; 63
     50a:	0f 90       	pop	r0
     50c:	1f 90       	pop	r1
     50e:	18 95       	reti

00000510 <__vector_24>:
ISR(TIMER1_COMPC_vect){ }
     510:	1f 92       	push	r1
     512:	0f 92       	push	r0
     514:	0f b6       	in	r0, 0x3f	; 63
     516:	0f 92       	push	r0
     518:	11 24       	eor	r1, r1
     51a:	0f 90       	pop	r0
     51c:	0f be       	out	0x3f, r0	; 63
     51e:	0f 90       	pop	r0
     520:	1f 90       	pop	r1
     522:	18 95       	reti

00000524 <__vector_14>:
ISR(TIMER1_OVF_vect){ }
     524:	1f 92       	push	r1
     526:	0f 92       	push	r0
     528:	0f b6       	in	r0, 0x3f	; 63
     52a:	0f 92       	push	r0
     52c:	11 24       	eor	r1, r1
     52e:	0f 90       	pop	r0
     530:	0f be       	out	0x3f, r0	; 63
     532:	0f 90       	pop	r0
     534:	1f 90       	pop	r1
     536:	18 95       	reti

00000538 <__vector_10>:
ISR(TIMER2_OVF_vect){ }
     538:	1f 92       	push	r1
     53a:	0f 92       	push	r0
     53c:	0f b6       	in	r0, 0x3f	; 63
     53e:	0f 92       	push	r0
     540:	11 24       	eor	r1, r1
     542:	0f 90       	pop	r0
     544:	0f be       	out	0x3f, r0	; 63
     546:	0f 90       	pop	r0
     548:	1f 90       	pop	r1
     54a:	18 95       	reti

0000054c <__vector_25>:
ISR(TIMER3_CAPT_vect){ }
     54c:	1f 92       	push	r1
     54e:	0f 92       	push	r0
     550:	0f b6       	in	r0, 0x3f	; 63
     552:	0f 92       	push	r0
     554:	11 24       	eor	r1, r1
     556:	0f 90       	pop	r0
     558:	0f be       	out	0x3f, r0	; 63
     55a:	0f 90       	pop	r0
     55c:	1f 90       	pop	r1
     55e:	18 95       	reti

00000560 <__vector_26>:
ISR(TIMER3_COMPA_vect){ }
     560:	1f 92       	push	r1
     562:	0f 92       	push	r0
     564:	0f b6       	in	r0, 0x3f	; 63
     566:	0f 92       	push	r0
     568:	11 24       	eor	r1, r1
     56a:	0f 90       	pop	r0
     56c:	0f be       	out	0x3f, r0	; 63
     56e:	0f 90       	pop	r0
     570:	1f 90       	pop	r1
     572:	18 95       	reti

00000574 <__vector_27>:
ISR(TIMER3_COMPB_vect){ }
     574:	1f 92       	push	r1
     576:	0f 92       	push	r0
     578:	0f b6       	in	r0, 0x3f	; 63
     57a:	0f 92       	push	r0
     57c:	11 24       	eor	r1, r1
     57e:	0f 90       	pop	r0
     580:	0f be       	out	0x3f, r0	; 63
     582:	0f 90       	pop	r0
     584:	1f 90       	pop	r1
     586:	18 95       	reti

00000588 <__vector_28>:
ISR(TIMER3_COMPC_vect){ }
     588:	1f 92       	push	r1
     58a:	0f 92       	push	r0
     58c:	0f b6       	in	r0, 0x3f	; 63
     58e:	0f 92       	push	r0
     590:	11 24       	eor	r1, r1
     592:	0f 90       	pop	r0
     594:	0f be       	out	0x3f, r0	; 63
     596:	0f 90       	pop	r0
     598:	1f 90       	pop	r1
     59a:	18 95       	reti

0000059c <__vector_29>:
ISR(TIMER3_OVF_vect){ }
     59c:	1f 92       	push	r1
     59e:	0f 92       	push	r0
     5a0:	0f b6       	in	r0, 0x3f	; 63
     5a2:	0f 92       	push	r0
     5a4:	11 24       	eor	r1, r1
     5a6:	0f 90       	pop	r0
     5a8:	0f be       	out	0x3f, r0	; 63
     5aa:	0f 90       	pop	r0
     5ac:	1f 90       	pop	r1
     5ae:	18 95       	reti

000005b0 <__vector_18>:
	}else{
		uart1_index=0;
		ret=uart1_msg;
	}
	return ret;
}
     5b0:	1f 92       	push	r1
     5b2:	0f 92       	push	r0
     5b4:	0f b6       	in	r0, 0x3f	; 63
     5b6:	0f 92       	push	r0
     5b8:	11 24       	eor	r1, r1
     5ba:	0b b6       	in	r0, 0x3b	; 59
     5bc:	0f 92       	push	r0
     5be:	8f 93       	push	r24
     5c0:	9f 93       	push	r25
     5c2:	ef 93       	push	r30
     5c4:	ff 93       	push	r31
     5c6:	8b b1       	in	r24, 0x0b	; 11
     5c8:	9a b1       	in	r25, 0x0a	; 10
     5ca:	88 71       	andi	r24, 0x18	; 24
     5cc:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <UART_LastRxError>
     5d0:	e0 91 48 03 	lds	r30, 0x0348	; 0x800348 <UART_RxHead>
     5d4:	ef 5f       	subi	r30, 0xFF	; 255
     5d6:	ef 73       	andi	r30, 0x3F	; 63
     5d8:	90 91 49 03 	lds	r25, 0x0349	; 0x800349 <UART_RxTail>
     5dc:	e9 13       	cpse	r30, r25
     5de:	04 c0       	rjmp	.+8      	; 0x5e8 <__vector_18+0x38>
     5e0:	82 e0       	ldi	r24, 0x02	; 2
     5e2:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <UART_LastRxError>
     5e6:	0f c0       	rjmp	.+30     	; 0x606 <__vector_18+0x56>
     5e8:	9c b1       	in	r25, 0x0c	; 12
     5ea:	e0 93 48 03 	sts	0x0348, r30	; 0x800348 <UART_RxHead>
     5ee:	88 23       	and	r24, r24
     5f0:	31 f0       	breq	.+12     	; 0x5fe <__vector_18+0x4e>
     5f2:	f0 e0       	ldi	r31, 0x00	; 0
     5f4:	e5 5b       	subi	r30, 0xB5	; 181
     5f6:	fc 4f       	sbci	r31, 0xFC	; 252
     5f8:	88 e5       	ldi	r24, 0x58	; 88
     5fa:	80 83       	st	Z, r24
     5fc:	04 c0       	rjmp	.+8      	; 0x606 <__vector_18+0x56>
     5fe:	f0 e0       	ldi	r31, 0x00	; 0
     600:	e5 5b       	subi	r30, 0xB5	; 181
     602:	fc 4f       	sbci	r31, 0xFC	; 252
     604:	90 83       	st	Z, r25
     606:	ff 91       	pop	r31
     608:	ef 91       	pop	r30
     60a:	9f 91       	pop	r25
     60c:	8f 91       	pop	r24
     60e:	0f 90       	pop	r0
     610:	0b be       	out	0x3b, r0	; 59
     612:	0f 90       	pop	r0
     614:	0f be       	out	0x3f, r0	; 63
     616:	0f 90       	pop	r0
     618:	1f 90       	pop	r1
     61a:	18 95       	reti

0000061c <__vector_19>:
     61c:	1f 92       	push	r1
     61e:	0f 92       	push	r0
     620:	0f b6       	in	r0, 0x3f	; 63
     622:	0f 92       	push	r0
     624:	11 24       	eor	r1, r1
     626:	0b b6       	in	r0, 0x3b	; 59
     628:	0f 92       	push	r0
     62a:	8f 93       	push	r24
     62c:	9f 93       	push	r25
     62e:	ef 93       	push	r30
     630:	ff 93       	push	r31
     632:	e0 91 83 02 	lds	r30, 0x0283	; 0x800283 <UART_TxTail>
     636:	f0 e0       	ldi	r31, 0x00	; 0
     638:	e8 5f       	subi	r30, 0xF8	; 248
     63a:	fc 4f       	sbci	r31, 0xFC	; 252
     63c:	80 81       	ld	r24, Z
     63e:	8c b9       	out	0x0c, r24	; 12
     640:	10 82       	st	Z, r1
     642:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <UART_TxTail>
     646:	8f 5f       	subi	r24, 0xFF	; 255
     648:	8f 73       	andi	r24, 0x3F	; 63
     64a:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <UART_TxTail>
     64e:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <UART_TxHead>
     652:	89 13       	cpse	r24, r25
     654:	01 c0       	rjmp	.+2      	; 0x658 <__vector_19+0x3c>
     656:	55 98       	cbi	0x0a, 5	; 10
     658:	ff 91       	pop	r31
     65a:	ef 91       	pop	r30
     65c:	9f 91       	pop	r25
     65e:	8f 91       	pop	r24
     660:	0f 90       	pop	r0
     662:	0b be       	out	0x3b, r0	; 59
     664:	0f 90       	pop	r0
     666:	0f be       	out	0x3f, r0	; 63
     668:	0f 90       	pop	r0
     66a:	1f 90       	pop	r1
     66c:	18 95       	reti

0000066e <__vector_30>:
	UART1_TxHead = UART1_TxTail;
}
/***Interrupt***/
/***SIGNAL(UART1_RECEIVE_INTERRUPT)***/
SIGNAL(UART1_RECEIVE_INTERRUPT)
{
     66e:	1f 92       	push	r1
     670:	0f 92       	push	r0
     672:	0f b6       	in	r0, 0x3f	; 63
     674:	0f 92       	push	r0
     676:	11 24       	eor	r1, r1
     678:	0b b6       	in	r0, 0x3b	; 59
     67a:	0f 92       	push	r0
     67c:	8f 93       	push	r24
     67e:	9f 93       	push	r25
     680:	ef 93       	push	r30
     682:	ff 93       	push	r31
    unsigned char tmphead;
	unsigned char data;
	unsigned char bit9;
    unsigned char usr;
    /***read UART status register and UART data register***/
	usr  = UART1_STATUS;
     684:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    bit9 = UART1_CONTROL;
     688:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
    bit9 = 0x01 & (bit9>>1);
    /***/
    UART1_LastRxError = (usr & (_BV(FE1)|_BV(DOR1)));
     68c:	88 71       	andi	r24, 0x18	; 24
     68e:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <UART1_LastRxError>
	/***calculate buffer index***/
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
     692:	e0 91 84 02 	lds	r30, 0x0284	; 0x800284 <UART1_RxHead>
     696:	ef 5f       	subi	r30, 0xFF	; 255
     698:	ef 73       	andi	r30, 0x3F	; 63
    if ( tmphead == UART1_RxTail ) {	
     69a:	90 91 4a 03 	lds	r25, 0x034A	; 0x80034a <UART1_RxTail>
     69e:	e9 13       	cpse	r30, r25
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__vector_30+0x3c>
        /***error: receive buffer overflow, caracter is lost***/
        UART1_LastRxError = UART_BUFFER_OVERFLOW >> 8; 
     6a2:	82 e0       	ldi	r24, 0x02	; 2
     6a4:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <UART1_LastRxError>
     6a8:	10 c0       	rjmp	.+32     	; 0x6ca <__vector_30+0x5c>
	}else{
		data = UART1_DATA;
     6aa:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
        /***store new index***/
        UART1_RxHead = tmphead;
     6ae:	e0 93 84 02 	sts	0x0284, r30	; 0x800284 <UART1_RxHead>
		if(UART1_LastRxError){
     6b2:	88 23       	and	r24, r24
     6b4:	31 f0       	breq	.+12     	; 0x6c2 <__vector_30+0x54>
			/***store indication data error in buffer***/
			UART1_RxBuf[tmphead] = 'X';
     6b6:	f0 e0       	ldi	r31, 0x00	; 0
     6b8:	ef 5b       	subi	r30, 0xBF	; 191
     6ba:	fd 4f       	sbci	r31, 0xFD	; 253
     6bc:	88 e5       	ldi	r24, 0x58	; 88
     6be:	80 83       	st	Z, r24
     6c0:	04 c0       	rjmp	.+8      	; 0x6ca <__vector_30+0x5c>
		}else{
			/***store received data in buffer***/
			UART1_RxBuf[tmphead] = data;
     6c2:	f0 e0       	ldi	r31, 0x00	; 0
     6c4:	ef 5b       	subi	r30, 0xBF	; 191
     6c6:	fd 4f       	sbci	r31, 0xFD	; 253
     6c8:	90 83       	st	Z, r25
		}
    }
}
     6ca:	ff 91       	pop	r31
     6cc:	ef 91       	pop	r30
     6ce:	9f 91       	pop	r25
     6d0:	8f 91       	pop	r24
     6d2:	0f 90       	pop	r0
     6d4:	0b be       	out	0x3b, r0	; 59
     6d6:	0f 90       	pop	r0
     6d8:	0f be       	out	0x3f, r0	; 63
     6da:	0f 90       	pop	r0
     6dc:	1f 90       	pop	r1
     6de:	18 95       	reti

000006e0 <__vector_31>:
/***SIGNAL(UART1_TRANSMIT_INTERRUPT)***/
SIGNAL(UART1_TRANSMIT_INTERRUPT)
{
     6e0:	1f 92       	push	r1
     6e2:	0f 92       	push	r0
     6e4:	0f b6       	in	r0, 0x3f	; 63
     6e6:	0f 92       	push	r0
     6e8:	11 24       	eor	r1, r1
     6ea:	0b b6       	in	r0, 0x3b	; 59
     6ec:	0f 92       	push	r0
     6ee:	8f 93       	push	r24
     6f0:	9f 93       	push	r25
     6f2:	ef 93       	push	r30
     6f4:	ff 93       	push	r31
	uint8_t tail = UART1_TxTail;
	UART1_DATA = UART1_TxBuf[tail];
     6f6:	e0 91 40 02 	lds	r30, 0x0240	; 0x800240 <UART1_TxTail>
     6fa:	f0 e0       	ldi	r31, 0x00	; 0
     6fc:	e8 53       	subi	r30, 0x38	; 56
     6fe:	fd 4f       	sbci	r31, 0xFD	; 253
     700:	80 81       	ld	r24, Z
     702:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
	UART1_TxBuf[tail]='\0';
     706:	10 82       	st	Z, r1
	UART1_TxTail = (UART1_TxTail + 1) & UART_TX_BUFFER_MASK;
     708:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <UART1_TxTail>
     70c:	8f 5f       	subi	r24, 0xFF	; 255
     70e:	8f 73       	andi	r24, 0x3F	; 63
     710:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <UART1_TxTail>
	if ( UART1_TxTail != UART1_TxHead )
     714:	90 91 86 02 	lds	r25, 0x0286	; 0x800286 <UART1_TxHead>
     718:	89 13       	cpse	r24, r25
     71a:	05 c0       	rjmp	.+10     	; 0x726 <__vector_31+0x46>
        ;
    else
		UART1_CONTROL &= ~_BV(UART1_UDRIE);
     71c:	ea e9       	ldi	r30, 0x9A	; 154
     71e:	f0 e0       	ldi	r31, 0x00	; 0
     720:	80 81       	ld	r24, Z
     722:	8f 7d       	andi	r24, 0xDF	; 223
     724:	80 83       	st	Z, r24
}
     726:	ff 91       	pop	r31
     728:	ef 91       	pop	r30
     72a:	9f 91       	pop	r25
     72c:	8f 91       	pop	r24
     72e:	0f 90       	pop	r0
     730:	0b be       	out	0x3b, r0	; 59
     732:	0f 90       	pop	r0
     734:	0f be       	out	0x3f, r0	; 63
     736:	0f 90       	pop	r0
     738:	1f 90       	pop	r1
     73a:	18 95       	reti

0000073c <EEPROMenable>:
#include "eeprom.h"
/***Constant & Macro***/
/***Global File Variable***/
/***Header***/
/***Procedure & Function***/
EEPROM EEPROMenable(void){
     73c:	fc 01       	movw	r30, r24
	eprom.write_float=eeprom_write_float;
	eprom.update_float=eeprom_update_float;
	eprom.read_block=eeprom_read_block;
	eprom.write_block=eeprom_write_block;
	eprom.update_block=eeprom_update_block;
	return eprom;
     73e:	83 eb       	ldi	r24, 0xB3	; 179
     740:	96 e1       	ldi	r25, 0x16	; 22
     742:	91 83       	std	Z+1, r25	; 0x01
     744:	80 83       	st	Z, r24
     746:	85 ef       	ldi	r24, 0xF5	; 245
     748:	96 e1       	ldi	r25, 0x16	; 22
     74a:	93 83       	std	Z+3, r25	; 0x03
     74c:	82 83       	std	Z+2, r24	; 0x02
     74e:	8f ec       	ldi	r24, 0xCF	; 207
     750:	96 e1       	ldi	r25, 0x16	; 22
     752:	95 83       	std	Z+5, r25	; 0x05
     754:	84 83       	std	Z+4, r24	; 0x04
     756:	8b eb       	ldi	r24, 0xBB	; 187
     758:	96 e1       	ldi	r25, 0x16	; 22
     75a:	97 83       	std	Z+7, r25	; 0x07
     75c:	86 83       	std	Z+6, r24	; 0x06
     75e:	87 e0       	ldi	r24, 0x07	; 7
     760:	97 e1       	ldi	r25, 0x17	; 23
     762:	91 87       	std	Z+9, r25	; 0x09
     764:	80 87       	std	Z+8, r24	; 0x08
     766:	88 ee       	ldi	r24, 0xE8	; 232
     768:	96 e1       	ldi	r25, 0x16	; 22
     76a:	93 87       	std	Z+11, r25	; 0x0b
     76c:	82 87       	std	Z+10, r24	; 0x0a
     76e:	82 e0       	ldi	r24, 0x02	; 2
     770:	97 e1       	ldi	r25, 0x17	; 23
     772:	97 87       	std	Z+15, r25	; 0x0f
     774:	86 87       	std	Z+14, r24	; 0x0e
     776:	82 e0       	ldi	r24, 0x02	; 2
     778:	97 e1       	ldi	r25, 0x17	; 23
     77a:	95 8b       	std	Z+21, r25	; 0x15
     77c:	84 8b       	std	Z+20, r24	; 0x14
     77e:	80 ee       	ldi	r24, 0xE0	; 224
     780:	96 e1       	ldi	r25, 0x16	; 22
     782:	97 8b       	std	Z+23, r25	; 0x17
     784:	86 8b       	std	Z+22, r24	; 0x16
     786:	83 ea       	ldi	r24, 0xA3	; 163
     788:	96 e1       	ldi	r25, 0x16	; 22
     78a:	91 8f       	std	Z+25, r25	; 0x19
     78c:	80 8f       	std	Z+24, r24	; 0x18
     78e:	8c ee       	ldi	r24, 0xEC	; 236
     790:	96 e1       	ldi	r25, 0x16	; 22
     792:	93 8f       	std	Z+27, r25	; 0x1b
     794:	82 8f       	std	Z+26, r24	; 0x1a
     796:	80 ec       	ldi	r24, 0xC0	; 192
     798:	96 e1       	ldi	r25, 0x16	; 22
     79a:	95 8f       	std	Z+29, r25	; 0x1d
     79c:	84 8f       	std	Z+28, r24	; 0x1c
}
     79e:	cf 01       	movw	r24, r30
     7a0:	08 95       	ret

000007a2 <FUNCpinmatch>:
}
//pinmatch
uint8_t FUNCpinmatch(uint8_t match, uint8_t pin, uint8_t HL)
{
	uint8_t result;
	result=match&pin;
     7a2:	68 23       	and	r22, r24
	if(HL){
     7a4:	44 23       	and	r20, r20
     7a6:	21 f0       	breq	.+8      	; 0x7b0 <FUNCpinmatch+0xe>
		if(result==match);
     7a8:	86 17       	cp	r24, r22
     7aa:	21 f0       	breq	.+8      	; 0x7b4 <FUNCpinmatch+0x12>
		else
			result=0;
     7ac:	80 e0       	ldi	r24, 0x00	; 0
     7ae:	08 95       	ret
	}else{
		if(result)
     7b0:	61 11       	cpse	r22, r1
			result=0;
     7b2:	80 e0       	ldi	r24, 0x00	; 0
		else
			result=match;
	}
	return result;
}
     7b4:	08 95       	ret

000007b6 <FUNChmerge>:
// hmerge
uint8_t FUNChmerge(uint8_t X, uint8_t Y)
{
	return (X | Y);
}
     7b6:	86 2b       	or	r24, r22
     7b8:	08 95       	ret

000007ba <FUNClmerge>:
// lmerge
uint8_t FUNClmerge(uint8_t X, uint8_t Y)
{
	return (X & Y);
}
     7ba:	86 23       	and	r24, r22
     7bc:	08 95       	ret

000007be <FUNChh>:
uint8_t FUNChh(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi&xf;
	return i;
}
     7be:	86 23       	and	r24, r22
     7c0:	08 95       	ret

000007c2 <FUNCll>:
// ll
uint8_t FUNCll(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi|xf;
	return ~i;
     7c2:	86 2b       	or	r24, r22
}
     7c4:	80 95       	com	r24
     7c6:	08 95       	ret

000007c8 <FUNClh>:
// lh
uint8_t FUNClh(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi^xf;
     7c8:	86 27       	eor	r24, r22
	i&=xf;
	return i;
}
     7ca:	86 23       	and	r24, r22
     7cc:	08 95       	ret

000007ce <FUNChl>:
// hl
uint8_t FUNChl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xf^xi;
     7ce:	60 95       	com	r22
	i&=xi;
	return i;
}
     7d0:	86 23       	and	r24, r22
     7d2:	08 95       	ret

000007d4 <FUNCdiff>:
// diff
uint8_t FUNCdiff(uint8_t xi, uint8_t xf)
{
	return xf^xi;
}
     7d4:	86 27       	eor	r24, r22
     7d6:	08 95       	ret

000007d8 <FUNCswap>:
// interchange *px and *py
void FUNCswap(long *px, long *py)
{
     7d8:	cf 92       	push	r12
     7da:	df 92       	push	r13
     7dc:	ef 92       	push	r14
     7de:	ff 92       	push	r15
     7e0:	0f 93       	push	r16
     7e2:	1f 93       	push	r17
	long temp;
	temp = *px;
     7e4:	fc 01       	movw	r30, r24
     7e6:	00 81       	ld	r16, Z
     7e8:	11 81       	ldd	r17, Z+1	; 0x01
     7ea:	22 81       	ldd	r18, Z+2	; 0x02
     7ec:	33 81       	ldd	r19, Z+3	; 0x03
	*px = *py;
     7ee:	fb 01       	movw	r30, r22
     7f0:	c0 80       	ld	r12, Z
     7f2:	d1 80       	ldd	r13, Z+1	; 0x01
     7f4:	e2 80       	ldd	r14, Z+2	; 0x02
     7f6:	f3 80       	ldd	r15, Z+3	; 0x03
     7f8:	fc 01       	movw	r30, r24
     7fa:	c0 82       	st	Z, r12
     7fc:	d1 82       	std	Z+1, r13	; 0x01
     7fe:	e2 82       	std	Z+2, r14	; 0x02
     800:	f3 82       	std	Z+3, r15	; 0x03
	*py = temp;
     802:	fb 01       	movw	r30, r22
     804:	00 83       	st	Z, r16
     806:	11 83       	std	Z+1, r17	; 0x01
     808:	22 83       	std	Z+2, r18	; 0x02
     80a:	33 83       	std	Z+3, r19	; 0x03
}
     80c:	1f 91       	pop	r17
     80e:	0f 91       	pop	r16
     810:	ff 90       	pop	r15
     812:	ef 90       	pop	r14
     814:	df 90       	pop	r13
     816:	cf 90       	pop	r12
     818:	08 95       	ret

0000081a <FUNCcopy>:
// copy: copy 'from' into 'to'; assume to is big enough
void FUNCcopy(char to[], char from[])
{
	int i;
	i = 0;
	while ((to[i] = from[i]) != '\0')
     81a:	fb 01       	movw	r30, r22
     81c:	20 81       	ld	r18, Z
     81e:	fc 01       	movw	r30, r24
     820:	20 83       	st	Z, r18
     822:	22 23       	and	r18, r18
     824:	39 f0       	breq	.+14     	; 0x834 <FUNCcopy+0x1a>
     826:	db 01       	movw	r26, r22
     828:	11 96       	adiw	r26, 0x01	; 1
     82a:	31 96       	adiw	r30, 0x01	; 1
     82c:	9d 91       	ld	r25, X+
     82e:	91 93       	st	Z+, r25
     830:	91 11       	cpse	r25, r1
     832:	fc cf       	rjmp	.-8      	; 0x82c <FUNCcopy+0x12>
     834:	08 95       	ret

00000836 <FUNCsqueeze>:
		++i;
}
// squeeze: delete all c from s
void FUNCsqueeze(char s[], int c)
{
     836:	cf 93       	push	r28
     838:	df 93       	push	r29
     83a:	ec 01       	movw	r28, r24
	int i, j;
	for (i = j = 0; s[i] != '\0'; i++)
     83c:	98 81       	ld	r25, Y
     83e:	99 23       	and	r25, r25
     840:	99 f0       	breq	.+38     	; 0x868 <FUNCsqueeze+0x32>
     842:	fe 01       	movw	r30, r28
     844:	31 96       	adiw	r30, 0x01	; 1
     846:	20 e0       	ldi	r18, 0x00	; 0
     848:	30 e0       	ldi	r19, 0x00	; 0
		if (s[i] != c)
     84a:	49 2f       	mov	r20, r25
     84c:	50 e0       	ldi	r21, 0x00	; 0
     84e:	46 17       	cp	r20, r22
     850:	57 07       	cpc	r21, r23
     852:	31 f0       	breq	.+12     	; 0x860 <FUNCsqueeze+0x2a>
			s[j++] = s[i];
     854:	de 01       	movw	r26, r28
     856:	a2 0f       	add	r26, r18
     858:	b3 1f       	adc	r27, r19
     85a:	9c 93       	st	X, r25
     85c:	2f 5f       	subi	r18, 0xFF	; 255
     85e:	3f 4f       	sbci	r19, 0xFF	; 255
}
// squeeze: delete all c from s
void FUNCsqueeze(char s[], int c)
{
	int i, j;
	for (i = j = 0; s[i] != '\0'; i++)
     860:	91 91       	ld	r25, Z+
     862:	91 11       	cpse	r25, r1
     864:	f2 cf       	rjmp	.-28     	; 0x84a <FUNCsqueeze+0x14>
     866:	02 c0       	rjmp	.+4      	; 0x86c <FUNCsqueeze+0x36>
     868:	20 e0       	ldi	r18, 0x00	; 0
     86a:	30 e0       	ldi	r19, 0x00	; 0
		if (s[i] != c)
			s[j++] = s[i];
		s[j] = '\0';
     86c:	fe 01       	movw	r30, r28
     86e:	e2 0f       	add	r30, r18
     870:	f3 1f       	adc	r31, r19
     872:	10 82       	st	Z, r1
}
     874:	df 91       	pop	r29
     876:	cf 91       	pop	r28
     878:	08 95       	ret

0000087a <FUNCshellsort>:
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
     87a:	2f 92       	push	r2
     87c:	3f 92       	push	r3
     87e:	4f 92       	push	r4
     880:	5f 92       	push	r5
     882:	6f 92       	push	r6
     884:	7f 92       	push	r7
     886:	8f 92       	push	r8
     888:	9f 92       	push	r9
     88a:	af 92       	push	r10
     88c:	bf 92       	push	r11
     88e:	cf 92       	push	r12
     890:	df 92       	push	r13
     892:	ef 92       	push	r14
     894:	ff 92       	push	r15
     896:	0f 93       	push	r16
     898:	1f 93       	push	r17
     89a:	cf 93       	push	r28
     89c:	df 93       	push	r29
     89e:	00 d0       	rcall	.+0      	; 0x8a0 <FUNCshellsort+0x26>
     8a0:	00 d0       	rcall	.+0      	; 0x8a2 <FUNCshellsort+0x28>
     8a2:	cd b7       	in	r28, 0x3d	; 61
     8a4:	de b7       	in	r29, 0x3e	; 62
     8a6:	2c 01       	movw	r4, r24
     8a8:	1b 01       	movw	r2, r22
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
     8aa:	4b 01       	movw	r8, r22
     8ac:	77 23       	and	r23, r23
     8ae:	1c f4       	brge	.+6      	; 0x8b6 <FUNCshellsort+0x3c>
     8b0:	2f ef       	ldi	r18, 0xFF	; 255
     8b2:	82 1a       	sub	r8, r18
     8b4:	92 0a       	sbc	r9, r18
     8b6:	95 94       	asr	r9
     8b8:	87 94       	ror	r8
     8ba:	18 14       	cp	r1, r8
     8bc:	19 04       	cpc	r1, r9
     8be:	0c f4       	brge	.+2      	; 0x8c2 <FUNCshellsort+0x48>
     8c0:	51 c0       	rjmp	.+162    	; 0x964 <FUNCshellsort+0xea>
     8c2:	6a c0       	rjmp	.+212    	; 0x998 <FUNCshellsort+0x11e>
		for (i = gap; i < n; i++)
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
     8c4:	96 01       	movw	r18, r12
     8c6:	dd 20       	and	r13, r13
     8c8:	9c f1       	brlt	.+102    	; 0x930 <FUNCshellsort+0xb6>
     8ca:	f5 01       	movw	r30, r10
     8cc:	40 81       	ld	r20, Z
     8ce:	51 81       	ldd	r21, Z+1	; 0x01
     8d0:	f4 01       	movw	r30, r8
     8d2:	60 81       	ld	r22, Z
     8d4:	71 81       	ldd	r23, Z+1	; 0x01
     8d6:	64 17       	cp	r22, r20
     8d8:	75 07       	cpc	r23, r21
     8da:	54 f5       	brge	.+84     	; 0x930 <FUNCshellsort+0xb6>
     8dc:	8c 01       	movw	r16, r24
     8de:	0a 0d       	add	r16, r10
     8e0:	1b 1d       	adc	r17, r11
     8e2:	d4 01       	movw	r26, r8
     8e4:	bc 82       	std	Y+4, r11	; 0x04
     8e6:	ab 82       	std	Y+3, r10	; 0x03
     8e8:	ba 82       	std	Y+2, r11	; 0x02
     8ea:	a9 82       	std	Y+1, r10	; 0x01
				temp = v[j];
				v[j] = v[j+gap];
     8ec:	eb 81       	ldd	r30, Y+3	; 0x03
     8ee:	fc 81       	ldd	r31, Y+4	; 0x04
     8f0:	71 83       	std	Z+1, r23	; 0x01
     8f2:	60 83       	st	Z, r22
				v[j+gap] = temp;
     8f4:	11 96       	adiw	r26, 0x01	; 1
     8f6:	5c 93       	st	X, r21
     8f8:	4e 93       	st	-X, r20
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
		for (i = gap; i < n; i++)
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
     8fa:	2e 19       	sub	r18, r14
     8fc:	3f 09       	sbc	r19, r15
     8fe:	c2 f0       	brmi	.+48     	; 0x930 <FUNCshellsort+0xb6>
     900:	f8 01       	movw	r30, r16
     902:	40 81       	ld	r20, Z
     904:	51 81       	ldd	r21, Z+1	; 0x01
     906:	e9 81       	ldd	r30, Y+1	; 0x01
     908:	fa 81       	ldd	r31, Y+2	; 0x02
     90a:	60 81       	ld	r22, Z
     90c:	71 81       	ldd	r23, Z+1	; 0x01
     90e:	08 0f       	add	r16, r24
     910:	19 1f       	adc	r17, r25
     912:	e8 0f       	add	r30, r24
     914:	f9 1f       	adc	r31, r25
     916:	fa 83       	std	Y+2, r31	; 0x02
     918:	e9 83       	std	Y+1, r30	; 0x01
     91a:	eb 81       	ldd	r30, Y+3	; 0x03
     91c:	fc 81       	ldd	r31, Y+4	; 0x04
     91e:	e8 0f       	add	r30, r24
     920:	f9 1f       	adc	r31, r25
     922:	fc 83       	std	Y+4, r31	; 0x04
     924:	eb 83       	std	Y+3, r30	; 0x03
     926:	a8 0f       	add	r26, r24
     928:	b9 1f       	adc	r27, r25
     92a:	64 17       	cp	r22, r20
     92c:	75 07       	cpc	r23, r21
     92e:	f4 f2       	brlt	.-68     	; 0x8ec <FUNCshellsort+0x72>
     930:	ff ef       	ldi	r31, 0xFF	; 255
     932:	cf 1a       	sub	r12, r31
     934:	df 0a       	sbc	r13, r31
     936:	22 e0       	ldi	r18, 0x02	; 2
     938:	a2 0e       	add	r10, r18
     93a:	b1 1c       	adc	r11, r1
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	8e 0e       	add	r8, r30
     940:	91 1c       	adc	r9, r1
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
		for (i = gap; i < n; i++)
     942:	c6 14       	cp	r12, r6
     944:	d7 04       	cpc	r13, r7
     946:	09 f0       	breq	.+2      	; 0x94a <FUNCshellsort+0xd0>
     948:	bd cf       	rjmp	.-134    	; 0x8c4 <FUNCshellsort+0x4a>
}
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
     94a:	47 01       	movw	r8, r14
     94c:	ff 20       	and	r15, r15
     94e:	1c f4       	brge	.+6      	; 0x956 <FUNCshellsort+0xdc>
     950:	ff ef       	ldi	r31, 0xFF	; 255
     952:	8f 1a       	sub	r8, r31
     954:	9f 0a       	sbc	r9, r31
     956:	95 94       	asr	r9
     958:	87 94       	ror	r8
     95a:	18 14       	cp	r1, r8
     95c:	19 04       	cpc	r1, r9
     95e:	e4 f4       	brge	.+56     	; 0x998 <FUNCshellsort+0x11e>
     960:	74 01       	movw	r14, r8
     962:	01 c0       	rjmp	.+2      	; 0x966 <FUNCshellsort+0xec>
     964:	74 01       	movw	r14, r8
		for (i = gap; i < n; i++)
     966:	82 14       	cp	r8, r2
     968:	93 04       	cpc	r9, r3
     96a:	7c f7       	brge	.-34     	; 0x94a <FUNCshellsort+0xd0>
     96c:	64 01       	movw	r12, r8
     96e:	ce 18       	sub	r12, r14
     970:	df 08       	sbc	r13, r15
     972:	56 01       	movw	r10, r12
     974:	aa 0c       	add	r10, r10
     976:	bb 1c       	adc	r11, r11
     978:	a4 0c       	add	r10, r4
     97a:	b5 1c       	adc	r11, r5
     97c:	88 0c       	add	r8, r8
     97e:	99 1c       	adc	r9, r9
     980:	84 0c       	add	r8, r4
     982:	95 1c       	adc	r9, r5
     984:	31 01       	movw	r6, r2
     986:	6e 18       	sub	r6, r14
     988:	7f 08       	sbc	r7, r15
     98a:	c7 01       	movw	r24, r14
     98c:	88 0f       	add	r24, r24
     98e:	99 1f       	adc	r25, r25
     990:	91 95       	neg	r25
     992:	81 95       	neg	r24
     994:	91 09       	sbc	r25, r1
     996:	96 cf       	rjmp	.-212    	; 0x8c4 <FUNCshellsort+0x4a>
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
				temp = v[j];
				v[j] = v[j+gap];
				v[j+gap] = temp;
			}
}
     998:	0f 90       	pop	r0
     99a:	0f 90       	pop	r0
     99c:	0f 90       	pop	r0
     99e:	0f 90       	pop	r0
     9a0:	df 91       	pop	r29
     9a2:	cf 91       	pop	r28
     9a4:	1f 91       	pop	r17
     9a6:	0f 91       	pop	r16
     9a8:	ff 90       	pop	r15
     9aa:	ef 90       	pop	r14
     9ac:	df 90       	pop	r13
     9ae:	cf 90       	pop	r12
     9b0:	bf 90       	pop	r11
     9b2:	af 90       	pop	r10
     9b4:	9f 90       	pop	r9
     9b6:	8f 90       	pop	r8
     9b8:	7f 90       	pop	r7
     9ba:	6f 90       	pop	r6
     9bc:	5f 90       	pop	r5
     9be:	4f 90       	pop	r4
     9c0:	3f 90       	pop	r3
     9c2:	2f 90       	pop	r2
     9c4:	08 95       	ret

000009c6 <FUNCpmax>:
	if(a1 > a2){
		biggest = a1;
	}else{
		biggest = a2;
	}
	return biggest;
     9c6:	86 17       	cp	r24, r22
     9c8:	97 07       	cpc	r25, r23
     9ca:	0c f4       	brge	.+2      	; 0x9ce <FUNCpmax+0x8>
     9cc:	cb 01       	movw	r24, r22
}
     9ce:	08 95       	ret

000009d0 <FUNCgcd>:
// common divisor
int FUNCgcd (int u, int v)
{
     9d0:	9b 01       	movw	r18, r22
	int temp;
	while ( v != 0 ) {
     9d2:	67 2b       	or	r22, r23
     9d4:	11 f4       	brne	.+4      	; 0x9da <FUNCgcd+0xa>
     9d6:	08 95       	ret
		temp = u % v;
		u = v;
		v = temp;
     9d8:	9a 01       	movw	r18, r20
// common divisor
int FUNCgcd (int u, int v)
{
	int temp;
	while ( v != 0 ) {
		temp = u % v;
     9da:	b9 01       	movw	r22, r18
     9dc:	0e 94 30 16 	call	0x2c60	; 0x2c60 <__divmodhi4>
     9e0:	ac 01       	movw	r20, r24
     9e2:	82 2f       	mov	r24, r18
     9e4:	93 2f       	mov	r25, r19
}
// common divisor
int FUNCgcd (int u, int v)
{
	int temp;
	while ( v != 0 ) {
     9e6:	41 15       	cp	r20, r1
     9e8:	51 05       	cpc	r21, r1
     9ea:	b1 f7       	brne	.-20     	; 0x9d8 <FUNCgcd+0x8>
		temp = u % v;
		u = v;
		v = temp;
	}
	return u;
}
     9ec:	08 95       	ret

000009ee <FUNCstrToInt>:
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
     9ee:	fc 01       	movw	r30, r24
	int i, intValue, result = 0;
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
     9f0:	90 81       	ld	r25, Z
     9f2:	80 ed       	ldi	r24, 0xD0	; 208
     9f4:	89 0f       	add	r24, r25
     9f6:	8a 30       	cpi	r24, 0x0A	; 10
     9f8:	d0 f4       	brcc	.+52     	; 0xa2e <FUNCstrToInt+0x40>
     9fa:	31 96       	adiw	r30, 0x01	; 1
     9fc:	20 e0       	ldi	r18, 0x00	; 0
     9fe:	30 e0       	ldi	r19, 0x00	; 0
		intValue = string[i] - '0';
		result = result * 10 + intValue;
     a00:	a9 01       	movw	r20, r18
     a02:	44 0f       	add	r20, r20
     a04:	55 1f       	adc	r21, r21
     a06:	22 0f       	add	r18, r18
     a08:	33 1f       	adc	r19, r19
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	22 0f       	add	r18, r18
     a10:	33 1f       	adc	r19, r19
     a12:	42 0f       	add	r20, r18
     a14:	53 1f       	adc	r21, r19
     a16:	29 2f       	mov	r18, r25
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	20 53       	subi	r18, 0x30	; 48
     a1c:	31 09       	sbc	r19, r1
     a1e:	24 0f       	add	r18, r20
     a20:	35 1f       	adc	r19, r21
}
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
	int i, intValue, result = 0;
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
     a22:	91 91       	ld	r25, Z+
     a24:	80 ed       	ldi	r24, 0xD0	; 208
     a26:	89 0f       	add	r24, r25
     a28:	8a 30       	cpi	r24, 0x0A	; 10
     a2a:	50 f3       	brcs	.-44     	; 0xa00 <FUNCstrToInt+0x12>
     a2c:	02 c0       	rjmp	.+4      	; 0xa32 <FUNCstrToInt+0x44>
	return u;
}
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
	int i, intValue, result = 0;
     a2e:	20 e0       	ldi	r18, 0x00	; 0
     a30:	30 e0       	ldi	r19, 0x00	; 0
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
		intValue = string[i] - '0';
		result = result * 10 + intValue;
	}
	return result;
}
     a32:	c9 01       	movw	r24, r18
     a34:	08 95       	ret

00000a36 <FUNCfilter>:
uint8_t FUNCfilter(uint8_t mask, uint8_t data)
{
	uint8_t Z;
	Z=mask & data;
	return Z;
}
     a36:	86 23       	and	r24, r22
     a38:	08 95       	ret

00000a3a <FUNCticks>:
// ticks
unsigned int FUNCticks(unsigned int num)
{
	unsigned int count;
	for(count=0;count<num;count++)
     a3a:	00 97       	sbiw	r24, 0x00	; 0
     a3c:	39 f0       	breq	.+14     	; 0xa4c <FUNCticks+0x12>
     a3e:	20 e0       	ldi	r18, 0x00	; 0
     a40:	30 e0       	ldi	r19, 0x00	; 0
     a42:	2f 5f       	subi	r18, 0xFF	; 255
     a44:	3f 4f       	sbci	r19, 0xFF	; 255
     a46:	82 17       	cp	r24, r18
     a48:	93 07       	cpc	r25, r19
     a4a:	d9 f7       	brne	.-10     	; 0xa42 <FUNCticks+0x8>
		;
	return count;
}
     a4c:	08 95       	ret

00000a4e <FUNCtwocomptoint8bit>:
// Two's Complement function
int FUNCtwocomptoint8bit(int twoscomp){
  
  //Let's see if the byte is negative
  if (twoscomp & 0B10000000){
     a4e:	87 ff       	sbrs	r24, 7
     a50:	08 c0       	rjmp	.+16     	; 0xa62 <FUNCtwocomptoint8bit+0x14>
    //Invert
    twoscomp = ~twoscomp + 1;
     a52:	91 95       	neg	r25
     a54:	81 95       	neg	r24
     a56:	91 09       	sbc	r25, r1
	twoscomp = (twoscomp & 0B11111111);
    //Cast as int and multiply by negative one
    int value = (int)(twoscomp)*(-1);
     a58:	99 27       	eor	r25, r25
     a5a:	91 95       	neg	r25
     a5c:	81 95       	neg	r24
     a5e:	91 09       	sbc	r25, r1
    return value;
     a60:	08 95       	ret
    //Byte is non-negative, therefore convert to decimal and display
    //Make sure we are never over 1279
    twoscomp = (twoscomp & 0B01111111);
    //Cast as int and return
    int value = (int)(twoscomp);
    return value;
     a62:	8f 77       	andi	r24, 0x7F	; 127
     a64:	99 27       	eor	r25, r25
  }
}
     a66:	08 95       	ret

00000a68 <FUNCtwocomptoint10bit>:
// Two's Complement function, shifts 10 bit binary to signed integers (-512 to 512)
int FUNCtwocomptoint10bit(int twoscomp){
	
  //Let's see if the byte is negative
  if (twoscomp & 0x200){
     a68:	91 ff       	sbrs	r25, 1
     a6a:	08 c0       	rjmp	.+16     	; 0xa7c <FUNCtwocomptoint10bit+0x14>
    //Invert
    twoscomp = ~twoscomp + 1;
     a6c:	91 95       	neg	r25
     a6e:	81 95       	neg	r24
     a70:	91 09       	sbc	r25, r1
    twoscomp = (twoscomp & 0x3FF);
    //Cast as int and multiply by negative one
    int value = (int)(twoscomp)*(-1);
     a72:	93 70       	andi	r25, 0x03	; 3
     a74:	91 95       	neg	r25
     a76:	81 95       	neg	r24
     a78:	91 09       	sbc	r25, r1
    return value;
     a7a:	08 95       	ret
    //Byte is non-negative, therefore convert to decimal and display
    twoscomp = (twoscomp & 0x1FF);
    //Cast as int and return
    //Serial.println(twoscomp);
    int value = (int)(twoscomp);
    return value;
     a7c:	91 70       	andi	r25, 0x01	; 1
  }
}
     a7e:	08 95       	ret

00000a80 <FUNCtwocomptointnbit>:
// Two's Complement function, nbits
int FUNCtwocomptointnbit(int twoscomp, uint8_t nbits){
  unsigned int signmask;
  unsigned int mask;
  signmask = (1<<(nbits-1));
     a80:	61 50       	subi	r22, 0x01	; 1
     a82:	21 e0       	ldi	r18, 0x01	; 1
     a84:	30 e0       	ldi	r19, 0x00	; 0
     a86:	02 c0       	rjmp	.+4      	; 0xa8c <FUNCtwocomptointnbit+0xc>
     a88:	22 0f       	add	r18, r18
     a8a:	33 1f       	adc	r19, r19
     a8c:	6a 95       	dec	r22
     a8e:	e2 f7       	brpl	.-8      	; 0xa88 <FUNCtwocomptointnbit+0x8>
  mask=signmask-1;
     a90:	a9 01       	movw	r20, r18
     a92:	41 50       	subi	r20, 0x01	; 1
     a94:	51 09       	sbc	r21, r1
  //Let's see if the number is negative
  if (twoscomp & signmask){
     a96:	b9 01       	movw	r22, r18
     a98:	68 23       	and	r22, r24
     a9a:	79 23       	and	r23, r25
     a9c:	67 2b       	or	r22, r23
     a9e:	29 f0       	breq	.+10     	; 0xaaa <FUNCtwocomptointnbit+0x2a>
	twoscomp &= mask;
    twoscomp -= signmask;
     aa0:	84 23       	and	r24, r20
     aa2:	95 23       	and	r25, r21
     aa4:	82 1b       	sub	r24, r18
     aa6:	93 0b       	sbc	r25, r19
     aa8:	08 95       	ret
  }else{
	  twoscomp &= mask;
     aaa:	84 23       	and	r24, r20
     aac:	95 23       	and	r25, r21
  }
  return twoscomp;
}
     aae:	08 95       	ret

00000ab0 <FUNCdec2bcd>:
// Convert Decimal to Binary Coded Decimal (BCD)
char FUNCdec2bcd(char num)
{
	return ((num/10 * 16) + (num % 10));
     ab0:	9d ec       	ldi	r25, 0xCD	; 205
     ab2:	89 9f       	mul	r24, r25
     ab4:	91 2d       	mov	r25, r1
     ab6:	11 24       	eor	r1, r1
     ab8:	96 95       	lsr	r25
     aba:	96 95       	lsr	r25
     abc:	96 95       	lsr	r25
     abe:	39 2f       	mov	r19, r25
     ac0:	33 0f       	add	r19, r19
     ac2:	23 2f       	mov	r18, r19
     ac4:	22 0f       	add	r18, r18
     ac6:	22 0f       	add	r18, r18
     ac8:	23 0f       	add	r18, r19
     aca:	82 1b       	sub	r24, r18
}
     acc:	20 e1       	ldi	r18, 0x10	; 16
     ace:	92 9f       	mul	r25, r18
     ad0:	80 0d       	add	r24, r0
     ad2:	11 24       	eor	r1, r1
     ad4:	08 95       	ret

00000ad6 <FUNCbcd2dec>:
// Convert Binary Coded Decimal (BCD) to Decimal
char FUNCbcd2dec(char num)
{
	return ((num/16 * 10) + (num % 16));
     ad6:	98 2f       	mov	r25, r24
     ad8:	92 95       	swap	r25
     ada:	9f 70       	andi	r25, 0x0F	; 15
     adc:	99 0f       	add	r25, r25
     ade:	29 2f       	mov	r18, r25
     ae0:	22 0f       	add	r18, r18
     ae2:	22 0f       	add	r18, r18
     ae4:	92 0f       	add	r25, r18
     ae6:	8f 70       	andi	r24, 0x0F	; 15
}
     ae8:	89 0f       	add	r24, r25
     aea:	08 95       	ret

00000aec <FUNCresizestr>:
char* FUNCresizestr(char *string, int size)
{
     aec:	fc 01       	movw	r30, r24
	int i;
	FUNCstr[size]='\0';
     aee:	db 01       	movw	r26, r22
     af0:	a5 57       	subi	r26, 0x75	; 117
     af2:	bc 4f       	sbci	r27, 0xFC	; 252
     af4:	1c 92       	st	X, r1
	for(i=0;i<size;i++){
     af6:	16 16       	cp	r1, r22
     af8:	17 06       	cpc	r1, r23
     afa:	14 f5       	brge	.+68     	; 0xb40 <FUNCresizestr+0x54>
		if(*(string+i)=='\0'){
     afc:	90 81       	ld	r25, Z
     afe:	91 11       	cpse	r25, r1
     b00:	0c c0       	rjmp	.+24     	; 0xb1a <FUNCresizestr+0x2e>
     b02:	17 c0       	rjmp	.+46     	; 0xb32 <FUNCresizestr+0x46>
     b04:	91 91       	ld	r25, Z+
     b06:	91 11       	cpse	r25, r1
     b08:	0d c0       	rjmp	.+26     	; 0xb24 <FUNCresizestr+0x38>
     b0a:	15 c0       	rjmp	.+42     	; 0xb36 <FUNCresizestr+0x4a>
			for(;i<size;i++){
				FUNCstr[i]=' ';
     b0c:	81 93       	st	Z+, r24
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
		if(*(string+i)=='\0'){
			for(;i<size;i++){
     b0e:	2f 5f       	subi	r18, 0xFF	; 255
     b10:	3f 4f       	sbci	r19, 0xFF	; 255
     b12:	26 17       	cp	r18, r22
     b14:	37 07       	cpc	r19, r23
     b16:	d4 f3       	brlt	.-12     	; 0xb0c <FUNCresizestr+0x20>
     b18:	13 c0       	rjmp	.+38     	; 0xb40 <FUNCresizestr+0x54>
     b1a:	ab e8       	ldi	r26, 0x8B	; 139
     b1c:	b3 e0       	ldi	r27, 0x03	; 3
     b1e:	31 96       	adiw	r30, 0x01	; 1
char* FUNCresizestr(char *string, int size)
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
		if(*(string+i)=='\0'){
     b20:	20 e0       	ldi	r18, 0x00	; 0
     b22:	30 e0       	ldi	r19, 0x00	; 0
			for(;i<size;i++){
				FUNCstr[i]=' ';
			}
			break;
		}
		FUNCstr[i]=*(string+i);
     b24:	9d 93       	st	X+, r25
}
char* FUNCresizestr(char *string, int size)
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
     b26:	2f 5f       	subi	r18, 0xFF	; 255
     b28:	3f 4f       	sbci	r19, 0xFF	; 255
     b2a:	62 17       	cp	r22, r18
     b2c:	73 07       	cpc	r23, r19
     b2e:	51 f7       	brne	.-44     	; 0xb04 <FUNCresizestr+0x18>
     b30:	07 c0       	rjmp	.+14     	; 0xb40 <FUNCresizestr+0x54>
     b32:	20 e0       	ldi	r18, 0x00	; 0
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	f9 01       	movw	r30, r18
     b38:	e5 57       	subi	r30, 0x75	; 117
     b3a:	fc 4f       	sbci	r31, 0xFC	; 252
		if(*(string+i)=='\0'){
			for(;i<size;i++){
				FUNCstr[i]=' ';
     b3c:	80 e2       	ldi	r24, 0x20	; 32
     b3e:	e6 cf       	rjmp	.-52     	; 0xb0c <FUNCresizestr+0x20>
			break;
		}
		FUNCstr[i]=*(string+i);
	}
	return FUNCstr;
}
     b40:	8b e8       	ldi	r24, 0x8B	; 139
     b42:	93 e0       	ldi	r25, 0x03	; 3
     b44:	08 95       	ret

00000b46 <FUNCtrimmer>:
long FUNCtrimmer(long x, long in_min, long in_max, long out_min, long out_max)
/***
same as arduino map function.
***/
{
     b46:	4f 92       	push	r4
     b48:	5f 92       	push	r5
     b4a:	6f 92       	push	r6
     b4c:	7f 92       	push	r7
     b4e:	af 92       	push	r10
     b50:	bf 92       	push	r11
     b52:	cf 92       	push	r12
     b54:	df 92       	push	r13
     b56:	ef 92       	push	r14
     b58:	ff 92       	push	r15
     b5a:	0f 93       	push	r16
     b5c:	1f 93       	push	r17
     b5e:	cf 93       	push	r28
     b60:	df 93       	push	r29
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
     b66:	29 01       	movw	r4, r18
     b68:	3a 01       	movw	r6, r20
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     b6a:	9b 01       	movw	r18, r22
     b6c:	ac 01       	movw	r20, r24
     b6e:	24 19       	sub	r18, r4
     b70:	35 09       	sbc	r19, r5
     b72:	46 09       	sbc	r20, r6
     b74:	57 09       	sbc	r21, r7
     b76:	89 89       	ldd	r24, Y+17	; 0x11
     b78:	9a 89       	ldd	r25, Y+18	; 0x12
     b7a:	ab 89       	ldd	r26, Y+19	; 0x13
     b7c:	bc 89       	ldd	r27, Y+20	; 0x14
     b7e:	bc 01       	movw	r22, r24
     b80:	cd 01       	movw	r24, r26
     b82:	6a 19       	sub	r22, r10
     b84:	7b 09       	sbc	r23, r11
     b86:	8c 09       	sbc	r24, r12
     b88:	9d 09       	sbc	r25, r13
     b8a:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <__mulsi3>
     b8e:	a8 01       	movw	r20, r16
     b90:	97 01       	movw	r18, r14
     b92:	24 19       	sub	r18, r4
     b94:	35 09       	sbc	r19, r5
     b96:	46 09       	sbc	r20, r6
     b98:	57 09       	sbc	r21, r7
     b9a:	0e 94 43 16 	call	0x2c86	; 0x2c86 <__divmodsi4>
     b9e:	ca 01       	movw	r24, r20
     ba0:	b9 01       	movw	r22, r18
     ba2:	6a 0d       	add	r22, r10
     ba4:	7b 1d       	adc	r23, r11
     ba6:	8c 1d       	adc	r24, r12
     ba8:	9d 1d       	adc	r25, r13
}
     baa:	df 91       	pop	r29
     bac:	cf 91       	pop	r28
     bae:	1f 91       	pop	r17
     bb0:	0f 91       	pop	r16
     bb2:	ff 90       	pop	r15
     bb4:	ef 90       	pop	r14
     bb6:	df 90       	pop	r13
     bb8:	cf 90       	pop	r12
     bba:	bf 90       	pop	r11
     bbc:	af 90       	pop	r10
     bbe:	7f 90       	pop	r7
     bc0:	6f 90       	pop	r6
     bc2:	5f 90       	pop	r5
     bc4:	4f 90       	pop	r4
     bc6:	08 95       	ret

00000bc8 <Pwr>:
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
     bc8:	70 e0       	ldi	r23, 0x00	; 0
     bca:	61 15       	cp	r22, r1
     bcc:	71 05       	cpc	r23, r1
     bce:	99 f0       	breq	.+38     	; 0xbf6 <Pwr+0x2e>
     bd0:	41 e0       	ldi	r20, 0x01	; 1
     bd2:	50 e0       	ldi	r21, 0x00	; 0
     bd4:	21 e0       	ldi	r18, 0x01	; 1
     bd6:	30 e0       	ldi	r19, 0x00	; 0
        p = p * bs;
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	fa 01       	movw	r30, r20
     bdc:	e8 9f       	mul	r30, r24
     bde:	a0 01       	movw	r20, r0
     be0:	e9 9f       	mul	r30, r25
     be2:	50 0d       	add	r21, r0
     be4:	f8 9f       	mul	r31, r24
     be6:	50 0d       	add	r21, r0
     be8:	11 24       	eor	r1, r1
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
     bea:	2f 5f       	subi	r18, 0xFF	; 255
     bec:	3f 4f       	sbci	r19, 0xFF	; 255
     bee:	62 17       	cp	r22, r18
     bf0:	73 07       	cpc	r23, r19
     bf2:	98 f7       	brcc	.-26     	; 0xbda <Pwr+0x12>
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <Pwr+0x32>
}
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
     bf6:	41 e0       	ldi	r20, 0x01	; 1
     bf8:	50 e0       	ldi	r21, 0x00	; 0
    for (i = 1; i <= n; ++i)
        p = p * bs;
    return p;
}
     bfa:	ca 01       	movw	r24, r20
     bfc:	08 95       	ret

00000bfe <StringLength>:
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
	while ( string[count] != '\0' )
     bfe:	fc 01       	movw	r30, r24
     c00:	20 81       	ld	r18, Z
     c02:	22 23       	and	r18, r18
     c04:	41 f0       	breq	.+16     	; 0xc16 <StringLength+0x18>
     c06:	31 96       	adiw	r30, 0x01	; 1
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	90 e0       	ldi	r25, 0x00	; 0
		++count;
     c0c:	01 96       	adiw	r24, 0x01	; 1
}
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
	while ( string[count] != '\0' )
     c0e:	21 91       	ld	r18, Z+
     c10:	21 11       	cpse	r18, r1
     c12:	fc cf       	rjmp	.-8      	; 0xc0c <StringLength+0xe>
     c14:	08 95       	ret
    return p;
}
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	90 e0       	ldi	r25, 0x00	; 0
	while ( string[count] != '\0' )
		++count;
	return count;
}
     c1a:	08 95       	ret

00000c1c <FUNCtrim>:
	Reverse(FUNCstr);
	return FUNCstr;
}
// trim: remove trailing blanks, tabs, newlines
int FUNCtrim(char s[])
{
     c1c:	cf 93       	push	r28
     c1e:	df 93       	push	r29
     c20:	ec 01       	movw	r28, r24
	int n;
	for (n = StringLength(s)-1; n >= 0; n--)
     c22:	ed df       	rcall	.-38     	; 0xbfe <StringLength>
     c24:	9c 01       	movw	r18, r24
     c26:	21 50       	subi	r18, 0x01	; 1
     c28:	31 09       	sbc	r19, r1
     c2a:	62 f0       	brmi	.+24     	; 0xc44 <FUNCtrim+0x28>
     c2c:	fe 01       	movw	r30, r28
     c2e:	e8 0f       	add	r30, r24
     c30:	f9 1f       	adc	r31, r25
		if (s[n] != ' ' && s[n] != '\t' && s[n] != '\n')
     c32:	92 91       	ld	r25, -Z
     c34:	90 32       	cpi	r25, 0x20	; 32
     c36:	19 f0       	breq	.+6      	; 0xc3e <FUNCtrim+0x22>
     c38:	99 50       	subi	r25, 0x09	; 9
     c3a:	92 30       	cpi	r25, 0x02	; 2
     c3c:	18 f4       	brcc	.+6      	; 0xc44 <FUNCtrim+0x28>
}
// trim: remove trailing blanks, tabs, newlines
int FUNCtrim(char s[])
{
	int n;
	for (n = StringLength(s)-1; n >= 0; n--)
     c3e:	21 50       	subi	r18, 0x01	; 1
     c40:	31 09       	sbc	r19, r1
     c42:	b8 f7       	brcc	.-18     	; 0xc32 <FUNCtrim+0x16>
		if (s[n] != ' ' && s[n] != '\t' && s[n] != '\n')
			break;
	s[n+1] = '\0';
     c44:	c2 0f       	add	r28, r18
     c46:	d3 1f       	adc	r29, r19
     c48:	19 82       	std	Y+1, r1	; 0x01
	return n;
}
     c4a:	c9 01       	movw	r24, r18
     c4c:	df 91       	pop	r29
     c4e:	cf 91       	pop	r28
     c50:	08 95       	ret

00000c52 <Reverse>:
		++count;
	return count;
}
// reverse: reverse string s in place
void Reverse(char s[])
{
     c52:	cf 93       	push	r28
     c54:	df 93       	push	r29
     c56:	ec 01       	movw	r28, r24
	int c, i, j;
	for (i = 0, j = StringLength(s)-1; i < j; i++, j--){
     c58:	d2 df       	rcall	.-92     	; 0xbfe <StringLength>
     c5a:	9c 01       	movw	r18, r24
     c5c:	21 50       	subi	r18, 0x01	; 1
     c5e:	31 09       	sbc	r19, r1
     c60:	12 16       	cp	r1, r18
     c62:	13 06       	cpc	r1, r19
     c64:	84 f4       	brge	.+32     	; 0xc86 <Reverse+0x34>
     c66:	de 01       	movw	r26, r28
     c68:	a8 0f       	add	r26, r24
     c6a:	b9 1f       	adc	r27, r25
     c6c:	fe 01       	movw	r30, r28
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	90 e0       	ldi	r25, 0x00	; 0
		c = s[i];
     c72:	40 81       	ld	r20, Z
		s[i] = s[j];
     c74:	5e 91       	ld	r21, -X
     c76:	51 93       	st	Z+, r21
		s[j] = c;
     c78:	4c 93       	st	X, r20
}
// reverse: reverse string s in place
void Reverse(char s[])
{
	int c, i, j;
	for (i = 0, j = StringLength(s)-1; i < j; i++, j--){
     c7a:	01 96       	adiw	r24, 0x01	; 1
     c7c:	21 50       	subi	r18, 0x01	; 1
     c7e:	31 09       	sbc	r19, r1
     c80:	82 17       	cp	r24, r18
     c82:	93 07       	cpc	r25, r19
     c84:	b4 f3       	brlt	.-20     	; 0xc72 <Reverse+0x20>
		c = s[i];
		s[i] = s[j];
		s[j] = c;
	}
}
     c86:	df 91       	pop	r29
     c88:	cf 91       	pop	r28
     c8a:	08 95       	ret

00000c8c <FUNCi32toa>:
				v[j+gap] = temp;
			}
}
// i32toa: convert n to characters in s
char* FUNCi32toa(int32_t n)
{
     c8c:	8f 92       	push	r8
     c8e:	9f 92       	push	r9
     c90:	af 92       	push	r10
     c92:	bf 92       	push	r11
     c94:	cf 92       	push	r12
     c96:	df 92       	push	r13
     c98:	ef 92       	push	r14
     c9a:	ff 92       	push	r15
     c9c:	0f 93       	push	r16
     c9e:	1f 93       	push	r17
     ca0:	cf 93       	push	r28
     ca2:	df 93       	push	r29
     ca4:	6b 01       	movw	r12, r22
     ca6:	7c 01       	movw	r14, r24
     ca8:	dc 01       	movw	r26, r24
     caa:	cb 01       	movw	r24, r22
     cac:	ff 20       	and	r15, r15
     cae:	3c f4       	brge	.+14     	; 0xcbe <FUNCi32toa+0x32>
     cb0:	88 27       	eor	r24, r24
     cb2:	99 27       	eor	r25, r25
     cb4:	dc 01       	movw	r26, r24
     cb6:	8c 19       	sub	r24, r12
     cb8:	9d 09       	sbc	r25, r13
     cba:	ae 09       	sbc	r26, r14
     cbc:	bf 09       	sbc	r27, r15
     cbe:	bc 01       	movw	r22, r24
     cc0:	cd 01       	movw	r24, r26
     cc2:	10 e0       	ldi	r17, 0x00	; 0
	int32_t sign;
	if ((sign = n) < 0) // record sign
	n = -n; // make n positive
	i = 0;
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
     cc4:	0f 2e       	mov	r0, r31
     cc6:	fa e0       	ldi	r31, 0x0A	; 10
     cc8:	8f 2e       	mov	r8, r31
     cca:	91 2c       	mov	r9, r1
     ccc:	a1 2c       	mov	r10, r1
     cce:	b1 2c       	mov	r11, r1
     cd0:	f0 2d       	mov	r31, r0
     cd2:	01 c0       	rjmp	.+2      	; 0xcd6 <FUNCi32toa+0x4a>
     cd4:	10 2f       	mov	r17, r16
     cd6:	01 e0       	ldi	r16, 0x01	; 1
     cd8:	01 0f       	add	r16, r17
     cda:	c1 2f       	mov	r28, r17
     cdc:	d0 e0       	ldi	r29, 0x00	; 0
     cde:	c5 57       	subi	r28, 0x75	; 117
     ce0:	dc 4f       	sbci	r29, 0xFC	; 252
     ce2:	a5 01       	movw	r20, r10
     ce4:	94 01       	movw	r18, r8
     ce6:	0e 94 43 16 	call	0x2c86	; 0x2c86 <__divmodsi4>
     cea:	60 5d       	subi	r22, 0xD0	; 208
     cec:	68 83       	st	Y, r22
	}while ((n /= 10) > 0); // delete it
     cee:	62 2f       	mov	r22, r18
     cf0:	73 2f       	mov	r23, r19
     cf2:	84 2f       	mov	r24, r20
     cf4:	95 2f       	mov	r25, r21
     cf6:	16 16       	cp	r1, r22
     cf8:	17 06       	cpc	r1, r23
     cfa:	18 06       	cpc	r1, r24
     cfc:	19 06       	cpc	r1, r25
     cfe:	54 f3       	brlt	.-44     	; 0xcd4 <FUNCi32toa+0x48>
	if (sign < 0)
     d00:	ff 20       	and	r15, r15
     d02:	44 f4       	brge	.+16     	; 0xd14 <FUNCi32toa+0x88>
	FUNCstr[i++] = '-';
     d04:	e0 2f       	mov	r30, r16
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	e5 57       	subi	r30, 0x75	; 117
     d0a:	fc 4f       	sbci	r31, 0xFC	; 252
     d0c:	8d e2       	ldi	r24, 0x2D	; 45
     d0e:	80 83       	st	Z, r24
     d10:	02 e0       	ldi	r16, 0x02	; 2
     d12:	01 0f       	add	r16, r17
	FUNCstr[i] = '\0';
     d14:	e0 2f       	mov	r30, r16
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	e5 57       	subi	r30, 0x75	; 117
     d1a:	fc 4f       	sbci	r31, 0xFC	; 252
     d1c:	10 82       	st	Z, r1
	Reverse(FUNCstr);
     d1e:	8b e8       	ldi	r24, 0x8B	; 139
     d20:	93 e0       	ldi	r25, 0x03	; 3
     d22:	97 df       	rcall	.-210    	; 0xc52 <Reverse>
	return FUNCstr;
}
     d24:	8b e8       	ldi	r24, 0x8B	; 139
     d26:	93 e0       	ldi	r25, 0x03	; 3
     d28:	df 91       	pop	r29
     d2a:	cf 91       	pop	r28
     d2c:	1f 91       	pop	r17
     d2e:	0f 91       	pop	r16
     d30:	ff 90       	pop	r15
     d32:	ef 90       	pop	r14
     d34:	df 90       	pop	r13
     d36:	cf 90       	pop	r12
     d38:	bf 90       	pop	r11
     d3a:	af 90       	pop	r10
     d3c:	9f 90       	pop	r9
     d3e:	8f 90       	pop	r8
     d40:	08 95       	ret

00000d42 <FUNCi16toa>:
// i16toa: convert n to characters in s
char* FUNCi16toa(int16_t n)
{
     d42:	0f 93       	push	r16
     d44:	1f 93       	push	r17
     d46:	cf 93       	push	r28
     d48:	df 93       	push	r29
     d4a:	ec 01       	movw	r28, r24
     d4c:	99 23       	and	r25, r25
     d4e:	24 f4       	brge	.+8      	; 0xd58 <FUNCi16toa+0x16>
     d50:	88 27       	eor	r24, r24
     d52:	99 27       	eor	r25, r25
     d54:	8c 1b       	sub	r24, r28
     d56:	9d 0b       	sbc	r25, r29
     d58:	20 e0       	ldi	r18, 0x00	; 0
	int16_t sign;
	if ((sign = n) < 0) // record sign
		n = -n; // make n positive
	i = 0;
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
     d5a:	0a e0       	ldi	r16, 0x0A	; 10
     d5c:	10 e0       	ldi	r17, 0x00	; 0
     d5e:	01 c0       	rjmp	.+2      	; 0xd62 <FUNCi16toa+0x20>
     d60:	23 2f       	mov	r18, r19
     d62:	31 e0       	ldi	r19, 0x01	; 1
     d64:	32 0f       	add	r19, r18
     d66:	e2 2f       	mov	r30, r18
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	e5 57       	subi	r30, 0x75	; 117
     d6c:	fc 4f       	sbci	r31, 0xFC	; 252
     d6e:	b8 01       	movw	r22, r16
     d70:	0e 94 30 16 	call	0x2c60	; 0x2c60 <__divmodhi4>
     d74:	80 5d       	subi	r24, 0xD0	; 208
     d76:	80 83       	st	Z, r24
	}while ((n /= 10) > 0); // delete it
     d78:	86 2f       	mov	r24, r22
     d7a:	97 2f       	mov	r25, r23
     d7c:	18 16       	cp	r1, r24
     d7e:	19 06       	cpc	r1, r25
     d80:	7c f3       	brlt	.-34     	; 0xd60 <FUNCi16toa+0x1e>
	if (sign < 0)
     d82:	dd 23       	and	r29, r29
     d84:	44 f4       	brge	.+16     	; 0xd96 <FUNCi16toa+0x54>
		FUNCstr[i++] = '-';
     d86:	e3 2f       	mov	r30, r19
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	e5 57       	subi	r30, 0x75	; 117
     d8c:	fc 4f       	sbci	r31, 0xFC	; 252
     d8e:	8d e2       	ldi	r24, 0x2D	; 45
     d90:	80 83       	st	Z, r24
     d92:	32 e0       	ldi	r19, 0x02	; 2
     d94:	32 0f       	add	r19, r18
	FUNCstr[i] = '\0';
     d96:	e3 2f       	mov	r30, r19
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	e5 57       	subi	r30, 0x75	; 117
     d9c:	fc 4f       	sbci	r31, 0xFC	; 252
     d9e:	10 82       	st	Z, r1
	Reverse(FUNCstr);
     da0:	8b e8       	ldi	r24, 0x8B	; 139
     da2:	93 e0       	ldi	r25, 0x03	; 3
     da4:	56 df       	rcall	.-340    	; 0xc52 <Reverse>
	return FUNCstr;
}
     da6:	8b e8       	ldi	r24, 0x8B	; 139
     da8:	93 e0       	ldi	r25, 0x03	; 3
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	1f 91       	pop	r17
     db0:	0f 91       	pop	r16
     db2:	08 95       	ret

00000db4 <FUNCui16toa>:
// ui16toa: convert n to characters in s
char* FUNCui16toa(uint16_t n)
{
     db4:	cf 93       	push	r28
     db6:	ac 01       	movw	r20, r24
	uint8_t i;
	i = 0;
     db8:	e0 e0       	ldi	r30, 0x00	; 0
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
     dba:	c1 e0       	ldi	r28, 0x01	; 1
     dbc:	ce 0f       	add	r28, r30
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	e5 57       	subi	r30, 0x75	; 117
     dc2:	fc 4f       	sbci	r31, 0xFC	; 252
     dc4:	9a 01       	movw	r18, r20
     dc6:	ad ec       	ldi	r26, 0xCD	; 205
     dc8:	bc ec       	ldi	r27, 0xCC	; 204
     dca:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <__umulhisi3>
     dce:	96 95       	lsr	r25
     dd0:	87 95       	ror	r24
     dd2:	96 95       	lsr	r25
     dd4:	87 95       	ror	r24
     dd6:	96 95       	lsr	r25
     dd8:	87 95       	ror	r24
     dda:	9c 01       	movw	r18, r24
     ddc:	22 0f       	add	r18, r18
     dde:	33 1f       	adc	r19, r19
     de0:	88 0f       	add	r24, r24
     de2:	99 1f       	adc	r25, r25
     de4:	88 0f       	add	r24, r24
     de6:	99 1f       	adc	r25, r25
     de8:	88 0f       	add	r24, r24
     dea:	99 1f       	adc	r25, r25
     dec:	82 0f       	add	r24, r18
     dee:	93 1f       	adc	r25, r19
     df0:	9a 01       	movw	r18, r20
     df2:	28 1b       	sub	r18, r24
     df4:	39 0b       	sbc	r19, r25
     df6:	c9 01       	movw	r24, r18
     df8:	80 5d       	subi	r24, 0xD0	; 208
     dfa:	80 83       	st	Z, r24
	}while ((n /= 10) > 0); // delete it
     dfc:	9a 01       	movw	r18, r20
     dfe:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <__umulhisi3>
     e02:	ac 01       	movw	r20, r24
     e04:	56 95       	lsr	r21
     e06:	47 95       	ror	r20
     e08:	56 95       	lsr	r21
     e0a:	47 95       	ror	r20
     e0c:	56 95       	lsr	r21
     e0e:	47 95       	ror	r20
char* FUNCui16toa(uint16_t n)
{
	uint8_t i;
	i = 0;
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
     e10:	ec 2f       	mov	r30, r28
	}while ((n /= 10) > 0); // delete it
     e12:	41 15       	cp	r20, r1
     e14:	51 05       	cpc	r21, r1
     e16:	89 f6       	brne	.-94     	; 0xdba <FUNCui16toa+0x6>
	FUNCstr[i] = '\0';
     e18:	ec 2f       	mov	r30, r28
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	e5 57       	subi	r30, 0x75	; 117
     e1e:	fc 4f       	sbci	r31, 0xFC	; 252
     e20:	10 82       	st	Z, r1
	Reverse(FUNCstr);
     e22:	8b e8       	ldi	r24, 0x8B	; 139
     e24:	93 e0       	ldi	r25, 0x03	; 3
     e26:	15 df       	rcall	.-470    	; 0xc52 <Reverse>
	return FUNCstr;
}
     e28:	8b e8       	ldi	r24, 0x8B	; 139
     e2a:	93 e0       	ldi	r25, 0x03	; 3
     e2c:	cf 91       	pop	r28
     e2e:	08 95       	ret

00000e30 <FUNCbcd2bin>:
		s[j] = c;
	}
}
unsigned char FUNCbcd2bin(unsigned char val)
{
	return (val & 0x0f) + (val >> 4) * 10;
     e30:	98 2f       	mov	r25, r24
     e32:	92 95       	swap	r25
     e34:	9f 70       	andi	r25, 0x0F	; 15
     e36:	99 0f       	add	r25, r25
     e38:	29 2f       	mov	r18, r25
     e3a:	22 0f       	add	r18, r18
     e3c:	22 0f       	add	r18, r18
     e3e:	92 0f       	add	r25, r18
     e40:	8f 70       	andi	r24, 0x0F	; 15
}
     e42:	89 0f       	add	r24, r25
     e44:	08 95       	ret

00000e46 <FUNCbin2bcd>:
unsigned char FUNCbin2bcd(unsigned val)
{
     e46:	ac 01       	movw	r20, r24
	return ((val / 10) << 4) + val % 10;
     e48:	9c 01       	movw	r18, r24
     e4a:	ad ec       	ldi	r26, 0xCD	; 205
     e4c:	bc ec       	ldi	r27, 0xCC	; 204
     e4e:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <__umulhisi3>
     e52:	96 95       	lsr	r25
     e54:	87 95       	ror	r24
     e56:	96 95       	lsr	r25
     e58:	87 95       	ror	r24
     e5a:	96 95       	lsr	r25
     e5c:	87 95       	ror	r24
     e5e:	bc 01       	movw	r22, r24
     e60:	66 0f       	add	r22, r22
     e62:	77 1f       	adc	r23, r23
     e64:	9c 01       	movw	r18, r24
     e66:	22 0f       	add	r18, r18
     e68:	33 1f       	adc	r19, r19
     e6a:	22 0f       	add	r18, r18
     e6c:	33 1f       	adc	r19, r19
     e6e:	22 0f       	add	r18, r18
     e70:	33 1f       	adc	r19, r19
     e72:	26 0f       	add	r18, r22
     e74:	37 1f       	adc	r19, r23
     e76:	42 1b       	sub	r20, r18
     e78:	53 0b       	sbc	r21, r19
}
     e7a:	34 2f       	mov	r19, r20
     e7c:	20 e1       	ldi	r18, 0x10	; 16
     e7e:	82 9f       	mul	r24, r18
     e80:	30 0d       	add	r19, r0
     e82:	11 24       	eor	r1, r1
     e84:	83 2f       	mov	r24, r19
     e86:	08 95       	ret

00000e88 <FUNCgcd1>:
long FUNCgcd1(long a, long b)
{
     e88:	cf 92       	push	r12
     e8a:	df 92       	push	r13
     e8c:	ef 92       	push	r14
     e8e:	ff 92       	push	r15
     e90:	cf 93       	push	r28
     e92:	df 93       	push	r29
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
     e98:	28 97       	sbiw	r28, 0x08	; 8
     e9a:	0f b6       	in	r0, 0x3f	; 63
     e9c:	f8 94       	cli
     e9e:	de bf       	out	0x3e, r29	; 62
     ea0:	0f be       	out	0x3f, r0	; 63
     ea2:	cd bf       	out	0x3d, r28	; 61
     ea4:	6b 01       	movw	r12, r22
     ea6:	7c 01       	movw	r14, r24
     ea8:	69 83       	std	Y+1, r22	; 0x01
     eaa:	7a 83       	std	Y+2, r23	; 0x02
     eac:	8b 83       	std	Y+3, r24	; 0x03
     eae:	9c 83       	std	Y+4, r25	; 0x04
     eb0:	2d 83       	std	Y+5, r18	; 0x05
     eb2:	3e 83       	std	Y+6, r19	; 0x06
     eb4:	4f 83       	std	Y+7, r20	; 0x07
     eb6:	58 87       	std	Y+8, r21	; 0x08
	long r;
	if (a < b)
     eb8:	c2 16       	cp	r12, r18
     eba:	d3 06       	cpc	r13, r19
     ebc:	e4 06       	cpc	r14, r20
     ebe:	f5 06       	cpc	r15, r21
     ec0:	34 f4       	brge	.+12     	; 0xece <FUNCgcd1+0x46>
		FUNCswap(&a, &b);
     ec2:	be 01       	movw	r22, r28
     ec4:	6b 5f       	subi	r22, 0xFB	; 251
     ec6:	7f 4f       	sbci	r23, 0xFF	; 255
     ec8:	ce 01       	movw	r24, r28
     eca:	01 96       	adiw	r24, 0x01	; 1
     ecc:	85 dc       	rcall	.-1782   	; 0x7d8 <FUNCswap>
	if (!b){
     ece:	8d 81       	ldd	r24, Y+5	; 0x05
     ed0:	9e 81       	ldd	r25, Y+6	; 0x06
     ed2:	af 81       	ldd	r26, Y+7	; 0x07
     ed4:	b8 85       	ldd	r27, Y+8	; 0x08
     ed6:	89 2b       	or	r24, r25
     ed8:	8a 2b       	or	r24, r26
     eda:	8b 2b       	or	r24, r27
     edc:	71 f4       	brne	.+28     	; 0xefa <FUNCgcd1+0x72>
		while ((r = a % b) != 0) {
     ede:	69 81       	ldd	r22, Y+1	; 0x01
     ee0:	7a 81       	ldd	r23, Y+2	; 0x02
     ee2:	8b 81       	ldd	r24, Y+3	; 0x03
     ee4:	9c 81       	ldd	r25, Y+4	; 0x04
     ee6:	20 e0       	ldi	r18, 0x00	; 0
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	a9 01       	movw	r20, r18
     eec:	0e 94 43 16 	call	0x2c86	; 0x2c86 <__divmodsi4>
     ef0:	61 15       	cp	r22, r1
     ef2:	71 05       	cpc	r23, r1
     ef4:	81 05       	cpc	r24, r1
     ef6:	91 05       	cpc	r25, r1
     ef8:	29 f4       	brne	.+10     	; 0xf04 <FUNCgcd1+0x7c>
			a = b;
			b = r;
		}
	}	
	return b;
     efa:	6d 81       	ldd	r22, Y+5	; 0x05
     efc:	7e 81       	ldd	r23, Y+6	; 0x06
     efe:	8f 81       	ldd	r24, Y+7	; 0x07
     f00:	98 85       	ldd	r25, Y+8	; 0x08
     f02:	05 c0       	rjmp	.+10     	; 0xf0e <FUNCgcd1+0x86>
	if (a < b)
		FUNCswap(&a, &b);
	if (!b){
		while ((r = a % b) != 0) {
			a = b;
			b = r;
     f04:	6d 83       	std	Y+5, r22	; 0x05
     f06:	7e 83       	std	Y+6, r23	; 0x06
     f08:	8f 83       	std	Y+7, r24	; 0x07
     f0a:	98 87       	std	Y+8, r25	; 0x08
     f0c:	f6 cf       	rjmp	.-20     	; 0xefa <FUNCgcd1+0x72>
		}
	}	
	return b;
}
     f0e:	28 96       	adiw	r28, 0x08	; 8
     f10:	0f b6       	in	r0, 0x3f	; 63
     f12:	f8 94       	cli
     f14:	de bf       	out	0x3e, r29	; 62
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	cd bf       	out	0x3d, r28	; 61
     f1a:	df 91       	pop	r29
     f1c:	cf 91       	pop	r28
     f1e:	ff 90       	pop	r15
     f20:	ef 90       	pop	r14
     f22:	df 90       	pop	r13
     f24:	cf 90       	pop	r12
     f26:	08 95       	ret

00000f28 <FUNCpincheck>:
	uint8_t lh;
	if(port & (1<<pin))
		lh=1;
	else
		lh=0;
	return lh;
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	02 c0       	rjmp	.+4      	; 0xf30 <FUNCpincheck+0x8>
     f2c:	95 95       	asr	r25
     f2e:	87 95       	ror	r24
     f30:	6a 95       	dec	r22
     f32:	e2 f7       	brpl	.-8      	; 0xf2c <FUNCpincheck+0x4>
}
     f34:	81 70       	andi	r24, 0x01	; 1
     f36:	08 95       	ret

00000f38 <FUNCprint_binary>:
char* FUNCprint_binary(uint8_t number)
{
     f38:	eb e8       	ldi	r30, 0x8B	; 139
     f3a:	f3 e0       	ldi	r31, 0x03	; 3
	uint8_t i,c;
    for(i=128,c=0;i;i>>=1,c++){
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	20 e8       	ldi	r18, 0x80	; 128
	(number & i) ? (FUNCstr[c]='1') : (FUNCstr[c]='0');
     f40:	50 e3       	ldi	r21, 0x30	; 48
     f42:	41 e3       	ldi	r20, 0x31	; 49
     f44:	38 2f       	mov	r19, r24
     f46:	32 23       	and	r19, r18
     f48:	11 f0       	breq	.+4      	; 0xf4e <FUNCprint_binary+0x16>
     f4a:	40 83       	st	Z, r20
     f4c:	01 c0       	rjmp	.+2      	; 0xf50 <FUNCprint_binary+0x18>
     f4e:	50 83       	st	Z, r21
	return lh;
}
char* FUNCprint_binary(uint8_t number)
{
	uint8_t i,c;
    for(i=128,c=0;i;i>>=1,c++){
     f50:	26 95       	lsr	r18
     f52:	9f 5f       	subi	r25, 0xFF	; 255
     f54:	31 96       	adiw	r30, 0x01	; 1
     f56:	98 30       	cpi	r25, 0x08	; 8
     f58:	a9 f7       	brne	.-22     	; 0xf44 <FUNCprint_binary+0xc>
	(number & i) ? (FUNCstr[c]='1') : (FUNCstr[c]='0');
	}
	FUNCstr[c]='\0';
     f5a:	10 92 93 03 	sts	0x0393, r1	; 0x800393 <FUNCstr+0x8>
	return FUNCstr;
}
     f5e:	8b e8       	ldi	r24, 0x8B	; 139
     f60:	93 e0       	ldi	r25, 0x03	; 3
     f62:	08 95       	ret

00000f64 <FUNCmayia>:
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
     f64:	a4 2f       	mov	r26, r20
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	10 97       	sbiw	r26, 0x00	; 0
     f6a:	61 f0       	breq	.+24     	; 0xf84 <FUNCmayia+0x20>
     f6c:	21 e0       	ldi	r18, 0x01	; 1
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	e1 e0       	ldi	r30, 0x01	; 1
     f72:	f0 e0       	ldi	r31, 0x00	; 0
        p = p * bs;
     f74:	ee 0f       	add	r30, r30
     f76:	ff 1f       	adc	r31, r31
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
     f78:	2f 5f       	subi	r18, 0xFF	; 255
     f7a:	3f 4f       	sbci	r19, 0xFF	; 255
     f7c:	a2 17       	cp	r26, r18
     f7e:	b3 07       	cpc	r27, r19
     f80:	c8 f7       	brcc	.-14     	; 0xf74 <FUNCmayia+0x10>
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <FUNCmayia+0x24>
}
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
     f84:	e1 e0       	ldi	r30, 0x01	; 1
     f86:	f0 e0       	ldi	r31, 0x00	; 0
unsigned int FUNCmayia(unsigned int xi, unsigned int xf, uint8_t nbits)
{//magic formula
	unsigned int mask;
	unsigned int diff;
	unsigned int trans;
	mask=Pwr(2,nbits)-1;
     f88:	31 97       	sbiw	r30, 0x01	; 1
	xi&=mask;
	xf&=mask;
     f8a:	6e 23       	and	r22, r30
     f8c:	7f 23       	and	r23, r31
	diff=xf^xi;
     f8e:	8e 23       	and	r24, r30
     f90:	9f 23       	and	r25, r31
     f92:	86 27       	eor	r24, r22
     f94:	97 27       	eor	r25, r23
	trans=diff&xf;
	return (trans<<nbits)|diff;
     f96:	68 23       	and	r22, r24
     f98:	79 23       	and	r23, r25
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <FUNCmayia+0x3c>
     f9c:	66 0f       	add	r22, r22
     f9e:	77 1f       	adc	r23, r23
     fa0:	4a 95       	dec	r20
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <FUNCmayia+0x38>
}
     fa4:	86 2b       	or	r24, r22
     fa6:	97 2b       	or	r25, r23
     fa8:	08 95       	ret

00000faa <FUNCenable>:
int FUNCreadint(int nmin, int nmax);
***/
// uint8_t TRANupdate(struct TRAN *tr, uint8_t idata);
/***Procedure & Function***/
FUNC FUNCenable( void )
{
     faa:	fc 01       	movw	r30, r24
	uint8_t tSREG;
	tSREG=SREG;
     fac:	9f b7       	in	r25, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
     fae:	8f b7       	in	r24, 0x3f	; 63
     fb0:	8f 77       	andi	r24, 0x7F	; 127
     fb2:	8f bf       	out	0x3f, r24	; 63
	func.putstr=FUNCputstr;
	func.getnum=FUNCgetnum;
	func.getnumv2=FUNCgetnumv2;
	func.readint=FUNCreadint;
	*/
	SREG=tSREG;
     fb4:	9f bf       	out	0x3f, r25	; 63
	/******/
	return func;
     fb6:	84 ee       	ldi	r24, 0xE4	; 228
     fb8:	95 e0       	ldi	r25, 0x05	; 5
     fba:	91 83       	std	Z+1, r25	; 0x01
     fbc:	80 83       	st	Z, r24
     fbe:	8f ef       	ldi	r24, 0xFF	; 255
     fc0:	95 e0       	ldi	r25, 0x05	; 5
     fc2:	93 83       	std	Z+3, r25	; 0x03
     fc4:	82 83       	std	Z+2, r24	; 0x02
     fc6:	89 e2       	ldi	r24, 0x29	; 41
     fc8:	96 e0       	ldi	r25, 0x06	; 6
     fca:	95 83       	std	Z+5, r25	; 0x05
     fcc:	84 83       	std	Z+4, r24	; 0x04
     fce:	82 eb       	ldi	r24, 0xB2	; 178
     fd0:	97 e0       	ldi	r25, 0x07	; 7
     fd2:	97 83       	std	Z+7, r25	; 0x07
     fd4:	86 83       	std	Z+6, r24	; 0x06
     fd6:	81 ed       	ldi	r24, 0xD1	; 209
     fd8:	93 e0       	ldi	r25, 0x03	; 3
     fda:	91 87       	std	Z+9, r25	; 0x09
     fdc:	80 87       	std	Z+8, r24	; 0x08
     fde:	8f ed       	ldi	r24, 0xDF	; 223
     fe0:	93 e0       	ldi	r25, 0x03	; 3
     fe2:	93 87       	std	Z+11, r25	; 0x0b
     fe4:	82 87       	std	Z+10, r24	; 0x0a
     fe6:	81 ee       	ldi	r24, 0xE1	; 225
     fe8:	93 e0       	ldi	r25, 0x03	; 3
     fea:	95 87       	std	Z+13, r25	; 0x0d
     fec:	84 87       	std	Z+12, r24	; 0x0c
     fee:	84 ee       	ldi	r24, 0xE4	; 228
     ff0:	93 e0       	ldi	r25, 0x03	; 3
     ff2:	97 87       	std	Z+15, r25	; 0x0f
     ff4:	86 87       	std	Z+14, r24	; 0x0e
     ff6:	87 ee       	ldi	r24, 0xE7	; 231
     ff8:	93 e0       	ldi	r25, 0x03	; 3
     ffa:	91 8b       	std	Z+17, r25	; 0x11
     ffc:	80 8b       	std	Z+16, r24	; 0x10
     ffe:	8a ee       	ldi	r24, 0xEA	; 234
    1000:	93 e0       	ldi	r25, 0x03	; 3
    1002:	93 8b       	std	Z+19, r25	; 0x13
    1004:	82 8b       	std	Z+18, r24	; 0x12
    1006:	8b ed       	ldi	r24, 0xDB	; 219
    1008:	93 e0       	ldi	r25, 0x03	; 3
    100a:	95 8b       	std	Z+21, r25	; 0x15
    100c:	84 8b       	std	Z+20, r24	; 0x14
    100e:	8d ed       	ldi	r24, 0xDD	; 221
    1010:	93 e0       	ldi	r25, 0x03	; 3
    1012:	97 8b       	std	Z+23, r25	; 0x17
    1014:	86 8b       	std	Z+22, r24	; 0x16
    1016:	8c ee       	ldi	r24, 0xEC	; 236
    1018:	93 e0       	ldi	r25, 0x03	; 3
    101a:	91 8f       	std	Z+25, r25	; 0x19
    101c:	80 8f       	std	Z+24, r24	; 0x18
    101e:	8d e0       	ldi	r24, 0x0D	; 13
    1020:	94 e0       	ldi	r25, 0x04	; 4
    1022:	93 8f       	std	Z+27, r25	; 0x1b
    1024:	82 8f       	std	Z+26, r24	; 0x1a
    1026:	8b e1       	ldi	r24, 0x1B	; 27
    1028:	94 e0       	ldi	r25, 0x04	; 4
    102a:	95 8f       	std	Z+29, r25	; 0x1d
    102c:	84 8f       	std	Z+28, r24	; 0x1c
    102e:	8d e3       	ldi	r24, 0x3D	; 61
    1030:	94 e0       	ldi	r25, 0x04	; 4
    1032:	97 8f       	std	Z+31, r25	; 0x1f
    1034:	86 8f       	std	Z+30, r24	; 0x1e
    1036:	81 ea       	ldi	r24, 0xA1	; 161
    1038:	96 e0       	ldi	r25, 0x06	; 6
    103a:	91 a3       	std	Z+33, r25	; 0x21
    103c:	80 a3       	std	Z+32, r24	; 0x20
    103e:	8a ed       	ldi	r24, 0xDA	; 218
    1040:	96 e0       	ldi	r25, 0x06	; 6
    1042:	93 a3       	std	Z+35, r25	; 0x23
    1044:	82 a3       	std	Z+34, r24	; 0x22
    1046:	86 e4       	ldi	r24, 0x46	; 70
    1048:	96 e0       	ldi	r25, 0x06	; 6
    104a:	95 a3       	std	Z+37, r25	; 0x25
    104c:	84 a3       	std	Z+36, r24	; 0x24
    104e:	8e e0       	ldi	r24, 0x0E	; 14
    1050:	96 e0       	ldi	r25, 0x06	; 6
    1052:	97 a3       	std	Z+39, r25	; 0x27
    1054:	86 a3       	std	Z+38, r24	; 0x26
    1056:	83 ee       	ldi	r24, 0xE3	; 227
    1058:	94 e0       	ldi	r25, 0x04	; 4
    105a:	91 a7       	std	Z+41, r25	; 0x29
    105c:	80 a7       	std	Z+40, r24	; 0x28
    105e:	88 ee       	ldi	r24, 0xE8	; 232
    1060:	94 e0       	ldi	r25, 0x04	; 4
    1062:	93 a7       	std	Z+43, r25	; 0x2b
    1064:	82 a7       	std	Z+42, r24	; 0x2a
    1066:	87 ef       	ldi	r24, 0xF7	; 247
    1068:	94 e0       	ldi	r25, 0x04	; 4
    106a:	95 a7       	std	Z+45, r25	; 0x2d
    106c:	84 a7       	std	Z+44, r24	; 0x2c
    106e:	8b e1       	ldi	r24, 0x1B	; 27
    1070:	95 e0       	ldi	r25, 0x05	; 5
    1072:	97 a7       	std	Z+47, r25	; 0x2f
    1074:	86 a7       	std	Z+46, r24	; 0x2e
    1076:	8d e1       	ldi	r24, 0x1D	; 29
    1078:	95 e0       	ldi	r25, 0x05	; 5
    107a:	91 ab       	std	Z+49, r25	; 0x31
    107c:	80 ab       	std	Z+48, r24	; 0x30
    107e:	87 e2       	ldi	r24, 0x27	; 39
    1080:	95 e0       	ldi	r25, 0x05	; 5
    1082:	93 ab       	std	Z+51, r25	; 0x33
    1084:	82 ab       	std	Z+50, r24	; 0x32
    1086:	84 e3       	ldi	r24, 0x34	; 52
    1088:	95 e0       	ldi	r25, 0x05	; 5
    108a:	95 ab       	std	Z+53, r25	; 0x35
    108c:	84 ab       	std	Z+52, r24	; 0x34
    108e:	80 e4       	ldi	r24, 0x40	; 64
    1090:	95 e0       	ldi	r25, 0x05	; 5
    1092:	97 ab       	std	Z+55, r25	; 0x37
    1094:	86 ab       	std	Z+54, r24	; 0x36
    1096:	88 e5       	ldi	r24, 0x58	; 88
    1098:	95 e0       	ldi	r25, 0x05	; 5
    109a:	91 af       	std	Z+57, r25	; 0x39
    109c:	80 af       	std	Z+56, r24	; 0x38
    109e:	8b e6       	ldi	r24, 0x6B	; 107
    10a0:	95 e0       	ldi	r25, 0x05	; 5
    10a2:	93 af       	std	Z+59, r25	; 0x3b
    10a4:	82 af       	std	Z+58, r24	; 0x3a
    10a6:	86 e7       	ldi	r24, 0x76	; 118
    10a8:	95 e0       	ldi	r25, 0x05	; 5
    10aa:	95 af       	std	Z+61, r25	; 0x3d
    10ac:	84 af       	std	Z+60, r24	; 0x3c
    10ae:	83 ea       	ldi	r24, 0xA3	; 163
    10b0:	95 e0       	ldi	r25, 0x05	; 5
    10b2:	97 af       	std	Z+63, r25	; 0x3f
    10b4:	86 af       	std	Z+62, r24	; 0x3e
    10b6:	df 01       	movw	r26, r30
    10b8:	a0 5c       	subi	r26, 0xC0	; 192
    10ba:	bf 4f       	sbci	r27, 0xFF	; 255
    10bc:	88 e1       	ldi	r24, 0x18	; 24
    10be:	97 e0       	ldi	r25, 0x07	; 7
    10c0:	11 96       	adiw	r26, 0x01	; 1
    10c2:	9c 93       	st	X, r25
    10c4:	8e 93       	st	-X, r24
    10c6:	12 96       	adiw	r26, 0x02	; 2
    10c8:	83 e2       	ldi	r24, 0x23	; 35
    10ca:	97 e0       	ldi	r25, 0x07	; 7
    10cc:	11 96       	adiw	r26, 0x01	; 1
    10ce:	9c 93       	st	X, r25
    10d0:	8e 93       	st	-X, r24
    10d2:	12 96       	adiw	r26, 0x02	; 2
    10d4:	84 e4       	ldi	r24, 0x44	; 68
    10d6:	97 e0       	ldi	r25, 0x07	; 7
    10d8:	11 96       	adiw	r26, 0x01	; 1
    10da:	9c 93       	st	X, r25
    10dc:	8e 93       	st	-X, r24
    10de:	12 96       	adiw	r26, 0x02	; 2
    10e0:	84 e9       	ldi	r24, 0x94	; 148
    10e2:	97 e0       	ldi	r25, 0x07	; 7
    10e4:	11 96       	adiw	r26, 0x01	; 1
    10e6:	9c 93       	st	X, r25
    10e8:	8e 93       	st	-X, r24
    10ea:	12 96       	adiw	r26, 0x02	; 2
    10ec:	8c e9       	ldi	r24, 0x9C	; 156
    10ee:	97 e0       	ldi	r25, 0x07	; 7
    10f0:	8d 93       	st	X+, r24
    10f2:	9c 93       	st	X, r25
}
    10f4:	cf 01       	movw	r24, r30
    10f6:	08 95       	ret

000010f8 <KEYPAD_get>:
	}
	return data;
}
/***read***/
struct keypadata KEYPAD_get(void)
{
    10f8:	cf 93       	push	r28
    10fa:	df 93       	push	r29
    10fc:	00 d0       	rcall	.+0      	; 0x10fe <KEYPAD_get+0x6>
    10fe:	00 d0       	rcall	.+0      	; 0x1100 <__stack+0x1>
    1100:	1f 92       	push	r1
    1102:	cd b7       	in	r28, 0x3d	; 61
    1104:	de b7       	in	r29, 0x3e	; 62
	return data;
    1106:	85 e0       	ldi	r24, 0x05	; 5
    1108:	ee ed       	ldi	r30, 0xDE	; 222
    110a:	f3 e0       	ldi	r31, 0x03	; 3
    110c:	de 01       	movw	r26, r28
    110e:	11 96       	adiw	r26, 0x01	; 1
    1110:	01 90       	ld	r0, Z+
    1112:	0d 92       	st	X+, r0
    1114:	8a 95       	dec	r24
    1116:	e1 f7       	brne	.-8      	; 0x1110 <__stack+0x11>
    1118:	29 81       	ldd	r18, Y+1	; 0x01
    111a:	3a 81       	ldd	r19, Y+2	; 0x02
    111c:	4b 81       	ldd	r20, Y+3	; 0x03
    111e:	5c 81       	ldd	r21, Y+4	; 0x04
    1120:	6d 81       	ldd	r22, Y+5	; 0x05
}
    1122:	70 e0       	ldi	r23, 0x00	; 0
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	0f 90       	pop	r0
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	df 91       	pop	r29
    1134:	cf 91       	pop	r28
    1136:	08 95       	ret

00001138 <KEYPAD_flush>:
/***flush***/
void KEYPAD_flush(void)
{
	KEYPADSTRINGINDEX=0;
    1138:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <KEYPADSTRINGINDEX>
	data.character=' ';
    113c:	ee ed       	ldi	r30, 0xDE	; 222
    113e:	f3 e0       	ldi	r31, 0x03	; 3
    1140:	80 e2       	ldi	r24, 0x20	; 32
    1142:	80 83       	st	Z, r24
	data.printstring="\0";
    1144:	80 e1       	ldi	r24, 0x10	; 16
    1146:	91 e0       	ldi	r25, 0x01	; 1
    1148:	92 83       	std	Z+2, r25	; 0x02
    114a:	81 83       	std	Z+1, r24	; 0x01
	data.string="\0";
    114c:	94 83       	std	Z+4, r25	; 0x04
    114e:	83 83       	std	Z+3, r24	; 0x03
    1150:	08 95       	ret

00001152 <KEYPAD_getkey>:
	*keypad_PORT|=(1<<KEYPADLINE_1) | (1<<KEYPADLINE_2) | (1<<KEYPADLINE_3) | (1<<KEYPADLINE_4);
	//Going to use pull down method.
	return keypad;
}
char KEYPAD_getkey(void)
{
    1152:	cf 93       	push	r28
    1154:	df 93       	push	r29
    1156:	21 e0       	ldi	r18, 0x01	; 1
	uint8_t HL;
	char c='\0';
    1158:	80 e0       	ldi	r24, 0x00	; 0
				*keypad_PORT|=(1<<KEYPADLINE_1);
				break;
			case 1: //line 2 index 1
				*keypad_DDR|=(1<<KEYPADLINE_2);
				*keypad_PORT&=~(1<<KEYPADLINE_2);
				keypad_dataf.line_2=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    115a:	a3 ea       	ldi	r26, 0xA3	; 163
    115c:	b3 e0       	ldi	r27, 0x03	; 3
				HL=KEYPADhl(keypad_datai.line_2,keypad_dataf.line_2);
    115e:	e7 ea       	ldi	r30, 0xA7	; 167
    1160:	f3 e0       	ldi	r31, 0x03	; 3
					if(HL == (1<<KEYPADDATA_2))
						c=keypadvalue[1][1];
					if(HL == (1<<KEYPADDATA_3))
						c=keypadvalue[1][2];
					if(HL == (1<<KEYPADDATA_4))
						c=keypadvalue[1][3];
    1162:	60 e0       	ldi	r22, 0x00	; 0
    1164:	71 e0       	ldi	r23, 0x01	; 1
    1166:	01 c0       	rjmp	.+2      	; 0x116a <KEYPAD_getkey+0x18>
    1168:	2f 5f       	subi	r18, 0xFF	; 255
{
	uint8_t HL;
	char c='\0';
	uint8_t keypad_option;
	for(keypad_option=0;keypad_option<KEYPADLINES;keypad_option++){
		switch (keypad_option)
    116a:	9f ef       	ldi	r25, 0xFF	; 255
    116c:	92 0f       	add	r25, r18
    116e:	91 30       	cpi	r25, 0x01	; 1
    1170:	09 f4       	brne	.+2      	; 0x1174 <KEYPAD_getkey+0x22>
    1172:	4b c0       	rjmp	.+150    	; 0x120a <KEYPAD_getkey+0xb8>
    1174:	38 f0       	brcs	.+14     	; 0x1184 <KEYPAD_getkey+0x32>
    1176:	92 30       	cpi	r25, 0x02	; 2
    1178:	09 f4       	brne	.+2      	; 0x117c <KEYPAD_getkey+0x2a>
    117a:	8c c0       	rjmp	.+280    	; 0x1294 <KEYPAD_getkey+0x142>
    117c:	93 30       	cpi	r25, 0x03	; 3
    117e:	09 f4       	brne	.+2      	; 0x1182 <KEYPAD_getkey+0x30>
    1180:	ce c0       	rjmp	.+412    	; 0x131e <KEYPAD_getkey+0x1cc>
    1182:	0e c1       	rjmp	.+540    	; 0x13a0 <KEYPAD_getkey+0x24e>
		{
			case 0: //line 1 index 0
				*keypad_DDR|=(1<<KEYPADLINE_1);
    1184:	40 91 ae 03 	lds	r20, 0x03AE	; 0x8003ae <keypad_DDR>
    1188:	50 91 af 03 	lds	r21, 0x03AF	; 0x8003af <keypad_DDR+0x1>
    118c:	ea 01       	movw	r28, r20
    118e:	98 81       	ld	r25, Y
    1190:	90 68       	ori	r25, 0x80	; 128
    1192:	98 83       	st	Y, r25
				*keypad_PORT&=~(1<<KEYPADLINE_1);
    1194:	40 91 a0 03 	lds	r20, 0x03A0	; 0x8003a0 <keypad_PORT>
    1198:	50 91 a1 03 	lds	r21, 0x03A1	; 0x8003a1 <keypad_PORT+0x1>
    119c:	ea 01       	movw	r28, r20
    119e:	98 81       	ld	r25, Y
    11a0:	9f 77       	andi	r25, 0x7F	; 127
    11a2:	98 83       	st	Y, r25
				keypad_dataf.line_1=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    11a4:	40 91 ac 03 	lds	r20, 0x03AC	; 0x8003ac <keypad_PIN>
    11a8:	50 91 ad 03 	lds	r21, 0x03AD	; 0x8003ad <keypad_PIN+0x1>
    11ac:	ea 01       	movw	r28, r20
    11ae:	38 81       	ld	r19, Y
    11b0:	34 77       	andi	r19, 0x74	; 116
    11b2:	3c 93       	st	X, r19
				HL=KEYPADhl(keypad_datai.line_1,keypad_dataf.line_1);
    11b4:	90 81       	ld	r25, Z
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
    11b6:	43 2f       	mov	r20, r19
    11b8:	49 27       	eor	r20, r25
    11ba:	94 23       	and	r25, r20
			case 0: //line 1 index 0
				*keypad_DDR|=(1<<KEYPADLINE_1);
				*keypad_PORT&=~(1<<KEYPADLINE_1);
				keypad_dataf.line_1=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_1,keypad_dataf.line_1);
				keypad_datai.line_1=keypad_dataf.line_1;
    11bc:	30 83       	st	Z, r19
				if(HL){
    11be:	99 23       	and	r25, r25
    11c0:	99 f0       	breq	.+38     	; 0x11e8 <KEYPAD_getkey+0x96>
					//decode index line one column what ?
					if(HL == (1<<KEYPADDATA_1))
    11c2:	94 30       	cpi	r25, 0x04	; 4
    11c4:	19 f4       	brne	.+6      	; 0x11cc <KEYPAD_getkey+0x7a>
						c=keypadvalue[0][0];
    11c6:	eb 01       	movw	r28, r22
    11c8:	88 81       	ld	r24, Y
    11ca:	0a c0       	rjmp	.+20     	; 0x11e0 <KEYPAD_getkey+0x8e>
					if(HL == (1<<KEYPADDATA_2))
    11cc:	90 31       	cpi	r25, 0x10	; 16
    11ce:	19 f4       	brne	.+6      	; 0x11d6 <KEYPAD_getkey+0x84>
						c=keypadvalue[0][1];
    11d0:	eb 01       	movw	r28, r22
    11d2:	89 81       	ldd	r24, Y+1	; 0x01
    11d4:	09 c0       	rjmp	.+18     	; 0x11e8 <KEYPAD_getkey+0x96>
					if(HL == (1<<KEYPADDATA_3))
    11d6:	90 32       	cpi	r25, 0x20	; 32
    11d8:	19 f4       	brne	.+6      	; 0x11e0 <KEYPAD_getkey+0x8e>
						c=keypadvalue[0][2];
    11da:	eb 01       	movw	r28, r22
    11dc:	8a 81       	ldd	r24, Y+2	; 0x02
    11de:	04 c0       	rjmp	.+8      	; 0x11e8 <KEYPAD_getkey+0x96>
					if(HL == (1<<KEYPADDATA_4))
    11e0:	90 34       	cpi	r25, 0x40	; 64
    11e2:	11 f4       	brne	.+4      	; 0x11e8 <KEYPAD_getkey+0x96>
						c=keypadvalue[0][3];
    11e4:	eb 01       	movw	r28, r22
    11e6:	8b 81       	ldd	r24, Y+3	; 0x03
				}
				*keypad_DDR&=~(1<<KEYPADLINE_1);
    11e8:	40 91 ae 03 	lds	r20, 0x03AE	; 0x8003ae <keypad_DDR>
    11ec:	50 91 af 03 	lds	r21, 0x03AF	; 0x8003af <keypad_DDR+0x1>
    11f0:	ea 01       	movw	r28, r20
    11f2:	98 81       	ld	r25, Y
    11f4:	9f 77       	andi	r25, 0x7F	; 127
    11f6:	98 83       	st	Y, r25
				*keypad_PORT|=(1<<KEYPADLINE_1);
    11f8:	40 91 a0 03 	lds	r20, 0x03A0	; 0x8003a0 <keypad_PORT>
    11fc:	50 91 a1 03 	lds	r21, 0x03A1	; 0x8003a1 <keypad_PORT+0x1>
    1200:	ea 01       	movw	r28, r20
    1202:	98 81       	ld	r25, Y
    1204:	90 68       	ori	r25, 0x80	; 128
    1206:	98 83       	st	Y, r25
				break;
    1208:	af cf       	rjmp	.-162    	; 0x1168 <KEYPAD_getkey+0x16>
			case 1: //line 2 index 1
				*keypad_DDR|=(1<<KEYPADLINE_2);
    120a:	40 91 ae 03 	lds	r20, 0x03AE	; 0x8003ae <keypad_DDR>
    120e:	50 91 af 03 	lds	r21, 0x03AF	; 0x8003af <keypad_DDR+0x1>
    1212:	ea 01       	movw	r28, r20
    1214:	98 81       	ld	r25, Y
    1216:	91 60       	ori	r25, 0x01	; 1
    1218:	98 83       	st	Y, r25
				*keypad_PORT&=~(1<<KEYPADLINE_2);
    121a:	40 91 a0 03 	lds	r20, 0x03A0	; 0x8003a0 <keypad_PORT>
    121e:	50 91 a1 03 	lds	r21, 0x03A1	; 0x8003a1 <keypad_PORT+0x1>
    1222:	ea 01       	movw	r28, r20
    1224:	98 81       	ld	r25, Y
    1226:	9e 7f       	andi	r25, 0xFE	; 254
    1228:	98 83       	st	Y, r25
				keypad_dataf.line_2=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    122a:	40 91 ac 03 	lds	r20, 0x03AC	; 0x8003ac <keypad_PIN>
    122e:	50 91 ad 03 	lds	r21, 0x03AD	; 0x8003ad <keypad_PIN+0x1>
    1232:	ea 01       	movw	r28, r20
    1234:	38 81       	ld	r19, Y
    1236:	34 77       	andi	r19, 0x74	; 116
    1238:	11 96       	adiw	r26, 0x01	; 1
    123a:	3c 93       	st	X, r19
    123c:	11 97       	sbiw	r26, 0x01	; 1
				HL=KEYPADhl(keypad_datai.line_2,keypad_dataf.line_2);
    123e:	91 81       	ldd	r25, Z+1	; 0x01
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
    1240:	43 2f       	mov	r20, r19
    1242:	49 27       	eor	r20, r25
    1244:	94 23       	and	r25, r20
			case 1: //line 2 index 1
				*keypad_DDR|=(1<<KEYPADLINE_2);
				*keypad_PORT&=~(1<<KEYPADLINE_2);
				keypad_dataf.line_2=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_2,keypad_dataf.line_2);
				keypad_datai.line_2=keypad_dataf.line_2;
    1246:	31 83       	std	Z+1, r19	; 0x01
				if(HL){
    1248:	99 23       	and	r25, r25
    124a:	99 f0       	breq	.+38     	; 0x1272 <KEYPAD_getkey+0x120>
					//decode index line two column what ?
					if(HL == (1<<KEYPADDATA_1))
    124c:	94 30       	cpi	r25, 0x04	; 4
    124e:	19 f4       	brne	.+6      	; 0x1256 <KEYPAD_getkey+0x104>
						c=keypadvalue[1][0];
    1250:	eb 01       	movw	r28, r22
    1252:	8c 81       	ldd	r24, Y+4	; 0x04
    1254:	0a c0       	rjmp	.+20     	; 0x126a <KEYPAD_getkey+0x118>
					if(HL == (1<<KEYPADDATA_2))
    1256:	90 31       	cpi	r25, 0x10	; 16
    1258:	19 f4       	brne	.+6      	; 0x1260 <KEYPAD_getkey+0x10e>
						c=keypadvalue[1][1];
    125a:	eb 01       	movw	r28, r22
    125c:	8d 81       	ldd	r24, Y+5	; 0x05
    125e:	09 c0       	rjmp	.+18     	; 0x1272 <KEYPAD_getkey+0x120>
					if(HL == (1<<KEYPADDATA_3))
    1260:	90 32       	cpi	r25, 0x20	; 32
    1262:	19 f4       	brne	.+6      	; 0x126a <KEYPAD_getkey+0x118>
						c=keypadvalue[1][2];
    1264:	eb 01       	movw	r28, r22
    1266:	8e 81       	ldd	r24, Y+6	; 0x06
    1268:	04 c0       	rjmp	.+8      	; 0x1272 <KEYPAD_getkey+0x120>
					if(HL == (1<<KEYPADDATA_4))
    126a:	90 34       	cpi	r25, 0x40	; 64
    126c:	11 f4       	brne	.+4      	; 0x1272 <KEYPAD_getkey+0x120>
						c=keypadvalue[1][3];
    126e:	eb 01       	movw	r28, r22
    1270:	8f 81       	ldd	r24, Y+7	; 0x07
				}
				*keypad_DDR&=~(1<<KEYPADLINE_2);
    1272:	40 91 ae 03 	lds	r20, 0x03AE	; 0x8003ae <keypad_DDR>
    1276:	50 91 af 03 	lds	r21, 0x03AF	; 0x8003af <keypad_DDR+0x1>
    127a:	ea 01       	movw	r28, r20
    127c:	98 81       	ld	r25, Y
    127e:	9e 7f       	andi	r25, 0xFE	; 254
    1280:	98 83       	st	Y, r25
				*keypad_PORT|=(1<<KEYPADLINE_2);
    1282:	40 91 a0 03 	lds	r20, 0x03A0	; 0x8003a0 <keypad_PORT>
    1286:	50 91 a1 03 	lds	r21, 0x03A1	; 0x8003a1 <keypad_PORT+0x1>
    128a:	ea 01       	movw	r28, r20
    128c:	98 81       	ld	r25, Y
    128e:	91 60       	ori	r25, 0x01	; 1
    1290:	98 83       	st	Y, r25
				break;
    1292:	6a cf       	rjmp	.-300    	; 0x1168 <KEYPAD_getkey+0x16>
			case 2: //line 3 index 2
				*keypad_DDR|=(1<<KEYPADLINE_3);
    1294:	40 91 ae 03 	lds	r20, 0x03AE	; 0x8003ae <keypad_DDR>
    1298:	50 91 af 03 	lds	r21, 0x03AF	; 0x8003af <keypad_DDR+0x1>
    129c:	ea 01       	movw	r28, r20
    129e:	98 81       	ld	r25, Y
    12a0:	92 60       	ori	r25, 0x02	; 2
    12a2:	98 83       	st	Y, r25
				*keypad_PORT&=~(1<<KEYPADLINE_3);
    12a4:	40 91 a0 03 	lds	r20, 0x03A0	; 0x8003a0 <keypad_PORT>
    12a8:	50 91 a1 03 	lds	r21, 0x03A1	; 0x8003a1 <keypad_PORT+0x1>
    12ac:	ea 01       	movw	r28, r20
    12ae:	98 81       	ld	r25, Y
    12b0:	9d 7f       	andi	r25, 0xFD	; 253
    12b2:	98 83       	st	Y, r25
				keypad_dataf.line_3=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    12b4:	40 91 ac 03 	lds	r20, 0x03AC	; 0x8003ac <keypad_PIN>
    12b8:	50 91 ad 03 	lds	r21, 0x03AD	; 0x8003ad <keypad_PIN+0x1>
    12bc:	ea 01       	movw	r28, r20
    12be:	38 81       	ld	r19, Y
    12c0:	34 77       	andi	r19, 0x74	; 116
    12c2:	12 96       	adiw	r26, 0x02	; 2
    12c4:	3c 93       	st	X, r19
    12c6:	12 97       	sbiw	r26, 0x02	; 2
				HL=KEYPADhl(keypad_datai.line_3,keypad_dataf.line_3);
    12c8:	92 81       	ldd	r25, Z+2	; 0x02
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
    12ca:	43 2f       	mov	r20, r19
    12cc:	49 27       	eor	r20, r25
    12ce:	94 23       	and	r25, r20
			case 2: //line 3 index 2
				*keypad_DDR|=(1<<KEYPADLINE_3);
				*keypad_PORT&=~(1<<KEYPADLINE_3);
				keypad_dataf.line_3=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_3,keypad_dataf.line_3);
				keypad_datai.line_3=keypad_dataf.line_3;
    12d0:	32 83       	std	Z+2, r19	; 0x02
				if(HL){
    12d2:	99 23       	and	r25, r25
    12d4:	99 f0       	breq	.+38     	; 0x12fc <KEYPAD_getkey+0x1aa>
					//decode index line three column what ?
					if(HL == (1<<KEYPADDATA_1))
    12d6:	94 30       	cpi	r25, 0x04	; 4
    12d8:	19 f4       	brne	.+6      	; 0x12e0 <KEYPAD_getkey+0x18e>
						c=keypadvalue[2][0];
    12da:	eb 01       	movw	r28, r22
    12dc:	88 85       	ldd	r24, Y+8	; 0x08
    12de:	0a c0       	rjmp	.+20     	; 0x12f4 <KEYPAD_getkey+0x1a2>
					if(HL == (1<<KEYPADDATA_2))
    12e0:	90 31       	cpi	r25, 0x10	; 16
    12e2:	19 f4       	brne	.+6      	; 0x12ea <KEYPAD_getkey+0x198>
						c=keypadvalue[2][1];
    12e4:	eb 01       	movw	r28, r22
    12e6:	89 85       	ldd	r24, Y+9	; 0x09
    12e8:	09 c0       	rjmp	.+18     	; 0x12fc <KEYPAD_getkey+0x1aa>
					if(HL == (1<<KEYPADDATA_3))
    12ea:	90 32       	cpi	r25, 0x20	; 32
    12ec:	19 f4       	brne	.+6      	; 0x12f4 <KEYPAD_getkey+0x1a2>
						c=keypadvalue[2][2];
    12ee:	eb 01       	movw	r28, r22
    12f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    12f2:	04 c0       	rjmp	.+8      	; 0x12fc <KEYPAD_getkey+0x1aa>
					if(HL == (1<<KEYPADDATA_4))
    12f4:	90 34       	cpi	r25, 0x40	; 64
    12f6:	11 f4       	brne	.+4      	; 0x12fc <KEYPAD_getkey+0x1aa>
						c=keypadvalue[2][3];
    12f8:	eb 01       	movw	r28, r22
    12fa:	8b 85       	ldd	r24, Y+11	; 0x0b
				}
				*keypad_DDR&=~(1<<KEYPADLINE_3);
    12fc:	40 91 ae 03 	lds	r20, 0x03AE	; 0x8003ae <keypad_DDR>
    1300:	50 91 af 03 	lds	r21, 0x03AF	; 0x8003af <keypad_DDR+0x1>
    1304:	ea 01       	movw	r28, r20
    1306:	98 81       	ld	r25, Y
    1308:	9d 7f       	andi	r25, 0xFD	; 253
    130a:	98 83       	st	Y, r25
				*keypad_PORT|=(1<<KEYPADLINE_3);
    130c:	40 91 a0 03 	lds	r20, 0x03A0	; 0x8003a0 <keypad_PORT>
    1310:	50 91 a1 03 	lds	r21, 0x03A1	; 0x8003a1 <keypad_PORT+0x1>
    1314:	ea 01       	movw	r28, r20
    1316:	98 81       	ld	r25, Y
    1318:	92 60       	ori	r25, 0x02	; 2
    131a:	98 83       	st	Y, r25
				break;
    131c:	25 cf       	rjmp	.-438    	; 0x1168 <KEYPAD_getkey+0x16>
			case 3: //line 4 index 3
				*keypad_DDR|=(1<<KEYPADLINE_4);
    131e:	e0 91 ae 03 	lds	r30, 0x03AE	; 0x8003ae <keypad_DDR>
    1322:	f0 91 af 03 	lds	r31, 0x03AF	; 0x8003af <keypad_DDR+0x1>
    1326:	90 81       	ld	r25, Z
    1328:	98 60       	ori	r25, 0x08	; 8
    132a:	90 83       	st	Z, r25
				*keypad_PORT&=~(1<<KEYPADLINE_4);
    132c:	e0 91 a0 03 	lds	r30, 0x03A0	; 0x8003a0 <keypad_PORT>
    1330:	f0 91 a1 03 	lds	r31, 0x03A1	; 0x8003a1 <keypad_PORT+0x1>
    1334:	90 81       	ld	r25, Z
    1336:	97 7f       	andi	r25, 0xF7	; 247
    1338:	90 83       	st	Z, r25
				keypad_dataf.line_4=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    133a:	e0 91 ac 03 	lds	r30, 0x03AC	; 0x8003ac <keypad_PIN>
    133e:	f0 91 ad 03 	lds	r31, 0x03AD	; 0x8003ad <keypad_PIN+0x1>
    1342:	20 81       	ld	r18, Z
    1344:	24 77       	andi	r18, 0x74	; 116
    1346:	20 93 a6 03 	sts	0x03A6, r18	; 0x8003a6 <keypad_dataf+0x3>
				HL=KEYPADhl(keypad_datai.line_4,keypad_dataf.line_4);
    134a:	e7 ea       	ldi	r30, 0xA7	; 167
    134c:	f3 e0       	ldi	r31, 0x03	; 3
    134e:	93 81       	ldd	r25, Z+3	; 0x03
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
    1350:	32 2f       	mov	r19, r18
    1352:	39 27       	eor	r19, r25
    1354:	93 23       	and	r25, r19
			case 3: //line 4 index 3
				*keypad_DDR|=(1<<KEYPADLINE_4);
				*keypad_PORT&=~(1<<KEYPADLINE_4);
				keypad_dataf.line_4=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_4,keypad_dataf.line_4);
				keypad_datai.line_4=keypad_dataf.line_4;
    1356:	23 83       	std	Z+3, r18	; 0x03
				if(HL){
    1358:	99 23       	and	r25, r25
    135a:	99 f0       	breq	.+38     	; 0x1382 <KEYPAD_getkey+0x230>
					//decode index line four column what ?
					if(HL == (1<<KEYPADDATA_1))
    135c:	94 30       	cpi	r25, 0x04	; 4
    135e:	19 f4       	brne	.+6      	; 0x1366 <KEYPAD_getkey+0x214>
						c=keypadvalue[3][0];
    1360:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__DATA_REGION_ORIGIN__+0xc>
    1364:	0a c0       	rjmp	.+20     	; 0x137a <KEYPAD_getkey+0x228>
					if(HL == (1<<KEYPADDATA_2))
    1366:	90 31       	cpi	r25, 0x10	; 16
    1368:	19 f4       	brne	.+6      	; 0x1370 <KEYPAD_getkey+0x21e>
						c=keypadvalue[3][1];
    136a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <__DATA_REGION_ORIGIN__+0xd>
    136e:	09 c0       	rjmp	.+18     	; 0x1382 <KEYPAD_getkey+0x230>
					if(HL == (1<<KEYPADDATA_3))
    1370:	90 32       	cpi	r25, 0x20	; 32
    1372:	19 f4       	brne	.+6      	; 0x137a <KEYPAD_getkey+0x228>
						c=keypadvalue[3][2];
    1374:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__DATA_REGION_ORIGIN__+0xe>
    1378:	04 c0       	rjmp	.+8      	; 0x1382 <KEYPAD_getkey+0x230>
					if(HL == (1<<KEYPADDATA_4))
    137a:	90 34       	cpi	r25, 0x40	; 64
    137c:	11 f4       	brne	.+4      	; 0x1382 <KEYPAD_getkey+0x230>
						c=keypadvalue[3][3];
    137e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <__DATA_REGION_ORIGIN__+0xf>
				}
				*keypad_DDR&=~(1<<KEYPADLINE_4);
    1382:	e0 91 ae 03 	lds	r30, 0x03AE	; 0x8003ae <keypad_DDR>
    1386:	f0 91 af 03 	lds	r31, 0x03AF	; 0x8003af <keypad_DDR+0x1>
    138a:	90 81       	ld	r25, Z
    138c:	97 7f       	andi	r25, 0xF7	; 247
    138e:	90 83       	st	Z, r25
				*keypad_PORT|=(1<<KEYPADLINE_4);
    1390:	e0 91 a0 03 	lds	r30, 0x03A0	; 0x8003a0 <keypad_PORT>
    1394:	f0 91 a1 03 	lds	r31, 0x03A1	; 0x8003a1 <keypad_PORT+0x1>
    1398:	90 81       	ld	r25, Z
    139a:	98 60       	ori	r25, 0x08	; 8
    139c:	90 83       	st	Z, r25
    139e:	03 c0       	rjmp	.+6      	; 0x13a6 <KEYPAD_getkey+0x254>
char KEYPAD_getkey(void)
{
	uint8_t HL;
	char c='\0';
	uint8_t keypad_option;
	for(keypad_option=0;keypad_option<KEYPADLINES;keypad_option++){
    13a0:	24 30       	cpi	r18, 0x04	; 4
    13a2:	08 f4       	brcc	.+2      	; 0x13a6 <KEYPAD_getkey+0x254>
    13a4:	e1 ce       	rjmp	.-574    	; 0x1168 <KEYPAD_getkey+0x16>
			default:
				break;
		}
	}
	return c;
}
    13a6:	df 91       	pop	r29
    13a8:	cf 91       	pop	r28
    13aa:	08 95       	ret

000013ac <KEYPAD_read>:
/***read***/
struct keypadata KEYPAD_read(void)
{
    13ac:	cf 93       	push	r28
    13ae:	df 93       	push	r29
    13b0:	00 d0       	rcall	.+0      	; 0x13b2 <KEYPAD_read+0x6>
    13b2:	00 d0       	rcall	.+0      	; 0x13b4 <KEYPAD_read+0x8>
    13b4:	1f 92       	push	r1
    13b6:	cd b7       	in	r28, 0x3d	; 61
    13b8:	de b7       	in	r29, 0x3e	; 62
	char c;
	c=KEYPAD_getkey(); //returns null all the time when no entry
    13ba:	cb de       	rcall	.-618    	; 0x1152 <KEYPAD_getkey>
	if(c){
    13bc:	88 23       	and	r24, r24
    13be:	b1 f1       	breq	.+108    	; 0x142c <KEYPAD_read+0x80>
		data.character=c;
    13c0:	80 93 de 03 	sts	0x03DE, r24	; 0x8003de <data>
		if(KEYPADSTRINGINDEX<(KEYPADSTRINGSIZE)){
    13c4:	90 91 ab 03 	lds	r25, 0x03AB	; 0x8003ab <KEYPADSTRINGINDEX>
    13c8:	94 31       	cpi	r25, 0x14	; 20
    13ca:	88 f4       	brcc	.+34     	; 0x13ee <KEYPAD_read+0x42>
			KEYPAD_string[KEYPADSTRINGINDEX]=c;
    13cc:	e0 91 ab 03 	lds	r30, 0x03AB	; 0x8003ab <KEYPADSTRINGINDEX>
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	e0 55       	subi	r30, 0x50	; 80
    13d4:	fc 4f       	sbci	r31, 0xFC	; 252
    13d6:	80 83       	st	Z, r24
			KEYPADSTRINGINDEX++;
    13d8:	90 91 ab 03 	lds	r25, 0x03AB	; 0x8003ab <KEYPADSTRINGINDEX>
    13dc:	9f 5f       	subi	r25, 0xFF	; 255
    13de:	90 93 ab 03 	sts	0x03AB, r25	; 0x8003ab <KEYPADSTRINGINDEX>
			KEYPAD_string[KEYPADSTRINGINDEX]='\0';
    13e2:	e0 91 ab 03 	lds	r30, 0x03AB	; 0x8003ab <KEYPADSTRINGINDEX>
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	e0 55       	subi	r30, 0x50	; 80
    13ea:	fc 4f       	sbci	r31, 0xFC	; 252
    13ec:	10 82       	st	Z, r1
		}
		if(c==KEYPADENTERKEY){
    13ee:	84 34       	cpi	r24, 0x44	; 68
    13f0:	99 f4       	brne	.+38     	; 0x1418 <KEYPAD_read+0x6c>
			KEYPAD_string[KEYPADSTRINGINDEX-1]='\0';
    13f2:	e0 91 ab 03 	lds	r30, 0x03AB	; 0x8003ab <KEYPADSTRINGINDEX>
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	e1 55       	subi	r30, 0x51	; 81
    13fa:	fc 4f       	sbci	r31, 0xFC	; 252
    13fc:	10 82       	st	Z, r1
			KEYPADSTRINGINDEX=0;
    13fe:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <KEYPADSTRINGINDEX>
			data.printstring="\0";
    1402:	ee ed       	ldi	r30, 0xDE	; 222
    1404:	f3 e0       	ldi	r31, 0x03	; 3
    1406:	80 e1       	ldi	r24, 0x10	; 16
    1408:	91 e0       	ldi	r25, 0x01	; 1
    140a:	92 83       	std	Z+2, r25	; 0x02
    140c:	81 83       	std	Z+1, r24	; 0x01
			data.string=KEYPAD_string; // shift output
    140e:	80 eb       	ldi	r24, 0xB0	; 176
    1410:	93 e0       	ldi	r25, 0x03	; 3
    1412:	94 83       	std	Z+4, r25	; 0x04
    1414:	83 83       	std	Z+3, r24	; 0x03
    1416:	0a c0       	rjmp	.+20     	; 0x142c <KEYPAD_read+0x80>
		}else{
			data.printstring=KEYPAD_string;
    1418:	ee ed       	ldi	r30, 0xDE	; 222
    141a:	f3 e0       	ldi	r31, 0x03	; 3
    141c:	80 eb       	ldi	r24, 0xB0	; 176
    141e:	93 e0       	ldi	r25, 0x03	; 3
    1420:	92 83       	std	Z+2, r25	; 0x02
    1422:	81 83       	std	Z+1, r24	; 0x01
			data.string="\0"; // clear output
    1424:	80 e1       	ldi	r24, 0x10	; 16
    1426:	91 e0       	ldi	r25, 0x01	; 1
    1428:	94 83       	std	Z+4, r25	; 0x04
    142a:	83 83       	std	Z+3, r24	; 0x03
		}
	}
	return data;
    142c:	85 e0       	ldi	r24, 0x05	; 5
    142e:	ee ed       	ldi	r30, 0xDE	; 222
    1430:	f3 e0       	ldi	r31, 0x03	; 3
    1432:	de 01       	movw	r26, r28
    1434:	11 96       	adiw	r26, 0x01	; 1
    1436:	01 90       	ld	r0, Z+
    1438:	0d 92       	st	X+, r0
    143a:	8a 95       	dec	r24
    143c:	e1 f7       	brne	.-8      	; 0x1436 <KEYPAD_read+0x8a>
    143e:	29 81       	ldd	r18, Y+1	; 0x01
    1440:	3a 81       	ldd	r19, Y+2	; 0x02
    1442:	4b 81       	ldd	r20, Y+3	; 0x03
    1444:	5c 81       	ldd	r21, Y+4	; 0x04
    1446:	6d 81       	ldd	r22, Y+5	; 0x05
}
    1448:	70 e0       	ldi	r23, 0x00	; 0
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	0f 90       	pop	r0
    1450:	0f 90       	pop	r0
    1452:	0f 90       	pop	r0
    1454:	0f 90       	pop	r0
    1456:	0f 90       	pop	r0
    1458:	df 91       	pop	r29
    145a:	cf 91       	pop	r28
    145c:	08 95       	ret

0000145e <KEYPADenable>:
uint8_t KEYPADlh(uint8_t xi, uint8_t xf);
/***hl***/
uint8_t KEYPADhl(uint8_t xi, uint8_t xf);
/***Procedure & Function***/
KEYPAD KEYPADenable(volatile uint8_t *ddr, volatile uint8_t *pin, volatile uint8_t *port)
{
    145e:	cf 93       	push	r28
    1460:	df 93       	push	r29
    1462:	cd b7       	in	r28, 0x3d	; 61
    1464:	de b7       	in	r29, 0x3e	; 62
    1466:	28 97       	sbiw	r28, 0x08	; 8
    1468:	0f b6       	in	r0, 0x3f	; 63
    146a:	f8 94       	cli
    146c:	de bf       	out	0x3e, r29	; 62
    146e:	0f be       	out	0x3f, r0	; 63
    1470:	cd bf       	out	0x3d, r28	; 61
	//LOCAL VARIABLE
	uint8_t tSREG;
	tSREG=SREG;
    1472:	2f b7       	in	r18, 0x3f	; 63
	data.character=' ';
    1474:	30 e2       	ldi	r19, 0x20	; 32
    1476:	30 93 de 03 	sts	0x03DE, r19	; 0x8003de <data>
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	KEYPAD keypad;
	//import parametros
	keypad_DDR=ddr;
    147a:	90 93 af 03 	sts	0x03AF, r25	; 0x8003af <keypad_DDR+0x1>
    147e:	80 93 ae 03 	sts	0x03AE, r24	; 0x8003ae <keypad_DDR>
	keypad_PIN=pin;
    1482:	70 93 ad 03 	sts	0x03AD, r23	; 0x8003ad <keypad_PIN+0x1>
    1486:	60 93 ac 03 	sts	0x03AC, r22	; 0x8003ac <keypad_PIN>
	keypad_PORT=port;
    148a:	50 93 a1 03 	sts	0x03A1, r21	; 0x8003a1 <keypad_PORT+0x1>
    148e:	40 93 a0 03 	sts	0x03A0, r20	; 0x8003a0 <keypad_PORT>
	//inic variables
	*keypad_DDR=(1<<KEYPADLINE_1) | (1<<KEYPADLINE_2) | (1<<KEYPADLINE_3) | (1<<KEYPADLINE_4);
    1492:	3b e8       	ldi	r19, 0x8B	; 139
    1494:	fc 01       	movw	r30, r24
    1496:	30 83       	st	Z, r19
	*keypad_PORT=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    1498:	e0 91 a0 03 	lds	r30, 0x03A0	; 0x8003a0 <keypad_PORT>
    149c:	f0 91 a1 03 	lds	r31, 0x03A1	; 0x8003a1 <keypad_PORT+0x1>
    14a0:	84 e7       	ldi	r24, 0x74	; 116
    14a2:	80 83       	st	Z, r24
	keypad_datai.line_1=keypad_dataf.line_1=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    14a4:	a3 ea       	ldi	r26, 0xA3	; 163
    14a6:	b3 e0       	ldi	r27, 0x03	; 3
    14a8:	8c 93       	st	X, r24
    14aa:	e7 ea       	ldi	r30, 0xA7	; 167
    14ac:	f3 e0       	ldi	r31, 0x03	; 3
    14ae:	80 83       	st	Z, r24
	keypad_datai.line_2=keypad_dataf.line_2=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    14b0:	11 96       	adiw	r26, 0x01	; 1
    14b2:	8c 93       	st	X, r24
    14b4:	11 97       	sbiw	r26, 0x01	; 1
    14b6:	81 83       	std	Z+1, r24	; 0x01
	keypad_datai.line_3=keypad_dataf.line_3=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    14b8:	12 96       	adiw	r26, 0x02	; 2
    14ba:	8c 93       	st	X, r24
    14bc:	12 97       	sbiw	r26, 0x02	; 2
    14be:	82 83       	std	Z+2, r24	; 0x02
	keypad_datai.line_4=keypad_dataf.line_4=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    14c0:	13 96       	adiw	r26, 0x03	; 3
    14c2:	8c 93       	st	X, r24
    14c4:	83 83       	std	Z+3, r24	; 0x03
	KEYPADSTRINGINDEX=0;
    14c6:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <KEYPADSTRINGINDEX>
	//Vtable
	keypad.getkey=KEYPAD_getkey;
	keypad.read=KEYPAD_read;
	keypad.get=KEYPAD_get;
	keypad.flush=KEYPAD_flush;
	SREG=tSREG;
    14ca:	2f bf       	out	0x3f, r18	; 63
	//
	*keypad_PORT|=(1<<KEYPADLINE_1) | (1<<KEYPADLINE_2) | (1<<KEYPADLINE_3) | (1<<KEYPADLINE_4);
    14cc:	e0 91 a0 03 	lds	r30, 0x03A0	; 0x8003a0 <keypad_PORT>
    14d0:	f0 91 a1 03 	lds	r31, 0x03A1	; 0x8003a1 <keypad_PORT+0x1>
    14d4:	80 81       	ld	r24, Z
    14d6:	8b 68       	ori	r24, 0x8B	; 139
    14d8:	80 83       	st	Z, r24
	//Going to use pull down method.
	return keypad;
    14da:	29 ea       	ldi	r18, 0xA9	; 169
    14dc:	38 e0       	ldi	r19, 0x08	; 8
    14de:	3a 83       	std	Y+2, r19	; 0x02
    14e0:	29 83       	std	Y+1, r18	; 0x01
    14e2:	46 ed       	ldi	r20, 0xD6	; 214
    14e4:	59 e0       	ldi	r21, 0x09	; 9
    14e6:	5c 83       	std	Y+4, r21	; 0x04
    14e8:	4b 83       	std	Y+3, r20	; 0x03
    14ea:	6c e7       	ldi	r22, 0x7C	; 124
    14ec:	78 e0       	ldi	r23, 0x08	; 8
    14ee:	7e 83       	std	Y+6, r23	; 0x06
    14f0:	6d 83       	std	Y+5, r22	; 0x05
    14f2:	8c e9       	ldi	r24, 0x9C	; 156
    14f4:	98 e0       	ldi	r25, 0x08	; 8
    14f6:	98 87       	std	Y+8, r25	; 0x08
    14f8:	8f 83       	std	Y+7, r24	; 0x07
    14fa:	3a 81       	ldd	r19, Y+2	; 0x02
    14fc:	5c 81       	ldd	r21, Y+4	; 0x04
    14fe:	7e 81       	ldd	r23, Y+6	; 0x06
}
    1500:	98 85       	ldd	r25, Y+8	; 0x08
    1502:	28 96       	adiw	r28, 0x08	; 8
    1504:	0f b6       	in	r0, 0x3f	; 63
    1506:	f8 94       	cli
    1508:	de bf       	out	0x3e, r29	; 62
    150a:	0f be       	out	0x3f, r0	; 63
    150c:	cd bf       	out	0x3d, r28	; 61
    150e:	df 91       	pop	r29
    1510:	cf 91       	pop	r28
    1512:	08 95       	ret

00001514 <LCD0_write>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1514:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <lcd0_PORT>
    1518:	f0 91 d0 03 	lds	r31, 0x03D0	; 0x8003d0 <lcd0_PORT+0x1>
    151c:	90 81       	ld	r25, Z
    151e:	9d 7f       	andi	r25, 0xFD	; 253
    1520:	90 83       	st	Z, r25
    1522:	67 2b       	or	r22, r23
    1524:	41 f0       	breq	.+16     	; 0x1536 <LCD0_write+0x22>
    1526:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <lcd0_PORT>
    152a:	f0 91 d0 03 	lds	r31, 0x03D0	; 0x8003d0 <lcd0_PORT+0x1>
    152e:	90 81       	ld	r25, Z
    1530:	91 60       	ori	r25, 0x01	; 1
    1532:	90 83       	st	Z, r25
    1534:	07 c0       	rjmp	.+14     	; 0x1544 <LCD0_write+0x30>
    1536:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <lcd0_PORT>
    153a:	f0 91 d0 03 	lds	r31, 0x03D0	; 0x8003d0 <lcd0_PORT+0x1>
    153e:	90 81       	ld	r25, Z
    1540:	9e 7f       	andi	r25, 0xFE	; 254
    1542:	90 83       	st	Z, r25
    1544:	e0 91 cc 03 	lds	r30, 0x03CC	; 0x8003cc <lcd0_DDR>
    1548:	f0 91 cd 03 	lds	r31, 0x03CD	; 0x8003cd <lcd0_DDR+0x1>
    154c:	90 81       	ld	r25, Z
    154e:	90 6f       	ori	r25, 0xF0	; 240
    1550:	90 83       	st	Z, r25
    1552:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <lcd0_PORT>
    1556:	f0 91 d0 03 	lds	r31, 0x03D0	; 0x8003d0 <lcd0_PORT+0x1>
    155a:	90 81       	ld	r25, Z
    155c:	94 60       	ori	r25, 0x04	; 4
    155e:	90 83       	st	Z, r25
    1560:	88 23       	and	r24, r24
    1562:	44 f4       	brge	.+16     	; 0x1574 <LCD0_write+0x60>
    1564:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <lcd0_PORT>
    1568:	f0 91 d0 03 	lds	r31, 0x03D0	; 0x8003d0 <lcd0_PORT+0x1>
    156c:	90 81       	ld	r25, Z
    156e:	90 68       	ori	r25, 0x80	; 128
    1570:	90 83       	st	Z, r25
    1572:	07 c0       	rjmp	.+14     	; 0x1582 <LCD0_write+0x6e>
    1574:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <lcd0_PORT>
    1578:	f0 91 d0 03 	lds	r31, 0x03D0	; 0x8003d0 <lcd0_PORT+0x1>
    157c:	90 81       	ld	r25, Z
    157e:	9f 77       	andi	r25, 0x7F	; 127
    1580:	90 83       	st	Z, r25
    1582:	86 ff       	sbrs	r24, 6
    1584:	08 c0       	rjmp	.+16     	; 0x1596 <LCD0_write+0x82>
    1586:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <lcd0_PORT>
    158a:	f0 91 d0 03 	lds	r31, 0x03D0	; 0x8003d0 <lcd0_PORT+0x1>
    158e:	90 81       	ld	r25, Z
    1590:	90 64       	ori	r25, 0x40	; 64
    1592:	90 83       	st	Z, r25
    1594:	07 c0       	rjmp	.+14     	; 0x15a4 <LCD0_write+0x90>
    1596:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <lcd0_PORT>
    159a:	f0 91 d0 03 	lds	r31, 0x03D0	; 0x8003d0 <lcd0_PORT+0x1>
    159e:	90 81       	ld	r25, Z
    15a0:	9f 7b       	andi	r25, 0xBF	; 191
    15a2:	90 83       	st	Z, r25
    15a4:	85 ff       	sbrs	r24, 5
    15a6:	08 c0       	rjmp	.+16     	; 0x15b8 <LCD0_write+0xa4>
    15a8:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <lcd0_PORT>
    15ac:	f0 91 d0 03 	lds	r31, 0x03D0	; 0x8003d0 <lcd0_PORT+0x1>
    15b0:	90 81       	ld	r25, Z
    15b2:	90 62       	ori	r25, 0x20	; 32
    15b4:	90 83       	st	Z, r25
    15b6:	07 c0       	rjmp	.+14     	; 0x15c6 <LCD0_write+0xb2>
    15b8:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <lcd0_PORT>
    15bc:	f0 91 d0 03 	lds	r31, 0x03D0	; 0x8003d0 <lcd0_PORT+0x1>
    15c0:	90 81       	ld	r25, Z
    15c2:	9f 7d       	andi	r25, 0xDF	; 223
    15c4:	90 83       	st	Z, r25
    15c6:	84 ff       	sbrs	r24, 4
    15c8:	08 c0       	rjmp	.+16     	; 0x15da <LCD0_write+0xc6>
    15ca:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <lcd0_PORT>
    15ce:	f0 91 d0 03 	lds	r31, 0x03D0	; 0x8003d0 <lcd0_PORT+0x1>
    15d2:	90 81       	ld	r25, Z
    15d4:	90 61       	ori	r25, 0x10	; 16
    15d6:	90 83       	st	Z, r25
    15d8:	07 c0       	rjmp	.+14     	; 0x15e8 <LCD0_write+0xd4>
    15da:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <lcd0_PORT>
    15de:	f0 91 d0 03 	lds	r31, 0x03D0	; 0x8003d0 <lcd0_PORT+0x1>
    15e2:	90 81       	ld	r25, Z
    15e4:	9f 7e       	andi	r25, 0xEF	; 239
    15e6:	90 83       	st	Z, r25
    15e8:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <lcd0_PORT>
    15ec:	f0 91 d0 03 	lds	r31, 0x03D0	; 0x8003d0 <lcd0_PORT+0x1>
    15f0:	90 81       	ld	r25, Z
    15f2:	9b 7f       	andi	r25, 0xFB	; 251
    15f4:	90 83       	st	Z, r25
    15f6:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <lcd0_PORT>
    15fa:	f0 91 d0 03 	lds	r31, 0x03D0	; 0x8003d0 <lcd0_PORT+0x1>
    15fe:	90 81       	ld	r25, Z
    1600:	94 60       	ori	r25, 0x04	; 4
    1602:	90 83       	st	Z, r25
    1604:	83 ff       	sbrs	r24, 3
    1606:	08 c0       	rjmp	.+16     	; 0x1618 <LCD0_write+0x104>
    1608:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <lcd0_PORT>
    160c:	f0 91 d0 03 	lds	r31, 0x03D0	; 0x8003d0 <lcd0_PORT+0x1>
    1610:	90 81       	ld	r25, Z
    1612:	90 68       	ori	r25, 0x80	; 128
    1614:	90 83       	st	Z, r25
    1616:	07 c0       	rjmp	.+14     	; 0x1626 <LCD0_write+0x112>
    1618:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <lcd0_PORT>
    161c:	f0 91 d0 03 	lds	r31, 0x03D0	; 0x8003d0 <lcd0_PORT+0x1>
    1620:	90 81       	ld	r25, Z
    1622:	9f 77       	andi	r25, 0x7F	; 127
    1624:	90 83       	st	Z, r25
    1626:	82 ff       	sbrs	r24, 2
    1628:	08 c0       	rjmp	.+16     	; 0x163a <LCD0_write+0x126>
    162a:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <lcd0_PORT>
    162e:	f0 91 d0 03 	lds	r31, 0x03D0	; 0x8003d0 <lcd0_PORT+0x1>
    1632:	90 81       	ld	r25, Z
    1634:	90 64       	ori	r25, 0x40	; 64
    1636:	90 83       	st	Z, r25
    1638:	07 c0       	rjmp	.+14     	; 0x1648 <LCD0_write+0x134>
    163a:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <lcd0_PORT>
    163e:	f0 91 d0 03 	lds	r31, 0x03D0	; 0x8003d0 <lcd0_PORT+0x1>
    1642:	90 81       	ld	r25, Z
    1644:	9f 7b       	andi	r25, 0xBF	; 191
    1646:	90 83       	st	Z, r25
    1648:	81 ff       	sbrs	r24, 1
    164a:	08 c0       	rjmp	.+16     	; 0x165c <LCD0_write+0x148>
    164c:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <lcd0_PORT>
    1650:	f0 91 d0 03 	lds	r31, 0x03D0	; 0x8003d0 <lcd0_PORT+0x1>
    1654:	90 81       	ld	r25, Z
    1656:	90 62       	ori	r25, 0x20	; 32
    1658:	90 83       	st	Z, r25
    165a:	07 c0       	rjmp	.+14     	; 0x166a <LCD0_write+0x156>
    165c:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <lcd0_PORT>
    1660:	f0 91 d0 03 	lds	r31, 0x03D0	; 0x8003d0 <lcd0_PORT+0x1>
    1664:	90 81       	ld	r25, Z
    1666:	9f 7d       	andi	r25, 0xDF	; 223
    1668:	90 83       	st	Z, r25
    166a:	80 ff       	sbrs	r24, 0
    166c:	08 c0       	rjmp	.+16     	; 0x167e <LCD0_write+0x16a>
    166e:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <lcd0_PORT>
    1672:	f0 91 d0 03 	lds	r31, 0x03D0	; 0x8003d0 <lcd0_PORT+0x1>
    1676:	80 81       	ld	r24, Z
    1678:	80 61       	ori	r24, 0x10	; 16
    167a:	80 83       	st	Z, r24
    167c:	07 c0       	rjmp	.+14     	; 0x168c <LCD0_write+0x178>
    167e:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <lcd0_PORT>
    1682:	f0 91 d0 03 	lds	r31, 0x03D0	; 0x8003d0 <lcd0_PORT+0x1>
    1686:	80 81       	ld	r24, Z
    1688:	8f 7e       	andi	r24, 0xEF	; 239
    168a:	80 83       	st	Z, r24
    168c:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <lcd0_PORT>
    1690:	f0 91 d0 03 	lds	r31, 0x03D0	; 0x8003d0 <lcd0_PORT+0x1>
    1694:	80 81       	ld	r24, Z
    1696:	8b 7f       	andi	r24, 0xFB	; 251
    1698:	80 83       	st	Z, r24
    169a:	08 95       	ret

0000169c <LCD0_read>:
    169c:	e0 91 cc 03 	lds	r30, 0x03CC	; 0x8003cc <lcd0_DDR>
    16a0:	f0 91 cd 03 	lds	r31, 0x03CD	; 0x8003cd <lcd0_DDR+0x1>
    16a4:	20 81       	ld	r18, Z
    16a6:	2f 70       	andi	r18, 0x0F	; 15
    16a8:	20 83       	st	Z, r18
    16aa:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <lcd0_PORT>
    16ae:	f0 91 d0 03 	lds	r31, 0x03D0	; 0x8003d0 <lcd0_PORT+0x1>
    16b2:	20 81       	ld	r18, Z
    16b4:	20 6f       	ori	r18, 0xF0	; 240
    16b6:	20 83       	st	Z, r18
    16b8:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <lcd0_PORT>
    16bc:	f0 91 d0 03 	lds	r31, 0x03D0	; 0x8003d0 <lcd0_PORT+0x1>
    16c0:	20 81       	ld	r18, Z
    16c2:	22 60       	ori	r18, 0x02	; 2
    16c4:	20 83       	st	Z, r18
    16c6:	89 2b       	or	r24, r25
    16c8:	41 f0       	breq	.+16     	; 0x16da <LCD0_read+0x3e>
    16ca:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <lcd0_PORT>
    16ce:	f0 91 d0 03 	lds	r31, 0x03D0	; 0x8003d0 <lcd0_PORT+0x1>
    16d2:	80 81       	ld	r24, Z
    16d4:	81 60       	ori	r24, 0x01	; 1
    16d6:	80 83       	st	Z, r24
    16d8:	07 c0       	rjmp	.+14     	; 0x16e8 <LCD0_read+0x4c>
    16da:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <lcd0_PORT>
    16de:	f0 91 d0 03 	lds	r31, 0x03D0	; 0x8003d0 <lcd0_PORT+0x1>
    16e2:	80 81       	ld	r24, Z
    16e4:	8e 7f       	andi	r24, 0xFE	; 254
    16e6:	80 83       	st	Z, r24
    16e8:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <lcd0_PORT>
    16ec:	f0 91 d0 03 	lds	r31, 0x03D0	; 0x8003d0 <lcd0_PORT+0x1>
    16f0:	80 81       	ld	r24, Z
    16f2:	84 60       	ori	r24, 0x04	; 4
    16f4:	80 83       	st	Z, r24
    16f6:	e0 91 c5 03 	lds	r30, 0x03C5	; 0x8003c5 <lcd0_PIN>
    16fa:	f0 91 c6 03 	lds	r31, 0x03C6	; 0x8003c6 <lcd0_PIN+0x1>
    16fe:	80 81       	ld	r24, Z
    1700:	88 23       	and	r24, r24
    1702:	14 f0       	brlt	.+4      	; 0x1708 <LCD0_read+0x6c>
    1704:	80 e0       	ldi	r24, 0x00	; 0
    1706:	01 c0       	rjmp	.+2      	; 0x170a <LCD0_read+0x6e>
    1708:	80 e8       	ldi	r24, 0x80	; 128
    170a:	90 81       	ld	r25, Z
    170c:	96 ff       	sbrs	r25, 6
    170e:	02 c0       	rjmp	.+4      	; 0x1714 <LCD0_read+0x78>
    1710:	80 64       	ori	r24, 0x40	; 64
    1712:	01 c0       	rjmp	.+2      	; 0x1716 <LCD0_read+0x7a>
    1714:	8f 7b       	andi	r24, 0xBF	; 191
    1716:	90 81       	ld	r25, Z
    1718:	95 ff       	sbrs	r25, 5
    171a:	02 c0       	rjmp	.+4      	; 0x1720 <LCD0_read+0x84>
    171c:	80 62       	ori	r24, 0x20	; 32
    171e:	01 c0       	rjmp	.+2      	; 0x1722 <LCD0_read+0x86>
    1720:	8f 7d       	andi	r24, 0xDF	; 223
    1722:	90 81       	ld	r25, Z
    1724:	94 ff       	sbrs	r25, 4
    1726:	02 c0       	rjmp	.+4      	; 0x172c <LCD0_read+0x90>
    1728:	80 61       	ori	r24, 0x10	; 16
    172a:	01 c0       	rjmp	.+2      	; 0x172e <LCD0_read+0x92>
    172c:	8f 7e       	andi	r24, 0xEF	; 239
    172e:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <lcd0_PORT>
    1732:	f0 91 d0 03 	lds	r31, 0x03D0	; 0x8003d0 <lcd0_PORT+0x1>
    1736:	90 81       	ld	r25, Z
    1738:	9b 7f       	andi	r25, 0xFB	; 251
    173a:	90 83       	st	Z, r25
    173c:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <lcd0_PORT>
    1740:	f0 91 d0 03 	lds	r31, 0x03D0	; 0x8003d0 <lcd0_PORT+0x1>
    1744:	90 81       	ld	r25, Z
    1746:	94 60       	ori	r25, 0x04	; 4
    1748:	90 83       	st	Z, r25
    174a:	e0 91 c5 03 	lds	r30, 0x03C5	; 0x8003c5 <lcd0_PIN>
    174e:	f0 91 c6 03 	lds	r31, 0x03C6	; 0x8003c6 <lcd0_PIN+0x1>
    1752:	90 81       	ld	r25, Z
    1754:	99 23       	and	r25, r25
    1756:	14 f4       	brge	.+4      	; 0x175c <LCD0_read+0xc0>
    1758:	88 60       	ori	r24, 0x08	; 8
    175a:	01 c0       	rjmp	.+2      	; 0x175e <LCD0_read+0xc2>
    175c:	87 7f       	andi	r24, 0xF7	; 247
    175e:	90 81       	ld	r25, Z
    1760:	96 ff       	sbrs	r25, 6
    1762:	02 c0       	rjmp	.+4      	; 0x1768 <LCD0_read+0xcc>
    1764:	84 60       	ori	r24, 0x04	; 4
    1766:	01 c0       	rjmp	.+2      	; 0x176a <LCD0_read+0xce>
    1768:	8b 7f       	andi	r24, 0xFB	; 251
    176a:	90 81       	ld	r25, Z
    176c:	95 ff       	sbrs	r25, 5
    176e:	02 c0       	rjmp	.+4      	; 0x1774 <LCD0_read+0xd8>
    1770:	82 60       	ori	r24, 0x02	; 2
    1772:	01 c0       	rjmp	.+2      	; 0x1776 <LCD0_read+0xda>
    1774:	8d 7f       	andi	r24, 0xFD	; 253
    1776:	90 81       	ld	r25, Z
    1778:	94 ff       	sbrs	r25, 4
    177a:	02 c0       	rjmp	.+4      	; 0x1780 <LCD0_read+0xe4>
    177c:	81 60       	ori	r24, 0x01	; 1
    177e:	01 c0       	rjmp	.+2      	; 0x1782 <LCD0_read+0xe6>
    1780:	8e 7f       	andi	r24, 0xFE	; 254
    1782:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <lcd0_PORT>
    1786:	f0 91 d0 03 	lds	r31, 0x03D0	; 0x8003d0 <lcd0_PORT+0x1>
    178a:	90 81       	ld	r25, Z
    178c:	9b 7f       	andi	r25, 0xFB	; 251
    178e:	90 83       	st	Z, r25
    1790:	08 95       	ret

00001792 <LCD0_BF>:
    1792:	cf 93       	push	r28
    1794:	df 93       	push	r29
    1796:	80 e0       	ldi	r24, 0x00	; 0
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	80 df       	rcall	.-256    	; 0x169c <LCD0_read>
    179c:	cb e0       	ldi	r28, 0x0B	; 11
    179e:	d0 e0       	ldi	r29, 0x00	; 0
    17a0:	05 c0       	rjmp	.+10     	; 0x17ac <LCD0_BF+0x1a>
    17a2:	80 e0       	ldi	r24, 0x00	; 0
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	7a df       	rcall	.-268    	; 0x169c <LCD0_read>
    17a8:	21 97       	sbiw	r28, 0x01	; 1
    17aa:	11 f0       	breq	.+4      	; 0x17b0 <LCD0_BF+0x1e>
    17ac:	88 23       	and	r24, r24
    17ae:	cc f3       	brlt	.-14     	; 0x17a2 <LCD0_BF+0x10>
    17b0:	df 91       	pop	r29
    17b2:	cf 91       	pop	r28
    17b4:	08 95       	ret

000017b6 <LCD0_putch>:
    17b6:	61 e0       	ldi	r22, 0x01	; 1
    17b8:	70 e0       	ldi	r23, 0x00	; 0
    17ba:	ac de       	rcall	.-680    	; 0x1514 <LCD0_write>
    17bc:	ea cf       	rjmp	.-44     	; 0x1792 <LCD0_BF>
    17be:	08 95       	ret

000017c0 <LCD0_getch>:
    17c0:	cf 93       	push	r28
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	6a df       	rcall	.-300    	; 0x169c <LCD0_read>
    17c8:	c8 2f       	mov	r28, r24
    17ca:	e3 df       	rcall	.-58     	; 0x1792 <LCD0_BF>
    17cc:	8c 2f       	mov	r24, r28
    17ce:	cf 91       	pop	r28
    17d0:	08 95       	ret

000017d2 <LCD0_string>:
    17d2:	cf 93       	push	r28
    17d4:	df 93       	push	r29
    17d6:	ec 01       	movw	r28, r24
    17d8:	88 81       	ld	r24, Y
    17da:	88 23       	and	r24, r24
    17dc:	41 f0       	breq	.+16     	; 0x17ee <LCD0_string+0x1c>
    17de:	21 96       	adiw	r28, 0x01	; 1
    17e0:	61 e0       	ldi	r22, 0x01	; 1
    17e2:	70 e0       	ldi	r23, 0x00	; 0
    17e4:	97 de       	rcall	.-722    	; 0x1514 <LCD0_write>
    17e6:	d5 df       	rcall	.-86     	; 0x1792 <LCD0_BF>
    17e8:	89 91       	ld	r24, Y+
    17ea:	81 11       	cpse	r24, r1
    17ec:	f9 cf       	rjmp	.-14     	; 0x17e0 <LCD0_string+0xe>
    17ee:	df 91       	pop	r29
    17f0:	cf 91       	pop	r28
    17f2:	08 95       	ret

000017f4 <LCD0_string_size>:
    17f4:	0f 93       	push	r16
    17f6:	1f 93       	push	r17
    17f8:	cf 93       	push	r28
    17fa:	df 93       	push	r29
    17fc:	fc 01       	movw	r30, r24
    17fe:	d6 2f       	mov	r29, r22
    1800:	80 81       	ld	r24, Z
    1802:	88 23       	and	r24, r24
    1804:	51 f0       	breq	.+20     	; 0x181a <LCD0_string_size+0x26>
    1806:	8f 01       	movw	r16, r30
    1808:	0f 5f       	subi	r16, 0xFF	; 255
    180a:	1f 4f       	sbci	r17, 0xFF	; 255
    180c:	61 11       	cpse	r22, r1
    180e:	09 c0       	rjmp	.+18     	; 0x1822 <LCD0_string_size+0x2e>
    1810:	1b c0       	rjmp	.+54     	; 0x1848 <LCD0_string_size+0x54>
    1812:	cf 5f       	subi	r28, 0xFF	; 255
    1814:	dc 17       	cp	r29, r28
    1816:	30 f4       	brcc	.+12     	; 0x1824 <LCD0_string_size+0x30>
    1818:	01 c0       	rjmp	.+2      	; 0x181c <LCD0_string_size+0x28>
    181a:	c0 e0       	ldi	r28, 0x00	; 0
    181c:	cd 17       	cp	r28, r29
    181e:	60 f0       	brcs	.+24     	; 0x1838 <LCD0_string_size+0x44>
    1820:	13 c0       	rjmp	.+38     	; 0x1848 <LCD0_string_size+0x54>
    1822:	c1 e0       	ldi	r28, 0x01	; 1
    1824:	61 e0       	ldi	r22, 0x01	; 1
    1826:	70 e0       	ldi	r23, 0x00	; 0
    1828:	75 de       	rcall	.-790    	; 0x1514 <LCD0_write>
    182a:	b3 df       	rcall	.-154    	; 0x1792 <LCD0_BF>
    182c:	f8 01       	movw	r30, r16
    182e:	81 91       	ld	r24, Z+
    1830:	8f 01       	movw	r16, r30
    1832:	81 11       	cpse	r24, r1
    1834:	ee cf       	rjmp	.-36     	; 0x1812 <LCD0_string_size+0x1e>
    1836:	f2 cf       	rjmp	.-28     	; 0x181c <LCD0_string_size+0x28>
    1838:	cf 5f       	subi	r28, 0xFF	; 255
    183a:	61 e0       	ldi	r22, 0x01	; 1
    183c:	70 e0       	ldi	r23, 0x00	; 0
    183e:	80 e2       	ldi	r24, 0x20	; 32
    1840:	69 de       	rcall	.-814    	; 0x1514 <LCD0_write>
    1842:	a7 df       	rcall	.-178    	; 0x1792 <LCD0_BF>
    1844:	cd 17       	cp	r28, r29
    1846:	c0 f3       	brcs	.-16     	; 0x1838 <LCD0_string_size+0x44>
    1848:	df 91       	pop	r29
    184a:	cf 91       	pop	r28
    184c:	1f 91       	pop	r17
    184e:	0f 91       	pop	r16
    1850:	08 95       	ret

00001852 <LCD0_hspace>:
    1852:	cf 93       	push	r28
    1854:	c8 2f       	mov	r28, r24
    1856:	88 23       	and	r24, r24
    1858:	39 f0       	breq	.+14     	; 0x1868 <LCD0_hspace+0x16>
    185a:	61 e0       	ldi	r22, 0x01	; 1
    185c:	70 e0       	ldi	r23, 0x00	; 0
    185e:	80 e2       	ldi	r24, 0x20	; 32
    1860:	59 de       	rcall	.-846    	; 0x1514 <LCD0_write>
    1862:	97 df       	rcall	.-210    	; 0x1792 <LCD0_BF>
    1864:	c1 50       	subi	r28, 0x01	; 1
    1866:	c9 f7       	brne	.-14     	; 0x185a <LCD0_hspace+0x8>
    1868:	cf 91       	pop	r28
    186a:	08 95       	ret

0000186c <LCD0_gotoxy>:
    186c:	26 2f       	mov	r18, r22
    186e:	81 30       	cpi	r24, 0x01	; 1
    1870:	91 05       	cpc	r25, r1
    1872:	71 f0       	breq	.+28     	; 0x1890 <LCD0_gotoxy+0x24>
    1874:	30 f0       	brcs	.+12     	; 0x1882 <LCD0_gotoxy+0x16>
    1876:	82 30       	cpi	r24, 0x02	; 2
    1878:	91 05       	cpc	r25, r1
    187a:	89 f0       	breq	.+34     	; 0x189e <LCD0_gotoxy+0x32>
    187c:	03 97       	sbiw	r24, 0x03	; 3
    187e:	b1 f0       	breq	.+44     	; 0x18ac <LCD0_gotoxy+0x40>
    1880:	08 95       	ret
    1882:	60 e0       	ldi	r22, 0x00	; 0
    1884:	70 e0       	ldi	r23, 0x00	; 0
    1886:	80 e8       	ldi	r24, 0x80	; 128
    1888:	82 0f       	add	r24, r18
    188a:	44 de       	rcall	.-888    	; 0x1514 <LCD0_write>
    188c:	82 cf       	rjmp	.-252    	; 0x1792 <LCD0_BF>
    188e:	08 95       	ret
    1890:	60 e0       	ldi	r22, 0x00	; 0
    1892:	70 e0       	ldi	r23, 0x00	; 0
    1894:	80 ec       	ldi	r24, 0xC0	; 192
    1896:	82 0f       	add	r24, r18
    1898:	3d de       	rcall	.-902    	; 0x1514 <LCD0_write>
    189a:	7b cf       	rjmp	.-266    	; 0x1792 <LCD0_BF>
    189c:	08 95       	ret
    189e:	60 e0       	ldi	r22, 0x00	; 0
    18a0:	70 e0       	ldi	r23, 0x00	; 0
    18a2:	84 e9       	ldi	r24, 0x94	; 148
    18a4:	82 0f       	add	r24, r18
    18a6:	36 de       	rcall	.-916    	; 0x1514 <LCD0_write>
    18a8:	74 cf       	rjmp	.-280    	; 0x1792 <LCD0_BF>
    18aa:	08 95       	ret
    18ac:	60 e0       	ldi	r22, 0x00	; 0
    18ae:	70 e0       	ldi	r23, 0x00	; 0
    18b0:	84 ed       	ldi	r24, 0xD4	; 212
    18b2:	82 0f       	add	r24, r18
    18b4:	2f de       	rcall	.-930    	; 0x1514 <LCD0_write>
    18b6:	6d cf       	rjmp	.-294    	; 0x1792 <LCD0_BF>
    18b8:	08 95       	ret

000018ba <LCD0_clear>:
    18ba:	60 e0       	ldi	r22, 0x00	; 0
    18bc:	70 e0       	ldi	r23, 0x00	; 0
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	29 de       	rcall	.-942    	; 0x1514 <LCD0_write>
    18c2:	87 ee       	ldi	r24, 0xE7	; 231
    18c4:	97 e1       	ldi	r25, 0x17	; 23
    18c6:	01 97       	sbiw	r24, 0x01	; 1
    18c8:	f1 f7       	brne	.-4      	; 0x18c6 <LCD0_clear+0xc>
    18ca:	00 c0       	rjmp	.+0      	; 0x18cc <LCD0_clear+0x12>
    18cc:	00 00       	nop
    18ce:	08 95       	ret

000018d0 <LCD0_inic>:
	return lcd0;
}
void LCD0_inic(void)
{
	//LCD INIC
	*lcd0_DDR=(1<<RS)|(1<<RW)|(1<<EN)|(0<<NC);
    18d0:	e0 91 cc 03 	lds	r30, 0x03CC	; 0x8003cc <lcd0_DDR>
    18d4:	f0 91 cd 03 	lds	r31, 0x03CD	; 0x8003cd <lcd0_DDR+0x1>
    18d8:	87 e0       	ldi	r24, 0x07	; 7
    18da:	80 83       	st	Z, r24
	*lcd0_PORT=(1<<NC);
    18dc:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <lcd0_PORT>
    18e0:	f0 91 d0 03 	lds	r31, 0x03D0	; 0x8003d0 <lcd0_PORT+0x1>
    18e4:	88 e0       	ldi	r24, 0x08	; 8
    18e6:	80 83       	st	Z, r24
    18e8:	2f ef       	ldi	r18, 0xFF	; 255
    18ea:	83 ef       	ldi	r24, 0xF3	; 243
    18ec:	91 e0       	ldi	r25, 0x01	; 1
    18ee:	21 50       	subi	r18, 0x01	; 1
    18f0:	80 40       	sbci	r24, 0x00	; 0
    18f2:	90 40       	sbci	r25, 0x00	; 0
    18f4:	e1 f7       	brne	.-8      	; 0x18ee <LCD0_inic+0x1e>
    18f6:	00 c0       	rjmp	.+0      	; 0x18f8 <LCD0_inic+0x28>
    18f8:	00 00       	nop
	/***INICIALIZACAO LCD**datasheet*/
	_delay_ms(40);
	LCD0_write(0x33,INST); //function set
    18fa:	60 e0       	ldi	r22, 0x00	; 0
    18fc:	70 e0       	ldi	r23, 0x00	; 0
    18fe:	83 e3       	ldi	r24, 0x33	; 51
    1900:	09 de       	rcall	.-1006   	; 0x1514 <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1902:	20 ed       	ldi	r18, 0xD0	; 208
    1904:	2a 95       	dec	r18
    1906:	f1 f7       	brne	.-4      	; 0x1904 <LCD0_inic+0x34>
	_delay_us(39);
	LCD0_write(0x33,INST); //function set
    1908:	60 e0       	ldi	r22, 0x00	; 0
    190a:	70 e0       	ldi	r23, 0x00	; 0
    190c:	83 e3       	ldi	r24, 0x33	; 51
    190e:	02 de       	rcall	.-1020   	; 0x1514 <LCD0_write>
    1910:	80 ed       	ldi	r24, 0xD0	; 208
    1912:	8a 95       	dec	r24
    1914:	f1 f7       	brne	.-4      	; 0x1912 <LCD0_inic+0x42>
	_delay_us(39);
	LCD0_write(0x2B,INST); //function set
    1916:	60 e0       	ldi	r22, 0x00	; 0
    1918:	70 e0       	ldi	r23, 0x00	; 0
    191a:	8b e2       	ldi	r24, 0x2B	; 43
    191c:	fb dd       	rcall	.-1034   	; 0x1514 <LCD0_write>
    191e:	95 ec       	ldi	r25, 0xC5	; 197
    1920:	9a 95       	dec	r25
    1922:	f1 f7       	brne	.-4      	; 0x1920 <LCD0_inic+0x50>
    1924:	00 00       	nop
	_delay_us(37);
	LCD0_write(0x0C,INST);// display on/off control
    1926:	60 e0       	ldi	r22, 0x00	; 0
    1928:	70 e0       	ldi	r23, 0x00	; 0
    192a:	8c e0       	ldi	r24, 0x0C	; 12
    192c:	f3 dd       	rcall	.-1050   	; 0x1514 <LCD0_write>
    192e:	25 ec       	ldi	r18, 0xC5	; 197
    1930:	2a 95       	dec	r18
    1932:	f1 f7       	brne	.-4      	; 0x1930 <LCD0_inic+0x60>
	_delay_us(37);
	LCD0_write(0x01,INST);// clear display
    1934:	00 00       	nop
    1936:	60 e0       	ldi	r22, 0x00	; 0
    1938:	70 e0       	ldi	r23, 0x00	; 0
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	eb dd       	rcall	.-1066   	; 0x1514 <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    193e:	87 ee       	ldi	r24, 0xE7	; 231
    1940:	97 e1       	ldi	r25, 0x17	; 23
    1942:	01 97       	sbiw	r24, 0x01	; 1
    1944:	f1 f7       	brne	.-4      	; 0x1942 <LCD0_inic+0x72>
    1946:	00 c0       	rjmp	.+0      	; 0x1948 <LCD0_inic+0x78>
	_delay_ms(1.53);
	LCD0_write(0x06,INST);// entry mode set (crazy settings)
    1948:	00 00       	nop
    194a:	60 e0       	ldi	r22, 0x00	; 0
    194c:	70 e0       	ldi	r23, 0x00	; 0
    194e:	86 e0       	ldi	r24, 0x06	; 6
    1950:	e1 dd       	rcall	.-1086   	; 0x1514 <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1952:	95 ec       	ldi	r25, 0xC5	; 197
    1954:	9a 95       	dec	r25
    1956:	f1 f7       	brne	.-4      	; 0x1954 <LCD0_inic+0x84>
    1958:	00 00       	nop
    195a:	08 95       	ret

0000195c <LCD0enable>:
void LCD1_strobe(unsigned int num);
void LCD1_reboot(void);
unsigned int LCD_ticks(unsigned int num);
/***Procedure & Function***/
LCD0 LCD0enable(volatile uint8_t *ddr, volatile uint8_t *pin, volatile uint8_t *port)
{
    195c:	1f 93       	push	r17
    195e:	cf 93       	push	r28
    1960:	df 93       	push	r29
    1962:	ec 01       	movw	r28, r24
	//LOCAL VARIABLES
	uint8_t tSREG;
	tSREG=SREG;
    1964:	1f b7       	in	r17, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    1966:	8f b7       	in	r24, 0x3f	; 63
    1968:	8f 77       	andi	r24, 0x7F	; 127
    196a:	8f bf       	out	0x3f, r24	; 63
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	LCD0 lcd0;
	//import parametros
	lcd0_DDR=ddr;
    196c:	70 93 cd 03 	sts	0x03CD, r23	; 0x8003cd <lcd0_DDR+0x1>
    1970:	60 93 cc 03 	sts	0x03CC, r22	; 0x8003cc <lcd0_DDR>
	lcd0_PIN=pin;
    1974:	50 93 c6 03 	sts	0x03C6, r21	; 0x8003c6 <lcd0_PIN+0x1>
    1978:	40 93 c5 03 	sts	0x03C5, r20	; 0x8003c5 <lcd0_PIN>
	lcd0_PORT=port;
    197c:	30 93 d0 03 	sts	0x03D0, r19	; 0x8003d0 <lcd0_PORT+0x1>
    1980:	20 93 cf 03 	sts	0x03CF, r18	; 0x8003cf <lcd0_PORT>
	//inic variables
	*lcd0_DDR=0x00;
    1984:	fb 01       	movw	r30, r22
    1986:	10 82       	st	Z, r1
	*lcd0_PORT=0xFF;
    1988:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <lcd0_PORT>
    198c:	f0 91 d0 03 	lds	r31, 0x03D0	; 0x8003d0 <lcd0_PORT+0x1>
    1990:	8f ef       	ldi	r24, 0xFF	; 255
    1992:	80 83       	st	Z, r24
	lcd0_detect=*lcd0_PIN & (1<<NC);
    1994:	e0 91 c5 03 	lds	r30, 0x03C5	; 0x8003c5 <lcd0_PIN>
    1998:	f0 91 c6 03 	lds	r31, 0x03C6	; 0x8003c6 <lcd0_PIN+0x1>
    199c:	80 81       	ld	r24, Z
    199e:	88 70       	andi	r24, 0x08	; 8
    19a0:	80 93 ce 03 	sts	0x03CE, r24	; 0x8003ce <lcd0_detect>
	lcd0.hspace=LCD0_hspace;
	lcd0.clear=LCD0_clear;
	lcd0.gotoxy=LCD0_gotoxy;
	lcd0.reboot=LCD0_reboot;
	//LCD INIC
	LCD0_inic();
    19a4:	95 df       	rcall	.-214    	; 0x18d0 <LCD0_inic>
	SREG=tSREG;
    19a6:	1f bf       	out	0x3f, r17	; 63
	//
	return lcd0;
    19a8:	8a e8       	ldi	r24, 0x8A	; 138
    19aa:	9a e0       	ldi	r25, 0x0A	; 10
    19ac:	99 83       	std	Y+1, r25	; 0x01
    19ae:	88 83       	st	Y, r24
    19b0:	8e e4       	ldi	r24, 0x4E	; 78
    19b2:	9b e0       	ldi	r25, 0x0B	; 11
    19b4:	9b 83       	std	Y+3, r25	; 0x03
    19b6:	8a 83       	std	Y+2, r24	; 0x02
    19b8:	89 ec       	ldi	r24, 0xC9	; 201
    19ba:	9b e0       	ldi	r25, 0x0B	; 11
    19bc:	9d 83       	std	Y+5, r25	; 0x05
    19be:	8c 83       	std	Y+4, r24	; 0x04
    19c0:	8b ed       	ldi	r24, 0xDB	; 219
    19c2:	9b e0       	ldi	r25, 0x0B	; 11
    19c4:	9f 83       	std	Y+7, r25	; 0x07
    19c6:	8e 83       	std	Y+6, r24	; 0x06
    19c8:	80 ee       	ldi	r24, 0xE0	; 224
    19ca:	9b e0       	ldi	r25, 0x0B	; 11
    19cc:	99 87       	std	Y+9, r25	; 0x09
    19ce:	88 87       	std	Y+8, r24	; 0x08
    19d0:	89 ee       	ldi	r24, 0xE9	; 233
    19d2:	9b e0       	ldi	r25, 0x0B	; 11
    19d4:	9b 87       	std	Y+11, r25	; 0x0b
    19d6:	8a 87       	std	Y+10, r24	; 0x0a
    19d8:	8a ef       	ldi	r24, 0xFA	; 250
    19da:	9b e0       	ldi	r25, 0x0B	; 11
    19dc:	9d 87       	std	Y+13, r25	; 0x0d
    19de:	8c 87       	std	Y+12, r24	; 0x0c
    19e0:	89 e2       	ldi	r24, 0x29	; 41
    19e2:	9c e0       	ldi	r25, 0x0C	; 12
    19e4:	9f 87       	std	Y+15, r25	; 0x0f
    19e6:	8e 87       	std	Y+14, r24	; 0x0e
    19e8:	8d e5       	ldi	r24, 0x5D	; 93
    19ea:	9c e0       	ldi	r25, 0x0C	; 12
    19ec:	99 8b       	std	Y+17, r25	; 0x11
    19ee:	88 8b       	std	Y+16, r24	; 0x10
    19f0:	86 e3       	ldi	r24, 0x36	; 54
    19f2:	9c e0       	ldi	r25, 0x0C	; 12
    19f4:	9b 8b       	std	Y+19, r25	; 0x13
    19f6:	8a 8b       	std	Y+18, r24	; 0x12
    19f8:	85 e0       	ldi	r24, 0x05	; 5
    19fa:	9d e0       	ldi	r25, 0x0D	; 13
    19fc:	9d 8b       	std	Y+21, r25	; 0x15
    19fe:	8c 8b       	std	Y+20, r24	; 0x14
}
    1a00:	ce 01       	movw	r24, r28
    1a02:	df 91       	pop	r29
    1a04:	cf 91       	pop	r28
    1a06:	1f 91       	pop	r17
    1a08:	08 95       	ret

00001a0a <LCD0_reboot>:
	*lcd0_PORT|=(1<<EN);
	LCD_ticks(num);
	*lcd0_PORT&=~(1<<EN);
}
void LCD0_reboot(void)
{
    1a0a:	cf 93       	push	r28
	//low high detect pin NC
	uint8_t i;
	uint8_t tmp;
	tmp=*lcd0_PIN & (1<<NC);
    1a0c:	e0 91 c5 03 	lds	r30, 0x03C5	; 0x8003c5 <lcd0_PIN>
    1a10:	f0 91 c6 03 	lds	r31, 0x03C6	; 0x8003c6 <lcd0_PIN+0x1>
    1a14:	c0 81       	ld	r28, Z
    1a16:	c8 70       	andi	r28, 0x08	; 8
	i=tmp^lcd0_detect;
    1a18:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <lcd0_detect>
    1a1c:	8c 27       	eor	r24, r28
	i&=tmp;
	if(i)
    1a1e:	8c 23       	and	r24, r28
    1a20:	09 f0       	breq	.+2      	; 0x1a24 <LCD0_reboot+0x1a>
		LCD0_inic();
    1a22:	56 df       	rcall	.-340    	; 0x18d0 <LCD0_inic>
	lcd0_detect=tmp;
    1a24:	c0 93 ce 03 	sts	0x03CE, r28	; 0x8003ce <lcd0_detect>
}
    1a28:	cf 91       	pop	r28
    1a2a:	08 95       	ret

00001a2c <LFSMquant>:
	}//End switch
	return status;
}
/***uint16_t LFSMquant(struct lfsm *r)***/
uint16_t LFSMquant(struct lfsm *r)
{
    1a2c:	af 92       	push	r10
    1a2e:	bf 92       	push	r11
    1a30:	cf 92       	push	r12
    1a32:	df 92       	push	r13
    1a34:	ef 92       	push	r14
    1a36:	ff 92       	push	r15
    1a38:	0f 93       	push	r16
    1a3a:	1f 93       	push	r17
    1a3c:	cf 93       	push	r28
    1a3e:	df 93       	push	r29
	uint16_t i1;
	uint8_t sizeblock=r->sizeblock;
    1a40:	dc 01       	movw	r26, r24
    1a42:	14 96       	adiw	r26, 0x04	; 4
    1a44:	cc 90       	ld	r12, X
    1a46:	14 97       	sbiw	r26, 0x04	; 4
	struct lfsmdata* pdata=&data;
	uint16_t programmed;
	for(i1=ZERO,programmed=ZERO;i1<r->sizeeeprom;i1++){
    1a48:	12 96       	adiw	r26, 0x02	; 2
    1a4a:	2d 91       	ld	r18, X+
    1a4c:	3c 91       	ld	r19, X
    1a4e:	13 97       	sbiw	r26, 0x03	; 3
    1a50:	23 2b       	or	r18, r19
    1a52:	21 f1       	breq	.+72     	; 0x1a9c <LFSMquant+0x70>
    1a54:	7c 01       	movw	r14, r24
    1a56:	d1 2c       	mov	r13, r1
    1a58:	00 e0       	ldi	r16, 0x00	; 0
    1a5a:	10 e0       	ldi	r17, 0x00	; 0
    1a5c:	a1 2c       	mov	r10, r1
    1a5e:	b1 2c       	mov	r11, r1
    1a60:	c0 e0       	ldi	r28, 0x00	; 0
    1a62:	d0 e0       	ldi	r29, 0x00	; 0
		r->eprom->read_block(pdata, (const void*) (i1*sizeblock), sizeblock);
    1a64:	d7 01       	movw	r26, r14
    1a66:	ed 91       	ld	r30, X+
    1a68:	fc 91       	ld	r31, X
    1a6a:	00 8c       	ldd	r0, Z+24	; 0x18
    1a6c:	f1 8d       	ldd	r31, Z+25	; 0x19
    1a6e:	e0 2d       	mov	r30, r0
    1a70:	a6 01       	movw	r20, r12
    1a72:	b8 01       	movw	r22, r16
    1a74:	8e ed       	ldi	r24, 0xDE	; 222
    1a76:	93 e0       	ldi	r25, 0x03	; 3
    1a78:	09 95       	icall
		if(pdata->page!=EMPTY){ //Count memory used
    1a7a:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <data>
    1a7e:	88 23       	and	r24, r24
    1a80:	19 f0       	breq	.+6      	; 0x1a88 <LFSMquant+0x5c>
			programmed++;
    1a82:	bf ef       	ldi	r27, 0xFF	; 255
    1a84:	ab 1a       	sub	r10, r27
    1a86:	bb 0a       	sbc	r11, r27
{
	uint16_t i1;
	uint8_t sizeblock=r->sizeblock;
	struct lfsmdata* pdata=&data;
	uint16_t programmed;
	for(i1=ZERO,programmed=ZERO;i1<r->sizeeeprom;i1++){
    1a88:	21 96       	adiw	r28, 0x01	; 1
    1a8a:	0c 0d       	add	r16, r12
    1a8c:	1d 1d       	adc	r17, r13
    1a8e:	f7 01       	movw	r30, r14
    1a90:	82 81       	ldd	r24, Z+2	; 0x02
    1a92:	93 81       	ldd	r25, Z+3	; 0x03
    1a94:	c8 17       	cp	r28, r24
    1a96:	d9 07       	cpc	r29, r25
    1a98:	28 f3       	brcs	.-54     	; 0x1a64 <LFSMquant+0x38>
    1a9a:	02 c0       	rjmp	.+4      	; 0x1aa0 <LFSMquant+0x74>
    1a9c:	a1 2c       	mov	r10, r1
    1a9e:	b1 2c       	mov	r11, r1
		if(pdata->page!=EMPTY){ //Count memory used
			programmed++;
		}
	}
	return programmed;
}
    1aa0:	c5 01       	movw	r24, r10
    1aa2:	df 91       	pop	r29
    1aa4:	cf 91       	pop	r28
    1aa6:	1f 91       	pop	r17
    1aa8:	0f 91       	pop	r16
    1aaa:	ff 90       	pop	r15
    1aac:	ef 90       	pop	r14
    1aae:	df 90       	pop	r13
    1ab0:	cf 90       	pop	r12
    1ab2:	bf 90       	pop	r11
    1ab4:	af 90       	pop	r10
    1ab6:	08 95       	ret

00001ab8 <LFSMdeleteall>:
	}
	return status;
}
/***uint8_t LFSMdeleteall(struct lfsm *r)***/
uint8_t LFSMdeleteall(struct lfsm *r)
{
    1ab8:	af 92       	push	r10
    1aba:	bf 92       	push	r11
    1abc:	cf 92       	push	r12
    1abe:	df 92       	push	r13
    1ac0:	ef 92       	push	r14
    1ac2:	ff 92       	push	r15
    1ac4:	0f 93       	push	r16
    1ac6:	1f 93       	push	r17
    1ac8:	cf 93       	push	r28
    1aca:	df 93       	push	r29
    1acc:	7c 01       	movw	r14, r24
	uint16_t i1;
	uint8_t status=ZERO;
	uint8_t sizeblock=r->sizeblock;
    1ace:	dc 01       	movw	r26, r24
    1ad0:	14 96       	adiw	r26, 0x04	; 4
    1ad2:	cc 90       	ld	r12, X
    1ad4:	14 97       	sbiw	r26, 0x04	; 4
	struct lfsmdata* pdata=&data;
	for(i1=ZERO;i1<r->sizeeeprom;i1++){
    1ad6:	12 96       	adiw	r26, 0x02	; 2
    1ad8:	8d 91       	ld	r24, X+
    1ada:	9c 91       	ld	r25, X
    1adc:	13 97       	sbiw	r26, 0x03	; 3
    1ade:	89 2b       	or	r24, r25
    1ae0:	81 f1       	breq	.+96     	; 0x1b42 <LFSMdeleteall+0x8a>
    1ae2:	d1 2c       	mov	r13, r1
    1ae4:	c0 e0       	ldi	r28, 0x00	; 0
    1ae6:	d0 e0       	ldi	r29, 0x00	; 0
    1ae8:	a1 2c       	mov	r10, r1
    1aea:	00 e0       	ldi	r16, 0x00	; 0
    1aec:	10 e0       	ldi	r17, 0x00	; 0
		r->eprom->read_block(pdata, (const void*) (i1*sizeblock), sizeblock);
		if(pdata->page){
			pdata->page=EMPTY;
			r->eprom->update_block(pdata, (void*) (i1*sizeblock), sizeblock);
			status=1; //All deleted
    1aee:	bb 24       	eor	r11, r11
    1af0:	b3 94       	inc	r11
	uint16_t i1;
	uint8_t status=ZERO;
	uint8_t sizeblock=r->sizeblock;
	struct lfsmdata* pdata=&data;
	for(i1=ZERO;i1<r->sizeeeprom;i1++){
		r->eprom->read_block(pdata, (const void*) (i1*sizeblock), sizeblock);
    1af2:	d7 01       	movw	r26, r14
    1af4:	ed 91       	ld	r30, X+
    1af6:	fc 91       	ld	r31, X
    1af8:	00 8c       	ldd	r0, Z+24	; 0x18
    1afa:	f1 8d       	ldd	r31, Z+25	; 0x19
    1afc:	e0 2d       	mov	r30, r0
    1afe:	a6 01       	movw	r20, r12
    1b00:	be 01       	movw	r22, r28
    1b02:	8e ed       	ldi	r24, 0xDE	; 222
    1b04:	93 e0       	ldi	r25, 0x03	; 3
    1b06:	09 95       	icall
		if(pdata->page){
    1b08:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <data>
    1b0c:	88 23       	and	r24, r24
    1b0e:	71 f0       	breq	.+28     	; 0x1b2c <LFSMdeleteall+0x74>
			pdata->page=EMPTY;
    1b10:	10 92 de 03 	sts	0x03DE, r1	; 0x8003de <data>
			r->eprom->update_block(pdata, (void*) (i1*sizeblock), sizeblock);
    1b14:	d7 01       	movw	r26, r14
    1b16:	ed 91       	ld	r30, X+
    1b18:	fc 91       	ld	r31, X
    1b1a:	04 8c       	ldd	r0, Z+28	; 0x1c
    1b1c:	f5 8d       	ldd	r31, Z+29	; 0x1d
    1b1e:	e0 2d       	mov	r30, r0
    1b20:	a6 01       	movw	r20, r12
    1b22:	be 01       	movw	r22, r28
    1b24:	8e ed       	ldi	r24, 0xDE	; 222
    1b26:	93 e0       	ldi	r25, 0x03	; 3
    1b28:	09 95       	icall
			status=1; //All deleted
    1b2a:	ab 2c       	mov	r10, r11
{
	uint16_t i1;
	uint8_t status=ZERO;
	uint8_t sizeblock=r->sizeblock;
	struct lfsmdata* pdata=&data;
	for(i1=ZERO;i1<r->sizeeeprom;i1++){
    1b2c:	0f 5f       	subi	r16, 0xFF	; 255
    1b2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b30:	cc 0d       	add	r28, r12
    1b32:	dd 1d       	adc	r29, r13
    1b34:	f7 01       	movw	r30, r14
    1b36:	82 81       	ldd	r24, Z+2	; 0x02
    1b38:	93 81       	ldd	r25, Z+3	; 0x03
    1b3a:	08 17       	cp	r16, r24
    1b3c:	19 07       	cpc	r17, r25
    1b3e:	c8 f2       	brcs	.-78     	; 0x1af2 <LFSMdeleteall+0x3a>
    1b40:	01 c0       	rjmp	.+2      	; 0x1b44 <LFSMdeleteall+0x8c>
}
/***uint8_t LFSMdeleteall(struct lfsm *r)***/
uint8_t LFSMdeleteall(struct lfsm *r)
{
	uint16_t i1;
	uint8_t status=ZERO;
    1b42:	a1 2c       	mov	r10, r1
			pdata->page=EMPTY;
			r->eprom->update_block(pdata, (void*) (i1*sizeblock), sizeblock);
			status=1; //All deleted
		}
	}
	r->output=ZERO;
    1b44:	d7 01       	movw	r26, r14
    1b46:	18 96       	adiw	r26, 0x08	; 8
    1b48:	1c 92       	st	X, r1
    1b4a:	1e 92       	st	-X, r1
    1b4c:	17 97       	sbiw	r26, 0x07	; 7
	r->status=ZERO;
    1b4e:	19 96       	adiw	r26, 0x09	; 9
    1b50:	1c 92       	st	X, r1
	return status;
}
    1b52:	8a 2d       	mov	r24, r10
    1b54:	df 91       	pop	r29
    1b56:	cf 91       	pop	r28
    1b58:	1f 91       	pop	r17
    1b5a:	0f 91       	pop	r16
    1b5c:	ff 90       	pop	r15
    1b5e:	ef 90       	pop	r14
    1b60:	df 90       	pop	r13
    1b62:	cf 90       	pop	r12
    1b64:	bf 90       	pop	r11
    1b66:	af 90       	pop	r10
    1b68:	08 95       	ret

00001b6a <LFSMgetoutput>:
/***uint16_t LFSMgetoutput(struct lfsm *r)***/
uint16_t LFSMgetoutput(struct lfsm *r)
{
	return r->output;
}
    1b6a:	fc 01       	movw	r30, r24
    1b6c:	87 81       	ldd	r24, Z+7	; 0x07
    1b6e:	90 85       	ldd	r25, Z+8	; 0x08
    1b70:	08 95       	ret

00001b72 <LFSMgetstatus>:
/***uint8_t LFSMgetstatus(struct lfsm *r)***/
uint8_t LFSMgetstatus(struct lfsm *r)
{
	return r->status;
}
    1b72:	fc 01       	movw	r30, r24
    1b74:	81 85       	ldd	r24, Z+9	; 0x09
    1b76:	08 95       	ret

00001b78 <LFSMsetoutput>:
/***void LFSMsetoutput(struct lfsm *r, uint16_t output)***/
void LFSMsetoutput(struct lfsm *r, uint16_t output)
{
	r->output=output;
    1b78:	fc 01       	movw	r30, r24
    1b7a:	70 87       	std	Z+8, r23	; 0x08
    1b7c:	67 83       	std	Z+7, r22	; 0x07
	r->status=ZERO;
    1b7e:	11 86       	std	Z+9, r1	; 0x09
    1b80:	08 95       	ret

00001b82 <LFSMgetpage>:
}
/***uint8_t LFSMgetpage(struct lfsm *r)***/
uint8_t LFSMgetpage(struct lfsm *r)
{
	return r->page;
}
    1b82:	fc 01       	movw	r30, r24
    1b84:	85 81       	ldd	r24, Z+5	; 0x05
    1b86:	08 95       	ret

00001b88 <LFSMsetpage>:
/***void LFSMsetpage(struct lfsm *r, uint8_t page)***/
void LFSMsetpage(struct lfsm *r, uint8_t page)
{
	r->page=page;
    1b88:	fc 01       	movw	r30, r24
    1b8a:	65 83       	std	Z+5, r22	; 0x05
    1b8c:	08 95       	ret

00001b8e <LFSMread>:
	return r;
}
/***Procedure & Function***/
/***uint8_t LFSMread(struct lfsm *r, uint8_t input)***/
uint8_t LFSMread(struct lfsm *r, uint8_t input)
{
    1b8e:	2f 92       	push	r2
    1b90:	3f 92       	push	r3
    1b92:	4f 92       	push	r4
    1b94:	5f 92       	push	r5
    1b96:	6f 92       	push	r6
    1b98:	7f 92       	push	r7
    1b9a:	8f 92       	push	r8
    1b9c:	9f 92       	push	r9
    1b9e:	af 92       	push	r10
    1ba0:	bf 92       	push	r11
    1ba2:	cf 92       	push	r12
    1ba4:	df 92       	push	r13
    1ba6:	ef 92       	push	r14
    1ba8:	ff 92       	push	r15
    1baa:	0f 93       	push	r16
    1bac:	1f 93       	push	r17
    1bae:	cf 93       	push	r28
    1bb0:	df 93       	push	r29
    1bb2:	8c 01       	movw	r16, r24
    1bb4:	76 2e       	mov	r7, r22
	struct lfsmdata* pdata=&data;
	int16_t n=ZERO;
	uint8_t n1=NPAGES,n2=NPAGES;
	uint8_t page=r->page;
	uint16_t HL,LH;
	HL=LFSMhl(r->input,input);
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	16 96       	adiw	r26, 0x06	; 6
    1bba:	cc 90       	ld	r12, X
    1bbc:	a6 2e       	mov	r10, r22
    1bbe:	ac 24       	eor	r10, r12
/***uint16_t LFSMhl(uint16_t xi, uint16_t xf)***/
uint16_t LFSMhl(uint16_t xi, uint16_t xf)
{
	uint16_t i;
	i=xf^xi;
	i&=xi;
    1bc0:	ca 20       	and	r12, r10
    1bc2:	d1 2c       	mov	r13, r1
/***uint16_t LFSMlh(uint16_t xi, uint16_t xf)***/
uint16_t LFSMlh(uint16_t xi, uint16_t xf)
{
	uint16_t i;
	i=xf^xi;
	i&=xf;
    1bc4:	a6 22       	and	r10, r22
    1bc6:	b1 2c       	mov	r11, r1
	uint8_t n1=NPAGES,n2=NPAGES;
	uint8_t page=r->page;
	uint16_t HL,LH;
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(HL || LH){ //To not waste time
    1bc8:	c1 14       	cp	r12, r1
    1bca:	d1 04       	cpc	r13, r1
    1bcc:	31 f0       	breq	.+12     	; 0x1bda <LFSMread+0x4c>
		status=1; //New entry
		for(i1=ZERO;i1<r->sizeeeprom;i1++){
    1bce:	f8 01       	movw	r30, r16
    1bd0:	82 81       	ldd	r24, Z+2	; 0x02
    1bd2:	93 81       	ldd	r25, Z+3	; 0x03
    1bd4:	89 2b       	or	r24, r25
    1bd6:	29 f4       	brne	.+10     	; 0x1be2 <LFSMread+0x54>
    1bd8:	b3 c0       	rjmp	.+358    	; 0x1d40 <LFSMread+0x1b2>
	uint8_t n1=NPAGES,n2=NPAGES;
	uint8_t page=r->page;
	uint16_t HL,LH;
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(HL || LH){ //To not waste time
    1bda:	a1 14       	cp	r10, r1
    1bdc:	b1 04       	cpc	r11, r1
    1bde:	b9 f7       	brne	.-18     	; 0x1bce <LFSMread+0x40>
    1be0:	4a c1       	rjmp	.+660    	; 0x1e76 <LFSMread+0x2e8>
/***uint8_t LFSMread(struct lfsm *r, uint8_t input)***/
uint8_t LFSMread(struct lfsm *r, uint8_t input)
{
	uint16_t i1;
	uint8_t status=ZERO;
	uint8_t sizeblock=r->sizeblock;
    1be2:	e4 80       	ldd	r14, Z+4	; 0x04
	struct lfsmdata* pdata=&data;
	int16_t n=ZERO;
	uint8_t n1=NPAGES,n2=NPAGES;
	uint8_t page=r->page;
    1be4:	55 80       	ldd	r5, Z+5	; 0x05
    1be6:	33 24       	eor	r3, r3
    1be8:	3a 94       	dec	r3
    1bea:	44 24       	eor	r4, r4
    1bec:	4a 94       	dec	r4
    1bee:	66 24       	eor	r6, r6
    1bf0:	63 94       	inc	r6
    1bf2:	c0 e0       	ldi	r28, 0x00	; 0
    1bf4:	d0 e0       	ldi	r29, 0x00	; 0
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(HL || LH){ //To not waste time
		status=1; //New entry
		for(i1=ZERO;i1<r->sizeeeprom;i1++){
			r->eprom->read_block(pdata, (const void*) (i1*sizeblock), sizeblock);
    1bf6:	f1 2c       	mov	r15, r1
							status=2; //Global logic exist
					}
					break;
				default: //Local logic
					if( (pdata->feedback & pdata->mask)==(r->output & pdata->mask) && pdata->inhl==HL && pdata->inlh==LH ){
						n=pdata->page - page;	
    1bf8:	85 2c       	mov	r8, r5
    1bfa:	91 2c       	mov	r9, r1
					//Do nothing, continue search in status=1.
					break;
				case 1: //Global logic
					if( pdata->inhl==HL && pdata->inlh==LH ){
							i1=r->sizeeeprom;
							status=2; //Global logic exist
    1bfc:	68 94       	set
    1bfe:	22 24       	eor	r2, r2
    1c00:	21 f8       	bld	r2, 1
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(HL || LH){ //To not waste time
		status=1; //New entry
		for(i1=ZERO;i1<r->sizeeeprom;i1++){
			r->eprom->read_block(pdata, (const void*) (i1*sizeblock), sizeblock);
    1c02:	ec 9e       	mul	r14, r28
    1c04:	b0 01       	movw	r22, r0
    1c06:	ed 9e       	mul	r14, r29
    1c08:	70 0d       	add	r23, r0
    1c0a:	fc 9e       	mul	r15, r28
    1c0c:	70 0d       	add	r23, r0
    1c0e:	11 24       	eor	r1, r1
    1c10:	d8 01       	movw	r26, r16
    1c12:	ed 91       	ld	r30, X+
    1c14:	fc 91       	ld	r31, X
    1c16:	00 8c       	ldd	r0, Z+24	; 0x18
    1c18:	f1 8d       	ldd	r31, Z+25	; 0x19
    1c1a:	e0 2d       	mov	r30, r0
    1c1c:	a7 01       	movw	r20, r14
    1c1e:	8e ed       	ldi	r24, 0xDE	; 222
    1c20:	93 e0       	ldi	r25, 0x03	; 3
    1c22:	09 95       	icall
			switch(pdata->page){
    1c24:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <data>
    1c28:	88 23       	and	r24, r24
    1c2a:	09 f4       	brne	.+2      	; 0x1c2e <LFSMread+0xa0>
    1c2c:	70 c0       	rjmp	.+224    	; 0x1d0e <LFSMread+0x180>
    1c2e:	81 30       	cpi	r24, 0x01	; 1
    1c30:	99 f4       	brne	.+38     	; 0x1c58 <LFSMread+0xca>
				case ZERO:
					//Do nothing, continue search in status=1.
					break;
				case 1: //Global logic
					if( pdata->inhl==HL && pdata->inlh==LH ){
    1c32:	20 91 e1 03 	lds	r18, 0x03E1	; 0x8003e1 <data+0x3>
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	2c 15       	cp	r18, r12
    1c3a:	3d 05       	cpc	r19, r13
    1c3c:	09 f0       	breq	.+2      	; 0x1c40 <LFSMread+0xb2>
    1c3e:	67 c0       	rjmp	.+206    	; 0x1d0e <LFSMread+0x180>
    1c40:	20 91 e2 03 	lds	r18, 0x03E2	; 0x8003e2 <data+0x4>
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	2a 15       	cp	r18, r10
    1c48:	3b 05       	cpc	r19, r11
    1c4a:	09 f0       	breq	.+2      	; 0x1c4e <LFSMread+0xc0>
    1c4c:	60 c0       	rjmp	.+192    	; 0x1d0e <LFSMread+0x180>
							i1=r->sizeeeprom;
    1c4e:	f8 01       	movw	r30, r16
    1c50:	c2 81       	ldd	r28, Z+2	; 0x02
    1c52:	d3 81       	ldd	r29, Z+3	; 0x03
							status=2; //Global logic exist
    1c54:	62 2c       	mov	r6, r2
    1c56:	5b c0       	rjmp	.+182    	; 0x1d0e <LFSMread+0x180>
					}
					break;
				default: //Local logic
					if( (pdata->feedback & pdata->mask)==(r->output & pdata->mask) && pdata->inhl==HL && pdata->inlh==LH ){
    1c58:	ee ed       	ldi	r30, 0xDE	; 222
    1c5a:	f3 e0       	ldi	r31, 0x03	; 3
    1c5c:	41 81       	ldd	r20, Z+1	; 0x01
    1c5e:	52 81       	ldd	r21, Z+2	; 0x02
    1c60:	d8 01       	movw	r26, r16
    1c62:	17 96       	adiw	r26, 0x07	; 7
    1c64:	2d 91       	ld	r18, X+
    1c66:	3c 91       	ld	r19, X
    1c68:	18 97       	sbiw	r26, 0x08	; 8
    1c6a:	24 27       	eor	r18, r20
    1c6c:	35 27       	eor	r19, r21
    1c6e:	45 81       	ldd	r20, Z+5	; 0x05
    1c70:	56 81       	ldd	r21, Z+6	; 0x06
    1c72:	24 23       	and	r18, r20
    1c74:	35 23       	and	r19, r21
    1c76:	23 2b       	or	r18, r19
    1c78:	09 f0       	breq	.+2      	; 0x1c7c <LFSMread+0xee>
    1c7a:	49 c0       	rjmp	.+146    	; 0x1d0e <LFSMread+0x180>
    1c7c:	20 91 e1 03 	lds	r18, 0x03E1	; 0x8003e1 <data+0x3>
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	2c 15       	cp	r18, r12
    1c84:	3d 05       	cpc	r19, r13
    1c86:	09 f0       	breq	.+2      	; 0x1c8a <LFSMread+0xfc>
    1c88:	42 c0       	rjmp	.+132    	; 0x1d0e <LFSMread+0x180>
    1c8a:	20 91 e2 03 	lds	r18, 0x03E2	; 0x8003e2 <data+0x4>
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	2a 15       	cp	r18, r10
    1c92:	3b 05       	cpc	r19, r11
    1c94:	e1 f5       	brne	.+120    	; 0x1d0e <LFSMread+0x180>
						n=pdata->page - page;	
    1c96:	28 2f       	mov	r18, r24
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	28 19       	sub	r18, r8
    1c9c:	39 09       	sbc	r19, r9
						if(!n){
    1c9e:	49 f4       	brne	.+18     	; 0x1cb2 <LFSMread+0x124>
							i1=r->sizeeeprom;
    1ca0:	12 96       	adiw	r26, 0x02	; 2
    1ca2:	cd 91       	ld	r28, X+
    1ca4:	dc 91       	ld	r29, X
    1ca6:	13 97       	sbiw	r26, 0x03	; 3
							status=3; //Local logic exist in present page
    1ca8:	0f 2e       	mov	r0, r31
    1caa:	f3 e0       	ldi	r31, 0x03	; 3
    1cac:	6f 2e       	mov	r6, r31
    1cae:	f0 2d       	mov	r31, r0
							break;
    1cb0:	2e c0       	rjmp	.+92     	; 0x1d0e <LFSMread+0x180>
						}
						if(n>ZERO){
    1cb2:	12 16       	cp	r1, r18
    1cb4:	13 06       	cpc	r1, r19
    1cb6:	9c f4       	brge	.+38     	; 0x1cde <LFSMread+0x150>
							if(n < n1){
    1cb8:	44 2d       	mov	r20, r4
    1cba:	50 e0       	ldi	r21, 0x00	; 0
    1cbc:	24 17       	cp	r18, r20
    1cbe:	35 07       	cpc	r19, r21
    1cc0:	74 f4       	brge	.+28     	; 0x1cde <LFSMread+0x150>
								tmp1=*pdata;
    1cc2:	9b e0       	ldi	r25, 0x0B	; 11
    1cc4:	ee ed       	ldi	r30, 0xDE	; 222
    1cc6:	f3 e0       	ldi	r31, 0x03	; 3
    1cc8:	a9 ee       	ldi	r26, 0xE9	; 233
    1cca:	b3 e0       	ldi	r27, 0x03	; 3
    1ccc:	01 90       	ld	r0, Z+
    1cce:	0d 92       	st	X+, r0
    1cd0:	9a 95       	dec	r25
    1cd2:	e1 f7       	brne	.-8      	; 0x1ccc <LFSMread+0x13e>
    1cd4:	48 2e       	mov	r4, r24
    1cd6:	45 18       	sub	r4, r5
								n1=n;
								status=4; //Local logic exist in page above
    1cd8:	68 94       	set
    1cda:	66 24       	eor	r6, r6
    1cdc:	62 f8       	bld	r6, 2
							}
						}
						if(n<ZERO){
    1cde:	33 23       	and	r19, r19
    1ce0:	b4 f4       	brge	.+44     	; 0x1d0e <LFSMread+0x180>
							if(n > -n2){
    1ce2:	43 2d       	mov	r20, r3
    1ce4:	50 e0       	ldi	r21, 0x00	; 0
    1ce6:	51 95       	neg	r21
    1ce8:	41 95       	neg	r20
    1cea:	51 09       	sbc	r21, r1
    1cec:	42 17       	cp	r20, r18
    1cee:	53 07       	cpc	r21, r19
    1cf0:	74 f4       	brge	.+28     	; 0x1d0e <LFSMread+0x180>
								tmp2=*pdata;
    1cf2:	9b e0       	ldi	r25, 0x0B	; 11
    1cf4:	ee ed       	ldi	r30, 0xDE	; 222
    1cf6:	f3 e0       	ldi	r31, 0x03	; 3
    1cf8:	a3 ed       	ldi	r26, 0xD3	; 211
    1cfa:	b3 e0       	ldi	r27, 0x03	; 3
    1cfc:	01 90       	ld	r0, Z+
    1cfe:	0d 92       	st	X+, r0
    1d00:	9a 95       	dec	r25
    1d02:	e1 f7       	brne	.-8      	; 0x1cfc <LFSMread+0x16e>
								n2=-n;
    1d04:	35 2c       	mov	r3, r5
    1d06:	38 1a       	sub	r3, r24
								status=4; //Local logic exist in page bellow
    1d08:	68 94       	set
    1d0a:	66 24       	eor	r6, r6
    1d0c:	62 f8       	bld	r6, 2
	uint16_t HL,LH;
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(HL || LH){ //To not waste time
		status=1; //New entry
		for(i1=ZERO;i1<r->sizeeeprom;i1++){
    1d0e:	21 96       	adiw	r28, 0x01	; 1
    1d10:	f8 01       	movw	r30, r16
    1d12:	22 81       	ldd	r18, Z+2	; 0x02
    1d14:	33 81       	ldd	r19, Z+3	; 0x03
    1d16:	c2 17       	cp	r28, r18
    1d18:	d3 07       	cpc	r29, r19
    1d1a:	08 f4       	brcc	.+2      	; 0x1d1e <LFSMread+0x190>
    1d1c:	72 cf       	rjmp	.-284    	; 0x1c02 <LFSMread+0x74>
					break;
			}
		}
	}
	/***status confirmation***/
	switch (status){
    1d1e:	f2 e0       	ldi	r31, 0x02	; 2
    1d20:	6f 16       	cp	r6, r31
    1d22:	89 f0       	breq	.+34     	; 0x1d46 <LFSMread+0x1b8>
    1d24:	f6 15       	cp	r31, r6
    1d26:	20 f0       	brcs	.+8      	; 0x1d30 <LFSMread+0x1a2>
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	68 16       	cp	r6, r24
    1d2c:	49 f0       	breq	.+18     	; 0x1d40 <LFSMread+0x1b2>
    1d2e:	a3 c0       	rjmp	.+326    	; 0x1e76 <LFSMread+0x2e8>
    1d30:	93 e0       	ldi	r25, 0x03	; 3
    1d32:	69 16       	cp	r6, r25
    1d34:	69 f1       	breq	.+90     	; 0x1d90 <LFSMread+0x202>
    1d36:	a4 e0       	ldi	r26, 0x04	; 4
    1d38:	6a 16       	cp	r6, r26
    1d3a:	09 f4       	brne	.+2      	; 0x1d3e <LFSMread+0x1b0>
    1d3c:	4b c0       	rjmp	.+150    	; 0x1dd4 <LFSMread+0x246>
    1d3e:	9b c0       	rjmp	.+310    	; 0x1e76 <LFSMread+0x2e8>
		case ZERO: //No entry
			break;
		case 1: //New entry
			//Give warning and pause waiting for decision (very important).
			//Serves has flag to main function.
			r->input=input; //Update
    1d40:	f8 01       	movw	r30, r16
    1d42:	76 82       	std	Z+6, r7	; 0x06
			break;
    1d44:	98 c0       	rjmp	.+304    	; 0x1e76 <LFSMread+0x2e8>
		case 2: //Global logic exist
			r->page=pdata->page;
    1d46:	d8 01       	movw	r26, r16
    1d48:	15 96       	adiw	r26, 0x05	; 5
    1d4a:	8c 93       	st	X, r24
    1d4c:	15 97       	sbiw	r26, 0x05	; 5
			r->input=input; //Update
    1d4e:	16 96       	adiw	r26, 0x06	; 6
    1d50:	7c 92       	st	X, r7
    1d52:	16 97       	sbiw	r26, 0x06	; 6
			r->output=LFSMoutputcalc(r->output,pdata->outhl,pdata->outlh,pdata->mask);
    1d54:	ee ed       	ldi	r30, 0xDE	; 222
    1d56:	f3 e0       	ldi	r31, 0x03	; 3
    1d58:	65 81       	ldd	r22, Z+5	; 0x05
    1d5a:	76 81       	ldd	r23, Z+6	; 0x06
}
***/
/***uint16_t LFSMoutputcalc(uint16_t feedback, uint16_t hl, uint16_t lh, uint16_t mask)***/
uint16_t LFSMoutputcalc(uint16_t feedback, uint16_t hl, uint16_t lh, uint16_t mask)
{
	feedback|=(lh & mask);
    1d5c:	21 85       	ldd	r18, Z+9	; 0x09
    1d5e:	32 85       	ldd	r19, Z+10	; 0x0a
    1d60:	26 23       	and	r18, r22
    1d62:	37 23       	and	r19, r23
    1d64:	17 96       	adiw	r26, 0x07	; 7
    1d66:	4d 91       	ld	r20, X+
    1d68:	5c 91       	ld	r21, X
    1d6a:	18 97       	sbiw	r26, 0x08	; 8
    1d6c:	24 2b       	or	r18, r20
    1d6e:	35 2b       	or	r19, r21
			r->input=input; //Update
			break;
		case 2: //Global logic exist
			r->page=pdata->page;
			r->input=input; //Update
			r->output=LFSMoutputcalc(r->output,pdata->outhl,pdata->outlh,pdata->mask);
    1d70:	87 81       	ldd	r24, Z+7	; 0x07
    1d72:	90 85       	ldd	r25, Z+8	; 0x08
    1d74:	86 23       	and	r24, r22
    1d76:	97 23       	and	r25, r23
    1d78:	80 95       	com	r24
    1d7a:	90 95       	com	r25
    1d7c:	82 23       	and	r24, r18
    1d7e:	93 23       	and	r25, r19
    1d80:	18 96       	adiw	r26, 0x08	; 8
    1d82:	9c 93       	st	X, r25
    1d84:	8e 93       	st	-X, r24
    1d86:	17 97       	sbiw	r26, 0x07	; 7
			r->status=2;
    1d88:	82 e0       	ldi	r24, 0x02	; 2
    1d8a:	19 96       	adiw	r26, 0x09	; 9
    1d8c:	8c 93       	st	X, r24
			break;
    1d8e:	73 c0       	rjmp	.+230    	; 0x1e76 <LFSMread+0x2e8>
		case 3: //Local logic exist in present page
			r->page=pdata->page;
    1d90:	f8 01       	movw	r30, r16
    1d92:	85 83       	std	Z+5, r24	; 0x05
			r->input=input; //Update
    1d94:	76 82       	std	Z+6, r7	; 0x06
			r->output=LFSMoutputcalc(r->output,pdata->outhl,pdata->outlh,pdata->mask);
    1d96:	ee ed       	ldi	r30, 0xDE	; 222
    1d98:	f3 e0       	ldi	r31, 0x03	; 3
    1d9a:	65 81       	ldd	r22, Z+5	; 0x05
    1d9c:	76 81       	ldd	r23, Z+6	; 0x06
}
***/
/***uint16_t LFSMoutputcalc(uint16_t feedback, uint16_t hl, uint16_t lh, uint16_t mask)***/
uint16_t LFSMoutputcalc(uint16_t feedback, uint16_t hl, uint16_t lh, uint16_t mask)
{
	feedback|=(lh & mask);
    1d9e:	21 85       	ldd	r18, Z+9	; 0x09
    1da0:	32 85       	ldd	r19, Z+10	; 0x0a
    1da2:	26 23       	and	r18, r22
    1da4:	37 23       	and	r19, r23
    1da6:	d8 01       	movw	r26, r16
    1da8:	17 96       	adiw	r26, 0x07	; 7
    1daa:	4d 91       	ld	r20, X+
    1dac:	5c 91       	ld	r21, X
    1dae:	18 97       	sbiw	r26, 0x08	; 8
    1db0:	24 2b       	or	r18, r20
    1db2:	35 2b       	or	r19, r21
			r->status=2;
			break;
		case 3: //Local logic exist in present page
			r->page=pdata->page;
			r->input=input; //Update
			r->output=LFSMoutputcalc(r->output,pdata->outhl,pdata->outlh,pdata->mask);
    1db4:	87 81       	ldd	r24, Z+7	; 0x07
    1db6:	90 85       	ldd	r25, Z+8	; 0x08
    1db8:	86 23       	and	r24, r22
    1dba:	97 23       	and	r25, r23
    1dbc:	80 95       	com	r24
    1dbe:	90 95       	com	r25
    1dc0:	82 23       	and	r24, r18
    1dc2:	93 23       	and	r25, r19
    1dc4:	18 96       	adiw	r26, 0x08	; 8
    1dc6:	9c 93       	st	X, r25
    1dc8:	8e 93       	st	-X, r24
    1dca:	17 97       	sbiw	r26, 0x07	; 7
			r->status=3;
    1dcc:	83 e0       	ldi	r24, 0x03	; 3
    1dce:	19 96       	adiw	r26, 0x09	; 9
    1dd0:	8c 93       	st	X, r24
			break;
    1dd2:	51 c0       	rjmp	.+162    	; 0x1e76 <LFSMread+0x2e8>
		case 4: //Local logic exist in page above versus local logic exist in page bellow
			//Choose closest page above otherwise closest bellow.
			r->input=input; //update
    1dd4:	f8 01       	movw	r30, r16
    1dd6:	76 82       	std	Z+6, r7	; 0x06
			if(n1>ZERO && n1<NPAGES){
    1dd8:	8f ef       	ldi	r24, 0xFF	; 255
    1dda:	84 0d       	add	r24, r4
    1ddc:	8e 3f       	cpi	r24, 0xFE	; 254
    1dde:	20 f5       	brcc	.+72     	; 0x1e28 <LFSMread+0x29a>
				r->page = tmp1.page;
    1de0:	e9 ee       	ldi	r30, 0xE9	; 233
    1de2:	f3 e0       	ldi	r31, 0x03	; 3
    1de4:	80 81       	ld	r24, Z
    1de6:	d8 01       	movw	r26, r16
    1de8:	15 96       	adiw	r26, 0x05	; 5
    1dea:	8c 93       	st	X, r24
    1dec:	15 97       	sbiw	r26, 0x05	; 5
				r->output=LFSMoutputcalc(r->output,tmp1.outhl,tmp1.outlh,tmp1.mask);
    1dee:	65 81       	ldd	r22, Z+5	; 0x05
    1df0:	76 81       	ldd	r23, Z+6	; 0x06
}
***/
/***uint16_t LFSMoutputcalc(uint16_t feedback, uint16_t hl, uint16_t lh, uint16_t mask)***/
uint16_t LFSMoutputcalc(uint16_t feedback, uint16_t hl, uint16_t lh, uint16_t mask)
{
	feedback|=(lh & mask);
    1df2:	21 85       	ldd	r18, Z+9	; 0x09
    1df4:	32 85       	ldd	r19, Z+10	; 0x0a
    1df6:	ab 01       	movw	r20, r22
    1df8:	42 23       	and	r20, r18
    1dfa:	53 23       	and	r21, r19
    1dfc:	17 96       	adiw	r26, 0x07	; 7
    1dfe:	2d 91       	ld	r18, X+
    1e00:	3c 91       	ld	r19, X
    1e02:	18 97       	sbiw	r26, 0x08	; 8
    1e04:	24 2b       	or	r18, r20
    1e06:	35 2b       	or	r19, r21
		case 4: //Local logic exist in page above versus local logic exist in page bellow
			//Choose closest page above otherwise closest bellow.
			r->input=input; //update
			if(n1>ZERO && n1<NPAGES){
				r->page = tmp1.page;
				r->output=LFSMoutputcalc(r->output,tmp1.outhl,tmp1.outlh,tmp1.mask);
    1e08:	87 81       	ldd	r24, Z+7	; 0x07
    1e0a:	90 85       	ldd	r25, Z+8	; 0x08
    1e0c:	86 23       	and	r24, r22
    1e0e:	97 23       	and	r25, r23
    1e10:	80 95       	com	r24
    1e12:	90 95       	com	r25
    1e14:	82 23       	and	r24, r18
    1e16:	93 23       	and	r25, r19
    1e18:	18 96       	adiw	r26, 0x08	; 8
    1e1a:	9c 93       	st	X, r25
    1e1c:	8e 93       	st	-X, r24
    1e1e:	17 97       	sbiw	r26, 0x07	; 7
				r->status=41;
    1e20:	89 e2       	ldi	r24, 0x29	; 41
    1e22:	19 96       	adiw	r26, 0x09	; 9
    1e24:	8c 93       	st	X, r24
    1e26:	27 c0       	rjmp	.+78     	; 0x1e76 <LFSMread+0x2e8>
			}
			else if(n2>ZERO && n2<NPAGES){
    1e28:	8f ef       	ldi	r24, 0xFF	; 255
    1e2a:	83 0d       	add	r24, r3
    1e2c:	8e 3f       	cpi	r24, 0xFE	; 254
    1e2e:	18 f5       	brcc	.+70     	; 0x1e76 <LFSMread+0x2e8>
				r->page=tmp2.page;
    1e30:	e3 ed       	ldi	r30, 0xD3	; 211
    1e32:	f3 e0       	ldi	r31, 0x03	; 3
    1e34:	80 81       	ld	r24, Z
    1e36:	d8 01       	movw	r26, r16
    1e38:	15 96       	adiw	r26, 0x05	; 5
    1e3a:	8c 93       	st	X, r24
    1e3c:	15 97       	sbiw	r26, 0x05	; 5
				r->output=LFSMoutputcalc(r->output,tmp2.outhl,tmp2.outlh,tmp2.mask);
    1e3e:	65 81       	ldd	r22, Z+5	; 0x05
    1e40:	76 81       	ldd	r23, Z+6	; 0x06
}
***/
/***uint16_t LFSMoutputcalc(uint16_t feedback, uint16_t hl, uint16_t lh, uint16_t mask)***/
uint16_t LFSMoutputcalc(uint16_t feedback, uint16_t hl, uint16_t lh, uint16_t mask)
{
	feedback|=(lh & mask);
    1e42:	21 85       	ldd	r18, Z+9	; 0x09
    1e44:	32 85       	ldd	r19, Z+10	; 0x0a
    1e46:	ab 01       	movw	r20, r22
    1e48:	42 23       	and	r20, r18
    1e4a:	53 23       	and	r21, r19
    1e4c:	17 96       	adiw	r26, 0x07	; 7
    1e4e:	2d 91       	ld	r18, X+
    1e50:	3c 91       	ld	r19, X
    1e52:	18 97       	sbiw	r26, 0x08	; 8
    1e54:	24 2b       	or	r18, r20
    1e56:	35 2b       	or	r19, r21
				r->output=LFSMoutputcalc(r->output,tmp1.outhl,tmp1.outlh,tmp1.mask);
				r->status=41;
			}
			else if(n2>ZERO && n2<NPAGES){
				r->page=tmp2.page;
				r->output=LFSMoutputcalc(r->output,tmp2.outhl,tmp2.outlh,tmp2.mask);
    1e58:	87 81       	ldd	r24, Z+7	; 0x07
    1e5a:	90 85       	ldd	r25, Z+8	; 0x08
    1e5c:	86 23       	and	r24, r22
    1e5e:	97 23       	and	r25, r23
    1e60:	80 95       	com	r24
    1e62:	90 95       	com	r25
    1e64:	82 23       	and	r24, r18
    1e66:	93 23       	and	r25, r19
    1e68:	18 96       	adiw	r26, 0x08	; 8
    1e6a:	9c 93       	st	X, r25
    1e6c:	8e 93       	st	-X, r24
    1e6e:	17 97       	sbiw	r26, 0x07	; 7
				r->status=42;
    1e70:	8a e2       	ldi	r24, 0x2A	; 42
    1e72:	19 96       	adiw	r26, 0x09	; 9
    1e74:	8c 93       	st	X, r24
			break;
		default:
			break;
	}
	return r->status;
}
    1e76:	f8 01       	movw	r30, r16
    1e78:	81 85       	ldd	r24, Z+9	; 0x09
    1e7a:	df 91       	pop	r29
    1e7c:	cf 91       	pop	r28
    1e7e:	1f 91       	pop	r17
    1e80:	0f 91       	pop	r16
    1e82:	ff 90       	pop	r15
    1e84:	ef 90       	pop	r14
    1e86:	df 90       	pop	r13
    1e88:	cf 90       	pop	r12
    1e8a:	bf 90       	pop	r11
    1e8c:	af 90       	pop	r10
    1e8e:	9f 90       	pop	r9
    1e90:	8f 90       	pop	r8
    1e92:	7f 90       	pop	r7
    1e94:	6f 90       	pop	r6
    1e96:	5f 90       	pop	r5
    1e98:	4f 90       	pop	r4
    1e9a:	3f 90       	pop	r3
    1e9c:	2f 90       	pop	r2
    1e9e:	08 95       	ret

00001ea0 <LFSMremove>:
	}
	return programmed;
}
/***uint8_t LFSMremove(struct lfsm *r, uint8_t input)***/
uint8_t LFSMremove(struct lfsm *r, uint8_t input)
{
    1ea0:	2f 92       	push	r2
    1ea2:	3f 92       	push	r3
    1ea4:	4f 92       	push	r4
    1ea6:	5f 92       	push	r5
    1ea8:	6f 92       	push	r6
    1eaa:	7f 92       	push	r7
    1eac:	8f 92       	push	r8
    1eae:	9f 92       	push	r9
    1eb0:	af 92       	push	r10
    1eb2:	bf 92       	push	r11
    1eb4:	cf 92       	push	r12
    1eb6:	df 92       	push	r13
    1eb8:	ef 92       	push	r14
    1eba:	ff 92       	push	r15
    1ebc:	0f 93       	push	r16
    1ebe:	1f 93       	push	r17
    1ec0:	cf 93       	push	r28
    1ec2:	df 93       	push	r29
    1ec4:	cd b7       	in	r28, 0x3d	; 61
    1ec6:	de b7       	in	r29, 0x3e	; 62
    1ec8:	29 97       	sbiw	r28, 0x09	; 9
    1eca:	0f b6       	in	r0, 0x3f	; 63
    1ecc:	f8 94       	cli
    1ece:	de bf       	out	0x3e, r29	; 62
    1ed0:	0f be       	out	0x3f, r0	; 63
    1ed2:	cd bf       	out	0x3d, r28	; 61
    1ed4:	fc 01       	movw	r30, r24
	uint16_t k,k1,k2,i1;
	k=k1=k2=ZERO;
	uint8_t status=ZERO;
	uint8_t sizeblock=r->sizeblock;
    1ed6:	84 81       	ldd	r24, Z+4	; 0x04
    1ed8:	8f 83       	std	Y+7, r24	; 0x07
	struct lfsmdata* pdata=&data;
	struct lfsmdata* ptmp1=&tmp1;
	ptmp1->page=ZERO;
    1eda:	10 92 e9 03 	sts	0x03E9, r1	; 0x8003e9 <tmp1>
	int16_t n=ZERO;
	uint8_t n1=NPAGES,n2=NPAGES;
	uint8_t page=r->page;
	uint16_t HL,LH;
	HL=LFSMhl(r->input,input);
    1ede:	e6 80       	ldd	r14, Z+6	; 0x06
    1ee0:	96 2f       	mov	r25, r22
    1ee2:	9e 25       	eor	r25, r14
/***uint16_t LFSMhl(uint16_t xi, uint16_t xf)***/
uint16_t LFSMhl(uint16_t xi, uint16_t xf)
{
	uint16_t i;
	i=xf^xi;
	i&=xi;
    1ee4:	e9 22       	and	r14, r25
    1ee6:	f1 2c       	mov	r15, r1
/***uint16_t LFSMlh(uint16_t xi, uint16_t xf)***/
uint16_t LFSMlh(uint16_t xi, uint16_t xf)
{
	uint16_t i;
	i=xf^xi;
	i&=xf;
    1ee8:	96 23       	and	r25, r22
    1eea:	a9 2e       	mov	r10, r25
    1eec:	b1 2c       	mov	r11, r1
	uint8_t n1=NPAGES,n2=NPAGES;
	uint8_t page=r->page;
	uint16_t HL,LH;
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(HL || LH){ //To not waste time
    1eee:	e1 14       	cp	r14, r1
    1ef0:	f1 04       	cpc	r15, r1
    1ef2:	39 f0       	breq	.+14     	; 0x1f02 <LFSMremove+0x62>
		status=1; //New entry
		for(i1=ZERO;i1<r->sizeeeprom;i1++){
    1ef4:	82 81       	ldd	r24, Z+2	; 0x02
    1ef6:	93 81       	ldd	r25, Z+3	; 0x03
    1ef8:	89 2b       	or	r24, r25
    1efa:	41 f4       	brne	.+16     	; 0x1f0c <LFSMremove+0x6c>
    1efc:	91 e0       	ldi	r25, 0x01	; 1
    1efe:	99 83       	std	Y+1, r25	; 0x01
    1f00:	fe c0       	rjmp	.+508    	; 0x20fe <LFSMremove+0x25e>
	uint8_t n1=NPAGES,n2=NPAGES;
	uint8_t page=r->page;
	uint16_t HL,LH;
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(HL || LH){ //To not waste time
    1f02:	a1 14       	cp	r10, r1
    1f04:	b1 04       	cpc	r11, r1
    1f06:	b1 f7       	brne	.-20     	; 0x1ef4 <LFSMremove+0x54>
/***uint8_t LFSMremove(struct lfsm *r, uint8_t input)***/
uint8_t LFSMremove(struct lfsm *r, uint8_t input)
{
	uint16_t k,k1,k2,i1;
	k=k1=k2=ZERO;
	uint8_t status=ZERO;
    1f08:	19 82       	std	Y+1, r1	; 0x01
    1f0a:	f9 c0       	rjmp	.+498    	; 0x20fe <LFSMremove+0x25e>
    1f0c:	8f 01       	movw	r16, r30
	struct lfsmdata* pdata=&data;
	struct lfsmdata* ptmp1=&tmp1;
	ptmp1->page=ZERO;
	int16_t n=ZERO;
	uint8_t n1=NPAGES,n2=NPAGES;
	uint8_t page=r->page;
    1f0e:	55 80       	ldd	r5, Z+5	; 0x05
    1f10:	44 24       	eor	r4, r4
    1f12:	4a 94       	dec	r4
    1f14:	af ef       	ldi	r26, 0xFF	; 255
    1f16:	aa 83       	std	Y+2, r26	; 0x02
    1f18:	b1 e0       	ldi	r27, 0x01	; 1
    1f1a:	b9 83       	std	Y+1, r27	; 0x01
    1f1c:	81 2c       	mov	r8, r1
    1f1e:	91 2c       	mov	r9, r1
    1f20:	1e 82       	std	Y+6, r1	; 0x06
    1f22:	1d 82       	std	Y+5, r1	; 0x05
    1f24:	1c 82       	std	Y+4, r1	; 0x04
    1f26:	1b 82       	std	Y+3, r1	; 0x03
    1f28:	21 2c       	mov	r2, r1
    1f2a:	31 2c       	mov	r3, r1
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(HL || LH){ //To not waste time
		status=1; //New entry
		for(i1=ZERO;i1<r->sizeeeprom;i1++){
			r->eprom->read_block(pdata, (const void*) (i1*sizeblock), sizeblock);
    1f2c:	ff 81       	ldd	r31, Y+7	; 0x07
    1f2e:	ef 2f       	mov	r30, r31
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
						status=2; //Global logic exist
					}
					break;
				default: //Local logic
					if( (pdata->feedback & pdata->mask)==(r->output & pdata->mask) && pdata->inhl==HL && pdata->inlh==LH ){
						n=pdata->page - page;
    1f32:	65 2c       	mov	r6, r5
    1f34:	71 2c       	mov	r7, r1
					break;
				case 1: //Global logic
					if( pdata->inhl==HL && pdata->inlh==LH ){
						k=i1;
						i1=r->sizeeeprom;
						status=2; //Global logic exist
    1f36:	f9 87       	std	Y+9, r31	; 0x09
    1f38:	e8 87       	std	Y+8, r30	; 0x08
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(HL || LH){ //To not waste time
		status=1; //New entry
		for(i1=ZERO;i1<r->sizeeeprom;i1++){
			r->eprom->read_block(pdata, (const void*) (i1*sizeblock), sizeblock);
    1f3a:	c8 84       	ldd	r12, Y+8	; 0x08
    1f3c:	d9 84       	ldd	r13, Y+9	; 0x09
    1f3e:	c8 9c       	mul	r12, r8
    1f40:	b0 01       	movw	r22, r0
    1f42:	c9 9c       	mul	r12, r9
    1f44:	70 0d       	add	r23, r0
    1f46:	d8 9c       	mul	r13, r8
    1f48:	70 0d       	add	r23, r0
    1f4a:	11 24       	eor	r1, r1
    1f4c:	d8 01       	movw	r26, r16
    1f4e:	ed 91       	ld	r30, X+
    1f50:	fc 91       	ld	r31, X
    1f52:	00 8c       	ldd	r0, Z+24	; 0x18
    1f54:	f1 8d       	ldd	r31, Z+25	; 0x19
    1f56:	e0 2d       	mov	r30, r0
    1f58:	a6 01       	movw	r20, r12
    1f5a:	8e ed       	ldi	r24, 0xDE	; 222
    1f5c:	93 e0       	ldi	r25, 0x03	; 3
    1f5e:	09 95       	icall
			switch(pdata->page){
    1f60:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <data>
    1f64:	88 23       	and	r24, r24
    1f66:	09 f4       	brne	.+2      	; 0x1f6a <LFSMremove+0xca>
    1f68:	61 c0       	rjmp	.+194    	; 0x202c <LFSMremove+0x18c>
    1f6a:	81 30       	cpi	r24, 0x01	; 1
    1f6c:	a9 f4       	brne	.+42     	; 0x1f98 <LFSMremove+0xf8>
				case 0:
					//Do nothing, continue search in status=1.
					break;
				case 1: //Global logic
					if( pdata->inhl==HL && pdata->inlh==LH ){
    1f6e:	80 91 e1 03 	lds	r24, 0x03E1	; 0x8003e1 <data+0x3>
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	8e 15       	cp	r24, r14
    1f76:	9f 05       	cpc	r25, r15
    1f78:	09 f0       	breq	.+2      	; 0x1f7c <LFSMremove+0xdc>
    1f7a:	58 c0       	rjmp	.+176    	; 0x202c <LFSMremove+0x18c>
    1f7c:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <data+0x4>
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	8a 15       	cp	r24, r10
    1f84:	9b 05       	cpc	r25, r11
    1f86:	09 f0       	breq	.+2      	; 0x1f8a <LFSMremove+0xea>
    1f88:	51 c0       	rjmp	.+162    	; 0x202c <LFSMremove+0x18c>
						k=i1;
						i1=r->sizeeeprom;
    1f8a:	14 01       	movw	r2, r8
    1f8c:	f8 01       	movw	r30, r16
    1f8e:	82 80       	ldd	r8, Z+2	; 0x02
    1f90:	93 80       	ldd	r9, Z+3	; 0x03
						status=2; //Global logic exist
    1f92:	f2 e0       	ldi	r31, 0x02	; 2
    1f94:	f9 83       	std	Y+1, r31	; 0x01
    1f96:	4a c0       	rjmp	.+148    	; 0x202c <LFSMremove+0x18c>
					}
					break;
				default: //Local logic
					if( (pdata->feedback & pdata->mask)==(r->output & pdata->mask) && pdata->inhl==HL && pdata->inlh==LH ){
    1f98:	ee ed       	ldi	r30, 0xDE	; 222
    1f9a:	f3 e0       	ldi	r31, 0x03	; 3
    1f9c:	41 81       	ldd	r20, Z+1	; 0x01
    1f9e:	52 81       	ldd	r21, Z+2	; 0x02
    1fa0:	d8 01       	movw	r26, r16
    1fa2:	17 96       	adiw	r26, 0x07	; 7
    1fa4:	2d 91       	ld	r18, X+
    1fa6:	3c 91       	ld	r19, X
    1fa8:	18 97       	sbiw	r26, 0x08	; 8
    1faa:	24 27       	eor	r18, r20
    1fac:	35 27       	eor	r19, r21
    1fae:	45 81       	ldd	r20, Z+5	; 0x05
    1fb0:	56 81       	ldd	r21, Z+6	; 0x06
    1fb2:	24 23       	and	r18, r20
    1fb4:	35 23       	and	r19, r21
    1fb6:	23 2b       	or	r18, r19
    1fb8:	c9 f5       	brne	.+114    	; 0x202c <LFSMremove+0x18c>
    1fba:	20 91 e1 03 	lds	r18, 0x03E1	; 0x8003e1 <data+0x3>
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	2e 15       	cp	r18, r14
    1fc2:	3f 05       	cpc	r19, r15
    1fc4:	99 f5       	brne	.+102    	; 0x202c <LFSMremove+0x18c>
    1fc6:	20 91 e2 03 	lds	r18, 0x03E2	; 0x8003e2 <data+0x4>
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	2a 15       	cp	r18, r10
    1fce:	3b 05       	cpc	r19, r11
    1fd0:	69 f5       	brne	.+90     	; 0x202c <LFSMremove+0x18c>
						n=pdata->page - page;
    1fd2:	28 2f       	mov	r18, r24
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	26 19       	sub	r18, r6
    1fd8:	37 09       	sbc	r19, r7
						if(!n){
    1fda:	41 f4       	brne	.+16     	; 0x1fec <LFSMremove+0x14c>
							k=i1;
							i1=r->sizeeeprom;
							status=3; //Local logic exist in present page
							break;
    1fdc:	14 01       	movw	r2, r8
				default: //Local logic
					if( (pdata->feedback & pdata->mask)==(r->output & pdata->mask) && pdata->inhl==HL && pdata->inlh==LH ){
						n=pdata->page - page;
						if(!n){
							k=i1;
							i1=r->sizeeeprom;
    1fde:	12 96       	adiw	r26, 0x02	; 2
    1fe0:	8d 90       	ld	r8, X+
    1fe2:	9c 90       	ld	r9, X
    1fe4:	13 97       	sbiw	r26, 0x03	; 3
							status=3; //Local logic exist in present page
    1fe6:	b3 e0       	ldi	r27, 0x03	; 3
    1fe8:	b9 83       	std	Y+1, r27	; 0x01
							break;
    1fea:	20 c0       	rjmp	.+64     	; 0x202c <LFSMremove+0x18c>
						}
						if(n>ZERO){
    1fec:	12 16       	cp	r1, r18
    1fee:	13 06       	cpc	r1, r19
    1ff0:	6c f4       	brge	.+26     	; 0x200c <LFSMremove+0x16c>
							if(n < n1){
    1ff2:	ea 81       	ldd	r30, Y+2	; 0x02
    1ff4:	4e 2f       	mov	r20, r30
    1ff6:	50 e0       	ldi	r21, 0x00	; 0
    1ff8:	24 17       	cp	r18, r20
    1ffa:	35 07       	cpc	r19, r21
    1ffc:	3c f4       	brge	.+14     	; 0x200c <LFSMremove+0x16c>
    1ffe:	f8 2f       	mov	r31, r24
    2000:	f5 19       	sub	r31, r5
    2002:	fa 83       	std	Y+2, r31	; 0x02
    2004:	9c 82       	std	Y+4, r9	; 0x04
    2006:	8b 82       	std	Y+3, r8	; 0x03
								k1=i1;
								n1=n;
								status=4; //Local logic exist in page above
    2008:	94 e0       	ldi	r25, 0x04	; 4
    200a:	99 83       	std	Y+1, r25	; 0x01
							}
						}
						if(n<ZERO){
    200c:	33 23       	and	r19, r19
    200e:	74 f4       	brge	.+28     	; 0x202c <LFSMremove+0x18c>
							if(n > -n2){
    2010:	44 2d       	mov	r20, r4
    2012:	50 e0       	ldi	r21, 0x00	; 0
    2014:	51 95       	neg	r21
    2016:	41 95       	neg	r20
    2018:	51 09       	sbc	r21, r1
    201a:	42 17       	cp	r20, r18
    201c:	53 07       	cpc	r21, r19
    201e:	34 f4       	brge	.+12     	; 0x202c <LFSMremove+0x18c>
								k2=i1;
								n2=-n;
    2020:	45 2c       	mov	r4, r5
    2022:	48 1a       	sub	r4, r24
    2024:	9e 82       	std	Y+6, r9	; 0x06
    2026:	8d 82       	std	Y+5, r8	; 0x05
								status=4; //Local logic exist in page bellow
    2028:	a4 e0       	ldi	r26, 0x04	; 4
    202a:	a9 83       	std	Y+1, r26	; 0x01
	uint16_t HL,LH;
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(HL || LH){ //To not waste time
		status=1; //New entry
		for(i1=ZERO;i1<r->sizeeeprom;i1++){
    202c:	bf ef       	ldi	r27, 0xFF	; 255
    202e:	8b 1a       	sub	r8, r27
    2030:	9b 0a       	sbc	r9, r27
    2032:	f8 01       	movw	r30, r16
    2034:	82 81       	ldd	r24, Z+2	; 0x02
    2036:	93 81       	ldd	r25, Z+3	; 0x03
    2038:	88 16       	cp	r8, r24
    203a:	99 06       	cpc	r9, r25
    203c:	08 f4       	brcc	.+2      	; 0x2040 <LFSMremove+0x1a0>
    203e:	7d cf       	rjmp	.-262    	; 0x1f3a <LFSMremove+0x9a>
				break;
			}
		}
	}
	/***status confirmation***/
	switch (status){
    2040:	f9 81       	ldd	r31, Y+1	; 0x01
    2042:	f3 30       	cpi	r31, 0x03	; 3
    2044:	b9 f0       	breq	.+46     	; 0x2074 <LFSMremove+0x1d4>
    2046:	f4 30       	cpi	r31, 0x04	; 4
    2048:	39 f1       	breq	.+78     	; 0x2098 <LFSMremove+0x1f8>
    204a:	f2 30       	cpi	r31, 0x02	; 2
    204c:	09 f0       	breq	.+2      	; 0x2050 <LFSMremove+0x1b0>
    204e:	57 c0       	rjmp	.+174    	; 0x20fe <LFSMremove+0x25e>
		case ZERO: //No entry
			break;
		case 1: //New entry
			break;
		case 2: //Global logic exist
			r->eprom->update_block(ptmp1, (void*) (k*sizeblock), sizeblock);
    2050:	2c 9c       	mul	r2, r12
    2052:	b0 01       	movw	r22, r0
    2054:	2d 9c       	mul	r2, r13
    2056:	70 0d       	add	r23, r0
    2058:	3c 9c       	mul	r3, r12
    205a:	70 0d       	add	r23, r0
    205c:	11 24       	eor	r1, r1
    205e:	d8 01       	movw	r26, r16
    2060:	ed 91       	ld	r30, X+
    2062:	fc 91       	ld	r31, X
    2064:	04 8c       	ldd	r0, Z+28	; 0x1c
    2066:	f5 8d       	ldd	r31, Z+29	; 0x1d
    2068:	e0 2d       	mov	r30, r0
    206a:	a6 01       	movw	r20, r12
    206c:	89 ee       	ldi	r24, 0xE9	; 233
    206e:	93 e0       	ldi	r25, 0x03	; 3
    2070:	09 95       	icall
			break;
    2072:	45 c0       	rjmp	.+138    	; 0x20fe <LFSMremove+0x25e>
		case 3: //Local logic exist in present page
			r->eprom->update_block(ptmp1, (void*) (k*sizeblock), sizeblock);
    2074:	2c 9c       	mul	r2, r12
    2076:	b0 01       	movw	r22, r0
    2078:	2d 9c       	mul	r2, r13
    207a:	70 0d       	add	r23, r0
    207c:	3c 9c       	mul	r3, r12
    207e:	70 0d       	add	r23, r0
    2080:	11 24       	eor	r1, r1
    2082:	d8 01       	movw	r26, r16
    2084:	ed 91       	ld	r30, X+
    2086:	fc 91       	ld	r31, X
    2088:	04 8c       	ldd	r0, Z+28	; 0x1c
    208a:	f5 8d       	ldd	r31, Z+29	; 0x1d
    208c:	e0 2d       	mov	r30, r0
    208e:	a6 01       	movw	r20, r12
    2090:	89 ee       	ldi	r24, 0xE9	; 233
    2092:	93 e0       	ldi	r25, 0x03	; 3
    2094:	09 95       	icall
			break;
    2096:	33 c0       	rjmp	.+102    	; 0x20fe <LFSMremove+0x25e>
		case 4: //Local logic exist in page above versus local logic exist in page bellow
			//choose closest page above otherwise closest bellow.
			if(n1>ZERO && n1<NPAGES){
    2098:	8a 81       	ldd	r24, Y+2	; 0x02
    209a:	81 50       	subi	r24, 0x01	; 1
    209c:	8e 3f       	cpi	r24, 0xFE	; 254
    209e:	b0 f4       	brcc	.+44     	; 0x20cc <LFSMremove+0x22c>
				r->eprom->update_block(ptmp1, (void*) (k1*sizeblock), sizeblock);
    20a0:	eb 81       	ldd	r30, Y+3	; 0x03
    20a2:	fc 81       	ldd	r31, Y+4	; 0x04
    20a4:	ec 9d       	mul	r30, r12
    20a6:	b0 01       	movw	r22, r0
    20a8:	ed 9d       	mul	r30, r13
    20aa:	70 0d       	add	r23, r0
    20ac:	fc 9d       	mul	r31, r12
    20ae:	70 0d       	add	r23, r0
    20b0:	11 24       	eor	r1, r1
    20b2:	d8 01       	movw	r26, r16
    20b4:	ed 91       	ld	r30, X+
    20b6:	fc 91       	ld	r31, X
    20b8:	04 8c       	ldd	r0, Z+28	; 0x1c
    20ba:	f5 8d       	ldd	r31, Z+29	; 0x1d
    20bc:	e0 2d       	mov	r30, r0
    20be:	a6 01       	movw	r20, r12
    20c0:	89 ee       	ldi	r24, 0xE9	; 233
    20c2:	93 e0       	ldi	r25, 0x03	; 3
    20c4:	09 95       	icall
				status=41;
    20c6:	b9 e2       	ldi	r27, 0x29	; 41
    20c8:	b9 83       	std	Y+1, r27	; 0x01
    20ca:	19 c0       	rjmp	.+50     	; 0x20fe <LFSMremove+0x25e>
			}
			else if(n2>ZERO && n2<NPAGES){
    20cc:	8f ef       	ldi	r24, 0xFF	; 255
    20ce:	84 0d       	add	r24, r4
    20d0:	8e 3f       	cpi	r24, 0xFE	; 254
    20d2:	a8 f4       	brcc	.+42     	; 0x20fe <LFSMremove+0x25e>
				r->eprom->update_block(ptmp1, (void*) (k2*sizeblock), sizeblock);
    20d4:	ed 81       	ldd	r30, Y+5	; 0x05
    20d6:	fe 81       	ldd	r31, Y+6	; 0x06
    20d8:	ec 9d       	mul	r30, r12
    20da:	b0 01       	movw	r22, r0
    20dc:	ed 9d       	mul	r30, r13
    20de:	70 0d       	add	r23, r0
    20e0:	fc 9d       	mul	r31, r12
    20e2:	70 0d       	add	r23, r0
    20e4:	11 24       	eor	r1, r1
    20e6:	d8 01       	movw	r26, r16
    20e8:	ed 91       	ld	r30, X+
    20ea:	fc 91       	ld	r31, X
    20ec:	04 8c       	ldd	r0, Z+28	; 0x1c
    20ee:	f5 8d       	ldd	r31, Z+29	; 0x1d
    20f0:	e0 2d       	mov	r30, r0
    20f2:	a6 01       	movw	r20, r12
    20f4:	89 ee       	ldi	r24, 0xE9	; 233
    20f6:	93 e0       	ldi	r25, 0x03	; 3
    20f8:	09 95       	icall
				status=42;
    20fa:	ba e2       	ldi	r27, 0x2A	; 42
    20fc:	b9 83       	std	Y+1, r27	; 0x01
			break;
		default:
			break;
	}
	return status;
}
    20fe:	89 81       	ldd	r24, Y+1	; 0x01
    2100:	29 96       	adiw	r28, 0x09	; 9
    2102:	0f b6       	in	r0, 0x3f	; 63
    2104:	f8 94       	cli
    2106:	de bf       	out	0x3e, r29	; 62
    2108:	0f be       	out	0x3f, r0	; 63
    210a:	cd bf       	out	0x3d, r28	; 61
    210c:	df 91       	pop	r29
    210e:	cf 91       	pop	r28
    2110:	1f 91       	pop	r17
    2112:	0f 91       	pop	r16
    2114:	ff 90       	pop	r15
    2116:	ef 90       	pop	r14
    2118:	df 90       	pop	r13
    211a:	cf 90       	pop	r12
    211c:	bf 90       	pop	r11
    211e:	af 90       	pop	r10
    2120:	9f 90       	pop	r9
    2122:	8f 90       	pop	r8
    2124:	7f 90       	pop	r7
    2126:	6f 90       	pop	r6
    2128:	5f 90       	pop	r5
    212a:	4f 90       	pop	r4
    212c:	3f 90       	pop	r3
    212e:	2f 90       	pop	r2
    2130:	08 95       	ret

00002132 <LFSMlearn>:
	}
	return r->status;
}
/***uint8_t LFSMlearn(struct lfsm *r, const uint8_t input, const uint16_t next, const uint16_t mask, const uint8_t page)***/
uint8_t LFSMlearn(struct lfsm *r, const uint8_t input, const uint16_t next, const uint16_t mask, const uint8_t page)
{
    2132:	2f 92       	push	r2
    2134:	3f 92       	push	r3
    2136:	4f 92       	push	r4
    2138:	5f 92       	push	r5
    213a:	6f 92       	push	r6
    213c:	7f 92       	push	r7
    213e:	8f 92       	push	r8
    2140:	9f 92       	push	r9
    2142:	af 92       	push	r10
    2144:	bf 92       	push	r11
    2146:	cf 92       	push	r12
    2148:	df 92       	push	r13
    214a:	ef 92       	push	r14
    214c:	ff 92       	push	r15
    214e:	0f 93       	push	r16
    2150:	1f 93       	push	r17
    2152:	cf 93       	push	r28
    2154:	df 93       	push	r29
    2156:	00 d0       	rcall	.+0      	; 0x2158 <LFSMlearn+0x26>
    2158:	00 d0       	rcall	.+0      	; 0x215a <LFSMlearn+0x28>
    215a:	1f 92       	push	r1
    215c:	cd b7       	in	r28, 0x3d	; 61
    215e:	de b7       	in	r29, 0x3e	; 62
    2160:	49 01       	movw	r8, r18
	struct lfsmdata* pdata=&data;
	struct lfsmdata* ptmp1=&tmp1;
	uint16_t HL,LH;
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(page>ZERO){ //Enable
    2162:	00 23       	and	r16, r16
    2164:	09 f4       	brne	.+2      	; 0x2168 <LFSMlearn+0x36>
    2166:	e2 c0       	rjmp	.+452    	; 0x232c <LFSMlearn+0x1fa>
	uint8_t status=ZERO;
	uint8_t sizeblock=r->sizeblock;
	struct lfsmdata* pdata=&data;
	struct lfsmdata* ptmp1=&tmp1;
	uint16_t HL,LH;
	HL=LFSMhl(r->input,input);
    2168:	dc 01       	movw	r26, r24
    216a:	16 96       	adiw	r26, 0x06	; 6
    216c:	2c 90       	ld	r2, X
    216e:	36 2f       	mov	r19, r22
    2170:	32 25       	eor	r19, r2
    2172:	23 22       	and	r2, r19
/***uint16_t LFSMhl(uint16_t xi, uint16_t xf)***/
uint16_t LFSMhl(uint16_t xi, uint16_t xf)
{
	uint16_t i;
	i=xf^xi;
	i&=xi;
    2174:	62 2c       	mov	r6, r2
    2176:	71 2c       	mov	r7, r1
    2178:	63 23       	and	r22, r19
    217a:	69 83       	std	Y+1, r22	; 0x01
/***uint16_t LFSMlh(uint16_t xi, uint16_t xf)***/
uint16_t LFSMlh(uint16_t xi, uint16_t xf)
{
	uint16_t i;
	i=xf^xi;
	i&=xf;
    217c:	e6 2f       	mov	r30, r22
    217e:	f0 e0       	ldi	r31, 0x00	; 0
    2180:	fb 83       	std	Y+3, r31	; 0x03
    2182:	ea 83       	std	Y+2, r30	; 0x02
	struct lfsmdata* ptmp1=&tmp1;
	uint16_t HL,LH;
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(page>ZERO){ //Enable
		if(HL || LH){ //There is a change ?
    2184:	61 14       	cp	r6, r1
    2186:	71 04       	cpc	r7, r1
    2188:	49 f0       	breq	.+18     	; 0x219c <LFSMlearn+0x6a>
			for(i1=ZERO;i1<r->sizeeeprom;i1++){
    218a:	dc 01       	movw	r26, r24
    218c:	12 96       	adiw	r26, 0x02	; 2
    218e:	2d 91       	ld	r18, X+
    2190:	3c 91       	ld	r19, X
    2192:	13 97       	sbiw	r26, 0x03	; 3
    2194:	23 2b       	or	r18, r19
    2196:	41 f4       	brne	.+16     	; 0x21a8 <LFSMlearn+0x76>
    2198:	10 e0       	ldi	r17, 0x00	; 0
    219a:	cb c0       	rjmp	.+406    	; 0x2332 <LFSMlearn+0x200>
	struct lfsmdata* ptmp1=&tmp1;
	uint16_t HL,LH;
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(page>ZERO){ //Enable
		if(HL || LH){ //There is a change ?
    219c:	ea 81       	ldd	r30, Y+2	; 0x02
    219e:	fb 81       	ldd	r31, Y+3	; 0x03
    21a0:	ef 2b       	or	r30, r31
    21a2:	99 f7       	brne	.-26     	; 0x218a <LFSMlearn+0x58>
    21a4:	10 e0       	ldi	r17, 0x00	; 0
    21a6:	c5 c0       	rjmp	.+394    	; 0x2332 <LFSMlearn+0x200>
    21a8:	30 2e       	mov	r3, r16
    21aa:	2a 01       	movw	r4, r20
    21ac:	9d 83       	std	Y+5, r25	; 0x05
    21ae:	8c 83       	std	Y+4, r24	; 0x04
    21b0:	dc 01       	movw	r26, r24
    21b2:	14 96       	adiw	r26, 0x04	; 4
    21b4:	ec 90       	ld	r14, X
    21b6:	f1 2c       	mov	r15, r1
/***uint8_t LFSMlearn(struct lfsm *r, const uint8_t input, const uint16_t next, const uint16_t mask, const uint8_t page)***/
uint8_t LFSMlearn(struct lfsm *r, const uint8_t input, const uint16_t next, const uint16_t mask, const uint8_t page)
{
	uint16_t i1;
	uint8_t status=ZERO;
	uint8_t sizeblock=r->sizeblock;
    21b8:	c1 2c       	mov	r12, r1
    21ba:	d1 2c       	mov	r13, r1
    21bc:	10 e0       	ldi	r17, 0x00	; 0
    21be:	a1 2c       	mov	r10, r1
    21c0:	b1 2c       	mov	r11, r1
					if( (pdata->page==1 && pdata->inhl==HL && pdata->inlh==LH)
					|| (pdata->page==page && (pdata->feedback & mask)==(r->output & mask) && pdata->inhl==HL && pdata->inlh==LH) ){
						break;
					}
				}
				status=1; //Record
    21c2:	01 e0       	ldi	r16, 0x01	; 1
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(page>ZERO){ //Enable
		if(HL || LH){ //There is a change ?
			for(i1=ZERO;i1<r->sizeeeprom;i1++){
				r->eprom->read_block(pdata, (const void*) (i1*sizeblock), sizeblock);
    21c4:	ac 81       	ldd	r26, Y+4	; 0x04
    21c6:	bd 81       	ldd	r27, Y+5	; 0x05
    21c8:	ed 91       	ld	r30, X+
    21ca:	fc 91       	ld	r31, X
    21cc:	00 8c       	ldd	r0, Z+24	; 0x18
    21ce:	f1 8d       	ldd	r31, Z+25	; 0x19
    21d0:	e0 2d       	mov	r30, r0
    21d2:	a7 01       	movw	r20, r14
    21d4:	b6 01       	movw	r22, r12
    21d6:	8e ed       	ldi	r24, 0xDE	; 222
    21d8:	93 e0       	ldi	r25, 0x03	; 3
    21da:	09 95       	icall
				if(pdata->page){ //Find if it exists already
    21dc:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <data>
    21e0:	88 23       	and	r24, r24
    21e2:	01 f1       	breq	.+64     	; 0x2224 <LFSMlearn+0xf2>
					if( (pdata->page==1 && pdata->inhl==HL && pdata->inlh==LH)
    21e4:	81 30       	cpi	r24, 0x01	; 1
    21e6:	81 f0       	breq	.+32     	; 0x2208 <LFSMlearn+0xd6>
					|| (pdata->page==page && (pdata->feedback & mask)==(r->output & mask) && pdata->inhl==HL && pdata->inlh==LH) ){
    21e8:	38 12       	cpse	r3, r24
    21ea:	1c c0       	rjmp	.+56     	; 0x2224 <LFSMlearn+0xf2>
    21ec:	20 91 df 03 	lds	r18, 0x03DF	; 0x8003df <data+0x1>
    21f0:	30 91 e0 03 	lds	r19, 0x03E0	; 0x8003e0 <data+0x2>
    21f4:	ec 81       	ldd	r30, Y+4	; 0x04
    21f6:	fd 81       	ldd	r31, Y+5	; 0x05
    21f8:	87 81       	ldd	r24, Z+7	; 0x07
    21fa:	90 85       	ldd	r25, Z+8	; 0x08
    21fc:	82 27       	eor	r24, r18
    21fe:	93 27       	eor	r25, r19
    2200:	88 21       	and	r24, r8
    2202:	99 21       	and	r25, r9
    2204:	89 2b       	or	r24, r25
    2206:	71 f4       	brne	.+28     	; 0x2224 <LFSMlearn+0xf2>
    2208:	80 91 e1 03 	lds	r24, 0x03E1	; 0x8003e1 <data+0x3>
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	86 15       	cp	r24, r6
    2210:	97 05       	cpc	r25, r7
    2212:	41 f4       	brne	.+16     	; 0x2224 <LFSMlearn+0xf2>
    2214:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <data+0x4>
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	2a 81       	ldd	r18, Y+2	; 0x02
    221c:	3b 81       	ldd	r19, Y+3	; 0x03
    221e:	82 17       	cp	r24, r18
    2220:	93 07       	cpc	r25, r19
    2222:	81 f0       	breq	.+32     	; 0x2244 <LFSMlearn+0x112>
	uint16_t HL,LH;
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(page>ZERO){ //Enable
		if(HL || LH){ //There is a change ?
			for(i1=ZERO;i1<r->sizeeeprom;i1++){
    2224:	3f ef       	ldi	r19, 0xFF	; 255
    2226:	a3 1a       	sub	r10, r19
    2228:	b3 0a       	sbc	r11, r19
    222a:	ce 0c       	add	r12, r14
    222c:	df 1c       	adc	r13, r15
					if( (pdata->page==1 && pdata->inhl==HL && pdata->inlh==LH)
					|| (pdata->page==page && (pdata->feedback & mask)==(r->output & mask) && pdata->inhl==HL && pdata->inlh==LH) ){
						break;
					}
				}
				status=1; //Record
    222e:	10 2f       	mov	r17, r16
	uint16_t HL,LH;
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(page>ZERO){ //Enable
		if(HL || LH){ //There is a change ?
			for(i1=ZERO;i1<r->sizeeeprom;i1++){
    2230:	ac 81       	ldd	r26, Y+4	; 0x04
    2232:	bd 81       	ldd	r27, Y+5	; 0x05
    2234:	12 96       	adiw	r26, 0x02	; 2
    2236:	8d 91       	ld	r24, X+
    2238:	9c 91       	ld	r25, X
    223a:	13 97       	sbiw	r26, 0x03	; 3
    223c:	a8 16       	cp	r10, r24
    223e:	b9 06       	cpc	r11, r25
    2240:	08 f2       	brcs	.-126    	; 0x21c4 <LFSMlearn+0x92>
    2242:	03 c0       	rjmp	.+6      	; 0x224a <LFSMlearn+0x118>
				}
				status=1; //Record
			}
		}
	}
	switch (status){
    2244:	11 30       	cpi	r17, 0x01	; 1
    2246:	09 f0       	breq	.+2      	; 0x224a <LFSMlearn+0x118>
    2248:	74 c0       	rjmp	.+232    	; 0x2332 <LFSMlearn+0x200>
		case ZERO: //Not enabled
			break;
		case 1: //Record
			ptmp1->page=page;
    224a:	e9 ee       	ldi	r30, 0xE9	; 233
    224c:	f3 e0       	ldi	r31, 0x03	; 3
    224e:	30 82       	st	Z, r3
			ptmp1->feedback=r->output;
    2250:	ac 81       	ldd	r26, Y+4	; 0x04
    2252:	bd 81       	ldd	r27, Y+5	; 0x05
    2254:	17 96       	adiw	r26, 0x07	; 7
    2256:	8d 91       	ld	r24, X+
    2258:	9c 91       	ld	r25, X
    225a:	18 97       	sbiw	r26, 0x08	; 8
    225c:	92 83       	std	Z+2, r25	; 0x02
    225e:	81 83       	std	Z+1, r24	; 0x01
			ptmp1->inhl=HL;
    2260:	23 82       	std	Z+3, r2	; 0x03
			ptmp1->inlh=LH;
    2262:	b9 81       	ldd	r27, Y+1	; 0x01
    2264:	b4 83       	std	Z+4, r27	; 0x04
			ptmp1->mask=mask;
    2266:	96 82       	std	Z+6, r9	; 0x06
    2268:	85 82       	std	Z+5, r8	; 0x05
			if(page>1){ //Local logic
    226a:	e1 e0       	ldi	r30, 0x01	; 1
    226c:	e3 15       	cp	r30, r3
    226e:	d0 f4       	brcc	.+52     	; 0x22a4 <LFSMlearn+0x172>
				ptmp1->outhl=LFSMhl(r->output,next) & mask;
    2270:	e9 ee       	ldi	r30, 0xE9	; 233
    2272:	f3 e0       	ldi	r31, 0x03	; 3
    2274:	9c 01       	movw	r18, r24
    2276:	24 25       	eor	r18, r4
    2278:	35 25       	eor	r19, r5
    227a:	28 21       	and	r18, r8
    227c:	39 21       	and	r19, r9
    227e:	82 23       	and	r24, r18
    2280:	93 23       	and	r25, r19
    2282:	90 87       	std	Z+8, r25	; 0x08
    2284:	87 83       	std	Z+7, r24	; 0x07
				ptmp1->outlh=LFSMlh(r->output,next) & mask;
    2286:	ac 81       	ldd	r26, Y+4	; 0x04
    2288:	bd 81       	ldd	r27, Y+5	; 0x05
    228a:	17 96       	adiw	r26, 0x07	; 7
    228c:	2d 91       	ld	r18, X+
    228e:	3c 91       	ld	r19, X
    2290:	18 97       	sbiw	r26, 0x08	; 8
    2292:	24 25       	eor	r18, r4
    2294:	35 25       	eor	r19, r5
    2296:	82 22       	and	r8, r18
    2298:	93 22       	and	r9, r19
    229a:	48 20       	and	r4, r8
    229c:	59 20       	and	r5, r9
    229e:	52 86       	std	Z+10, r5	; 0x0a
    22a0:	41 86       	std	Z+9, r4	; 0x09
    22a2:	0d c0       	rjmp	.+26     	; 0x22be <LFSMlearn+0x18c>
			}else{ //Global logic
				ptmp1->outhl=LFSMhl(BYTEH,next) & mask;
    22a4:	e9 ee       	ldi	r30, 0xE9	; 233
    22a6:	f3 e0       	ldi	r31, 0x03	; 3
    22a8:	c2 01       	movw	r24, r4
    22aa:	80 95       	com	r24
    22ac:	90 95       	com	r25
    22ae:	88 21       	and	r24, r8
    22b0:	99 21       	and	r25, r9
    22b2:	90 87       	std	Z+8, r25	; 0x08
    22b4:	87 83       	std	Z+7, r24	; 0x07
				ptmp1->outlh=LFSMlh(BYTEL,next) & mask;
    22b6:	84 20       	and	r8, r4
    22b8:	95 20       	and	r9, r5
    22ba:	92 86       	std	Z+10, r9	; 0x0a
    22bc:	81 86       	std	Z+9, r8	; 0x09
			}
			for(i1=ZERO;i1<r->sizeeeprom;i1++){
    22be:	ec 81       	ldd	r30, Y+4	; 0x04
    22c0:	fd 81       	ldd	r31, Y+5	; 0x05
    22c2:	82 81       	ldd	r24, Z+2	; 0x02
    22c4:	93 81       	ldd	r25, Z+3	; 0x03
    22c6:	89 2b       	or	r24, r25
    22c8:	99 f1       	breq	.+102    	; 0x2330 <LFSMlearn+0x1fe>
    22ca:	00 e0       	ldi	r16, 0x00	; 0
    22cc:	10 e0       	ldi	r17, 0x00	; 0
    22ce:	c1 2c       	mov	r12, r1
    22d0:	d1 2c       	mov	r13, r1
				r->eprom->read_block(pdata, (const void*) (i1*sizeblock), sizeblock);
    22d2:	ac 81       	ldd	r26, Y+4	; 0x04
    22d4:	bd 81       	ldd	r27, Y+5	; 0x05
    22d6:	ed 91       	ld	r30, X+
    22d8:	fc 91       	ld	r31, X
    22da:	00 8c       	ldd	r0, Z+24	; 0x18
    22dc:	f1 8d       	ldd	r31, Z+25	; 0x19
    22de:	e0 2d       	mov	r30, r0
    22e0:	a7 01       	movw	r20, r14
    22e2:	b8 01       	movw	r22, r16
    22e4:	8e ed       	ldi	r24, 0xDE	; 222
    22e6:	93 e0       	ldi	r25, 0x03	; 3
    22e8:	09 95       	icall
				if(pdata->page==EMPTY){
    22ea:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <data>
    22ee:	81 11       	cpse	r24, r1
    22f0:	0f c0       	rjmp	.+30     	; 0x2310 <LFSMlearn+0x1de>
					r->eprom->update_block(ptmp1, (void*) (i1*sizeblock), sizeblock);
    22f2:	ac 81       	ldd	r26, Y+4	; 0x04
    22f4:	bd 81       	ldd	r27, Y+5	; 0x05
    22f6:	ed 91       	ld	r30, X+
    22f8:	fc 91       	ld	r31, X
    22fa:	04 8c       	ldd	r0, Z+28	; 0x1c
    22fc:	f5 8d       	ldd	r31, Z+29	; 0x1d
    22fe:	e0 2d       	mov	r30, r0
    2300:	a7 01       	movw	r20, r14
    2302:	60 2f       	mov	r22, r16
    2304:	71 2f       	mov	r23, r17
    2306:	89 ee       	ldi	r24, 0xE9	; 233
    2308:	93 e0       	ldi	r25, 0x03	; 3
    230a:	09 95       	icall
					status=2; //Created
    230c:	12 e0       	ldi	r17, 0x02	; 2
					break;
    230e:	11 c0       	rjmp	.+34     	; 0x2332 <LFSMlearn+0x200>
				ptmp1->outlh=LFSMlh(r->output,next) & mask;
			}else{ //Global logic
				ptmp1->outhl=LFSMhl(BYTEH,next) & mask;
				ptmp1->outlh=LFSMlh(BYTEL,next) & mask;
			}
			for(i1=ZERO;i1<r->sizeeeprom;i1++){
    2310:	bf ef       	ldi	r27, 0xFF	; 255
    2312:	cb 1a       	sub	r12, r27
    2314:	db 0a       	sbc	r13, r27
    2316:	0e 0d       	add	r16, r14
    2318:	1f 1d       	adc	r17, r15
    231a:	ec 81       	ldd	r30, Y+4	; 0x04
    231c:	fd 81       	ldd	r31, Y+5	; 0x05
    231e:	82 81       	ldd	r24, Z+2	; 0x02
    2320:	93 81       	ldd	r25, Z+3	; 0x03
    2322:	c8 16       	cp	r12, r24
    2324:	d9 06       	cpc	r13, r25
    2326:	a8 f2       	brcs	.-86     	; 0x22d2 <LFSMlearn+0x1a0>
				if(pdata->page==EMPTY){
					r->eprom->update_block(ptmp1, (void*) (i1*sizeblock), sizeblock);
					status=2; //Created
					break;
				}
				status=3; //Memory full
    2328:	13 e0       	ldi	r17, 0x03	; 3
    232a:	03 c0       	rjmp	.+6      	; 0x2332 <LFSMlearn+0x200>
    232c:	10 e0       	ldi	r17, 0x00	; 0
    232e:	01 c0       	rjmp	.+2      	; 0x2332 <LFSMlearn+0x200>
				ptmp1->outlh=LFSMlh(r->output,next) & mask;
			}else{ //Global logic
				ptmp1->outhl=LFSMhl(BYTEH,next) & mask;
				ptmp1->outlh=LFSMlh(BYTEL,next) & mask;
			}
			for(i1=ZERO;i1<r->sizeeeprom;i1++){
    2330:	11 e0       	ldi	r17, 0x01	; 1
			break;
		default:
			break;
	}//End switch
	return status;
}
    2332:	81 2f       	mov	r24, r17
    2334:	0f 90       	pop	r0
    2336:	0f 90       	pop	r0
    2338:	0f 90       	pop	r0
    233a:	0f 90       	pop	r0
    233c:	0f 90       	pop	r0
    233e:	df 91       	pop	r29
    2340:	cf 91       	pop	r28
    2342:	1f 91       	pop	r17
    2344:	0f 91       	pop	r16
    2346:	ff 90       	pop	r15
    2348:	ef 90       	pop	r14
    234a:	df 90       	pop	r13
    234c:	cf 90       	pop	r12
    234e:	bf 90       	pop	r11
    2350:	af 90       	pop	r10
    2352:	9f 90       	pop	r9
    2354:	8f 90       	pop	r8
    2356:	7f 90       	pop	r7
    2358:	6f 90       	pop	r6
    235a:	5f 90       	pop	r5
    235c:	4f 90       	pop	r4
    235e:	3f 90       	pop	r3
    2360:	2f 90       	pop	r2
    2362:	08 95       	ret

00002364 <LFSMenable>:
uint16_t LFSMhl(uint16_t xi, uint16_t xf);
uint16_t LFSMoutputcalc(uint16_t feedback, uint16_t hl, uint16_t lh, uint16_t mask);
/***Object Initialize***/
/***LFSM LFSMenable(EEPROM* eeprom, const uint16_t sizeeeprom)***/
LFSM LFSMenable(EEPROM* eeprom, const uint16_t sizeeeprom)
{
    2364:	fc 01       	movw	r30, r24
	r.getoutput=LFSMgetoutput;
	r.getstatus=LFSMgetstatus;
	r.setoutput=LFSMsetoutput;
	r.getpage=LFSMgetpage;
	r.setpage=LFSMsetpage;
	return r;
    2366:	71 83       	std	Z+1, r23	; 0x01
    2368:	60 83       	st	Z, r22
    236a:	53 83       	std	Z+3, r21	; 0x03
    236c:	42 83       	std	Z+2, r20	; 0x02
    236e:	8b e0       	ldi	r24, 0x0B	; 11
    2370:	84 83       	std	Z+4, r24	; 0x04
    2372:	15 82       	std	Z+5, r1	; 0x05
    2374:	10 86       	std	Z+8, r1	; 0x08
    2376:	17 82       	std	Z+7, r1	; 0x07
    2378:	87 ec       	ldi	r24, 0xC7	; 199
    237a:	9d e0       	ldi	r25, 0x0D	; 13
    237c:	93 87       	std	Z+11, r25	; 0x0b
    237e:	82 87       	std	Z+10, r24	; 0x0a
    2380:	89 e9       	ldi	r24, 0x99	; 153
    2382:	90 e1       	ldi	r25, 0x10	; 16
    2384:	95 87       	std	Z+13, r25	; 0x0d
    2386:	84 87       	std	Z+12, r24	; 0x0c
    2388:	86 e1       	ldi	r24, 0x16	; 22
    238a:	9d e0       	ldi	r25, 0x0D	; 13
    238c:	97 87       	std	Z+15, r25	; 0x0f
    238e:	86 87       	std	Z+14, r24	; 0x0e
    2390:	80 e5       	ldi	r24, 0x50	; 80
    2392:	9f e0       	ldi	r25, 0x0F	; 15
    2394:	91 8b       	std	Z+17, r25	; 0x11
    2396:	80 8b       	std	Z+16, r24	; 0x10
    2398:	8c e5       	ldi	r24, 0x5C	; 92
    239a:	9d e0       	ldi	r25, 0x0D	; 13
    239c:	93 8b       	std	Z+19, r25	; 0x13
    239e:	82 8b       	std	Z+18, r24	; 0x12
    23a0:	85 eb       	ldi	r24, 0xB5	; 181
    23a2:	9d e0       	ldi	r25, 0x0D	; 13
    23a4:	95 8b       	std	Z+21, r25	; 0x15
    23a6:	84 8b       	std	Z+20, r24	; 0x14
    23a8:	89 eb       	ldi	r24, 0xB9	; 185
    23aa:	9d e0       	ldi	r25, 0x0D	; 13
    23ac:	97 8b       	std	Z+23, r25	; 0x17
    23ae:	86 8b       	std	Z+22, r24	; 0x16
    23b0:	8c eb       	ldi	r24, 0xBC	; 188
    23b2:	9d e0       	ldi	r25, 0x0D	; 13
    23b4:	91 8f       	std	Z+25, r25	; 0x19
    23b6:	80 8f       	std	Z+24, r24	; 0x18
    23b8:	81 ec       	ldi	r24, 0xC1	; 193
    23ba:	9d e0       	ldi	r25, 0x0D	; 13
    23bc:	93 8f       	std	Z+27, r25	; 0x1b
    23be:	82 8f       	std	Z+26, r24	; 0x1a
    23c0:	84 ec       	ldi	r24, 0xC4	; 196
    23c2:	9d e0       	ldi	r25, 0x0D	; 13
    23c4:	95 8f       	std	Z+29, r25	; 0x1d
    23c6:	84 8f       	std	Z+28, r24	; 0x1c
}
    23c8:	cf 01       	movw	r24, r30
    23ca:	08 95       	ret

000023cc <PORTINIT>:
	}
}
/***Procedure & Function***/
void PORTINIT(void)
{
	DDRB=0X00; // Buttons
    23cc:	17 ba       	out	0x17, r1	; 23
	PORTB=0XFF; // Buttons PULLUP
    23ce:	8f ef       	ldi	r24, 0xFF	; 255
    23d0:	88 bb       	out	0x18, r24	; 24
    23d2:	08 95       	ret

000023d4 <main>:
char* string=NULL;
/***Header***/
void PORTINIT(void);
/***MAIN***MAIN***/
int main(void)
{
    23d4:	cf 93       	push	r28
    23d6:	df 93       	push	r29
    23d8:	cd b7       	in	r28, 0x3d	; 61
    23da:	de b7       	in	r29, 0x3e	; 62
    23dc:	cc 5b       	subi	r28, 0xBC	; 188
    23de:	d1 09       	sbc	r29, r1
    23e0:	0f b6       	in	r0, 0x3f	; 63
    23e2:	f8 94       	cli
    23e4:	de bf       	out	0x3e, r29	; 62
    23e6:	0f be       	out	0x3f, r0	; 63
    23e8:	cd bf       	out	0x3d, r28	; 61
	PORTINIT();
    23ea:	f0 df       	rcall	.-32     	; 0x23cc <PORTINIT>
	struct keypadata keypadinput;
	uint16_t output=0;
	uint16_t mask=0;
	uint8_t page=0;
	uint16_t n;
	KEYPAD keypad = KEYPADenable(&DDRE,&PINE,&PORTE);
    23ec:	43 e2       	ldi	r20, 0x23	; 35
    23ee:	50 e0       	ldi	r21, 0x00	; 0
    23f0:	61 e2       	ldi	r22, 0x21	; 33
    23f2:	70 e0       	ldi	r23, 0x00	; 0
    23f4:	82 e2       	ldi	r24, 0x22	; 34
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	32 d8       	rcall	.-3996   	; 0x145e <KEYPADenable>
    23fa:	2e 83       	std	Y+6, r18	; 0x06
    23fc:	3f 83       	std	Y+7, r19	; 0x07
    23fe:	48 87       	std	Y+8, r20	; 0x08
    2400:	59 87       	std	Y+9, r21	; 0x09
    2402:	6a 87       	std	Y+10, r22	; 0x0a
    2404:	7b 87       	std	Y+11, r23	; 0x0b
    2406:	8c 87       	std	Y+12, r24	; 0x0c
    2408:	9d 87       	std	Y+13, r25	; 0x0d
    240a:	6c 84       	ldd	r6, Y+12	; 0x0c
    240c:	7d 84       	ldd	r7, Y+13	; 0x0d
	LCD0 lcd = LCD0enable(&DDRA,&PINA,&PORTA);
    240e:	2b e3       	ldi	r18, 0x3B	; 59
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	49 e3       	ldi	r20, 0x39	; 57
    2414:	50 e0       	ldi	r21, 0x00	; 0
    2416:	6a e3       	ldi	r22, 0x3A	; 58
    2418:	70 e0       	ldi	r23, 0x00	; 0
    241a:	ce 01       	movw	r24, r28
    241c:	0e 96       	adiw	r24, 0x0e	; 14
    241e:	9e da       	rcall	.-2756   	; 0x195c <LCD0enable>
    2420:	88 8d       	ldd	r24, Y+24	; 0x18
    2422:	99 8d       	ldd	r25, Y+25	; 0x19
    2424:	ce 54       	subi	r28, 0x4E	; 78
    2426:	df 4f       	sbci	r29, 0xFF	; 255
    2428:	99 83       	std	Y+1, r25	; 0x01
    242a:	88 83       	st	Y, r24
    242c:	c2 5b       	subi	r28, 0xB2	; 178
    242e:	d0 40       	sbci	r29, 0x00	; 0
    2430:	ea 8c       	ldd	r14, Y+26	; 0x1a
    2432:	fb 8c       	ldd	r15, Y+27	; 0x1b
    2434:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2436:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2438:	c0 55       	subi	r28, 0x50	; 80
    243a:	df 4f       	sbci	r29, 0xFF	; 255
    243c:	f9 83       	std	Y+1, r31	; 0x01
    243e:	e8 83       	st	Y, r30
    2440:	c0 5b       	subi	r28, 0xB0	; 176
    2442:	d0 40       	sbci	r29, 0x00	; 0
    2444:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2446:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2448:	c5 54       	subi	r28, 0x45	; 69
    244a:	df 4f       	sbci	r29, 0xFF	; 255
    244c:	99 83       	std	Y+1, r25	; 0x01
    244e:	88 83       	st	Y, r24
    2450:	cb 5b       	subi	r28, 0xBB	; 187
    2452:	d0 40       	sbci	r29, 0x00	; 0
    2454:	c8 a0       	ldd	r12, Y+32	; 0x20
    2456:	d9 a0       	ldd	r13, Y+33	; 0x21
	EEPROM eeprom = EEPROMenable();
    2458:	ce 01       	movw	r24, r28
    245a:	84 96       	adiw	r24, 0x24	; 36
    245c:	0e 94 9e 03 	call	0x73c	; 0x73c <EEPROMenable>
	LFSM lfsm = LFSMenable(&eeprom,363);
    2460:	4b e6       	ldi	r20, 0x6B	; 107
    2462:	51 e0       	ldi	r21, 0x01	; 1
    2464:	be 01       	movw	r22, r28
    2466:	6c 5d       	subi	r22, 0xDC	; 220
    2468:	7f 4f       	sbci	r23, 0xFF	; 255
    246a:	ce 01       	movw	r24, r28
    246c:	8e 5b       	subi	r24, 0xBE	; 190
    246e:	9f 4f       	sbci	r25, 0xFF	; 255
    2470:	79 df       	rcall	.-270    	; 0x2364 <LFSMenable>
	FUNC func = FUNCenable();
    2472:	ce 01       	movw	r24, r28
    2474:	80 5a       	subi	r24, 0xA0	; 160
    2476:	9f 4f       	sbci	r25, 0xFF	; 255
    2478:	0e 94 d5 07 	call	0xfaa	; 0xfaa <FUNCenable>
    247c:	ce 57       	subi	r28, 0x7E	; 126
    247e:	df 4f       	sbci	r29, 0xFF	; 255
    2480:	a8 80       	ld	r10, Y
    2482:	b9 80       	ldd	r11, Y+1	; 0x01
    2484:	c2 58       	subi	r28, 0x82	; 130
    2486:	d0 40       	sbci	r29, 0x00	; 0
    2488:	c4 57       	subi	r28, 0x74	; 116
    248a:	df 4f       	sbci	r29, 0xFF	; 255
    248c:	e8 81       	ld	r30, Y
    248e:	f9 81       	ldd	r31, Y+1	; 0x01
    2490:	cc 58       	subi	r28, 0x8C	; 140
    2492:	d0 40       	sbci	r29, 0x00	; 0
    2494:	cc 54       	subi	r28, 0x4C	; 76
    2496:	df 4f       	sbci	r29, 0xFF	; 255
    2498:	f9 83       	std	Y+1, r31	; 0x01
    249a:	e8 83       	st	Y, r30
    249c:	c4 5b       	subi	r28, 0xB4	; 180
    249e:	d0 40       	sbci	r29, 0x00	; 0
	HC595 shift = HC595enable(&DDRG,&PORTG,2,0,1);
    24a0:	01 e0       	ldi	r16, 0x01	; 1
    24a2:	20 e0       	ldi	r18, 0x00	; 0
    24a4:	42 e0       	ldi	r20, 0x02	; 2
    24a6:	65 e6       	ldi	r22, 0x65	; 101
    24a8:	70 e0       	ldi	r23, 0x00	; 0
    24aa:	84 e6       	ldi	r24, 0x64	; 100
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	0e 94 1f 01 	call	0x23e	; 0x23e <HC595enable>
    24b2:	c6 55       	subi	r28, 0x56	; 86
    24b4:	df 4f       	sbci	r29, 0xFF	; 255
    24b6:	28 83       	st	Y, r18
    24b8:	ca 5a       	subi	r28, 0xAA	; 170
    24ba:	d0 40       	sbci	r29, 0x00	; 0
    24bc:	c5 55       	subi	r28, 0x55	; 85
    24be:	df 4f       	sbci	r29, 0xFF	; 255
    24c0:	38 83       	st	Y, r19
    24c2:	cb 5a       	subi	r28, 0xAB	; 171
    24c4:	d0 40       	sbci	r29, 0x00	; 0
    24c6:	c4 55       	subi	r28, 0x54	; 84
    24c8:	df 4f       	sbci	r29, 0xFF	; 255
    24ca:	48 83       	st	Y, r20
    24cc:	cc 5a       	subi	r28, 0xAC	; 172
    24ce:	d0 40       	sbci	r29, 0x00	; 0
    24d0:	c3 55       	subi	r28, 0x53	; 83
    24d2:	df 4f       	sbci	r29, 0xFF	; 255
    24d4:	58 83       	st	Y, r21
    24d6:	cd 5a       	subi	r28, 0xAD	; 173
    24d8:	d0 40       	sbci	r29, 0x00	; 0
    24da:	c2 55       	subi	r28, 0x52	; 82
    24dc:	df 4f       	sbci	r29, 0xFF	; 255
    24de:	68 83       	st	Y, r22
    24e0:	ce 5a       	subi	r28, 0xAE	; 174
    24e2:	d0 40       	sbci	r29, 0x00	; 0
    24e4:	c1 55       	subi	r28, 0x51	; 81
    24e6:	df 4f       	sbci	r29, 0xFF	; 255
    24e8:	78 83       	st	Y, r23
    24ea:	cf 5a       	subi	r28, 0xAF	; 175
    24ec:	d0 40       	sbci	r29, 0x00	; 0
	/*****************************************************/
	lfsm.setoutput(&lfsm,255);
    24ee:	6c 96       	adiw	r28, 0x1c	; 28
    24f0:	ee ad       	ldd	r30, Y+62	; 0x3e
    24f2:	ff ad       	ldd	r31, Y+63	; 0x3f
    24f4:	6c 97       	sbiw	r28, 0x1c	; 28
    24f6:	6f ef       	ldi	r22, 0xFF	; 255
    24f8:	70 e0       	ldi	r23, 0x00	; 0
    24fa:	ce 01       	movw	r24, r28
    24fc:	8e 5b       	subi	r24, 0xBE	; 190
    24fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2500:	09 95       	icall
	PORTINIT();
	uint8_t option=0; //Menu Jumper
	uint8_t input_tmp=0;
	struct keypadata keypadinput;
	uint16_t output=0;
	uint16_t mask=0;
    2502:	c7 54       	subi	r28, 0x47	; 71
    2504:	df 4f       	sbci	r29, 0xFF	; 255
    2506:	19 82       	std	Y+1, r1	; 0x01
    2508:	18 82       	st	Y, r1
    250a:	c9 5b       	subi	r28, 0xB9	; 185
    250c:	d0 40       	sbci	r29, 0x00	; 0
{
	PORTINIT();
	uint8_t option=0; //Menu Jumper
	uint8_t input_tmp=0;
	struct keypadata keypadinput;
	uint16_t output=0;
    250e:	c9 54       	subi	r28, 0x49	; 73
    2510:	df 4f       	sbci	r29, 0xFF	; 255
    2512:	19 82       	std	Y+1, r1	; 0x01
    2514:	18 82       	st	Y, r1
    2516:	c7 5b       	subi	r28, 0xB7	; 183
    2518:	d0 40       	sbci	r29, 0x00	; 0
/***MAIN***MAIN***/
int main(void)
{
	PORTINIT();
	uint8_t option=0; //Menu Jumper
	uint8_t input_tmp=0;
    251a:	ca 54       	subi	r28, 0x4A	; 74
    251c:	df 4f       	sbci	r29, 0xFF	; 255
    251e:	18 82       	st	Y, r1
    2520:	c6 5b       	subi	r28, 0xB6	; 182
    2522:	d0 40       	sbci	r29, 0x00	; 0
void PORTINIT(void);
/***MAIN***MAIN***/
int main(void)
{
	PORTINIT();
	uint8_t option=0; //Menu Jumper
    2524:	41 2c       	mov	r4, r1
					keypad.flush();
					option=0;
				}//End if
				if(keypadinput.character == 'C'){ // Repeat Remove Data Entry
					keypad.flush();
					option=8;
    2526:	68 94       	set
    2528:	22 24       	eor	r2, r2
    252a:	23 f8       	bld	r2, 3
	lfsm.setoutput(&lfsm,255);
	/*********Replace with your application code**********/
	while (True)
	{
		/***Preamble***/
		lcd.reboot();
    252c:	ea a1       	ldd	r30, Y+34	; 0x22
    252e:	fb a1       	ldd	r31, Y+35	; 0x23
    2530:	09 95       	icall
		keypad.read();
    2532:	e8 85       	ldd	r30, Y+8	; 0x08
    2534:	f9 85       	ldd	r31, Y+9	; 0x09
    2536:	09 95       	icall
		/******Readings******/
		keypadinput=keypad.get();
    2538:	ea 85       	ldd	r30, Y+10	; 0x0a
    253a:	fb 85       	ldd	r31, Y+11	; 0x0b
    253c:	09 95       	icall
    253e:	29 83       	std	Y+1, r18	; 0x01
    2540:	3a 83       	std	Y+2, r19	; 0x02
    2542:	4b 83       	std	Y+3, r20	; 0x03
    2544:	5c 83       	std	Y+4, r21	; 0x04
    2546:	6d 83       	std	Y+5, r22	; 0x05
    2548:	52 2e       	mov	r5, r18
    254a:	0a 81       	ldd	r16, Y+2	; 0x02
    254c:	1b 81       	ldd	r17, Y+3	; 0x03
    254e:	8c 80       	ldd	r8, Y+4	; 0x04
    2550:	9d 80       	ldd	r9, Y+5	; 0x05
		n=PINB; lcd.gotoxy(0,14); string=func.ui16toa(n);
    2552:	36 b2       	in	r3, 0x16	; 22
    2554:	6e e0       	ldi	r22, 0x0E	; 14
    2556:	70 e0       	ldi	r23, 0x00	; 0
    2558:	80 e0       	ldi	r24, 0x00	; 0
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	f6 01       	movw	r30, r12
    255e:	09 95       	icall
    2560:	83 2d       	mov	r24, r3
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	f5 01       	movw	r30, r10
    2566:	09 95       	icall
    2568:	90 93 f6 01 	sts	0x01F6, r25	; 0x8001f6 <string+0x1>
    256c:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <string>
		lcd.string_size(string,5);
    2570:	65 e0       	ldi	r22, 0x05	; 5
    2572:	f7 01       	movw	r30, r14
    2574:	09 95       	icall
		/******/
		switch(option){
    2576:	84 2d       	mov	r24, r4
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	8a 30       	cpi	r24, 0x0A	; 10
    257c:	91 05       	cpc	r25, r1
    257e:	08 f0       	brcs	.+2      	; 0x2582 <main+0x1ae>
    2580:	1f c3       	rjmp	.+1598   	; 0x2bc0 <main+0x7ec>
    2582:	fc 01       	movw	r30, r24
    2584:	ea 5b       	subi	r30, 0xBA	; 186
    2586:	ff 4f       	sbci	r31, 0xFF	; 255
    2588:	9a c3       	rjmp	.+1844   	; 0x2cbe <__tablejump2__>
			case 0: // Main Menu
				lcd.gotoxy(0,0);
    258a:	60 e0       	ldi	r22, 0x00	; 0
    258c:	70 e0       	ldi	r23, 0x00	; 0
    258e:	80 e0       	ldi	r24, 0x00	; 0
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	f6 01       	movw	r30, r12
    2594:	09 95       	icall
				lcd.string_size("Running ",8);
    2596:	62 2d       	mov	r22, r2
    2598:	82 e1       	ldi	r24, 0x12	; 18
    259a:	91 e0       	ldi	r25, 0x01	; 1
    259c:	f7 01       	movw	r30, r14
    259e:	09 95       	icall
				string=func.ui16toa(lfsm.getpage(&lfsm));
    25a0:	6e 96       	adiw	r28, 0x1e	; 30
    25a2:	ee ad       	ldd	r30, Y+62	; 0x3e
    25a4:	ff ad       	ldd	r31, Y+63	; 0x3f
    25a6:	6e 97       	sbiw	r28, 0x1e	; 30
    25a8:	ce 01       	movw	r24, r28
    25aa:	8e 5b       	subi	r24, 0xBE	; 190
    25ac:	9f 4f       	sbci	r25, 0xFF	; 255
    25ae:	09 95       	icall
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	f5 01       	movw	r30, r10
    25b4:	09 95       	icall
    25b6:	90 93 f6 01 	sts	0x01F6, r25	; 0x8001f6 <string+0x1>
    25ba:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <string>
				lcd.string_size(string,3);
    25be:	63 e0       	ldi	r22, 0x03	; 3
    25c0:	f7 01       	movw	r30, r14
    25c2:	09 95       	icall
				if(keypadinput.character == 'A'){ // Clear screen and empty buffer
    25c4:	f1 e4       	ldi	r31, 0x41	; 65
    25c6:	5f 12       	cpse	r5, r31
    25c8:	0a c0       	rjmp	.+20     	; 0x25de <main+0x20a>
					lcd.clear();
    25ca:	c5 54       	subi	r28, 0x45	; 69
    25cc:	df 4f       	sbci	r29, 0xFF	; 255
    25ce:	e8 81       	ld	r30, Y
    25d0:	f9 81       	ldd	r31, Y+1	; 0x01
    25d2:	cb 5b       	subi	r28, 0xBB	; 187
    25d4:	d0 40       	sbci	r29, 0x00	; 0
    25d6:	09 95       	icall
					keypad.flush();
    25d8:	f3 01       	movw	r30, r6
    25da:	09 95       	icall
					continue;
    25dc:	a7 cf       	rjmp	.-178    	; 0x252c <main+0x158>
				}
				if(keypadinput.character == 'B'){ // Learn
    25de:	f2 e4       	ldi	r31, 0x42	; 66
    25e0:	5f 12       	cpse	r5, r31
    25e2:	0c c0       	rjmp	.+24     	; 0x25fc <main+0x228>
					lcd.clear();
    25e4:	c5 54       	subi	r28, 0x45	; 69
    25e6:	df 4f       	sbci	r29, 0xFF	; 255
    25e8:	e8 81       	ld	r30, Y
    25ea:	f9 81       	ldd	r31, Y+1	; 0x01
    25ec:	cb 5b       	subi	r28, 0xBB	; 187
    25ee:	d0 40       	sbci	r29, 0x00	; 0
    25f0:	09 95       	icall
					keypad.flush();
    25f2:	f3 01       	movw	r30, r6
    25f4:	09 95       	icall
					option=1;
    25f6:	44 24       	eor	r4, r4
    25f8:	43 94       	inc	r4
    25fa:	10 c0       	rjmp	.+32     	; 0x261c <main+0x248>
				}
				if(keypadinput.character == 'C'){ // Delete or remove
    25fc:	f3 e4       	ldi	r31, 0x43	; 67
    25fe:	5f 12       	cpse	r5, r31
    2600:	0d c0       	rjmp	.+26     	; 0x261c <main+0x248>
					lcd.clear();
    2602:	c5 54       	subi	r28, 0x45	; 69
    2604:	df 4f       	sbci	r29, 0xFF	; 255
    2606:	e8 81       	ld	r30, Y
    2608:	f9 81       	ldd	r31, Y+1	; 0x01
    260a:	cb 5b       	subi	r28, 0xBB	; 187
    260c:	d0 40       	sbci	r29, 0x00	; 0
    260e:	09 95       	icall
					keypad.flush();
    2610:	f3 01       	movw	r30, r6
    2612:	09 95       	icall
					option=6;
    2614:	0f 2e       	mov	r0, r31
    2616:	f6 e0       	ldi	r31, 0x06	; 6
    2618:	4f 2e       	mov	r4, r31
    261a:	f0 2d       	mov	r31, r0
				}
				lfsm.read(&lfsm,n); // Getting answer
    261c:	2e 96       	adiw	r28, 0x0e	; 14
    261e:	ee ad       	ldd	r30, Y+62	; 0x3e
    2620:	ff ad       	ldd	r31, Y+63	; 0x3f
    2622:	2e 97       	sbiw	r28, 0x0e	; 14
    2624:	63 2d       	mov	r22, r3
    2626:	ce 01       	movw	r24, r28
    2628:	8e 5b       	subi	r24, 0xBE	; 190
    262a:	9f 4f       	sbci	r25, 0xFF	; 255
    262c:	09 95       	icall
				break;
    262e:	c8 c2       	rjmp	.+1424   	; 0x2bc0 <main+0x7ec>
			case 1: // New Entry Menu
				// Menu
				lcd.gotoxy(0,0);
    2630:	60 e0       	ldi	r22, 0x00	; 0
    2632:	70 e0       	ldi	r23, 0x00	; 0
    2634:	80 e0       	ldi	r24, 0x00	; 0
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	f6 01       	movw	r30, r12
    263a:	09 95       	icall
				lcd.string_size("Enter: ",12);
    263c:	6c e0       	ldi	r22, 0x0C	; 12
    263e:	8b e1       	ldi	r24, 0x1B	; 27
    2640:	91 e0       	ldi	r25, 0x01	; 1
    2642:	f7 01       	movw	r30, r14
    2644:	09 95       	icall
				lcd.gotoxy(1,0);
    2646:	60 e0       	ldi	r22, 0x00	; 0
    2648:	70 e0       	ldi	r23, 0x00	; 0
    264a:	81 e0       	ldi	r24, 0x01	; 1
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	f6 01       	movw	r30, r12
    2650:	09 95       	icall
				lcd.string_size("In   Out  Mask Page",20);
    2652:	64 e1       	ldi	r22, 0x14	; 20
    2654:	83 e2       	ldi	r24, 0x23	; 35
    2656:	91 e0       	ldi	r25, 0x01	; 1
    2658:	f7 01       	movw	r30, r14
    265a:	09 95       	icall
				option=2;
    265c:	68 94       	set
    265e:	44 24       	eor	r4, r4
    2660:	41 f8       	bld	r4, 1
				break;
    2662:	ae c2       	rjmp	.+1372   	; 0x2bc0 <main+0x7ec>
			case 2: // First entry [input]
				lcd.gotoxy(0,7);
    2664:	67 e0       	ldi	r22, 0x07	; 7
    2666:	70 e0       	ldi	r23, 0x00	; 0
    2668:	80 e0       	ldi	r24, 0x00	; 0
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	f6 01       	movw	r30, r12
    266e:	09 95       	icall
				lcd.string_size(keypadinput.printstring,4);
    2670:	64 e0       	ldi	r22, 0x04	; 4
    2672:	c8 01       	movw	r24, r16
    2674:	f7 01       	movw	r30, r14
    2676:	09 95       	icall
				if(keypadinput.character == 'D'){
    2678:	f4 e4       	ldi	r31, 0x44	; 68
    267a:	5f 12       	cpse	r5, r31
    267c:	2a c0       	rjmp	.+84     	; 0x26d2 <main+0x2fe>
					input_tmp=func.strToInt(keypadinput.string);
    267e:	c4 01       	movw	r24, r8
    2680:	cc 54       	subi	r28, 0x4C	; 76
    2682:	df 4f       	sbci	r29, 0xFF	; 255
    2684:	e8 81       	ld	r30, Y
    2686:	f9 81       	ldd	r31, Y+1	; 0x01
    2688:	c4 5b       	subi	r28, 0xB4	; 180
    268a:	d0 40       	sbci	r29, 0x00	; 0
    268c:	09 95       	icall
    268e:	8c 01       	movw	r16, r24
    2690:	ca 54       	subi	r28, 0x4A	; 74
    2692:	df 4f       	sbci	r29, 0xFF	; 255
    2694:	88 83       	st	Y, r24
    2696:	c6 5b       	subi	r28, 0xB6	; 182
    2698:	d0 40       	sbci	r29, 0x00	; 0
					lcd.gotoxy(2,0);
    269a:	60 e0       	ldi	r22, 0x00	; 0
    269c:	70 e0       	ldi	r23, 0x00	; 0
    269e:	82 e0       	ldi	r24, 0x02	; 2
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	f6 01       	movw	r30, r12
    26a4:	09 95       	icall
					string=func.ui16toa(input_tmp);
    26a6:	c8 01       	movw	r24, r16
    26a8:	99 27       	eor	r25, r25
    26aa:	f5 01       	movw	r30, r10
    26ac:	09 95       	icall
    26ae:	90 93 f6 01 	sts	0x01F6, r25	; 0x8001f6 <string+0x1>
    26b2:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <string>
					lcd.string(string);
    26b6:	ce 54       	subi	r28, 0x4E	; 78
    26b8:	df 4f       	sbci	r29, 0xFF	; 255
    26ba:	e8 81       	ld	r30, Y
    26bc:	f9 81       	ldd	r31, Y+1	; 0x01
    26be:	c2 5b       	subi	r28, 0xB2	; 178
    26c0:	d0 40       	sbci	r29, 0x00	; 0
    26c2:	09 95       	icall
					keypad.flush();
    26c4:	f3 01       	movw	r30, r6
    26c6:	09 95       	icall
					option=3;
    26c8:	0f 2e       	mov	r0, r31
    26ca:	f3 e0       	ldi	r31, 0x03	; 3
    26cc:	4f 2e       	mov	r4, r31
    26ce:	f0 2d       	mov	r31, r0
    26d0:	77 c2       	rjmp	.+1262   	; 0x2bc0 <main+0x7ec>
				}
				if(keypadinput.character == 'C'){
    26d2:	f3 e4       	ldi	r31, 0x43	; 67
    26d4:	5f 12       	cpse	r5, r31
    26d6:	74 c2       	rjmp	.+1256   	; 0x2bc0 <main+0x7ec>
					keypad.flush();
    26d8:	f3 01       	movw	r30, r6
    26da:	09 95       	icall
    26dc:	71 c2       	rjmp	.+1250   	; 0x2bc0 <main+0x7ec>
					option=2;
				}
				break;
			case 3: // Second Entry [output]
				lcd.gotoxy(0,7);
    26de:	67 e0       	ldi	r22, 0x07	; 7
    26e0:	70 e0       	ldi	r23, 0x00	; 0
    26e2:	80 e0       	ldi	r24, 0x00	; 0
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	f6 01       	movw	r30, r12
    26e8:	09 95       	icall
				lcd.string_size(keypadinput.printstring,4);
    26ea:	64 e0       	ldi	r22, 0x04	; 4
    26ec:	c8 01       	movw	r24, r16
    26ee:	f7 01       	movw	r30, r14
    26f0:	09 95       	icall
				if(keypadinput.character == 'D'){
    26f2:	f4 e4       	ldi	r31, 0x44	; 68
    26f4:	5f 12       	cpse	r5, r31
    26f6:	2d c0       	rjmp	.+90     	; 0x2752 <main+0x37e>
					output=func.strToInt(keypadinput.string);
    26f8:	c4 01       	movw	r24, r8
    26fa:	cc 54       	subi	r28, 0x4C	; 76
    26fc:	df 4f       	sbci	r29, 0xFF	; 255
    26fe:	e8 81       	ld	r30, Y
    2700:	f9 81       	ldd	r31, Y+1	; 0x01
    2702:	c4 5b       	subi	r28, 0xB4	; 180
    2704:	d0 40       	sbci	r29, 0x00	; 0
    2706:	09 95       	icall
    2708:	c9 54       	subi	r28, 0x49	; 73
    270a:	df 4f       	sbci	r29, 0xFF	; 255
    270c:	99 83       	std	Y+1, r25	; 0x01
    270e:	88 83       	st	Y, r24
    2710:	c7 5b       	subi	r28, 0xB7	; 183
    2712:	d0 40       	sbci	r29, 0x00	; 0
					lcd.gotoxy(2,5);
    2714:	65 e0       	ldi	r22, 0x05	; 5
    2716:	70 e0       	ldi	r23, 0x00	; 0
    2718:	82 e0       	ldi	r24, 0x02	; 2
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	f6 01       	movw	r30, r12
    271e:	09 95       	icall
					string=func.ui16toa(output);
    2720:	c9 54       	subi	r28, 0x49	; 73
    2722:	df 4f       	sbci	r29, 0xFF	; 255
    2724:	88 81       	ld	r24, Y
    2726:	99 81       	ldd	r25, Y+1	; 0x01
    2728:	c7 5b       	subi	r28, 0xB7	; 183
    272a:	d0 40       	sbci	r29, 0x00	; 0
    272c:	f5 01       	movw	r30, r10
    272e:	09 95       	icall
    2730:	90 93 f6 01 	sts	0x01F6, r25	; 0x8001f6 <string+0x1>
    2734:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <string>
					lcd.string(string);
    2738:	ce 54       	subi	r28, 0x4E	; 78
    273a:	df 4f       	sbci	r29, 0xFF	; 255
    273c:	e8 81       	ld	r30, Y
    273e:	f9 81       	ldd	r31, Y+1	; 0x01
    2740:	c2 5b       	subi	r28, 0xB2	; 178
    2742:	d0 40       	sbci	r29, 0x00	; 0
    2744:	09 95       	icall
					keypad.flush();
    2746:	f3 01       	movw	r30, r6
    2748:	09 95       	icall
					option=4;
    274a:	68 94       	set
    274c:	44 24       	eor	r4, r4
    274e:	42 f8       	bld	r4, 2
    2750:	37 c2       	rjmp	.+1134   	; 0x2bc0 <main+0x7ec>
				}
				if(keypadinput.character == 'C'){
    2752:	f3 e4       	ldi	r31, 0x43	; 67
    2754:	5f 12       	cpse	r5, r31
    2756:	34 c2       	rjmp	.+1128   	; 0x2bc0 <main+0x7ec>
					keypad.flush();
    2758:	f3 01       	movw	r30, r6
    275a:	09 95       	icall
    275c:	31 c2       	rjmp	.+1122   	; 0x2bc0 <main+0x7ec>
					option=3;
				}
				break;
			case 4: // Third Entry [mask]
				lcd.gotoxy(0,7);
    275e:	67 e0       	ldi	r22, 0x07	; 7
    2760:	70 e0       	ldi	r23, 0x00	; 0
    2762:	80 e0       	ldi	r24, 0x00	; 0
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	f6 01       	movw	r30, r12
    2768:	09 95       	icall
				lcd.string_size(keypadinput.printstring,4);
    276a:	64 e0       	ldi	r22, 0x04	; 4
    276c:	c8 01       	movw	r24, r16
    276e:	f7 01       	movw	r30, r14
    2770:	09 95       	icall
				if(keypadinput.character == 'D'){
    2772:	f4 e4       	ldi	r31, 0x44	; 68
    2774:	5f 12       	cpse	r5, r31
    2776:	2e c0       	rjmp	.+92     	; 0x27d4 <main+0x400>
					mask=func.strToInt(keypadinput.string);
    2778:	c4 01       	movw	r24, r8
    277a:	cc 54       	subi	r28, 0x4C	; 76
    277c:	df 4f       	sbci	r29, 0xFF	; 255
    277e:	e8 81       	ld	r30, Y
    2780:	f9 81       	ldd	r31, Y+1	; 0x01
    2782:	c4 5b       	subi	r28, 0xB4	; 180
    2784:	d0 40       	sbci	r29, 0x00	; 0
    2786:	09 95       	icall
    2788:	c7 54       	subi	r28, 0x47	; 71
    278a:	df 4f       	sbci	r29, 0xFF	; 255
    278c:	99 83       	std	Y+1, r25	; 0x01
    278e:	88 83       	st	Y, r24
    2790:	c9 5b       	subi	r28, 0xB9	; 185
    2792:	d0 40       	sbci	r29, 0x00	; 0
					lcd.gotoxy(2,10);
    2794:	6a e0       	ldi	r22, 0x0A	; 10
    2796:	70 e0       	ldi	r23, 0x00	; 0
    2798:	82 e0       	ldi	r24, 0x02	; 2
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	f6 01       	movw	r30, r12
    279e:	09 95       	icall
					string=func.ui16toa(mask);
    27a0:	c7 54       	subi	r28, 0x47	; 71
    27a2:	df 4f       	sbci	r29, 0xFF	; 255
    27a4:	88 81       	ld	r24, Y
    27a6:	99 81       	ldd	r25, Y+1	; 0x01
    27a8:	c9 5b       	subi	r28, 0xB9	; 185
    27aa:	d0 40       	sbci	r29, 0x00	; 0
    27ac:	f5 01       	movw	r30, r10
    27ae:	09 95       	icall
    27b0:	90 93 f6 01 	sts	0x01F6, r25	; 0x8001f6 <string+0x1>
    27b4:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <string>
					lcd.string(string);
    27b8:	ce 54       	subi	r28, 0x4E	; 78
    27ba:	df 4f       	sbci	r29, 0xFF	; 255
    27bc:	e8 81       	ld	r30, Y
    27be:	f9 81       	ldd	r31, Y+1	; 0x01
    27c0:	c2 5b       	subi	r28, 0xB2	; 178
    27c2:	d0 40       	sbci	r29, 0x00	; 0
    27c4:	09 95       	icall
					keypad.flush();
    27c6:	f3 01       	movw	r30, r6
    27c8:	09 95       	icall
					option=5;
    27ca:	0f 2e       	mov	r0, r31
    27cc:	f5 e0       	ldi	r31, 0x05	; 5
    27ce:	4f 2e       	mov	r4, r31
    27d0:	f0 2d       	mov	r31, r0
    27d2:	f6 c1       	rjmp	.+1004   	; 0x2bc0 <main+0x7ec>
				}
				if(keypadinput.character == 'C'){
    27d4:	f3 e4       	ldi	r31, 0x43	; 67
    27d6:	5f 12       	cpse	r5, r31
    27d8:	f3 c1       	rjmp	.+998    	; 0x2bc0 <main+0x7ec>
					keypad.flush();
    27da:	f3 01       	movw	r30, r6
    27dc:	09 95       	icall
    27de:	f0 c1       	rjmp	.+992    	; 0x2bc0 <main+0x7ec>
					option=4;
				}
				break;
			case 5: // Fourth entry [page] and upload with reply
				lcd.gotoxy(0,7);
    27e0:	67 e0       	ldi	r22, 0x07	; 7
    27e2:	70 e0       	ldi	r23, 0x00	; 0
    27e4:	80 e0       	ldi	r24, 0x00	; 0
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	f6 01       	movw	r30, r12
    27ea:	09 95       	icall
				lcd.string_size(keypadinput.printstring,4);
    27ec:	64 e0       	ldi	r22, 0x04	; 4
    27ee:	c8 01       	movw	r24, r16
    27f0:	f7 01       	movw	r30, r14
    27f2:	09 95       	icall
				if(keypadinput.character == 'D'){ // D is the enter key on the keyboard
    27f4:	f4 e4       	ldi	r31, 0x44	; 68
    27f6:	5f 12       	cpse	r5, r31
    27f8:	83 c0       	rjmp	.+262    	; 0x2900 <main+0x52c>
					page=func.strToInt(keypadinput.string);
    27fa:	c4 01       	movw	r24, r8
    27fc:	cc 54       	subi	r28, 0x4C	; 76
    27fe:	df 4f       	sbci	r29, 0xFF	; 255
    2800:	e8 81       	ld	r30, Y
    2802:	f9 81       	ldd	r31, Y+1	; 0x01
    2804:	c4 5b       	subi	r28, 0xB4	; 180
    2806:	d0 40       	sbci	r29, 0x00	; 0
    2808:	09 95       	icall
    280a:	8c 01       	movw	r16, r24
					lcd.gotoxy(2,15);
    280c:	6f e0       	ldi	r22, 0x0F	; 15
    280e:	70 e0       	ldi	r23, 0x00	; 0
    2810:	82 e0       	ldi	r24, 0x02	; 2
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	f6 01       	movw	r30, r12
    2816:	09 95       	icall
					string=func.ui16toa(page);
    2818:	c8 01       	movw	r24, r16
    281a:	99 27       	eor	r25, r25
    281c:	f5 01       	movw	r30, r10
    281e:	09 95       	icall
    2820:	90 93 f6 01 	sts	0x01F6, r25	; 0x8001f6 <string+0x1>
    2824:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <string>
					lcd.string(string);
    2828:	ce 54       	subi	r28, 0x4E	; 78
    282a:	df 4f       	sbci	r29, 0xFF	; 255
    282c:	e8 81       	ld	r30, Y
    282e:	f9 81       	ldd	r31, Y+1	; 0x01
    2830:	c2 5b       	subi	r28, 0xB2	; 178
    2832:	d0 40       	sbci	r29, 0x00	; 0
    2834:	09 95       	icall
					switch(lfsm.learn(&lfsm,input_tmp,output,mask,page)){
    2836:	60 96       	adiw	r28, 0x10	; 16
    2838:	ee ad       	ldd	r30, Y+62	; 0x3e
    283a:	ff ad       	ldd	r31, Y+63	; 0x3f
    283c:	60 97       	sbiw	r28, 0x10	; 16
    283e:	c7 54       	subi	r28, 0x47	; 71
    2840:	df 4f       	sbci	r29, 0xFF	; 255
    2842:	28 81       	ld	r18, Y
    2844:	39 81       	ldd	r19, Y+1	; 0x01
    2846:	c9 5b       	subi	r28, 0xB9	; 185
    2848:	d0 40       	sbci	r29, 0x00	; 0
    284a:	c9 54       	subi	r28, 0x49	; 73
    284c:	df 4f       	sbci	r29, 0xFF	; 255
    284e:	48 81       	ld	r20, Y
    2850:	59 81       	ldd	r21, Y+1	; 0x01
    2852:	c7 5b       	subi	r28, 0xB7	; 183
    2854:	d0 40       	sbci	r29, 0x00	; 0
    2856:	ca 54       	subi	r28, 0x4A	; 74
    2858:	df 4f       	sbci	r29, 0xFF	; 255
    285a:	68 81       	ld	r22, Y
    285c:	c6 5b       	subi	r28, 0xB6	; 182
    285e:	d0 40       	sbci	r29, 0x00	; 0
    2860:	ce 01       	movw	r24, r28
    2862:	8e 5b       	subi	r24, 0xBE	; 190
    2864:	9f 4f       	sbci	r25, 0xFF	; 255
    2866:	09 95       	icall
    2868:	82 30       	cpi	r24, 0x02	; 2
    286a:	19 f1       	breq	.+70     	; 0x28b2 <main+0x4de>
    286c:	28 f4       	brcc	.+10     	; 0x2878 <main+0x4a4>
    286e:	88 23       	and	r24, r24
    2870:	41 f0       	breq	.+16     	; 0x2882 <main+0x4ae>
    2872:	81 30       	cpi	r24, 0x01	; 1
    2874:	91 f0       	breq	.+36     	; 0x289a <main+0x4c6>
    2876:	40 c0       	rjmp	.+128    	; 0x28f8 <main+0x524>
    2878:	83 30       	cpi	r24, 0x03	; 3
    287a:	39 f1       	breq	.+78     	; 0x28ca <main+0x4f6>
    287c:	84 30       	cpi	r24, 0x04	; 4
    287e:	89 f1       	breq	.+98     	; 0x28e2 <main+0x50e>
    2880:	3b c0       	rjmp	.+118    	; 0x28f8 <main+0x524>
						case 0: // Not used
							lcd.gotoxy(3,12);
    2882:	6c e0       	ldi	r22, 0x0C	; 12
    2884:	70 e0       	ldi	r23, 0x00	; 0
    2886:	83 e0       	ldi	r24, 0x03	; 3
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	f6 01       	movw	r30, r12
    288c:	09 95       	icall
							lcd.string_size("disabled",7);
    288e:	67 e0       	ldi	r22, 0x07	; 7
    2890:	87 e3       	ldi	r24, 0x37	; 55
    2892:	91 e0       	ldi	r25, 0x01	; 1
    2894:	f7 01       	movw	r30, r14
    2896:	09 95       	icall
							break;
    2898:	2f c0       	rjmp	.+94     	; 0x28f8 <main+0x524>
						case 1: // already programmed
							lcd.gotoxy(3,12);
    289a:	6c e0       	ldi	r22, 0x0C	; 12
    289c:	70 e0       	ldi	r23, 0x00	; 0
    289e:	83 e0       	ldi	r24, 0x03	; 3
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	f6 01       	movw	r30, r12
    28a4:	09 95       	icall
							lcd.string_size("exists",7);
    28a6:	67 e0       	ldi	r22, 0x07	; 7
    28a8:	80 e4       	ldi	r24, 0x40	; 64
    28aa:	91 e0       	ldi	r25, 0x01	; 1
    28ac:	f7 01       	movw	r30, r14
    28ae:	09 95       	icall
							break;
    28b0:	23 c0       	rjmp	.+70     	; 0x28f8 <main+0x524>
						case 2: // new entry edded
							lcd.gotoxy(3,12);
    28b2:	6c e0       	ldi	r22, 0x0C	; 12
    28b4:	70 e0       	ldi	r23, 0x00	; 0
    28b6:	83 e0       	ldi	r24, 0x03	; 3
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	f6 01       	movw	r30, r12
    28bc:	09 95       	icall
							lcd.string_size("upload",7);
    28be:	67 e0       	ldi	r22, 0x07	; 7
    28c0:	87 e4       	ldi	r24, 0x47	; 71
    28c2:	91 e0       	ldi	r25, 0x01	; 1
    28c4:	f7 01       	movw	r30, r14
    28c6:	09 95       	icall
							break;
    28c8:	17 c0       	rjmp	.+46     	; 0x28f8 <main+0x524>
						case 3: // new entry added
							lcd.gotoxy(3,12);
    28ca:	6c e0       	ldi	r22, 0x0C	; 12
    28cc:	70 e0       	ldi	r23, 0x00	; 0
    28ce:	83 e0       	ldi	r24, 0x03	; 3
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	f6 01       	movw	r30, r12
    28d4:	09 95       	icall
							lcd.string_size("upload",7);
    28d6:	67 e0       	ldi	r22, 0x07	; 7
    28d8:	87 e4       	ldi	r24, 0x47	; 71
    28da:	91 e0       	ldi	r25, 0x01	; 1
    28dc:	f7 01       	movw	r30, r14
    28de:	09 95       	icall
							break;
    28e0:	0b c0       	rjmp	.+22     	; 0x28f8 <main+0x524>
						case 4: // eeprom is full reject entry
							lcd.gotoxy(3,12);
    28e2:	6c e0       	ldi	r22, 0x0C	; 12
    28e4:	70 e0       	ldi	r23, 0x00	; 0
    28e6:	83 e0       	ldi	r24, 0x03	; 3
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	f6 01       	movw	r30, r12
    28ec:	09 95       	icall
							lcd.string_size("full",7);
    28ee:	67 e0       	ldi	r22, 0x07	; 7
    28f0:	8e e4       	ldi	r24, 0x4E	; 78
    28f2:	91 e0       	ldi	r25, 0x01	; 1
    28f4:	f7 01       	movw	r30, r14
    28f6:	09 95       	icall
						default:
							break;
					}//End switch
				/******/
				//lfsm.read(&lfsm,input_tmp);
				keypad.flush();
    28f8:	f3 01       	movw	r30, r6
    28fa:	09 95       	icall
				option=0;
    28fc:	41 2c       	mov	r4, r1
    28fe:	60 c1       	rjmp	.+704    	; 0x2bc0 <main+0x7ec>
				}//End if
				if(keypadinput.character == 'C'){ // re-enter value [page] 
    2900:	f3 e4       	ldi	r31, 0x43	; 67
    2902:	5f 12       	cpse	r5, r31
    2904:	5d c1       	rjmp	.+698    	; 0x2bc0 <main+0x7ec>
					keypad.flush();
    2906:	f3 01       	movw	r30, r6
    2908:	09 95       	icall
    290a:	5a c1       	rjmp	.+692    	; 0x2bc0 <main+0x7ec>
					option=5;
				}
				break;
			case 6: // Delete or Remove or No action Menu
				lcd.gotoxy(1,0);
    290c:	60 e0       	ldi	r22, 0x00	; 0
    290e:	70 e0       	ldi	r23, 0x00	; 0
    2910:	81 e0       	ldi	r24, 0x01	; 1
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	f6 01       	movw	r30, r12
    2916:	09 95       	icall
				lcd.string_size("Delete - 1",10);
    2918:	6a e0       	ldi	r22, 0x0A	; 10
    291a:	83 e5       	ldi	r24, 0x53	; 83
    291c:	91 e0       	ldi	r25, 0x01	; 1
    291e:	f7 01       	movw	r30, r14
    2920:	09 95       	icall
				lcd.gotoxy(2,0);
    2922:	60 e0       	ldi	r22, 0x00	; 0
    2924:	70 e0       	ldi	r23, 0x00	; 0
    2926:	82 e0       	ldi	r24, 0x02	; 2
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	f6 01       	movw	r30, r12
    292c:	09 95       	icall
				lcd.string_size("Remove - 2 No - 3",17);
    292e:	61 e1       	ldi	r22, 0x11	; 17
    2930:	8e e5       	ldi	r24, 0x5E	; 94
    2932:	91 e0       	ldi	r25, 0x01	; 1
    2934:	f7 01       	movw	r30, r14
    2936:	09 95       	icall
				option=7;
    2938:	0f 2e       	mov	r0, r31
    293a:	f7 e0       	ldi	r31, 0x07	; 7
    293c:	4f 2e       	mov	r4, r31
    293e:	f0 2d       	mov	r31, r0
				break;
    2940:	3f c1       	rjmp	.+638    	; 0x2bc0 <main+0x7ec>
			case 7: // Delete or Remove or No action choice
				if(keypadinput.character == '1'){ // Delete
    2942:	f1 e3       	ldi	r31, 0x31	; 49
    2944:	5f 12       	cpse	r5, r31
    2946:	3c c0       	rjmp	.+120    	; 0x29c0 <main+0x5ec>
					lcd.gotoxy(1,0);
    2948:	60 e0       	ldi	r22, 0x00	; 0
    294a:	70 e0       	ldi	r23, 0x00	; 0
    294c:	81 e0       	ldi	r24, 0x01	; 1
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	f6 01       	movw	r30, r12
    2952:	09 95       	icall
					lcd.hspace(10);
    2954:	8a e0       	ldi	r24, 0x0A	; 10
    2956:	c0 55       	subi	r28, 0x50	; 80
    2958:	df 4f       	sbci	r29, 0xFF	; 255
    295a:	e8 81       	ld	r30, Y
    295c:	f9 81       	ldd	r31, Y+1	; 0x01
    295e:	c0 5b       	subi	r28, 0xB0	; 176
    2960:	d0 40       	sbci	r29, 0x00	; 0
    2962:	09 95       	icall
					lcd.gotoxy(2,0);
    2964:	60 e0       	ldi	r22, 0x00	; 0
    2966:	70 e0       	ldi	r23, 0x00	; 0
    2968:	82 e0       	ldi	r24, 0x02	; 2
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	f6 01       	movw	r30, r12
    296e:	09 95       	icall
					lcd.hspace(17);
    2970:	81 e1       	ldi	r24, 0x11	; 17
    2972:	c0 55       	subi	r28, 0x50	; 80
    2974:	df 4f       	sbci	r29, 0xFF	; 255
    2976:	e8 81       	ld	r30, Y
    2978:	f9 81       	ldd	r31, Y+1	; 0x01
    297a:	c0 5b       	subi	r28, 0xB0	; 176
    297c:	d0 40       	sbci	r29, 0x00	; 0
    297e:	09 95       	icall
					lfsm.deleteall(&lfsm);
    2980:	66 96       	adiw	r28, 0x16	; 22
    2982:	ee ad       	ldd	r30, Y+62	; 0x3e
    2984:	ff ad       	ldd	r31, Y+63	; 0x3f
    2986:	66 97       	sbiw	r28, 0x16	; 22
    2988:	ce 01       	movw	r24, r28
    298a:	8e 5b       	subi	r24, 0xBE	; 190
    298c:	9f 4f       	sbci	r25, 0xFF	; 255
    298e:	09 95       	icall
					lfsm.setpage(&lfsm,0);
    2990:	a0 96       	adiw	r28, 0x20	; 32
    2992:	ee ad       	ldd	r30, Y+62	; 0x3e
    2994:	ff ad       	ldd	r31, Y+63	; 0x3f
    2996:	a0 97       	sbiw	r28, 0x20	; 32
    2998:	60 e0       	ldi	r22, 0x00	; 0
    299a:	ce 01       	movw	r24, r28
    299c:	8e 5b       	subi	r24, 0xBE	; 190
    299e:	9f 4f       	sbci	r25, 0xFF	; 255
    29a0:	09 95       	icall
					//lfsm.setoutput(&lfsm,0X00);
					keypad.flush();
    29a2:	f3 01       	movw	r30, r6
    29a4:	09 95       	icall
					lcd.gotoxy(3,12);
    29a6:	6c e0       	ldi	r22, 0x0C	; 12
    29a8:	70 e0       	ldi	r23, 0x00	; 0
    29aa:	83 e0       	ldi	r24, 0x03	; 3
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	f6 01       	movw	r30, r12
    29b0:	09 95       	icall
					lcd.string_size("deleted",7);
    29b2:	67 e0       	ldi	r22, 0x07	; 7
    29b4:	80 e7       	ldi	r24, 0x70	; 112
    29b6:	91 e0       	ldi	r25, 0x01	; 1
    29b8:	f7 01       	movw	r30, r14
    29ba:	09 95       	icall
					option=0;
    29bc:	41 2c       	mov	r4, r1
    29be:	00 c1       	rjmp	.+512    	; 0x2bc0 <main+0x7ec>
				}else if(keypadinput.character == '2'){ // Remove
    29c0:	f2 e3       	ldi	r31, 0x32	; 50
    29c2:	5f 12       	cpse	r5, r31
    29c4:	20 c0       	rjmp	.+64     	; 0x2a06 <main+0x632>
					lcd.gotoxy(1,0);
    29c6:	60 e0       	ldi	r22, 0x00	; 0
    29c8:	70 e0       	ldi	r23, 0x00	; 0
    29ca:	81 e0       	ldi	r24, 0x01	; 1
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	f6 01       	movw	r30, r12
    29d0:	09 95       	icall
					lcd.hspace(10);
    29d2:	8a e0       	ldi	r24, 0x0A	; 10
    29d4:	c0 55       	subi	r28, 0x50	; 80
    29d6:	df 4f       	sbci	r29, 0xFF	; 255
    29d8:	e8 81       	ld	r30, Y
    29da:	f9 81       	ldd	r31, Y+1	; 0x01
    29dc:	c0 5b       	subi	r28, 0xB0	; 176
    29de:	d0 40       	sbci	r29, 0x00	; 0
    29e0:	09 95       	icall
					lcd.gotoxy(2,0);
    29e2:	60 e0       	ldi	r22, 0x00	; 0
    29e4:	70 e0       	ldi	r23, 0x00	; 0
    29e6:	82 e0       	ldi	r24, 0x02	; 2
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	f6 01       	movw	r30, r12
    29ec:	09 95       	icall
					lcd.hspace(17);
    29ee:	81 e1       	ldi	r24, 0x11	; 17
    29f0:	c0 55       	subi	r28, 0x50	; 80
    29f2:	df 4f       	sbci	r29, 0xFF	; 255
    29f4:	e8 81       	ld	r30, Y
    29f6:	f9 81       	ldd	r31, Y+1	; 0x01
    29f8:	c0 5b       	subi	r28, 0xB0	; 176
    29fa:	d0 40       	sbci	r29, 0x00	; 0
    29fc:	09 95       	icall
					keypad.flush();
    29fe:	f3 01       	movw	r30, r6
    2a00:	09 95       	icall
					option=8;
    2a02:	42 2c       	mov	r4, r2
    2a04:	dd c0       	rjmp	.+442    	; 0x2bc0 <main+0x7ec>
				}else if(keypadinput.character == '3'){ // No action
    2a06:	f3 e3       	ldi	r31, 0x33	; 51
    2a08:	5f 12       	cpse	r5, r31
    2a0a:	da c0       	rjmp	.+436    	; 0x2bc0 <main+0x7ec>
					lcd.gotoxy(1,0);
    2a0c:	60 e0       	ldi	r22, 0x00	; 0
    2a0e:	70 e0       	ldi	r23, 0x00	; 0
    2a10:	81 e0       	ldi	r24, 0x01	; 1
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	f6 01       	movw	r30, r12
    2a16:	09 95       	icall
					lcd.hspace(10);
    2a18:	8a e0       	ldi	r24, 0x0A	; 10
    2a1a:	c0 55       	subi	r28, 0x50	; 80
    2a1c:	df 4f       	sbci	r29, 0xFF	; 255
    2a1e:	e8 81       	ld	r30, Y
    2a20:	f9 81       	ldd	r31, Y+1	; 0x01
    2a22:	c0 5b       	subi	r28, 0xB0	; 176
    2a24:	d0 40       	sbci	r29, 0x00	; 0
    2a26:	09 95       	icall
					lcd.gotoxy(2,0);
    2a28:	60 e0       	ldi	r22, 0x00	; 0
    2a2a:	70 e0       	ldi	r23, 0x00	; 0
    2a2c:	82 e0       	ldi	r24, 0x02	; 2
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	f6 01       	movw	r30, r12
    2a32:	09 95       	icall
					lcd.hspace(17);
    2a34:	81 e1       	ldi	r24, 0x11	; 17
    2a36:	c0 55       	subi	r28, 0x50	; 80
    2a38:	df 4f       	sbci	r29, 0xFF	; 255
    2a3a:	e8 81       	ld	r30, Y
    2a3c:	f9 81       	ldd	r31, Y+1	; 0x01
    2a3e:	c0 5b       	subi	r28, 0xB0	; 176
    2a40:	d0 40       	sbci	r29, 0x00	; 0
    2a42:	09 95       	icall
					keypad.flush();
    2a44:	f3 01       	movw	r30, r6
    2a46:	09 95       	icall
					option=0;
    2a48:	41 2c       	mov	r4, r1
    2a4a:	ba c0       	rjmp	.+372    	; 0x2bc0 <main+0x7ec>
				}
				break;
			case 8: // Remove Entry Data
				lcd.gotoxy(0,0);
    2a4c:	60 e0       	ldi	r22, 0x00	; 0
    2a4e:	70 e0       	ldi	r23, 0x00	; 0
    2a50:	80 e0       	ldi	r24, 0x00	; 0
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	f6 01       	movw	r30, r12
    2a56:	09 95       	icall
				lcd.string_size("Enter: ",12);
    2a58:	6c e0       	ldi	r22, 0x0C	; 12
    2a5a:	8b e1       	ldi	r24, 0x1B	; 27
    2a5c:	91 e0       	ldi	r25, 0x01	; 1
    2a5e:	f7 01       	movw	r30, r14
    2a60:	09 95       	icall
				lcd.gotoxy(1,0);
    2a62:	60 e0       	ldi	r22, 0x00	; 0
    2a64:	70 e0       	ldi	r23, 0x00	; 0
    2a66:	81 e0       	ldi	r24, 0x01	; 1
    2a68:	90 e0       	ldi	r25, 0x00	; 0
    2a6a:	f6 01       	movw	r30, r12
    2a6c:	09 95       	icall
				lcd.string_size("Input",20);
    2a6e:	64 e1       	ldi	r22, 0x14	; 20
    2a70:	88 e7       	ldi	r24, 0x78	; 120
    2a72:	91 e0       	ldi	r25, 0x01	; 1
    2a74:	f7 01       	movw	r30, r14
    2a76:	09 95       	icall
				option=9;
    2a78:	0f 2e       	mov	r0, r31
    2a7a:	f9 e0       	ldi	r31, 0x09	; 9
    2a7c:	4f 2e       	mov	r4, r31
    2a7e:	f0 2d       	mov	r31, r0
				break;
    2a80:	9f c0       	rjmp	.+318    	; 0x2bc0 <main+0x7ec>
			case 9: // Remove Entry from EEprom
				lcd.gotoxy(0,7);
    2a82:	67 e0       	ldi	r22, 0x07	; 7
    2a84:	70 e0       	ldi	r23, 0x00	; 0
    2a86:	80 e0       	ldi	r24, 0x00	; 0
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	f6 01       	movw	r30, r12
    2a8c:	09 95       	icall
				lcd.string_size(keypadinput.printstring,4);
    2a8e:	64 e0       	ldi	r22, 0x04	; 4
    2a90:	c8 01       	movw	r24, r16
    2a92:	f7 01       	movw	r30, r14
    2a94:	09 95       	icall
				if(keypadinput.character == 'D'){ // D is the enter key on the keyboard
    2a96:	f4 e4       	ldi	r31, 0x44	; 68
    2a98:	5f 12       	cpse	r5, r31
    2a9a:	8c c0       	rjmp	.+280    	; 0x2bb4 <main+0x7e0>
					input_tmp=func.strToInt(keypadinput.string);
    2a9c:	c4 01       	movw	r24, r8
    2a9e:	cc 54       	subi	r28, 0x4C	; 76
    2aa0:	df 4f       	sbci	r29, 0xFF	; 255
    2aa2:	e8 81       	ld	r30, Y
    2aa4:	f9 81       	ldd	r31, Y+1	; 0x01
    2aa6:	c4 5b       	subi	r28, 0xB4	; 180
    2aa8:	d0 40       	sbci	r29, 0x00	; 0
    2aaa:	09 95       	icall
    2aac:	8c 01       	movw	r16, r24
    2aae:	ca 54       	subi	r28, 0x4A	; 74
    2ab0:	df 4f       	sbci	r29, 0xFF	; 255
    2ab2:	88 83       	st	Y, r24
    2ab4:	c6 5b       	subi	r28, 0xB6	; 182
    2ab6:	d0 40       	sbci	r29, 0x00	; 0
					lcd.gotoxy(2,0);
    2ab8:	60 e0       	ldi	r22, 0x00	; 0
    2aba:	70 e0       	ldi	r23, 0x00	; 0
    2abc:	82 e0       	ldi	r24, 0x02	; 2
    2abe:	90 e0       	ldi	r25, 0x00	; 0
    2ac0:	f6 01       	movw	r30, r12
    2ac2:	09 95       	icall
					string=func.ui16toa(input_tmp);
    2ac4:	c8 01       	movw	r24, r16
    2ac6:	99 27       	eor	r25, r25
    2ac8:	f5 01       	movw	r30, r10
    2aca:	09 95       	icall
    2acc:	90 93 f6 01 	sts	0x01F6, r25	; 0x8001f6 <string+0x1>
    2ad0:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <string>
					lcd.string(string);
    2ad4:	ce 54       	subi	r28, 0x4E	; 78
    2ad6:	df 4f       	sbci	r29, 0xFF	; 255
    2ad8:	e8 81       	ld	r30, Y
    2ada:	f9 81       	ldd	r31, Y+1	; 0x01
    2adc:	c2 5b       	subi	r28, 0xB2	; 178
    2ade:	d0 40       	sbci	r29, 0x00	; 0
    2ae0:	09 95       	icall
					switch(lfsm.remove(&lfsm,input_tmp)){ // feedback reply
    2ae2:	64 96       	adiw	r28, 0x14	; 20
    2ae4:	ee ad       	ldd	r30, Y+62	; 0x3e
    2ae6:	ff ad       	ldd	r31, Y+63	; 0x3f
    2ae8:	64 97       	sbiw	r28, 0x14	; 20
    2aea:	60 2f       	mov	r22, r16
    2aec:	ce 01       	movw	r24, r28
    2aee:	8e 5b       	subi	r24, 0xBE	; 190
    2af0:	9f 4f       	sbci	r25, 0xFF	; 255
    2af2:	09 95       	icall
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	8b 32       	cpi	r24, 0x2B	; 43
    2af8:	91 05       	cpc	r25, r1
    2afa:	08 f0       	brcs	.+2      	; 0x2afe <main+0x72a>
    2afc:	57 c0       	rjmp	.+174    	; 0x2bac <main+0x7d8>
    2afe:	fc 01       	movw	r30, r24
    2b00:	e0 5b       	subi	r30, 0xB0	; 176
    2b02:	ff 4f       	sbci	r31, 0xFF	; 255
    2b04:	dc c0       	rjmp	.+440    	; 0x2cbe <__tablejump2__>
						case 0:
							lcd.gotoxy(3,12);
    2b06:	6c e0       	ldi	r22, 0x0C	; 12
    2b08:	70 e0       	ldi	r23, 0x00	; 0
    2b0a:	83 e0       	ldi	r24, 0x03	; 3
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	f6 01       	movw	r30, r12
    2b10:	09 95       	icall
							lcd.string_size("No entry",7);
    2b12:	67 e0       	ldi	r22, 0x07	; 7
    2b14:	8e e7       	ldi	r24, 0x7E	; 126
    2b16:	91 e0       	ldi	r25, 0x01	; 1
    2b18:	f7 01       	movw	r30, r14
    2b1a:	09 95       	icall
							break;
    2b1c:	47 c0       	rjmp	.+142    	; 0x2bac <main+0x7d8>
						case 1:
							lcd.gotoxy(3,12);
    2b1e:	6c e0       	ldi	r22, 0x0C	; 12
    2b20:	70 e0       	ldi	r23, 0x00	; 0
    2b22:	83 e0       	ldi	r24, 0x03	; 3
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	f6 01       	movw	r30, r12
    2b28:	09 95       	icall
							lcd.string_size("New Entry",7);
    2b2a:	67 e0       	ldi	r22, 0x07	; 7
    2b2c:	87 e8       	ldi	r24, 0x87	; 135
    2b2e:	91 e0       	ldi	r25, 0x01	; 1
    2b30:	f7 01       	movw	r30, r14
    2b32:	09 95       	icall
							break;
    2b34:	3b c0       	rjmp	.+118    	; 0x2bac <main+0x7d8>
						case 2:
							lcd.gotoxy(3,12);
    2b36:	6c e0       	ldi	r22, 0x0C	; 12
    2b38:	70 e0       	ldi	r23, 0x00	; 0
    2b3a:	83 e0       	ldi	r24, 0x03	; 3
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	f6 01       	movw	r30, r12
    2b40:	09 95       	icall
							lcd.string_size("global logic",7);
    2b42:	67 e0       	ldi	r22, 0x07	; 7
    2b44:	81 e9       	ldi	r24, 0x91	; 145
    2b46:	91 e0       	ldi	r25, 0x01	; 1
    2b48:	f7 01       	movw	r30, r14
    2b4a:	09 95       	icall
							break;
    2b4c:	2f c0       	rjmp	.+94     	; 0x2bac <main+0x7d8>
						case 3:
							lcd.gotoxy(3,12);
    2b4e:	6c e0       	ldi	r22, 0x0C	; 12
    2b50:	70 e0       	ldi	r23, 0x00	; 0
    2b52:	83 e0       	ldi	r24, 0x03	; 3
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	f6 01       	movw	r30, r12
    2b58:	09 95       	icall
							lcd.string_size("local logic",7);
    2b5a:	67 e0       	ldi	r22, 0x07	; 7
    2b5c:	8e e9       	ldi	r24, 0x9E	; 158
    2b5e:	91 e0       	ldi	r25, 0x01	; 1
    2b60:	f7 01       	movw	r30, r14
    2b62:	09 95       	icall
							break;
    2b64:	23 c0       	rjmp	.+70     	; 0x2bac <main+0x7d8>
						case 4:
							lcd.gotoxy(3,12);
    2b66:	6c e0       	ldi	r22, 0x0C	; 12
    2b68:	70 e0       	ldi	r23, 0x00	; 0
    2b6a:	83 e0       	ldi	r24, 0x03	; 3
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	f6 01       	movw	r30, r12
    2b70:	09 95       	icall
							lcd.string_size("local logic",7);
    2b72:	67 e0       	ldi	r22, 0x07	; 7
    2b74:	8e e9       	ldi	r24, 0x9E	; 158
    2b76:	91 e0       	ldi	r25, 0x01	; 1
    2b78:	f7 01       	movw	r30, r14
    2b7a:	09 95       	icall
							break;
    2b7c:	17 c0       	rjmp	.+46     	; 0x2bac <main+0x7d8>
						case 41:
							lcd.gotoxy(3,12);
    2b7e:	6c e0       	ldi	r22, 0x0C	; 12
    2b80:	70 e0       	ldi	r23, 0x00	; 0
    2b82:	83 e0       	ldi	r24, 0x03	; 3
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	f6 01       	movw	r30, r12
    2b88:	09 95       	icall
							lcd.string_size("local above",7);
    2b8a:	67 e0       	ldi	r22, 0x07	; 7
    2b8c:	8a ea       	ldi	r24, 0xAA	; 170
    2b8e:	91 e0       	ldi	r25, 0x01	; 1
    2b90:	f7 01       	movw	r30, r14
    2b92:	09 95       	icall
							break;
    2b94:	0b c0       	rjmp	.+22     	; 0x2bac <main+0x7d8>
						case 42:
							lcd.gotoxy(3,12);
    2b96:	6c e0       	ldi	r22, 0x0C	; 12
    2b98:	70 e0       	ldi	r23, 0x00	; 0
    2b9a:	83 e0       	ldi	r24, 0x03	; 3
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	f6 01       	movw	r30, r12
    2ba0:	09 95       	icall
							lcd.string_size("local bellow",7);
    2ba2:	67 e0       	ldi	r22, 0x07	; 7
    2ba4:	86 eb       	ldi	r24, 0xB6	; 182
    2ba6:	91 e0       	ldi	r25, 0x01	; 1
    2ba8:	f7 01       	movw	r30, r14
    2baa:	09 95       	icall
							break;
					}//End switch
					/******/
					//lfsm.read(&lfsm,input_tmp);
					
					keypad.flush();
    2bac:	f3 01       	movw	r30, r6
    2bae:	09 95       	icall
					option=0;
    2bb0:	41 2c       	mov	r4, r1
    2bb2:	06 c0       	rjmp	.+12     	; 0x2bc0 <main+0x7ec>
				}//End if
				if(keypadinput.character == 'C'){ // Repeat Remove Data Entry
    2bb4:	f3 e4       	ldi	r31, 0x43	; 67
    2bb6:	5f 12       	cpse	r5, r31
    2bb8:	03 c0       	rjmp	.+6      	; 0x2bc0 <main+0x7ec>
					keypad.flush();
    2bba:	f3 01       	movw	r30, r6
    2bbc:	09 95       	icall
					option=8;
    2bbe:	42 2c       	mov	r4, r2
				break;
			default:
				break;
		}//End switch
		/***DISPLAY***/
		lcd.gotoxy(3,0);
    2bc0:	60 e0       	ldi	r22, 0x00	; 0
    2bc2:	70 e0       	ldi	r23, 0x00	; 0
    2bc4:	83 e0       	ldi	r24, 0x03	; 3
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	f6 01       	movw	r30, r12
    2bca:	09 95       	icall
		lcd.string_size("Output ",7);
    2bcc:	67 e0       	ldi	r22, 0x07	; 7
    2bce:	83 ec       	ldi	r24, 0xC3	; 195
    2bd0:	91 e0       	ldi	r25, 0x01	; 1
    2bd2:	f7 01       	movw	r30, r14
    2bd4:	09 95       	icall
		string=func.ui16toa(lfsm.getoutput(&lfsm));
    2bd6:	68 96       	adiw	r28, 0x18	; 24
    2bd8:	ee ad       	ldd	r30, Y+62	; 0x3e
    2bda:	ff ad       	ldd	r31, Y+63	; 0x3f
    2bdc:	68 97       	sbiw	r28, 0x18	; 24
    2bde:	ce 01       	movw	r24, r28
    2be0:	8e 5b       	subi	r24, 0xBE	; 190
    2be2:	9f 4f       	sbci	r25, 0xFF	; 255
    2be4:	09 95       	icall
    2be6:	f5 01       	movw	r30, r10
    2be8:	09 95       	icall
    2bea:	90 93 f6 01 	sts	0x01F6, r25	; 0x8001f6 <string+0x1>
    2bee:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <string>
		lcd.string_size(string,4);
    2bf2:	64 e0       	ldi	r22, 0x04	; 4
    2bf4:	f7 01       	movw	r30, r14
    2bf6:	09 95       	icall
		//lcd.hspace(2);
		//string=func.ui16toa(lfsm.getstatus(&lfsm));
		//lcd.string_size(string,4);
		shift.byte(lfsm.getoutput(&lfsm));
    2bf8:	c4 55       	subi	r28, 0x54	; 84
    2bfa:	df 4f       	sbci	r29, 0xFF	; 255
    2bfc:	08 81       	ld	r16, Y
    2bfe:	19 81       	ldd	r17, Y+1	; 0x01
    2c00:	cc 5a       	subi	r28, 0xAC	; 172
    2c02:	d0 40       	sbci	r29, 0x00	; 0
    2c04:	68 96       	adiw	r28, 0x18	; 24
    2c06:	ee ad       	ldd	r30, Y+62	; 0x3e
    2c08:	ff ad       	ldd	r31, Y+63	; 0x3f
    2c0a:	68 97       	sbiw	r28, 0x18	; 24
    2c0c:	ce 01       	movw	r24, r28
    2c0e:	8e 5b       	subi	r24, 0xBE	; 190
    2c10:	9f 4f       	sbci	r25, 0xFF	; 255
    2c12:	09 95       	icall
    2c14:	f8 01       	movw	r30, r16
    2c16:	09 95       	icall
    2c18:	89 cc       	rjmp	.-1774   	; 0x252c <main+0x158>

00002c1a <__mulsi3>:
    2c1a:	db 01       	movw	r26, r22
    2c1c:	8f 93       	push	r24
    2c1e:	9f 93       	push	r25
    2c20:	66 d0       	rcall	.+204    	; 0x2cee <__muluhisi3>
    2c22:	bf 91       	pop	r27
    2c24:	af 91       	pop	r26
    2c26:	a2 9f       	mul	r26, r18
    2c28:	80 0d       	add	r24, r0
    2c2a:	91 1d       	adc	r25, r1
    2c2c:	a3 9f       	mul	r26, r19
    2c2e:	90 0d       	add	r25, r0
    2c30:	b2 9f       	mul	r27, r18
    2c32:	90 0d       	add	r25, r0
    2c34:	11 24       	eor	r1, r1
    2c36:	08 95       	ret

00002c38 <__udivmodhi4>:
    2c38:	aa 1b       	sub	r26, r26
    2c3a:	bb 1b       	sub	r27, r27
    2c3c:	51 e1       	ldi	r21, 0x11	; 17
    2c3e:	07 c0       	rjmp	.+14     	; 0x2c4e <__udivmodhi4_ep>

00002c40 <__udivmodhi4_loop>:
    2c40:	aa 1f       	adc	r26, r26
    2c42:	bb 1f       	adc	r27, r27
    2c44:	a6 17       	cp	r26, r22
    2c46:	b7 07       	cpc	r27, r23
    2c48:	10 f0       	brcs	.+4      	; 0x2c4e <__udivmodhi4_ep>
    2c4a:	a6 1b       	sub	r26, r22
    2c4c:	b7 0b       	sbc	r27, r23

00002c4e <__udivmodhi4_ep>:
    2c4e:	88 1f       	adc	r24, r24
    2c50:	99 1f       	adc	r25, r25
    2c52:	5a 95       	dec	r21
    2c54:	a9 f7       	brne	.-22     	; 0x2c40 <__udivmodhi4_loop>
    2c56:	80 95       	com	r24
    2c58:	90 95       	com	r25
    2c5a:	bc 01       	movw	r22, r24
    2c5c:	cd 01       	movw	r24, r26
    2c5e:	08 95       	ret

00002c60 <__divmodhi4>:
    2c60:	97 fb       	bst	r25, 7
    2c62:	07 2e       	mov	r0, r23
    2c64:	16 f4       	brtc	.+4      	; 0x2c6a <__divmodhi4+0xa>
    2c66:	00 94       	com	r0
    2c68:	06 d0       	rcall	.+12     	; 0x2c76 <__divmodhi4_neg1>
    2c6a:	77 fd       	sbrc	r23, 7
    2c6c:	08 d0       	rcall	.+16     	; 0x2c7e <__divmodhi4_neg2>
    2c6e:	e4 df       	rcall	.-56     	; 0x2c38 <__udivmodhi4>
    2c70:	07 fc       	sbrc	r0, 7
    2c72:	05 d0       	rcall	.+10     	; 0x2c7e <__divmodhi4_neg2>
    2c74:	3e f4       	brtc	.+14     	; 0x2c84 <__divmodhi4_exit>

00002c76 <__divmodhi4_neg1>:
    2c76:	90 95       	com	r25
    2c78:	81 95       	neg	r24
    2c7a:	9f 4f       	sbci	r25, 0xFF	; 255
    2c7c:	08 95       	ret

00002c7e <__divmodhi4_neg2>:
    2c7e:	70 95       	com	r23
    2c80:	61 95       	neg	r22
    2c82:	7f 4f       	sbci	r23, 0xFF	; 255

00002c84 <__divmodhi4_exit>:
    2c84:	08 95       	ret

00002c86 <__divmodsi4>:
    2c86:	05 2e       	mov	r0, r21
    2c88:	97 fb       	bst	r25, 7
    2c8a:	16 f4       	brtc	.+4      	; 0x2c90 <__divmodsi4+0xa>
    2c8c:	00 94       	com	r0
    2c8e:	0f d0       	rcall	.+30     	; 0x2cae <__negsi2>
    2c90:	57 fd       	sbrc	r21, 7
    2c92:	05 d0       	rcall	.+10     	; 0x2c9e <__divmodsi4_neg2>
    2c94:	36 d0       	rcall	.+108    	; 0x2d02 <__udivmodsi4>
    2c96:	07 fc       	sbrc	r0, 7
    2c98:	02 d0       	rcall	.+4      	; 0x2c9e <__divmodsi4_neg2>
    2c9a:	46 f4       	brtc	.+16     	; 0x2cac <__divmodsi4_exit>
    2c9c:	08 c0       	rjmp	.+16     	; 0x2cae <__negsi2>

00002c9e <__divmodsi4_neg2>:
    2c9e:	50 95       	com	r21
    2ca0:	40 95       	com	r20
    2ca2:	30 95       	com	r19
    2ca4:	21 95       	neg	r18
    2ca6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ca8:	4f 4f       	sbci	r20, 0xFF	; 255
    2caa:	5f 4f       	sbci	r21, 0xFF	; 255

00002cac <__divmodsi4_exit>:
    2cac:	08 95       	ret

00002cae <__negsi2>:
    2cae:	90 95       	com	r25
    2cb0:	80 95       	com	r24
    2cb2:	70 95       	com	r23
    2cb4:	61 95       	neg	r22
    2cb6:	7f 4f       	sbci	r23, 0xFF	; 255
    2cb8:	8f 4f       	sbci	r24, 0xFF	; 255
    2cba:	9f 4f       	sbci	r25, 0xFF	; 255
    2cbc:	08 95       	ret

00002cbe <__tablejump2__>:
    2cbe:	ee 0f       	add	r30, r30
    2cc0:	ff 1f       	adc	r31, r31
    2cc2:	00 24       	eor	r0, r0
    2cc4:	00 1c       	adc	r0, r0
    2cc6:	0b be       	out	0x3b, r0	; 59
    2cc8:	07 90       	elpm	r0, Z+
    2cca:	f6 91       	elpm	r31, Z
    2ccc:	e0 2d       	mov	r30, r0
    2cce:	09 94       	ijmp

00002cd0 <__umulhisi3>:
    2cd0:	a2 9f       	mul	r26, r18
    2cd2:	b0 01       	movw	r22, r0
    2cd4:	b3 9f       	mul	r27, r19
    2cd6:	c0 01       	movw	r24, r0
    2cd8:	a3 9f       	mul	r26, r19
    2cda:	70 0d       	add	r23, r0
    2cdc:	81 1d       	adc	r24, r1
    2cde:	11 24       	eor	r1, r1
    2ce0:	91 1d       	adc	r25, r1
    2ce2:	b2 9f       	mul	r27, r18
    2ce4:	70 0d       	add	r23, r0
    2ce6:	81 1d       	adc	r24, r1
    2ce8:	11 24       	eor	r1, r1
    2cea:	91 1d       	adc	r25, r1
    2cec:	08 95       	ret

00002cee <__muluhisi3>:
    2cee:	f0 df       	rcall	.-32     	; 0x2cd0 <__umulhisi3>
    2cf0:	a5 9f       	mul	r26, r21
    2cf2:	90 0d       	add	r25, r0
    2cf4:	b4 9f       	mul	r27, r20
    2cf6:	90 0d       	add	r25, r0
    2cf8:	a4 9f       	mul	r26, r20
    2cfa:	80 0d       	add	r24, r0
    2cfc:	91 1d       	adc	r25, r1
    2cfe:	11 24       	eor	r1, r1
    2d00:	08 95       	ret

00002d02 <__udivmodsi4>:
    2d02:	a1 e2       	ldi	r26, 0x21	; 33
    2d04:	1a 2e       	mov	r1, r26
    2d06:	aa 1b       	sub	r26, r26
    2d08:	bb 1b       	sub	r27, r27
    2d0a:	fd 01       	movw	r30, r26
    2d0c:	0d c0       	rjmp	.+26     	; 0x2d28 <__udivmodsi4_ep>

00002d0e <__udivmodsi4_loop>:
    2d0e:	aa 1f       	adc	r26, r26
    2d10:	bb 1f       	adc	r27, r27
    2d12:	ee 1f       	adc	r30, r30
    2d14:	ff 1f       	adc	r31, r31
    2d16:	a2 17       	cp	r26, r18
    2d18:	b3 07       	cpc	r27, r19
    2d1a:	e4 07       	cpc	r30, r20
    2d1c:	f5 07       	cpc	r31, r21
    2d1e:	20 f0       	brcs	.+8      	; 0x2d28 <__udivmodsi4_ep>
    2d20:	a2 1b       	sub	r26, r18
    2d22:	b3 0b       	sbc	r27, r19
    2d24:	e4 0b       	sbc	r30, r20
    2d26:	f5 0b       	sbc	r31, r21

00002d28 <__udivmodsi4_ep>:
    2d28:	66 1f       	adc	r22, r22
    2d2a:	77 1f       	adc	r23, r23
    2d2c:	88 1f       	adc	r24, r24
    2d2e:	99 1f       	adc	r25, r25
    2d30:	1a 94       	dec	r1
    2d32:	69 f7       	brne	.-38     	; 0x2d0e <__udivmodsi4_loop>
    2d34:	60 95       	com	r22
    2d36:	70 95       	com	r23
    2d38:	80 95       	com	r24
    2d3a:	90 95       	com	r25
    2d3c:	9b 01       	movw	r18, r22
    2d3e:	ac 01       	movw	r20, r24
    2d40:	bd 01       	movw	r22, r26
    2d42:	cf 01       	movw	r24, r30
    2d44:	08 95       	ret

00002d46 <eeprom_read_block>:
    2d46:	dc 01       	movw	r26, r24
    2d48:	cb 01       	movw	r24, r22

00002d4a <eeprom_read_blraw>:
    2d4a:	fc 01       	movw	r30, r24
    2d4c:	e1 99       	sbic	0x1c, 1	; 28
    2d4e:	fe cf       	rjmp	.-4      	; 0x2d4c <eeprom_read_blraw+0x2>
    2d50:	06 c0       	rjmp	.+12     	; 0x2d5e <eeprom_read_blraw+0x14>
    2d52:	ff bb       	out	0x1f, r31	; 31
    2d54:	ee bb       	out	0x1e, r30	; 30
    2d56:	e0 9a       	sbi	0x1c, 0	; 28
    2d58:	31 96       	adiw	r30, 0x01	; 1
    2d5a:	0d b2       	in	r0, 0x1d	; 29
    2d5c:	0d 92       	st	X+, r0
    2d5e:	41 50       	subi	r20, 0x01	; 1
    2d60:	50 40       	sbci	r21, 0x00	; 0
    2d62:	b8 f7       	brcc	.-18     	; 0x2d52 <eeprom_read_blraw+0x8>
    2d64:	08 95       	ret

00002d66 <eeprom_read_byte>:
    2d66:	e1 99       	sbic	0x1c, 1	; 28
    2d68:	fe cf       	rjmp	.-4      	; 0x2d66 <eeprom_read_byte>
    2d6a:	9f bb       	out	0x1f, r25	; 31
    2d6c:	8e bb       	out	0x1e, r24	; 30
    2d6e:	e0 9a       	sbi	0x1c, 0	; 28
    2d70:	99 27       	eor	r25, r25
    2d72:	8d b3       	in	r24, 0x1d	; 29
    2d74:	08 95       	ret

00002d76 <eeprom_read_word>:
    2d76:	a8 e1       	ldi	r26, 0x18	; 24
    2d78:	b0 e0       	ldi	r27, 0x00	; 0
    2d7a:	42 e0       	ldi	r20, 0x02	; 2
    2d7c:	50 e0       	ldi	r21, 0x00	; 0
    2d7e:	e5 cf       	rjmp	.-54     	; 0x2d4a <eeprom_read_blraw>

00002d80 <eeprom_update_block>:
    2d80:	dc 01       	movw	r26, r24
    2d82:	a4 0f       	add	r26, r20
    2d84:	b5 1f       	adc	r27, r21
    2d86:	41 50       	subi	r20, 0x01	; 1
    2d88:	50 40       	sbci	r21, 0x00	; 0
    2d8a:	40 f0       	brcs	.+16     	; 0x2d9c <eeprom_update_block+0x1c>
    2d8c:	cb 01       	movw	r24, r22
    2d8e:	84 0f       	add	r24, r20
    2d90:	95 1f       	adc	r25, r21
    2d92:	2e 91       	ld	r18, -X
    2d94:	05 d0       	rcall	.+10     	; 0x2da0 <eeprom_update_r18>
    2d96:	41 50       	subi	r20, 0x01	; 1
    2d98:	50 40       	sbci	r21, 0x00	; 0
    2d9a:	d8 f7       	brcc	.-10     	; 0x2d92 <eeprom_update_block+0x12>
    2d9c:	08 95       	ret

00002d9e <eeprom_update_byte>:
    2d9e:	26 2f       	mov	r18, r22

00002da0 <eeprom_update_r18>:
    2da0:	e1 99       	sbic	0x1c, 1	; 28
    2da2:	fe cf       	rjmp	.-4      	; 0x2da0 <eeprom_update_r18>
    2da4:	9f bb       	out	0x1f, r25	; 31
    2da6:	8e bb       	out	0x1e, r24	; 30
    2da8:	e0 9a       	sbi	0x1c, 0	; 28
    2daa:	01 97       	sbiw	r24, 0x01	; 1
    2dac:	0d b2       	in	r0, 0x1d	; 29
    2dae:	02 16       	cp	r0, r18
    2db0:	31 f0       	breq	.+12     	; 0x2dbe <eeprom_update_r18+0x1e>
    2db2:	2d bb       	out	0x1d, r18	; 29
    2db4:	0f b6       	in	r0, 0x3f	; 63
    2db6:	f8 94       	cli
    2db8:	e2 9a       	sbi	0x1c, 2	; 28
    2dba:	e1 9a       	sbi	0x1c, 1	; 28
    2dbc:	0f be       	out	0x3f, r0	; 63
    2dbe:	08 95       	ret

00002dc0 <eeprom_update_dword>:
    2dc0:	03 96       	adiw	r24, 0x03	; 3
    2dc2:	27 2f       	mov	r18, r23
    2dc4:	ed df       	rcall	.-38     	; 0x2da0 <eeprom_update_r18>
    2dc6:	eb df       	rcall	.-42     	; 0x2d9e <eeprom_update_byte>
    2dc8:	25 2f       	mov	r18, r21
    2dca:	ea df       	rcall	.-44     	; 0x2da0 <eeprom_update_r18>
    2dcc:	24 2f       	mov	r18, r20
    2dce:	e8 cf       	rjmp	.-48     	; 0x2da0 <eeprom_update_r18>

00002dd0 <eeprom_update_word>:
    2dd0:	01 96       	adiw	r24, 0x01	; 1
    2dd2:	27 2f       	mov	r18, r23
    2dd4:	e5 df       	rcall	.-54     	; 0x2da0 <eeprom_update_r18>
    2dd6:	e3 cf       	rjmp	.-58     	; 0x2d9e <eeprom_update_byte>

00002dd8 <eeprom_write_block>:
    2dd8:	dc 01       	movw	r26, r24
    2dda:	cb 01       	movw	r24, r22
    2ddc:	02 c0       	rjmp	.+4      	; 0x2de2 <eeprom_write_block+0xa>
    2dde:	2d 91       	ld	r18, X+
    2de0:	05 d0       	rcall	.+10     	; 0x2dec <eeprom_write_r18>
    2de2:	41 50       	subi	r20, 0x01	; 1
    2de4:	50 40       	sbci	r21, 0x00	; 0
    2de6:	d8 f7       	brcc	.-10     	; 0x2dde <eeprom_write_block+0x6>
    2de8:	08 95       	ret

00002dea <eeprom_write_byte>:
    2dea:	26 2f       	mov	r18, r22

00002dec <eeprom_write_r18>:
    2dec:	e1 99       	sbic	0x1c, 1	; 28
    2dee:	fe cf       	rjmp	.-4      	; 0x2dec <eeprom_write_r18>
    2df0:	9f bb       	out	0x1f, r25	; 31
    2df2:	8e bb       	out	0x1e, r24	; 30
    2df4:	2d bb       	out	0x1d, r18	; 29
    2df6:	0f b6       	in	r0, 0x3f	; 63
    2df8:	f8 94       	cli
    2dfa:	e2 9a       	sbi	0x1c, 2	; 28
    2dfc:	e1 9a       	sbi	0x1c, 1	; 28
    2dfe:	0f be       	out	0x3f, r0	; 63
    2e00:	01 96       	adiw	r24, 0x01	; 1
    2e02:	08 95       	ret

00002e04 <eeprom_write_dword>:
    2e04:	24 2f       	mov	r18, r20
    2e06:	f2 df       	rcall	.-28     	; 0x2dec <eeprom_write_r18>
    2e08:	25 2f       	mov	r18, r21
    2e0a:	f0 df       	rcall	.-32     	; 0x2dec <eeprom_write_r18>
    2e0c:	00 c0       	rjmp	.+0      	; 0x2e0e <eeprom_write_word>

00002e0e <eeprom_write_word>:
    2e0e:	ed df       	rcall	.-38     	; 0x2dea <eeprom_write_byte>
    2e10:	27 2f       	mov	r18, r23
    2e12:	ec cf       	rjmp	.-40     	; 0x2dec <eeprom_write_r18>

00002e14 <_exit>:
    2e14:	f8 94       	cli

00002e16 <__stop_program>:
    2e16:	ff cf       	rjmp	.-2      	; 0x2e16 <__stop_program>
