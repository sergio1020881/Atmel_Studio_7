
Atmega128.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00001818  000018ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001818  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000de  00800106  00800106  000018b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000018b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000018e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000640  00000000  00000000  00001920  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000056e5  00000000  00000000  00001f60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000018c7  00000000  00000000  00007645  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003a18  00000000  00000000  00008f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001064  00000000  00000000  0000c924  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001392  00000000  00000000  0000d988  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004f48  00000000  00000000  0000ed1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005d0  00000000  00000000  00013c62  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	e8 c0       	rjmp	.+464    	; 0x1d6 <__vector_1>
       6:	00 00       	nop
       8:	f0 c0       	rjmp	.+480    	; 0x1ea <__vector_2>
       a:	00 00       	nop
       c:	f8 c0       	rjmp	.+496    	; 0x1fe <__vector_3>
       e:	00 00       	nop
      10:	00 c1       	rjmp	.+512    	; 0x212 <__vector_4>
      12:	00 00       	nop
      14:	08 c1       	rjmp	.+528    	; 0x226 <__vector_5>
      16:	00 00       	nop
      18:	10 c1       	rjmp	.+544    	; 0x23a <__vector_6>
      1a:	00 00       	nop
      1c:	18 c1       	rjmp	.+560    	; 0x24e <__vector_7>
      1e:	00 00       	nop
      20:	20 c1       	rjmp	.+576    	; 0x262 <__vector_8>
      22:	00 00       	nop
      24:	52 c0       	rjmp	.+164    	; 0xca <__bad_interrupt>
      26:	00 00       	nop
      28:	30 c1       	rjmp	.+608    	; 0x28a <__vector_10>
      2a:	00 00       	nop
      2c:	38 c1       	rjmp	.+624    	; 0x29e <__vector_11>
      2e:	00 00       	nop
      30:	40 c1       	rjmp	.+640    	; 0x2b2 <__vector_12>
      32:	00 00       	nop
      34:	48 c1       	rjmp	.+656    	; 0x2c6 <__vector_13>
      36:	00 00       	nop
      38:	50 c1       	rjmp	.+672    	; 0x2da <__vector_14>
      3a:	00 00       	nop
      3c:	58 c1       	rjmp	.+688    	; 0x2ee <__vector_15>
      3e:	00 00       	nop
      40:	60 c1       	rjmp	.+704    	; 0x302 <__vector_16>
      42:	00 00       	nop
      44:	18 c1       	rjmp	.+560    	; 0x276 <__vector_17>
      46:	00 00       	nop
      48:	a2 c1       	rjmp	.+836    	; 0x38e <__vector_18>
      4a:	00 00       	nop
      4c:	d8 c1       	rjmp	.+944    	; 0x3fe <__vector_19>
      4e:	00 00       	nop
      50:	3c c0       	rjmp	.+120    	; 0xca <__bad_interrupt>
      52:	00 00       	nop
      54:	3b c0       	rjmp	.+118    	; 0xcc <__vector_21>
      56:	00 00       	nop
      58:	38 c0       	rjmp	.+112    	; 0xca <__bad_interrupt>
      5a:	00 00       	nop
      5c:	36 c0       	rjmp	.+108    	; 0xca <__bad_interrupt>
      5e:	00 00       	nop
      60:	5a c1       	rjmp	.+692    	; 0x316 <__vector_24>
      62:	00 00       	nop
      64:	62 c1       	rjmp	.+708    	; 0x32a <__vector_25>
      66:	00 00       	nop
      68:	6a c1       	rjmp	.+724    	; 0x33e <__vector_26>
      6a:	00 00       	nop
      6c:	72 c1       	rjmp	.+740    	; 0x352 <__vector_27>
      6e:	00 00       	nop
      70:	7a c1       	rjmp	.+756    	; 0x366 <__vector_28>
      72:	00 00       	nop
      74:	82 c1       	rjmp	.+772    	; 0x37a <__vector_29>
      76:	00 00       	nop
      78:	eb c1       	rjmp	.+982    	; 0x450 <__vector_30>
      7a:	00 00       	nop
      7c:	24 c2       	rjmp	.+1096   	; 0x4c6 <__vector_31>
      7e:	00 00       	nop
      80:	24 c0       	rjmp	.+72     	; 0xca <__bad_interrupt>
      82:	00 00       	nop
      84:	22 c0       	rjmp	.+68     	; 0xca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c0       	rjmp	.+64     	; 0xca <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e8 e1       	ldi	r30, 0x18	; 24
      a0:	f8 e1       	ldi	r31, 0x18	; 24
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 30       	cpi	r26, 0x06	; 6
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	a6 e0       	ldi	r26, 0x06	; 6
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a4 3e       	cpi	r26, 0xE4	; 228
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 ca 0a 	call	0x1594	; 0x1594 <main>
      c6:	0c 94 0a 0c 	jmp	0x1814	; 0x1814 <_exit>

000000ca <__bad_interrupt>:
      ca:	9a cf       	rjmp	.-204    	; 0x0 <__vectors>

000000cc <__vector_21>:
ISR(ANALOG_INTERRUPT)
/*************************************************************************
Function: ANALOG interrupt
Purpose:  Read Analog Input
**************************************************************************/
{
      cc:	1f 92       	push	r1
      ce:	0f 92       	push	r0
      d0:	0f b6       	in	r0, 0x3f	; 63
      d2:	0f 92       	push	r0
      d4:	11 24       	eor	r1, r1
      d6:	0b b6       	in	r0, 0x3b	; 59
      d8:	0f 92       	push	r0
      da:	2f 93       	push	r18
      dc:	3f 93       	push	r19
      de:	8f 93       	push	r24
      e0:	9f 93       	push	r25
      e2:	ef 93       	push	r30
      e4:	ff 93       	push	r31
	/******/
	adc_tmp=ADCL;
      e6:	84 b1       	in	r24, 0x04	; 4
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <adc_tmp+0x1>
      ee:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <adc_tmp>
	adc_tmp|=(ADCH<<8);
      f2:	25 b1       	in	r18, 0x05	; 5
      f4:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <adc_tmp>
      f8:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <adc_tmp+0x1>
      fc:	92 2b       	or	r25, r18
      fe:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <adc_tmp+0x1>
     102:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <adc_tmp>
	if(adc_n_sample < (1<<ADC_NUMBER_SAMPLE)){
     106:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
     10a:	84 30       	cpi	r24, 0x04	; 4
     10c:	a0 f4       	brcc	.+40     	; 0x136 <__vector_21+0x6a>
		adc_n_sample++;
     10e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
     112:	8f 5f       	subi	r24, 0xFF	; 255
     114:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
		adc_sample+=adc_tmp;
     118:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <adc_tmp>
     11c:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <adc_tmp+0x1>
     120:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <adc_sample>
     124:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <adc_sample+0x1>
     128:	82 0f       	add	r24, r18
     12a:	93 1f       	adc	r25, r19
     12c:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <adc_sample+0x1>
     130:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <adc_sample>
     134:	43 c0       	rjmp	.+134    	; 0x1bc <__vector_21+0xf0>
	}else{
		ADC_VALUE[ADC_SELECTOR]=adc_sample>>ADC_NUMBER_SAMPLE;
     136:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <ADC_SELECTOR>
     13a:	f0 91 0c 01 	lds	r31, 0x010C	; 0x80010c <ADC_SELECTOR+0x1>
     13e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <adc_sample>
     142:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <adc_sample+0x1>
     146:	95 95       	asr	r25
     148:	87 95       	ror	r24
     14a:	95 95       	asr	r25
     14c:	87 95       	ror	r24
     14e:	ee 0f       	add	r30, r30
     150:	ff 1f       	adc	r31, r31
     152:	e1 5e       	subi	r30, 0xE1	; 225
     154:	fe 4f       	sbci	r31, 0xFE	; 254
     156:	91 83       	std	Z+1, r25	; 0x01
     158:	80 83       	st	Z, r24
		adc_n_sample=adc_sample=0;
     15a:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <adc_sample+0x1>
     15e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <adc_sample>
     162:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
		/******/
		if(ADC_SELECTOR < ADC_N_CHANNEL)
     166:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <ADC_SELECTOR>
     16a:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <ADC_SELECTOR+0x1>
     16e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <ADC_N_CHANNEL>
     172:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <ADC_N_CHANNEL+0x1>
     176:	28 17       	cp	r18, r24
     178:	39 07       	cpc	r19, r25
     17a:	54 f4       	brge	.+20     	; 0x190 <__vector_21+0xc4>
			ADC_SELECTOR++;
     17c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <ADC_SELECTOR>
     180:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <ADC_SELECTOR+0x1>
     184:	01 96       	adiw	r24, 0x01	; 1
     186:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <ADC_SELECTOR+0x1>
     18a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <ADC_SELECTOR>
     18e:	04 c0       	rjmp	.+8      	; 0x198 <__vector_21+0xcc>
		else
			ADC_SELECTOR=0;
     190:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <ADC_SELECTOR+0x1>
     194:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <ADC_SELECTOR>
		ADC_SELECT &= ~MUX_MASK;
     198:	87 b1       	in	r24, 0x07	; 7
     19a:	80 7e       	andi	r24, 0xE0	; 224
     19c:	87 b9       	out	0x07, r24	; 7
		ADC_SELECT |= (ADC_CHANNEL_GAIN[ADC_SELECTOR] & MUX_MASK);
     19e:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <ADC_SELECTOR>
     1a2:	f0 91 0c 01 	lds	r31, 0x010C	; 0x80010c <ADC_SELECTOR+0x1>
     1a6:	ee 0f       	add	r30, r30
     1a8:	ff 1f       	adc	r31, r31
     1aa:	e1 5f       	subi	r30, 0xF1	; 241
     1ac:	fe 4f       	sbci	r31, 0xFE	; 254
     1ae:	80 81       	ld	r24, Z
     1b0:	91 81       	ldd	r25, Z+1	; 0x01
     1b2:	27 b1       	in	r18, 0x07	; 7
     1b4:	8f 71       	andi	r24, 0x1F	; 31
     1b6:	99 27       	eor	r25, r25
     1b8:	82 2b       	or	r24, r18
     1ba:	87 b9       	out	0x07, r24	; 7
	}		
}
     1bc:	ff 91       	pop	r31
     1be:	ef 91       	pop	r30
     1c0:	9f 91       	pop	r25
     1c2:	8f 91       	pop	r24
     1c4:	3f 91       	pop	r19
     1c6:	2f 91       	pop	r18
     1c8:	0f 90       	pop	r0
     1ca:	0b be       	out	0x3b, r0	; 59
     1cc:	0f 90       	pop	r0
     1ce:	0f be       	out	0x3f, r0	; 63
     1d0:	0f 90       	pop	r0
     1d2:	1f 90       	pop	r1
     1d4:	18 95       	reti

000001d6 <__vector_1>:

/*
** interrupt
*/
// cross out the ones being used and redefine in main
ISR(INT0_vect){ }
     1d6:	1f 92       	push	r1
     1d8:	0f 92       	push	r0
     1da:	0f b6       	in	r0, 0x3f	; 63
     1dc:	0f 92       	push	r0
     1de:	11 24       	eor	r1, r1
     1e0:	0f 90       	pop	r0
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	0f 90       	pop	r0
     1e6:	1f 90       	pop	r1
     1e8:	18 95       	reti

000001ea <__vector_2>:
ISR(INT1_vect){ }
     1ea:	1f 92       	push	r1
     1ec:	0f 92       	push	r0
     1ee:	0f b6       	in	r0, 0x3f	; 63
     1f0:	0f 92       	push	r0
     1f2:	11 24       	eor	r1, r1
     1f4:	0f 90       	pop	r0
     1f6:	0f be       	out	0x3f, r0	; 63
     1f8:	0f 90       	pop	r0
     1fa:	1f 90       	pop	r1
     1fc:	18 95       	reti

000001fe <__vector_3>:
ISR(INT2_vect){ }
     1fe:	1f 92       	push	r1
     200:	0f 92       	push	r0
     202:	0f b6       	in	r0, 0x3f	; 63
     204:	0f 92       	push	r0
     206:	11 24       	eor	r1, r1
     208:	0f 90       	pop	r0
     20a:	0f be       	out	0x3f, r0	; 63
     20c:	0f 90       	pop	r0
     20e:	1f 90       	pop	r1
     210:	18 95       	reti

00000212 <__vector_4>:
ISR(INT3_vect){ }
     212:	1f 92       	push	r1
     214:	0f 92       	push	r0
     216:	0f b6       	in	r0, 0x3f	; 63
     218:	0f 92       	push	r0
     21a:	11 24       	eor	r1, r1
     21c:	0f 90       	pop	r0
     21e:	0f be       	out	0x3f, r0	; 63
     220:	0f 90       	pop	r0
     222:	1f 90       	pop	r1
     224:	18 95       	reti

00000226 <__vector_5>:
ISR(INT4_vect){ }
     226:	1f 92       	push	r1
     228:	0f 92       	push	r0
     22a:	0f b6       	in	r0, 0x3f	; 63
     22c:	0f 92       	push	r0
     22e:	11 24       	eor	r1, r1
     230:	0f 90       	pop	r0
     232:	0f be       	out	0x3f, r0	; 63
     234:	0f 90       	pop	r0
     236:	1f 90       	pop	r1
     238:	18 95       	reti

0000023a <__vector_6>:
ISR(INT5_vect){ }
     23a:	1f 92       	push	r1
     23c:	0f 92       	push	r0
     23e:	0f b6       	in	r0, 0x3f	; 63
     240:	0f 92       	push	r0
     242:	11 24       	eor	r1, r1
     244:	0f 90       	pop	r0
     246:	0f be       	out	0x3f, r0	; 63
     248:	0f 90       	pop	r0
     24a:	1f 90       	pop	r1
     24c:	18 95       	reti

0000024e <__vector_7>:
ISR(INT6_vect){ }
     24e:	1f 92       	push	r1
     250:	0f 92       	push	r0
     252:	0f b6       	in	r0, 0x3f	; 63
     254:	0f 92       	push	r0
     256:	11 24       	eor	r1, r1
     258:	0f 90       	pop	r0
     25a:	0f be       	out	0x3f, r0	; 63
     25c:	0f 90       	pop	r0
     25e:	1f 90       	pop	r1
     260:	18 95       	reti

00000262 <__vector_8>:
ISR(INT7_vect){ }
     262:	1f 92       	push	r1
     264:	0f 92       	push	r0
     266:	0f b6       	in	r0, 0x3f	; 63
     268:	0f 92       	push	r0
     26a:	11 24       	eor	r1, r1
     26c:	0f 90       	pop	r0
     26e:	0f be       	out	0x3f, r0	; 63
     270:	0f 90       	pop	r0
     272:	1f 90       	pop	r1
     274:	18 95       	reti

00000276 <__vector_17>:
    return SPI_DATA_REGISTER;
}
/*
** interrupt
*/
ISR(SPI_STC_vect){ }
     276:	1f 92       	push	r1
     278:	0f 92       	push	r0
     27a:	0f b6       	in	r0, 0x3f	; 63
     27c:	0f 92       	push	r0
     27e:	11 24       	eor	r1, r1
     280:	0f 90       	pop	r0
     282:	0f be       	out	0x3f, r0	; 63
     284:	0f 90       	pop	r0
     286:	1f 90       	pop	r1
     288:	18 95       	reti

0000028a <__vector_10>:

/*
** interrupt
*/
// So that main will not freeze when not defined, but rather exclude.
ISR(TIMER2_OVF_vect){ }
     28a:	1f 92       	push	r1
     28c:	0f 92       	push	r0
     28e:	0f b6       	in	r0, 0x3f	; 63
     290:	0f 92       	push	r0
     292:	11 24       	eor	r1, r1
     294:	0f 90       	pop	r0
     296:	0f be       	out	0x3f, r0	; 63
     298:	0f 90       	pop	r0
     29a:	1f 90       	pop	r1
     29c:	18 95       	reti

0000029e <__vector_11>:
ISR(TIMER1_CAPT_vect){ }
     29e:	1f 92       	push	r1
     2a0:	0f 92       	push	r0
     2a2:	0f b6       	in	r0, 0x3f	; 63
     2a4:	0f 92       	push	r0
     2a6:	11 24       	eor	r1, r1
     2a8:	0f 90       	pop	r0
     2aa:	0f be       	out	0x3f, r0	; 63
     2ac:	0f 90       	pop	r0
     2ae:	1f 90       	pop	r1
     2b0:	18 95       	reti

000002b2 <__vector_12>:
ISR(TIMER1_COMPA_vect){ }
     2b2:	1f 92       	push	r1
     2b4:	0f 92       	push	r0
     2b6:	0f b6       	in	r0, 0x3f	; 63
     2b8:	0f 92       	push	r0
     2ba:	11 24       	eor	r1, r1
     2bc:	0f 90       	pop	r0
     2be:	0f be       	out	0x3f, r0	; 63
     2c0:	0f 90       	pop	r0
     2c2:	1f 90       	pop	r1
     2c4:	18 95       	reti

000002c6 <__vector_13>:
ISR(TIMER1_COMPB_vect){ }
     2c6:	1f 92       	push	r1
     2c8:	0f 92       	push	r0
     2ca:	0f b6       	in	r0, 0x3f	; 63
     2cc:	0f 92       	push	r0
     2ce:	11 24       	eor	r1, r1
     2d0:	0f 90       	pop	r0
     2d2:	0f be       	out	0x3f, r0	; 63
     2d4:	0f 90       	pop	r0
     2d6:	1f 90       	pop	r1
     2d8:	18 95       	reti

000002da <__vector_14>:
ISR(TIMER1_OVF_vect){ }
     2da:	1f 92       	push	r1
     2dc:	0f 92       	push	r0
     2de:	0f b6       	in	r0, 0x3f	; 63
     2e0:	0f 92       	push	r0
     2e2:	11 24       	eor	r1, r1
     2e4:	0f 90       	pop	r0
     2e6:	0f be       	out	0x3f, r0	; 63
     2e8:	0f 90       	pop	r0
     2ea:	1f 90       	pop	r1
     2ec:	18 95       	reti

000002ee <__vector_15>:
ISR(TIMER0_COMP_vect){ }
     2ee:	1f 92       	push	r1
     2f0:	0f 92       	push	r0
     2f2:	0f b6       	in	r0, 0x3f	; 63
     2f4:	0f 92       	push	r0
     2f6:	11 24       	eor	r1, r1
     2f8:	0f 90       	pop	r0
     2fa:	0f be       	out	0x3f, r0	; 63
     2fc:	0f 90       	pop	r0
     2fe:	1f 90       	pop	r1
     300:	18 95       	reti

00000302 <__vector_16>:
ISR(TIMER0_OVF_vect){ }
     302:	1f 92       	push	r1
     304:	0f 92       	push	r0
     306:	0f b6       	in	r0, 0x3f	; 63
     308:	0f 92       	push	r0
     30a:	11 24       	eor	r1, r1
     30c:	0f 90       	pop	r0
     30e:	0f be       	out	0x3f, r0	; 63
     310:	0f 90       	pop	r0
     312:	1f 90       	pop	r1
     314:	18 95       	reti

00000316 <__vector_24>:
ISR(TIMER1_COMPC_vect){ }
     316:	1f 92       	push	r1
     318:	0f 92       	push	r0
     31a:	0f b6       	in	r0, 0x3f	; 63
     31c:	0f 92       	push	r0
     31e:	11 24       	eor	r1, r1
     320:	0f 90       	pop	r0
     322:	0f be       	out	0x3f, r0	; 63
     324:	0f 90       	pop	r0
     326:	1f 90       	pop	r1
     328:	18 95       	reti

0000032a <__vector_25>:
ISR(TIMER3_CAPT_vect){ }
     32a:	1f 92       	push	r1
     32c:	0f 92       	push	r0
     32e:	0f b6       	in	r0, 0x3f	; 63
     330:	0f 92       	push	r0
     332:	11 24       	eor	r1, r1
     334:	0f 90       	pop	r0
     336:	0f be       	out	0x3f, r0	; 63
     338:	0f 90       	pop	r0
     33a:	1f 90       	pop	r1
     33c:	18 95       	reti

0000033e <__vector_26>:
ISR(TIMER3_COMPA_vect){ }
     33e:	1f 92       	push	r1
     340:	0f 92       	push	r0
     342:	0f b6       	in	r0, 0x3f	; 63
     344:	0f 92       	push	r0
     346:	11 24       	eor	r1, r1
     348:	0f 90       	pop	r0
     34a:	0f be       	out	0x3f, r0	; 63
     34c:	0f 90       	pop	r0
     34e:	1f 90       	pop	r1
     350:	18 95       	reti

00000352 <__vector_27>:
ISR(TIMER3_COMPB_vect){ }
     352:	1f 92       	push	r1
     354:	0f 92       	push	r0
     356:	0f b6       	in	r0, 0x3f	; 63
     358:	0f 92       	push	r0
     35a:	11 24       	eor	r1, r1
     35c:	0f 90       	pop	r0
     35e:	0f be       	out	0x3f, r0	; 63
     360:	0f 90       	pop	r0
     362:	1f 90       	pop	r1
     364:	18 95       	reti

00000366 <__vector_28>:
ISR(TIMER3_COMPC_vect){ }
     366:	1f 92       	push	r1
     368:	0f 92       	push	r0
     36a:	0f b6       	in	r0, 0x3f	; 63
     36c:	0f 92       	push	r0
     36e:	11 24       	eor	r1, r1
     370:	0f 90       	pop	r0
     372:	0f be       	out	0x3f, r0	; 63
     374:	0f 90       	pop	r0
     376:	1f 90       	pop	r1
     378:	18 95       	reti

0000037a <__vector_29>:
ISR(TIMER3_OVF_vect){ }
     37a:	1f 92       	push	r1
     37c:	0f 92       	push	r0
     37e:	0f b6       	in	r0, 0x3f	; 63
     380:	0f 92       	push	r0
     382:	11 24       	eor	r1, r1
     384:	0f 90       	pop	r0
     386:	0f be       	out	0x3f, r0	; 63
     388:	0f 90       	pop	r0
     38a:	1f 90       	pop	r1
     38c:	18 95       	reti

0000038e <__vector_18>:
void uart1_puts_p(const char *progmem_s )
{
    register char c;
    while ( (c = pgm_read_byte(progmem_s++)) ) 
      uart1_putc(c);
}/* uart1_puts_p */
     38e:	1f 92       	push	r1
     390:	0f 92       	push	r0
     392:	0f b6       	in	r0, 0x3f	; 63
     394:	0f 92       	push	r0
     396:	11 24       	eor	r1, r1
     398:	0b b6       	in	r0, 0x3b	; 59
     39a:	0f 92       	push	r0
     39c:	8f 93       	push	r24
     39e:	9f 93       	push	r25
     3a0:	ef 93       	push	r30
     3a2:	ff 93       	push	r31
     3a4:	8b b1       	in	r24, 0x0b	; 11
     3a6:	9a b1       	in	r25, 0x0a	; 10
     3a8:	88 71       	andi	r24, 0x18	; 24
     3aa:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <UART_LastRxError>
     3ae:	e0 91 76 01 	lds	r30, 0x0176	; 0x800176 <UART_RxHead>
     3b2:	ef 5f       	subi	r30, 0xFF	; 255
     3b4:	ef 71       	andi	r30, 0x1F	; 31
     3b6:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <UART_RxTail>
     3ba:	e8 13       	cpse	r30, r24
     3bc:	04 c0       	rjmp	.+8      	; 0x3c6 <__vector_18+0x38>
     3be:	82 e0       	ldi	r24, 0x02	; 2
     3c0:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <UART_LastRxError>
     3c4:	11 c0       	rjmp	.+34     	; 0x3e8 <__vector_18+0x5a>
     3c6:	9c b1       	in	r25, 0x0c	; 12
     3c8:	e0 93 76 01 	sts	0x0176, r30	; 0x800176 <UART_RxHead>
     3cc:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <UART_LastRxError>
     3d0:	88 23       	and	r24, r24
     3d2:	31 f0       	breq	.+12     	; 0x3e0 <__vector_18+0x52>
     3d4:	f0 e0       	ldi	r31, 0x00	; 0
     3d6:	e7 58       	subi	r30, 0x87	; 135
     3d8:	fe 4f       	sbci	r31, 0xFE	; 254
     3da:	88 e5       	ldi	r24, 0x58	; 88
     3dc:	80 83       	st	Z, r24
     3de:	04 c0       	rjmp	.+8      	; 0x3e8 <__vector_18+0x5a>
     3e0:	f0 e0       	ldi	r31, 0x00	; 0
     3e2:	e7 58       	subi	r30, 0x87	; 135
     3e4:	fe 4f       	sbci	r31, 0xFE	; 254
     3e6:	90 83       	st	Z, r25
     3e8:	ff 91       	pop	r31
     3ea:	ef 91       	pop	r30
     3ec:	9f 91       	pop	r25
     3ee:	8f 91       	pop	r24
     3f0:	0f 90       	pop	r0
     3f2:	0b be       	out	0x3b, r0	; 59
     3f4:	0f 90       	pop	r0
     3f6:	0f be       	out	0x3f, r0	; 63
     3f8:	0f 90       	pop	r0
     3fa:	1f 90       	pop	r1
     3fc:	18 95       	reti

000003fe <__vector_19>:
     3fe:	1f 92       	push	r1
     400:	0f 92       	push	r0
     402:	0f b6       	in	r0, 0x3f	; 63
     404:	0f 92       	push	r0
     406:	11 24       	eor	r1, r1
     408:	0b b6       	in	r0, 0x3b	; 59
     40a:	0f 92       	push	r0
     40c:	8f 93       	push	r24
     40e:	9f 93       	push	r25
     410:	ef 93       	push	r30
     412:	ff 93       	push	r31
     414:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <UART_TxHead>
     418:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <UART_TxTail>
     41c:	98 13       	cpse	r25, r24
     41e:	02 c0       	rjmp	.+4      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     420:	55 98       	cbi	0x0a, 5	; 10
     422:	0b c0       	rjmp	.+22     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     424:	e0 91 77 01 	lds	r30, 0x0177	; 0x800177 <UART_TxTail>
     428:	ef 5f       	subi	r30, 0xFF	; 255
     42a:	ef 71       	andi	r30, 0x1F	; 31
     42c:	e0 93 77 01 	sts	0x0177, r30	; 0x800177 <UART_TxTail>
     430:	f0 e0       	ldi	r31, 0x00	; 0
     432:	e7 56       	subi	r30, 0x67	; 103
     434:	fe 4f       	sbci	r31, 0xFE	; 254
     436:	80 81       	ld	r24, Z
     438:	8c b9       	out	0x0c, r24	; 12
     43a:	ff 91       	pop	r31
     43c:	ef 91       	pop	r30
     43e:	9f 91       	pop	r25
     440:	8f 91       	pop	r24
     442:	0f 90       	pop	r0
     444:	0b be       	out	0x3b, r0	; 59
     446:	0f 90       	pop	r0
     448:	0f be       	out	0x3f, r0	; 63
     44a:	0f 90       	pop	r0
     44c:	1f 90       	pop	r1
     44e:	18 95       	reti

00000450 <__vector_30>:
SIGNAL(UART1_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART1 Receive Complete interrupt
Purpose:  called when the UART1 has received a character
**************************************************************************/
{
     450:	1f 92       	push	r1
     452:	0f 92       	push	r0
     454:	0f b6       	in	r0, 0x3f	; 63
     456:	0f 92       	push	r0
     458:	11 24       	eor	r1, r1
     45a:	0b b6       	in	r0, 0x3b	; 59
     45c:	0f 92       	push	r0
     45e:	8f 93       	push	r24
     460:	9f 93       	push	r25
     462:	ef 93       	push	r30
     464:	ff 93       	push	r31
    unsigned char tmphead;
	unsigned char data;
	unsigned char bit9;
    unsigned char usr;
    /* read UART status register and UART data register */
	usr  = UART1_STATUS;
     466:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    bit9 = UART1_CONTROL;
     46a:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
    bit9 = 0x01 & (bit9>>1);
    /* */
    UART1_LastRxError = (usr & (_BV(FE1)|_BV(DOR1)));
     46e:	88 71       	andi	r24, 0x18	; 24
     470:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <UART1_LastRxError>
	/* calculate buffer index */
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
     474:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <UART1_RxHead>
     478:	ef 5f       	subi	r30, 0xFF	; 255
     47a:	ef 71       	andi	r30, 0x1F	; 31
    if ( tmphead == UART1_RxTail ) {	
     47c:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <UART1_RxTail>
     480:	e8 13       	cpse	r30, r24
     482:	04 c0       	rjmp	.+8      	; 0x48c <__vector_30+0x3c>
        /* error: receive buffer overflow, caracter is lost*/
        UART1_LastRxError = UART_BUFFER_OVERFLOW >> 8; 
     484:	82 e0       	ldi	r24, 0x02	; 2
     486:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <UART1_LastRxError>
     48a:	12 c0       	rjmp	.+36     	; 0x4b0 <__vector_30+0x60>
	}else{
		data = UART1_DATA;
     48c:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
        /* store new index */
        UART1_RxHead = tmphead;
     490:	e0 93 31 01 	sts	0x0131, r30	; 0x800131 <UART1_RxHead>
		if(UART1_LastRxError){
     494:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <UART1_LastRxError>
     498:	88 23       	and	r24, r24
     49a:	31 f0       	breq	.+12     	; 0x4a8 <__vector_30+0x58>
			/* store indication data error in buffer */
			UART1_RxBuf[tmphead] = 'X';
     49c:	f0 e0       	ldi	r31, 0x00	; 0
     49e:	ec 5c       	subi	r30, 0xCC	; 204
     4a0:	fe 4f       	sbci	r31, 0xFE	; 254
     4a2:	88 e5       	ldi	r24, 0x58	; 88
     4a4:	80 83       	st	Z, r24
     4a6:	04 c0       	rjmp	.+8      	; 0x4b0 <__vector_30+0x60>
		}else{
			/* store received data in buffer */
			UART1_RxBuf[tmphead] = data;
     4a8:	f0 e0       	ldi	r31, 0x00	; 0
     4aa:	ec 5c       	subi	r30, 0xCC	; 204
     4ac:	fe 4f       	sbci	r31, 0xFE	; 254
     4ae:	90 83       	st	Z, r25
		}
    }
}
     4b0:	ff 91       	pop	r31
     4b2:	ef 91       	pop	r30
     4b4:	9f 91       	pop	r25
     4b6:	8f 91       	pop	r24
     4b8:	0f 90       	pop	r0
     4ba:	0b be       	out	0x3b, r0	; 59
     4bc:	0f 90       	pop	r0
     4be:	0f be       	out	0x3f, r0	; 63
     4c0:	0f 90       	pop	r0
     4c2:	1f 90       	pop	r1
     4c4:	18 95       	reti

000004c6 <__vector_31>:
SIGNAL(UART1_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART1 Data Register Empty interrupt
Purpose:  called when the UART1 is ready to transmit the next byte
**************************************************************************/
{
     4c6:	1f 92       	push	r1
     4c8:	0f 92       	push	r0
     4ca:	0f b6       	in	r0, 0x3f	; 63
     4cc:	0f 92       	push	r0
     4ce:	11 24       	eor	r1, r1
     4d0:	0b b6       	in	r0, 0x3b	; 59
     4d2:	0f 92       	push	r0
     4d4:	8f 93       	push	r24
     4d6:	9f 93       	push	r25
     4d8:	ef 93       	push	r30
     4da:	ff 93       	push	r31
    if ( UART1_TxHead == UART1_TxTail ) {
     4dc:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <UART1_TxHead>
     4e0:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <UART1_TxTail>
     4e4:	98 13       	cpse	r25, r24
     4e6:	06 c0       	rjmp	.+12     	; 0x4f4 <__vector_31+0x2e>
        /* tx buffer empty, disable UDRE interrupt */
        UART1_CONTROL &= ~_BV(UART1_UDRIE);
     4e8:	ea e9       	ldi	r30, 0x9A	; 154
     4ea:	f0 e0       	ldi	r31, 0x00	; 0
     4ec:	80 81       	ld	r24, Z
     4ee:	8f 7d       	andi	r24, 0xDF	; 223
     4f0:	80 83       	st	Z, r24
     4f2:	0e c0       	rjmp	.+28     	; 0x510 <__vector_31+0x4a>
    }else{
		/* calculate and store new buffer index */
        UART1_TxTail = (UART1_TxTail + 1) & UART_TX_BUFFER_MASK;
     4f4:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <UART1_TxTail>
     4f8:	8f 5f       	subi	r24, 0xFF	; 255
     4fa:	8f 71       	andi	r24, 0x1F	; 31
     4fc:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <UART1_TxTail>
        /* get one byte from buffer and write it to UART */
		UART1_DATA = UART1_TxBuf[UART1_TxTail];  /* start transmission */
     500:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <UART1_TxTail>
     504:	f0 e0       	ldi	r31, 0x00	; 0
     506:	ec 5a       	subi	r30, 0xAC	; 172
     508:	fe 4f       	sbci	r31, 0xFE	; 254
     50a:	80 81       	ld	r24, Z
     50c:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
	}
}
     510:	ff 91       	pop	r31
     512:	ef 91       	pop	r30
     514:	9f 91       	pop	r25
     516:	8f 91       	pop	r24
     518:	0f 90       	pop	r0
     51a:	0b be       	out	0x3b, r0	; 59
     51c:	0f 90       	pop	r0
     51e:	0f be       	out	0x3f, r0	; 63
     520:	0f 90       	pop	r0
     522:	1f 90       	pop	r1
     524:	18 95       	reti

00000526 <FUNCpinmatch>:
}
//pinmatch
uint8_t FUNCpinmatch(uint8_t match, uint8_t pin, uint8_t HL)
{
	uint8_t result;
	result=match&pin;
     526:	68 23       	and	r22, r24
	if(HL){
     528:	44 23       	and	r20, r20
     52a:	21 f0       	breq	.+8      	; 0x534 <FUNCpinmatch+0xe>
		if(result==match);
     52c:	86 17       	cp	r24, r22
     52e:	21 f0       	breq	.+8      	; 0x538 <FUNCpinmatch+0x12>
		else
			result=0;
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	08 95       	ret
	}else{
		if(result)
     534:	61 11       	cpse	r22, r1
			result=0;
     536:	80 e0       	ldi	r24, 0x00	; 0
		else
			result=match;
	}
	return result;
}
     538:	08 95       	ret

0000053a <FUNChmerge>:
// hmerge
uint8_t FUNChmerge(uint8_t X, uint8_t Y)
{
	return (X | Y);
}
     53a:	86 2b       	or	r24, r22
     53c:	08 95       	ret

0000053e <FUNClmerge>:
// lmerge
uint8_t FUNClmerge(uint8_t X, uint8_t Y)
{
	return (X & Y);
}
     53e:	86 23       	and	r24, r22
     540:	08 95       	ret

00000542 <FUNChh>:
uint8_t FUNChh(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi&xf;
	return i;
}
     542:	86 23       	and	r24, r22
     544:	08 95       	ret

00000546 <FUNCll>:
// ll
uint8_t FUNCll(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi|xf;
	return ~i;
     546:	86 2b       	or	r24, r22
}
     548:	80 95       	com	r24
     54a:	08 95       	ret

0000054c <FUNClh>:
// lh
uint8_t FUNClh(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi^xf;
     54c:	86 27       	eor	r24, r22
	i&=xf;
	return i;
}
     54e:	86 23       	and	r24, r22
     550:	08 95       	ret

00000552 <FUNChl>:
// hl
uint8_t FUNChl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xf^xi;
     552:	60 95       	com	r22
	i&=xi;
	return i;
}
     554:	86 23       	and	r24, r22
     556:	08 95       	ret

00000558 <FUNCdiff>:
// diff
uint8_t FUNCdiff(uint8_t xi, uint8_t xf)
{
	return xf^xi;
}
     558:	86 27       	eor	r24, r22
     55a:	08 95       	ret

0000055c <FUNCswap>:
// interchange *px and *py
void FUNCswap(long *px, long *py)
{
     55c:	cf 92       	push	r12
     55e:	df 92       	push	r13
     560:	ef 92       	push	r14
     562:	ff 92       	push	r15
     564:	0f 93       	push	r16
     566:	1f 93       	push	r17
	long temp;
	temp = *px;
     568:	fc 01       	movw	r30, r24
     56a:	00 81       	ld	r16, Z
     56c:	11 81       	ldd	r17, Z+1	; 0x01
     56e:	22 81       	ldd	r18, Z+2	; 0x02
     570:	33 81       	ldd	r19, Z+3	; 0x03
	*px = *py;
     572:	fb 01       	movw	r30, r22
     574:	c0 80       	ld	r12, Z
     576:	d1 80       	ldd	r13, Z+1	; 0x01
     578:	e2 80       	ldd	r14, Z+2	; 0x02
     57a:	f3 80       	ldd	r15, Z+3	; 0x03
     57c:	fc 01       	movw	r30, r24
     57e:	c0 82       	st	Z, r12
     580:	d1 82       	std	Z+1, r13	; 0x01
     582:	e2 82       	std	Z+2, r14	; 0x02
     584:	f3 82       	std	Z+3, r15	; 0x03
	*py = temp;
     586:	fb 01       	movw	r30, r22
     588:	00 83       	st	Z, r16
     58a:	11 83       	std	Z+1, r17	; 0x01
     58c:	22 83       	std	Z+2, r18	; 0x02
     58e:	33 83       	std	Z+3, r19	; 0x03
}
     590:	1f 91       	pop	r17
     592:	0f 91       	pop	r16
     594:	ff 90       	pop	r15
     596:	ef 90       	pop	r14
     598:	df 90       	pop	r13
     59a:	cf 90       	pop	r12
     59c:	08 95       	ret

0000059e <FUNCcopy>:
// copy: copy 'from' into 'to'; assume to is big enough
void FUNCcopy(char to[], char from[])
{
	int i;
	i = 0;
	while ((to[i] = from[i]) != '\0')
     59e:	fb 01       	movw	r30, r22
     5a0:	20 81       	ld	r18, Z
     5a2:	fc 01       	movw	r30, r24
     5a4:	20 83       	st	Z, r18
     5a6:	22 23       	and	r18, r18
     5a8:	39 f0       	breq	.+14     	; 0x5b8 <FUNCcopy+0x1a>
     5aa:	db 01       	movw	r26, r22
     5ac:	11 96       	adiw	r26, 0x01	; 1
     5ae:	31 96       	adiw	r30, 0x01	; 1
     5b0:	9d 91       	ld	r25, X+
     5b2:	91 93       	st	Z+, r25
     5b4:	91 11       	cpse	r25, r1
     5b6:	fc cf       	rjmp	.-8      	; 0x5b0 <FUNCcopy+0x12>
     5b8:	08 95       	ret

000005ba <FUNCsqueeze>:
		++i;
}
// squeeze: delete all c from s
void FUNCsqueeze(char s[], int c)
{
     5ba:	cf 93       	push	r28
     5bc:	df 93       	push	r29
     5be:	ec 01       	movw	r28, r24
	int i, j;
	for (i = j = 0; s[i] != '\0'; i++)
     5c0:	98 81       	ld	r25, Y
     5c2:	99 23       	and	r25, r25
     5c4:	99 f0       	breq	.+38     	; 0x5ec <FUNCsqueeze+0x32>
     5c6:	fe 01       	movw	r30, r28
     5c8:	31 96       	adiw	r30, 0x01	; 1
     5ca:	20 e0       	ldi	r18, 0x00	; 0
     5cc:	30 e0       	ldi	r19, 0x00	; 0
		if (s[i] != c)
     5ce:	49 2f       	mov	r20, r25
     5d0:	50 e0       	ldi	r21, 0x00	; 0
     5d2:	46 17       	cp	r20, r22
     5d4:	57 07       	cpc	r21, r23
     5d6:	31 f0       	breq	.+12     	; 0x5e4 <FUNCsqueeze+0x2a>
			s[j++] = s[i];
     5d8:	de 01       	movw	r26, r28
     5da:	a2 0f       	add	r26, r18
     5dc:	b3 1f       	adc	r27, r19
     5de:	9c 93       	st	X, r25
     5e0:	2f 5f       	subi	r18, 0xFF	; 255
     5e2:	3f 4f       	sbci	r19, 0xFF	; 255
}
// squeeze: delete all c from s
void FUNCsqueeze(char s[], int c)
{
	int i, j;
	for (i = j = 0; s[i] != '\0'; i++)
     5e4:	91 91       	ld	r25, Z+
     5e6:	91 11       	cpse	r25, r1
     5e8:	f2 cf       	rjmp	.-28     	; 0x5ce <FUNCsqueeze+0x14>
     5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <FUNCsqueeze+0x36>
     5ec:	20 e0       	ldi	r18, 0x00	; 0
     5ee:	30 e0       	ldi	r19, 0x00	; 0
		if (s[i] != c)
			s[j++] = s[i];
		s[j] = '\0';
     5f0:	fe 01       	movw	r30, r28
     5f2:	e2 0f       	add	r30, r18
     5f4:	f3 1f       	adc	r31, r19
     5f6:	10 82       	st	Z, r1
}
     5f8:	df 91       	pop	r29
     5fa:	cf 91       	pop	r28
     5fc:	08 95       	ret

000005fe <FUNCshellsort>:
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
     5fe:	2f 92       	push	r2
     600:	3f 92       	push	r3
     602:	4f 92       	push	r4
     604:	5f 92       	push	r5
     606:	6f 92       	push	r6
     608:	7f 92       	push	r7
     60a:	8f 92       	push	r8
     60c:	9f 92       	push	r9
     60e:	af 92       	push	r10
     610:	bf 92       	push	r11
     612:	cf 92       	push	r12
     614:	df 92       	push	r13
     616:	ef 92       	push	r14
     618:	ff 92       	push	r15
     61a:	0f 93       	push	r16
     61c:	1f 93       	push	r17
     61e:	cf 93       	push	r28
     620:	df 93       	push	r29
     622:	00 d0       	rcall	.+0      	; 0x624 <FUNCshellsort+0x26>
     624:	00 d0       	rcall	.+0      	; 0x626 <FUNCshellsort+0x28>
     626:	cd b7       	in	r28, 0x3d	; 61
     628:	de b7       	in	r29, 0x3e	; 62
     62a:	2c 01       	movw	r4, r24
     62c:	1b 01       	movw	r2, r22
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
     62e:	4b 01       	movw	r8, r22
     630:	77 23       	and	r23, r23
     632:	1c f4       	brge	.+6      	; 0x63a <FUNCshellsort+0x3c>
     634:	2f ef       	ldi	r18, 0xFF	; 255
     636:	82 1a       	sub	r8, r18
     638:	92 0a       	sbc	r9, r18
     63a:	95 94       	asr	r9
     63c:	87 94       	ror	r8
     63e:	18 14       	cp	r1, r8
     640:	19 04       	cpc	r1, r9
     642:	0c f4       	brge	.+2      	; 0x646 <FUNCshellsort+0x48>
     644:	51 c0       	rjmp	.+162    	; 0x6e8 <FUNCshellsort+0xea>
     646:	6a c0       	rjmp	.+212    	; 0x71c <FUNCshellsort+0x11e>
		for (i = gap; i < n; i++)
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
     648:	96 01       	movw	r18, r12
     64a:	dd 20       	and	r13, r13
     64c:	9c f1       	brlt	.+102    	; 0x6b4 <FUNCshellsort+0xb6>
     64e:	f5 01       	movw	r30, r10
     650:	40 81       	ld	r20, Z
     652:	51 81       	ldd	r21, Z+1	; 0x01
     654:	f4 01       	movw	r30, r8
     656:	60 81       	ld	r22, Z
     658:	71 81       	ldd	r23, Z+1	; 0x01
     65a:	64 17       	cp	r22, r20
     65c:	75 07       	cpc	r23, r21
     65e:	54 f5       	brge	.+84     	; 0x6b4 <FUNCshellsort+0xb6>
     660:	8c 01       	movw	r16, r24
     662:	0a 0d       	add	r16, r10
     664:	1b 1d       	adc	r17, r11
     666:	d4 01       	movw	r26, r8
     668:	bc 82       	std	Y+4, r11	; 0x04
     66a:	ab 82       	std	Y+3, r10	; 0x03
     66c:	ba 82       	std	Y+2, r11	; 0x02
     66e:	a9 82       	std	Y+1, r10	; 0x01
				temp = v[j];
				v[j] = v[j+gap];
     670:	eb 81       	ldd	r30, Y+3	; 0x03
     672:	fc 81       	ldd	r31, Y+4	; 0x04
     674:	71 83       	std	Z+1, r23	; 0x01
     676:	60 83       	st	Z, r22
				v[j+gap] = temp;
     678:	11 96       	adiw	r26, 0x01	; 1
     67a:	5c 93       	st	X, r21
     67c:	4e 93       	st	-X, r20
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
		for (i = gap; i < n; i++)
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
     67e:	2e 19       	sub	r18, r14
     680:	3f 09       	sbc	r19, r15
     682:	c2 f0       	brmi	.+48     	; 0x6b4 <FUNCshellsort+0xb6>
     684:	f8 01       	movw	r30, r16
     686:	40 81       	ld	r20, Z
     688:	51 81       	ldd	r21, Z+1	; 0x01
     68a:	e9 81       	ldd	r30, Y+1	; 0x01
     68c:	fa 81       	ldd	r31, Y+2	; 0x02
     68e:	60 81       	ld	r22, Z
     690:	71 81       	ldd	r23, Z+1	; 0x01
     692:	08 0f       	add	r16, r24
     694:	19 1f       	adc	r17, r25
     696:	e8 0f       	add	r30, r24
     698:	f9 1f       	adc	r31, r25
     69a:	fa 83       	std	Y+2, r31	; 0x02
     69c:	e9 83       	std	Y+1, r30	; 0x01
     69e:	eb 81       	ldd	r30, Y+3	; 0x03
     6a0:	fc 81       	ldd	r31, Y+4	; 0x04
     6a2:	e8 0f       	add	r30, r24
     6a4:	f9 1f       	adc	r31, r25
     6a6:	fc 83       	std	Y+4, r31	; 0x04
     6a8:	eb 83       	std	Y+3, r30	; 0x03
     6aa:	a8 0f       	add	r26, r24
     6ac:	b9 1f       	adc	r27, r25
     6ae:	64 17       	cp	r22, r20
     6b0:	75 07       	cpc	r23, r21
     6b2:	f4 f2       	brlt	.-68     	; 0x670 <FUNCshellsort+0x72>
     6b4:	ff ef       	ldi	r31, 0xFF	; 255
     6b6:	cf 1a       	sub	r12, r31
     6b8:	df 0a       	sbc	r13, r31
     6ba:	22 e0       	ldi	r18, 0x02	; 2
     6bc:	a2 0e       	add	r10, r18
     6be:	b1 1c       	adc	r11, r1
     6c0:	e2 e0       	ldi	r30, 0x02	; 2
     6c2:	8e 0e       	add	r8, r30
     6c4:	91 1c       	adc	r9, r1
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
		for (i = gap; i < n; i++)
     6c6:	c6 14       	cp	r12, r6
     6c8:	d7 04       	cpc	r13, r7
     6ca:	09 f0       	breq	.+2      	; 0x6ce <FUNCshellsort+0xd0>
     6cc:	bd cf       	rjmp	.-134    	; 0x648 <FUNCshellsort+0x4a>
}
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
     6ce:	47 01       	movw	r8, r14
     6d0:	ff 20       	and	r15, r15
     6d2:	1c f4       	brge	.+6      	; 0x6da <FUNCshellsort+0xdc>
     6d4:	ff ef       	ldi	r31, 0xFF	; 255
     6d6:	8f 1a       	sub	r8, r31
     6d8:	9f 0a       	sbc	r9, r31
     6da:	95 94       	asr	r9
     6dc:	87 94       	ror	r8
     6de:	18 14       	cp	r1, r8
     6e0:	19 04       	cpc	r1, r9
     6e2:	e4 f4       	brge	.+56     	; 0x71c <FUNCshellsort+0x11e>
     6e4:	74 01       	movw	r14, r8
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <FUNCshellsort+0xec>
     6e8:	74 01       	movw	r14, r8
		for (i = gap; i < n; i++)
     6ea:	82 14       	cp	r8, r2
     6ec:	93 04       	cpc	r9, r3
     6ee:	7c f7       	brge	.-34     	; 0x6ce <FUNCshellsort+0xd0>
     6f0:	64 01       	movw	r12, r8
     6f2:	ce 18       	sub	r12, r14
     6f4:	df 08       	sbc	r13, r15
     6f6:	56 01       	movw	r10, r12
     6f8:	aa 0c       	add	r10, r10
     6fa:	bb 1c       	adc	r11, r11
     6fc:	a4 0c       	add	r10, r4
     6fe:	b5 1c       	adc	r11, r5
     700:	88 0c       	add	r8, r8
     702:	99 1c       	adc	r9, r9
     704:	84 0c       	add	r8, r4
     706:	95 1c       	adc	r9, r5
     708:	31 01       	movw	r6, r2
     70a:	6e 18       	sub	r6, r14
     70c:	7f 08       	sbc	r7, r15
     70e:	c7 01       	movw	r24, r14
     710:	88 0f       	add	r24, r24
     712:	99 1f       	adc	r25, r25
     714:	91 95       	neg	r25
     716:	81 95       	neg	r24
     718:	91 09       	sbc	r25, r1
     71a:	96 cf       	rjmp	.-212    	; 0x648 <FUNCshellsort+0x4a>
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
				temp = v[j];
				v[j] = v[j+gap];
				v[j+gap] = temp;
			}
}
     71c:	0f 90       	pop	r0
     71e:	0f 90       	pop	r0
     720:	0f 90       	pop	r0
     722:	0f 90       	pop	r0
     724:	df 91       	pop	r29
     726:	cf 91       	pop	r28
     728:	1f 91       	pop	r17
     72a:	0f 91       	pop	r16
     72c:	ff 90       	pop	r15
     72e:	ef 90       	pop	r14
     730:	df 90       	pop	r13
     732:	cf 90       	pop	r12
     734:	bf 90       	pop	r11
     736:	af 90       	pop	r10
     738:	9f 90       	pop	r9
     73a:	8f 90       	pop	r8
     73c:	7f 90       	pop	r7
     73e:	6f 90       	pop	r6
     740:	5f 90       	pop	r5
     742:	4f 90       	pop	r4
     744:	3f 90       	pop	r3
     746:	2f 90       	pop	r2
     748:	08 95       	ret

0000074a <FUNCpmax>:
	if(a1 > a2){
		biggest = a1;
	}else{
		biggest = a2;
	}
	return biggest;
     74a:	86 17       	cp	r24, r22
     74c:	97 07       	cpc	r25, r23
     74e:	0c f4       	brge	.+2      	; 0x752 <FUNCpmax+0x8>
     750:	cb 01       	movw	r24, r22
}
     752:	08 95       	ret

00000754 <FUNCgcd>:
// common divisor
int FUNCgcd (int u, int v)
{
     754:	9b 01       	movw	r18, r22
	int temp;
	while ( v != 0 ) {
     756:	67 2b       	or	r22, r23
     758:	11 f4       	brne	.+4      	; 0x75e <FUNCgcd+0xa>
     75a:	08 95       	ret
		temp = u % v;
		u = v;
		v = temp;
     75c:	9a 01       	movw	r18, r20
// common divisor
int FUNCgcd (int u, int v)
{
	int temp;
	while ( v != 0 ) {
		temp = u % v;
     75e:	b9 01       	movw	r22, r18
     760:	ef d7       	rcall	.+4062   	; 0x1740 <__divmodhi4>
     762:	ac 01       	movw	r20, r24
     764:	82 2f       	mov	r24, r18
     766:	93 2f       	mov	r25, r19
}
// common divisor
int FUNCgcd (int u, int v)
{
	int temp;
	while ( v != 0 ) {
     768:	41 15       	cp	r20, r1
     76a:	51 05       	cpc	r21, r1
     76c:	b9 f7       	brne	.-18     	; 0x75c <FUNCgcd+0x8>
		temp = u % v;
		u = v;
		v = temp;
	}
	return u;
}
     76e:	08 95       	ret

00000770 <FUNCstrToInt>:
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
     770:	fc 01       	movw	r30, r24
	int i, intValue, result = 0;
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
     772:	90 81       	ld	r25, Z
     774:	80 ed       	ldi	r24, 0xD0	; 208
     776:	89 0f       	add	r24, r25
     778:	8a 30       	cpi	r24, 0x0A	; 10
     77a:	d0 f4       	brcc	.+52     	; 0x7b0 <FUNCstrToInt+0x40>
     77c:	31 96       	adiw	r30, 0x01	; 1
     77e:	20 e0       	ldi	r18, 0x00	; 0
     780:	30 e0       	ldi	r19, 0x00	; 0
		intValue = string[i] - '0';
		result = result * 10 + intValue;
     782:	a9 01       	movw	r20, r18
     784:	44 0f       	add	r20, r20
     786:	55 1f       	adc	r21, r21
     788:	22 0f       	add	r18, r18
     78a:	33 1f       	adc	r19, r19
     78c:	22 0f       	add	r18, r18
     78e:	33 1f       	adc	r19, r19
     790:	22 0f       	add	r18, r18
     792:	33 1f       	adc	r19, r19
     794:	42 0f       	add	r20, r18
     796:	53 1f       	adc	r21, r19
     798:	29 2f       	mov	r18, r25
     79a:	30 e0       	ldi	r19, 0x00	; 0
     79c:	20 53       	subi	r18, 0x30	; 48
     79e:	31 09       	sbc	r19, r1
     7a0:	24 0f       	add	r18, r20
     7a2:	35 1f       	adc	r19, r21
}
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
	int i, intValue, result = 0;
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
     7a4:	91 91       	ld	r25, Z+
     7a6:	80 ed       	ldi	r24, 0xD0	; 208
     7a8:	89 0f       	add	r24, r25
     7aa:	8a 30       	cpi	r24, 0x0A	; 10
     7ac:	50 f3       	brcs	.-44     	; 0x782 <FUNCstrToInt+0x12>
     7ae:	02 c0       	rjmp	.+4      	; 0x7b4 <FUNCstrToInt+0x44>
	return u;
}
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
	int i, intValue, result = 0;
     7b0:	20 e0       	ldi	r18, 0x00	; 0
     7b2:	30 e0       	ldi	r19, 0x00	; 0
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
		intValue = string[i] - '0';
		result = result * 10 + intValue;
	}
	return result;
}
     7b4:	c9 01       	movw	r24, r18
     7b6:	08 95       	ret

000007b8 <FUNCfilter>:
uint8_t FUNCfilter(uint8_t mask, uint8_t data)
{
	uint8_t Z;
	Z=mask & data;
	return Z;
}
     7b8:	86 23       	and	r24, r22
     7ba:	08 95       	ret

000007bc <FUNCticks>:
// ticks
unsigned int FUNCticks(unsigned int num)
{
	unsigned int count;
	for(count=0;count<num;count++)
     7bc:	00 97       	sbiw	r24, 0x00	; 0
     7be:	39 f0       	breq	.+14     	; 0x7ce <FUNCticks+0x12>
     7c0:	20 e0       	ldi	r18, 0x00	; 0
     7c2:	30 e0       	ldi	r19, 0x00	; 0
     7c4:	2f 5f       	subi	r18, 0xFF	; 255
     7c6:	3f 4f       	sbci	r19, 0xFF	; 255
     7c8:	82 17       	cp	r24, r18
     7ca:	93 07       	cpc	r25, r19
     7cc:	d9 f7       	brne	.-10     	; 0x7c4 <FUNCticks+0x8>
		;
	return count;
}
     7ce:	08 95       	ret

000007d0 <FUNCtwocomptoint8bit>:
// Two's Complement function
int FUNCtwocomptoint8bit(int twoscomp){
  
  //Let's see if the byte is negative
  if (twoscomp & 0B10000000){
     7d0:	87 ff       	sbrs	r24, 7
     7d2:	08 c0       	rjmp	.+16     	; 0x7e4 <FUNCtwocomptoint8bit+0x14>
    //Invert
    twoscomp = ~twoscomp + 1;
     7d4:	91 95       	neg	r25
     7d6:	81 95       	neg	r24
     7d8:	91 09       	sbc	r25, r1
	twoscomp = (twoscomp & 0B11111111);
    //Cast as int and multiply by negative one
    int value = (int)(twoscomp)*(-1);
     7da:	99 27       	eor	r25, r25
     7dc:	91 95       	neg	r25
     7de:	81 95       	neg	r24
     7e0:	91 09       	sbc	r25, r1
    return value;
     7e2:	08 95       	ret
    //Byte is non-negative, therefore convert to decimal and display
    //Make sure we are never over 1279
    twoscomp = (twoscomp & 0B01111111);
    //Cast as int and return
    int value = (int)(twoscomp);
    return value;
     7e4:	8f 77       	andi	r24, 0x7F	; 127
     7e6:	99 27       	eor	r25, r25
  }
}
     7e8:	08 95       	ret

000007ea <FUNCtwocomptoint10bit>:
// Two's Complement function, shifts 10 bit binary to signed integers (-512 to 512)
int FUNCtwocomptoint10bit(int twoscomp){
	
  //Let's see if the byte is negative
  if (twoscomp & 0x200){
     7ea:	91 ff       	sbrs	r25, 1
     7ec:	08 c0       	rjmp	.+16     	; 0x7fe <FUNCtwocomptoint10bit+0x14>
    //Invert
    twoscomp = ~twoscomp + 1;
     7ee:	91 95       	neg	r25
     7f0:	81 95       	neg	r24
     7f2:	91 09       	sbc	r25, r1
    twoscomp = (twoscomp & 0x3FF);
    //Cast as int and multiply by negative one
    int value = (int)(twoscomp)*(-1);
     7f4:	93 70       	andi	r25, 0x03	; 3
     7f6:	91 95       	neg	r25
     7f8:	81 95       	neg	r24
     7fa:	91 09       	sbc	r25, r1
    return value;
     7fc:	08 95       	ret
    //Byte is non-negative, therefore convert to decimal and display
    twoscomp = (twoscomp & 0x1FF);
    //Cast as int and return
    //Serial.println(twoscomp);
    int value = (int)(twoscomp);
    return value;
     7fe:	91 70       	andi	r25, 0x01	; 1
  }
}
     800:	08 95       	ret

00000802 <FUNCtwocomptointnbit>:
// Two's Complement function, nbits
int FUNCtwocomptointnbit(int twoscomp, uint8_t nbits){
  unsigned int signmask;
  unsigned int mask;
  signmask = (1<<(nbits-1));
     802:	61 50       	subi	r22, 0x01	; 1
     804:	21 e0       	ldi	r18, 0x01	; 1
     806:	30 e0       	ldi	r19, 0x00	; 0
     808:	02 c0       	rjmp	.+4      	; 0x80e <FUNCtwocomptointnbit+0xc>
     80a:	22 0f       	add	r18, r18
     80c:	33 1f       	adc	r19, r19
     80e:	6a 95       	dec	r22
     810:	e2 f7       	brpl	.-8      	; 0x80a <FUNCtwocomptointnbit+0x8>
  mask=signmask-1;
     812:	a9 01       	movw	r20, r18
     814:	41 50       	subi	r20, 0x01	; 1
     816:	51 09       	sbc	r21, r1
  //Let's see if the number is negative
  if (twoscomp & signmask){
     818:	b9 01       	movw	r22, r18
     81a:	68 23       	and	r22, r24
     81c:	79 23       	and	r23, r25
     81e:	67 2b       	or	r22, r23
     820:	29 f0       	breq	.+10     	; 0x82c <FUNCtwocomptointnbit+0x2a>
	twoscomp &= mask;
    twoscomp -= signmask;
     822:	84 23       	and	r24, r20
     824:	95 23       	and	r25, r21
     826:	82 1b       	sub	r24, r18
     828:	93 0b       	sbc	r25, r19
     82a:	08 95       	ret
  }else{
	  twoscomp &= mask;
     82c:	84 23       	and	r24, r20
     82e:	95 23       	and	r25, r21
  }
  return twoscomp;
}
     830:	08 95       	ret

00000832 <FUNCdec2bcd>:
// Convert Decimal to Binary Coded Decimal (BCD)
char FUNCdec2bcd(char num)
{
	return ((num/10 * 16) + (num % 10));
     832:	9d ec       	ldi	r25, 0xCD	; 205
     834:	89 9f       	mul	r24, r25
     836:	91 2d       	mov	r25, r1
     838:	11 24       	eor	r1, r1
     83a:	96 95       	lsr	r25
     83c:	96 95       	lsr	r25
     83e:	96 95       	lsr	r25
     840:	39 2f       	mov	r19, r25
     842:	33 0f       	add	r19, r19
     844:	23 2f       	mov	r18, r19
     846:	22 0f       	add	r18, r18
     848:	22 0f       	add	r18, r18
     84a:	23 0f       	add	r18, r19
     84c:	82 1b       	sub	r24, r18
}
     84e:	20 e1       	ldi	r18, 0x10	; 16
     850:	92 9f       	mul	r25, r18
     852:	80 0d       	add	r24, r0
     854:	11 24       	eor	r1, r1
     856:	08 95       	ret

00000858 <FUNCbcd2dec>:
// Convert Binary Coded Decimal (BCD) to Decimal
char FUNCbcd2dec(char num)
{
	return ((num/16 * 10) + (num % 16));
     858:	98 2f       	mov	r25, r24
     85a:	92 95       	swap	r25
     85c:	9f 70       	andi	r25, 0x0F	; 15
     85e:	99 0f       	add	r25, r25
     860:	29 2f       	mov	r18, r25
     862:	22 0f       	add	r18, r18
     864:	22 0f       	add	r18, r18
     866:	92 0f       	add	r25, r18
     868:	8f 70       	andi	r24, 0x0F	; 15
}
     86a:	89 0f       	add	r24, r25
     86c:	08 95       	ret

0000086e <FUNCresizestr>:
char* FUNCresizestr(char *string, int size)
{
     86e:	fc 01       	movw	r30, r24
	int i;
	FUNCstr[size]='\0';
     870:	db 01       	movw	r26, r22
     872:	a7 54       	subi	r26, 0x47	; 71
     874:	be 4f       	sbci	r27, 0xFE	; 254
     876:	1c 92       	st	X, r1
	for(i=0;i<size;i++){
     878:	16 16       	cp	r1, r22
     87a:	17 06       	cpc	r1, r23
     87c:	14 f5       	brge	.+68     	; 0x8c2 <FUNCresizestr+0x54>
		if(*(string+i)=='\0'){
     87e:	90 81       	ld	r25, Z
     880:	91 11       	cpse	r25, r1
     882:	0c c0       	rjmp	.+24     	; 0x89c <FUNCresizestr+0x2e>
     884:	17 c0       	rjmp	.+46     	; 0x8b4 <FUNCresizestr+0x46>
     886:	91 91       	ld	r25, Z+
     888:	91 11       	cpse	r25, r1
     88a:	0d c0       	rjmp	.+26     	; 0x8a6 <FUNCresizestr+0x38>
     88c:	15 c0       	rjmp	.+42     	; 0x8b8 <FUNCresizestr+0x4a>
			for(;i<size;i++){
				FUNCstr[i]=' ';
     88e:	81 93       	st	Z+, r24
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
		if(*(string+i)=='\0'){
			for(;i<size;i++){
     890:	2f 5f       	subi	r18, 0xFF	; 255
     892:	3f 4f       	sbci	r19, 0xFF	; 255
     894:	26 17       	cp	r18, r22
     896:	37 07       	cpc	r19, r23
     898:	d4 f3       	brlt	.-12     	; 0x88e <FUNCresizestr+0x20>
     89a:	13 c0       	rjmp	.+38     	; 0x8c2 <FUNCresizestr+0x54>
     89c:	a9 eb       	ldi	r26, 0xB9	; 185
     89e:	b1 e0       	ldi	r27, 0x01	; 1
     8a0:	31 96       	adiw	r30, 0x01	; 1
char* FUNCresizestr(char *string, int size)
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
		if(*(string+i)=='\0'){
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
			for(;i<size;i++){
				FUNCstr[i]=' ';
			}
			break;
		}
		FUNCstr[i]=*(string+i);
     8a6:	9d 93       	st	X+, r25
}
char* FUNCresizestr(char *string, int size)
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
     8a8:	2f 5f       	subi	r18, 0xFF	; 255
     8aa:	3f 4f       	sbci	r19, 0xFF	; 255
     8ac:	62 17       	cp	r22, r18
     8ae:	73 07       	cpc	r23, r19
     8b0:	51 f7       	brne	.-44     	; 0x886 <FUNCresizestr+0x18>
     8b2:	07 c0       	rjmp	.+14     	; 0x8c2 <FUNCresizestr+0x54>
     8b4:	20 e0       	ldi	r18, 0x00	; 0
     8b6:	30 e0       	ldi	r19, 0x00	; 0
     8b8:	f9 01       	movw	r30, r18
     8ba:	e7 54       	subi	r30, 0x47	; 71
     8bc:	fe 4f       	sbci	r31, 0xFE	; 254
		if(*(string+i)=='\0'){
			for(;i<size;i++){
				FUNCstr[i]=' ';
     8be:	80 e2       	ldi	r24, 0x20	; 32
     8c0:	e6 cf       	rjmp	.-52     	; 0x88e <FUNCresizestr+0x20>
			break;
		}
		FUNCstr[i]=*(string+i);
	}
	return FUNCstr;
}
     8c2:	89 eb       	ldi	r24, 0xB9	; 185
     8c4:	91 e0       	ldi	r25, 0x01	; 1
     8c6:	08 95       	ret

000008c8 <FUNCtrimmer>:
long FUNCtrimmer(long x, long in_min, long in_max, long out_min, long out_max)
/*
	same as arduino map function.
*/
{
     8c8:	4f 92       	push	r4
     8ca:	5f 92       	push	r5
     8cc:	6f 92       	push	r6
     8ce:	7f 92       	push	r7
     8d0:	af 92       	push	r10
     8d2:	bf 92       	push	r11
     8d4:	cf 92       	push	r12
     8d6:	df 92       	push	r13
     8d8:	ef 92       	push	r14
     8da:	ff 92       	push	r15
     8dc:	0f 93       	push	r16
     8de:	1f 93       	push	r17
     8e0:	cf 93       	push	r28
     8e2:	df 93       	push	r29
     8e4:	cd b7       	in	r28, 0x3d	; 61
     8e6:	de b7       	in	r29, 0x3e	; 62
     8e8:	29 01       	movw	r4, r18
     8ea:	3a 01       	movw	r6, r20
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     8ec:	9b 01       	movw	r18, r22
     8ee:	ac 01       	movw	r20, r24
     8f0:	24 19       	sub	r18, r4
     8f2:	35 09       	sbc	r19, r5
     8f4:	46 09       	sbc	r20, r6
     8f6:	57 09       	sbc	r21, r7
     8f8:	89 89       	ldd	r24, Y+17	; 0x11
     8fa:	9a 89       	ldd	r25, Y+18	; 0x12
     8fc:	ab 89       	ldd	r26, Y+19	; 0x13
     8fe:	bc 89       	ldd	r27, Y+20	; 0x14
     900:	bc 01       	movw	r22, r24
     902:	cd 01       	movw	r24, r26
     904:	6a 19       	sub	r22, r10
     906:	7b 09       	sbc	r23, r11
     908:	8c 09       	sbc	r24, r12
     90a:	9d 09       	sbc	r25, r13
     90c:	f6 d6       	rcall	.+3564   	; 0x16fa <__mulsi3>
     90e:	a8 01       	movw	r20, r16
     910:	97 01       	movw	r18, r14
     912:	24 19       	sub	r18, r4
     914:	35 09       	sbc	r19, r5
     916:	46 09       	sbc	r20, r6
     918:	57 09       	sbc	r21, r7
     91a:	47 d7       	rcall	.+3726   	; 0x17aa <__divmodsi4>
     91c:	ca 01       	movw	r24, r20
     91e:	b9 01       	movw	r22, r18
     920:	6a 0d       	add	r22, r10
     922:	7b 1d       	adc	r23, r11
     924:	8c 1d       	adc	r24, r12
     926:	9d 1d       	adc	r25, r13
}
     928:	df 91       	pop	r29
     92a:	cf 91       	pop	r28
     92c:	1f 91       	pop	r17
     92e:	0f 91       	pop	r16
     930:	ff 90       	pop	r15
     932:	ef 90       	pop	r14
     934:	df 90       	pop	r13
     936:	cf 90       	pop	r12
     938:	bf 90       	pop	r11
     93a:	af 90       	pop	r10
     93c:	7f 90       	pop	r7
     93e:	6f 90       	pop	r6
     940:	5f 90       	pop	r5
     942:	4f 90       	pop	r4
     944:	08 95       	ret

00000946 <Pwr>:
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
     946:	70 e0       	ldi	r23, 0x00	; 0
     948:	61 15       	cp	r22, r1
     94a:	71 05       	cpc	r23, r1
     94c:	99 f0       	breq	.+38     	; 0x974 <Pwr+0x2e>
     94e:	41 e0       	ldi	r20, 0x01	; 1
     950:	50 e0       	ldi	r21, 0x00	; 0
     952:	21 e0       	ldi	r18, 0x01	; 1
     954:	30 e0       	ldi	r19, 0x00	; 0
        p = p * bs;
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	fa 01       	movw	r30, r20
     95a:	e8 9f       	mul	r30, r24
     95c:	a0 01       	movw	r20, r0
     95e:	e9 9f       	mul	r30, r25
     960:	50 0d       	add	r21, r0
     962:	f8 9f       	mul	r31, r24
     964:	50 0d       	add	r21, r0
     966:	11 24       	eor	r1, r1
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
     968:	2f 5f       	subi	r18, 0xFF	; 255
     96a:	3f 4f       	sbci	r19, 0xFF	; 255
     96c:	62 17       	cp	r22, r18
     96e:	73 07       	cpc	r23, r19
     970:	98 f7       	brcc	.-26     	; 0x958 <Pwr+0x12>
     972:	02 c0       	rjmp	.+4      	; 0x978 <Pwr+0x32>
}
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
     974:	41 e0       	ldi	r20, 0x01	; 1
     976:	50 e0       	ldi	r21, 0x00	; 0
    for (i = 1; i <= n; ++i)
        p = p * bs;
    return p;
}
     978:	ca 01       	movw	r24, r20
     97a:	08 95       	ret

0000097c <StringLength>:
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
	while ( string[count] != '\0' )
     97c:	fc 01       	movw	r30, r24
     97e:	20 81       	ld	r18, Z
     980:	22 23       	and	r18, r18
     982:	41 f0       	breq	.+16     	; 0x994 <StringLength+0x18>
     984:	31 96       	adiw	r30, 0x01	; 1
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	90 e0       	ldi	r25, 0x00	; 0
		++count;
     98a:	01 96       	adiw	r24, 0x01	; 1
}
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
	while ( string[count] != '\0' )
     98c:	21 91       	ld	r18, Z+
     98e:	21 11       	cpse	r18, r1
     990:	fc cf       	rjmp	.-8      	; 0x98a <StringLength+0xe>
     992:	08 95       	ret
    return p;
}
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	90 e0       	ldi	r25, 0x00	; 0
	while ( string[count] != '\0' )
		++count;
	return count;
}
     998:	08 95       	ret

0000099a <FUNCtrim>:
	Reverse(FUNCstr);
	return FUNCstr;
}
// trim: remove trailing blanks, tabs, newlines
int FUNCtrim(char s[])
{
     99a:	cf 93       	push	r28
     99c:	df 93       	push	r29
     99e:	ec 01       	movw	r28, r24
	int n;
	for (n = StringLength(s)-1; n >= 0; n--)
     9a0:	ed df       	rcall	.-38     	; 0x97c <StringLength>
     9a2:	9c 01       	movw	r18, r24
     9a4:	21 50       	subi	r18, 0x01	; 1
     9a6:	31 09       	sbc	r19, r1
     9a8:	62 f0       	brmi	.+24     	; 0x9c2 <FUNCtrim+0x28>
     9aa:	fe 01       	movw	r30, r28
     9ac:	e8 0f       	add	r30, r24
     9ae:	f9 1f       	adc	r31, r25
		if (s[n] != ' ' && s[n] != '\t' && s[n] != '\n')
     9b0:	92 91       	ld	r25, -Z
     9b2:	90 32       	cpi	r25, 0x20	; 32
     9b4:	19 f0       	breq	.+6      	; 0x9bc <FUNCtrim+0x22>
     9b6:	99 50       	subi	r25, 0x09	; 9
     9b8:	92 30       	cpi	r25, 0x02	; 2
     9ba:	18 f4       	brcc	.+6      	; 0x9c2 <FUNCtrim+0x28>
}
// trim: remove trailing blanks, tabs, newlines
int FUNCtrim(char s[])
{
	int n;
	for (n = StringLength(s)-1; n >= 0; n--)
     9bc:	21 50       	subi	r18, 0x01	; 1
     9be:	31 09       	sbc	r19, r1
     9c0:	b8 f7       	brcc	.-18     	; 0x9b0 <FUNCtrim+0x16>
		if (s[n] != ' ' && s[n] != '\t' && s[n] != '\n')
			break;
	s[n+1] = '\0';
     9c2:	c2 0f       	add	r28, r18
     9c4:	d3 1f       	adc	r29, r19
     9c6:	19 82       	std	Y+1, r1	; 0x01
	return n;
}
     9c8:	c9 01       	movw	r24, r18
     9ca:	df 91       	pop	r29
     9cc:	cf 91       	pop	r28
     9ce:	08 95       	ret

000009d0 <Reverse>:
		++count;
	return count;
}
// reverse: reverse string s in place
void Reverse(char s[])
{
     9d0:	cf 93       	push	r28
     9d2:	df 93       	push	r29
     9d4:	ec 01       	movw	r28, r24
	int c, i, j;
	for (i = 0, j = StringLength(s)-1; i < j; i++, j--){
     9d6:	d2 df       	rcall	.-92     	; 0x97c <StringLength>
     9d8:	9c 01       	movw	r18, r24
     9da:	21 50       	subi	r18, 0x01	; 1
     9dc:	31 09       	sbc	r19, r1
     9de:	12 16       	cp	r1, r18
     9e0:	13 06       	cpc	r1, r19
     9e2:	84 f4       	brge	.+32     	; 0xa04 <Reverse+0x34>
     9e4:	de 01       	movw	r26, r28
     9e6:	a8 0f       	add	r26, r24
     9e8:	b9 1f       	adc	r27, r25
     9ea:	fe 01       	movw	r30, r28
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	90 e0       	ldi	r25, 0x00	; 0
		c = s[i];
     9f0:	40 81       	ld	r20, Z
		s[i] = s[j];
     9f2:	5e 91       	ld	r21, -X
     9f4:	51 93       	st	Z+, r21
		s[j] = c;
     9f6:	4c 93       	st	X, r20
}
// reverse: reverse string s in place
void Reverse(char s[])
{
	int c, i, j;
	for (i = 0, j = StringLength(s)-1; i < j; i++, j--){
     9f8:	01 96       	adiw	r24, 0x01	; 1
     9fa:	21 50       	subi	r18, 0x01	; 1
     9fc:	31 09       	sbc	r19, r1
     9fe:	82 17       	cp	r24, r18
     a00:	93 07       	cpc	r25, r19
     a02:	b4 f3       	brlt	.-20     	; 0x9f0 <Reverse+0x20>
		c = s[i];
		s[i] = s[j];
		s[j] = c;
	}
}
     a04:	df 91       	pop	r29
     a06:	cf 91       	pop	r28
     a08:	08 95       	ret

00000a0a <FUNCi32toa>:
				v[j+gap] = temp;
			}
}
// i32toa: convert n to characters in s
char* FUNCi32toa(int32_t n)
{
     a0a:	8f 92       	push	r8
     a0c:	9f 92       	push	r9
     a0e:	af 92       	push	r10
     a10:	bf 92       	push	r11
     a12:	cf 92       	push	r12
     a14:	df 92       	push	r13
     a16:	ef 92       	push	r14
     a18:	ff 92       	push	r15
     a1a:	0f 93       	push	r16
     a1c:	1f 93       	push	r17
     a1e:	cf 93       	push	r28
     a20:	df 93       	push	r29
     a22:	6b 01       	movw	r12, r22
     a24:	7c 01       	movw	r14, r24
     a26:	dc 01       	movw	r26, r24
     a28:	cb 01       	movw	r24, r22
     a2a:	ff 20       	and	r15, r15
     a2c:	3c f4       	brge	.+14     	; 0xa3c <FUNCi32toa+0x32>
     a2e:	88 27       	eor	r24, r24
     a30:	99 27       	eor	r25, r25
     a32:	dc 01       	movw	r26, r24
     a34:	8c 19       	sub	r24, r12
     a36:	9d 09       	sbc	r25, r13
     a38:	ae 09       	sbc	r26, r14
     a3a:	bf 09       	sbc	r27, r15
     a3c:	bc 01       	movw	r22, r24
     a3e:	cd 01       	movw	r24, r26
     a40:	10 e0       	ldi	r17, 0x00	; 0
	int32_t sign;
	if ((sign = n) < 0) // record sign
	n = -n; // make n positive
	i = 0;
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
     a42:	0f 2e       	mov	r0, r31
     a44:	fa e0       	ldi	r31, 0x0A	; 10
     a46:	8f 2e       	mov	r8, r31
     a48:	91 2c       	mov	r9, r1
     a4a:	a1 2c       	mov	r10, r1
     a4c:	b1 2c       	mov	r11, r1
     a4e:	f0 2d       	mov	r31, r0
     a50:	01 c0       	rjmp	.+2      	; 0xa54 <FUNCi32toa+0x4a>
     a52:	10 2f       	mov	r17, r16
     a54:	01 e0       	ldi	r16, 0x01	; 1
     a56:	01 0f       	add	r16, r17
     a58:	c1 2f       	mov	r28, r17
     a5a:	d0 e0       	ldi	r29, 0x00	; 0
     a5c:	c7 54       	subi	r28, 0x47	; 71
     a5e:	de 4f       	sbci	r29, 0xFE	; 254
     a60:	a5 01       	movw	r20, r10
     a62:	94 01       	movw	r18, r8
     a64:	a2 d6       	rcall	.+3396   	; 0x17aa <__divmodsi4>
     a66:	60 5d       	subi	r22, 0xD0	; 208
     a68:	68 83       	st	Y, r22
	}while ((n /= 10) > 0); // delete it
     a6a:	62 2f       	mov	r22, r18
     a6c:	73 2f       	mov	r23, r19
     a6e:	84 2f       	mov	r24, r20
     a70:	95 2f       	mov	r25, r21
     a72:	16 16       	cp	r1, r22
     a74:	17 06       	cpc	r1, r23
     a76:	18 06       	cpc	r1, r24
     a78:	19 06       	cpc	r1, r25
     a7a:	5c f3       	brlt	.-42     	; 0xa52 <FUNCi32toa+0x48>
	if (sign < 0)
     a7c:	ff 20       	and	r15, r15
     a7e:	44 f4       	brge	.+16     	; 0xa90 <FUNCi32toa+0x86>
	FUNCstr[i++] = '-';
     a80:	e0 2f       	mov	r30, r16
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	e7 54       	subi	r30, 0x47	; 71
     a86:	fe 4f       	sbci	r31, 0xFE	; 254
     a88:	8d e2       	ldi	r24, 0x2D	; 45
     a8a:	80 83       	st	Z, r24
     a8c:	02 e0       	ldi	r16, 0x02	; 2
     a8e:	01 0f       	add	r16, r17
	FUNCstr[i] = '\0';
     a90:	e0 2f       	mov	r30, r16
     a92:	f0 e0       	ldi	r31, 0x00	; 0
     a94:	e7 54       	subi	r30, 0x47	; 71
     a96:	fe 4f       	sbci	r31, 0xFE	; 254
     a98:	10 82       	st	Z, r1
	Reverse(FUNCstr);
     a9a:	89 eb       	ldi	r24, 0xB9	; 185
     a9c:	91 e0       	ldi	r25, 0x01	; 1
     a9e:	98 df       	rcall	.-208    	; 0x9d0 <Reverse>
	return FUNCstr;
}
     aa0:	89 eb       	ldi	r24, 0xB9	; 185
     aa2:	91 e0       	ldi	r25, 0x01	; 1
     aa4:	df 91       	pop	r29
     aa6:	cf 91       	pop	r28
     aa8:	1f 91       	pop	r17
     aaa:	0f 91       	pop	r16
     aac:	ff 90       	pop	r15
     aae:	ef 90       	pop	r14
     ab0:	df 90       	pop	r13
     ab2:	cf 90       	pop	r12
     ab4:	bf 90       	pop	r11
     ab6:	af 90       	pop	r10
     ab8:	9f 90       	pop	r9
     aba:	8f 90       	pop	r8
     abc:	08 95       	ret

00000abe <FUNCi16toa>:
// i16toa: convert n to characters in s
char* FUNCi16toa(int16_t n)
{
     abe:	0f 93       	push	r16
     ac0:	1f 93       	push	r17
     ac2:	cf 93       	push	r28
     ac4:	df 93       	push	r29
     ac6:	ec 01       	movw	r28, r24
     ac8:	99 23       	and	r25, r25
     aca:	24 f4       	brge	.+8      	; 0xad4 <FUNCi16toa+0x16>
     acc:	88 27       	eor	r24, r24
     ace:	99 27       	eor	r25, r25
     ad0:	8c 1b       	sub	r24, r28
     ad2:	9d 0b       	sbc	r25, r29
     ad4:	20 e0       	ldi	r18, 0x00	; 0
	int16_t sign;
	if ((sign = n) < 0) // record sign
		n = -n; // make n positive
	i = 0;
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
     ad6:	0a e0       	ldi	r16, 0x0A	; 10
     ad8:	10 e0       	ldi	r17, 0x00	; 0
     ada:	01 c0       	rjmp	.+2      	; 0xade <FUNCi16toa+0x20>
     adc:	23 2f       	mov	r18, r19
     ade:	31 e0       	ldi	r19, 0x01	; 1
     ae0:	32 0f       	add	r19, r18
     ae2:	e2 2f       	mov	r30, r18
     ae4:	f0 e0       	ldi	r31, 0x00	; 0
     ae6:	e7 54       	subi	r30, 0x47	; 71
     ae8:	fe 4f       	sbci	r31, 0xFE	; 254
     aea:	b8 01       	movw	r22, r16
     aec:	29 d6       	rcall	.+3154   	; 0x1740 <__divmodhi4>
     aee:	80 5d       	subi	r24, 0xD0	; 208
     af0:	80 83       	st	Z, r24
	}while ((n /= 10) > 0); // delete it
     af2:	86 2f       	mov	r24, r22
     af4:	97 2f       	mov	r25, r23
     af6:	18 16       	cp	r1, r24
     af8:	19 06       	cpc	r1, r25
     afa:	84 f3       	brlt	.-32     	; 0xadc <FUNCi16toa+0x1e>
	if (sign < 0)
     afc:	dd 23       	and	r29, r29
     afe:	44 f4       	brge	.+16     	; 0xb10 <FUNCi16toa+0x52>
		FUNCstr[i++] = '-';
     b00:	e3 2f       	mov	r30, r19
     b02:	f0 e0       	ldi	r31, 0x00	; 0
     b04:	e7 54       	subi	r30, 0x47	; 71
     b06:	fe 4f       	sbci	r31, 0xFE	; 254
     b08:	8d e2       	ldi	r24, 0x2D	; 45
     b0a:	80 83       	st	Z, r24
     b0c:	32 e0       	ldi	r19, 0x02	; 2
     b0e:	32 0f       	add	r19, r18
	FUNCstr[i] = '\0';
     b10:	e3 2f       	mov	r30, r19
     b12:	f0 e0       	ldi	r31, 0x00	; 0
     b14:	e7 54       	subi	r30, 0x47	; 71
     b16:	fe 4f       	sbci	r31, 0xFE	; 254
     b18:	10 82       	st	Z, r1
	Reverse(FUNCstr);
     b1a:	89 eb       	ldi	r24, 0xB9	; 185
     b1c:	91 e0       	ldi	r25, 0x01	; 1
     b1e:	58 df       	rcall	.-336    	; 0x9d0 <Reverse>
	return FUNCstr;
}
     b20:	89 eb       	ldi	r24, 0xB9	; 185
     b22:	91 e0       	ldi	r25, 0x01	; 1
     b24:	df 91       	pop	r29
     b26:	cf 91       	pop	r28
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	08 95       	ret

00000b2e <FUNCui16toa>:
// ui16toa: convert n to characters in s
char* FUNCui16toa(uint16_t n)
{
     b2e:	cf 93       	push	r28
     b30:	ac 01       	movw	r20, r24
	uint8_t i;
	i = 0;
     b32:	e0 e0       	ldi	r30, 0x00	; 0
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
     b34:	c1 e0       	ldi	r28, 0x01	; 1
     b36:	ce 0f       	add	r28, r30
     b38:	f0 e0       	ldi	r31, 0x00	; 0
     b3a:	e7 54       	subi	r30, 0x47	; 71
     b3c:	fe 4f       	sbci	r31, 0xFE	; 254
     b3e:	9a 01       	movw	r18, r20
     b40:	ad ec       	ldi	r26, 0xCD	; 205
     b42:	bc ec       	ldi	r27, 0xCC	; 204
     b44:	4e d6       	rcall	.+3228   	; 0x17e2 <__umulhisi3>
     b46:	96 95       	lsr	r25
     b48:	87 95       	ror	r24
     b4a:	96 95       	lsr	r25
     b4c:	87 95       	ror	r24
     b4e:	96 95       	lsr	r25
     b50:	87 95       	ror	r24
     b52:	9c 01       	movw	r18, r24
     b54:	22 0f       	add	r18, r18
     b56:	33 1f       	adc	r19, r19
     b58:	88 0f       	add	r24, r24
     b5a:	99 1f       	adc	r25, r25
     b5c:	88 0f       	add	r24, r24
     b5e:	99 1f       	adc	r25, r25
     b60:	88 0f       	add	r24, r24
     b62:	99 1f       	adc	r25, r25
     b64:	82 0f       	add	r24, r18
     b66:	93 1f       	adc	r25, r19
     b68:	9a 01       	movw	r18, r20
     b6a:	28 1b       	sub	r18, r24
     b6c:	39 0b       	sbc	r19, r25
     b6e:	c9 01       	movw	r24, r18
     b70:	80 5d       	subi	r24, 0xD0	; 208
     b72:	80 83       	st	Z, r24
	}while ((n /= 10) > 0); // delete it
     b74:	9a 01       	movw	r18, r20
     b76:	35 d6       	rcall	.+3178   	; 0x17e2 <__umulhisi3>
     b78:	ac 01       	movw	r20, r24
     b7a:	56 95       	lsr	r21
     b7c:	47 95       	ror	r20
     b7e:	56 95       	lsr	r21
     b80:	47 95       	ror	r20
     b82:	56 95       	lsr	r21
     b84:	47 95       	ror	r20
char* FUNCui16toa(uint16_t n)
{
	uint8_t i;
	i = 0;
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
     b86:	ec 2f       	mov	r30, r28
	}while ((n /= 10) > 0); // delete it
     b88:	41 15       	cp	r20, r1
     b8a:	51 05       	cpc	r21, r1
     b8c:	99 f6       	brne	.-90     	; 0xb34 <FUNCui16toa+0x6>
	FUNCstr[i] = '\0';
     b8e:	ec 2f       	mov	r30, r28
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	e7 54       	subi	r30, 0x47	; 71
     b94:	fe 4f       	sbci	r31, 0xFE	; 254
     b96:	10 82       	st	Z, r1
	Reverse(FUNCstr);
     b98:	89 eb       	ldi	r24, 0xB9	; 185
     b9a:	91 e0       	ldi	r25, 0x01	; 1
     b9c:	19 df       	rcall	.-462    	; 0x9d0 <Reverse>
	return FUNCstr;
}
     b9e:	89 eb       	ldi	r24, 0xB9	; 185
     ba0:	91 e0       	ldi	r25, 0x01	; 1
     ba2:	cf 91       	pop	r28
     ba4:	08 95       	ret

00000ba6 <FUNCbcd2bin>:
		s[j] = c;
	}
}
unsigned char FUNCbcd2bin(unsigned char val)
{
	return (val & 0x0f) + (val >> 4) * 10;
     ba6:	98 2f       	mov	r25, r24
     ba8:	92 95       	swap	r25
     baa:	9f 70       	andi	r25, 0x0F	; 15
     bac:	99 0f       	add	r25, r25
     bae:	29 2f       	mov	r18, r25
     bb0:	22 0f       	add	r18, r18
     bb2:	22 0f       	add	r18, r18
     bb4:	92 0f       	add	r25, r18
     bb6:	8f 70       	andi	r24, 0x0F	; 15
}
     bb8:	89 0f       	add	r24, r25
     bba:	08 95       	ret

00000bbc <FUNCbin2bcd>:
unsigned char FUNCbin2bcd(unsigned val)
{
     bbc:	ac 01       	movw	r20, r24
	return ((val / 10) << 4) + val % 10;
     bbe:	9c 01       	movw	r18, r24
     bc0:	ad ec       	ldi	r26, 0xCD	; 205
     bc2:	bc ec       	ldi	r27, 0xCC	; 204
     bc4:	0e d6       	rcall	.+3100   	; 0x17e2 <__umulhisi3>
     bc6:	96 95       	lsr	r25
     bc8:	87 95       	ror	r24
     bca:	96 95       	lsr	r25
     bcc:	87 95       	ror	r24
     bce:	96 95       	lsr	r25
     bd0:	87 95       	ror	r24
     bd2:	bc 01       	movw	r22, r24
     bd4:	66 0f       	add	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	9c 01       	movw	r18, r24
     bda:	22 0f       	add	r18, r18
     bdc:	33 1f       	adc	r19, r19
     bde:	22 0f       	add	r18, r18
     be0:	33 1f       	adc	r19, r19
     be2:	22 0f       	add	r18, r18
     be4:	33 1f       	adc	r19, r19
     be6:	26 0f       	add	r18, r22
     be8:	37 1f       	adc	r19, r23
     bea:	42 1b       	sub	r20, r18
     bec:	53 0b       	sbc	r21, r19
}
     bee:	34 2f       	mov	r19, r20
     bf0:	20 e1       	ldi	r18, 0x10	; 16
     bf2:	82 9f       	mul	r24, r18
     bf4:	30 0d       	add	r19, r0
     bf6:	11 24       	eor	r1, r1
     bf8:	83 2f       	mov	r24, r19
     bfa:	08 95       	ret

00000bfc <FUNCgcd1>:
long FUNCgcd1(long a, long b)
{
     bfc:	cf 92       	push	r12
     bfe:	df 92       	push	r13
     c00:	ef 92       	push	r14
     c02:	ff 92       	push	r15
     c04:	cf 93       	push	r28
     c06:	df 93       	push	r29
     c08:	cd b7       	in	r28, 0x3d	; 61
     c0a:	de b7       	in	r29, 0x3e	; 62
     c0c:	28 97       	sbiw	r28, 0x08	; 8
     c0e:	0f b6       	in	r0, 0x3f	; 63
     c10:	f8 94       	cli
     c12:	de bf       	out	0x3e, r29	; 62
     c14:	0f be       	out	0x3f, r0	; 63
     c16:	cd bf       	out	0x3d, r28	; 61
     c18:	6b 01       	movw	r12, r22
     c1a:	7c 01       	movw	r14, r24
     c1c:	69 83       	std	Y+1, r22	; 0x01
     c1e:	7a 83       	std	Y+2, r23	; 0x02
     c20:	8b 83       	std	Y+3, r24	; 0x03
     c22:	9c 83       	std	Y+4, r25	; 0x04
     c24:	2d 83       	std	Y+5, r18	; 0x05
     c26:	3e 83       	std	Y+6, r19	; 0x06
     c28:	4f 83       	std	Y+7, r20	; 0x07
     c2a:	58 87       	std	Y+8, r21	; 0x08
	long r;
	if (a < b)
     c2c:	c2 16       	cp	r12, r18
     c2e:	d3 06       	cpc	r13, r19
     c30:	e4 06       	cpc	r14, r20
     c32:	f5 06       	cpc	r15, r21
     c34:	34 f4       	brge	.+12     	; 0xc42 <FUNCgcd1+0x46>
		FUNCswap(&a, &b);
     c36:	be 01       	movw	r22, r28
     c38:	6b 5f       	subi	r22, 0xFB	; 251
     c3a:	7f 4f       	sbci	r23, 0xFF	; 255
     c3c:	ce 01       	movw	r24, r28
     c3e:	01 96       	adiw	r24, 0x01	; 1
     c40:	8d dc       	rcall	.-1766   	; 0x55c <FUNCswap>
	if (!b){
     c42:	8d 81       	ldd	r24, Y+5	; 0x05
     c44:	9e 81       	ldd	r25, Y+6	; 0x06
     c46:	af 81       	ldd	r26, Y+7	; 0x07
     c48:	b8 85       	ldd	r27, Y+8	; 0x08
     c4a:	89 2b       	or	r24, r25
     c4c:	8a 2b       	or	r24, r26
     c4e:	8b 2b       	or	r24, r27
     c50:	69 f4       	brne	.+26     	; 0xc6c <FUNCgcd1+0x70>
		while ((r = a % b) != 0) {
     c52:	69 81       	ldd	r22, Y+1	; 0x01
     c54:	7a 81       	ldd	r23, Y+2	; 0x02
     c56:	8b 81       	ldd	r24, Y+3	; 0x03
     c58:	9c 81       	ldd	r25, Y+4	; 0x04
     c5a:	20 e0       	ldi	r18, 0x00	; 0
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	a9 01       	movw	r20, r18
     c60:	a4 d5       	rcall	.+2888   	; 0x17aa <__divmodsi4>
     c62:	61 15       	cp	r22, r1
     c64:	71 05       	cpc	r23, r1
     c66:	81 05       	cpc	r24, r1
     c68:	91 05       	cpc	r25, r1
     c6a:	29 f4       	brne	.+10     	; 0xc76 <FUNCgcd1+0x7a>
			a = b;
			b = r;
		}
	}	
	return b;
     c6c:	6d 81       	ldd	r22, Y+5	; 0x05
     c6e:	7e 81       	ldd	r23, Y+6	; 0x06
     c70:	8f 81       	ldd	r24, Y+7	; 0x07
     c72:	98 85       	ldd	r25, Y+8	; 0x08
     c74:	05 c0       	rjmp	.+10     	; 0xc80 <FUNCgcd1+0x84>
	if (a < b)
		FUNCswap(&a, &b);
	if (!b){
		while ((r = a % b) != 0) {
			a = b;
			b = r;
     c76:	6d 83       	std	Y+5, r22	; 0x05
     c78:	7e 83       	std	Y+6, r23	; 0x06
     c7a:	8f 83       	std	Y+7, r24	; 0x07
     c7c:	98 87       	std	Y+8, r25	; 0x08
     c7e:	f6 cf       	rjmp	.-20     	; 0xc6c <FUNCgcd1+0x70>
		}
	}	
	return b;
}
     c80:	28 96       	adiw	r28, 0x08	; 8
     c82:	0f b6       	in	r0, 0x3f	; 63
     c84:	f8 94       	cli
     c86:	de bf       	out	0x3e, r29	; 62
     c88:	0f be       	out	0x3f, r0	; 63
     c8a:	cd bf       	out	0x3d, r28	; 61
     c8c:	df 91       	pop	r29
     c8e:	cf 91       	pop	r28
     c90:	ff 90       	pop	r15
     c92:	ef 90       	pop	r14
     c94:	df 90       	pop	r13
     c96:	cf 90       	pop	r12
     c98:	08 95       	ret

00000c9a <FUNCpincheck>:
	uint8_t lh;
	if(port & (1<<pin))
		lh=1;
	else
		lh=0;
	return lh;
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	02 c0       	rjmp	.+4      	; 0xca2 <FUNCpincheck+0x8>
     c9e:	95 95       	asr	r25
     ca0:	87 95       	ror	r24
     ca2:	6a 95       	dec	r22
     ca4:	e2 f7       	brpl	.-8      	; 0xc9e <FUNCpincheck+0x4>
}
     ca6:	81 70       	andi	r24, 0x01	; 1
     ca8:	08 95       	ret

00000caa <FUNCprint_binary>:
char* FUNCprint_binary(uint8_t number)
{
     caa:	e9 eb       	ldi	r30, 0xB9	; 185
     cac:	f1 e0       	ldi	r31, 0x01	; 1
	uint8_t i,c;
    for(i=128,c=0;i;i>>=1,c++){
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	20 e8       	ldi	r18, 0x80	; 128
	(number & i) ? (FUNCstr[c]='1') : (FUNCstr[c]='0');
     cb2:	50 e3       	ldi	r21, 0x30	; 48
     cb4:	41 e3       	ldi	r20, 0x31	; 49
     cb6:	38 2f       	mov	r19, r24
     cb8:	32 23       	and	r19, r18
     cba:	11 f0       	breq	.+4      	; 0xcc0 <FUNCprint_binary+0x16>
     cbc:	40 83       	st	Z, r20
     cbe:	01 c0       	rjmp	.+2      	; 0xcc2 <FUNCprint_binary+0x18>
     cc0:	50 83       	st	Z, r21
	return lh;
}
char* FUNCprint_binary(uint8_t number)
{
	uint8_t i,c;
    for(i=128,c=0;i;i>>=1,c++){
     cc2:	26 95       	lsr	r18
     cc4:	9f 5f       	subi	r25, 0xFF	; 255
     cc6:	31 96       	adiw	r30, 0x01	; 1
     cc8:	98 30       	cpi	r25, 0x08	; 8
     cca:	a9 f7       	brne	.-22     	; 0xcb6 <FUNCprint_binary+0xc>
	(number & i) ? (FUNCstr[c]='1') : (FUNCstr[c]='0');
	}
	FUNCstr[c]='\0';
     ccc:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <FUNCstr+0x8>
	return FUNCstr;
}
     cd0:	89 eb       	ldi	r24, 0xB9	; 185
     cd2:	91 e0       	ldi	r25, 0x01	; 1
     cd4:	08 95       	ret

00000cd6 <FUNCmayia>:
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
     cd6:	a4 2f       	mov	r26, r20
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	10 97       	sbiw	r26, 0x00	; 0
     cdc:	61 f0       	breq	.+24     	; 0xcf6 <FUNCmayia+0x20>
     cde:	21 e0       	ldi	r18, 0x01	; 1
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	e1 e0       	ldi	r30, 0x01	; 1
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
        p = p * bs;
     ce6:	ee 0f       	add	r30, r30
     ce8:	ff 1f       	adc	r31, r31
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
     cea:	2f 5f       	subi	r18, 0xFF	; 255
     cec:	3f 4f       	sbci	r19, 0xFF	; 255
     cee:	a2 17       	cp	r26, r18
     cf0:	b3 07       	cpc	r27, r19
     cf2:	c8 f7       	brcc	.-14     	; 0xce6 <FUNCmayia+0x10>
     cf4:	02 c0       	rjmp	.+4      	; 0xcfa <FUNCmayia+0x24>
}
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
     cf6:	e1 e0       	ldi	r30, 0x01	; 1
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
unsigned int FUNCmayia(unsigned int xi, unsigned int xf, uint8_t nbits)
{//magic formula
	unsigned int mask;
	unsigned int diff;
	unsigned int trans;
	mask=Pwr(2,nbits)-1;
     cfa:	31 97       	sbiw	r30, 0x01	; 1
	xi&=mask;
	xf&=mask;
     cfc:	6e 23       	and	r22, r30
     cfe:	7f 23       	and	r23, r31
	diff=xf^xi;
     d00:	8e 23       	and	r24, r30
     d02:	9f 23       	and	r25, r31
     d04:	86 27       	eor	r24, r22
     d06:	97 27       	eor	r25, r23
	trans=diff&xf;
	return (trans<<nbits)|diff;
     d08:	68 23       	and	r22, r24
     d0a:	79 23       	and	r23, r25
     d0c:	02 c0       	rjmp	.+4      	; 0xd12 <FUNCmayia+0x3c>
     d0e:	66 0f       	add	r22, r22
     d10:	77 1f       	adc	r23, r23
     d12:	4a 95       	dec	r20
     d14:	e2 f7       	brpl	.-8      	; 0xd0e <FUNCmayia+0x38>
}
     d16:	86 2b       	or	r24, r22
     d18:	97 2b       	or	r25, r23
     d1a:	08 95       	ret

00000d1c <FUNCenable>:
// uint8_t TRANupdate(struct TRAN *tr, uint8_t idata);
/*
** procedure and function
*/
FUNC FUNCenable( void )
{
     d1c:	fc 01       	movw	r30, r24
	uint8_t tSREG;
	tSREG=SREG;
     d1e:	9f b7       	in	r25, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
     d20:	8f b7       	in	r24, 0x3f	; 63
     d22:	8f 77       	andi	r24, 0x7F	; 127
     d24:	8f bf       	out	0x3f, r24	; 63
	func.putstr=FUNCputstr;
	func.getnum=FUNCgetnum;
	func.getnumv2=FUNCgetnumv2;
	func.readint=FUNCreadint;
	*/
	SREG=tSREG;
     d26:	9f bf       	out	0x3f, r25	; 63
	/******/
	return func;
     d28:	83 ea       	ldi	r24, 0xA3	; 163
     d2a:	94 e0       	ldi	r25, 0x04	; 4
     d2c:	91 83       	std	Z+1, r25	; 0x01
     d2e:	80 83       	st	Z, r24
     d30:	8e eb       	ldi	r24, 0xBE	; 190
     d32:	94 e0       	ldi	r25, 0x04	; 4
     d34:	93 83       	std	Z+3, r25	; 0x03
     d36:	82 83       	std	Z+2, r24	; 0x02
     d38:	88 ee       	ldi	r24, 0xE8	; 232
     d3a:	94 e0       	ldi	r25, 0x04	; 4
     d3c:	95 83       	std	Z+5, r25	; 0x05
     d3e:	84 83       	std	Z+4, r24	; 0x04
     d40:	8b e6       	ldi	r24, 0x6B	; 107
     d42:	96 e0       	ldi	r25, 0x06	; 6
     d44:	97 83       	std	Z+7, r25	; 0x07
     d46:	86 83       	std	Z+6, r24	; 0x06
     d48:	83 e9       	ldi	r24, 0x93	; 147
     d4a:	92 e0       	ldi	r25, 0x02	; 2
     d4c:	91 87       	std	Z+9, r25	; 0x09
     d4e:	80 87       	std	Z+8, r24	; 0x08
     d50:	81 ea       	ldi	r24, 0xA1	; 161
     d52:	92 e0       	ldi	r25, 0x02	; 2
     d54:	93 87       	std	Z+11, r25	; 0x0b
     d56:	82 87       	std	Z+10, r24	; 0x0a
     d58:	83 ea       	ldi	r24, 0xA3	; 163
     d5a:	92 e0       	ldi	r25, 0x02	; 2
     d5c:	95 87       	std	Z+13, r25	; 0x0d
     d5e:	84 87       	std	Z+12, r24	; 0x0c
     d60:	86 ea       	ldi	r24, 0xA6	; 166
     d62:	92 e0       	ldi	r25, 0x02	; 2
     d64:	97 87       	std	Z+15, r25	; 0x0f
     d66:	86 87       	std	Z+14, r24	; 0x0e
     d68:	89 ea       	ldi	r24, 0xA9	; 169
     d6a:	92 e0       	ldi	r25, 0x02	; 2
     d6c:	91 8b       	std	Z+17, r25	; 0x11
     d6e:	80 8b       	std	Z+16, r24	; 0x10
     d70:	8c ea       	ldi	r24, 0xAC	; 172
     d72:	92 e0       	ldi	r25, 0x02	; 2
     d74:	93 8b       	std	Z+19, r25	; 0x13
     d76:	82 8b       	std	Z+18, r24	; 0x12
     d78:	8d e9       	ldi	r24, 0x9D	; 157
     d7a:	92 e0       	ldi	r25, 0x02	; 2
     d7c:	95 8b       	std	Z+21, r25	; 0x15
     d7e:	84 8b       	std	Z+20, r24	; 0x14
     d80:	8f e9       	ldi	r24, 0x9F	; 159
     d82:	92 e0       	ldi	r25, 0x02	; 2
     d84:	97 8b       	std	Z+23, r25	; 0x17
     d86:	86 8b       	std	Z+22, r24	; 0x16
     d88:	8e ea       	ldi	r24, 0xAE	; 174
     d8a:	92 e0       	ldi	r25, 0x02	; 2
     d8c:	91 8f       	std	Z+25, r25	; 0x19
     d8e:	80 8f       	std	Z+24, r24	; 0x18
     d90:	8f ec       	ldi	r24, 0xCF	; 207
     d92:	92 e0       	ldi	r25, 0x02	; 2
     d94:	93 8f       	std	Z+27, r25	; 0x1b
     d96:	82 8f       	std	Z+26, r24	; 0x1a
     d98:	8d ed       	ldi	r24, 0xDD	; 221
     d9a:	92 e0       	ldi	r25, 0x02	; 2
     d9c:	95 8f       	std	Z+29, r25	; 0x1d
     d9e:	84 8f       	std	Z+28, r24	; 0x1c
     da0:	8f ef       	ldi	r24, 0xFF	; 255
     da2:	92 e0       	ldi	r25, 0x02	; 2
     da4:	97 8f       	std	Z+31, r25	; 0x1f
     da6:	86 8f       	std	Z+30, r24	; 0x1e
     da8:	8f e5       	ldi	r24, 0x5F	; 95
     daa:	95 e0       	ldi	r25, 0x05	; 5
     dac:	91 a3       	std	Z+33, r25	; 0x21
     dae:	80 a3       	std	Z+32, r24	; 0x20
     db0:	87 e9       	ldi	r24, 0x97	; 151
     db2:	95 e0       	ldi	r25, 0x05	; 5
     db4:	93 a3       	std	Z+35, r25	; 0x23
     db6:	82 a3       	std	Z+34, r24	; 0x22
     db8:	85 e0       	ldi	r24, 0x05	; 5
     dba:	95 e0       	ldi	r25, 0x05	; 5
     dbc:	95 a3       	std	Z+37, r25	; 0x25
     dbe:	84 a3       	std	Z+36, r24	; 0x24
     dc0:	8d ec       	ldi	r24, 0xCD	; 205
     dc2:	94 e0       	ldi	r25, 0x04	; 4
     dc4:	97 a3       	std	Z+39, r25	; 0x27
     dc6:	86 a3       	std	Z+38, r24	; 0x26
     dc8:	85 ea       	ldi	r24, 0xA5	; 165
     dca:	93 e0       	ldi	r25, 0x03	; 3
     dcc:	91 a7       	std	Z+41, r25	; 0x29
     dce:	80 a7       	std	Z+40, r24	; 0x28
     dd0:	8a ea       	ldi	r24, 0xAA	; 170
     dd2:	93 e0       	ldi	r25, 0x03	; 3
     dd4:	93 a7       	std	Z+43, r25	; 0x2b
     dd6:	82 a7       	std	Z+42, r24	; 0x2a
     dd8:	88 eb       	ldi	r24, 0xB8	; 184
     dda:	93 e0       	ldi	r25, 0x03	; 3
     ddc:	95 a7       	std	Z+45, r25	; 0x2d
     dde:	84 a7       	std	Z+44, r24	; 0x2c
     de0:	8c ed       	ldi	r24, 0xDC	; 220
     de2:	93 e0       	ldi	r25, 0x03	; 3
     de4:	97 a7       	std	Z+47, r25	; 0x2f
     de6:	86 a7       	std	Z+46, r24	; 0x2e
     de8:	8e ed       	ldi	r24, 0xDE	; 222
     dea:	93 e0       	ldi	r25, 0x03	; 3
     dec:	91 ab       	std	Z+49, r25	; 0x31
     dee:	80 ab       	std	Z+48, r24	; 0x30
     df0:	88 ee       	ldi	r24, 0xE8	; 232
     df2:	93 e0       	ldi	r25, 0x03	; 3
     df4:	93 ab       	std	Z+51, r25	; 0x33
     df6:	82 ab       	std	Z+50, r24	; 0x32
     df8:	85 ef       	ldi	r24, 0xF5	; 245
     dfa:	93 e0       	ldi	r25, 0x03	; 3
     dfc:	95 ab       	std	Z+53, r25	; 0x35
     dfe:	84 ab       	std	Z+52, r24	; 0x34
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	94 e0       	ldi	r25, 0x04	; 4
     e04:	97 ab       	std	Z+55, r25	; 0x37
     e06:	86 ab       	std	Z+54, r24	; 0x36
     e08:	89 e1       	ldi	r24, 0x19	; 25
     e0a:	94 e0       	ldi	r25, 0x04	; 4
     e0c:	91 af       	std	Z+57, r25	; 0x39
     e0e:	80 af       	std	Z+56, r24	; 0x38
     e10:	8c e2       	ldi	r24, 0x2C	; 44
     e12:	94 e0       	ldi	r25, 0x04	; 4
     e14:	93 af       	std	Z+59, r25	; 0x3b
     e16:	82 af       	std	Z+58, r24	; 0x3a
     e18:	87 e3       	ldi	r24, 0x37	; 55
     e1a:	94 e0       	ldi	r25, 0x04	; 4
     e1c:	95 af       	std	Z+61, r25	; 0x3d
     e1e:	84 af       	std	Z+60, r24	; 0x3c
     e20:	84 e6       	ldi	r24, 0x64	; 100
     e22:	94 e0       	ldi	r25, 0x04	; 4
     e24:	97 af       	std	Z+63, r25	; 0x3f
     e26:	86 af       	std	Z+62, r24	; 0x3e
     e28:	df 01       	movw	r26, r30
     e2a:	a0 5c       	subi	r26, 0xC0	; 192
     e2c:	bf 4f       	sbci	r27, 0xFF	; 255
     e2e:	83 ed       	ldi	r24, 0xD3	; 211
     e30:	95 e0       	ldi	r25, 0x05	; 5
     e32:	11 96       	adiw	r26, 0x01	; 1
     e34:	9c 93       	st	X, r25
     e36:	8e 93       	st	-X, r24
     e38:	12 96       	adiw	r26, 0x02	; 2
     e3a:	8e ed       	ldi	r24, 0xDE	; 222
     e3c:	95 e0       	ldi	r25, 0x05	; 5
     e3e:	11 96       	adiw	r26, 0x01	; 1
     e40:	9c 93       	st	X, r25
     e42:	8e 93       	st	-X, r24
     e44:	12 96       	adiw	r26, 0x02	; 2
     e46:	8e ef       	ldi	r24, 0xFE	; 254
     e48:	95 e0       	ldi	r25, 0x05	; 5
     e4a:	11 96       	adiw	r26, 0x01	; 1
     e4c:	9c 93       	st	X, r25
     e4e:	8e 93       	st	-X, r24
     e50:	12 96       	adiw	r26, 0x02	; 2
     e52:	8d e4       	ldi	r24, 0x4D	; 77
     e54:	96 e0       	ldi	r25, 0x06	; 6
     e56:	11 96       	adiw	r26, 0x01	; 1
     e58:	9c 93       	st	X, r25
     e5a:	8e 93       	st	-X, r24
     e5c:	12 96       	adiw	r26, 0x02	; 2
     e5e:	85 e5       	ldi	r24, 0x55	; 85
     e60:	96 e0       	ldi	r25, 0x06	; 6
     e62:	8d 93       	st	X+, r24
     e64:	9c 93       	st	X, r25
}
     e66:	cf 01       	movw	r24, r30
     e68:	08 95       	ret

00000e6a <I2C_Init>:
 * Return value	: none
 * description :This function is used to initialize the I2C module
****************************************************************************************************/
void I2C_Init(uint8_t prescaler)
{
  I2C_DDR|=I2C_IO_MASK;
     e6a:	91 b3       	in	r25, 0x11	; 17
     e6c:	93 60       	ori	r25, 0x03	; 3
     e6e:	91 bb       	out	0x11, r25	; 17
  I2C_PORT|=I2C_IO_MASK;
     e70:	92 b3       	in	r25, 0x12	; 18
     e72:	93 60       	ori	r25, 0x03	; 3
     e74:	92 bb       	out	0x12, r25	; 18
  switch(prescaler){
     e76:	84 30       	cpi	r24, 0x04	; 4
     e78:	79 f0       	breq	.+30     	; 0xe98 <I2C_Init+0x2e>
     e7a:	18 f4       	brcc	.+6      	; 0xe82 <I2C_Init+0x18>
     e7c:	81 30       	cpi	r24, 0x01	; 1
     e7e:	31 f0       	breq	.+12     	; 0xe8c <I2C_Init+0x22>
     e80:	1d c0       	rjmp	.+58     	; 0xebc <I2C_Init+0x52>
     e82:	80 31       	cpi	r24, 0x10	; 16
     e84:	79 f0       	breq	.+30     	; 0xea4 <I2C_Init+0x3a>
     e86:	80 34       	cpi	r24, 0x40	; 64
     e88:	99 f0       	breq	.+38     	; 0xeb0 <I2C_Init+0x46>
     e8a:	18 c0       	rjmp	.+48     	; 0xebc <I2C_Init+0x52>
	case 1:
		TWI_STATUS_REGISTER &= ~TWI_PRESCALER_MASK;
     e8c:	e1 e7       	ldi	r30, 0x71	; 113
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	90 81       	ld	r25, Z
     e92:	9c 7f       	andi	r25, 0xFC	; 252
     e94:	90 83       	st	Z, r25
		break;
     e96:	18 c0       	rjmp	.+48     	; 0xec8 <I2C_Init+0x5e>
	case 4:
		TWI_STATUS_REGISTER |= (1<<TWPS0);
     e98:	e1 e7       	ldi	r30, 0x71	; 113
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	90 81       	ld	r25, Z
     e9e:	91 60       	ori	r25, 0x01	; 1
     ea0:	90 83       	st	Z, r25
		break;
     ea2:	12 c0       	rjmp	.+36     	; 0xec8 <I2C_Init+0x5e>
	case 16:
		TWI_STATUS_REGISTER |= (2<<TWPS0);
     ea4:	e1 e7       	ldi	r30, 0x71	; 113
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	90 81       	ld	r25, Z
     eaa:	92 60       	ori	r25, 0x02	; 2
     eac:	90 83       	st	Z, r25
		break;
     eae:	0c c0       	rjmp	.+24     	; 0xec8 <I2C_Init+0x5e>
	case 64:
		TWI_STATUS_REGISTER |= (3<<TWPS0);
     eb0:	e1 e7       	ldi	r30, 0x71	; 113
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	90 81       	ld	r25, Z
     eb6:	93 60       	ori	r25, 0x03	; 3
     eb8:	90 83       	st	Z, r25
		break;
     eba:	06 c0       	rjmp	.+12     	; 0xec8 <I2C_Init+0x5e>
	default:
		prescaler=1;
		TWI_STATUS_REGISTER &= ~TWI_PRESCALER_MASK;
     ebc:	e1 e7       	ldi	r30, 0x71	; 113
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	8c 7f       	andi	r24, 0xFC	; 252
     ec4:	80 83       	st	Z, r24
		break;
	case 64:
		TWI_STATUS_REGISTER |= (3<<TWPS0);
		break;
	default:
		prescaler=1;
     ec6:	81 e0       	ldi	r24, 0x01	; 1
		TWI_STATUS_REGISTER &= ~TWI_PRESCALER_MASK;
	break;
  }
  TWI_BIT_RATE_REGISTER = ((F_CPU/I2C_SCL_CLOCK)-16)/(2*prescaler);
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	22 0f       	add	r18, r18
     ece:	33 1f       	adc	r19, r19
     ed0:	03 2e       	mov	r0, r19
     ed2:	00 0c       	add	r0, r0
     ed4:	44 0b       	sbc	r20, r20
     ed6:	55 0b       	sbc	r21, r21
     ed8:	60 e9       	ldi	r22, 0x90	; 144
     eda:	70 e0       	ldi	r23, 0x00	; 0
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	42 d4       	rcall	.+2180   	; 0x1766 <__udivmodsi4>
     ee2:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     ee6:	08 95       	ret

00000ee8 <I2C_Start>:
                      ____|         |____________

***************************************************************************************************/
void I2C_Start()
{
  TWI_CONTROL_REGISTER = ((1<<TWINT) | (1<<TWSTA) | (1<<TWEN));
     ee8:	e4 e7       	ldi	r30, 0x74	; 116
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	84 ea       	ldi	r24, 0xA4	; 164
     eee:	80 83       	st	Z, r24
  for (ticks=Nticks; !(TWI_CONTROL_REGISTER & (1<<TWINT)) && ticks; ticks--);
     ef0:	8f ef       	ldi	r24, 0xFF	; 255
     ef2:	93 e0       	ldi	r25, 0x03	; 3
     ef4:	90 93 ce 01 	sts	0x01CE, r25	; 0x8001ce <ticks+0x1>
     ef8:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <ticks>
     efc:	80 81       	ld	r24, Z
     efe:	88 23       	and	r24, r24
     f00:	5c f0       	brlt	.+22     	; 0xf18 <I2C_Start+0x30>
     f02:	8e ef       	ldi	r24, 0xFE	; 254
     f04:	93 e0       	ldi	r25, 0x03	; 3
     f06:	90 93 ce 01 	sts	0x01CE, r25	; 0x8001ce <ticks+0x1>
     f0a:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <ticks>
     f0e:	20 81       	ld	r18, Z
     f10:	22 23       	and	r18, r18
     f12:	14 f0       	brlt	.+4      	; 0xf18 <I2C_Start+0x30>
     f14:	01 97       	sbiw	r24, 0x01	; 1
     f16:	b8 f7       	brcc	.-18     	; 0xf06 <I2C_Start+0x1e>
     f18:	08 95       	ret

00000f1a <I2C_Stop>:
                      __________|

***************************************************************************************************/
void I2C_Stop(void)
{
  TWI_CONTROL_REGISTER = ((1<< TWINT) | (1<<TWEN) | (1<<TWSTO));
     f1a:	84 e9       	ldi	r24, 0x94	; 148
     f1c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f20:	8f e8       	ldi	r24, 0x8F	; 143
     f22:	91 e0       	ldi	r25, 0x01	; 1
     f24:	01 97       	sbiw	r24, 0x01	; 1
     f26:	f1 f7       	brne	.-4      	; 0xf24 <I2C_Stop+0xa>
     f28:	00 c0       	rjmp	.+0      	; 0xf2a <I2C_Stop+0x10>
     f2a:	00 00       	nop
     f2c:	08 95       	ret

00000f2e <I2C_Write>:
 SDA:    D8       D7     D6      D5      D4       D3      D2      D1      D0     ACK

***************************************************************************************************/
void I2C_Write(uint8_t var_i2cData_u8)
{
  TWI_DATA_REGISTER = var_i2cData_u8 ;
     f2e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
  TWI_CONTROL_REGISTER = ((1<< TWINT) | (1<<TWEN));
     f32:	e4 e7       	ldi	r30, 0x74	; 116
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	84 e8       	ldi	r24, 0x84	; 132
     f38:	80 83       	st	Z, r24
  for (ticks=Nticks; !(TWI_CONTROL_REGISTER & (1 <<TWINT)) && ticks; ticks--);
     f3a:	8f ef       	ldi	r24, 0xFF	; 255
     f3c:	93 e0       	ldi	r25, 0x03	; 3
     f3e:	90 93 ce 01 	sts	0x01CE, r25	; 0x8001ce <ticks+0x1>
     f42:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <ticks>
     f46:	80 81       	ld	r24, Z
     f48:	88 23       	and	r24, r24
     f4a:	5c f0       	brlt	.+22     	; 0xf62 <I2C_Write+0x34>
     f4c:	8e ef       	ldi	r24, 0xFE	; 254
     f4e:	93 e0       	ldi	r25, 0x03	; 3
     f50:	90 93 ce 01 	sts	0x01CE, r25	; 0x8001ce <ticks+0x1>
     f54:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <ticks>
     f58:	20 81       	ld	r18, Z
     f5a:	22 23       	and	r18, r18
     f5c:	14 f0       	brlt	.+4      	; 0xf62 <I2C_Write+0x34>
     f5e:	01 97       	sbiw	r24, 0x01	; 1
     f60:	b8 f7       	brcc	.-18     	; 0xf50 <I2C_Write+0x22>
     f62:	08 95       	ret

00000f64 <I2C_Read>:
 SDA:    D8       D7     D6      D5       D4     D3       D2      D1     D0      ACK

***************************************************************************************************/
uint8_t I2C_Read(uint8_t var_ackOption_u8)
{
 TWI_CONTROL_REGISTER = ((1<< TWINT) | (1<<TWEN) | (var_ackOption_u8<<TWEA));
     f64:	20 e4       	ldi	r18, 0x40	; 64
     f66:	82 9f       	mul	r24, r18
     f68:	c0 01       	movw	r24, r0
     f6a:	11 24       	eor	r1, r1
     f6c:	84 68       	ori	r24, 0x84	; 132
     f6e:	e4 e7       	ldi	r30, 0x74	; 116
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 83       	st	Z, r24
   for (ticks=Nticks; !(TWI_CONTROL_REGISTER & (1 <<TWINT)) && ticks; ticks--);
     f74:	8f ef       	ldi	r24, 0xFF	; 255
     f76:	93 e0       	ldi	r25, 0x03	; 3
     f78:	90 93 ce 01 	sts	0x01CE, r25	; 0x8001ce <ticks+0x1>
     f7c:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <ticks>
     f80:	80 81       	ld	r24, Z
     f82:	88 23       	and	r24, r24
     f84:	5c f0       	brlt	.+22     	; 0xf9c <I2C_Read+0x38>
     f86:	8e ef       	ldi	r24, 0xFE	; 254
     f88:	93 e0       	ldi	r25, 0x03	; 3
     f8a:	90 93 ce 01 	sts	0x01CE, r25	; 0x8001ce <ticks+0x1>
     f8e:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <ticks>
     f92:	20 81       	ld	r18, Z
     f94:	22 23       	and	r18, r18
     f96:	14 f0       	brlt	.+4      	; 0xf9c <I2C_Read+0x38>
     f98:	01 97       	sbiw	r24, 0x01	; 1
     f9a:	b8 f7       	brcc	.-18     	; 0xf8a <I2C_Read+0x26>
   return TWI_DATA_REGISTER;
     f9c:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
}
     fa0:	08 95       	ret

00000fa2 <LCD0_write>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fa2:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <lcd0_PORT>
     fa6:	f0 91 da 01 	lds	r31, 0x01DA	; 0x8001da <lcd0_PORT+0x1>
     faa:	90 81       	ld	r25, Z
     fac:	9d 7f       	andi	r25, 0xFD	; 253
     fae:	90 83       	st	Z, r25
     fb0:	67 2b       	or	r22, r23
     fb2:	41 f0       	breq	.+16     	; 0xfc4 <LCD0_write+0x22>
     fb4:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <lcd0_PORT>
     fb8:	f0 91 da 01 	lds	r31, 0x01DA	; 0x8001da <lcd0_PORT+0x1>
     fbc:	90 81       	ld	r25, Z
     fbe:	91 60       	ori	r25, 0x01	; 1
     fc0:	90 83       	st	Z, r25
     fc2:	07 c0       	rjmp	.+14     	; 0xfd2 <LCD0_write+0x30>
     fc4:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <lcd0_PORT>
     fc8:	f0 91 da 01 	lds	r31, 0x01DA	; 0x8001da <lcd0_PORT+0x1>
     fcc:	90 81       	ld	r25, Z
     fce:	9e 7f       	andi	r25, 0xFE	; 254
     fd0:	90 83       	st	Z, r25
     fd2:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <lcd0_DDR>
     fd6:	f0 91 d7 01 	lds	r31, 0x01D7	; 0x8001d7 <lcd0_DDR+0x1>
     fda:	90 81       	ld	r25, Z
     fdc:	90 6f       	ori	r25, 0xF0	; 240
     fde:	90 83       	st	Z, r25
     fe0:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <lcd0_PORT>
     fe4:	f0 91 da 01 	lds	r31, 0x01DA	; 0x8001da <lcd0_PORT+0x1>
     fe8:	90 81       	ld	r25, Z
     fea:	94 60       	ori	r25, 0x04	; 4
     fec:	90 83       	st	Z, r25
     fee:	88 23       	and	r24, r24
     ff0:	44 f4       	brge	.+16     	; 0x1002 <LCD0_write+0x60>
     ff2:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <lcd0_PORT>
     ff6:	f0 91 da 01 	lds	r31, 0x01DA	; 0x8001da <lcd0_PORT+0x1>
     ffa:	90 81       	ld	r25, Z
     ffc:	90 68       	ori	r25, 0x80	; 128
     ffe:	90 83       	st	Z, r25
    1000:	07 c0       	rjmp	.+14     	; 0x1010 <LCD0_write+0x6e>
    1002:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <lcd0_PORT>
    1006:	f0 91 da 01 	lds	r31, 0x01DA	; 0x8001da <lcd0_PORT+0x1>
    100a:	90 81       	ld	r25, Z
    100c:	9f 77       	andi	r25, 0x7F	; 127
    100e:	90 83       	st	Z, r25
    1010:	86 ff       	sbrs	r24, 6
    1012:	08 c0       	rjmp	.+16     	; 0x1024 <LCD0_write+0x82>
    1014:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <lcd0_PORT>
    1018:	f0 91 da 01 	lds	r31, 0x01DA	; 0x8001da <lcd0_PORT+0x1>
    101c:	90 81       	ld	r25, Z
    101e:	90 64       	ori	r25, 0x40	; 64
    1020:	90 83       	st	Z, r25
    1022:	07 c0       	rjmp	.+14     	; 0x1032 <LCD0_write+0x90>
    1024:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <lcd0_PORT>
    1028:	f0 91 da 01 	lds	r31, 0x01DA	; 0x8001da <lcd0_PORT+0x1>
    102c:	90 81       	ld	r25, Z
    102e:	9f 7b       	andi	r25, 0xBF	; 191
    1030:	90 83       	st	Z, r25
    1032:	85 ff       	sbrs	r24, 5
    1034:	08 c0       	rjmp	.+16     	; 0x1046 <LCD0_write+0xa4>
    1036:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <lcd0_PORT>
    103a:	f0 91 da 01 	lds	r31, 0x01DA	; 0x8001da <lcd0_PORT+0x1>
    103e:	90 81       	ld	r25, Z
    1040:	90 62       	ori	r25, 0x20	; 32
    1042:	90 83       	st	Z, r25
    1044:	07 c0       	rjmp	.+14     	; 0x1054 <LCD0_write+0xb2>
    1046:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <lcd0_PORT>
    104a:	f0 91 da 01 	lds	r31, 0x01DA	; 0x8001da <lcd0_PORT+0x1>
    104e:	90 81       	ld	r25, Z
    1050:	9f 7d       	andi	r25, 0xDF	; 223
    1052:	90 83       	st	Z, r25
    1054:	84 ff       	sbrs	r24, 4
    1056:	08 c0       	rjmp	.+16     	; 0x1068 <LCD0_write+0xc6>
    1058:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <lcd0_PORT>
    105c:	f0 91 da 01 	lds	r31, 0x01DA	; 0x8001da <lcd0_PORT+0x1>
    1060:	90 81       	ld	r25, Z
    1062:	90 61       	ori	r25, 0x10	; 16
    1064:	90 83       	st	Z, r25
    1066:	07 c0       	rjmp	.+14     	; 0x1076 <LCD0_write+0xd4>
    1068:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <lcd0_PORT>
    106c:	f0 91 da 01 	lds	r31, 0x01DA	; 0x8001da <lcd0_PORT+0x1>
    1070:	90 81       	ld	r25, Z
    1072:	9f 7e       	andi	r25, 0xEF	; 239
    1074:	90 83       	st	Z, r25
    1076:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <lcd0_PORT>
    107a:	f0 91 da 01 	lds	r31, 0x01DA	; 0x8001da <lcd0_PORT+0x1>
    107e:	90 81       	ld	r25, Z
    1080:	9b 7f       	andi	r25, 0xFB	; 251
    1082:	90 83       	st	Z, r25
    1084:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <lcd0_PORT>
    1088:	f0 91 da 01 	lds	r31, 0x01DA	; 0x8001da <lcd0_PORT+0x1>
    108c:	90 81       	ld	r25, Z
    108e:	94 60       	ori	r25, 0x04	; 4
    1090:	90 83       	st	Z, r25
    1092:	83 ff       	sbrs	r24, 3
    1094:	08 c0       	rjmp	.+16     	; 0x10a6 <LCD0_write+0x104>
    1096:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <lcd0_PORT>
    109a:	f0 91 da 01 	lds	r31, 0x01DA	; 0x8001da <lcd0_PORT+0x1>
    109e:	90 81       	ld	r25, Z
    10a0:	90 68       	ori	r25, 0x80	; 128
    10a2:	90 83       	st	Z, r25
    10a4:	07 c0       	rjmp	.+14     	; 0x10b4 <LCD0_write+0x112>
    10a6:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <lcd0_PORT>
    10aa:	f0 91 da 01 	lds	r31, 0x01DA	; 0x8001da <lcd0_PORT+0x1>
    10ae:	90 81       	ld	r25, Z
    10b0:	9f 77       	andi	r25, 0x7F	; 127
    10b2:	90 83       	st	Z, r25
    10b4:	82 ff       	sbrs	r24, 2
    10b6:	08 c0       	rjmp	.+16     	; 0x10c8 <LCD0_write+0x126>
    10b8:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <lcd0_PORT>
    10bc:	f0 91 da 01 	lds	r31, 0x01DA	; 0x8001da <lcd0_PORT+0x1>
    10c0:	90 81       	ld	r25, Z
    10c2:	90 64       	ori	r25, 0x40	; 64
    10c4:	90 83       	st	Z, r25
    10c6:	07 c0       	rjmp	.+14     	; 0x10d6 <LCD0_write+0x134>
    10c8:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <lcd0_PORT>
    10cc:	f0 91 da 01 	lds	r31, 0x01DA	; 0x8001da <lcd0_PORT+0x1>
    10d0:	90 81       	ld	r25, Z
    10d2:	9f 7b       	andi	r25, 0xBF	; 191
    10d4:	90 83       	st	Z, r25
    10d6:	81 ff       	sbrs	r24, 1
    10d8:	08 c0       	rjmp	.+16     	; 0x10ea <LCD0_write+0x148>
    10da:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <lcd0_PORT>
    10de:	f0 91 da 01 	lds	r31, 0x01DA	; 0x8001da <lcd0_PORT+0x1>
    10e2:	90 81       	ld	r25, Z
    10e4:	90 62       	ori	r25, 0x20	; 32
    10e6:	90 83       	st	Z, r25
    10e8:	07 c0       	rjmp	.+14     	; 0x10f8 <LCD0_write+0x156>
    10ea:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <lcd0_PORT>
    10ee:	f0 91 da 01 	lds	r31, 0x01DA	; 0x8001da <lcd0_PORT+0x1>
    10f2:	90 81       	ld	r25, Z
    10f4:	9f 7d       	andi	r25, 0xDF	; 223
    10f6:	90 83       	st	Z, r25
    10f8:	80 ff       	sbrs	r24, 0
    10fa:	08 c0       	rjmp	.+16     	; 0x110c <__stack+0xd>
    10fc:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <lcd0_PORT>
    1100:	f0 91 da 01 	lds	r31, 0x01DA	; 0x8001da <lcd0_PORT+0x1>
    1104:	80 81       	ld	r24, Z
    1106:	80 61       	ori	r24, 0x10	; 16
    1108:	80 83       	st	Z, r24
    110a:	07 c0       	rjmp	.+14     	; 0x111a <__stack+0x1b>
    110c:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <lcd0_PORT>
    1110:	f0 91 da 01 	lds	r31, 0x01DA	; 0x8001da <lcd0_PORT+0x1>
    1114:	80 81       	ld	r24, Z
    1116:	8f 7e       	andi	r24, 0xEF	; 239
    1118:	80 83       	st	Z, r24
    111a:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <lcd0_PORT>
    111e:	f0 91 da 01 	lds	r31, 0x01DA	; 0x8001da <lcd0_PORT+0x1>
    1122:	80 81       	ld	r24, Z
    1124:	8b 7f       	andi	r24, 0xFB	; 251
    1126:	80 83       	st	Z, r24
    1128:	08 95       	ret

0000112a <LCD0_read>:
    112a:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <lcd0_DDR>
    112e:	f0 91 d7 01 	lds	r31, 0x01D7	; 0x8001d7 <lcd0_DDR+0x1>
    1132:	20 81       	ld	r18, Z
    1134:	2f 70       	andi	r18, 0x0F	; 15
    1136:	20 83       	st	Z, r18
    1138:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <lcd0_PORT>
    113c:	f0 91 da 01 	lds	r31, 0x01DA	; 0x8001da <lcd0_PORT+0x1>
    1140:	20 81       	ld	r18, Z
    1142:	20 6f       	ori	r18, 0xF0	; 240
    1144:	20 83       	st	Z, r18
    1146:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <lcd0_PORT>
    114a:	f0 91 da 01 	lds	r31, 0x01DA	; 0x8001da <lcd0_PORT+0x1>
    114e:	20 81       	ld	r18, Z
    1150:	22 60       	ori	r18, 0x02	; 2
    1152:	20 83       	st	Z, r18
    1154:	89 2b       	or	r24, r25
    1156:	41 f0       	breq	.+16     	; 0x1168 <LCD0_read+0x3e>
    1158:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <lcd0_PORT>
    115c:	f0 91 da 01 	lds	r31, 0x01DA	; 0x8001da <lcd0_PORT+0x1>
    1160:	80 81       	ld	r24, Z
    1162:	81 60       	ori	r24, 0x01	; 1
    1164:	80 83       	st	Z, r24
    1166:	07 c0       	rjmp	.+14     	; 0x1176 <LCD0_read+0x4c>
    1168:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <lcd0_PORT>
    116c:	f0 91 da 01 	lds	r31, 0x01DA	; 0x8001da <lcd0_PORT+0x1>
    1170:	80 81       	ld	r24, Z
    1172:	8e 7f       	andi	r24, 0xFE	; 254
    1174:	80 83       	st	Z, r24
    1176:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <lcd0_PORT>
    117a:	f0 91 da 01 	lds	r31, 0x01DA	; 0x8001da <lcd0_PORT+0x1>
    117e:	80 81       	ld	r24, Z
    1180:	84 60       	ori	r24, 0x04	; 4
    1182:	80 83       	st	Z, r24
    1184:	e0 91 cf 01 	lds	r30, 0x01CF	; 0x8001cf <lcd0_PIN>
    1188:	f0 91 d0 01 	lds	r31, 0x01D0	; 0x8001d0 <lcd0_PIN+0x1>
    118c:	80 81       	ld	r24, Z
    118e:	88 23       	and	r24, r24
    1190:	14 f0       	brlt	.+4      	; 0x1196 <LCD0_read+0x6c>
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	01 c0       	rjmp	.+2      	; 0x1198 <LCD0_read+0x6e>
    1196:	80 e8       	ldi	r24, 0x80	; 128
    1198:	90 81       	ld	r25, Z
    119a:	96 ff       	sbrs	r25, 6
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <LCD0_read+0x78>
    119e:	80 64       	ori	r24, 0x40	; 64
    11a0:	01 c0       	rjmp	.+2      	; 0x11a4 <LCD0_read+0x7a>
    11a2:	8f 7b       	andi	r24, 0xBF	; 191
    11a4:	90 81       	ld	r25, Z
    11a6:	95 ff       	sbrs	r25, 5
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <LCD0_read+0x84>
    11aa:	80 62       	ori	r24, 0x20	; 32
    11ac:	01 c0       	rjmp	.+2      	; 0x11b0 <LCD0_read+0x86>
    11ae:	8f 7d       	andi	r24, 0xDF	; 223
    11b0:	90 81       	ld	r25, Z
    11b2:	94 ff       	sbrs	r25, 4
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <LCD0_read+0x90>
    11b6:	80 61       	ori	r24, 0x10	; 16
    11b8:	01 c0       	rjmp	.+2      	; 0x11bc <LCD0_read+0x92>
    11ba:	8f 7e       	andi	r24, 0xEF	; 239
    11bc:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <lcd0_PORT>
    11c0:	f0 91 da 01 	lds	r31, 0x01DA	; 0x8001da <lcd0_PORT+0x1>
    11c4:	90 81       	ld	r25, Z
    11c6:	9b 7f       	andi	r25, 0xFB	; 251
    11c8:	90 83       	st	Z, r25
    11ca:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <lcd0_PORT>
    11ce:	f0 91 da 01 	lds	r31, 0x01DA	; 0x8001da <lcd0_PORT+0x1>
    11d2:	90 81       	ld	r25, Z
    11d4:	94 60       	ori	r25, 0x04	; 4
    11d6:	90 83       	st	Z, r25
    11d8:	e0 91 cf 01 	lds	r30, 0x01CF	; 0x8001cf <lcd0_PIN>
    11dc:	f0 91 d0 01 	lds	r31, 0x01D0	; 0x8001d0 <lcd0_PIN+0x1>
    11e0:	90 81       	ld	r25, Z
    11e2:	99 23       	and	r25, r25
    11e4:	14 f4       	brge	.+4      	; 0x11ea <LCD0_read+0xc0>
    11e6:	88 60       	ori	r24, 0x08	; 8
    11e8:	01 c0       	rjmp	.+2      	; 0x11ec <LCD0_read+0xc2>
    11ea:	87 7f       	andi	r24, 0xF7	; 247
    11ec:	90 81       	ld	r25, Z
    11ee:	96 ff       	sbrs	r25, 6
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <LCD0_read+0xcc>
    11f2:	84 60       	ori	r24, 0x04	; 4
    11f4:	01 c0       	rjmp	.+2      	; 0x11f8 <LCD0_read+0xce>
    11f6:	8b 7f       	andi	r24, 0xFB	; 251
    11f8:	90 81       	ld	r25, Z
    11fa:	95 ff       	sbrs	r25, 5
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <LCD0_read+0xd8>
    11fe:	82 60       	ori	r24, 0x02	; 2
    1200:	01 c0       	rjmp	.+2      	; 0x1204 <LCD0_read+0xda>
    1202:	8d 7f       	andi	r24, 0xFD	; 253
    1204:	90 81       	ld	r25, Z
    1206:	94 ff       	sbrs	r25, 4
    1208:	02 c0       	rjmp	.+4      	; 0x120e <LCD0_read+0xe4>
    120a:	81 60       	ori	r24, 0x01	; 1
    120c:	01 c0       	rjmp	.+2      	; 0x1210 <LCD0_read+0xe6>
    120e:	8e 7f       	andi	r24, 0xFE	; 254
    1210:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <lcd0_PORT>
    1214:	f0 91 da 01 	lds	r31, 0x01DA	; 0x8001da <lcd0_PORT+0x1>
    1218:	90 81       	ld	r25, Z
    121a:	9b 7f       	andi	r25, 0xFB	; 251
    121c:	90 83       	st	Z, r25
    121e:	08 95       	ret

00001220 <LCD0_BF>:
    1220:	cf 93       	push	r28
    1222:	df 93       	push	r29
    1224:	80 e0       	ldi	r24, 0x00	; 0
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	80 df       	rcall	.-256    	; 0x112a <LCD0_read>
    122a:	cb e0       	ldi	r28, 0x0B	; 11
    122c:	d0 e0       	ldi	r29, 0x00	; 0
    122e:	05 c0       	rjmp	.+10     	; 0x123a <LCD0_BF+0x1a>
    1230:	80 e0       	ldi	r24, 0x00	; 0
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	7a df       	rcall	.-268    	; 0x112a <LCD0_read>
    1236:	21 97       	sbiw	r28, 0x01	; 1
    1238:	11 f0       	breq	.+4      	; 0x123e <LCD0_BF+0x1e>
    123a:	88 23       	and	r24, r24
    123c:	cc f3       	brlt	.-14     	; 0x1230 <LCD0_BF+0x10>
    123e:	df 91       	pop	r29
    1240:	cf 91       	pop	r28
    1242:	08 95       	ret

00001244 <LCD0_putch>:
    1244:	61 e0       	ldi	r22, 0x01	; 1
    1246:	70 e0       	ldi	r23, 0x00	; 0
    1248:	ac de       	rcall	.-680    	; 0xfa2 <LCD0_write>
    124a:	ea cf       	rjmp	.-44     	; 0x1220 <LCD0_BF>
    124c:	08 95       	ret

0000124e <LCD0_getch>:
    124e:	cf 93       	push	r28
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	6a df       	rcall	.-300    	; 0x112a <LCD0_read>
    1256:	c8 2f       	mov	r28, r24
    1258:	e3 df       	rcall	.-58     	; 0x1220 <LCD0_BF>
    125a:	8c 2f       	mov	r24, r28
    125c:	cf 91       	pop	r28
    125e:	08 95       	ret

00001260 <LCD0_string>:
    1260:	cf 93       	push	r28
    1262:	df 93       	push	r29
    1264:	ec 01       	movw	r28, r24
    1266:	88 81       	ld	r24, Y
    1268:	88 23       	and	r24, r24
    126a:	41 f0       	breq	.+16     	; 0x127c <LCD0_string+0x1c>
    126c:	21 96       	adiw	r28, 0x01	; 1
    126e:	61 e0       	ldi	r22, 0x01	; 1
    1270:	70 e0       	ldi	r23, 0x00	; 0
    1272:	97 de       	rcall	.-722    	; 0xfa2 <LCD0_write>
    1274:	d5 df       	rcall	.-86     	; 0x1220 <LCD0_BF>
    1276:	89 91       	ld	r24, Y+
    1278:	81 11       	cpse	r24, r1
    127a:	f9 cf       	rjmp	.-14     	; 0x126e <LCD0_string+0xe>
    127c:	df 91       	pop	r29
    127e:	cf 91       	pop	r28
    1280:	08 95       	ret

00001282 <LCD0_string_size>:
    1282:	0f 93       	push	r16
    1284:	1f 93       	push	r17
    1286:	cf 93       	push	r28
    1288:	df 93       	push	r29
    128a:	fc 01       	movw	r30, r24
    128c:	d6 2f       	mov	r29, r22
    128e:	80 81       	ld	r24, Z
    1290:	88 23       	and	r24, r24
    1292:	51 f0       	breq	.+20     	; 0x12a8 <LCD0_string_size+0x26>
    1294:	8f 01       	movw	r16, r30
    1296:	0f 5f       	subi	r16, 0xFF	; 255
    1298:	1f 4f       	sbci	r17, 0xFF	; 255
    129a:	61 11       	cpse	r22, r1
    129c:	09 c0       	rjmp	.+18     	; 0x12b0 <LCD0_string_size+0x2e>
    129e:	1b c0       	rjmp	.+54     	; 0x12d6 <LCD0_string_size+0x54>
    12a0:	cf 5f       	subi	r28, 0xFF	; 255
    12a2:	dc 17       	cp	r29, r28
    12a4:	30 f4       	brcc	.+12     	; 0x12b2 <LCD0_string_size+0x30>
    12a6:	01 c0       	rjmp	.+2      	; 0x12aa <LCD0_string_size+0x28>
    12a8:	c0 e0       	ldi	r28, 0x00	; 0
    12aa:	cd 17       	cp	r28, r29
    12ac:	60 f0       	brcs	.+24     	; 0x12c6 <LCD0_string_size+0x44>
    12ae:	13 c0       	rjmp	.+38     	; 0x12d6 <LCD0_string_size+0x54>
    12b0:	c1 e0       	ldi	r28, 0x01	; 1
    12b2:	61 e0       	ldi	r22, 0x01	; 1
    12b4:	70 e0       	ldi	r23, 0x00	; 0
    12b6:	75 de       	rcall	.-790    	; 0xfa2 <LCD0_write>
    12b8:	b3 df       	rcall	.-154    	; 0x1220 <LCD0_BF>
    12ba:	f8 01       	movw	r30, r16
    12bc:	81 91       	ld	r24, Z+
    12be:	8f 01       	movw	r16, r30
    12c0:	81 11       	cpse	r24, r1
    12c2:	ee cf       	rjmp	.-36     	; 0x12a0 <LCD0_string_size+0x1e>
    12c4:	f2 cf       	rjmp	.-28     	; 0x12aa <LCD0_string_size+0x28>
    12c6:	cf 5f       	subi	r28, 0xFF	; 255
    12c8:	61 e0       	ldi	r22, 0x01	; 1
    12ca:	70 e0       	ldi	r23, 0x00	; 0
    12cc:	80 e2       	ldi	r24, 0x20	; 32
    12ce:	69 de       	rcall	.-814    	; 0xfa2 <LCD0_write>
    12d0:	a7 df       	rcall	.-178    	; 0x1220 <LCD0_BF>
    12d2:	cd 17       	cp	r28, r29
    12d4:	c0 f3       	brcs	.-16     	; 0x12c6 <LCD0_string_size+0x44>
    12d6:	df 91       	pop	r29
    12d8:	cf 91       	pop	r28
    12da:	1f 91       	pop	r17
    12dc:	0f 91       	pop	r16
    12de:	08 95       	ret

000012e0 <LCD0_hspace>:
    12e0:	cf 93       	push	r28
    12e2:	c8 2f       	mov	r28, r24
    12e4:	88 23       	and	r24, r24
    12e6:	39 f0       	breq	.+14     	; 0x12f6 <LCD0_hspace+0x16>
    12e8:	61 e0       	ldi	r22, 0x01	; 1
    12ea:	70 e0       	ldi	r23, 0x00	; 0
    12ec:	80 e2       	ldi	r24, 0x20	; 32
    12ee:	59 de       	rcall	.-846    	; 0xfa2 <LCD0_write>
    12f0:	97 df       	rcall	.-210    	; 0x1220 <LCD0_BF>
    12f2:	c1 50       	subi	r28, 0x01	; 1
    12f4:	c9 f7       	brne	.-14     	; 0x12e8 <LCD0_hspace+0x8>
    12f6:	cf 91       	pop	r28
    12f8:	08 95       	ret

000012fa <LCD0_gotoxy>:
    12fa:	26 2f       	mov	r18, r22
    12fc:	81 30       	cpi	r24, 0x01	; 1
    12fe:	91 05       	cpc	r25, r1
    1300:	71 f0       	breq	.+28     	; 0x131e <LCD0_gotoxy+0x24>
    1302:	30 f0       	brcs	.+12     	; 0x1310 <LCD0_gotoxy+0x16>
    1304:	82 30       	cpi	r24, 0x02	; 2
    1306:	91 05       	cpc	r25, r1
    1308:	89 f0       	breq	.+34     	; 0x132c <LCD0_gotoxy+0x32>
    130a:	03 97       	sbiw	r24, 0x03	; 3
    130c:	b1 f0       	breq	.+44     	; 0x133a <LCD0_gotoxy+0x40>
    130e:	08 95       	ret
    1310:	60 e0       	ldi	r22, 0x00	; 0
    1312:	70 e0       	ldi	r23, 0x00	; 0
    1314:	80 e8       	ldi	r24, 0x80	; 128
    1316:	82 0f       	add	r24, r18
    1318:	44 de       	rcall	.-888    	; 0xfa2 <LCD0_write>
    131a:	82 cf       	rjmp	.-252    	; 0x1220 <LCD0_BF>
    131c:	08 95       	ret
    131e:	60 e0       	ldi	r22, 0x00	; 0
    1320:	70 e0       	ldi	r23, 0x00	; 0
    1322:	80 ec       	ldi	r24, 0xC0	; 192
    1324:	82 0f       	add	r24, r18
    1326:	3d de       	rcall	.-902    	; 0xfa2 <LCD0_write>
    1328:	7b cf       	rjmp	.-266    	; 0x1220 <LCD0_BF>
    132a:	08 95       	ret
    132c:	60 e0       	ldi	r22, 0x00	; 0
    132e:	70 e0       	ldi	r23, 0x00	; 0
    1330:	84 e9       	ldi	r24, 0x94	; 148
    1332:	82 0f       	add	r24, r18
    1334:	36 de       	rcall	.-916    	; 0xfa2 <LCD0_write>
    1336:	74 cf       	rjmp	.-280    	; 0x1220 <LCD0_BF>
    1338:	08 95       	ret
    133a:	60 e0       	ldi	r22, 0x00	; 0
    133c:	70 e0       	ldi	r23, 0x00	; 0
    133e:	84 ed       	ldi	r24, 0xD4	; 212
    1340:	82 0f       	add	r24, r18
    1342:	2f de       	rcall	.-930    	; 0xfa2 <LCD0_write>
    1344:	6d cf       	rjmp	.-294    	; 0x1220 <LCD0_BF>
    1346:	08 95       	ret

00001348 <LCD0_clear>:
    1348:	60 e0       	ldi	r22, 0x00	; 0
    134a:	70 e0       	ldi	r23, 0x00	; 0
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	29 de       	rcall	.-942    	; 0xfa2 <LCD0_write>
    1350:	87 ee       	ldi	r24, 0xE7	; 231
    1352:	97 e1       	ldi	r25, 0x17	; 23
    1354:	01 97       	sbiw	r24, 0x01	; 1
    1356:	f1 f7       	brne	.-4      	; 0x1354 <LCD0_clear+0xc>
    1358:	00 c0       	rjmp	.+0      	; 0x135a <LCD0_clear+0x12>
    135a:	00 00       	nop
    135c:	08 95       	ret

0000135e <LCD0_inic>:
	return lcd0;
}
void LCD0_inic(void)
{
	//LCD INIC
	*lcd0_DDR=(1<<RS)|(1<<RW)|(1<<EN)|(0<<NC);
    135e:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <lcd0_DDR>
    1362:	f0 91 d7 01 	lds	r31, 0x01D7	; 0x8001d7 <lcd0_DDR+0x1>
    1366:	87 e0       	ldi	r24, 0x07	; 7
    1368:	80 83       	st	Z, r24
	*lcd0_PORT=(1<<NC);
    136a:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <lcd0_PORT>
    136e:	f0 91 da 01 	lds	r31, 0x01DA	; 0x8001da <lcd0_PORT+0x1>
    1372:	88 e0       	ldi	r24, 0x08	; 8
    1374:	80 83       	st	Z, r24
    1376:	2f ef       	ldi	r18, 0xFF	; 255
    1378:	83 ef       	ldi	r24, 0xF3	; 243
    137a:	91 e0       	ldi	r25, 0x01	; 1
    137c:	21 50       	subi	r18, 0x01	; 1
    137e:	80 40       	sbci	r24, 0x00	; 0
    1380:	90 40       	sbci	r25, 0x00	; 0
    1382:	e1 f7       	brne	.-8      	; 0x137c <LCD0_inic+0x1e>
    1384:	00 c0       	rjmp	.+0      	; 0x1386 <LCD0_inic+0x28>
    1386:	00 00       	nop
	/***INICIALIZACAO LCD**datasheet*/
	_delay_ms(40);
	LCD0_write(0x33,INST); //function set
    1388:	60 e0       	ldi	r22, 0x00	; 0
    138a:	70 e0       	ldi	r23, 0x00	; 0
    138c:	83 e3       	ldi	r24, 0x33	; 51
    138e:	09 de       	rcall	.-1006   	; 0xfa2 <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1390:	20 ed       	ldi	r18, 0xD0	; 208
    1392:	2a 95       	dec	r18
    1394:	f1 f7       	brne	.-4      	; 0x1392 <LCD0_inic+0x34>
	_delay_us(39);
	LCD0_write(0x33,INST); //function set
    1396:	60 e0       	ldi	r22, 0x00	; 0
    1398:	70 e0       	ldi	r23, 0x00	; 0
    139a:	83 e3       	ldi	r24, 0x33	; 51
    139c:	02 de       	rcall	.-1020   	; 0xfa2 <LCD0_write>
    139e:	80 ed       	ldi	r24, 0xD0	; 208
    13a0:	8a 95       	dec	r24
    13a2:	f1 f7       	brne	.-4      	; 0x13a0 <LCD0_inic+0x42>
	_delay_us(39);
	LCD0_write(0x2B,INST); //function set
    13a4:	60 e0       	ldi	r22, 0x00	; 0
    13a6:	70 e0       	ldi	r23, 0x00	; 0
    13a8:	8b e2       	ldi	r24, 0x2B	; 43
    13aa:	fb dd       	rcall	.-1034   	; 0xfa2 <LCD0_write>
    13ac:	95 ec       	ldi	r25, 0xC5	; 197
    13ae:	9a 95       	dec	r25
    13b0:	f1 f7       	brne	.-4      	; 0x13ae <LCD0_inic+0x50>
    13b2:	00 00       	nop
	_delay_us(37);
	LCD0_write(0x0C,INST);// display on/off control
    13b4:	60 e0       	ldi	r22, 0x00	; 0
    13b6:	70 e0       	ldi	r23, 0x00	; 0
    13b8:	8c e0       	ldi	r24, 0x0C	; 12
    13ba:	f3 dd       	rcall	.-1050   	; 0xfa2 <LCD0_write>
    13bc:	25 ec       	ldi	r18, 0xC5	; 197
    13be:	2a 95       	dec	r18
    13c0:	f1 f7       	brne	.-4      	; 0x13be <LCD0_inic+0x60>
	_delay_us(37);
	LCD0_write(0x01,INST);// clear display
    13c2:	00 00       	nop
    13c4:	60 e0       	ldi	r22, 0x00	; 0
    13c6:	70 e0       	ldi	r23, 0x00	; 0
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	eb dd       	rcall	.-1066   	; 0xfa2 <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13cc:	87 ee       	ldi	r24, 0xE7	; 231
    13ce:	97 e1       	ldi	r25, 0x17	; 23
    13d0:	01 97       	sbiw	r24, 0x01	; 1
    13d2:	f1 f7       	brne	.-4      	; 0x13d0 <LCD0_inic+0x72>
    13d4:	00 c0       	rjmp	.+0      	; 0x13d6 <LCD0_inic+0x78>
	_delay_ms(1.53);
	LCD0_write(0x06,INST);// entry mode set (crazy settings)
    13d6:	00 00       	nop
    13d8:	60 e0       	ldi	r22, 0x00	; 0
    13da:	70 e0       	ldi	r23, 0x00	; 0
    13dc:	86 e0       	ldi	r24, 0x06	; 6
    13de:	e1 dd       	rcall	.-1086   	; 0xfa2 <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13e0:	95 ec       	ldi	r25, 0xC5	; 197
    13e2:	9a 95       	dec	r25
    13e4:	f1 f7       	brne	.-4      	; 0x13e2 <LCD0_inic+0x84>
    13e6:	00 00       	nop
    13e8:	08 95       	ret

000013ea <LCD0enable>:
unsigned int LCD_ticks(unsigned int num);
/*
** procedure and function
*/
LCD0 LCD0enable(volatile uint8_t *ddr, volatile uint8_t *pin, volatile uint8_t *port)
{
    13ea:	1f 93       	push	r17
    13ec:	cf 93       	push	r28
    13ee:	df 93       	push	r29
    13f0:	ec 01       	movw	r28, r24
	//LOCAL VARIABLES
	uint8_t tSREG;
	tSREG=SREG;
    13f2:	1f b7       	in	r17, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    13f4:	8f b7       	in	r24, 0x3f	; 63
    13f6:	8f 77       	andi	r24, 0x7F	; 127
    13f8:	8f bf       	out	0x3f, r24	; 63
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	LCD0 lcd0;
	//import parametros
	lcd0_DDR=ddr;
    13fa:	70 93 d7 01 	sts	0x01D7, r23	; 0x8001d7 <lcd0_DDR+0x1>
    13fe:	60 93 d6 01 	sts	0x01D6, r22	; 0x8001d6 <lcd0_DDR>
	lcd0_PIN=pin;
    1402:	50 93 d0 01 	sts	0x01D0, r21	; 0x8001d0 <lcd0_PIN+0x1>
    1406:	40 93 cf 01 	sts	0x01CF, r20	; 0x8001cf <lcd0_PIN>
	lcd0_PORT=port;
    140a:	30 93 da 01 	sts	0x01DA, r19	; 0x8001da <lcd0_PORT+0x1>
    140e:	20 93 d9 01 	sts	0x01D9, r18	; 0x8001d9 <lcd0_PORT>
	//inic variables
	*lcd0_DDR=0x00;
    1412:	fb 01       	movw	r30, r22
    1414:	10 82       	st	Z, r1
	*lcd0_PORT=0xFF;
    1416:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <lcd0_PORT>
    141a:	f0 91 da 01 	lds	r31, 0x01DA	; 0x8001da <lcd0_PORT+0x1>
    141e:	8f ef       	ldi	r24, 0xFF	; 255
    1420:	80 83       	st	Z, r24
	lcd0_detect=*lcd0_PIN & (1<<NC);
    1422:	e0 91 cf 01 	lds	r30, 0x01CF	; 0x8001cf <lcd0_PIN>
    1426:	f0 91 d0 01 	lds	r31, 0x01D0	; 0x8001d0 <lcd0_PIN+0x1>
    142a:	80 81       	ld	r24, Z
    142c:	88 70       	andi	r24, 0x08	; 8
    142e:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <lcd0_detect>
	lcd0.hspace=LCD0_hspace;
	lcd0.clear=LCD0_clear;
	lcd0.gotoxy=LCD0_gotoxy;
	lcd0.reboot=LCD0_reboot;
	//LCD INIC
	LCD0_inic();
    1432:	95 df       	rcall	.-214    	; 0x135e <LCD0_inic>
	SREG=tSREG;
    1434:	1f bf       	out	0x3f, r17	; 63
	//
	return lcd0;
    1436:	81 ed       	ldi	r24, 0xD1	; 209
    1438:	97 e0       	ldi	r25, 0x07	; 7
    143a:	99 83       	std	Y+1, r25	; 0x01
    143c:	88 83       	st	Y, r24
    143e:	85 e9       	ldi	r24, 0x95	; 149
    1440:	98 e0       	ldi	r25, 0x08	; 8
    1442:	9b 83       	std	Y+3, r25	; 0x03
    1444:	8a 83       	std	Y+2, r24	; 0x02
    1446:	80 e1       	ldi	r24, 0x10	; 16
    1448:	99 e0       	ldi	r25, 0x09	; 9
    144a:	9d 83       	std	Y+5, r25	; 0x05
    144c:	8c 83       	std	Y+4, r24	; 0x04
    144e:	82 e2       	ldi	r24, 0x22	; 34
    1450:	99 e0       	ldi	r25, 0x09	; 9
    1452:	9f 83       	std	Y+7, r25	; 0x07
    1454:	8e 83       	std	Y+6, r24	; 0x06
    1456:	87 e2       	ldi	r24, 0x27	; 39
    1458:	99 e0       	ldi	r25, 0x09	; 9
    145a:	99 87       	std	Y+9, r25	; 0x09
    145c:	88 87       	std	Y+8, r24	; 0x08
    145e:	80 e3       	ldi	r24, 0x30	; 48
    1460:	99 e0       	ldi	r25, 0x09	; 9
    1462:	9b 87       	std	Y+11, r25	; 0x0b
    1464:	8a 87       	std	Y+10, r24	; 0x0a
    1466:	81 e4       	ldi	r24, 0x41	; 65
    1468:	99 e0       	ldi	r25, 0x09	; 9
    146a:	9d 87       	std	Y+13, r25	; 0x0d
    146c:	8c 87       	std	Y+12, r24	; 0x0c
    146e:	80 e7       	ldi	r24, 0x70	; 112
    1470:	99 e0       	ldi	r25, 0x09	; 9
    1472:	9f 87       	std	Y+15, r25	; 0x0f
    1474:	8e 87       	std	Y+14, r24	; 0x0e
    1476:	84 ea       	ldi	r24, 0xA4	; 164
    1478:	99 e0       	ldi	r25, 0x09	; 9
    147a:	99 8b       	std	Y+17, r25	; 0x11
    147c:	88 8b       	std	Y+16, r24	; 0x10
    147e:	8d e7       	ldi	r24, 0x7D	; 125
    1480:	99 e0       	ldi	r25, 0x09	; 9
    1482:	9b 8b       	std	Y+19, r25	; 0x13
    1484:	8a 8b       	std	Y+18, r24	; 0x12
    1486:	8c e4       	ldi	r24, 0x4C	; 76
    1488:	9a e0       	ldi	r25, 0x0A	; 10
    148a:	9d 8b       	std	Y+21, r25	; 0x15
    148c:	8c 8b       	std	Y+20, r24	; 0x14
}
    148e:	ce 01       	movw	r24, r28
    1490:	df 91       	pop	r29
    1492:	cf 91       	pop	r28
    1494:	1f 91       	pop	r17
    1496:	08 95       	ret

00001498 <LCD0_reboot>:
	*lcd0_PORT|=(1<<EN);
	LCD_ticks(num);
	*lcd0_PORT&=~(1<<EN);
}
void LCD0_reboot(void)
{
    1498:	cf 93       	push	r28
	//low high detect pin NC
	uint8_t i;
	uint8_t tmp;
	tmp=*lcd0_PIN & (1<<NC);
    149a:	e0 91 cf 01 	lds	r30, 0x01CF	; 0x8001cf <lcd0_PIN>
    149e:	f0 91 d0 01 	lds	r31, 0x01D0	; 0x8001d0 <lcd0_PIN+0x1>
    14a2:	c0 81       	ld	r28, Z
    14a4:	c8 70       	andi	r28, 0x08	; 8
	i=tmp^lcd0_detect;
    14a6:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <lcd0_detect>
    14aa:	8c 27       	eor	r24, r28
	i&=tmp;
	if(i)
    14ac:	8c 23       	and	r24, r28
    14ae:	09 f0       	breq	.+2      	; 0x14b2 <LCD0_reboot+0x1a>
		LCD0_inic();
    14b0:	56 df       	rcall	.-340    	; 0x135e <LCD0_inic>
	lcd0_detect=tmp;
    14b2:	c0 93 d8 01 	sts	0x01D8, r28	; 0x8001d8 <lcd0_detect>
}
    14b6:	cf 91       	pop	r28
    14b8:	08 95       	ret

000014ba <PCF8563RTC_Init>:
	I2C_Write(var_day_u8);			      // Write date on RAM address 04H
	I2C_Write(var_weekday_u8);
	I2C_Write(var_month_u8);			  // Write month on RAM address 05H
	I2C_Write(var_year_u8);			      // Write year on RAM address 06h
	I2C_Stop();				              // Stop I2C communication after Setting the Date
}
    14ba:	d7 dc       	rcall	.-1618   	; 0xe6a <I2C_Init>
    14bc:	15 dd       	rcall	.-1494   	; 0xee8 <I2C_Start>
    14be:	82 ea       	ldi	r24, 0xA2	; 162
    14c0:	36 dd       	rcall	.-1428   	; 0xf2e <I2C_Write>
    14c2:	80 e0       	ldi	r24, 0x00	; 0
    14c4:	34 dd       	rcall	.-1432   	; 0xf2e <I2C_Write>
    14c6:	80 e0       	ldi	r24, 0x00	; 0
    14c8:	32 dd       	rcall	.-1436   	; 0xf2e <I2C_Write>
    14ca:	27 cd       	rjmp	.-1458   	; 0xf1a <I2C_Stop>
    14cc:	08 95       	ret

000014ce <PCF8563RTC_SetClkOut>:
    14ce:	cf 93       	push	r28
    14d0:	88 23       	and	r24, r24
    14d2:	21 f0       	breq	.+8      	; 0x14dc <PCF8563RTC_SetClkOut+0xe>
    14d4:	63 70       	andi	r22, 0x03	; 3
    14d6:	c6 2f       	mov	r28, r22
    14d8:	c0 68       	ori	r28, 0x80	; 128
    14da:	01 c0       	rjmp	.+2      	; 0x14de <PCF8563RTC_SetClkOut+0x10>
    14dc:	c0 e0       	ldi	r28, 0x00	; 0
    14de:	04 dd       	rcall	.-1528   	; 0xee8 <I2C_Start>
    14e0:	82 ea       	ldi	r24, 0xA2	; 162
    14e2:	25 dd       	rcall	.-1462   	; 0xf2e <I2C_Write>
    14e4:	8d e0       	ldi	r24, 0x0D	; 13
    14e6:	23 dd       	rcall	.-1466   	; 0xf2e <I2C_Write>
    14e8:	8c 2f       	mov	r24, r28
    14ea:	21 dd       	rcall	.-1470   	; 0xf2e <I2C_Write>
    14ec:	16 dd       	rcall	.-1492   	; 0xf1a <I2C_Stop>
    14ee:	cf 91       	pop	r28
    14f0:	08 95       	ret

000014f2 <PCF8563RTC_GetTime>:

	Note: The time read from PCF8563 will be of BCD format, 
	      like 0x12,0x39,0x26 for 12hr,39min and 26sec.	
***************************************************************************************************/
struct time PCF8563RTC_GetTime(void)
{
    14f2:	1f 93       	push	r17
    14f4:	cf 93       	push	r28
    14f6:	df 93       	push	r29
	struct time result;
	I2C_Start();							// Start I2C communication
    14f8:	f7 dc       	rcall	.-1554   	; 0xee8 <I2C_Start>
	I2C_Write(PCF8563WriteMode_U8);			// connect to PCF8563 by sending its ID on I2c Bus
    14fa:	82 ea       	ldi	r24, 0xA2	; 162
    14fc:	18 dd       	rcall	.-1488   	; 0xf2e <I2C_Write>
	I2C_Write(PCF8563SecondRegAddress_U8);	// Request Sec RAM address at 00H
    14fe:	82 e0       	ldi	r24, 0x02	; 2
	I2C_Stop();								// Stop I2C communication after selecting Sec Register
    1500:	16 dd       	rcall	.-1492   	; 0xf2e <I2C_Write>
	I2C_Start();							// Start I2C communication
    1502:	0b dd       	rcall	.-1514   	; 0xf1a <I2C_Stop>
	I2C_Write(PCF8563ReadMode_U8);			// connect to PCF8563(Read mode) by sending its ID
    1504:	f1 dc       	rcall	.-1566   	; 0xee8 <I2C_Start>
    1506:	83 ea       	ldi	r24, 0xA3	; 163
	result.VL_seconds = I2C_Read(1) & ~0x80;		// read second and return Positive ACK
    1508:	12 dd       	rcall	.-1500   	; 0xf2e <I2C_Write>
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	2b dd       	rcall	.-1450   	; 0xf64 <I2C_Read>
	result.minutes = I2C_Read(1) & ~0x80;			// read minute and return Positive ACK
    150e:	18 2f       	mov	r17, r24
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	28 dd       	rcall	.-1456   	; 0xf64 <I2C_Read>
    1514:	c8 2f       	mov	r28, r24
	result.hours = I2C_Read(0) & ~0xC0;				// read hour and return Negative/No ACK
    1516:	80 e0       	ldi	r24, 0x00	; 0
    1518:	25 dd       	rcall	.-1462   	; 0xf64 <I2C_Read>
    151a:	d8 2f       	mov	r29, r24
    151c:	fe dc       	rcall	.-1540   	; 0xf1a <I2C_Stop>
	//dump = I2C_Read(0);					// dump last to ensure prior ok
	I2C_Stop();								// Stop I2C communication after reading the Time
    151e:	6d 2f       	mov	r22, r29
    1520:	6f 73       	andi	r22, 0x3F	; 63
	return result;
    1522:	7c 2f       	mov	r23, r28
    1524:	7f 77       	andi	r23, 0x7F	; 127
    1526:	81 2f       	mov	r24, r17
    1528:	8f 77       	andi	r24, 0x7F	; 127
}
    152a:	df 91       	pop	r29
    152c:	cf 91       	pop	r28
    152e:	1f 91       	pop	r17
    1530:	08 95       	ret

00001532 <PCF8563RTC_GetDate>:
    1532:	0f 93       	push	r16
    1534:	1f 93       	push	r17

	Note: The date read from PCF8563 will be of BCD format, 
	      like 0x15,0x08,0x47 for 15th day,8th month and 47th year.  
***************************************************************************************************/
struct date PCF8563RTC_GetDate(void)
{
    1536:	cf 93       	push	r28
    1538:	df 93       	push	r29
	struct date result;
	I2C_Start();							// Start I2C communication
    153a:	d6 dc       	rcall	.-1620   	; 0xee8 <I2C_Start>
	I2C_Write(PCF8563WriteMode_U8);			// connect to PCF8563 by sending its ID on I2c Bus
    153c:	82 ea       	ldi	r24, 0xA2	; 162
    153e:	f7 dc       	rcall	.-1554   	; 0xf2e <I2C_Write>
	I2C_Write(PCF8563DateRegAddress_U8);	// Request DAY RAM address at 04H
    1540:	85 e0       	ldi	r24, 0x05	; 5
	I2C_Stop();								// Stop I2C communication after selecting DAY Register
    1542:	f5 dc       	rcall	.-1558   	; 0xf2e <I2C_Write>
	I2C_Start();							// Start I2C communication
    1544:	ea dc       	rcall	.-1580   	; 0xf1a <I2C_Stop>
	I2C_Write(PCF8563ReadMode_U8);			// connect to PCF8563 (Read mode) by sending its ID
    1546:	d0 dc       	rcall	.-1632   	; 0xee8 <I2C_Start>
    1548:	83 ea       	ldi	r24, 0xA3	; 163
	result.days = I2C_Read(1) & ~0xC0;				// read Day and return Positive ACK
    154a:	f1 dc       	rcall	.-1566   	; 0xf2e <I2C_Write>
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	0a dd       	rcall	.-1516   	; 0xf64 <I2C_Read>
	result.weekdays = I2C_Read(1) & ~0xF8;			// read Month and return Positive ACK
    1550:	d8 2f       	mov	r29, r24
    1552:	81 e0       	ldi	r24, 0x01	; 1
	result.century_months = I2C_Read(1) & ~0xE0;
    1554:	07 dd       	rcall	.-1522   	; 0xf64 <I2C_Read>
    1556:	18 2f       	mov	r17, r24
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	04 dd       	rcall	.-1528   	; 0xf64 <I2C_Read>
	result.years = I2C_Read(0);				// read Year and return Negative/No ACK
    155c:	c8 2f       	mov	r28, r24
    155e:	80 e0       	ldi	r24, 0x00	; 0
    1560:	01 dd       	rcall	.-1534   	; 0xf64 <I2C_Read>
    1562:	08 2f       	mov	r16, r24
	//dump = I2C_Read(0);
	I2C_Stop();								// Stop I2C communication after reading the Date
    1564:	da dc       	rcall	.-1612   	; 0xf1a <I2C_Stop>
    1566:	7c 2f       	mov	r23, r28
	return result;
    1568:	7f 71       	andi	r23, 0x1F	; 31
    156a:	60 2f       	mov	r22, r16
}
    156c:	81 2f       	mov	r24, r17
    156e:	87 70       	andi	r24, 0x07	; 7
    1570:	9d 2f       	mov	r25, r29
    1572:	9f 73       	andi	r25, 0x3F	; 63
    1574:	df 91       	pop	r29
    1576:	cf 91       	pop	r28
    1578:	1f 91       	pop	r17
    157a:	0f 91       	pop	r16
    157c:	08 95       	ret

0000157e <PCF8563RTC_bcd2dec>:
    157e:	98 2f       	mov	r25, r24
 * Return value	: uint8_t
 * description  : bcd to dec
***************************************************************************************************/
uint8_t PCF8563RTC_bcd2dec(uint8_t num)
{
	return ((num/16 * 10) + (num % 16));
    1580:	92 95       	swap	r25
    1582:	9f 70       	andi	r25, 0x0F	; 15
    1584:	99 0f       	add	r25, r25
    1586:	29 2f       	mov	r18, r25
    1588:	22 0f       	add	r18, r18
    158a:	22 0f       	add	r18, r18
    158c:	92 0f       	add	r25, r18
    158e:	8f 70       	andi	r24, 0x0F	; 15
}
    1590:	89 0f       	add	r24, r25
    1592:	08 95       	ret

00001594 <main>:
/***Global Variable***/
struct time tmp;
struct date dt;
/***MAIN_MAIN***/
int main(void)
{
    1594:	cf 93       	push	r28
    1596:	df 93       	push	r29
    1598:	cd b7       	in	r28, 0x3d	; 61
    159a:	de b7       	in	r29, 0x3e	; 62
    159c:	c0 56       	subi	r28, 0x60	; 96
    159e:	d1 09       	sbc	r29, r1
    15a0:	0f b6       	in	r0, 0x3f	; 63
    15a2:	f8 94       	cli
    15a4:	de bf       	out	0x3e, r29	; 62
    15a6:	0f be       	out	0x3f, r0	; 63
    15a8:	cd bf       	out	0x3d, r28	; 61
	LCD0 lcd = LCD0enable(&DDRA,&PINA,&PORTA);
    15aa:	2b e3       	ldi	r18, 0x3B	; 59
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	49 e3       	ldi	r20, 0x39	; 57
    15b0:	50 e0       	ldi	r21, 0x00	; 0
    15b2:	6a e3       	ldi	r22, 0x3A	; 58
    15b4:	70 e0       	ldi	r23, 0x00	; 0
    15b6:	ce 01       	movw	r24, r28
    15b8:	01 96       	adiw	r24, 0x01	; 1
    15ba:	17 df       	rcall	.-466    	; 0x13ea <LCD0enable>
    15bc:	af 80       	ldd	r10, Y+7	; 0x07
    15be:	b8 84       	ldd	r11, Y+8	; 0x08
    15c0:	0d 85       	ldd	r16, Y+13	; 0x0d
    15c2:	1e 85       	ldd	r17, Y+14	; 0x0e
    15c4:	8b 88       	ldd	r8, Y+19	; 0x13
    15c6:	9c 88       	ldd	r9, Y+20	; 0x14
	FUNC func = FUNCenable();
    15c8:	ce 01       	movw	r24, r28
    15ca:	47 96       	adiw	r24, 0x17	; 23
    15cc:	a7 db       	rcall	.-2226   	; 0xd1c <FUNCenable>
    15ce:	e9 ac       	ldd	r14, Y+57	; 0x39
    15d0:	fa ac       	ldd	r15, Y+58	; 0x3a
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    15d2:	2f ef       	ldi	r18, 0xFF	; 255
    15d4:	81 ee       	ldi	r24, 0xE1	; 225
    15d6:	94 e0       	ldi	r25, 0x04	; 4
    15d8:	21 50       	subi	r18, 0x01	; 1
    15da:	80 40       	sbci	r24, 0x00	; 0
    15dc:	90 40       	sbci	r25, 0x00	; 0
    15de:	e1 f7       	brne	.-8      	; 0x15d8 <main+0x44>
    15e0:	00 c0       	rjmp	.+0      	; 0x15e2 <main+0x4e>
	_delay_ms(100);
    PCF8563RTC_Init(64);
    15e2:	00 00       	nop
    15e4:	80 e4       	ldi	r24, 0x40	; 64
    //PCF8563RTC_SetTime(0x23,0x50,0x00);  //  10:59:20 am
    //PCF8563RTC_SetDate(0x10,0x00,0x10,0x19);
	PCF8563RTC_SetClkOut(1, 2);
    15e6:	69 df       	rcall	.-302    	; 0x14ba <PCF8563RTC_Init>
    15e8:	62 e0       	ldi	r22, 0x02	; 2
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	70 df       	rcall	.-288    	; 0x14ce <PCF8563RTC_SetClkOut>
		
		/* Read the Time from RTC(PCF8563) */ 
		tmp=PCF8563RTC_GetTime();
		
		lcd.gotoxy(1,0);
		lcd.string_size(func.ui16toa(PCF8563RTC_bcd2dec(tmp.hours)),2);
    15ee:	0f 2e       	mov	r0, r31
    15f0:	fd ed       	ldi	r31, 0xDD	; 221
    15f2:	cf 2e       	mov	r12, r31
    15f4:	f1 e0       	ldi	r31, 0x01	; 1
    15f6:	df 2e       	mov	r13, r31
    15f8:	f0 2d       	mov	r31, r0
		lcd.hspace(7);
		lcd.string_size(func.ui16toa(tmp.VL_seconds),2);
		
		dt=PCF8563RTC_GetDate();
		lcd.gotoxy(2,0);
		lcd.string_size(func.ui16toa(PCF8563RTC_bcd2dec(dt.days)),2);
    15fa:	0f 2e       	mov	r0, r31
    15fc:	f0 ee       	ldi	r31, 0xE0	; 224
    15fe:	6f 2e       	mov	r6, r31
    1600:	f1 e0       	ldi	r31, 0x01	; 1
    1602:	7f 2e       	mov	r7, r31
    1604:	f0 2d       	mov	r31, r0
    //PCF8563RTC_SetDate(0x10,0x00,0x10,0x19);
	PCF8563RTC_SetClkOut(1, 2);
	/* Replace with your application code */
	while (1)
    {
		lcd.reboot();
    1606:	ed 89       	ldd	r30, Y+21	; 0x15
    1608:	fe 89       	ldd	r31, Y+22	; 0x16
    160a:	09 95       	icall
		
		lcd.gotoxy(0,0);
    160c:	60 e0       	ldi	r22, 0x00	; 0
    160e:	70 e0       	ldi	r23, 0x00	; 0
    1610:	80 e0       	ldi	r24, 0x00	; 0
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	f4 01       	movw	r30, r8
    1616:	09 95       	icall
		lcd.string_size("start",5);
    1618:	65 e0       	ldi	r22, 0x05	; 5
    161a:	80 e0       	ldi	r24, 0x00	; 0
    161c:	91 e0       	ldi	r25, 0x01	; 1
    161e:	f8 01       	movw	r30, r16
		
		/* Read the Time from RTC(PCF8563) */ 
		tmp=PCF8563RTC_GetTime();
    1620:	09 95       	icall
    1622:	67 df       	rcall	.-306    	; 0x14f2 <PCF8563RTC_GetTime>
    1624:	60 93 dd 01 	sts	0x01DD, r22	; 0x8001dd <tmp>
    1628:	70 93 de 01 	sts	0x01DE, r23	; 0x8001de <tmp+0x1>
    162c:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <tmp+0x2>
		
		lcd.gotoxy(1,0);
    1630:	60 e0       	ldi	r22, 0x00	; 0
    1632:	70 e0       	ldi	r23, 0x00	; 0
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	f4 01       	movw	r30, r8
		lcd.string_size(func.ui16toa(PCF8563RTC_bcd2dec(tmp.hours)),2);
    163a:	09 95       	icall
    163c:	f6 01       	movw	r30, r12
    163e:	80 81       	ld	r24, Z
    1640:	9e df       	rcall	.-196    	; 0x157e <PCF8563RTC_bcd2dec>
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	f7 01       	movw	r30, r14
    1646:	09 95       	icall
    1648:	62 e0       	ldi	r22, 0x02	; 2
    164a:	f8 01       	movw	r30, r16
		lcd.putch(':');
    164c:	09 95       	icall
    164e:	8a e3       	ldi	r24, 0x3A	; 58
    1650:	f5 01       	movw	r30, r10
		lcd.string_size(func.ui16toa(PCF8563RTC_bcd2dec(tmp.minutes)),2);
    1652:	09 95       	icall
    1654:	f6 01       	movw	r30, r12
    1656:	81 81       	ldd	r24, Z+1	; 0x01
    1658:	92 df       	rcall	.-220    	; 0x157e <PCF8563RTC_bcd2dec>
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	f7 01       	movw	r30, r14
    165e:	09 95       	icall
    1660:	62 e0       	ldi	r22, 0x02	; 2
    1662:	f8 01       	movw	r30, r16
		lcd.putch(':');
    1664:	09 95       	icall
    1666:	8a e3       	ldi	r24, 0x3A	; 58
    1668:	f5 01       	movw	r30, r10
		lcd.string_size(func.ui16toa(PCF8563RTC_bcd2dec(tmp.VL_seconds)),2);
    166a:	09 95       	icall
    166c:	f6 01       	movw	r30, r12
    166e:	82 81       	ldd	r24, Z+2	; 0x02
    1670:	86 df       	rcall	.-244    	; 0x157e <PCF8563RTC_bcd2dec>
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	f7 01       	movw	r30, r14
    1676:	09 95       	icall
    1678:	62 e0       	ldi	r22, 0x02	; 2
    167a:	f8 01       	movw	r30, r16
    167c:	09 95       	icall
		lcd.hspace(7);
    167e:	ef 85       	ldd	r30, Y+15	; 0x0f
    1680:	f8 89       	ldd	r31, Y+16	; 0x10
    1682:	87 e0       	ldi	r24, 0x07	; 7
    1684:	09 95       	icall
		lcd.string_size(func.ui16toa(tmp.VL_seconds),2);
    1686:	f6 01       	movw	r30, r12
    1688:	82 81       	ldd	r24, Z+2	; 0x02
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	f7 01       	movw	r30, r14
    168e:	09 95       	icall
    1690:	62 e0       	ldi	r22, 0x02	; 2
    1692:	f8 01       	movw	r30, r16
		
		dt=PCF8563RTC_GetDate();
    1694:	09 95       	icall
    1696:	4d df       	rcall	.-358    	; 0x1532 <PCF8563RTC_GetDate>
    1698:	60 93 e0 01 	sts	0x01E0, r22	; 0x8001e0 <dt>
    169c:	70 93 e1 01 	sts	0x01E1, r23	; 0x8001e1 <dt+0x1>
    16a0:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <dt+0x2>
    16a4:	90 93 e3 01 	sts	0x01E3, r25	; 0x8001e3 <dt+0x3>
		lcd.gotoxy(2,0);
    16a8:	60 e0       	ldi	r22, 0x00	; 0
    16aa:	70 e0       	ldi	r23, 0x00	; 0
    16ac:	82 e0       	ldi	r24, 0x02	; 2
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	f4 01       	movw	r30, r8
		lcd.string_size(func.ui16toa(PCF8563RTC_bcd2dec(dt.days)),2);
    16b2:	09 95       	icall
    16b4:	f3 01       	movw	r30, r6
    16b6:	83 81       	ldd	r24, Z+3	; 0x03
    16b8:	62 df       	rcall	.-316    	; 0x157e <PCF8563RTC_bcd2dec>
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	f7 01       	movw	r30, r14
    16be:	09 95       	icall
    16c0:	62 e0       	ldi	r22, 0x02	; 2
    16c2:	f8 01       	movw	r30, r16
		//lcd.putch(':');
		//lcd.string_size(func.ui16toa(PCF8563RTC_bcd2dec(dt.weekdays & ~0xF8)),2);
		lcd.putch(':');
    16c4:	09 95       	icall
    16c6:	8a e3       	ldi	r24, 0x3A	; 58
    16c8:	f5 01       	movw	r30, r10
		lcd.string_size(func.ui16toa(PCF8563RTC_bcd2dec(dt.century_months & ~0xE0)),2);
    16ca:	09 95       	icall
    16cc:	f3 01       	movw	r30, r6
    16ce:	81 81       	ldd	r24, Z+1	; 0x01
    16d0:	8f 71       	andi	r24, 0x1F	; 31
    16d2:	55 df       	rcall	.-342    	; 0x157e <PCF8563RTC_bcd2dec>
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	f7 01       	movw	r30, r14
    16d8:	09 95       	icall
    16da:	62 e0       	ldi	r22, 0x02	; 2
    16dc:	f8 01       	movw	r30, r16
		lcd.putch(':');
    16de:	09 95       	icall
    16e0:	8a e3       	ldi	r24, 0x3A	; 58
    16e2:	f5 01       	movw	r30, r10
		lcd.string_size(func.ui16toa(PCF8563RTC_bcd2dec(dt.years)),2);
    16e4:	09 95       	icall
    16e6:	f3 01       	movw	r30, r6
    16e8:	80 81       	ld	r24, Z
    16ea:	49 df       	rcall	.-366    	; 0x157e <PCF8563RTC_bcd2dec>
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	f7 01       	movw	r30, r14
    16f0:	09 95       	icall
    16f2:	62 e0       	ldi	r22, 0x02	; 2
    16f4:	f8 01       	movw	r30, r16
    16f6:	09 95       	icall
    16f8:	86 cf       	rjmp	.-244    	; 0x1606 <main+0x72>

000016fa <__mulsi3>:
    16fa:	db 01       	movw	r26, r22
    16fc:	8f 93       	push	r24
    16fe:	9f 93       	push	r25
    1700:	7f d0       	rcall	.+254    	; 0x1800 <__muluhisi3>
    1702:	bf 91       	pop	r27
    1704:	af 91       	pop	r26
    1706:	a2 9f       	mul	r26, r18
    1708:	80 0d       	add	r24, r0
    170a:	91 1d       	adc	r25, r1
    170c:	a3 9f       	mul	r26, r19
    170e:	90 0d       	add	r25, r0
    1710:	b2 9f       	mul	r27, r18
    1712:	90 0d       	add	r25, r0
    1714:	11 24       	eor	r1, r1
    1716:	08 95       	ret

00001718 <__udivmodhi4>:
    1718:	aa 1b       	sub	r26, r26
    171a:	bb 1b       	sub	r27, r27
    171c:	51 e1       	ldi	r21, 0x11	; 17
    171e:	07 c0       	rjmp	.+14     	; 0x172e <__udivmodhi4_ep>

00001720 <__udivmodhi4_loop>:
    1720:	aa 1f       	adc	r26, r26
    1722:	bb 1f       	adc	r27, r27
    1724:	a6 17       	cp	r26, r22
    1726:	b7 07       	cpc	r27, r23
    1728:	10 f0       	brcs	.+4      	; 0x172e <__udivmodhi4_ep>
    172a:	a6 1b       	sub	r26, r22
    172c:	b7 0b       	sbc	r27, r23

0000172e <__udivmodhi4_ep>:
    172e:	88 1f       	adc	r24, r24
    1730:	99 1f       	adc	r25, r25
    1732:	5a 95       	dec	r21
    1734:	a9 f7       	brne	.-22     	; 0x1720 <__udivmodhi4_loop>
    1736:	80 95       	com	r24
    1738:	90 95       	com	r25
    173a:	bc 01       	movw	r22, r24
    173c:	cd 01       	movw	r24, r26
    173e:	08 95       	ret

00001740 <__divmodhi4>:
    1740:	97 fb       	bst	r25, 7
    1742:	07 2e       	mov	r0, r23
    1744:	16 f4       	brtc	.+4      	; 0x174a <__divmodhi4+0xa>
    1746:	00 94       	com	r0
    1748:	06 d0       	rcall	.+12     	; 0x1756 <__divmodhi4_neg1>
    174a:	77 fd       	sbrc	r23, 7
    174c:	08 d0       	rcall	.+16     	; 0x175e <__divmodhi4_neg2>
    174e:	e4 df       	rcall	.-56     	; 0x1718 <__udivmodhi4>
    1750:	07 fc       	sbrc	r0, 7
    1752:	05 d0       	rcall	.+10     	; 0x175e <__divmodhi4_neg2>
    1754:	3e f4       	brtc	.+14     	; 0x1764 <__divmodhi4_exit>

00001756 <__divmodhi4_neg1>:
    1756:	90 95       	com	r25
    1758:	81 95       	neg	r24
    175a:	9f 4f       	sbci	r25, 0xFF	; 255
    175c:	08 95       	ret

0000175e <__divmodhi4_neg2>:
    175e:	70 95       	com	r23
    1760:	61 95       	neg	r22
    1762:	7f 4f       	sbci	r23, 0xFF	; 255

00001764 <__divmodhi4_exit>:
    1764:	08 95       	ret

00001766 <__udivmodsi4>:
    1766:	a1 e2       	ldi	r26, 0x21	; 33
    1768:	1a 2e       	mov	r1, r26
    176a:	aa 1b       	sub	r26, r26
    176c:	bb 1b       	sub	r27, r27
    176e:	fd 01       	movw	r30, r26
    1770:	0d c0       	rjmp	.+26     	; 0x178c <__udivmodsi4_ep>

00001772 <__udivmodsi4_loop>:
    1772:	aa 1f       	adc	r26, r26
    1774:	bb 1f       	adc	r27, r27
    1776:	ee 1f       	adc	r30, r30
    1778:	ff 1f       	adc	r31, r31
    177a:	a2 17       	cp	r26, r18
    177c:	b3 07       	cpc	r27, r19
    177e:	e4 07       	cpc	r30, r20
    1780:	f5 07       	cpc	r31, r21
    1782:	20 f0       	brcs	.+8      	; 0x178c <__udivmodsi4_ep>
    1784:	a2 1b       	sub	r26, r18
    1786:	b3 0b       	sbc	r27, r19
    1788:	e4 0b       	sbc	r30, r20
    178a:	f5 0b       	sbc	r31, r21

0000178c <__udivmodsi4_ep>:
    178c:	66 1f       	adc	r22, r22
    178e:	77 1f       	adc	r23, r23
    1790:	88 1f       	adc	r24, r24
    1792:	99 1f       	adc	r25, r25
    1794:	1a 94       	dec	r1
    1796:	69 f7       	brne	.-38     	; 0x1772 <__udivmodsi4_loop>
    1798:	60 95       	com	r22
    179a:	70 95       	com	r23
    179c:	80 95       	com	r24
    179e:	90 95       	com	r25
    17a0:	9b 01       	movw	r18, r22
    17a2:	ac 01       	movw	r20, r24
    17a4:	bd 01       	movw	r22, r26
    17a6:	cf 01       	movw	r24, r30
    17a8:	08 95       	ret

000017aa <__divmodsi4>:
    17aa:	05 2e       	mov	r0, r21
    17ac:	97 fb       	bst	r25, 7
    17ae:	16 f4       	brtc	.+4      	; 0x17b4 <__divmodsi4+0xa>
    17b0:	00 94       	com	r0
    17b2:	0f d0       	rcall	.+30     	; 0x17d2 <__negsi2>
    17b4:	57 fd       	sbrc	r21, 7
    17b6:	05 d0       	rcall	.+10     	; 0x17c2 <__divmodsi4_neg2>
    17b8:	d6 df       	rcall	.-84     	; 0x1766 <__udivmodsi4>
    17ba:	07 fc       	sbrc	r0, 7
    17bc:	02 d0       	rcall	.+4      	; 0x17c2 <__divmodsi4_neg2>
    17be:	46 f4       	brtc	.+16     	; 0x17d0 <__divmodsi4_exit>
    17c0:	08 c0       	rjmp	.+16     	; 0x17d2 <__negsi2>

000017c2 <__divmodsi4_neg2>:
    17c2:	50 95       	com	r21
    17c4:	40 95       	com	r20
    17c6:	30 95       	com	r19
    17c8:	21 95       	neg	r18
    17ca:	3f 4f       	sbci	r19, 0xFF	; 255
    17cc:	4f 4f       	sbci	r20, 0xFF	; 255
    17ce:	5f 4f       	sbci	r21, 0xFF	; 255

000017d0 <__divmodsi4_exit>:
    17d0:	08 95       	ret

000017d2 <__negsi2>:
    17d2:	90 95       	com	r25
    17d4:	80 95       	com	r24
    17d6:	70 95       	com	r23
    17d8:	61 95       	neg	r22
    17da:	7f 4f       	sbci	r23, 0xFF	; 255
    17dc:	8f 4f       	sbci	r24, 0xFF	; 255
    17de:	9f 4f       	sbci	r25, 0xFF	; 255
    17e0:	08 95       	ret

000017e2 <__umulhisi3>:
    17e2:	a2 9f       	mul	r26, r18
    17e4:	b0 01       	movw	r22, r0
    17e6:	b3 9f       	mul	r27, r19
    17e8:	c0 01       	movw	r24, r0
    17ea:	a3 9f       	mul	r26, r19
    17ec:	70 0d       	add	r23, r0
    17ee:	81 1d       	adc	r24, r1
    17f0:	11 24       	eor	r1, r1
    17f2:	91 1d       	adc	r25, r1
    17f4:	b2 9f       	mul	r27, r18
    17f6:	70 0d       	add	r23, r0
    17f8:	81 1d       	adc	r24, r1
    17fa:	11 24       	eor	r1, r1
    17fc:	91 1d       	adc	r25, r1
    17fe:	08 95       	ret

00001800 <__muluhisi3>:
    1800:	f0 df       	rcall	.-32     	; 0x17e2 <__umulhisi3>
    1802:	a5 9f       	mul	r26, r21
    1804:	90 0d       	add	r25, r0
    1806:	b4 9f       	mul	r27, r20
    1808:	90 0d       	add	r25, r0
    180a:	a4 9f       	mul	r26, r20
    180c:	80 0d       	add	r24, r0
    180e:	91 1d       	adc	r25, r1
    1810:	11 24       	eor	r1, r1
    1812:	08 95       	ret

00001814 <_exit>:
    1814:	f8 94       	cli

00001816 <__stop_program>:
    1816:	ff cf       	rjmp	.-2      	; 0x1816 <__stop_program>
