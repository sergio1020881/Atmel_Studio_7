
Atmega128.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ca  00800100  000027fc  00002890  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000027fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010a  008001ca  008001ca  0000295a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000295a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000298c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000728  00000000  00000000  000029c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007bda  00000000  00000000  000030f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001870  00000000  00000000  0000acca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000483f  00000000  00000000  0000c53a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001024  00000000  00000000  00010d7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001412  00000000  00000000  00011da0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006294  00000000  00000000  000131b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000588  00000000  00000000  00019446  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7a c0       	rjmp	.+244    	; 0xf6 <__ctors_end>
       2:	00 00       	nop
       4:	97 c0       	rjmp	.+302    	; 0x134 <__bad_interrupt>
       6:	00 00       	nop
       8:	95 c0       	rjmp	.+298    	; 0x134 <__bad_interrupt>
       a:	00 00       	nop
       c:	93 c0       	rjmp	.+294    	; 0x134 <__bad_interrupt>
       e:	00 00       	nop
      10:	91 c0       	rjmp	.+290    	; 0x134 <__bad_interrupt>
      12:	00 00       	nop
      14:	8f c0       	rjmp	.+286    	; 0x134 <__bad_interrupt>
      16:	00 00       	nop
      18:	8d c0       	rjmp	.+282    	; 0x134 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	8b c0       	rjmp	.+278    	; 0x134 <__bad_interrupt>
      1e:	00 00       	nop
      20:	89 c0       	rjmp	.+274    	; 0x134 <__bad_interrupt>
      22:	00 00       	nop
      24:	87 c0       	rjmp	.+270    	; 0x134 <__bad_interrupt>
      26:	00 00       	nop
      28:	85 c0       	rjmp	.+266    	; 0x134 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	83 c0       	rjmp	.+262    	; 0x134 <__bad_interrupt>
      2e:	00 00       	nop
      30:	81 c0       	rjmp	.+258    	; 0x134 <__bad_interrupt>
      32:	00 00       	nop
      34:	7f c0       	rjmp	.+254    	; 0x134 <__bad_interrupt>
      36:	00 00       	nop
      38:	7d c0       	rjmp	.+250    	; 0x134 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	7b c0       	rjmp	.+246    	; 0x134 <__bad_interrupt>
      3e:	00 00       	nop
      40:	79 c0       	rjmp	.+242    	; 0x134 <__bad_interrupt>
      42:	00 00       	nop
      44:	77 c0       	rjmp	.+238    	; 0x134 <__bad_interrupt>
      46:	00 00       	nop
      48:	fb c0       	rjmp	.+502    	; 0x240 <__vector_18>
      4a:	00 00       	nop
      4c:	31 c1       	rjmp	.+610    	; 0x2b0 <__vector_19>
      4e:	00 00       	nop
      50:	71 c0       	rjmp	.+226    	; 0x134 <__bad_interrupt>
      52:	00 00       	nop
      54:	70 c0       	rjmp	.+224    	; 0x136 <__vector_21>
      56:	00 00       	nop
      58:	6d c0       	rjmp	.+218    	; 0x134 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	6b c0       	rjmp	.+214    	; 0x134 <__bad_interrupt>
      5e:	00 00       	nop
      60:	69 c0       	rjmp	.+210    	; 0x134 <__bad_interrupt>
      62:	00 00       	nop
      64:	67 c0       	rjmp	.+206    	; 0x134 <__bad_interrupt>
      66:	00 00       	nop
      68:	65 c0       	rjmp	.+202    	; 0x134 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	63 c0       	rjmp	.+198    	; 0x134 <__bad_interrupt>
      6e:	00 00       	nop
      70:	61 c0       	rjmp	.+194    	; 0x134 <__bad_interrupt>
      72:	00 00       	nop
      74:	5f c0       	rjmp	.+190    	; 0x134 <__bad_interrupt>
      76:	00 00       	nop
      78:	44 c1       	rjmp	.+648    	; 0x302 <__vector_30>
      7a:	00 00       	nop
      7c:	7d c1       	rjmp	.+762    	; 0x378 <__vector_31>
      7e:	00 00       	nop
      80:	59 c0       	rjmp	.+178    	; 0x134 <__bad_interrupt>
      82:	00 00       	nop
      84:	57 c0       	rjmp	.+174    	; 0x134 <__bad_interrupt>
      86:	00 00       	nop
      88:	55 c0       	rjmp	.+170    	; 0x134 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ee 0f       	add	r30, r30
      8e:	3f 10       	cpse	r3, r15
      90:	59 10       	cpse	r5, r9
      92:	92 10       	cpse	r9, r2
      94:	cb 10       	cpse	r12, r11
      96:	04 11       	cpse	r16, r4
      98:	98 11       	cpse	r25, r8
      9a:	b3 11       	cpse	r27, r3
      9c:	19 12       	cpse	r1, r25
      9e:	34 12       	cpse	r3, r20
      a0:	74 12       	cpse	r7, r20
      a2:	80 12       	cpse	r8, r16
      a4:	8c 12       	cpse	r8, r28
      a6:	98 12       	cpse	r9, r24
      a8:	a4 12       	cpse	r10, r20
      aa:	c7 12       	cpse	r12, r23
      ac:	c7 12       	cpse	r12, r23
      ae:	c7 12       	cpse	r12, r23
      b0:	c7 12       	cpse	r12, r23
      b2:	c7 12       	cpse	r12, r23
      b4:	c7 12       	cpse	r12, r23
      b6:	c7 12       	cpse	r12, r23
      b8:	c7 12       	cpse	r12, r23
      ba:	c7 12       	cpse	r12, r23
      bc:	c7 12       	cpse	r12, r23
      be:	c7 12       	cpse	r12, r23
      c0:	c7 12       	cpse	r12, r23
      c2:	c7 12       	cpse	r12, r23
      c4:	c7 12       	cpse	r12, r23
      c6:	c7 12       	cpse	r12, r23
      c8:	c7 12       	cpse	r12, r23
      ca:	c7 12       	cpse	r12, r23
      cc:	c7 12       	cpse	r12, r23
      ce:	c7 12       	cpse	r12, r23
      d0:	c7 12       	cpse	r12, r23
      d2:	c7 12       	cpse	r12, r23
      d4:	c7 12       	cpse	r12, r23
      d6:	c7 12       	cpse	r12, r23
      d8:	c7 12       	cpse	r12, r23
      da:	c7 12       	cpse	r12, r23
      dc:	c7 12       	cpse	r12, r23
      de:	c7 12       	cpse	r12, r23
      e0:	c7 12       	cpse	r12, r23
      e2:	c7 12       	cpse	r12, r23
      e4:	c7 12       	cpse	r12, r23
      e6:	c7 12       	cpse	r12, r23
      e8:	c7 12       	cpse	r12, r23
      ea:	c7 12       	cpse	r12, r23
      ec:	c7 12       	cpse	r12, r23
      ee:	c7 12       	cpse	r12, r23
      f0:	c7 12       	cpse	r12, r23
      f2:	b0 12       	cpse	r11, r16
      f4:	bc 12       	cpse	r11, r28

000000f6 <__ctors_end>:
      f6:	11 24       	eor	r1, r1
      f8:	1f be       	out	0x3f, r1	; 63
      fa:	cf ef       	ldi	r28, 0xFF	; 255
      fc:	d0 e1       	ldi	r29, 0x10	; 16
      fe:	de bf       	out	0x3e, r29	; 62
     100:	cd bf       	out	0x3d, r28	; 61

00000102 <__do_copy_data>:
     102:	11 e0       	ldi	r17, 0x01	; 1
     104:	a0 e0       	ldi	r26, 0x00	; 0
     106:	b1 e0       	ldi	r27, 0x01	; 1
     108:	ec ef       	ldi	r30, 0xFC	; 252
     10a:	f7 e2       	ldi	r31, 0x27	; 39
     10c:	00 e0       	ldi	r16, 0x00	; 0
     10e:	0b bf       	out	0x3b, r16	; 59
     110:	02 c0       	rjmp	.+4      	; 0x116 <__do_copy_data+0x14>
     112:	07 90       	elpm	r0, Z+
     114:	0d 92       	st	X+, r0
     116:	aa 3c       	cpi	r26, 0xCA	; 202
     118:	b1 07       	cpc	r27, r17
     11a:	d9 f7       	brne	.-10     	; 0x112 <__do_copy_data+0x10>

0000011c <__do_clear_bss>:
     11c:	22 e0       	ldi	r18, 0x02	; 2
     11e:	aa ec       	ldi	r26, 0xCA	; 202
     120:	b1 e0       	ldi	r27, 0x01	; 1
     122:	01 c0       	rjmp	.+2      	; 0x126 <.do_clear_bss_start>

00000124 <.do_clear_bss_loop>:
     124:	1d 92       	st	X+, r1

00000126 <.do_clear_bss_start>:
     126:	a4 3d       	cpi	r26, 0xD4	; 212
     128:	b2 07       	cpc	r27, r18
     12a:	e1 f7       	brne	.-8      	; 0x124 <.do_clear_bss_loop>
     12c:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <main>
     130:	0c 94 fc 13 	jmp	0x27f8	; 0x27f8 <_exit>

00000134 <__bad_interrupt>:
     134:	65 cf       	rjmp	.-310    	; 0x0 <__vectors>

00000136 <__vector_21>:
void uart1_puts_p(const char *progmem_s )
{
    register char c;
    while ( (c = pgm_read_byte(progmem_s++)) ) 
      uart1_putc(c);
}/* uart1_puts_p */
     136:	1f 92       	push	r1
     138:	0f 92       	push	r0
     13a:	0f b6       	in	r0, 0x3f	; 63
     13c:	0f 92       	push	r0
     13e:	11 24       	eor	r1, r1
     140:	0b b6       	in	r0, 0x3b	; 59
     142:	0f 92       	push	r0
     144:	2f 93       	push	r18
     146:	3f 93       	push	r19
     148:	8f 93       	push	r24
     14a:	9f 93       	push	r25
     14c:	ef 93       	push	r30
     14e:	ff 93       	push	r31
     150:	84 b1       	in	r24, 0x04	; 4
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <adc_tmp+0x1>
     158:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <adc_tmp>
     15c:	25 b1       	in	r18, 0x05	; 5
     15e:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <adc_tmp>
     162:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <adc_tmp+0x1>
     166:	92 2b       	or	r25, r18
     168:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <adc_tmp+0x1>
     16c:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <adc_tmp>
     170:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <adc_n_sample>
     174:	84 30       	cpi	r24, 0x04	; 4
     176:	a0 f4       	brcc	.+40     	; 0x1a0 <__vector_21+0x6a>
     178:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <adc_n_sample>
     17c:	8f 5f       	subi	r24, 0xFF	; 255
     17e:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <adc_n_sample>
     182:	20 91 55 02 	lds	r18, 0x0255	; 0x800255 <adc_tmp>
     186:	30 91 56 02 	lds	r19, 0x0256	; 0x800256 <adc_tmp+0x1>
     18a:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <adc_sample>
     18e:	90 91 58 02 	lds	r25, 0x0258	; 0x800258 <adc_sample+0x1>
     192:	82 0f       	add	r24, r18
     194:	93 1f       	adc	r25, r19
     196:	90 93 58 02 	sts	0x0258, r25	; 0x800258 <adc_sample+0x1>
     19a:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <adc_sample>
     19e:	43 c0       	rjmp	.+134    	; 0x226 <__vector_21+0xf0>
     1a0:	e0 91 59 02 	lds	r30, 0x0259	; 0x800259 <ADC_SELECTOR>
     1a4:	f0 91 5a 02 	lds	r31, 0x025A	; 0x80025a <ADC_SELECTOR+0x1>
     1a8:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <adc_sample>
     1ac:	90 91 58 02 	lds	r25, 0x0258	; 0x800258 <adc_sample+0x1>
     1b0:	95 95       	asr	r25
     1b2:	87 95       	ror	r24
     1b4:	95 95       	asr	r25
     1b6:	87 95       	ror	r24
     1b8:	ee 0f       	add	r30, r30
     1ba:	ff 1f       	adc	r31, r31
     1bc:	e3 59       	subi	r30, 0x93	; 147
     1be:	fd 4f       	sbci	r31, 0xFD	; 253
     1c0:	91 83       	std	Z+1, r25	; 0x01
     1c2:	80 83       	st	Z, r24
     1c4:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <adc_sample+0x1>
     1c8:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <adc_sample>
     1cc:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <adc_n_sample>
     1d0:	20 91 59 02 	lds	r18, 0x0259	; 0x800259 <ADC_SELECTOR>
     1d4:	30 91 5a 02 	lds	r19, 0x025A	; 0x80025a <ADC_SELECTOR+0x1>
     1d8:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <ADC_N_CHANNEL>
     1dc:	90 91 5c 02 	lds	r25, 0x025C	; 0x80025c <ADC_N_CHANNEL+0x1>
     1e0:	28 17       	cp	r18, r24
     1e2:	39 07       	cpc	r19, r25
     1e4:	54 f4       	brge	.+20     	; 0x1fa <__vector_21+0xc4>
     1e6:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <ADC_SELECTOR>
     1ea:	90 91 5a 02 	lds	r25, 0x025A	; 0x80025a <ADC_SELECTOR+0x1>
     1ee:	01 96       	adiw	r24, 0x01	; 1
     1f0:	90 93 5a 02 	sts	0x025A, r25	; 0x80025a <ADC_SELECTOR+0x1>
     1f4:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <ADC_SELECTOR>
     1f8:	04 c0       	rjmp	.+8      	; 0x202 <__vector_21+0xcc>
     1fa:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <ADC_SELECTOR+0x1>
     1fe:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <ADC_SELECTOR>
     202:	87 b1       	in	r24, 0x07	; 7
     204:	80 7e       	andi	r24, 0xE0	; 224
     206:	87 b9       	out	0x07, r24	; 7
     208:	e0 91 59 02 	lds	r30, 0x0259	; 0x800259 <ADC_SELECTOR>
     20c:	f0 91 5a 02 	lds	r31, 0x025A	; 0x80025a <ADC_SELECTOR+0x1>
     210:	ee 0f       	add	r30, r30
     212:	ff 1f       	adc	r31, r31
     214:	e3 5a       	subi	r30, 0xA3	; 163
     216:	fd 4f       	sbci	r31, 0xFD	; 253
     218:	80 81       	ld	r24, Z
     21a:	91 81       	ldd	r25, Z+1	; 0x01
     21c:	27 b1       	in	r18, 0x07	; 7
     21e:	8f 71       	andi	r24, 0x1F	; 31
     220:	99 27       	eor	r25, r25
     222:	82 2b       	or	r24, r18
     224:	87 b9       	out	0x07, r24	; 7
     226:	ff 91       	pop	r31
     228:	ef 91       	pop	r30
     22a:	9f 91       	pop	r25
     22c:	8f 91       	pop	r24
     22e:	3f 91       	pop	r19
     230:	2f 91       	pop	r18
     232:	0f 90       	pop	r0
     234:	0b be       	out	0x3b, r0	; 59
     236:	0f 90       	pop	r0
     238:	0f be       	out	0x3f, r0	; 63
     23a:	0f 90       	pop	r0
     23c:	1f 90       	pop	r1
     23e:	18 95       	reti

00000240 <__vector_18>:
     240:	1f 92       	push	r1
     242:	0f 92       	push	r0
     244:	0f b6       	in	r0, 0x3f	; 63
     246:	0f 92       	push	r0
     248:	11 24       	eor	r1, r1
     24a:	0b b6       	in	r0, 0x3b	; 59
     24c:	0f 92       	push	r0
     24e:	8f 93       	push	r24
     250:	9f 93       	push	r25
     252:	ef 93       	push	r30
     254:	ff 93       	push	r31
     256:	8b b1       	in	r24, 0x0b	; 11
     258:	9a b1       	in	r25, 0x0a	; 10
     25a:	88 71       	andi	r24, 0x18	; 24
     25c:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <UART_LastRxError>
     260:	e0 91 11 02 	lds	r30, 0x0211	; 0x800211 <UART_RxHead>
     264:	ef 5f       	subi	r30, 0xFF	; 255
     266:	ef 71       	andi	r30, 0x1F	; 31
     268:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <UART_RxTail>
     26c:	e8 13       	cpse	r30, r24
     26e:	04 c0       	rjmp	.+8      	; 0x278 <__vector_18+0x38>
     270:	82 e0       	ldi	r24, 0x02	; 2
     272:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <UART_LastRxError>
     276:	11 c0       	rjmp	.+34     	; 0x29a <__vector_18+0x5a>
     278:	9c b1       	in	r25, 0x0c	; 12
     27a:	e0 93 11 02 	sts	0x0211, r30	; 0x800211 <UART_RxHead>
     27e:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <UART_LastRxError>
     282:	88 23       	and	r24, r24
     284:	31 f0       	breq	.+12     	; 0x292 <__vector_18+0x52>
     286:	f0 e0       	ldi	r31, 0x00	; 0
     288:	ec 5e       	subi	r30, 0xEC	; 236
     28a:	fd 4f       	sbci	r31, 0xFD	; 253
     28c:	88 e5       	ldi	r24, 0x58	; 88
     28e:	80 83       	st	Z, r24
     290:	04 c0       	rjmp	.+8      	; 0x29a <__vector_18+0x5a>
     292:	f0 e0       	ldi	r31, 0x00	; 0
     294:	ec 5e       	subi	r30, 0xEC	; 236
     296:	fd 4f       	sbci	r31, 0xFD	; 253
     298:	90 83       	st	Z, r25
     29a:	ff 91       	pop	r31
     29c:	ef 91       	pop	r30
     29e:	9f 91       	pop	r25
     2a0:	8f 91       	pop	r24
     2a2:	0f 90       	pop	r0
     2a4:	0b be       	out	0x3b, r0	; 59
     2a6:	0f 90       	pop	r0
     2a8:	0f be       	out	0x3f, r0	; 63
     2aa:	0f 90       	pop	r0
     2ac:	1f 90       	pop	r1
     2ae:	18 95       	reti

000002b0 <__vector_19>:
     2b0:	1f 92       	push	r1
     2b2:	0f 92       	push	r0
     2b4:	0f b6       	in	r0, 0x3f	; 63
     2b6:	0f 92       	push	r0
     2b8:	11 24       	eor	r1, r1
     2ba:	0b b6       	in	r0, 0x3b	; 59
     2bc:	0f 92       	push	r0
     2be:	8f 93       	push	r24
     2c0:	9f 93       	push	r25
     2c2:	ef 93       	push	r30
     2c4:	ff 93       	push	r31
     2c6:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <UART_TxHead>
     2ca:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <UART_TxTail>
     2ce:	98 13       	cpse	r25, r24
     2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <__vector_19+0x26>
     2d2:	55 98       	cbi	0x0a, 5	; 10
     2d4:	0b c0       	rjmp	.+22     	; 0x2ec <__vector_19+0x3c>
     2d6:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <UART_TxTail>
     2da:	ef 5f       	subi	r30, 0xFF	; 255
     2dc:	ef 71       	andi	r30, 0x1F	; 31
     2de:	e0 93 12 02 	sts	0x0212, r30	; 0x800212 <UART_TxTail>
     2e2:	f0 e0       	ldi	r31, 0x00	; 0
     2e4:	ec 5c       	subi	r30, 0xCC	; 204
     2e6:	fd 4f       	sbci	r31, 0xFD	; 253
     2e8:	80 81       	ld	r24, Z
     2ea:	8c b9       	out	0x0c, r24	; 12
     2ec:	ff 91       	pop	r31
     2ee:	ef 91       	pop	r30
     2f0:	9f 91       	pop	r25
     2f2:	8f 91       	pop	r24
     2f4:	0f 90       	pop	r0
     2f6:	0b be       	out	0x3b, r0	; 59
     2f8:	0f 90       	pop	r0
     2fa:	0f be       	out	0x3f, r0	; 63
     2fc:	0f 90       	pop	r0
     2fe:	1f 90       	pop	r1
     300:	18 95       	reti

00000302 <__vector_30>:
SIGNAL(UART1_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART1 Receive Complete interrupt
Purpose:  called when the UART1 has received a character
**************************************************************************/
{
     302:	1f 92       	push	r1
     304:	0f 92       	push	r0
     306:	0f b6       	in	r0, 0x3f	; 63
     308:	0f 92       	push	r0
     30a:	11 24       	eor	r1, r1
     30c:	0b b6       	in	r0, 0x3b	; 59
     30e:	0f 92       	push	r0
     310:	8f 93       	push	r24
     312:	9f 93       	push	r25
     314:	ef 93       	push	r30
     316:	ff 93       	push	r31
    unsigned char tmphead;
	unsigned char data;
	unsigned char bit9;
    unsigned char usr;
    /* read UART status register and UART data register */
	usr  = UART1_STATUS;
     318:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    bit9 = UART1_CONTROL;
     31c:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
    bit9 = 0x01 & (bit9>>1);
    /* */
    UART1_LastRxError = (usr & (_BV(FE1)|_BV(DOR1)));
     320:	88 71       	andi	r24, 0x18	; 24
     322:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__data_end>
	/* calculate buffer index */ 
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
     326:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <UART1_RxHead>
     32a:	ef 5f       	subi	r30, 0xFF	; 255
     32c:	ef 71       	andi	r30, 0x1F	; 31
    if ( tmphead == UART1_RxTail ) {	
     32e:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <UART1_RxTail>
     332:	e8 13       	cpse	r30, r24
     334:	04 c0       	rjmp	.+8      	; 0x33e <__vector_30+0x3c>
        /* error: receive buffer overflow, caracter is lost*/
        UART1_LastRxError = UART_BUFFER_OVERFLOW >> 8; 
     336:	82 e0       	ldi	r24, 0x02	; 2
     338:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__data_end>
     33c:	12 c0       	rjmp	.+36     	; 0x362 <__vector_30+0x60>
	}else{
		data = UART1_DATA;
     33e:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
        /* store new index */
        UART1_RxHead = tmphead;
     342:	e0 93 cc 01 	sts	0x01CC, r30	; 0x8001cc <UART1_RxHead>
		if(UART1_LastRxError){
     346:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <__data_end>
     34a:	88 23       	and	r24, r24
     34c:	31 f0       	breq	.+12     	; 0x35a <__vector_30+0x58>
			/* store indication data error in buffer */
			UART1_RxBuf[tmphead] = 'X';
     34e:	f0 e0       	ldi	r31, 0x00	; 0
     350:	e1 53       	subi	r30, 0x31	; 49
     352:	fe 4f       	sbci	r31, 0xFE	; 254
     354:	88 e5       	ldi	r24, 0x58	; 88
     356:	80 83       	st	Z, r24
     358:	04 c0       	rjmp	.+8      	; 0x362 <__vector_30+0x60>
		}else{
			/* store received data in buffer */
			UART1_RxBuf[tmphead] = data;
     35a:	f0 e0       	ldi	r31, 0x00	; 0
     35c:	e1 53       	subi	r30, 0x31	; 49
     35e:	fe 4f       	sbci	r31, 0xFE	; 254
     360:	90 83       	st	Z, r25
		}
    }
}
     362:	ff 91       	pop	r31
     364:	ef 91       	pop	r30
     366:	9f 91       	pop	r25
     368:	8f 91       	pop	r24
     36a:	0f 90       	pop	r0
     36c:	0b be       	out	0x3b, r0	; 59
     36e:	0f 90       	pop	r0
     370:	0f be       	out	0x3f, r0	; 63
     372:	0f 90       	pop	r0
     374:	1f 90       	pop	r1
     376:	18 95       	reti

00000378 <__vector_31>:
SIGNAL(UART1_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART1 Data Register Empty interrupt
Purpose:  called when the UART1 is ready to transmit the next byte
**************************************************************************/
{
     378:	1f 92       	push	r1
     37a:	0f 92       	push	r0
     37c:	0f b6       	in	r0, 0x3f	; 63
     37e:	0f 92       	push	r0
     380:	11 24       	eor	r1, r1
     382:	0b b6       	in	r0, 0x3b	; 59
     384:	0f 92       	push	r0
     386:	8f 93       	push	r24
     388:	9f 93       	push	r25
     38a:	ef 93       	push	r30
     38c:	ff 93       	push	r31
    if ( UART1_TxHead == UART1_TxTail ) {
     38e:	90 91 ce 01 	lds	r25, 0x01CE	; 0x8001ce <UART1_TxHead>
     392:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <UART1_TxTail>
     396:	98 13       	cpse	r25, r24
     398:	06 c0       	rjmp	.+12     	; 0x3a6 <__vector_31+0x2e>
        /* tx buffer empty, disable UDRE interrupt */
        UART1_CONTROL &= ~_BV(UART1_UDRIE);
     39a:	ea e9       	ldi	r30, 0x9A	; 154
     39c:	f0 e0       	ldi	r31, 0x00	; 0
     39e:	80 81       	ld	r24, Z
     3a0:	8f 7d       	andi	r24, 0xDF	; 223
     3a2:	80 83       	st	Z, r24
     3a4:	0e c0       	rjmp	.+28     	; 0x3c2 <__vector_31+0x4a>
    }else{
		/* calculate and store new buffer index */
        UART1_TxTail = (UART1_TxTail + 1) & UART_TX_BUFFER_MASK;
     3a6:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <UART1_TxTail>
     3aa:	8f 5f       	subi	r24, 0xFF	; 255
     3ac:	8f 71       	andi	r24, 0x1F	; 31
     3ae:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <UART1_TxTail>
        /* get one byte from buffer and write it to UART */
		UART1_DATA = UART1_TxBuf[UART1_TxTail];  /* start transmission */
     3b2:	e0 91 cd 01 	lds	r30, 0x01CD	; 0x8001cd <UART1_TxTail>
     3b6:	f0 e0       	ldi	r31, 0x00	; 0
     3b8:	e1 51       	subi	r30, 0x11	; 17
     3ba:	fe 4f       	sbci	r31, 0xFE	; 254
     3bc:	80 81       	ld	r24, Z
     3be:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
	}	
}
     3c2:	ff 91       	pop	r31
     3c4:	ef 91       	pop	r30
     3c6:	9f 91       	pop	r25
     3c8:	8f 91       	pop	r24
     3ca:	0f 90       	pop	r0
     3cc:	0b be       	out	0x3b, r0	; 59
     3ce:	0f 90       	pop	r0
     3d0:	0f be       	out	0x3f, r0	; 63
     3d2:	0f 90       	pop	r0
     3d4:	1f 90       	pop	r1
     3d6:	18 95       	reti

000003d8 <EEPROMenable>:
** procedure and function header
*/
/*
** procedure and function
*/
EEPROM EEPROMenable(void){
     3d8:	fc 01       	movw	r30, r24
	eprom.write_float=eeprom_write_float;
	eprom.update_float=eeprom_update_float;
	eprom.read_block=eeprom_read_block;
	eprom.write_block=eeprom_write_block;
	eprom.update_block=eeprom_update_block;
	return eprom;
     3da:	85 ea       	ldi	r24, 0xA5	; 165
     3dc:	93 e1       	ldi	r25, 0x13	; 19
     3de:	91 83       	std	Z+1, r25	; 0x01
     3e0:	80 83       	st	Z, r24
     3e2:	87 ee       	ldi	r24, 0xE7	; 231
     3e4:	93 e1       	ldi	r25, 0x13	; 19
     3e6:	93 83       	std	Z+3, r25	; 0x03
     3e8:	82 83       	std	Z+2, r24	; 0x02
     3ea:	81 ec       	ldi	r24, 0xC1	; 193
     3ec:	93 e1       	ldi	r25, 0x13	; 19
     3ee:	95 83       	std	Z+5, r25	; 0x05
     3f0:	84 83       	std	Z+4, r24	; 0x04
     3f2:	8d ea       	ldi	r24, 0xAD	; 173
     3f4:	93 e1       	ldi	r25, 0x13	; 19
     3f6:	97 83       	std	Z+7, r25	; 0x07
     3f8:	86 83       	std	Z+6, r24	; 0x06
     3fa:	89 ef       	ldi	r24, 0xF9	; 249
     3fc:	93 e1       	ldi	r25, 0x13	; 19
     3fe:	91 87       	std	Z+9, r25	; 0x09
     400:	80 87       	std	Z+8, r24	; 0x08
     402:	8a ed       	ldi	r24, 0xDA	; 218
     404:	93 e1       	ldi	r25, 0x13	; 19
     406:	93 87       	std	Z+11, r25	; 0x0b
     408:	82 87       	std	Z+10, r24	; 0x0a
     40a:	84 ef       	ldi	r24, 0xF4	; 244
     40c:	93 e1       	ldi	r25, 0x13	; 19
     40e:	97 87       	std	Z+15, r25	; 0x0f
     410:	86 87       	std	Z+14, r24	; 0x0e
     412:	84 ef       	ldi	r24, 0xF4	; 244
     414:	93 e1       	ldi	r25, 0x13	; 19
     416:	95 8b       	std	Z+21, r25	; 0x15
     418:	84 8b       	std	Z+20, r24	; 0x14
     41a:	82 ed       	ldi	r24, 0xD2	; 210
     41c:	93 e1       	ldi	r25, 0x13	; 19
     41e:	97 8b       	std	Z+23, r25	; 0x17
     420:	86 8b       	std	Z+22, r24	; 0x16
     422:	85 e9       	ldi	r24, 0x95	; 149
     424:	93 e1       	ldi	r25, 0x13	; 19
     426:	91 8f       	std	Z+25, r25	; 0x19
     428:	80 8f       	std	Z+24, r24	; 0x18
     42a:	8e ed       	ldi	r24, 0xDE	; 222
     42c:	93 e1       	ldi	r25, 0x13	; 19
     42e:	93 8f       	std	Z+27, r25	; 0x1b
     430:	82 8f       	std	Z+26, r24	; 0x1a
     432:	82 eb       	ldi	r24, 0xB2	; 178
     434:	93 e1       	ldi	r25, 0x13	; 19
     436:	95 8f       	std	Z+29, r25	; 0x1d
     438:	84 8f       	std	Z+28, r24	; 0x1c
}
     43a:	cf 01       	movw	r24, r30
     43c:	08 95       	ret

0000043e <FUNCpinmatch>:
}
//pinmatch
uint8_t FUNCpinmatch(uint8_t match, uint8_t pin, uint8_t HL)
{
	uint8_t result;
	result=match&pin;
     43e:	68 23       	and	r22, r24
	if(HL){
     440:	44 23       	and	r20, r20
     442:	21 f0       	breq	.+8      	; 0x44c <FUNCpinmatch+0xe>
		if(result==match);
     444:	86 17       	cp	r24, r22
     446:	21 f0       	breq	.+8      	; 0x450 <FUNCpinmatch+0x12>
		else
			result=0;
     448:	80 e0       	ldi	r24, 0x00	; 0
     44a:	08 95       	ret
	}else{
		if(result)
     44c:	61 11       	cpse	r22, r1
			result=0;
     44e:	80 e0       	ldi	r24, 0x00	; 0
		else
			result=match;
	}
	return result;
}
     450:	08 95       	ret

00000452 <FUNChmerge>:
// hmerge
uint8_t FUNChmerge(uint8_t X, uint8_t Y)
{
	return (X | Y);
}
     452:	86 2b       	or	r24, r22
     454:	08 95       	ret

00000456 <FUNClmerge>:
// lmerge
uint8_t FUNClmerge(uint8_t X, uint8_t Y)
{
	return (X & Y);
}
     456:	86 23       	and	r24, r22
     458:	08 95       	ret

0000045a <FUNChh>:
uint8_t FUNChh(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi&xf;
	return i;
}
     45a:	86 23       	and	r24, r22
     45c:	08 95       	ret

0000045e <FUNCll>:
// ll
uint8_t FUNCll(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi|xf;
	return ~i;
     45e:	86 2b       	or	r24, r22
}
     460:	80 95       	com	r24
     462:	08 95       	ret

00000464 <FUNClh>:
// lh
uint8_t FUNClh(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi^xf;
     464:	86 27       	eor	r24, r22
	i&=xf;
	return i;
}
     466:	86 23       	and	r24, r22
     468:	08 95       	ret

0000046a <FUNChl>:
// hl
uint8_t FUNChl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xf^xi;
     46a:	60 95       	com	r22
	i&=xi;
	return i;
}
     46c:	86 23       	and	r24, r22
     46e:	08 95       	ret

00000470 <FUNCdiff>:
// diff
uint8_t FUNCdiff(uint8_t xi, uint8_t xf)
{
	return xf^xi;
}
     470:	86 27       	eor	r24, r22
     472:	08 95       	ret

00000474 <FUNCswap>:
// interchange *px and *py
void FUNCswap(long *px, long *py)
{
     474:	cf 92       	push	r12
     476:	df 92       	push	r13
     478:	ef 92       	push	r14
     47a:	ff 92       	push	r15
     47c:	0f 93       	push	r16
     47e:	1f 93       	push	r17
	long temp;
	temp = *px;
     480:	fc 01       	movw	r30, r24
     482:	00 81       	ld	r16, Z
     484:	11 81       	ldd	r17, Z+1	; 0x01
     486:	22 81       	ldd	r18, Z+2	; 0x02
     488:	33 81       	ldd	r19, Z+3	; 0x03
	*px = *py;
     48a:	fb 01       	movw	r30, r22
     48c:	c0 80       	ld	r12, Z
     48e:	d1 80       	ldd	r13, Z+1	; 0x01
     490:	e2 80       	ldd	r14, Z+2	; 0x02
     492:	f3 80       	ldd	r15, Z+3	; 0x03
     494:	fc 01       	movw	r30, r24
     496:	c0 82       	st	Z, r12
     498:	d1 82       	std	Z+1, r13	; 0x01
     49a:	e2 82       	std	Z+2, r14	; 0x02
     49c:	f3 82       	std	Z+3, r15	; 0x03
	*py = temp;
     49e:	fb 01       	movw	r30, r22
     4a0:	00 83       	st	Z, r16
     4a2:	11 83       	std	Z+1, r17	; 0x01
     4a4:	22 83       	std	Z+2, r18	; 0x02
     4a6:	33 83       	std	Z+3, r19	; 0x03
}
     4a8:	1f 91       	pop	r17
     4aa:	0f 91       	pop	r16
     4ac:	ff 90       	pop	r15
     4ae:	ef 90       	pop	r14
     4b0:	df 90       	pop	r13
     4b2:	cf 90       	pop	r12
     4b4:	08 95       	ret

000004b6 <FUNCcopy>:
// copy: copy 'from' into 'to'; assume to is big enough
void FUNCcopy(char to[], char from[])
{
	int i;
	i = 0;
	while ((to[i] = from[i]) != '\0')
     4b6:	fb 01       	movw	r30, r22
     4b8:	20 81       	ld	r18, Z
     4ba:	fc 01       	movw	r30, r24
     4bc:	20 83       	st	Z, r18
     4be:	22 23       	and	r18, r18
     4c0:	39 f0       	breq	.+14     	; 0x4d0 <FUNCcopy+0x1a>
     4c2:	db 01       	movw	r26, r22
     4c4:	11 96       	adiw	r26, 0x01	; 1
     4c6:	31 96       	adiw	r30, 0x01	; 1
     4c8:	9d 91       	ld	r25, X+
     4ca:	91 93       	st	Z+, r25
     4cc:	91 11       	cpse	r25, r1
     4ce:	fc cf       	rjmp	.-8      	; 0x4c8 <FUNCcopy+0x12>
     4d0:	08 95       	ret

000004d2 <FUNCsqueeze>:
		++i;
}
// squeeze: delete all c from s
void FUNCsqueeze(char s[], int c)
{
     4d2:	cf 93       	push	r28
     4d4:	df 93       	push	r29
     4d6:	ec 01       	movw	r28, r24
	int i, j;
	for (i = j = 0; s[i] != '\0'; i++)
     4d8:	98 81       	ld	r25, Y
     4da:	99 23       	and	r25, r25
     4dc:	99 f0       	breq	.+38     	; 0x504 <FUNCsqueeze+0x32>
     4de:	fe 01       	movw	r30, r28
     4e0:	31 96       	adiw	r30, 0x01	; 1
     4e2:	20 e0       	ldi	r18, 0x00	; 0
     4e4:	30 e0       	ldi	r19, 0x00	; 0
		if (s[i] != c)
     4e6:	49 2f       	mov	r20, r25
     4e8:	50 e0       	ldi	r21, 0x00	; 0
     4ea:	46 17       	cp	r20, r22
     4ec:	57 07       	cpc	r21, r23
     4ee:	31 f0       	breq	.+12     	; 0x4fc <FUNCsqueeze+0x2a>
			s[j++] = s[i];
     4f0:	de 01       	movw	r26, r28
     4f2:	a2 0f       	add	r26, r18
     4f4:	b3 1f       	adc	r27, r19
     4f6:	9c 93       	st	X, r25
     4f8:	2f 5f       	subi	r18, 0xFF	; 255
     4fa:	3f 4f       	sbci	r19, 0xFF	; 255
}
// squeeze: delete all c from s
void FUNCsqueeze(char s[], int c)
{
	int i, j;
	for (i = j = 0; s[i] != '\0'; i++)
     4fc:	91 91       	ld	r25, Z+
     4fe:	91 11       	cpse	r25, r1
     500:	f2 cf       	rjmp	.-28     	; 0x4e6 <FUNCsqueeze+0x14>
     502:	02 c0       	rjmp	.+4      	; 0x508 <FUNCsqueeze+0x36>
     504:	20 e0       	ldi	r18, 0x00	; 0
     506:	30 e0       	ldi	r19, 0x00	; 0
		if (s[i] != c)
			s[j++] = s[i];
		s[j] = '\0';
     508:	fe 01       	movw	r30, r28
     50a:	e2 0f       	add	r30, r18
     50c:	f3 1f       	adc	r31, r19
     50e:	10 82       	st	Z, r1
}
     510:	df 91       	pop	r29
     512:	cf 91       	pop	r28
     514:	08 95       	ret

00000516 <FUNCshellsort>:
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
     516:	2f 92       	push	r2
     518:	3f 92       	push	r3
     51a:	4f 92       	push	r4
     51c:	5f 92       	push	r5
     51e:	6f 92       	push	r6
     520:	7f 92       	push	r7
     522:	8f 92       	push	r8
     524:	9f 92       	push	r9
     526:	af 92       	push	r10
     528:	bf 92       	push	r11
     52a:	cf 92       	push	r12
     52c:	df 92       	push	r13
     52e:	ef 92       	push	r14
     530:	ff 92       	push	r15
     532:	0f 93       	push	r16
     534:	1f 93       	push	r17
     536:	cf 93       	push	r28
     538:	df 93       	push	r29
     53a:	00 d0       	rcall	.+0      	; 0x53c <FUNCshellsort+0x26>
     53c:	00 d0       	rcall	.+0      	; 0x53e <FUNCshellsort+0x28>
     53e:	cd b7       	in	r28, 0x3d	; 61
     540:	de b7       	in	r29, 0x3e	; 62
     542:	2c 01       	movw	r4, r24
     544:	1b 01       	movw	r2, r22
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
     546:	4b 01       	movw	r8, r22
     548:	77 23       	and	r23, r23
     54a:	1c f4       	brge	.+6      	; 0x552 <FUNCshellsort+0x3c>
     54c:	2f ef       	ldi	r18, 0xFF	; 255
     54e:	82 1a       	sub	r8, r18
     550:	92 0a       	sbc	r9, r18
     552:	95 94       	asr	r9
     554:	87 94       	ror	r8
     556:	18 14       	cp	r1, r8
     558:	19 04       	cpc	r1, r9
     55a:	0c f4       	brge	.+2      	; 0x55e <FUNCshellsort+0x48>
     55c:	51 c0       	rjmp	.+162    	; 0x600 <FUNCshellsort+0xea>
     55e:	6a c0       	rjmp	.+212    	; 0x634 <FUNCshellsort+0x11e>
		for (i = gap; i < n; i++)
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
     560:	96 01       	movw	r18, r12
     562:	dd 20       	and	r13, r13
     564:	9c f1       	brlt	.+102    	; 0x5cc <FUNCshellsort+0xb6>
     566:	f5 01       	movw	r30, r10
     568:	40 81       	ld	r20, Z
     56a:	51 81       	ldd	r21, Z+1	; 0x01
     56c:	f4 01       	movw	r30, r8
     56e:	60 81       	ld	r22, Z
     570:	71 81       	ldd	r23, Z+1	; 0x01
     572:	64 17       	cp	r22, r20
     574:	75 07       	cpc	r23, r21
     576:	54 f5       	brge	.+84     	; 0x5cc <FUNCshellsort+0xb6>
     578:	8c 01       	movw	r16, r24
     57a:	0a 0d       	add	r16, r10
     57c:	1b 1d       	adc	r17, r11
     57e:	d4 01       	movw	r26, r8
     580:	bc 82       	std	Y+4, r11	; 0x04
     582:	ab 82       	std	Y+3, r10	; 0x03
     584:	ba 82       	std	Y+2, r11	; 0x02
     586:	a9 82       	std	Y+1, r10	; 0x01
				temp = v[j];
				v[j] = v[j+gap];
     588:	eb 81       	ldd	r30, Y+3	; 0x03
     58a:	fc 81       	ldd	r31, Y+4	; 0x04
     58c:	71 83       	std	Z+1, r23	; 0x01
     58e:	60 83       	st	Z, r22
				v[j+gap] = temp;
     590:	11 96       	adiw	r26, 0x01	; 1
     592:	5c 93       	st	X, r21
     594:	4e 93       	st	-X, r20
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
		for (i = gap; i < n; i++)
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
     596:	2e 19       	sub	r18, r14
     598:	3f 09       	sbc	r19, r15
     59a:	c2 f0       	brmi	.+48     	; 0x5cc <FUNCshellsort+0xb6>
     59c:	f8 01       	movw	r30, r16
     59e:	40 81       	ld	r20, Z
     5a0:	51 81       	ldd	r21, Z+1	; 0x01
     5a2:	e9 81       	ldd	r30, Y+1	; 0x01
     5a4:	fa 81       	ldd	r31, Y+2	; 0x02
     5a6:	60 81       	ld	r22, Z
     5a8:	71 81       	ldd	r23, Z+1	; 0x01
     5aa:	08 0f       	add	r16, r24
     5ac:	19 1f       	adc	r17, r25
     5ae:	e8 0f       	add	r30, r24
     5b0:	f9 1f       	adc	r31, r25
     5b2:	fa 83       	std	Y+2, r31	; 0x02
     5b4:	e9 83       	std	Y+1, r30	; 0x01
     5b6:	eb 81       	ldd	r30, Y+3	; 0x03
     5b8:	fc 81       	ldd	r31, Y+4	; 0x04
     5ba:	e8 0f       	add	r30, r24
     5bc:	f9 1f       	adc	r31, r25
     5be:	fc 83       	std	Y+4, r31	; 0x04
     5c0:	eb 83       	std	Y+3, r30	; 0x03
     5c2:	a8 0f       	add	r26, r24
     5c4:	b9 1f       	adc	r27, r25
     5c6:	64 17       	cp	r22, r20
     5c8:	75 07       	cpc	r23, r21
     5ca:	f4 f2       	brlt	.-68     	; 0x588 <FUNCshellsort+0x72>
     5cc:	ff ef       	ldi	r31, 0xFF	; 255
     5ce:	cf 1a       	sub	r12, r31
     5d0:	df 0a       	sbc	r13, r31
     5d2:	22 e0       	ldi	r18, 0x02	; 2
     5d4:	a2 0e       	add	r10, r18
     5d6:	b1 1c       	adc	r11, r1
     5d8:	e2 e0       	ldi	r30, 0x02	; 2
     5da:	8e 0e       	add	r8, r30
     5dc:	91 1c       	adc	r9, r1
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
		for (i = gap; i < n; i++)
     5de:	c6 14       	cp	r12, r6
     5e0:	d7 04       	cpc	r13, r7
     5e2:	09 f0       	breq	.+2      	; 0x5e6 <FUNCshellsort+0xd0>
     5e4:	bd cf       	rjmp	.-134    	; 0x560 <FUNCshellsort+0x4a>
}
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
     5e6:	47 01       	movw	r8, r14
     5e8:	ff 20       	and	r15, r15
     5ea:	1c f4       	brge	.+6      	; 0x5f2 <FUNCshellsort+0xdc>
     5ec:	ff ef       	ldi	r31, 0xFF	; 255
     5ee:	8f 1a       	sub	r8, r31
     5f0:	9f 0a       	sbc	r9, r31
     5f2:	95 94       	asr	r9
     5f4:	87 94       	ror	r8
     5f6:	18 14       	cp	r1, r8
     5f8:	19 04       	cpc	r1, r9
     5fa:	e4 f4       	brge	.+56     	; 0x634 <FUNCshellsort+0x11e>
     5fc:	74 01       	movw	r14, r8
     5fe:	01 c0       	rjmp	.+2      	; 0x602 <FUNCshellsort+0xec>
     600:	74 01       	movw	r14, r8
		for (i = gap; i < n; i++)
     602:	82 14       	cp	r8, r2
     604:	93 04       	cpc	r9, r3
     606:	7c f7       	brge	.-34     	; 0x5e6 <FUNCshellsort+0xd0>
     608:	64 01       	movw	r12, r8
     60a:	ce 18       	sub	r12, r14
     60c:	df 08       	sbc	r13, r15
     60e:	56 01       	movw	r10, r12
     610:	aa 0c       	add	r10, r10
     612:	bb 1c       	adc	r11, r11
     614:	a4 0c       	add	r10, r4
     616:	b5 1c       	adc	r11, r5
     618:	88 0c       	add	r8, r8
     61a:	99 1c       	adc	r9, r9
     61c:	84 0c       	add	r8, r4
     61e:	95 1c       	adc	r9, r5
     620:	31 01       	movw	r6, r2
     622:	6e 18       	sub	r6, r14
     624:	7f 08       	sbc	r7, r15
     626:	c7 01       	movw	r24, r14
     628:	88 0f       	add	r24, r24
     62a:	99 1f       	adc	r25, r25
     62c:	91 95       	neg	r25
     62e:	81 95       	neg	r24
     630:	91 09       	sbc	r25, r1
     632:	96 cf       	rjmp	.-212    	; 0x560 <FUNCshellsort+0x4a>
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
				temp = v[j];
				v[j] = v[j+gap];
				v[j+gap] = temp;
			}
}
     634:	0f 90       	pop	r0
     636:	0f 90       	pop	r0
     638:	0f 90       	pop	r0
     63a:	0f 90       	pop	r0
     63c:	df 91       	pop	r29
     63e:	cf 91       	pop	r28
     640:	1f 91       	pop	r17
     642:	0f 91       	pop	r16
     644:	ff 90       	pop	r15
     646:	ef 90       	pop	r14
     648:	df 90       	pop	r13
     64a:	cf 90       	pop	r12
     64c:	bf 90       	pop	r11
     64e:	af 90       	pop	r10
     650:	9f 90       	pop	r9
     652:	8f 90       	pop	r8
     654:	7f 90       	pop	r7
     656:	6f 90       	pop	r6
     658:	5f 90       	pop	r5
     65a:	4f 90       	pop	r4
     65c:	3f 90       	pop	r3
     65e:	2f 90       	pop	r2
     660:	08 95       	ret

00000662 <FUNCpmax>:
	if(a1 > a2){
		biggest = a1;
	}else{
		biggest = a2;
	}
	return biggest;
     662:	86 17       	cp	r24, r22
     664:	97 07       	cpc	r25, r23
     666:	0c f4       	brge	.+2      	; 0x66a <FUNCpmax+0x8>
     668:	cb 01       	movw	r24, r22
}
     66a:	08 95       	ret

0000066c <FUNCgcd>:
// common divisor
int FUNCgcd (int u, int v)
{
     66c:	9b 01       	movw	r18, r22
	int temp;
	while ( v != 0 ) {
     66e:	67 2b       	or	r22, r23
     670:	11 f4       	brne	.+4      	; 0x676 <FUNCgcd+0xa>
     672:	08 95       	ret
		temp = u % v;
		u = v;
		v = temp;
     674:	9a 01       	movw	r18, r20
// common divisor
int FUNCgcd (int u, int v)
{
	int temp;
	while ( v != 0 ) {
		temp = u % v;
     676:	b9 01       	movw	r22, r18
     678:	0e 94 22 13 	call	0x2644	; 0x2644 <__divmodhi4>
     67c:	ac 01       	movw	r20, r24
     67e:	82 2f       	mov	r24, r18
     680:	93 2f       	mov	r25, r19
}
// common divisor
int FUNCgcd (int u, int v)
{
	int temp;
	while ( v != 0 ) {
     682:	41 15       	cp	r20, r1
     684:	51 05       	cpc	r21, r1
     686:	b1 f7       	brne	.-20     	; 0x674 <FUNCgcd+0x8>
		temp = u % v;
		u = v;
		v = temp;
	}
	return u;
}
     688:	08 95       	ret

0000068a <FUNCstrToInt>:
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
     68a:	fc 01       	movw	r30, r24
	int i, intValue, result = 0;
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
     68c:	90 81       	ld	r25, Z
     68e:	80 ed       	ldi	r24, 0xD0	; 208
     690:	89 0f       	add	r24, r25
     692:	8a 30       	cpi	r24, 0x0A	; 10
     694:	d0 f4       	brcc	.+52     	; 0x6ca <FUNCstrToInt+0x40>
     696:	31 96       	adiw	r30, 0x01	; 1
     698:	20 e0       	ldi	r18, 0x00	; 0
     69a:	30 e0       	ldi	r19, 0x00	; 0
		intValue = string[i] - '0';
		result = result * 10 + intValue;
     69c:	a9 01       	movw	r20, r18
     69e:	44 0f       	add	r20, r20
     6a0:	55 1f       	adc	r21, r21
     6a2:	22 0f       	add	r18, r18
     6a4:	33 1f       	adc	r19, r19
     6a6:	22 0f       	add	r18, r18
     6a8:	33 1f       	adc	r19, r19
     6aa:	22 0f       	add	r18, r18
     6ac:	33 1f       	adc	r19, r19
     6ae:	42 0f       	add	r20, r18
     6b0:	53 1f       	adc	r21, r19
     6b2:	29 2f       	mov	r18, r25
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	20 53       	subi	r18, 0x30	; 48
     6b8:	31 09       	sbc	r19, r1
     6ba:	24 0f       	add	r18, r20
     6bc:	35 1f       	adc	r19, r21
}
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
	int i, intValue, result = 0;
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
     6be:	91 91       	ld	r25, Z+
     6c0:	80 ed       	ldi	r24, 0xD0	; 208
     6c2:	89 0f       	add	r24, r25
     6c4:	8a 30       	cpi	r24, 0x0A	; 10
     6c6:	50 f3       	brcs	.-44     	; 0x69c <FUNCstrToInt+0x12>
     6c8:	02 c0       	rjmp	.+4      	; 0x6ce <FUNCstrToInt+0x44>
	return u;
}
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
	int i, intValue, result = 0;
     6ca:	20 e0       	ldi	r18, 0x00	; 0
     6cc:	30 e0       	ldi	r19, 0x00	; 0
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
		intValue = string[i] - '0';
		result = result * 10 + intValue;
	}
	return result;
}
     6ce:	c9 01       	movw	r24, r18
     6d0:	08 95       	ret

000006d2 <FUNCfilter>:
uint8_t FUNCfilter(uint8_t mask, uint8_t data)
{
	uint8_t Z;
	Z=mask & data;
	return Z;
}
     6d2:	86 23       	and	r24, r22
     6d4:	08 95       	ret

000006d6 <FUNCticks>:
// ticks
unsigned int FUNCticks(unsigned int num)
{
	unsigned int count;
	for(count=0;count<num;count++)
     6d6:	00 97       	sbiw	r24, 0x00	; 0
     6d8:	39 f0       	breq	.+14     	; 0x6e8 <FUNCticks+0x12>
     6da:	20 e0       	ldi	r18, 0x00	; 0
     6dc:	30 e0       	ldi	r19, 0x00	; 0
     6de:	2f 5f       	subi	r18, 0xFF	; 255
     6e0:	3f 4f       	sbci	r19, 0xFF	; 255
     6e2:	82 17       	cp	r24, r18
     6e4:	93 07       	cpc	r25, r19
     6e6:	d9 f7       	brne	.-10     	; 0x6de <FUNCticks+0x8>
		;
	return count;
}
     6e8:	08 95       	ret

000006ea <FUNCtwocomptoint8bit>:
// Two's Complement function
int FUNCtwocomptoint8bit(int twoscomp){
  
  //Let's see if the byte is negative
  if (twoscomp & 0B10000000){
     6ea:	87 ff       	sbrs	r24, 7
     6ec:	08 c0       	rjmp	.+16     	; 0x6fe <FUNCtwocomptoint8bit+0x14>
    //Invert
    twoscomp = ~twoscomp + 1;
     6ee:	91 95       	neg	r25
     6f0:	81 95       	neg	r24
     6f2:	91 09       	sbc	r25, r1
	twoscomp = (twoscomp & 0B11111111);
    //Cast as int and multiply by negative one
    int value = (int)(twoscomp)*(-1);
     6f4:	99 27       	eor	r25, r25
     6f6:	91 95       	neg	r25
     6f8:	81 95       	neg	r24
     6fa:	91 09       	sbc	r25, r1
    return value;
     6fc:	08 95       	ret
    //Byte is non-negative, therefore convert to decimal and display
    //Make sure we are never over 1279
    twoscomp = (twoscomp & 0B01111111);
    //Cast as int and return
    int value = (int)(twoscomp);
    return value;
     6fe:	8f 77       	andi	r24, 0x7F	; 127
     700:	99 27       	eor	r25, r25
  }
}
     702:	08 95       	ret

00000704 <FUNCtwocomptoint10bit>:
// Two's Complement function, shifts 10 bit binary to signed integers (-512 to 512)
int FUNCtwocomptoint10bit(int twoscomp){
	
  //Let's see if the byte is negative
  if (twoscomp & 0x200){
     704:	91 ff       	sbrs	r25, 1
     706:	08 c0       	rjmp	.+16     	; 0x718 <FUNCtwocomptoint10bit+0x14>
    //Invert
    twoscomp = ~twoscomp + 1;
     708:	91 95       	neg	r25
     70a:	81 95       	neg	r24
     70c:	91 09       	sbc	r25, r1
    twoscomp = (twoscomp & 0x3FF);
    //Cast as int and multiply by negative one
    int value = (int)(twoscomp)*(-1);
     70e:	93 70       	andi	r25, 0x03	; 3
     710:	91 95       	neg	r25
     712:	81 95       	neg	r24
     714:	91 09       	sbc	r25, r1
    return value;
     716:	08 95       	ret
    //Byte is non-negative, therefore convert to decimal and display
    twoscomp = (twoscomp & 0x1FF);
    //Cast as int and return
    //Serial.println(twoscomp);
    int value = (int)(twoscomp);
    return value;
     718:	91 70       	andi	r25, 0x01	; 1
  }
}
     71a:	08 95       	ret

0000071c <FUNCtwocomptointnbit>:
// Two's Complement function, nbits
int FUNCtwocomptointnbit(int twoscomp, uint8_t nbits){
  unsigned int signmask;
  unsigned int mask;
  signmask = (1<<(nbits-1));
     71c:	61 50       	subi	r22, 0x01	; 1
     71e:	21 e0       	ldi	r18, 0x01	; 1
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	02 c0       	rjmp	.+4      	; 0x728 <FUNCtwocomptointnbit+0xc>
     724:	22 0f       	add	r18, r18
     726:	33 1f       	adc	r19, r19
     728:	6a 95       	dec	r22
     72a:	e2 f7       	brpl	.-8      	; 0x724 <FUNCtwocomptointnbit+0x8>
  mask=signmask-1;
     72c:	a9 01       	movw	r20, r18
     72e:	41 50       	subi	r20, 0x01	; 1
     730:	51 09       	sbc	r21, r1
  //Let's see if the number is negative
  if (twoscomp & signmask){
     732:	b9 01       	movw	r22, r18
     734:	68 23       	and	r22, r24
     736:	79 23       	and	r23, r25
     738:	67 2b       	or	r22, r23
     73a:	29 f0       	breq	.+10     	; 0x746 <FUNCtwocomptointnbit+0x2a>
	twoscomp &= mask;
    twoscomp -= signmask;
     73c:	84 23       	and	r24, r20
     73e:	95 23       	and	r25, r21
     740:	82 1b       	sub	r24, r18
     742:	93 0b       	sbc	r25, r19
     744:	08 95       	ret
  }else{
	  twoscomp &= mask;
     746:	84 23       	and	r24, r20
     748:	95 23       	and	r25, r21
  }
  return twoscomp;
}
     74a:	08 95       	ret

0000074c <FUNCdec2bcd>:
// Convert Decimal to Binary Coded Decimal (BCD)
char FUNCdec2bcd(char num)
{
	return ((num/10 * 16) + (num % 10));
     74c:	9d ec       	ldi	r25, 0xCD	; 205
     74e:	89 9f       	mul	r24, r25
     750:	91 2d       	mov	r25, r1
     752:	11 24       	eor	r1, r1
     754:	96 95       	lsr	r25
     756:	96 95       	lsr	r25
     758:	96 95       	lsr	r25
     75a:	39 2f       	mov	r19, r25
     75c:	33 0f       	add	r19, r19
     75e:	23 2f       	mov	r18, r19
     760:	22 0f       	add	r18, r18
     762:	22 0f       	add	r18, r18
     764:	23 0f       	add	r18, r19
     766:	82 1b       	sub	r24, r18
}
     768:	20 e1       	ldi	r18, 0x10	; 16
     76a:	92 9f       	mul	r25, r18
     76c:	80 0d       	add	r24, r0
     76e:	11 24       	eor	r1, r1
     770:	08 95       	ret

00000772 <FUNCbcd2dec>:
// Convert Binary Coded Decimal (BCD) to Decimal
char FUNCbcd2dec(char num)
{
	return ((num/16 * 10) + (num % 16));
     772:	98 2f       	mov	r25, r24
     774:	92 95       	swap	r25
     776:	9f 70       	andi	r25, 0x0F	; 15
     778:	99 0f       	add	r25, r25
     77a:	29 2f       	mov	r18, r25
     77c:	22 0f       	add	r18, r18
     77e:	22 0f       	add	r18, r18
     780:	92 0f       	add	r25, r18
     782:	8f 70       	andi	r24, 0x0F	; 15
}
     784:	89 0f       	add	r24, r25
     786:	08 95       	ret

00000788 <FUNCresizestr>:
char* FUNCresizestr(char *string, int size)
{
     788:	fc 01       	movw	r30, r24
	int i;
	FUNCstr[size]='\0';
     78a:	db 01       	movw	r26, r22
     78c:	a1 58       	subi	r26, 0x81	; 129
     78e:	bd 4f       	sbci	r27, 0xFD	; 253
     790:	1c 92       	st	X, r1
	for(i=0;i<size;i++){
     792:	16 16       	cp	r1, r22
     794:	17 06       	cpc	r1, r23
     796:	14 f5       	brge	.+68     	; 0x7dc <FUNCresizestr+0x54>
		if(*(string+i)=='\0'){
     798:	90 81       	ld	r25, Z
     79a:	91 11       	cpse	r25, r1
     79c:	0c c0       	rjmp	.+24     	; 0x7b6 <FUNCresizestr+0x2e>
     79e:	17 c0       	rjmp	.+46     	; 0x7ce <FUNCresizestr+0x46>
     7a0:	91 91       	ld	r25, Z+
     7a2:	91 11       	cpse	r25, r1
     7a4:	0d c0       	rjmp	.+26     	; 0x7c0 <FUNCresizestr+0x38>
     7a6:	15 c0       	rjmp	.+42     	; 0x7d2 <FUNCresizestr+0x4a>
			for(;i<size;i++){
				FUNCstr[i]=' ';
     7a8:	81 93       	st	Z+, r24
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
		if(*(string+i)=='\0'){
			for(;i<size;i++){
     7aa:	2f 5f       	subi	r18, 0xFF	; 255
     7ac:	3f 4f       	sbci	r19, 0xFF	; 255
     7ae:	26 17       	cp	r18, r22
     7b0:	37 07       	cpc	r19, r23
     7b2:	d4 f3       	brlt	.-12     	; 0x7a8 <FUNCresizestr+0x20>
     7b4:	13 c0       	rjmp	.+38     	; 0x7dc <FUNCresizestr+0x54>
     7b6:	af e7       	ldi	r26, 0x7F	; 127
     7b8:	b2 e0       	ldi	r27, 0x02	; 2
     7ba:	31 96       	adiw	r30, 0x01	; 1
char* FUNCresizestr(char *string, int size)
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
		if(*(string+i)=='\0'){
     7bc:	20 e0       	ldi	r18, 0x00	; 0
     7be:	30 e0       	ldi	r19, 0x00	; 0
			for(;i<size;i++){
				FUNCstr[i]=' ';
			}
			break;
		}
		FUNCstr[i]=*(string+i);
     7c0:	9d 93       	st	X+, r25
}
char* FUNCresizestr(char *string, int size)
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
     7c2:	2f 5f       	subi	r18, 0xFF	; 255
     7c4:	3f 4f       	sbci	r19, 0xFF	; 255
     7c6:	62 17       	cp	r22, r18
     7c8:	73 07       	cpc	r23, r19
     7ca:	51 f7       	brne	.-44     	; 0x7a0 <FUNCresizestr+0x18>
     7cc:	07 c0       	rjmp	.+14     	; 0x7dc <FUNCresizestr+0x54>
     7ce:	20 e0       	ldi	r18, 0x00	; 0
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	f9 01       	movw	r30, r18
     7d4:	e1 58       	subi	r30, 0x81	; 129
     7d6:	fd 4f       	sbci	r31, 0xFD	; 253
		if(*(string+i)=='\0'){
			for(;i<size;i++){
				FUNCstr[i]=' ';
     7d8:	80 e2       	ldi	r24, 0x20	; 32
     7da:	e6 cf       	rjmp	.-52     	; 0x7a8 <FUNCresizestr+0x20>
			break;
		}
		FUNCstr[i]=*(string+i);
	}
	return FUNCstr;
}
     7dc:	8f e7       	ldi	r24, 0x7F	; 127
     7de:	92 e0       	ldi	r25, 0x02	; 2
     7e0:	08 95       	ret

000007e2 <FUNCtrimmer>:
long FUNCtrimmer(long x, long in_min, long in_max, long out_min, long out_max)
/*
	same as arduino map function.
*/
{
     7e2:	4f 92       	push	r4
     7e4:	5f 92       	push	r5
     7e6:	6f 92       	push	r6
     7e8:	7f 92       	push	r7
     7ea:	af 92       	push	r10
     7ec:	bf 92       	push	r11
     7ee:	cf 92       	push	r12
     7f0:	df 92       	push	r13
     7f2:	ef 92       	push	r14
     7f4:	ff 92       	push	r15
     7f6:	0f 93       	push	r16
     7f8:	1f 93       	push	r17
     7fa:	cf 93       	push	r28
     7fc:	df 93       	push	r29
     7fe:	cd b7       	in	r28, 0x3d	; 61
     800:	de b7       	in	r29, 0x3e	; 62
     802:	29 01       	movw	r4, r18
     804:	3a 01       	movw	r6, r20
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     806:	9b 01       	movw	r18, r22
     808:	ac 01       	movw	r20, r24
     80a:	24 19       	sub	r18, r4
     80c:	35 09       	sbc	r19, r5
     80e:	46 09       	sbc	r20, r6
     810:	57 09       	sbc	r21, r7
     812:	89 89       	ldd	r24, Y+17	; 0x11
     814:	9a 89       	ldd	r25, Y+18	; 0x12
     816:	ab 89       	ldd	r26, Y+19	; 0x13
     818:	bc 89       	ldd	r27, Y+20	; 0x14
     81a:	bc 01       	movw	r22, r24
     81c:	cd 01       	movw	r24, r26
     81e:	6a 19       	sub	r22, r10
     820:	7b 09       	sbc	r23, r11
     822:	8c 09       	sbc	r24, r12
     824:	9d 09       	sbc	r25, r13
     826:	0e 94 ff 12 	call	0x25fe	; 0x25fe <__mulsi3>
     82a:	a8 01       	movw	r20, r16
     82c:	97 01       	movw	r18, r14
     82e:	24 19       	sub	r18, r4
     830:	35 09       	sbc	r19, r5
     832:	46 09       	sbc	r20, r6
     834:	57 09       	sbc	r21, r7
     836:	0e 94 57 13 	call	0x26ae	; 0x26ae <__divmodsi4>
     83a:	ca 01       	movw	r24, r20
     83c:	b9 01       	movw	r22, r18
     83e:	6a 0d       	add	r22, r10
     840:	7b 1d       	adc	r23, r11
     842:	8c 1d       	adc	r24, r12
     844:	9d 1d       	adc	r25, r13
}
     846:	df 91       	pop	r29
     848:	cf 91       	pop	r28
     84a:	1f 91       	pop	r17
     84c:	0f 91       	pop	r16
     84e:	ff 90       	pop	r15
     850:	ef 90       	pop	r14
     852:	df 90       	pop	r13
     854:	cf 90       	pop	r12
     856:	bf 90       	pop	r11
     858:	af 90       	pop	r10
     85a:	7f 90       	pop	r7
     85c:	6f 90       	pop	r6
     85e:	5f 90       	pop	r5
     860:	4f 90       	pop	r4
     862:	08 95       	ret

00000864 <Pwr>:
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
     864:	70 e0       	ldi	r23, 0x00	; 0
     866:	61 15       	cp	r22, r1
     868:	71 05       	cpc	r23, r1
     86a:	99 f0       	breq	.+38     	; 0x892 <Pwr+0x2e>
     86c:	41 e0       	ldi	r20, 0x01	; 1
     86e:	50 e0       	ldi	r21, 0x00	; 0
     870:	21 e0       	ldi	r18, 0x01	; 1
     872:	30 e0       	ldi	r19, 0x00	; 0
        p = p * bs;
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	fa 01       	movw	r30, r20
     878:	e8 9f       	mul	r30, r24
     87a:	a0 01       	movw	r20, r0
     87c:	e9 9f       	mul	r30, r25
     87e:	50 0d       	add	r21, r0
     880:	f8 9f       	mul	r31, r24
     882:	50 0d       	add	r21, r0
     884:	11 24       	eor	r1, r1
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
     886:	2f 5f       	subi	r18, 0xFF	; 255
     888:	3f 4f       	sbci	r19, 0xFF	; 255
     88a:	62 17       	cp	r22, r18
     88c:	73 07       	cpc	r23, r19
     88e:	98 f7       	brcc	.-26     	; 0x876 <Pwr+0x12>
     890:	02 c0       	rjmp	.+4      	; 0x896 <Pwr+0x32>
}
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
     892:	41 e0       	ldi	r20, 0x01	; 1
     894:	50 e0       	ldi	r21, 0x00	; 0
    for (i = 1; i <= n; ++i)
        p = p * bs;
    return p;
}
     896:	ca 01       	movw	r24, r20
     898:	08 95       	ret

0000089a <StringLength>:
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
	while ( string[count] != '\0' )
     89a:	fc 01       	movw	r30, r24
     89c:	20 81       	ld	r18, Z
     89e:	22 23       	and	r18, r18
     8a0:	41 f0       	breq	.+16     	; 0x8b2 <StringLength+0x18>
     8a2:	31 96       	adiw	r30, 0x01	; 1
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	90 e0       	ldi	r25, 0x00	; 0
		++count;
     8a8:	01 96       	adiw	r24, 0x01	; 1
}
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
	while ( string[count] != '\0' )
     8aa:	21 91       	ld	r18, Z+
     8ac:	21 11       	cpse	r18, r1
     8ae:	fc cf       	rjmp	.-8      	; 0x8a8 <StringLength+0xe>
     8b0:	08 95       	ret
    return p;
}
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	90 e0       	ldi	r25, 0x00	; 0
	while ( string[count] != '\0' )
		++count;
	return count;
}
     8b6:	08 95       	ret

000008b8 <FUNCtrim>:
	Reverse(FUNCstr);
	return FUNCstr;
}
// trim: remove trailing blanks, tabs, newlines
int FUNCtrim(char s[])
{
     8b8:	cf 93       	push	r28
     8ba:	df 93       	push	r29
     8bc:	ec 01       	movw	r28, r24
	int n;
	for (n = StringLength(s)-1; n >= 0; n--)
     8be:	ed df       	rcall	.-38     	; 0x89a <StringLength>
     8c0:	9c 01       	movw	r18, r24
     8c2:	21 50       	subi	r18, 0x01	; 1
     8c4:	31 09       	sbc	r19, r1
     8c6:	62 f0       	brmi	.+24     	; 0x8e0 <FUNCtrim+0x28>
     8c8:	fe 01       	movw	r30, r28
     8ca:	e8 0f       	add	r30, r24
     8cc:	f9 1f       	adc	r31, r25
		if (s[n] != ' ' && s[n] != '\t' && s[n] != '\n')
     8ce:	92 91       	ld	r25, -Z
     8d0:	90 32       	cpi	r25, 0x20	; 32
     8d2:	19 f0       	breq	.+6      	; 0x8da <FUNCtrim+0x22>
     8d4:	99 50       	subi	r25, 0x09	; 9
     8d6:	92 30       	cpi	r25, 0x02	; 2
     8d8:	18 f4       	brcc	.+6      	; 0x8e0 <FUNCtrim+0x28>
}
// trim: remove trailing blanks, tabs, newlines
int FUNCtrim(char s[])
{
	int n;
	for (n = StringLength(s)-1; n >= 0; n--)
     8da:	21 50       	subi	r18, 0x01	; 1
     8dc:	31 09       	sbc	r19, r1
     8de:	b8 f7       	brcc	.-18     	; 0x8ce <FUNCtrim+0x16>
		if (s[n] != ' ' && s[n] != '\t' && s[n] != '\n')
			break;
	s[n+1] = '\0';
     8e0:	c2 0f       	add	r28, r18
     8e2:	d3 1f       	adc	r29, r19
     8e4:	19 82       	std	Y+1, r1	; 0x01
	return n;
}
     8e6:	c9 01       	movw	r24, r18
     8e8:	df 91       	pop	r29
     8ea:	cf 91       	pop	r28
     8ec:	08 95       	ret

000008ee <Reverse>:
		++count;
	return count;
}
// reverse: reverse string s in place
void Reverse(char s[])
{
     8ee:	cf 93       	push	r28
     8f0:	df 93       	push	r29
     8f2:	ec 01       	movw	r28, r24
	int c, i, j;
	for (i = 0, j = StringLength(s)-1; i < j; i++, j--){
     8f4:	d2 df       	rcall	.-92     	; 0x89a <StringLength>
     8f6:	9c 01       	movw	r18, r24
     8f8:	21 50       	subi	r18, 0x01	; 1
     8fa:	31 09       	sbc	r19, r1
     8fc:	12 16       	cp	r1, r18
     8fe:	13 06       	cpc	r1, r19
     900:	84 f4       	brge	.+32     	; 0x922 <Reverse+0x34>
     902:	de 01       	movw	r26, r28
     904:	a8 0f       	add	r26, r24
     906:	b9 1f       	adc	r27, r25
     908:	fe 01       	movw	r30, r28
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	90 e0       	ldi	r25, 0x00	; 0
		c = s[i];
     90e:	40 81       	ld	r20, Z
		s[i] = s[j];
     910:	5e 91       	ld	r21, -X
     912:	51 93       	st	Z+, r21
		s[j] = c;
     914:	4c 93       	st	X, r20
}
// reverse: reverse string s in place
void Reverse(char s[])
{
	int c, i, j;
	for (i = 0, j = StringLength(s)-1; i < j; i++, j--){
     916:	01 96       	adiw	r24, 0x01	; 1
     918:	21 50       	subi	r18, 0x01	; 1
     91a:	31 09       	sbc	r19, r1
     91c:	82 17       	cp	r24, r18
     91e:	93 07       	cpc	r25, r19
     920:	b4 f3       	brlt	.-20     	; 0x90e <Reverse+0x20>
		c = s[i];
		s[i] = s[j];
		s[j] = c;
	}
}
     922:	df 91       	pop	r29
     924:	cf 91       	pop	r28
     926:	08 95       	ret

00000928 <FUNCi32toa>:
				v[j+gap] = temp;
			}
}
// i32toa: convert n to characters in s
char* FUNCi32toa(int32_t n)
{
     928:	8f 92       	push	r8
     92a:	9f 92       	push	r9
     92c:	af 92       	push	r10
     92e:	bf 92       	push	r11
     930:	cf 92       	push	r12
     932:	df 92       	push	r13
     934:	ef 92       	push	r14
     936:	ff 92       	push	r15
     938:	0f 93       	push	r16
     93a:	1f 93       	push	r17
     93c:	cf 93       	push	r28
     93e:	df 93       	push	r29
     940:	6b 01       	movw	r12, r22
     942:	7c 01       	movw	r14, r24
     944:	dc 01       	movw	r26, r24
     946:	cb 01       	movw	r24, r22
     948:	ff 20       	and	r15, r15
     94a:	3c f4       	brge	.+14     	; 0x95a <FUNCi32toa+0x32>
     94c:	88 27       	eor	r24, r24
     94e:	99 27       	eor	r25, r25
     950:	dc 01       	movw	r26, r24
     952:	8c 19       	sub	r24, r12
     954:	9d 09       	sbc	r25, r13
     956:	ae 09       	sbc	r26, r14
     958:	bf 09       	sbc	r27, r15
     95a:	bc 01       	movw	r22, r24
     95c:	cd 01       	movw	r24, r26
     95e:	10 e0       	ldi	r17, 0x00	; 0
	int32_t sign;
	if ((sign = n) < 0) // record sign
	n = -n; // make n positive
	i = 0;
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
     960:	0f 2e       	mov	r0, r31
     962:	fa e0       	ldi	r31, 0x0A	; 10
     964:	8f 2e       	mov	r8, r31
     966:	91 2c       	mov	r9, r1
     968:	a1 2c       	mov	r10, r1
     96a:	b1 2c       	mov	r11, r1
     96c:	f0 2d       	mov	r31, r0
     96e:	01 c0       	rjmp	.+2      	; 0x972 <FUNCi32toa+0x4a>
     970:	10 2f       	mov	r17, r16
     972:	01 e0       	ldi	r16, 0x01	; 1
     974:	01 0f       	add	r16, r17
     976:	c1 2f       	mov	r28, r17
     978:	d0 e0       	ldi	r29, 0x00	; 0
     97a:	c1 58       	subi	r28, 0x81	; 129
     97c:	dd 4f       	sbci	r29, 0xFD	; 253
     97e:	a5 01       	movw	r20, r10
     980:	94 01       	movw	r18, r8
     982:	0e 94 57 13 	call	0x26ae	; 0x26ae <__divmodsi4>
     986:	60 5d       	subi	r22, 0xD0	; 208
     988:	68 83       	st	Y, r22
	}while ((n /= 10) > 0); // delete it
     98a:	62 2f       	mov	r22, r18
     98c:	73 2f       	mov	r23, r19
     98e:	84 2f       	mov	r24, r20
     990:	95 2f       	mov	r25, r21
     992:	16 16       	cp	r1, r22
     994:	17 06       	cpc	r1, r23
     996:	18 06       	cpc	r1, r24
     998:	19 06       	cpc	r1, r25
     99a:	54 f3       	brlt	.-44     	; 0x970 <FUNCi32toa+0x48>
	if (sign < 0)
     99c:	ff 20       	and	r15, r15
     99e:	44 f4       	brge	.+16     	; 0x9b0 <FUNCi32toa+0x88>
	FUNCstr[i++] = '-';
     9a0:	e0 2f       	mov	r30, r16
     9a2:	f0 e0       	ldi	r31, 0x00	; 0
     9a4:	e1 58       	subi	r30, 0x81	; 129
     9a6:	fd 4f       	sbci	r31, 0xFD	; 253
     9a8:	8d e2       	ldi	r24, 0x2D	; 45
     9aa:	80 83       	st	Z, r24
     9ac:	02 e0       	ldi	r16, 0x02	; 2
     9ae:	01 0f       	add	r16, r17
	FUNCstr[i] = '\0';
     9b0:	e0 2f       	mov	r30, r16
     9b2:	f0 e0       	ldi	r31, 0x00	; 0
     9b4:	e1 58       	subi	r30, 0x81	; 129
     9b6:	fd 4f       	sbci	r31, 0xFD	; 253
     9b8:	10 82       	st	Z, r1
	Reverse(FUNCstr);
     9ba:	8f e7       	ldi	r24, 0x7F	; 127
     9bc:	92 e0       	ldi	r25, 0x02	; 2
     9be:	97 df       	rcall	.-210    	; 0x8ee <Reverse>
	return FUNCstr;
}
     9c0:	8f e7       	ldi	r24, 0x7F	; 127
     9c2:	92 e0       	ldi	r25, 0x02	; 2
     9c4:	df 91       	pop	r29
     9c6:	cf 91       	pop	r28
     9c8:	1f 91       	pop	r17
     9ca:	0f 91       	pop	r16
     9cc:	ff 90       	pop	r15
     9ce:	ef 90       	pop	r14
     9d0:	df 90       	pop	r13
     9d2:	cf 90       	pop	r12
     9d4:	bf 90       	pop	r11
     9d6:	af 90       	pop	r10
     9d8:	9f 90       	pop	r9
     9da:	8f 90       	pop	r8
     9dc:	08 95       	ret

000009de <FUNCi16toa>:
// i16toa: convert n to characters in s
char* FUNCi16toa(int16_t n)
{
     9de:	0f 93       	push	r16
     9e0:	1f 93       	push	r17
     9e2:	cf 93       	push	r28
     9e4:	df 93       	push	r29
     9e6:	ec 01       	movw	r28, r24
     9e8:	99 23       	and	r25, r25
     9ea:	24 f4       	brge	.+8      	; 0x9f4 <FUNCi16toa+0x16>
     9ec:	88 27       	eor	r24, r24
     9ee:	99 27       	eor	r25, r25
     9f0:	8c 1b       	sub	r24, r28
     9f2:	9d 0b       	sbc	r25, r29
     9f4:	20 e0       	ldi	r18, 0x00	; 0
	int16_t sign;
	if ((sign = n) < 0) // record sign
		n = -n; // make n positive
	i = 0;
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
     9f6:	0a e0       	ldi	r16, 0x0A	; 10
     9f8:	10 e0       	ldi	r17, 0x00	; 0
     9fa:	01 c0       	rjmp	.+2      	; 0x9fe <FUNCi16toa+0x20>
     9fc:	23 2f       	mov	r18, r19
     9fe:	31 e0       	ldi	r19, 0x01	; 1
     a00:	32 0f       	add	r19, r18
     a02:	e2 2f       	mov	r30, r18
     a04:	f0 e0       	ldi	r31, 0x00	; 0
     a06:	e1 58       	subi	r30, 0x81	; 129
     a08:	fd 4f       	sbci	r31, 0xFD	; 253
     a0a:	b8 01       	movw	r22, r16
     a0c:	0e 94 22 13 	call	0x2644	; 0x2644 <__divmodhi4>
     a10:	80 5d       	subi	r24, 0xD0	; 208
     a12:	80 83       	st	Z, r24
	}while ((n /= 10) > 0); // delete it
     a14:	86 2f       	mov	r24, r22
     a16:	97 2f       	mov	r25, r23
     a18:	18 16       	cp	r1, r24
     a1a:	19 06       	cpc	r1, r25
     a1c:	7c f3       	brlt	.-34     	; 0x9fc <FUNCi16toa+0x1e>
	if (sign < 0)
     a1e:	dd 23       	and	r29, r29
     a20:	44 f4       	brge	.+16     	; 0xa32 <FUNCi16toa+0x54>
		FUNCstr[i++] = '-';
     a22:	e3 2f       	mov	r30, r19
     a24:	f0 e0       	ldi	r31, 0x00	; 0
     a26:	e1 58       	subi	r30, 0x81	; 129
     a28:	fd 4f       	sbci	r31, 0xFD	; 253
     a2a:	8d e2       	ldi	r24, 0x2D	; 45
     a2c:	80 83       	st	Z, r24
     a2e:	32 e0       	ldi	r19, 0x02	; 2
     a30:	32 0f       	add	r19, r18
	FUNCstr[i] = '\0';
     a32:	e3 2f       	mov	r30, r19
     a34:	f0 e0       	ldi	r31, 0x00	; 0
     a36:	e1 58       	subi	r30, 0x81	; 129
     a38:	fd 4f       	sbci	r31, 0xFD	; 253
     a3a:	10 82       	st	Z, r1
	Reverse(FUNCstr);
     a3c:	8f e7       	ldi	r24, 0x7F	; 127
     a3e:	92 e0       	ldi	r25, 0x02	; 2
     a40:	56 df       	rcall	.-340    	; 0x8ee <Reverse>
	return FUNCstr;
}
     a42:	8f e7       	ldi	r24, 0x7F	; 127
     a44:	92 e0       	ldi	r25, 0x02	; 2
     a46:	df 91       	pop	r29
     a48:	cf 91       	pop	r28
     a4a:	1f 91       	pop	r17
     a4c:	0f 91       	pop	r16
     a4e:	08 95       	ret

00000a50 <FUNCui16toa>:
// ui16toa: convert n to characters in s
char* FUNCui16toa(uint16_t n)
{
     a50:	cf 93       	push	r28
     a52:	ac 01       	movw	r20, r24
	uint8_t i;
	i = 0;
     a54:	e0 e0       	ldi	r30, 0x00	; 0
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
     a56:	c1 e0       	ldi	r28, 0x01	; 1
     a58:	ce 0f       	add	r28, r30
     a5a:	f0 e0       	ldi	r31, 0x00	; 0
     a5c:	e1 58       	subi	r30, 0x81	; 129
     a5e:	fd 4f       	sbci	r31, 0xFD	; 253
     a60:	9a 01       	movw	r18, r20
     a62:	ad ec       	ldi	r26, 0xCD	; 205
     a64:	bc ec       	ldi	r27, 0xCC	; 204
     a66:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <__umulhisi3>
     a6a:	96 95       	lsr	r25
     a6c:	87 95       	ror	r24
     a6e:	96 95       	lsr	r25
     a70:	87 95       	ror	r24
     a72:	96 95       	lsr	r25
     a74:	87 95       	ror	r24
     a76:	9c 01       	movw	r18, r24
     a78:	22 0f       	add	r18, r18
     a7a:	33 1f       	adc	r19, r19
     a7c:	88 0f       	add	r24, r24
     a7e:	99 1f       	adc	r25, r25
     a80:	88 0f       	add	r24, r24
     a82:	99 1f       	adc	r25, r25
     a84:	88 0f       	add	r24, r24
     a86:	99 1f       	adc	r25, r25
     a88:	82 0f       	add	r24, r18
     a8a:	93 1f       	adc	r25, r19
     a8c:	9a 01       	movw	r18, r20
     a8e:	28 1b       	sub	r18, r24
     a90:	39 0b       	sbc	r19, r25
     a92:	c9 01       	movw	r24, r18
     a94:	80 5d       	subi	r24, 0xD0	; 208
     a96:	80 83       	st	Z, r24
	}while ((n /= 10) > 0); // delete it
     a98:	9a 01       	movw	r18, r20
     a9a:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <__umulhisi3>
     a9e:	ac 01       	movw	r20, r24
     aa0:	56 95       	lsr	r21
     aa2:	47 95       	ror	r20
     aa4:	56 95       	lsr	r21
     aa6:	47 95       	ror	r20
     aa8:	56 95       	lsr	r21
     aaa:	47 95       	ror	r20
char* FUNCui16toa(uint16_t n)
{
	uint8_t i;
	i = 0;
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
     aac:	ec 2f       	mov	r30, r28
	}while ((n /= 10) > 0); // delete it
     aae:	41 15       	cp	r20, r1
     ab0:	51 05       	cpc	r21, r1
     ab2:	89 f6       	brne	.-94     	; 0xa56 <FUNCui16toa+0x6>
	FUNCstr[i] = '\0';
     ab4:	ec 2f       	mov	r30, r28
     ab6:	f0 e0       	ldi	r31, 0x00	; 0
     ab8:	e1 58       	subi	r30, 0x81	; 129
     aba:	fd 4f       	sbci	r31, 0xFD	; 253
     abc:	10 82       	st	Z, r1
	Reverse(FUNCstr);
     abe:	8f e7       	ldi	r24, 0x7F	; 127
     ac0:	92 e0       	ldi	r25, 0x02	; 2
     ac2:	15 df       	rcall	.-470    	; 0x8ee <Reverse>
	return FUNCstr;
}
     ac4:	8f e7       	ldi	r24, 0x7F	; 127
     ac6:	92 e0       	ldi	r25, 0x02	; 2
     ac8:	cf 91       	pop	r28
     aca:	08 95       	ret

00000acc <FUNCbcd2bin>:
		s[j] = c;
	}
}
unsigned char FUNCbcd2bin(unsigned char val)
{
	return (val & 0x0f) + (val >> 4) * 10;
     acc:	98 2f       	mov	r25, r24
     ace:	92 95       	swap	r25
     ad0:	9f 70       	andi	r25, 0x0F	; 15
     ad2:	99 0f       	add	r25, r25
     ad4:	29 2f       	mov	r18, r25
     ad6:	22 0f       	add	r18, r18
     ad8:	22 0f       	add	r18, r18
     ada:	92 0f       	add	r25, r18
     adc:	8f 70       	andi	r24, 0x0F	; 15
}
     ade:	89 0f       	add	r24, r25
     ae0:	08 95       	ret

00000ae2 <FUNCbin2bcd>:
unsigned char FUNCbin2bcd(unsigned val)
{
     ae2:	ac 01       	movw	r20, r24
	return ((val / 10) << 4) + val % 10;
     ae4:	9c 01       	movw	r18, r24
     ae6:	ad ec       	ldi	r26, 0xCD	; 205
     ae8:	bc ec       	ldi	r27, 0xCC	; 204
     aea:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <__umulhisi3>
     aee:	96 95       	lsr	r25
     af0:	87 95       	ror	r24
     af2:	96 95       	lsr	r25
     af4:	87 95       	ror	r24
     af6:	96 95       	lsr	r25
     af8:	87 95       	ror	r24
     afa:	bc 01       	movw	r22, r24
     afc:	66 0f       	add	r22, r22
     afe:	77 1f       	adc	r23, r23
     b00:	9c 01       	movw	r18, r24
     b02:	22 0f       	add	r18, r18
     b04:	33 1f       	adc	r19, r19
     b06:	22 0f       	add	r18, r18
     b08:	33 1f       	adc	r19, r19
     b0a:	22 0f       	add	r18, r18
     b0c:	33 1f       	adc	r19, r19
     b0e:	26 0f       	add	r18, r22
     b10:	37 1f       	adc	r19, r23
     b12:	42 1b       	sub	r20, r18
     b14:	53 0b       	sbc	r21, r19
}
     b16:	34 2f       	mov	r19, r20
     b18:	20 e1       	ldi	r18, 0x10	; 16
     b1a:	82 9f       	mul	r24, r18
     b1c:	30 0d       	add	r19, r0
     b1e:	11 24       	eor	r1, r1
     b20:	83 2f       	mov	r24, r19
     b22:	08 95       	ret

00000b24 <FUNCgcd1>:
long FUNCgcd1(long a, long b)
{
     b24:	cf 92       	push	r12
     b26:	df 92       	push	r13
     b28:	ef 92       	push	r14
     b2a:	ff 92       	push	r15
     b2c:	cf 93       	push	r28
     b2e:	df 93       	push	r29
     b30:	cd b7       	in	r28, 0x3d	; 61
     b32:	de b7       	in	r29, 0x3e	; 62
     b34:	28 97       	sbiw	r28, 0x08	; 8
     b36:	0f b6       	in	r0, 0x3f	; 63
     b38:	f8 94       	cli
     b3a:	de bf       	out	0x3e, r29	; 62
     b3c:	0f be       	out	0x3f, r0	; 63
     b3e:	cd bf       	out	0x3d, r28	; 61
     b40:	6b 01       	movw	r12, r22
     b42:	7c 01       	movw	r14, r24
     b44:	69 83       	std	Y+1, r22	; 0x01
     b46:	7a 83       	std	Y+2, r23	; 0x02
     b48:	8b 83       	std	Y+3, r24	; 0x03
     b4a:	9c 83       	std	Y+4, r25	; 0x04
     b4c:	2d 83       	std	Y+5, r18	; 0x05
     b4e:	3e 83       	std	Y+6, r19	; 0x06
     b50:	4f 83       	std	Y+7, r20	; 0x07
     b52:	58 87       	std	Y+8, r21	; 0x08
	long r;
	if (a < b)
     b54:	c2 16       	cp	r12, r18
     b56:	d3 06       	cpc	r13, r19
     b58:	e4 06       	cpc	r14, r20
     b5a:	f5 06       	cpc	r15, r21
     b5c:	34 f4       	brge	.+12     	; 0xb6a <FUNCgcd1+0x46>
		FUNCswap(&a, &b);
     b5e:	be 01       	movw	r22, r28
     b60:	6b 5f       	subi	r22, 0xFB	; 251
     b62:	7f 4f       	sbci	r23, 0xFF	; 255
     b64:	ce 01       	movw	r24, r28
     b66:	01 96       	adiw	r24, 0x01	; 1
     b68:	85 dc       	rcall	.-1782   	; 0x474 <FUNCswap>
	if (!b){
     b6a:	8d 81       	ldd	r24, Y+5	; 0x05
     b6c:	9e 81       	ldd	r25, Y+6	; 0x06
     b6e:	af 81       	ldd	r26, Y+7	; 0x07
     b70:	b8 85       	ldd	r27, Y+8	; 0x08
     b72:	89 2b       	or	r24, r25
     b74:	8a 2b       	or	r24, r26
     b76:	8b 2b       	or	r24, r27
     b78:	71 f4       	brne	.+28     	; 0xb96 <FUNCgcd1+0x72>
		while ((r = a % b) != 0) {
     b7a:	69 81       	ldd	r22, Y+1	; 0x01
     b7c:	7a 81       	ldd	r23, Y+2	; 0x02
     b7e:	8b 81       	ldd	r24, Y+3	; 0x03
     b80:	9c 81       	ldd	r25, Y+4	; 0x04
     b82:	20 e0       	ldi	r18, 0x00	; 0
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	a9 01       	movw	r20, r18
     b88:	0e 94 57 13 	call	0x26ae	; 0x26ae <__divmodsi4>
     b8c:	61 15       	cp	r22, r1
     b8e:	71 05       	cpc	r23, r1
     b90:	81 05       	cpc	r24, r1
     b92:	91 05       	cpc	r25, r1
     b94:	29 f4       	brne	.+10     	; 0xba0 <FUNCgcd1+0x7c>
			a = b;
			b = r;
		}
	}	
	return b;
     b96:	6d 81       	ldd	r22, Y+5	; 0x05
     b98:	7e 81       	ldd	r23, Y+6	; 0x06
     b9a:	8f 81       	ldd	r24, Y+7	; 0x07
     b9c:	98 85       	ldd	r25, Y+8	; 0x08
     b9e:	05 c0       	rjmp	.+10     	; 0xbaa <FUNCgcd1+0x86>
	if (a < b)
		FUNCswap(&a, &b);
	if (!b){
		while ((r = a % b) != 0) {
			a = b;
			b = r;
     ba0:	6d 83       	std	Y+5, r22	; 0x05
     ba2:	7e 83       	std	Y+6, r23	; 0x06
     ba4:	8f 83       	std	Y+7, r24	; 0x07
     ba6:	98 87       	std	Y+8, r25	; 0x08
     ba8:	f6 cf       	rjmp	.-20     	; 0xb96 <FUNCgcd1+0x72>
		}
	}	
	return b;
}
     baa:	28 96       	adiw	r28, 0x08	; 8
     bac:	0f b6       	in	r0, 0x3f	; 63
     bae:	f8 94       	cli
     bb0:	de bf       	out	0x3e, r29	; 62
     bb2:	0f be       	out	0x3f, r0	; 63
     bb4:	cd bf       	out	0x3d, r28	; 61
     bb6:	df 91       	pop	r29
     bb8:	cf 91       	pop	r28
     bba:	ff 90       	pop	r15
     bbc:	ef 90       	pop	r14
     bbe:	df 90       	pop	r13
     bc0:	cf 90       	pop	r12
     bc2:	08 95       	ret

00000bc4 <FUNCpincheck>:
	uint8_t lh;
	if(port & (1<<pin))
		lh=1;
	else
		lh=0;
	return lh;
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	02 c0       	rjmp	.+4      	; 0xbcc <FUNCpincheck+0x8>
     bc8:	95 95       	asr	r25
     bca:	87 95       	ror	r24
     bcc:	6a 95       	dec	r22
     bce:	e2 f7       	brpl	.-8      	; 0xbc8 <FUNCpincheck+0x4>
}
     bd0:	81 70       	andi	r24, 0x01	; 1
     bd2:	08 95       	ret

00000bd4 <FUNCprint_binary>:
char* FUNCprint_binary(uint8_t number)
{
     bd4:	ef e7       	ldi	r30, 0x7F	; 127
     bd6:	f2 e0       	ldi	r31, 0x02	; 2
	uint8_t i,c;
    for(i=128,c=0;i;i>>=1,c++){
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	20 e8       	ldi	r18, 0x80	; 128
	(number & i) ? (FUNCstr[c]='1') : (FUNCstr[c]='0');
     bdc:	50 e3       	ldi	r21, 0x30	; 48
     bde:	41 e3       	ldi	r20, 0x31	; 49
     be0:	38 2f       	mov	r19, r24
     be2:	32 23       	and	r19, r18
     be4:	11 f0       	breq	.+4      	; 0xbea <FUNCprint_binary+0x16>
     be6:	40 83       	st	Z, r20
     be8:	01 c0       	rjmp	.+2      	; 0xbec <FUNCprint_binary+0x18>
     bea:	50 83       	st	Z, r21
	return lh;
}
char* FUNCprint_binary(uint8_t number)
{
	uint8_t i,c;
    for(i=128,c=0;i;i>>=1,c++){
     bec:	26 95       	lsr	r18
     bee:	9f 5f       	subi	r25, 0xFF	; 255
     bf0:	31 96       	adiw	r30, 0x01	; 1
     bf2:	98 30       	cpi	r25, 0x08	; 8
     bf4:	a9 f7       	brne	.-22     	; 0xbe0 <FUNCprint_binary+0xc>
	(number & i) ? (FUNCstr[c]='1') : (FUNCstr[c]='0');
	}
	FUNCstr[c]='\0';
     bf6:	10 92 87 02 	sts	0x0287, r1	; 0x800287 <FUNCstr+0x8>
	return FUNCstr;
}
     bfa:	8f e7       	ldi	r24, 0x7F	; 127
     bfc:	92 e0       	ldi	r25, 0x02	; 2
     bfe:	08 95       	ret

00000c00 <FUNCmayia>:
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
     c00:	a4 2f       	mov	r26, r20
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	10 97       	sbiw	r26, 0x00	; 0
     c06:	61 f0       	breq	.+24     	; 0xc20 <FUNCmayia+0x20>
     c08:	21 e0       	ldi	r18, 0x01	; 1
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	e1 e0       	ldi	r30, 0x01	; 1
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
        p = p * bs;
     c10:	ee 0f       	add	r30, r30
     c12:	ff 1f       	adc	r31, r31
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
     c14:	2f 5f       	subi	r18, 0xFF	; 255
     c16:	3f 4f       	sbci	r19, 0xFF	; 255
     c18:	a2 17       	cp	r26, r18
     c1a:	b3 07       	cpc	r27, r19
     c1c:	c8 f7       	brcc	.-14     	; 0xc10 <FUNCmayia+0x10>
     c1e:	02 c0       	rjmp	.+4      	; 0xc24 <FUNCmayia+0x24>
}
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
     c20:	e1 e0       	ldi	r30, 0x01	; 1
     c22:	f0 e0       	ldi	r31, 0x00	; 0
unsigned int FUNCmayia(unsigned int xi, unsigned int xf, uint8_t nbits)
{//magic formula
	unsigned int mask;
	unsigned int diff;
	unsigned int trans;
	mask=Pwr(2,nbits)-1;
     c24:	31 97       	sbiw	r30, 0x01	; 1
	xi&=mask;
	xf&=mask;
     c26:	6e 23       	and	r22, r30
     c28:	7f 23       	and	r23, r31
	diff=xf^xi;
     c2a:	8e 23       	and	r24, r30
     c2c:	9f 23       	and	r25, r31
     c2e:	86 27       	eor	r24, r22
     c30:	97 27       	eor	r25, r23
	trans=diff&xf;
	return (trans<<nbits)|diff;
     c32:	68 23       	and	r22, r24
     c34:	79 23       	and	r23, r25
     c36:	02 c0       	rjmp	.+4      	; 0xc3c <FUNCmayia+0x3c>
     c38:	66 0f       	add	r22, r22
     c3a:	77 1f       	adc	r23, r23
     c3c:	4a 95       	dec	r20
     c3e:	e2 f7       	brpl	.-8      	; 0xc38 <FUNCmayia+0x38>
}
     c40:	86 2b       	or	r24, r22
     c42:	97 2b       	or	r25, r23
     c44:	08 95       	ret

00000c46 <FUNCenable>:
// uint8_t TRANupdate(struct TRAN *tr, uint8_t idata);
/*
** procedure and function
*/
FUNC FUNCenable( void )
{
     c46:	fc 01       	movw	r30, r24
	uint8_t tSREG;
	tSREG=SREG;
     c48:	9f b7       	in	r25, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
     c4a:	8f b7       	in	r24, 0x3f	; 63
     c4c:	8f 77       	andi	r24, 0x7F	; 127
     c4e:	8f bf       	out	0x3f, r24	; 63
	func.putstr=FUNCputstr;
	func.getnum=FUNCgetnum;
	func.getnumv2=FUNCgetnumv2;
	func.readint=FUNCreadint;
	*/
	SREG=tSREG;
     c50:	9f bf       	out	0x3f, r25	; 63
	/******/
	return func;
     c52:	82 e3       	ldi	r24, 0x32	; 50
     c54:	94 e0       	ldi	r25, 0x04	; 4
     c56:	91 83       	std	Z+1, r25	; 0x01
     c58:	80 83       	st	Z, r24
     c5a:	8d e4       	ldi	r24, 0x4D	; 77
     c5c:	94 e0       	ldi	r25, 0x04	; 4
     c5e:	93 83       	std	Z+3, r25	; 0x03
     c60:	82 83       	std	Z+2, r24	; 0x02
     c62:	87 e7       	ldi	r24, 0x77	; 119
     c64:	94 e0       	ldi	r25, 0x04	; 4
     c66:	95 83       	std	Z+5, r25	; 0x05
     c68:	84 83       	std	Z+4, r24	; 0x04
     c6a:	80 e0       	ldi	r24, 0x00	; 0
     c6c:	96 e0       	ldi	r25, 0x06	; 6
     c6e:	97 83       	std	Z+7, r25	; 0x07
     c70:	86 83       	std	Z+6, r24	; 0x06
     c72:	8f e1       	ldi	r24, 0x1F	; 31
     c74:	92 e0       	ldi	r25, 0x02	; 2
     c76:	91 87       	std	Z+9, r25	; 0x09
     c78:	80 87       	std	Z+8, r24	; 0x08
     c7a:	8d e2       	ldi	r24, 0x2D	; 45
     c7c:	92 e0       	ldi	r25, 0x02	; 2
     c7e:	93 87       	std	Z+11, r25	; 0x0b
     c80:	82 87       	std	Z+10, r24	; 0x0a
     c82:	8f e2       	ldi	r24, 0x2F	; 47
     c84:	92 e0       	ldi	r25, 0x02	; 2
     c86:	95 87       	std	Z+13, r25	; 0x0d
     c88:	84 87       	std	Z+12, r24	; 0x0c
     c8a:	82 e3       	ldi	r24, 0x32	; 50
     c8c:	92 e0       	ldi	r25, 0x02	; 2
     c8e:	97 87       	std	Z+15, r25	; 0x0f
     c90:	86 87       	std	Z+14, r24	; 0x0e
     c92:	85 e3       	ldi	r24, 0x35	; 53
     c94:	92 e0       	ldi	r25, 0x02	; 2
     c96:	91 8b       	std	Z+17, r25	; 0x11
     c98:	80 8b       	std	Z+16, r24	; 0x10
     c9a:	88 e3       	ldi	r24, 0x38	; 56
     c9c:	92 e0       	ldi	r25, 0x02	; 2
     c9e:	93 8b       	std	Z+19, r25	; 0x13
     ca0:	82 8b       	std	Z+18, r24	; 0x12
     ca2:	89 e2       	ldi	r24, 0x29	; 41
     ca4:	92 e0       	ldi	r25, 0x02	; 2
     ca6:	95 8b       	std	Z+21, r25	; 0x15
     ca8:	84 8b       	std	Z+20, r24	; 0x14
     caa:	8b e2       	ldi	r24, 0x2B	; 43
     cac:	92 e0       	ldi	r25, 0x02	; 2
     cae:	97 8b       	std	Z+23, r25	; 0x17
     cb0:	86 8b       	std	Z+22, r24	; 0x16
     cb2:	8a e3       	ldi	r24, 0x3A	; 58
     cb4:	92 e0       	ldi	r25, 0x02	; 2
     cb6:	91 8f       	std	Z+25, r25	; 0x19
     cb8:	80 8f       	std	Z+24, r24	; 0x18
     cba:	8b e5       	ldi	r24, 0x5B	; 91
     cbc:	92 e0       	ldi	r25, 0x02	; 2
     cbe:	93 8f       	std	Z+27, r25	; 0x1b
     cc0:	82 8f       	std	Z+26, r24	; 0x1a
     cc2:	89 e6       	ldi	r24, 0x69	; 105
     cc4:	92 e0       	ldi	r25, 0x02	; 2
     cc6:	95 8f       	std	Z+29, r25	; 0x1d
     cc8:	84 8f       	std	Z+28, r24	; 0x1c
     cca:	8b e8       	ldi	r24, 0x8B	; 139
     ccc:	92 e0       	ldi	r25, 0x02	; 2
     cce:	97 8f       	std	Z+31, r25	; 0x1f
     cd0:	86 8f       	std	Z+30, r24	; 0x1e
     cd2:	8f ee       	ldi	r24, 0xEF	; 239
     cd4:	94 e0       	ldi	r25, 0x04	; 4
     cd6:	91 a3       	std	Z+33, r25	; 0x21
     cd8:	80 a3       	std	Z+32, r24	; 0x20
     cda:	88 e2       	ldi	r24, 0x28	; 40
     cdc:	95 e0       	ldi	r25, 0x05	; 5
     cde:	93 a3       	std	Z+35, r25	; 0x23
     ce0:	82 a3       	std	Z+34, r24	; 0x22
     ce2:	84 e9       	ldi	r24, 0x94	; 148
     ce4:	94 e0       	ldi	r25, 0x04	; 4
     ce6:	95 a3       	std	Z+37, r25	; 0x25
     ce8:	84 a3       	std	Z+36, r24	; 0x24
     cea:	8c e5       	ldi	r24, 0x5C	; 92
     cec:	94 e0       	ldi	r25, 0x04	; 4
     cee:	97 a3       	std	Z+39, r25	; 0x27
     cf0:	86 a3       	std	Z+38, r24	; 0x26
     cf2:	81 e3       	ldi	r24, 0x31	; 49
     cf4:	93 e0       	ldi	r25, 0x03	; 3
     cf6:	91 a7       	std	Z+41, r25	; 0x29
     cf8:	80 a7       	std	Z+40, r24	; 0x28
     cfa:	86 e3       	ldi	r24, 0x36	; 54
     cfc:	93 e0       	ldi	r25, 0x03	; 3
     cfe:	93 a7       	std	Z+43, r25	; 0x2b
     d00:	82 a7       	std	Z+42, r24	; 0x2a
     d02:	85 e4       	ldi	r24, 0x45	; 69
     d04:	93 e0       	ldi	r25, 0x03	; 3
     d06:	95 a7       	std	Z+45, r25	; 0x2d
     d08:	84 a7       	std	Z+44, r24	; 0x2c
     d0a:	89 e6       	ldi	r24, 0x69	; 105
     d0c:	93 e0       	ldi	r25, 0x03	; 3
     d0e:	97 a7       	std	Z+47, r25	; 0x2f
     d10:	86 a7       	std	Z+46, r24	; 0x2e
     d12:	8b e6       	ldi	r24, 0x6B	; 107
     d14:	93 e0       	ldi	r25, 0x03	; 3
     d16:	91 ab       	std	Z+49, r25	; 0x31
     d18:	80 ab       	std	Z+48, r24	; 0x30
     d1a:	85 e7       	ldi	r24, 0x75	; 117
     d1c:	93 e0       	ldi	r25, 0x03	; 3
     d1e:	93 ab       	std	Z+51, r25	; 0x33
     d20:	82 ab       	std	Z+50, r24	; 0x32
     d22:	82 e8       	ldi	r24, 0x82	; 130
     d24:	93 e0       	ldi	r25, 0x03	; 3
     d26:	95 ab       	std	Z+53, r25	; 0x35
     d28:	84 ab       	std	Z+52, r24	; 0x34
     d2a:	8e e8       	ldi	r24, 0x8E	; 142
     d2c:	93 e0       	ldi	r25, 0x03	; 3
     d2e:	97 ab       	std	Z+55, r25	; 0x37
     d30:	86 ab       	std	Z+54, r24	; 0x36
     d32:	86 ea       	ldi	r24, 0xA6	; 166
     d34:	93 e0       	ldi	r25, 0x03	; 3
     d36:	91 af       	std	Z+57, r25	; 0x39
     d38:	80 af       	std	Z+56, r24	; 0x38
     d3a:	89 eb       	ldi	r24, 0xB9	; 185
     d3c:	93 e0       	ldi	r25, 0x03	; 3
     d3e:	93 af       	std	Z+59, r25	; 0x3b
     d40:	82 af       	std	Z+58, r24	; 0x3a
     d42:	84 ec       	ldi	r24, 0xC4	; 196
     d44:	93 e0       	ldi	r25, 0x03	; 3
     d46:	95 af       	std	Z+61, r25	; 0x3d
     d48:	84 af       	std	Z+60, r24	; 0x3c
     d4a:	81 ef       	ldi	r24, 0xF1	; 241
     d4c:	93 e0       	ldi	r25, 0x03	; 3
     d4e:	97 af       	std	Z+63, r25	; 0x3f
     d50:	86 af       	std	Z+62, r24	; 0x3e
     d52:	df 01       	movw	r26, r30
     d54:	a0 5c       	subi	r26, 0xC0	; 192
     d56:	bf 4f       	sbci	r27, 0xFF	; 255
     d58:	86 e6       	ldi	r24, 0x66	; 102
     d5a:	95 e0       	ldi	r25, 0x05	; 5
     d5c:	11 96       	adiw	r26, 0x01	; 1
     d5e:	9c 93       	st	X, r25
     d60:	8e 93       	st	-X, r24
     d62:	12 96       	adiw	r26, 0x02	; 2
     d64:	81 e7       	ldi	r24, 0x71	; 113
     d66:	95 e0       	ldi	r25, 0x05	; 5
     d68:	11 96       	adiw	r26, 0x01	; 1
     d6a:	9c 93       	st	X, r25
     d6c:	8e 93       	st	-X, r24
     d6e:	12 96       	adiw	r26, 0x02	; 2
     d70:	82 e9       	ldi	r24, 0x92	; 146
     d72:	95 e0       	ldi	r25, 0x05	; 5
     d74:	11 96       	adiw	r26, 0x01	; 1
     d76:	9c 93       	st	X, r25
     d78:	8e 93       	st	-X, r24
     d7a:	12 96       	adiw	r26, 0x02	; 2
     d7c:	82 ee       	ldi	r24, 0xE2	; 226
     d7e:	95 e0       	ldi	r25, 0x05	; 5
     d80:	11 96       	adiw	r26, 0x01	; 1
     d82:	9c 93       	st	X, r25
     d84:	8e 93       	st	-X, r24
     d86:	12 96       	adiw	r26, 0x02	; 2
     d88:	8a ee       	ldi	r24, 0xEA	; 234
     d8a:	95 e0       	ldi	r25, 0x05	; 5
     d8c:	8d 93       	st	X+, r24
     d8e:	9c 93       	st	X, r25
}
     d90:	cf 01       	movw	r24, r30
     d92:	08 95       	ret

00000d94 <KEYPAD_flush>:
}
/***flush***/
void KEYPAD_flush(void)
{
	uint8_t i;
	data.character=' ';
     d94:	80 e2       	ldi	r24, 0x20	; 32
     d96:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <data>
	KEYPADSTRINGINDEX=0;
     d9a:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <KEYPADSTRINGINDEX>
     d9e:	e1 ea       	ldi	r30, 0xA1	; 161
     da0:	f2 e0       	ldi	r31, 0x02	; 2
     da2:	86 eb       	ldi	r24, 0xB6	; 182
     da4:	92 e0       	ldi	r25, 0x02	; 2
	for(i=0;i<KEYPADSTRINGSIZE+1;i++)
        data.string[i]='\0';
     da6:	11 92       	st	Z+, r1
void KEYPAD_flush(void)
{
	uint8_t i;
	data.character=' ';
	KEYPADSTRINGINDEX=0;
	for(i=0;i<KEYPADSTRINGSIZE+1;i++)
     da8:	e8 17       	cp	r30, r24
     daa:	f9 07       	cpc	r31, r25
     dac:	e1 f7       	brne	.-8      	; 0xda6 <KEYPAD_flush+0x12>
        data.string[i]='\0';
}
     dae:	08 95       	ret

00000db0 <KEYPAD_getkey>:
	*keypad_PORT|=(1<<KEYPADLINE_1) | (1<<KEYPADLINE_2) | (1<<KEYPADLINE_3) | (1<<KEYPADLINE_4);
	//Going to use pull down method.
	return keypad;
}
char KEYPAD_getkey(void)
{
     db0:	cf 93       	push	r28
     db2:	df 93       	push	r29
     db4:	21 e0       	ldi	r18, 0x01	; 1
	uint8_t HL;
	char c='\0';
     db6:	80 e0       	ldi	r24, 0x00	; 0
				*keypad_PORT|=(1<<KEYPADLINE_1);
				break;
			case 1: //line 2 index 1
				*keypad_DDR|=(1<<KEYPADLINE_2);
				*keypad_PORT&=~(1<<KEYPADLINE_2);
				keypad_dataf.line_2=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
     db8:	a5 e9       	ldi	r26, 0x95	; 149
     dba:	b2 e0       	ldi	r27, 0x02	; 2
				HL=KEYPADhl(keypad_datai.line_2,keypad_dataf.line_2);
     dbc:	e9 e9       	ldi	r30, 0x99	; 153
     dbe:	f2 e0       	ldi	r31, 0x02	; 2
					if(HL == (1<<KEYPADDATA_2))
						c=keypadvalue[1][1];
					if(HL == (1<<KEYPADDATA_3))
						c=keypadvalue[1][2];
					if(HL == (1<<KEYPADDATA_4))
						c=keypadvalue[1][3];
     dc0:	60 e0       	ldi	r22, 0x00	; 0
     dc2:	71 e0       	ldi	r23, 0x01	; 1
     dc4:	01 c0       	rjmp	.+2      	; 0xdc8 <KEYPAD_getkey+0x18>
     dc6:	2f 5f       	subi	r18, 0xFF	; 255
{
	uint8_t HL;
	char c='\0';
	uint8_t keypad_option;
	for(keypad_option=0;keypad_option<KEYPADLINES;keypad_option++){
		switch (keypad_option)
     dc8:	9f ef       	ldi	r25, 0xFF	; 255
     dca:	92 0f       	add	r25, r18
     dcc:	91 30       	cpi	r25, 0x01	; 1
     dce:	09 f4       	brne	.+2      	; 0xdd2 <KEYPAD_getkey+0x22>
     dd0:	4b c0       	rjmp	.+150    	; 0xe68 <KEYPAD_getkey+0xb8>
     dd2:	38 f0       	brcs	.+14     	; 0xde2 <KEYPAD_getkey+0x32>
     dd4:	92 30       	cpi	r25, 0x02	; 2
     dd6:	09 f4       	brne	.+2      	; 0xdda <KEYPAD_getkey+0x2a>
     dd8:	8c c0       	rjmp	.+280    	; 0xef2 <KEYPAD_getkey+0x142>
     dda:	93 30       	cpi	r25, 0x03	; 3
     ddc:	09 f4       	brne	.+2      	; 0xde0 <KEYPAD_getkey+0x30>
     dde:	ce c0       	rjmp	.+412    	; 0xf7c <KEYPAD_getkey+0x1cc>
     de0:	0e c1       	rjmp	.+540    	; 0xffe <KEYPAD_getkey+0x24e>
		{
			case 0: //line 1 index 0
				*keypad_DDR|=(1<<KEYPADLINE_1);
     de2:	40 91 b6 02 	lds	r20, 0x02B6	; 0x8002b6 <keypad_DDR>
     de6:	50 91 b7 02 	lds	r21, 0x02B7	; 0x8002b7 <keypad_DDR+0x1>
     dea:	ea 01       	movw	r28, r20
     dec:	98 81       	ld	r25, Y
     dee:	90 68       	ori	r25, 0x80	; 128
     df0:	98 83       	st	Y, r25
				*keypad_PORT&=~(1<<KEYPADLINE_1);
     df2:	40 91 93 02 	lds	r20, 0x0293	; 0x800293 <keypad_PORT>
     df6:	50 91 94 02 	lds	r21, 0x0294	; 0x800294 <keypad_PORT+0x1>
     dfa:	ea 01       	movw	r28, r20
     dfc:	98 81       	ld	r25, Y
     dfe:	9f 77       	andi	r25, 0x7F	; 127
     e00:	98 83       	st	Y, r25
				keypad_dataf.line_1=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
     e02:	40 91 9e 02 	lds	r20, 0x029E	; 0x80029e <keypad_PIN>
     e06:	50 91 9f 02 	lds	r21, 0x029F	; 0x80029f <keypad_PIN+0x1>
     e0a:	ea 01       	movw	r28, r20
     e0c:	38 81       	ld	r19, Y
     e0e:	34 77       	andi	r19, 0x74	; 116
     e10:	3c 93       	st	X, r19
				HL=KEYPADhl(keypad_datai.line_1,keypad_dataf.line_1);
     e12:	90 81       	ld	r25, Z
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
     e14:	43 2f       	mov	r20, r19
     e16:	49 27       	eor	r20, r25
     e18:	94 23       	and	r25, r20
			case 0: //line 1 index 0
				*keypad_DDR|=(1<<KEYPADLINE_1);
				*keypad_PORT&=~(1<<KEYPADLINE_1);
				keypad_dataf.line_1=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_1,keypad_dataf.line_1);
				keypad_datai.line_1=keypad_dataf.line_1;
     e1a:	30 83       	st	Z, r19
				if(HL){
     e1c:	99 23       	and	r25, r25
     e1e:	99 f0       	breq	.+38     	; 0xe46 <KEYPAD_getkey+0x96>
					//decode index line one column what ?
					if(HL == (1<<KEYPADDATA_1))
     e20:	94 30       	cpi	r25, 0x04	; 4
     e22:	19 f4       	brne	.+6      	; 0xe2a <KEYPAD_getkey+0x7a>
						c=keypadvalue[0][0];
     e24:	eb 01       	movw	r28, r22
     e26:	88 81       	ld	r24, Y
     e28:	0a c0       	rjmp	.+20     	; 0xe3e <KEYPAD_getkey+0x8e>
					if(HL == (1<<KEYPADDATA_2))
     e2a:	90 31       	cpi	r25, 0x10	; 16
     e2c:	19 f4       	brne	.+6      	; 0xe34 <KEYPAD_getkey+0x84>
						c=keypadvalue[0][1];
     e2e:	eb 01       	movw	r28, r22
     e30:	89 81       	ldd	r24, Y+1	; 0x01
     e32:	09 c0       	rjmp	.+18     	; 0xe46 <KEYPAD_getkey+0x96>
					if(HL == (1<<KEYPADDATA_3))
     e34:	90 32       	cpi	r25, 0x20	; 32
     e36:	19 f4       	brne	.+6      	; 0xe3e <KEYPAD_getkey+0x8e>
						c=keypadvalue[0][2];
     e38:	eb 01       	movw	r28, r22
     e3a:	8a 81       	ldd	r24, Y+2	; 0x02
     e3c:	04 c0       	rjmp	.+8      	; 0xe46 <KEYPAD_getkey+0x96>
					if(HL == (1<<KEYPADDATA_4))
     e3e:	90 34       	cpi	r25, 0x40	; 64
     e40:	11 f4       	brne	.+4      	; 0xe46 <KEYPAD_getkey+0x96>
						c=keypadvalue[0][3];
     e42:	eb 01       	movw	r28, r22
     e44:	8b 81       	ldd	r24, Y+3	; 0x03
				}
				*keypad_DDR&=~(1<<KEYPADLINE_1);
     e46:	40 91 b6 02 	lds	r20, 0x02B6	; 0x8002b6 <keypad_DDR>
     e4a:	50 91 b7 02 	lds	r21, 0x02B7	; 0x8002b7 <keypad_DDR+0x1>
     e4e:	ea 01       	movw	r28, r20
     e50:	98 81       	ld	r25, Y
     e52:	9f 77       	andi	r25, 0x7F	; 127
     e54:	98 83       	st	Y, r25
				*keypad_PORT|=(1<<KEYPADLINE_1);
     e56:	40 91 93 02 	lds	r20, 0x0293	; 0x800293 <keypad_PORT>
     e5a:	50 91 94 02 	lds	r21, 0x0294	; 0x800294 <keypad_PORT+0x1>
     e5e:	ea 01       	movw	r28, r20
     e60:	98 81       	ld	r25, Y
     e62:	90 68       	ori	r25, 0x80	; 128
     e64:	98 83       	st	Y, r25
				break;
     e66:	af cf       	rjmp	.-162    	; 0xdc6 <KEYPAD_getkey+0x16>
			case 1: //line 2 index 1
				*keypad_DDR|=(1<<KEYPADLINE_2);
     e68:	40 91 b6 02 	lds	r20, 0x02B6	; 0x8002b6 <keypad_DDR>
     e6c:	50 91 b7 02 	lds	r21, 0x02B7	; 0x8002b7 <keypad_DDR+0x1>
     e70:	ea 01       	movw	r28, r20
     e72:	98 81       	ld	r25, Y
     e74:	91 60       	ori	r25, 0x01	; 1
     e76:	98 83       	st	Y, r25
				*keypad_PORT&=~(1<<KEYPADLINE_2);
     e78:	40 91 93 02 	lds	r20, 0x0293	; 0x800293 <keypad_PORT>
     e7c:	50 91 94 02 	lds	r21, 0x0294	; 0x800294 <keypad_PORT+0x1>
     e80:	ea 01       	movw	r28, r20
     e82:	98 81       	ld	r25, Y
     e84:	9e 7f       	andi	r25, 0xFE	; 254
     e86:	98 83       	st	Y, r25
				keypad_dataf.line_2=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
     e88:	40 91 9e 02 	lds	r20, 0x029E	; 0x80029e <keypad_PIN>
     e8c:	50 91 9f 02 	lds	r21, 0x029F	; 0x80029f <keypad_PIN+0x1>
     e90:	ea 01       	movw	r28, r20
     e92:	38 81       	ld	r19, Y
     e94:	34 77       	andi	r19, 0x74	; 116
     e96:	11 96       	adiw	r26, 0x01	; 1
     e98:	3c 93       	st	X, r19
     e9a:	11 97       	sbiw	r26, 0x01	; 1
				HL=KEYPADhl(keypad_datai.line_2,keypad_dataf.line_2);
     e9c:	91 81       	ldd	r25, Z+1	; 0x01
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
     e9e:	43 2f       	mov	r20, r19
     ea0:	49 27       	eor	r20, r25
     ea2:	94 23       	and	r25, r20
			case 1: //line 2 index 1
				*keypad_DDR|=(1<<KEYPADLINE_2);
				*keypad_PORT&=~(1<<KEYPADLINE_2);
				keypad_dataf.line_2=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_2,keypad_dataf.line_2);
				keypad_datai.line_2=keypad_dataf.line_2;
     ea4:	31 83       	std	Z+1, r19	; 0x01
				if(HL){
     ea6:	99 23       	and	r25, r25
     ea8:	99 f0       	breq	.+38     	; 0xed0 <KEYPAD_getkey+0x120>
					//decode index line two column what ?
					if(HL == (1<<KEYPADDATA_1))
     eaa:	94 30       	cpi	r25, 0x04	; 4
     eac:	19 f4       	brne	.+6      	; 0xeb4 <KEYPAD_getkey+0x104>
						c=keypadvalue[1][0];
     eae:	eb 01       	movw	r28, r22
     eb0:	8c 81       	ldd	r24, Y+4	; 0x04
     eb2:	0a c0       	rjmp	.+20     	; 0xec8 <KEYPAD_getkey+0x118>
					if(HL == (1<<KEYPADDATA_2))
     eb4:	90 31       	cpi	r25, 0x10	; 16
     eb6:	19 f4       	brne	.+6      	; 0xebe <KEYPAD_getkey+0x10e>
						c=keypadvalue[1][1];
     eb8:	eb 01       	movw	r28, r22
     eba:	8d 81       	ldd	r24, Y+5	; 0x05
     ebc:	09 c0       	rjmp	.+18     	; 0xed0 <KEYPAD_getkey+0x120>
					if(HL == (1<<KEYPADDATA_3))
     ebe:	90 32       	cpi	r25, 0x20	; 32
     ec0:	19 f4       	brne	.+6      	; 0xec8 <KEYPAD_getkey+0x118>
						c=keypadvalue[1][2];
     ec2:	eb 01       	movw	r28, r22
     ec4:	8e 81       	ldd	r24, Y+6	; 0x06
     ec6:	04 c0       	rjmp	.+8      	; 0xed0 <KEYPAD_getkey+0x120>
					if(HL == (1<<KEYPADDATA_4))
     ec8:	90 34       	cpi	r25, 0x40	; 64
     eca:	11 f4       	brne	.+4      	; 0xed0 <KEYPAD_getkey+0x120>
						c=keypadvalue[1][3];
     ecc:	eb 01       	movw	r28, r22
     ece:	8f 81       	ldd	r24, Y+7	; 0x07
				}
				*keypad_DDR&=~(1<<KEYPADLINE_2);
     ed0:	40 91 b6 02 	lds	r20, 0x02B6	; 0x8002b6 <keypad_DDR>
     ed4:	50 91 b7 02 	lds	r21, 0x02B7	; 0x8002b7 <keypad_DDR+0x1>
     ed8:	ea 01       	movw	r28, r20
     eda:	98 81       	ld	r25, Y
     edc:	9e 7f       	andi	r25, 0xFE	; 254
     ede:	98 83       	st	Y, r25
				*keypad_PORT|=(1<<KEYPADLINE_2);
     ee0:	40 91 93 02 	lds	r20, 0x0293	; 0x800293 <keypad_PORT>
     ee4:	50 91 94 02 	lds	r21, 0x0294	; 0x800294 <keypad_PORT+0x1>
     ee8:	ea 01       	movw	r28, r20
     eea:	98 81       	ld	r25, Y
     eec:	91 60       	ori	r25, 0x01	; 1
     eee:	98 83       	st	Y, r25
				break;
     ef0:	6a cf       	rjmp	.-300    	; 0xdc6 <KEYPAD_getkey+0x16>
			case 2: //line 3 index 2
				*keypad_DDR|=(1<<KEYPADLINE_3);
     ef2:	40 91 b6 02 	lds	r20, 0x02B6	; 0x8002b6 <keypad_DDR>
     ef6:	50 91 b7 02 	lds	r21, 0x02B7	; 0x8002b7 <keypad_DDR+0x1>
     efa:	ea 01       	movw	r28, r20
     efc:	98 81       	ld	r25, Y
     efe:	92 60       	ori	r25, 0x02	; 2
     f00:	98 83       	st	Y, r25
				*keypad_PORT&=~(1<<KEYPADLINE_3);
     f02:	40 91 93 02 	lds	r20, 0x0293	; 0x800293 <keypad_PORT>
     f06:	50 91 94 02 	lds	r21, 0x0294	; 0x800294 <keypad_PORT+0x1>
     f0a:	ea 01       	movw	r28, r20
     f0c:	98 81       	ld	r25, Y
     f0e:	9d 7f       	andi	r25, 0xFD	; 253
     f10:	98 83       	st	Y, r25
				keypad_dataf.line_3=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
     f12:	40 91 9e 02 	lds	r20, 0x029E	; 0x80029e <keypad_PIN>
     f16:	50 91 9f 02 	lds	r21, 0x029F	; 0x80029f <keypad_PIN+0x1>
     f1a:	ea 01       	movw	r28, r20
     f1c:	38 81       	ld	r19, Y
     f1e:	34 77       	andi	r19, 0x74	; 116
     f20:	12 96       	adiw	r26, 0x02	; 2
     f22:	3c 93       	st	X, r19
     f24:	12 97       	sbiw	r26, 0x02	; 2
				HL=KEYPADhl(keypad_datai.line_3,keypad_dataf.line_3);
     f26:	92 81       	ldd	r25, Z+2	; 0x02
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
     f28:	43 2f       	mov	r20, r19
     f2a:	49 27       	eor	r20, r25
     f2c:	94 23       	and	r25, r20
			case 2: //line 3 index 2
				*keypad_DDR|=(1<<KEYPADLINE_3);
				*keypad_PORT&=~(1<<KEYPADLINE_3);
				keypad_dataf.line_3=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_3,keypad_dataf.line_3);
				keypad_datai.line_3=keypad_dataf.line_3;
     f2e:	32 83       	std	Z+2, r19	; 0x02
				if(HL){
     f30:	99 23       	and	r25, r25
     f32:	99 f0       	breq	.+38     	; 0xf5a <KEYPAD_getkey+0x1aa>
					//decode index line three column what ?
					if(HL == (1<<KEYPADDATA_1))
     f34:	94 30       	cpi	r25, 0x04	; 4
     f36:	19 f4       	brne	.+6      	; 0xf3e <KEYPAD_getkey+0x18e>
						c=keypadvalue[2][0];
     f38:	eb 01       	movw	r28, r22
     f3a:	88 85       	ldd	r24, Y+8	; 0x08
     f3c:	0a c0       	rjmp	.+20     	; 0xf52 <KEYPAD_getkey+0x1a2>
					if(HL == (1<<KEYPADDATA_2))
     f3e:	90 31       	cpi	r25, 0x10	; 16
     f40:	19 f4       	brne	.+6      	; 0xf48 <KEYPAD_getkey+0x198>
						c=keypadvalue[2][1];
     f42:	eb 01       	movw	r28, r22
     f44:	89 85       	ldd	r24, Y+9	; 0x09
     f46:	09 c0       	rjmp	.+18     	; 0xf5a <KEYPAD_getkey+0x1aa>
					if(HL == (1<<KEYPADDATA_3))
     f48:	90 32       	cpi	r25, 0x20	; 32
     f4a:	19 f4       	brne	.+6      	; 0xf52 <KEYPAD_getkey+0x1a2>
						c=keypadvalue[2][2];
     f4c:	eb 01       	movw	r28, r22
     f4e:	8a 85       	ldd	r24, Y+10	; 0x0a
     f50:	04 c0       	rjmp	.+8      	; 0xf5a <KEYPAD_getkey+0x1aa>
					if(HL == (1<<KEYPADDATA_4))
     f52:	90 34       	cpi	r25, 0x40	; 64
     f54:	11 f4       	brne	.+4      	; 0xf5a <KEYPAD_getkey+0x1aa>
						c=keypadvalue[2][3];
     f56:	eb 01       	movw	r28, r22
     f58:	8b 85       	ldd	r24, Y+11	; 0x0b
				}
				*keypad_DDR&=~(1<<KEYPADLINE_3);
     f5a:	40 91 b6 02 	lds	r20, 0x02B6	; 0x8002b6 <keypad_DDR>
     f5e:	50 91 b7 02 	lds	r21, 0x02B7	; 0x8002b7 <keypad_DDR+0x1>
     f62:	ea 01       	movw	r28, r20
     f64:	98 81       	ld	r25, Y
     f66:	9d 7f       	andi	r25, 0xFD	; 253
     f68:	98 83       	st	Y, r25
				*keypad_PORT|=(1<<KEYPADLINE_3);
     f6a:	40 91 93 02 	lds	r20, 0x0293	; 0x800293 <keypad_PORT>
     f6e:	50 91 94 02 	lds	r21, 0x0294	; 0x800294 <keypad_PORT+0x1>
     f72:	ea 01       	movw	r28, r20
     f74:	98 81       	ld	r25, Y
     f76:	92 60       	ori	r25, 0x02	; 2
     f78:	98 83       	st	Y, r25
				break;
     f7a:	25 cf       	rjmp	.-438    	; 0xdc6 <KEYPAD_getkey+0x16>
			case 3: //line 4 index 3
				*keypad_DDR|=(1<<KEYPADLINE_4);
     f7c:	e0 91 b6 02 	lds	r30, 0x02B6	; 0x8002b6 <keypad_DDR>
     f80:	f0 91 b7 02 	lds	r31, 0x02B7	; 0x8002b7 <keypad_DDR+0x1>
     f84:	90 81       	ld	r25, Z
     f86:	98 60       	ori	r25, 0x08	; 8
     f88:	90 83       	st	Z, r25
				*keypad_PORT&=~(1<<KEYPADLINE_4);
     f8a:	e0 91 93 02 	lds	r30, 0x0293	; 0x800293 <keypad_PORT>
     f8e:	f0 91 94 02 	lds	r31, 0x0294	; 0x800294 <keypad_PORT+0x1>
     f92:	90 81       	ld	r25, Z
     f94:	97 7f       	andi	r25, 0xF7	; 247
     f96:	90 83       	st	Z, r25
				keypad_dataf.line_4=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
     f98:	e0 91 9e 02 	lds	r30, 0x029E	; 0x80029e <keypad_PIN>
     f9c:	f0 91 9f 02 	lds	r31, 0x029F	; 0x80029f <keypad_PIN+0x1>
     fa0:	20 81       	ld	r18, Z
     fa2:	24 77       	andi	r18, 0x74	; 116
     fa4:	20 93 98 02 	sts	0x0298, r18	; 0x800298 <keypad_dataf+0x3>
				HL=KEYPADhl(keypad_datai.line_4,keypad_dataf.line_4);
     fa8:	e9 e9       	ldi	r30, 0x99	; 153
     faa:	f2 e0       	ldi	r31, 0x02	; 2
     fac:	93 81       	ldd	r25, Z+3	; 0x03
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
     fae:	32 2f       	mov	r19, r18
     fb0:	39 27       	eor	r19, r25
     fb2:	93 23       	and	r25, r19
			case 3: //line 4 index 3
				*keypad_DDR|=(1<<KEYPADLINE_4);
				*keypad_PORT&=~(1<<KEYPADLINE_4);
				keypad_dataf.line_4=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_4,keypad_dataf.line_4);
				keypad_datai.line_4=keypad_dataf.line_4;
     fb4:	23 83       	std	Z+3, r18	; 0x03
				if(HL){
     fb6:	99 23       	and	r25, r25
     fb8:	99 f0       	breq	.+38     	; 0xfe0 <KEYPAD_getkey+0x230>
					//decode index line four column what ?
					if(HL == (1<<KEYPADDATA_1))
     fba:	94 30       	cpi	r25, 0x04	; 4
     fbc:	19 f4       	brne	.+6      	; 0xfc4 <KEYPAD_getkey+0x214>
						c=keypadvalue[3][0];
     fbe:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__DATA_REGION_ORIGIN__+0xc>
     fc2:	0a c0       	rjmp	.+20     	; 0xfd8 <KEYPAD_getkey+0x228>
					if(HL == (1<<KEYPADDATA_2))
     fc4:	90 31       	cpi	r25, 0x10	; 16
     fc6:	19 f4       	brne	.+6      	; 0xfce <KEYPAD_getkey+0x21e>
						c=keypadvalue[3][1];
     fc8:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <__DATA_REGION_ORIGIN__+0xd>
     fcc:	09 c0       	rjmp	.+18     	; 0xfe0 <KEYPAD_getkey+0x230>
					if(HL == (1<<KEYPADDATA_3))
     fce:	90 32       	cpi	r25, 0x20	; 32
     fd0:	19 f4       	brne	.+6      	; 0xfd8 <KEYPAD_getkey+0x228>
						c=keypadvalue[3][2];
     fd2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__DATA_REGION_ORIGIN__+0xe>
     fd6:	04 c0       	rjmp	.+8      	; 0xfe0 <KEYPAD_getkey+0x230>
					if(HL == (1<<KEYPADDATA_4))
     fd8:	90 34       	cpi	r25, 0x40	; 64
     fda:	11 f4       	brne	.+4      	; 0xfe0 <KEYPAD_getkey+0x230>
						c=keypadvalue[3][3];
     fdc:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <__DATA_REGION_ORIGIN__+0xf>
				}
				*keypad_DDR&=~(1<<KEYPADLINE_4);
     fe0:	e0 91 b6 02 	lds	r30, 0x02B6	; 0x8002b6 <keypad_DDR>
     fe4:	f0 91 b7 02 	lds	r31, 0x02B7	; 0x8002b7 <keypad_DDR+0x1>
     fe8:	90 81       	ld	r25, Z
     fea:	97 7f       	andi	r25, 0xF7	; 247
     fec:	90 83       	st	Z, r25
				*keypad_PORT|=(1<<KEYPADLINE_4);
     fee:	e0 91 93 02 	lds	r30, 0x0293	; 0x800293 <keypad_PORT>
     ff2:	f0 91 94 02 	lds	r31, 0x0294	; 0x800294 <keypad_PORT+0x1>
     ff6:	90 81       	ld	r25, Z
     ff8:	98 60       	ori	r25, 0x08	; 8
     ffa:	90 83       	st	Z, r25
     ffc:	03 c0       	rjmp	.+6      	; 0x1004 <KEYPAD_getkey+0x254>
char KEYPAD_getkey(void)
{
	uint8_t HL;
	char c='\0';
	uint8_t keypad_option;
	for(keypad_option=0;keypad_option<KEYPADLINES;keypad_option++){
     ffe:	24 30       	cpi	r18, 0x04	; 4
    1000:	08 f4       	brcc	.+2      	; 0x1004 <KEYPAD_getkey+0x254>
    1002:	e1 ce       	rjmp	.-574    	; 0xdc6 <KEYPAD_getkey+0x16>
			default:
				break;
		}//endswitch
	}//endfor
	return c;
}
    1004:	df 91       	pop	r29
    1006:	cf 91       	pop	r28
    1008:	08 95       	ret

0000100a <KEYPAD_get>:
/***get***/
struct keypadata KEYPAD_get(void)
{
    100a:	cf 93       	push	r28
    100c:	df 93       	push	r29
    100e:	ec 01       	movw	r28, r24
	char c;
	c=KEYPAD_getkey();
    1010:	cf de       	rcall	.-610    	; 0xdb0 <KEYPAD_getkey>
	if(c){
    1012:	88 23       	and	r24, r24
    1014:	89 f0       	breq	.+34     	; 0x1038 <KEYPAD_get+0x2e>
		data.character=c;
    1016:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <data>
		if(KEYPADSTRINGINDEX<(KEYPADSTRINGSIZE)){
    101a:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <KEYPADSTRINGINDEX>
    101e:	94 31       	cpi	r25, 0x14	; 20
    1020:	58 f4       	brcc	.+22     	; 0x1038 <KEYPAD_get+0x2e>
			data.string[KEYPADSTRINGINDEX]=c;
    1022:	e0 91 9d 02 	lds	r30, 0x029D	; 0x80029d <KEYPADSTRINGINDEX>
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	e0 56       	subi	r30, 0x60	; 96
    102a:	fd 4f       	sbci	r31, 0xFD	; 253
    102c:	81 83       	std	Z+1, r24	; 0x01
			KEYPADSTRINGINDEX++;
    102e:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <KEYPADSTRINGINDEX>
    1032:	8f 5f       	subi	r24, 0xFF	; 255
    1034:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <KEYPADSTRINGINDEX>
		}
	}
	return data;
    1038:	86 e1       	ldi	r24, 0x16	; 22
    103a:	e0 ea       	ldi	r30, 0xA0	; 160
    103c:	f2 e0       	ldi	r31, 0x02	; 2
    103e:	de 01       	movw	r26, r28
    1040:	01 90       	ld	r0, Z+
    1042:	0d 92       	st	X+, r0
    1044:	8a 95       	dec	r24
    1046:	e1 f7       	brne	.-8      	; 0x1040 <KEYPAD_get+0x36>
}
    1048:	ce 01       	movw	r24, r28
    104a:	df 91       	pop	r29
    104c:	cf 91       	pop	r28
    104e:	08 95       	ret

00001050 <KEYPADenable>:
uint8_t KEYPADhl(uint8_t xi, uint8_t xf);
/*
** procedure and function
*/
KEYPAD KEYPADenable(volatile uint8_t *ddr, volatile uint8_t *pin, volatile uint8_t *port)
{
    1050:	cf 93       	push	r28
    1052:	df 93       	push	r29
    1054:	00 d0       	rcall	.+0      	; 0x1056 <KEYPADenable+0x6>
    1056:	00 d0       	rcall	.+0      	; 0x1058 <KEYPADenable+0x8>
    1058:	00 d0       	rcall	.+0      	; 0x105a <KEYPADenable+0xa>
    105a:	cd b7       	in	r28, 0x3d	; 61
    105c:	de b7       	in	r29, 0x3e	; 62
    105e:	fc 01       	movw	r30, r24
	//LOCAL VARIABLES
	uint8_t tSREG;
	tSREG=SREG;
    1060:	2f b7       	in	r18, 0x3f	; 63
	data.character=' ';
    1062:	80 e2       	ldi	r24, 0x20	; 32
    1064:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <data>
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    1068:	9f b7       	in	r25, 0x3f	; 63
    106a:	9f 77       	andi	r25, 0x7F	; 127
    106c:	9f bf       	out	0x3f, r25	; 63
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	KEYPAD keypad;
	//import parametros
	keypad_DDR=ddr;
    106e:	f0 93 b7 02 	sts	0x02B7, r31	; 0x8002b7 <keypad_DDR+0x1>
    1072:	e0 93 b6 02 	sts	0x02B6, r30	; 0x8002b6 <keypad_DDR>
	keypad_PIN=pin;
    1076:	70 93 9f 02 	sts	0x029F, r23	; 0x80029f <keypad_PIN+0x1>
    107a:	60 93 9e 02 	sts	0x029E, r22	; 0x80029e <keypad_PIN>
	keypad_PORT=port;
    107e:	50 93 94 02 	sts	0x0294, r21	; 0x800294 <keypad_PORT+0x1>
    1082:	40 93 93 02 	sts	0x0293, r20	; 0x800293 <keypad_PORT>
	//inic variables
	*keypad_DDR=(1<<KEYPADLINE_1) | (1<<KEYPADLINE_2) | (1<<KEYPADLINE_3) | (1<<KEYPADLINE_4);
    1086:	8b e8       	ldi	r24, 0x8B	; 139
    1088:	80 83       	st	Z, r24
	*keypad_PORT=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    108a:	e0 91 93 02 	lds	r30, 0x0293	; 0x800293 <keypad_PORT>
    108e:	f0 91 94 02 	lds	r31, 0x0294	; 0x800294 <keypad_PORT+0x1>
    1092:	84 e7       	ldi	r24, 0x74	; 116
    1094:	80 83       	st	Z, r24
	keypad_datai.line_1=keypad_dataf.line_1=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    1096:	a5 e9       	ldi	r26, 0x95	; 149
    1098:	b2 e0       	ldi	r27, 0x02	; 2
    109a:	8c 93       	st	X, r24
    109c:	e9 e9       	ldi	r30, 0x99	; 153
    109e:	f2 e0       	ldi	r31, 0x02	; 2
    10a0:	80 83       	st	Z, r24
	keypad_datai.line_2=keypad_dataf.line_2=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    10a2:	11 96       	adiw	r26, 0x01	; 1
    10a4:	8c 93       	st	X, r24
    10a6:	11 97       	sbiw	r26, 0x01	; 1
    10a8:	81 83       	std	Z+1, r24	; 0x01
	keypad_datai.line_3=keypad_dataf.line_3=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    10aa:	12 96       	adiw	r26, 0x02	; 2
    10ac:	8c 93       	st	X, r24
    10ae:	12 97       	sbiw	r26, 0x02	; 2
    10b0:	82 83       	std	Z+2, r24	; 0x02
	keypad_datai.line_4=keypad_dataf.line_4=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    10b2:	13 96       	adiw	r26, 0x03	; 3
    10b4:	8c 93       	st	X, r24
    10b6:	83 83       	std	Z+3, r24	; 0x03
	KEYPADSTRINGINDEX=0;
    10b8:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <KEYPADSTRINGINDEX>
	//Direccionar apontadores para PROTOTIPOS
	keypad.getkey=KEYPAD_getkey;
	keypad.get=KEYPAD_get;
	keypad.flush=KEYPAD_flush;
	SREG=tSREG;
    10bc:	2f bf       	out	0x3f, r18	; 63
	//
	*keypad_PORT|=(1<<KEYPADLINE_1) | (1<<KEYPADLINE_2) | (1<<KEYPADLINE_3) | (1<<KEYPADLINE_4);
    10be:	e0 91 93 02 	lds	r30, 0x0293	; 0x800293 <keypad_PORT>
    10c2:	f0 91 94 02 	lds	r31, 0x0294	; 0x800294 <keypad_PORT+0x1>
    10c6:	80 81       	ld	r24, Z
    10c8:	8b 68       	ori	r24, 0x8B	; 139
    10ca:	80 83       	st	Z, r24
	//Going to use pull down method.
	return keypad;
    10cc:	28 ed       	ldi	r18, 0xD8	; 216
    10ce:	36 e0       	ldi	r19, 0x06	; 6
    10d0:	3a 83       	std	Y+2, r19	; 0x02
    10d2:	29 83       	std	Y+1, r18	; 0x01
    10d4:	45 e0       	ldi	r20, 0x05	; 5
    10d6:	58 e0       	ldi	r21, 0x08	; 8
    10d8:	5c 83       	std	Y+4, r21	; 0x04
    10da:	4b 83       	std	Y+3, r20	; 0x03
    10dc:	6a ec       	ldi	r22, 0xCA	; 202
    10de:	76 e0       	ldi	r23, 0x06	; 6
    10e0:	7e 83       	std	Y+6, r23	; 0x06
    10e2:	6d 83       	std	Y+5, r22	; 0x05
    10e4:	3a 81       	ldd	r19, Y+2	; 0x02
    10e6:	5c 81       	ldd	r21, Y+4	; 0x04
    10e8:	7e 81       	ldd	r23, Y+6	; 0x06
}
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	26 96       	adiw	r28, 0x06	; 6
    10f0:	0f b6       	in	r0, 0x3f	; 63
    10f2:	f8 94       	cli
    10f4:	de bf       	out	0x3e, r29	; 62
    10f6:	0f be       	out	0x3f, r0	; 63
    10f8:	cd bf       	out	0x3d, r28	; 61
    10fa:	df 91       	pop	r29
    10fc:	cf 91       	pop	r28
    10fe:	08 95       	ret

00001100 <LCD0_write>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1100:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    1104:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    1108:	90 81       	ld	r25, Z
    110a:	9d 7f       	andi	r25, 0xFD	; 253
    110c:	90 83       	st	Z, r25
    110e:	67 2b       	or	r22, r23
    1110:	41 f0       	breq	.+16     	; 0x1122 <LCD0_write+0x22>
    1112:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    1116:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    111a:	90 81       	ld	r25, Z
    111c:	91 60       	ori	r25, 0x01	; 1
    111e:	90 83       	st	Z, r25
    1120:	07 c0       	rjmp	.+14     	; 0x1130 <LCD0_write+0x30>
    1122:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    1126:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    112a:	90 81       	ld	r25, Z
    112c:	9e 7f       	andi	r25, 0xFE	; 254
    112e:	90 83       	st	Z, r25
    1130:	e0 91 bf 02 	lds	r30, 0x02BF	; 0x8002bf <lcd0_DDR>
    1134:	f0 91 c0 02 	lds	r31, 0x02C0	; 0x8002c0 <lcd0_DDR+0x1>
    1138:	90 81       	ld	r25, Z
    113a:	90 6f       	ori	r25, 0xF0	; 240
    113c:	90 83       	st	Z, r25
    113e:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    1142:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    1146:	90 81       	ld	r25, Z
    1148:	94 60       	ori	r25, 0x04	; 4
    114a:	90 83       	st	Z, r25
    114c:	88 23       	and	r24, r24
    114e:	44 f4       	brge	.+16     	; 0x1160 <LCD0_write+0x60>
    1150:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    1154:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    1158:	90 81       	ld	r25, Z
    115a:	90 68       	ori	r25, 0x80	; 128
    115c:	90 83       	st	Z, r25
    115e:	07 c0       	rjmp	.+14     	; 0x116e <LCD0_write+0x6e>
    1160:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    1164:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    1168:	90 81       	ld	r25, Z
    116a:	9f 77       	andi	r25, 0x7F	; 127
    116c:	90 83       	st	Z, r25
    116e:	86 ff       	sbrs	r24, 6
    1170:	08 c0       	rjmp	.+16     	; 0x1182 <LCD0_write+0x82>
    1172:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    1176:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    117a:	90 81       	ld	r25, Z
    117c:	90 64       	ori	r25, 0x40	; 64
    117e:	90 83       	st	Z, r25
    1180:	07 c0       	rjmp	.+14     	; 0x1190 <LCD0_write+0x90>
    1182:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    1186:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    118a:	90 81       	ld	r25, Z
    118c:	9f 7b       	andi	r25, 0xBF	; 191
    118e:	90 83       	st	Z, r25
    1190:	85 ff       	sbrs	r24, 5
    1192:	08 c0       	rjmp	.+16     	; 0x11a4 <LCD0_write+0xa4>
    1194:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    1198:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    119c:	90 81       	ld	r25, Z
    119e:	90 62       	ori	r25, 0x20	; 32
    11a0:	90 83       	st	Z, r25
    11a2:	07 c0       	rjmp	.+14     	; 0x11b2 <LCD0_write+0xb2>
    11a4:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    11a8:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    11ac:	90 81       	ld	r25, Z
    11ae:	9f 7d       	andi	r25, 0xDF	; 223
    11b0:	90 83       	st	Z, r25
    11b2:	84 ff       	sbrs	r24, 4
    11b4:	08 c0       	rjmp	.+16     	; 0x11c6 <LCD0_write+0xc6>
    11b6:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    11ba:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    11be:	90 81       	ld	r25, Z
    11c0:	90 61       	ori	r25, 0x10	; 16
    11c2:	90 83       	st	Z, r25
    11c4:	07 c0       	rjmp	.+14     	; 0x11d4 <LCD0_write+0xd4>
    11c6:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    11ca:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    11ce:	90 81       	ld	r25, Z
    11d0:	9f 7e       	andi	r25, 0xEF	; 239
    11d2:	90 83       	st	Z, r25
    11d4:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    11d8:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    11dc:	90 81       	ld	r25, Z
    11de:	9b 7f       	andi	r25, 0xFB	; 251
    11e0:	90 83       	st	Z, r25
    11e2:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    11e6:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    11ea:	90 81       	ld	r25, Z
    11ec:	94 60       	ori	r25, 0x04	; 4
    11ee:	90 83       	st	Z, r25
    11f0:	83 ff       	sbrs	r24, 3
    11f2:	08 c0       	rjmp	.+16     	; 0x1204 <LCD0_write+0x104>
    11f4:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    11f8:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    11fc:	90 81       	ld	r25, Z
    11fe:	90 68       	ori	r25, 0x80	; 128
    1200:	90 83       	st	Z, r25
    1202:	07 c0       	rjmp	.+14     	; 0x1212 <LCD0_write+0x112>
    1204:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    1208:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    120c:	90 81       	ld	r25, Z
    120e:	9f 77       	andi	r25, 0x7F	; 127
    1210:	90 83       	st	Z, r25
    1212:	82 ff       	sbrs	r24, 2
    1214:	08 c0       	rjmp	.+16     	; 0x1226 <LCD0_write+0x126>
    1216:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    121a:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    121e:	90 81       	ld	r25, Z
    1220:	90 64       	ori	r25, 0x40	; 64
    1222:	90 83       	st	Z, r25
    1224:	07 c0       	rjmp	.+14     	; 0x1234 <LCD0_write+0x134>
    1226:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    122a:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    122e:	90 81       	ld	r25, Z
    1230:	9f 7b       	andi	r25, 0xBF	; 191
    1232:	90 83       	st	Z, r25
    1234:	81 ff       	sbrs	r24, 1
    1236:	08 c0       	rjmp	.+16     	; 0x1248 <LCD0_write+0x148>
    1238:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    123c:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    1240:	90 81       	ld	r25, Z
    1242:	90 62       	ori	r25, 0x20	; 32
    1244:	90 83       	st	Z, r25
    1246:	07 c0       	rjmp	.+14     	; 0x1256 <LCD0_write+0x156>
    1248:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    124c:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    1250:	90 81       	ld	r25, Z
    1252:	9f 7d       	andi	r25, 0xDF	; 223
    1254:	90 83       	st	Z, r25
    1256:	80 ff       	sbrs	r24, 0
    1258:	08 c0       	rjmp	.+16     	; 0x126a <LCD0_write+0x16a>
    125a:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    125e:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    1262:	80 81       	ld	r24, Z
    1264:	80 61       	ori	r24, 0x10	; 16
    1266:	80 83       	st	Z, r24
    1268:	07 c0       	rjmp	.+14     	; 0x1278 <LCD0_write+0x178>
    126a:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    126e:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    1272:	80 81       	ld	r24, Z
    1274:	8f 7e       	andi	r24, 0xEF	; 239
    1276:	80 83       	st	Z, r24
    1278:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    127c:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    1280:	80 81       	ld	r24, Z
    1282:	8b 7f       	andi	r24, 0xFB	; 251
    1284:	80 83       	st	Z, r24
    1286:	08 95       	ret

00001288 <LCD0_read>:
    1288:	e0 91 bf 02 	lds	r30, 0x02BF	; 0x8002bf <lcd0_DDR>
    128c:	f0 91 c0 02 	lds	r31, 0x02C0	; 0x8002c0 <lcd0_DDR+0x1>
    1290:	20 81       	ld	r18, Z
    1292:	2f 70       	andi	r18, 0x0F	; 15
    1294:	20 83       	st	Z, r18
    1296:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    129a:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    129e:	20 81       	ld	r18, Z
    12a0:	20 6f       	ori	r18, 0xF0	; 240
    12a2:	20 83       	st	Z, r18
    12a4:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    12a8:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    12ac:	20 81       	ld	r18, Z
    12ae:	22 60       	ori	r18, 0x02	; 2
    12b0:	20 83       	st	Z, r18
    12b2:	89 2b       	or	r24, r25
    12b4:	41 f0       	breq	.+16     	; 0x12c6 <LCD0_read+0x3e>
    12b6:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    12ba:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    12be:	80 81       	ld	r24, Z
    12c0:	81 60       	ori	r24, 0x01	; 1
    12c2:	80 83       	st	Z, r24
    12c4:	07 c0       	rjmp	.+14     	; 0x12d4 <LCD0_read+0x4c>
    12c6:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    12ca:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    12ce:	80 81       	ld	r24, Z
    12d0:	8e 7f       	andi	r24, 0xFE	; 254
    12d2:	80 83       	st	Z, r24
    12d4:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    12d8:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    12dc:	80 81       	ld	r24, Z
    12de:	84 60       	ori	r24, 0x04	; 4
    12e0:	80 83       	st	Z, r24
    12e2:	e0 91 b8 02 	lds	r30, 0x02B8	; 0x8002b8 <lcd0_PIN>
    12e6:	f0 91 b9 02 	lds	r31, 0x02B9	; 0x8002b9 <lcd0_PIN+0x1>
    12ea:	80 81       	ld	r24, Z
    12ec:	88 23       	and	r24, r24
    12ee:	14 f0       	brlt	.+4      	; 0x12f4 <LCD0_read+0x6c>
    12f0:	80 e0       	ldi	r24, 0x00	; 0
    12f2:	01 c0       	rjmp	.+2      	; 0x12f6 <LCD0_read+0x6e>
    12f4:	80 e8       	ldi	r24, 0x80	; 128
    12f6:	90 81       	ld	r25, Z
    12f8:	96 ff       	sbrs	r25, 6
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <LCD0_read+0x78>
    12fc:	80 64       	ori	r24, 0x40	; 64
    12fe:	01 c0       	rjmp	.+2      	; 0x1302 <LCD0_read+0x7a>
    1300:	8f 7b       	andi	r24, 0xBF	; 191
    1302:	90 81       	ld	r25, Z
    1304:	95 ff       	sbrs	r25, 5
    1306:	02 c0       	rjmp	.+4      	; 0x130c <LCD0_read+0x84>
    1308:	80 62       	ori	r24, 0x20	; 32
    130a:	01 c0       	rjmp	.+2      	; 0x130e <LCD0_read+0x86>
    130c:	8f 7d       	andi	r24, 0xDF	; 223
    130e:	90 81       	ld	r25, Z
    1310:	94 ff       	sbrs	r25, 4
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <LCD0_read+0x90>
    1314:	80 61       	ori	r24, 0x10	; 16
    1316:	01 c0       	rjmp	.+2      	; 0x131a <LCD0_read+0x92>
    1318:	8f 7e       	andi	r24, 0xEF	; 239
    131a:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    131e:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    1322:	90 81       	ld	r25, Z
    1324:	9b 7f       	andi	r25, 0xFB	; 251
    1326:	90 83       	st	Z, r25
    1328:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    132c:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    1330:	90 81       	ld	r25, Z
    1332:	94 60       	ori	r25, 0x04	; 4
    1334:	90 83       	st	Z, r25
    1336:	e0 91 b8 02 	lds	r30, 0x02B8	; 0x8002b8 <lcd0_PIN>
    133a:	f0 91 b9 02 	lds	r31, 0x02B9	; 0x8002b9 <lcd0_PIN+0x1>
    133e:	90 81       	ld	r25, Z
    1340:	99 23       	and	r25, r25
    1342:	14 f4       	brge	.+4      	; 0x1348 <LCD0_read+0xc0>
    1344:	88 60       	ori	r24, 0x08	; 8
    1346:	01 c0       	rjmp	.+2      	; 0x134a <LCD0_read+0xc2>
    1348:	87 7f       	andi	r24, 0xF7	; 247
    134a:	90 81       	ld	r25, Z
    134c:	96 ff       	sbrs	r25, 6
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <LCD0_read+0xcc>
    1350:	84 60       	ori	r24, 0x04	; 4
    1352:	01 c0       	rjmp	.+2      	; 0x1356 <LCD0_read+0xce>
    1354:	8b 7f       	andi	r24, 0xFB	; 251
    1356:	90 81       	ld	r25, Z
    1358:	95 ff       	sbrs	r25, 5
    135a:	02 c0       	rjmp	.+4      	; 0x1360 <LCD0_read+0xd8>
    135c:	82 60       	ori	r24, 0x02	; 2
    135e:	01 c0       	rjmp	.+2      	; 0x1362 <LCD0_read+0xda>
    1360:	8d 7f       	andi	r24, 0xFD	; 253
    1362:	90 81       	ld	r25, Z
    1364:	94 ff       	sbrs	r25, 4
    1366:	02 c0       	rjmp	.+4      	; 0x136c <LCD0_read+0xe4>
    1368:	81 60       	ori	r24, 0x01	; 1
    136a:	01 c0       	rjmp	.+2      	; 0x136e <LCD0_read+0xe6>
    136c:	8e 7f       	andi	r24, 0xFE	; 254
    136e:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    1372:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    1376:	90 81       	ld	r25, Z
    1378:	9b 7f       	andi	r25, 0xFB	; 251
    137a:	90 83       	st	Z, r25
    137c:	08 95       	ret

0000137e <LCD0_BF>:
    137e:	cf 93       	push	r28
    1380:	df 93       	push	r29
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	80 df       	rcall	.-256    	; 0x1288 <LCD0_read>
    1388:	cb e0       	ldi	r28, 0x0B	; 11
    138a:	d0 e0       	ldi	r29, 0x00	; 0
    138c:	05 c0       	rjmp	.+10     	; 0x1398 <LCD0_BF+0x1a>
    138e:	80 e0       	ldi	r24, 0x00	; 0
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	7a df       	rcall	.-268    	; 0x1288 <LCD0_read>
    1394:	21 97       	sbiw	r28, 0x01	; 1
    1396:	11 f0       	breq	.+4      	; 0x139c <LCD0_BF+0x1e>
    1398:	88 23       	and	r24, r24
    139a:	cc f3       	brlt	.-14     	; 0x138e <LCD0_BF+0x10>
    139c:	df 91       	pop	r29
    139e:	cf 91       	pop	r28
    13a0:	08 95       	ret

000013a2 <LCD0_putch>:
    13a2:	61 e0       	ldi	r22, 0x01	; 1
    13a4:	70 e0       	ldi	r23, 0x00	; 0
    13a6:	ac de       	rcall	.-680    	; 0x1100 <LCD0_write>
    13a8:	ea cf       	rjmp	.-44     	; 0x137e <LCD0_BF>
    13aa:	08 95       	ret

000013ac <LCD0_getch>:
    13ac:	cf 93       	push	r28
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	6a df       	rcall	.-300    	; 0x1288 <LCD0_read>
    13b4:	c8 2f       	mov	r28, r24
    13b6:	e3 df       	rcall	.-58     	; 0x137e <LCD0_BF>
    13b8:	8c 2f       	mov	r24, r28
    13ba:	cf 91       	pop	r28
    13bc:	08 95       	ret

000013be <LCD0_string>:
    13be:	cf 93       	push	r28
    13c0:	df 93       	push	r29
    13c2:	ec 01       	movw	r28, r24
    13c4:	88 81       	ld	r24, Y
    13c6:	88 23       	and	r24, r24
    13c8:	41 f0       	breq	.+16     	; 0x13da <LCD0_string+0x1c>
    13ca:	21 96       	adiw	r28, 0x01	; 1
    13cc:	61 e0       	ldi	r22, 0x01	; 1
    13ce:	70 e0       	ldi	r23, 0x00	; 0
    13d0:	97 de       	rcall	.-722    	; 0x1100 <LCD0_write>
    13d2:	d5 df       	rcall	.-86     	; 0x137e <LCD0_BF>
    13d4:	89 91       	ld	r24, Y+
    13d6:	81 11       	cpse	r24, r1
    13d8:	f9 cf       	rjmp	.-14     	; 0x13cc <LCD0_string+0xe>
    13da:	df 91       	pop	r29
    13dc:	cf 91       	pop	r28
    13de:	08 95       	ret

000013e0 <LCD0_string_size>:
    13e0:	0f 93       	push	r16
    13e2:	1f 93       	push	r17
    13e4:	cf 93       	push	r28
    13e6:	df 93       	push	r29
    13e8:	fc 01       	movw	r30, r24
    13ea:	d6 2f       	mov	r29, r22
    13ec:	80 81       	ld	r24, Z
    13ee:	88 23       	and	r24, r24
    13f0:	51 f0       	breq	.+20     	; 0x1406 <LCD0_string_size+0x26>
    13f2:	8f 01       	movw	r16, r30
    13f4:	0f 5f       	subi	r16, 0xFF	; 255
    13f6:	1f 4f       	sbci	r17, 0xFF	; 255
    13f8:	61 11       	cpse	r22, r1
    13fa:	09 c0       	rjmp	.+18     	; 0x140e <LCD0_string_size+0x2e>
    13fc:	1b c0       	rjmp	.+54     	; 0x1434 <LCD0_string_size+0x54>
    13fe:	cf 5f       	subi	r28, 0xFF	; 255
    1400:	dc 17       	cp	r29, r28
    1402:	30 f4       	brcc	.+12     	; 0x1410 <LCD0_string_size+0x30>
    1404:	01 c0       	rjmp	.+2      	; 0x1408 <LCD0_string_size+0x28>
    1406:	c0 e0       	ldi	r28, 0x00	; 0
    1408:	cd 17       	cp	r28, r29
    140a:	60 f0       	brcs	.+24     	; 0x1424 <LCD0_string_size+0x44>
    140c:	13 c0       	rjmp	.+38     	; 0x1434 <LCD0_string_size+0x54>
    140e:	c1 e0       	ldi	r28, 0x01	; 1
    1410:	61 e0       	ldi	r22, 0x01	; 1
    1412:	70 e0       	ldi	r23, 0x00	; 0
    1414:	75 de       	rcall	.-790    	; 0x1100 <LCD0_write>
    1416:	b3 df       	rcall	.-154    	; 0x137e <LCD0_BF>
    1418:	f8 01       	movw	r30, r16
    141a:	81 91       	ld	r24, Z+
    141c:	8f 01       	movw	r16, r30
    141e:	81 11       	cpse	r24, r1
    1420:	ee cf       	rjmp	.-36     	; 0x13fe <LCD0_string_size+0x1e>
    1422:	f2 cf       	rjmp	.-28     	; 0x1408 <LCD0_string_size+0x28>
    1424:	cf 5f       	subi	r28, 0xFF	; 255
    1426:	61 e0       	ldi	r22, 0x01	; 1
    1428:	70 e0       	ldi	r23, 0x00	; 0
    142a:	80 e2       	ldi	r24, 0x20	; 32
    142c:	69 de       	rcall	.-814    	; 0x1100 <LCD0_write>
    142e:	a7 df       	rcall	.-178    	; 0x137e <LCD0_BF>
    1430:	cd 17       	cp	r28, r29
    1432:	c0 f3       	brcs	.-16     	; 0x1424 <LCD0_string_size+0x44>
    1434:	df 91       	pop	r29
    1436:	cf 91       	pop	r28
    1438:	1f 91       	pop	r17
    143a:	0f 91       	pop	r16
    143c:	08 95       	ret

0000143e <LCD0_hspace>:
    143e:	cf 93       	push	r28
    1440:	c8 2f       	mov	r28, r24
    1442:	88 23       	and	r24, r24
    1444:	39 f0       	breq	.+14     	; 0x1454 <LCD0_hspace+0x16>
    1446:	61 e0       	ldi	r22, 0x01	; 1
    1448:	70 e0       	ldi	r23, 0x00	; 0
    144a:	80 e2       	ldi	r24, 0x20	; 32
    144c:	59 de       	rcall	.-846    	; 0x1100 <LCD0_write>
    144e:	97 df       	rcall	.-210    	; 0x137e <LCD0_BF>
    1450:	c1 50       	subi	r28, 0x01	; 1
    1452:	c9 f7       	brne	.-14     	; 0x1446 <LCD0_hspace+0x8>
    1454:	cf 91       	pop	r28
    1456:	08 95       	ret

00001458 <LCD0_gotoxy>:
    1458:	26 2f       	mov	r18, r22
    145a:	81 30       	cpi	r24, 0x01	; 1
    145c:	91 05       	cpc	r25, r1
    145e:	71 f0       	breq	.+28     	; 0x147c <LCD0_gotoxy+0x24>
    1460:	30 f0       	brcs	.+12     	; 0x146e <LCD0_gotoxy+0x16>
    1462:	82 30       	cpi	r24, 0x02	; 2
    1464:	91 05       	cpc	r25, r1
    1466:	89 f0       	breq	.+34     	; 0x148a <LCD0_gotoxy+0x32>
    1468:	03 97       	sbiw	r24, 0x03	; 3
    146a:	b1 f0       	breq	.+44     	; 0x1498 <LCD0_gotoxy+0x40>
    146c:	08 95       	ret
    146e:	60 e0       	ldi	r22, 0x00	; 0
    1470:	70 e0       	ldi	r23, 0x00	; 0
    1472:	80 e8       	ldi	r24, 0x80	; 128
    1474:	82 0f       	add	r24, r18
    1476:	44 de       	rcall	.-888    	; 0x1100 <LCD0_write>
    1478:	82 cf       	rjmp	.-252    	; 0x137e <LCD0_BF>
    147a:	08 95       	ret
    147c:	60 e0       	ldi	r22, 0x00	; 0
    147e:	70 e0       	ldi	r23, 0x00	; 0
    1480:	80 ec       	ldi	r24, 0xC0	; 192
    1482:	82 0f       	add	r24, r18
    1484:	3d de       	rcall	.-902    	; 0x1100 <LCD0_write>
    1486:	7b cf       	rjmp	.-266    	; 0x137e <LCD0_BF>
    1488:	08 95       	ret
    148a:	60 e0       	ldi	r22, 0x00	; 0
    148c:	70 e0       	ldi	r23, 0x00	; 0
    148e:	84 e9       	ldi	r24, 0x94	; 148
    1490:	82 0f       	add	r24, r18
    1492:	36 de       	rcall	.-916    	; 0x1100 <LCD0_write>
    1494:	74 cf       	rjmp	.-280    	; 0x137e <LCD0_BF>
    1496:	08 95       	ret
    1498:	60 e0       	ldi	r22, 0x00	; 0
    149a:	70 e0       	ldi	r23, 0x00	; 0
    149c:	84 ed       	ldi	r24, 0xD4	; 212
    149e:	82 0f       	add	r24, r18
    14a0:	2f de       	rcall	.-930    	; 0x1100 <LCD0_write>
    14a2:	6d cf       	rjmp	.-294    	; 0x137e <LCD0_BF>
    14a4:	08 95       	ret

000014a6 <LCD0_clear>:
    14a6:	60 e0       	ldi	r22, 0x00	; 0
    14a8:	70 e0       	ldi	r23, 0x00	; 0
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	29 de       	rcall	.-942    	; 0x1100 <LCD0_write>
    14ae:	87 ee       	ldi	r24, 0xE7	; 231
    14b0:	97 e1       	ldi	r25, 0x17	; 23
    14b2:	01 97       	sbiw	r24, 0x01	; 1
    14b4:	f1 f7       	brne	.-4      	; 0x14b2 <LCD0_clear+0xc>
    14b6:	00 c0       	rjmp	.+0      	; 0x14b8 <LCD0_clear+0x12>
    14b8:	00 00       	nop
    14ba:	08 95       	ret

000014bc <LCD0_inic>:
	return lcd0;
}
void LCD0_inic(void)
{
	//LCD INIC
	*lcd0_DDR=(1<<RS)|(1<<RW)|(1<<EN)|(0<<NC);
    14bc:	e0 91 bf 02 	lds	r30, 0x02BF	; 0x8002bf <lcd0_DDR>
    14c0:	f0 91 c0 02 	lds	r31, 0x02C0	; 0x8002c0 <lcd0_DDR+0x1>
    14c4:	87 e0       	ldi	r24, 0x07	; 7
    14c6:	80 83       	st	Z, r24
	*lcd0_PORT=(1<<NC);
    14c8:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    14cc:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    14d0:	88 e0       	ldi	r24, 0x08	; 8
    14d2:	80 83       	st	Z, r24
    14d4:	2f ef       	ldi	r18, 0xFF	; 255
    14d6:	83 ef       	ldi	r24, 0xF3	; 243
    14d8:	91 e0       	ldi	r25, 0x01	; 1
    14da:	21 50       	subi	r18, 0x01	; 1
    14dc:	80 40       	sbci	r24, 0x00	; 0
    14de:	90 40       	sbci	r25, 0x00	; 0
    14e0:	e1 f7       	brne	.-8      	; 0x14da <LCD0_inic+0x1e>
    14e2:	00 c0       	rjmp	.+0      	; 0x14e4 <LCD0_inic+0x28>
    14e4:	00 00       	nop
	/***INICIALIZACAO LCD**datasheet*/
	_delay_ms(40);
	LCD0_write(0x33,INST); //function set
    14e6:	60 e0       	ldi	r22, 0x00	; 0
    14e8:	70 e0       	ldi	r23, 0x00	; 0
    14ea:	83 e3       	ldi	r24, 0x33	; 51
    14ec:	09 de       	rcall	.-1006   	; 0x1100 <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    14ee:	20 ed       	ldi	r18, 0xD0	; 208
    14f0:	2a 95       	dec	r18
    14f2:	f1 f7       	brne	.-4      	; 0x14f0 <LCD0_inic+0x34>
	_delay_us(39);
	LCD0_write(0x33,INST); //function set
    14f4:	60 e0       	ldi	r22, 0x00	; 0
    14f6:	70 e0       	ldi	r23, 0x00	; 0
    14f8:	83 e3       	ldi	r24, 0x33	; 51
    14fa:	02 de       	rcall	.-1020   	; 0x1100 <LCD0_write>
    14fc:	80 ed       	ldi	r24, 0xD0	; 208
    14fe:	8a 95       	dec	r24
    1500:	f1 f7       	brne	.-4      	; 0x14fe <LCD0_inic+0x42>
	_delay_us(39);
	LCD0_write(0x2B,INST); //function set
    1502:	60 e0       	ldi	r22, 0x00	; 0
    1504:	70 e0       	ldi	r23, 0x00	; 0
    1506:	8b e2       	ldi	r24, 0x2B	; 43
    1508:	fb dd       	rcall	.-1034   	; 0x1100 <LCD0_write>
    150a:	95 ec       	ldi	r25, 0xC5	; 197
    150c:	9a 95       	dec	r25
    150e:	f1 f7       	brne	.-4      	; 0x150c <LCD0_inic+0x50>
    1510:	00 00       	nop
	_delay_us(37);
	LCD0_write(0x0C,INST);// display on/off control
    1512:	60 e0       	ldi	r22, 0x00	; 0
    1514:	70 e0       	ldi	r23, 0x00	; 0
    1516:	8c e0       	ldi	r24, 0x0C	; 12
    1518:	f3 dd       	rcall	.-1050   	; 0x1100 <LCD0_write>
    151a:	25 ec       	ldi	r18, 0xC5	; 197
    151c:	2a 95       	dec	r18
    151e:	f1 f7       	brne	.-4      	; 0x151c <LCD0_inic+0x60>
	_delay_us(37);
	LCD0_write(0x01,INST);// clear display
    1520:	00 00       	nop
    1522:	60 e0       	ldi	r22, 0x00	; 0
    1524:	70 e0       	ldi	r23, 0x00	; 0
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	eb dd       	rcall	.-1066   	; 0x1100 <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    152a:	87 ee       	ldi	r24, 0xE7	; 231
    152c:	97 e1       	ldi	r25, 0x17	; 23
    152e:	01 97       	sbiw	r24, 0x01	; 1
    1530:	f1 f7       	brne	.-4      	; 0x152e <LCD0_inic+0x72>
    1532:	00 c0       	rjmp	.+0      	; 0x1534 <LCD0_inic+0x78>
	_delay_ms(1.53);
	LCD0_write(0x06,INST);// entry mode set (crazy settings)
    1534:	00 00       	nop
    1536:	60 e0       	ldi	r22, 0x00	; 0
    1538:	70 e0       	ldi	r23, 0x00	; 0
    153a:	86 e0       	ldi	r24, 0x06	; 6
    153c:	e1 dd       	rcall	.-1086   	; 0x1100 <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    153e:	95 ec       	ldi	r25, 0xC5	; 197
    1540:	9a 95       	dec	r25
    1542:	f1 f7       	brne	.-4      	; 0x1540 <LCD0_inic+0x84>
    1544:	00 00       	nop
    1546:	08 95       	ret

00001548 <LCD0enable>:
unsigned int LCD_ticks(unsigned int num);
/*
** procedure and function
*/
LCD0 LCD0enable(volatile uint8_t *ddr, volatile uint8_t *pin, volatile uint8_t *port)
{
    1548:	1f 93       	push	r17
    154a:	cf 93       	push	r28
    154c:	df 93       	push	r29
    154e:	ec 01       	movw	r28, r24
	//LOCAL VARIABLES
	uint8_t tSREG;
	tSREG=SREG;
    1550:	1f b7       	in	r17, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    1552:	8f b7       	in	r24, 0x3f	; 63
    1554:	8f 77       	andi	r24, 0x7F	; 127
    1556:	8f bf       	out	0x3f, r24	; 63
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	LCD0 lcd0;
	//import parametros
	lcd0_DDR=ddr;
    1558:	70 93 c0 02 	sts	0x02C0, r23	; 0x8002c0 <lcd0_DDR+0x1>
    155c:	60 93 bf 02 	sts	0x02BF, r22	; 0x8002bf <lcd0_DDR>
	lcd0_PIN=pin;
    1560:	50 93 b9 02 	sts	0x02B9, r21	; 0x8002b9 <lcd0_PIN+0x1>
    1564:	40 93 b8 02 	sts	0x02B8, r20	; 0x8002b8 <lcd0_PIN>
	lcd0_PORT=port;
    1568:	30 93 c3 02 	sts	0x02C3, r19	; 0x8002c3 <lcd0_PORT+0x1>
    156c:	20 93 c2 02 	sts	0x02C2, r18	; 0x8002c2 <lcd0_PORT>
	//inic variables
	*lcd0_DDR=0x00;
    1570:	fb 01       	movw	r30, r22
    1572:	10 82       	st	Z, r1
	*lcd0_PORT=0xFF;
    1574:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    1578:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    157c:	8f ef       	ldi	r24, 0xFF	; 255
    157e:	80 83       	st	Z, r24
	lcd0_detect=*lcd0_PIN & (1<<NC);
    1580:	e0 91 b8 02 	lds	r30, 0x02B8	; 0x8002b8 <lcd0_PIN>
    1584:	f0 91 b9 02 	lds	r31, 0x02B9	; 0x8002b9 <lcd0_PIN+0x1>
    1588:	80 81       	ld	r24, Z
    158a:	88 70       	andi	r24, 0x08	; 8
    158c:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <lcd0_detect>
	lcd0.hspace=LCD0_hspace;
	lcd0.clear=LCD0_clear;
	lcd0.gotoxy=LCD0_gotoxy;
	lcd0.reboot=LCD0_reboot;
	//LCD INIC
	LCD0_inic();
    1590:	95 df       	rcall	.-214    	; 0x14bc <LCD0_inic>
	SREG=tSREG;
    1592:	1f bf       	out	0x3f, r17	; 63
	//
	return lcd0;
    1594:	80 e8       	ldi	r24, 0x80	; 128
    1596:	98 e0       	ldi	r25, 0x08	; 8
    1598:	99 83       	std	Y+1, r25	; 0x01
    159a:	88 83       	st	Y, r24
    159c:	84 e4       	ldi	r24, 0x44	; 68
    159e:	99 e0       	ldi	r25, 0x09	; 9
    15a0:	9b 83       	std	Y+3, r25	; 0x03
    15a2:	8a 83       	std	Y+2, r24	; 0x02
    15a4:	8f eb       	ldi	r24, 0xBF	; 191
    15a6:	99 e0       	ldi	r25, 0x09	; 9
    15a8:	9d 83       	std	Y+5, r25	; 0x05
    15aa:	8c 83       	std	Y+4, r24	; 0x04
    15ac:	81 ed       	ldi	r24, 0xD1	; 209
    15ae:	99 e0       	ldi	r25, 0x09	; 9
    15b0:	9f 83       	std	Y+7, r25	; 0x07
    15b2:	8e 83       	std	Y+6, r24	; 0x06
    15b4:	86 ed       	ldi	r24, 0xD6	; 214
    15b6:	99 e0       	ldi	r25, 0x09	; 9
    15b8:	99 87       	std	Y+9, r25	; 0x09
    15ba:	88 87       	std	Y+8, r24	; 0x08
    15bc:	8f ed       	ldi	r24, 0xDF	; 223
    15be:	99 e0       	ldi	r25, 0x09	; 9
    15c0:	9b 87       	std	Y+11, r25	; 0x0b
    15c2:	8a 87       	std	Y+10, r24	; 0x0a
    15c4:	80 ef       	ldi	r24, 0xF0	; 240
    15c6:	99 e0       	ldi	r25, 0x09	; 9
    15c8:	9d 87       	std	Y+13, r25	; 0x0d
    15ca:	8c 87       	std	Y+12, r24	; 0x0c
    15cc:	8f e1       	ldi	r24, 0x1F	; 31
    15ce:	9a e0       	ldi	r25, 0x0A	; 10
    15d0:	9f 87       	std	Y+15, r25	; 0x0f
    15d2:	8e 87       	std	Y+14, r24	; 0x0e
    15d4:	83 e5       	ldi	r24, 0x53	; 83
    15d6:	9a e0       	ldi	r25, 0x0A	; 10
    15d8:	99 8b       	std	Y+17, r25	; 0x11
    15da:	88 8b       	std	Y+16, r24	; 0x10
    15dc:	8c e2       	ldi	r24, 0x2C	; 44
    15de:	9a e0       	ldi	r25, 0x0A	; 10
    15e0:	9b 8b       	std	Y+19, r25	; 0x13
    15e2:	8a 8b       	std	Y+18, r24	; 0x12
    15e4:	8b ef       	ldi	r24, 0xFB	; 251
    15e6:	9a e0       	ldi	r25, 0x0A	; 10
    15e8:	9d 8b       	std	Y+21, r25	; 0x15
    15ea:	8c 8b       	std	Y+20, r24	; 0x14
}
    15ec:	ce 01       	movw	r24, r28
    15ee:	df 91       	pop	r29
    15f0:	cf 91       	pop	r28
    15f2:	1f 91       	pop	r17
    15f4:	08 95       	ret

000015f6 <LCD0_reboot>:
	*lcd0_PORT|=(1<<EN);
	LCD_ticks(num);
	*lcd0_PORT&=~(1<<EN);
}
void LCD0_reboot(void)
{
    15f6:	cf 93       	push	r28
	//low high detect pin NC
	uint8_t i;
	uint8_t tmp;
	tmp=*lcd0_PIN & (1<<NC);
    15f8:	e0 91 b8 02 	lds	r30, 0x02B8	; 0x8002b8 <lcd0_PIN>
    15fc:	f0 91 b9 02 	lds	r31, 0x02B9	; 0x8002b9 <lcd0_PIN+0x1>
    1600:	c0 81       	ld	r28, Z
    1602:	c8 70       	andi	r28, 0x08	; 8
	i=tmp^lcd0_detect;
    1604:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <lcd0_detect>
    1608:	8c 27       	eor	r24, r28
	i&=tmp;
	if(i)
    160a:	8c 23       	and	r24, r28
    160c:	09 f0       	breq	.+2      	; 0x1610 <LCD0_reboot+0x1a>
		LCD0_inic();
    160e:	56 df       	rcall	.-340    	; 0x14bc <LCD0_inic>
	lcd0_detect=tmp;
    1610:	c0 93 c1 02 	sts	0x02C1, r28	; 0x8002c1 <lcd0_detect>
}
    1614:	cf 91       	pop	r28
    1616:	08 95       	ret

00001618 <LFSMquant>:
	}//End switch
	return status;
}
/***quant***/
uint8_t LFSMquant(struct lfsm *r)
{
    1618:	af 92       	push	r10
    161a:	bf 92       	push	r11
    161c:	cf 92       	push	r12
    161e:	df 92       	push	r13
    1620:	ef 92       	push	r14
    1622:	ff 92       	push	r15
    1624:	0f 93       	push	r16
    1626:	1f 93       	push	r17
    1628:	cf 93       	push	r28
    162a:	df 93       	push	r29
	uint16_t i1;
	uint8_t sizeblock=r->sizeblock;
    162c:	dc 01       	movw	r26, r24
    162e:	14 96       	adiw	r26, 0x04	; 4
    1630:	cc 90       	ld	r12, X
    1632:	14 97       	sbiw	r26, 0x04	; 4
	struct lfsmdata* pdata=&data;
	uint16_t programmed;
	for(i1=ZERO,programmed=ZERO;i1<r->sizeeeprom;i1++){
    1634:	12 96       	adiw	r26, 0x02	; 2
    1636:	2d 91       	ld	r18, X+
    1638:	3c 91       	ld	r19, X
    163a:	13 97       	sbiw	r26, 0x03	; 3
    163c:	23 2b       	or	r18, r19
    163e:	21 f1       	breq	.+72     	; 0x1688 <LFSMquant+0x70>
    1640:	7c 01       	movw	r14, r24
    1642:	d1 2c       	mov	r13, r1
    1644:	00 e0       	ldi	r16, 0x00	; 0
    1646:	10 e0       	ldi	r17, 0x00	; 0
    1648:	a1 2c       	mov	r10, r1
    164a:	b1 2c       	mov	r11, r1
    164c:	c0 e0       	ldi	r28, 0x00	; 0
    164e:	d0 e0       	ldi	r29, 0x00	; 0
		r->eprom->read_block(pdata, (const void*) (i1*sizeblock), sizeblock);
    1650:	d7 01       	movw	r26, r14
    1652:	ed 91       	ld	r30, X+
    1654:	fc 91       	ld	r31, X
    1656:	00 8c       	ldd	r0, Z+24	; 0x18
    1658:	f1 8d       	ldd	r31, Z+25	; 0x19
    165a:	e0 2d       	mov	r30, r0
    165c:	a6 01       	movw	r20, r12
    165e:	b8 01       	movw	r22, r16
    1660:	80 ea       	ldi	r24, 0xA0	; 160
    1662:	92 e0       	ldi	r25, 0x02	; 2
    1664:	09 95       	icall
		if(pdata->page!=EMPTY){ //Count memory used
    1666:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <data>
    166a:	88 23       	and	r24, r24
    166c:	19 f0       	breq	.+6      	; 0x1674 <LFSMquant+0x5c>
			programmed++;
    166e:	bf ef       	ldi	r27, 0xFF	; 255
    1670:	ab 1a       	sub	r10, r27
    1672:	bb 0a       	sbc	r11, r27
{
	uint16_t i1;
	uint8_t sizeblock=r->sizeblock;
	struct lfsmdata* pdata=&data;
	uint16_t programmed;
	for(i1=ZERO,programmed=ZERO;i1<r->sizeeeprom;i1++){
    1674:	21 96       	adiw	r28, 0x01	; 1
    1676:	0c 0d       	add	r16, r12
    1678:	1d 1d       	adc	r17, r13
    167a:	f7 01       	movw	r30, r14
    167c:	82 81       	ldd	r24, Z+2	; 0x02
    167e:	93 81       	ldd	r25, Z+3	; 0x03
    1680:	c8 17       	cp	r28, r24
    1682:	d9 07       	cpc	r29, r25
    1684:	28 f3       	brcs	.-54     	; 0x1650 <LFSMquant+0x38>
    1686:	02 c0       	rjmp	.+4      	; 0x168c <LFSMquant+0x74>
    1688:	a1 2c       	mov	r10, r1
    168a:	b1 2c       	mov	r11, r1
		if(pdata->page!=EMPTY){ //Count memory used
			programmed++;
		}
	}
	return programmed;
}
    168c:	8a 2d       	mov	r24, r10
    168e:	df 91       	pop	r29
    1690:	cf 91       	pop	r28
    1692:	1f 91       	pop	r17
    1694:	0f 91       	pop	r16
    1696:	ff 90       	pop	r15
    1698:	ef 90       	pop	r14
    169a:	df 90       	pop	r13
    169c:	cf 90       	pop	r12
    169e:	bf 90       	pop	r11
    16a0:	af 90       	pop	r10
    16a2:	08 95       	ret

000016a4 <LFSMdeleteall>:
	}//End switch
	return status;
}//End main
/***deleteall***/
uint8_t LFSMdeleteall(struct lfsm *r)
{
    16a4:	af 92       	push	r10
    16a6:	bf 92       	push	r11
    16a8:	cf 92       	push	r12
    16aa:	df 92       	push	r13
    16ac:	ef 92       	push	r14
    16ae:	ff 92       	push	r15
    16b0:	0f 93       	push	r16
    16b2:	1f 93       	push	r17
    16b4:	cf 93       	push	r28
    16b6:	df 93       	push	r29
    16b8:	7c 01       	movw	r14, r24
	uint16_t i1;
	uint8_t status=ZERO;
	uint8_t sizeblock=r->sizeblock;
    16ba:	dc 01       	movw	r26, r24
    16bc:	14 96       	adiw	r26, 0x04	; 4
    16be:	cc 90       	ld	r12, X
    16c0:	14 97       	sbiw	r26, 0x04	; 4
	struct lfsmdata* pdata=&data;
	for(i1=ZERO;i1<r->sizeeeprom;i1++){
    16c2:	12 96       	adiw	r26, 0x02	; 2
    16c4:	8d 91       	ld	r24, X+
    16c6:	9c 91       	ld	r25, X
    16c8:	13 97       	sbiw	r26, 0x03	; 3
    16ca:	89 2b       	or	r24, r25
    16cc:	81 f1       	breq	.+96     	; 0x172e <LFSMdeleteall+0x8a>
    16ce:	d1 2c       	mov	r13, r1
    16d0:	c0 e0       	ldi	r28, 0x00	; 0
    16d2:	d0 e0       	ldi	r29, 0x00	; 0
    16d4:	a1 2c       	mov	r10, r1
    16d6:	00 e0       	ldi	r16, 0x00	; 0
    16d8:	10 e0       	ldi	r17, 0x00	; 0
		r->eprom->read_block(pdata, (const void*) (i1*sizeblock), sizeblock);
		if(pdata->page){
			pdata->page=EMPTY;
			r->eprom->update_block(pdata, (void*) (i1*sizeblock), sizeblock);
			status=1; //All deleted
    16da:	bb 24       	eor	r11, r11
    16dc:	b3 94       	inc	r11
	uint16_t i1;
	uint8_t status=ZERO;
	uint8_t sizeblock=r->sizeblock;
	struct lfsmdata* pdata=&data;
	for(i1=ZERO;i1<r->sizeeeprom;i1++){
		r->eprom->read_block(pdata, (const void*) (i1*sizeblock), sizeblock);
    16de:	d7 01       	movw	r26, r14
    16e0:	ed 91       	ld	r30, X+
    16e2:	fc 91       	ld	r31, X
    16e4:	00 8c       	ldd	r0, Z+24	; 0x18
    16e6:	f1 8d       	ldd	r31, Z+25	; 0x19
    16e8:	e0 2d       	mov	r30, r0
    16ea:	a6 01       	movw	r20, r12
    16ec:	be 01       	movw	r22, r28
    16ee:	80 ea       	ldi	r24, 0xA0	; 160
    16f0:	92 e0       	ldi	r25, 0x02	; 2
    16f2:	09 95       	icall
		if(pdata->page){
    16f4:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <data>
    16f8:	88 23       	and	r24, r24
    16fa:	71 f0       	breq	.+28     	; 0x1718 <LFSMdeleteall+0x74>
			pdata->page=EMPTY;
    16fc:	10 92 a0 02 	sts	0x02A0, r1	; 0x8002a0 <data>
			r->eprom->update_block(pdata, (void*) (i1*sizeblock), sizeblock);
    1700:	d7 01       	movw	r26, r14
    1702:	ed 91       	ld	r30, X+
    1704:	fc 91       	ld	r31, X
    1706:	04 8c       	ldd	r0, Z+28	; 0x1c
    1708:	f5 8d       	ldd	r31, Z+29	; 0x1d
    170a:	e0 2d       	mov	r30, r0
    170c:	a6 01       	movw	r20, r12
    170e:	be 01       	movw	r22, r28
    1710:	80 ea       	ldi	r24, 0xA0	; 160
    1712:	92 e0       	ldi	r25, 0x02	; 2
    1714:	09 95       	icall
			status=1; //All deleted
    1716:	ab 2c       	mov	r10, r11
{
	uint16_t i1;
	uint8_t status=ZERO;
	uint8_t sizeblock=r->sizeblock;
	struct lfsmdata* pdata=&data;
	for(i1=ZERO;i1<r->sizeeeprom;i1++){
    1718:	0f 5f       	subi	r16, 0xFF	; 255
    171a:	1f 4f       	sbci	r17, 0xFF	; 255
    171c:	cc 0d       	add	r28, r12
    171e:	dd 1d       	adc	r29, r13
    1720:	f7 01       	movw	r30, r14
    1722:	82 81       	ldd	r24, Z+2	; 0x02
    1724:	93 81       	ldd	r25, Z+3	; 0x03
    1726:	08 17       	cp	r16, r24
    1728:	19 07       	cpc	r17, r25
    172a:	c8 f2       	brcs	.-78     	; 0x16de <LFSMdeleteall+0x3a>
    172c:	01 c0       	rjmp	.+2      	; 0x1730 <LFSMdeleteall+0x8c>
}//End main
/***deleteall***/
uint8_t LFSMdeleteall(struct lfsm *r)
{
	uint16_t i1;
	uint8_t status=ZERO;
    172e:	a1 2c       	mov	r10, r1
			pdata->page=EMPTY;
			r->eprom->update_block(pdata, (void*) (i1*sizeblock), sizeblock);
			status=1; //All deleted
		}
	}
	r->output=ZERO;
    1730:	d7 01       	movw	r26, r14
    1732:	17 96       	adiw	r26, 0x07	; 7
    1734:	1c 92       	st	X, r1
    1736:	17 97       	sbiw	r26, 0x07	; 7
	r->status=ZERO;
    1738:	18 96       	adiw	r26, 0x08	; 8
    173a:	1c 92       	st	X, r1
	return status;
}
    173c:	8a 2d       	mov	r24, r10
    173e:	df 91       	pop	r29
    1740:	cf 91       	pop	r28
    1742:	1f 91       	pop	r17
    1744:	0f 91       	pop	r16
    1746:	ff 90       	pop	r15
    1748:	ef 90       	pop	r14
    174a:	df 90       	pop	r13
    174c:	cf 90       	pop	r12
    174e:	bf 90       	pop	r11
    1750:	af 90       	pop	r10
    1752:	08 95       	ret

00001754 <LFSMgetoutput>:
/***get***/
uint8_t LFSMgetoutput(struct lfsm *r)
{
	return r->output;
}
    1754:	fc 01       	movw	r30, r24
    1756:	87 81       	ldd	r24, Z+7	; 0x07
    1758:	08 95       	ret

0000175a <LFSMgetstatus>:
/***get***/
uint8_t LFSMgetstatus(struct lfsm *r)
{
	return r->status;
}
    175a:	fc 01       	movw	r30, r24
    175c:	80 85       	ldd	r24, Z+8	; 0x08
    175e:	08 95       	ret

00001760 <LFSMsetoutput>:
/***set***/
void LFSMsetoutput(struct lfsm *r, uint8_t output)
{
	r->output=output;
    1760:	fc 01       	movw	r30, r24
    1762:	67 83       	std	Z+7, r22	; 0x07
	r->status=ZERO;
    1764:	10 86       	std	Z+8, r1	; 0x08
    1766:	08 95       	ret

00001768 <LFSMgetpage>:
}
/***get***/
uint8_t LFSMgetpage(struct lfsm *r)
{
	return r->page;
}
    1768:	fc 01       	movw	r30, r24
    176a:	85 81       	ldd	r24, Z+5	; 0x05
    176c:	08 95       	ret

0000176e <LFSMsetpage>:
/***set***/
void LFSMsetpage(struct lfsm *r, uint8_t page)
{
	r->page=page;
    176e:	fc 01       	movw	r30, r24
    1770:	65 83       	std	Z+5, r22	; 0x05
    1772:	08 95       	ret

00001774 <LFSMread>:
/*
** procedure and function
*/
/***read***/
uint8_t LFSMread(struct lfsm *r, uint8_t input)
{
    1774:	2f 92       	push	r2
    1776:	3f 92       	push	r3
    1778:	4f 92       	push	r4
    177a:	5f 92       	push	r5
    177c:	6f 92       	push	r6
    177e:	7f 92       	push	r7
    1780:	8f 92       	push	r8
    1782:	9f 92       	push	r9
    1784:	af 92       	push	r10
    1786:	bf 92       	push	r11
    1788:	cf 92       	push	r12
    178a:	df 92       	push	r13
    178c:	ef 92       	push	r14
    178e:	ff 92       	push	r15
    1790:	0f 93       	push	r16
    1792:	1f 93       	push	r17
    1794:	cf 93       	push	r28
    1796:	df 93       	push	r29
    1798:	8c 01       	movw	r16, r24
    179a:	c6 2e       	mov	r12, r22
	struct lfsmdata* pdata=&data;
	int16_t n=ZERO;
	uint8_t n1=NPAGES,n2=NPAGES;
	uint8_t page=r->page;
	uint8_t HL,LH;
	HL=LFSMhl(r->input,input);
    179c:	dc 01       	movw	r26, r24
    179e:	16 96       	adiw	r26, 0x06	; 6
    17a0:	dc 90       	ld	r13, X
    17a2:	16 97       	sbiw	r26, 0x06	; 6
	LH=LFSMlh(r->input,input);
	if(HL || LH){ //To not waste time
    17a4:	bd 2c       	mov	r11, r13
    17a6:	b6 26       	eor	r11, r22
    17a8:	d6 16       	cp	r13, r22
    17aa:	09 f4       	brne	.+2      	; 0x17ae <LFSMread+0x3a>
    17ac:	1a c1       	rjmp	.+564    	; 0x19e2 <LFSMread+0x26e>
		status=1; //New entry
		for(i1=ZERO;i1<r->sizeeeprom;i1++){
    17ae:	12 96       	adiw	r26, 0x02	; 2
    17b0:	8d 91       	ld	r24, X+
    17b2:	9c 91       	ld	r25, X
    17b4:	13 97       	sbiw	r26, 0x03	; 3
    17b6:	89 2b       	or	r24, r25
    17b8:	09 f4       	brne	.+2      	; 0x17bc <LFSMread+0x48>
    17ba:	a2 c0       	rjmp	.+324    	; 0x1900 <LFSMread+0x18c>
/***read***/
uint8_t LFSMread(struct lfsm *r, uint8_t input)
{
	uint16_t i1;
	uint8_t status=ZERO;
	uint8_t sizeblock=r->sizeblock;
    17bc:	14 96       	adiw	r26, 0x04	; 4
    17be:	ec 90       	ld	r14, X
    17c0:	14 97       	sbiw	r26, 0x04	; 4
	struct lfsmdata* pdata=&data;
	int16_t n=ZERO;
	uint8_t n1=NPAGES,n2=NPAGES;
	uint8_t page=r->page;
    17c2:	15 96       	adiw	r26, 0x05	; 5
    17c4:	6c 90       	ld	r6, X
/***hl***/
uint8_t LFSMhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xf^xi;
	i&=xi;
    17c6:	db 20       	and	r13, r11
/***lh***/
uint8_t LFSMlh(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xf^xi;
	i&=xf;
    17c8:	b6 22       	and	r11, r22
    17ca:	55 24       	eor	r5, r5
    17cc:	5a 94       	dec	r5
    17ce:	77 24       	eor	r7, r7
    17d0:	7a 94       	dec	r7
    17d2:	aa 24       	eor	r10, r10
    17d4:	a3 94       	inc	r10
    17d6:	c0 e0       	ldi	r28, 0x00	; 0
    17d8:	d0 e0       	ldi	r29, 0x00	; 0
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(HL || LH){ //To not waste time
		status=1; //New entry
		for(i1=ZERO;i1<r->sizeeeprom;i1++){
			r->eprom->read_block(pdata, (const void*) (i1*sizeblock), sizeblock);
    17da:	f1 2c       	mov	r15, r1
							status=2; //Global logic exist
					}
					break;
				default: //Local logic
					if( (pdata->feedback & pdata->mask)==(r->output & pdata->mask) && pdata->inhl==HL && pdata->inlh==LH ){
						n=pdata->page - page;	
    17dc:	86 2c       	mov	r8, r6
    17de:	91 2c       	mov	r9, r1
						}
						if(n<ZERO){
							if(n > -n2){
								tmp2=*pdata;
								n2=-n;
								status=4; //Local logic exist in page bellow
    17e0:	68 94       	set
    17e2:	22 24       	eor	r2, r2
    17e4:	22 f8       	bld	r2, 2
				default: //Local logic
					if( (pdata->feedback & pdata->mask)==(r->output & pdata->mask) && pdata->inhl==HL && pdata->inlh==LH ){
						n=pdata->page - page;	
						if(!n){
							i1=r->sizeeeprom;
							status=3; //Local logic exist in present page
    17e6:	0f 2e       	mov	r0, r31
    17e8:	f3 e0       	ldi	r31, 0x03	; 3
    17ea:	3f 2e       	mov	r3, r31
    17ec:	f0 2d       	mov	r31, r0
					//Do nothing, continue search in status=1.
					break;
				case 1: //Global logic
					if( pdata->inhl==HL && pdata->inlh==LH ){
							i1=r->sizeeeprom;
							status=2; //Global logic exist
    17ee:	68 94       	set
    17f0:	44 24       	eor	r4, r4
    17f2:	41 f8       	bld	r4, 1
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(HL || LH){ //To not waste time
		status=1; //New entry
		for(i1=ZERO;i1<r->sizeeeprom;i1++){
			r->eprom->read_block(pdata, (const void*) (i1*sizeblock), sizeblock);
    17f4:	ec 9e       	mul	r14, r28
    17f6:	b0 01       	movw	r22, r0
    17f8:	ed 9e       	mul	r14, r29
    17fa:	70 0d       	add	r23, r0
    17fc:	fc 9e       	mul	r15, r28
    17fe:	70 0d       	add	r23, r0
    1800:	11 24       	eor	r1, r1
    1802:	d8 01       	movw	r26, r16
    1804:	ed 91       	ld	r30, X+
    1806:	fc 91       	ld	r31, X
    1808:	00 8c       	ldd	r0, Z+24	; 0x18
    180a:	f1 8d       	ldd	r31, Z+25	; 0x19
    180c:	e0 2d       	mov	r30, r0
    180e:	a7 01       	movw	r20, r14
    1810:	80 ea       	ldi	r24, 0xA0	; 160
    1812:	92 e0       	ldi	r25, 0x02	; 2
    1814:	09 95       	icall
			switch(pdata->page){
    1816:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <data>
    181a:	88 23       	and	r24, r24
    181c:	09 f4       	brne	.+2      	; 0x1820 <LFSMread+0xac>
    181e:	58 c0       	rjmp	.+176    	; 0x18d0 <LFSMread+0x15c>
    1820:	81 30       	cpi	r24, 0x01	; 1
    1822:	69 f4       	brne	.+26     	; 0x183e <LFSMread+0xca>
				case ZERO:
					//Do nothing, continue search in status=1.
					break;
				case 1: //Global logic
					if( pdata->inhl==HL && pdata->inlh==LH ){
    1824:	90 91 a2 02 	lds	r25, 0x02A2	; 0x8002a2 <data+0x2>
    1828:	9d 11       	cpse	r25, r13
    182a:	52 c0       	rjmp	.+164    	; 0x18d0 <LFSMread+0x15c>
    182c:	90 91 a3 02 	lds	r25, 0x02A3	; 0x8002a3 <data+0x3>
    1830:	9b 11       	cpse	r25, r11
    1832:	4e c0       	rjmp	.+156    	; 0x18d0 <LFSMread+0x15c>
							i1=r->sizeeeprom;
    1834:	f8 01       	movw	r30, r16
    1836:	c2 81       	ldd	r28, Z+2	; 0x02
    1838:	d3 81       	ldd	r29, Z+3	; 0x03
							status=2; //Global logic exist
    183a:	a4 2c       	mov	r10, r4
    183c:	49 c0       	rjmp	.+146    	; 0x18d0 <LFSMread+0x15c>
					}
					break;
				default: //Local logic
					if( (pdata->feedback & pdata->mask)==(r->output & pdata->mask) && pdata->inhl==HL && pdata->inlh==LH ){
    183e:	e0 ea       	ldi	r30, 0xA0	; 160
    1840:	f2 e0       	ldi	r31, 0x02	; 2
    1842:	21 81       	ldd	r18, Z+1	; 0x01
    1844:	d8 01       	movw	r26, r16
    1846:	17 96       	adiw	r26, 0x07	; 7
    1848:	9c 91       	ld	r25, X
    184a:	17 97       	sbiw	r26, 0x07	; 7
    184c:	92 27       	eor	r25, r18
    184e:	24 81       	ldd	r18, Z+4	; 0x04
    1850:	92 23       	and	r25, r18
    1852:	09 f0       	breq	.+2      	; 0x1856 <LFSMread+0xe2>
    1854:	3d c0       	rjmp	.+122    	; 0x18d0 <LFSMread+0x15c>
    1856:	90 91 a2 02 	lds	r25, 0x02A2	; 0x8002a2 <data+0x2>
    185a:	9d 11       	cpse	r25, r13
    185c:	39 c0       	rjmp	.+114    	; 0x18d0 <LFSMread+0x15c>
    185e:	90 91 a3 02 	lds	r25, 0x02A3	; 0x8002a3 <data+0x3>
    1862:	9b 11       	cpse	r25, r11
    1864:	35 c0       	rjmp	.+106    	; 0x18d0 <LFSMread+0x15c>
						n=pdata->page - page;	
    1866:	28 2f       	mov	r18, r24
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	28 19       	sub	r18, r8
    186c:	39 09       	sbc	r19, r9
						if(!n){
    186e:	31 f4       	brne	.+12     	; 0x187c <LFSMread+0x108>
							i1=r->sizeeeprom;
    1870:	12 96       	adiw	r26, 0x02	; 2
    1872:	cd 91       	ld	r28, X+
    1874:	dc 91       	ld	r29, X
    1876:	13 97       	sbiw	r26, 0x03	; 3
							status=3; //Local logic exist in present page
    1878:	a3 2c       	mov	r10, r3
							break;
    187a:	2a c0       	rjmp	.+84     	; 0x18d0 <LFSMread+0x15c>
						}
						if(n>ZERO){
    187c:	12 16       	cp	r1, r18
    187e:	13 06       	cpc	r1, r19
    1880:	8c f4       	brge	.+34     	; 0x18a4 <LFSMread+0x130>
							if(n < n1){
    1882:	47 2d       	mov	r20, r7
    1884:	50 e0       	ldi	r21, 0x00	; 0
    1886:	24 17       	cp	r18, r20
    1888:	35 07       	cpc	r19, r21
    188a:	64 f4       	brge	.+24     	; 0x18a4 <LFSMread+0x130>
								tmp1=*pdata;
    188c:	97 e0       	ldi	r25, 0x07	; 7
    188e:	e0 ea       	ldi	r30, 0xA0	; 160
    1890:	f2 e0       	ldi	r31, 0x02	; 2
    1892:	ad ec       	ldi	r26, 0xCD	; 205
    1894:	b2 e0       	ldi	r27, 0x02	; 2
    1896:	01 90       	ld	r0, Z+
    1898:	0d 92       	st	X+, r0
    189a:	9a 95       	dec	r25
    189c:	e1 f7       	brne	.-8      	; 0x1896 <LFSMread+0x122>
    189e:	78 2e       	mov	r7, r24
    18a0:	76 18       	sub	r7, r6
								n1=n;
								status=4; //Local logic exist in page above
    18a2:	a2 2c       	mov	r10, r2
							}
						}
						if(n<ZERO){
    18a4:	33 23       	and	r19, r19
    18a6:	a4 f4       	brge	.+40     	; 0x18d0 <LFSMread+0x15c>
							if(n > -n2){
    18a8:	45 2d       	mov	r20, r5
    18aa:	50 e0       	ldi	r21, 0x00	; 0
    18ac:	51 95       	neg	r21
    18ae:	41 95       	neg	r20
    18b0:	51 09       	sbc	r21, r1
    18b2:	42 17       	cp	r20, r18
    18b4:	53 07       	cpc	r21, r19
    18b6:	64 f4       	brge	.+24     	; 0x18d0 <LFSMread+0x15c>
								tmp2=*pdata;
    18b8:	97 e0       	ldi	r25, 0x07	; 7
    18ba:	e0 ea       	ldi	r30, 0xA0	; 160
    18bc:	f2 e0       	ldi	r31, 0x02	; 2
    18be:	a6 ec       	ldi	r26, 0xC6	; 198
    18c0:	b2 e0       	ldi	r27, 0x02	; 2
    18c2:	01 90       	ld	r0, Z+
    18c4:	0d 92       	st	X+, r0
    18c6:	9a 95       	dec	r25
    18c8:	e1 f7       	brne	.-8      	; 0x18c2 <LFSMread+0x14e>
								n2=-n;
    18ca:	56 2c       	mov	r5, r6
    18cc:	58 1a       	sub	r5, r24
								status=4; //Local logic exist in page bellow
    18ce:	a2 2c       	mov	r10, r2
	uint8_t HL,LH;
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(HL || LH){ //To not waste time
		status=1; //New entry
		for(i1=ZERO;i1<r->sizeeeprom;i1++){
    18d0:	21 96       	adiw	r28, 0x01	; 1
    18d2:	f8 01       	movw	r30, r16
    18d4:	22 81       	ldd	r18, Z+2	; 0x02
    18d6:	33 81       	ldd	r19, Z+3	; 0x03
    18d8:	c2 17       	cp	r28, r18
    18da:	d3 07       	cpc	r29, r19
    18dc:	08 f4       	brcc	.+2      	; 0x18e0 <LFSMread+0x16c>
    18de:	8a cf       	rjmp	.-236    	; 0x17f4 <LFSMread+0x80>
					break;
			}//End switch
		}
	}
/***status confirmation***/
	switch (status){
    18e0:	f2 e0       	ldi	r31, 0x02	; 2
    18e2:	af 16       	cp	r10, r31
    18e4:	81 f0       	breq	.+32     	; 0x1906 <LFSMread+0x192>
    18e6:	fa 15       	cp	r31, r10
    18e8:	20 f0       	brcs	.+8      	; 0x18f2 <LFSMread+0x17e>
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	a8 16       	cp	r10, r24
    18ee:	41 f0       	breq	.+16     	; 0x1900 <LFSMread+0x18c>
    18f0:	78 c0       	rjmp	.+240    	; 0x19e2 <LFSMread+0x26e>
    18f2:	93 e0       	ldi	r25, 0x03	; 3
    18f4:	a9 16       	cp	r10, r25
    18f6:	11 f1       	breq	.+68     	; 0x193c <LFSMread+0x1c8>
    18f8:	a4 e0       	ldi	r26, 0x04	; 4
    18fa:	aa 16       	cp	r10, r26
    18fc:	b9 f1       	breq	.+110    	; 0x196c <LFSMread+0x1f8>
    18fe:	71 c0       	rjmp	.+226    	; 0x19e2 <LFSMread+0x26e>
		case ZERO: //No entry
			break;
		case 1: //New entry
			//Give warning and pause waiting for decision (very important).
			//Serves has flag to main function.
			r->input=input; //Update
    1900:	f8 01       	movw	r30, r16
    1902:	c6 82       	std	Z+6, r12	; 0x06
			break;
    1904:	6e c0       	rjmp	.+220    	; 0x19e2 <LFSMread+0x26e>
		case 2: //Global logic exist
			r->page=pdata->page;
    1906:	d8 01       	movw	r26, r16
    1908:	15 96       	adiw	r26, 0x05	; 5
    190a:	8c 93       	st	X, r24
    190c:	15 97       	sbiw	r26, 0x05	; 5
			r->input=input; //Update
    190e:	16 96       	adiw	r26, 0x06	; 6
    1910:	cc 92       	st	X, r12
    1912:	16 97       	sbiw	r26, 0x06	; 6
			r->output=LFSMoutputcalc(r->output,pdata->outhl,pdata->outlh,pdata->mask);
    1914:	e0 ea       	ldi	r30, 0xA0	; 160
    1916:	f2 e0       	ldi	r31, 0x02	; 2
    1918:	34 81       	ldd	r19, Z+4	; 0x04
*/
/***output***/
uint8_t LFSMoutputcalc(uint8_t feedback, uint8_t hl, uint8_t lh, uint8_t mask)
{
	feedback|=(lh & mask);
	feedback&=~(hl & mask);
    191a:	86 81       	ldd	r24, Z+6	; 0x06
    191c:	83 23       	and	r24, r19
    191e:	17 96       	adiw	r26, 0x07	; 7
    1920:	2c 91       	ld	r18, X
    1922:	17 97       	sbiw	r26, 0x07	; 7
    1924:	82 2b       	or	r24, r18
    1926:	95 81       	ldd	r25, Z+5	; 0x05
    1928:	93 23       	and	r25, r19
    192a:	90 95       	com	r25
    192c:	89 23       	and	r24, r25
			r->input=input; //Update
			break;
		case 2: //Global logic exist
			r->page=pdata->page;
			r->input=input; //Update
			r->output=LFSMoutputcalc(r->output,pdata->outhl,pdata->outlh,pdata->mask);
    192e:	17 96       	adiw	r26, 0x07	; 7
    1930:	8c 93       	st	X, r24
    1932:	17 97       	sbiw	r26, 0x07	; 7
			r->status=2;
    1934:	82 e0       	ldi	r24, 0x02	; 2
    1936:	18 96       	adiw	r26, 0x08	; 8
    1938:	8c 93       	st	X, r24
			break;
    193a:	53 c0       	rjmp	.+166    	; 0x19e2 <LFSMread+0x26e>
		case 3: //Local logic exist in present page
			r->page=pdata->page;
    193c:	f8 01       	movw	r30, r16
    193e:	85 83       	std	Z+5, r24	; 0x05
			r->input=input; //Update
    1940:	c6 82       	std	Z+6, r12	; 0x06
			r->output=LFSMoutputcalc(r->output,pdata->outhl,pdata->outlh,pdata->mask);
    1942:	e0 ea       	ldi	r30, 0xA0	; 160
    1944:	f2 e0       	ldi	r31, 0x02	; 2
    1946:	34 81       	ldd	r19, Z+4	; 0x04
*/
/***output***/
uint8_t LFSMoutputcalc(uint8_t feedback, uint8_t hl, uint8_t lh, uint8_t mask)
{
	feedback|=(lh & mask);
	feedback&=~(hl & mask);
    1948:	86 81       	ldd	r24, Z+6	; 0x06
    194a:	83 23       	and	r24, r19
    194c:	d8 01       	movw	r26, r16
    194e:	17 96       	adiw	r26, 0x07	; 7
    1950:	2c 91       	ld	r18, X
    1952:	17 97       	sbiw	r26, 0x07	; 7
    1954:	82 2b       	or	r24, r18
    1956:	95 81       	ldd	r25, Z+5	; 0x05
    1958:	93 23       	and	r25, r19
    195a:	90 95       	com	r25
    195c:	89 23       	and	r24, r25
			r->status=2;
			break;
		case 3: //Local logic exist in present page
			r->page=pdata->page;
			r->input=input; //Update
			r->output=LFSMoutputcalc(r->output,pdata->outhl,pdata->outlh,pdata->mask);
    195e:	17 96       	adiw	r26, 0x07	; 7
    1960:	8c 93       	st	X, r24
    1962:	17 97       	sbiw	r26, 0x07	; 7
			r->status=3;
    1964:	83 e0       	ldi	r24, 0x03	; 3
    1966:	18 96       	adiw	r26, 0x08	; 8
    1968:	8c 93       	st	X, r24
			break;
    196a:	3b c0       	rjmp	.+118    	; 0x19e2 <LFSMread+0x26e>
		case 4: //Local logic exist in page above versus local logic exist in page bellow
			//Choose closest page above otherwise closest bellow.
			r->input=input; //update
    196c:	f8 01       	movw	r30, r16
    196e:	c6 82       	std	Z+6, r12	; 0x06
			if(n1>ZERO && n1<NPAGES){
    1970:	8f ef       	ldi	r24, 0xFF	; 255
    1972:	87 0d       	add	r24, r7
    1974:	8e 3f       	cpi	r24, 0xFE	; 254
    1976:	c8 f4       	brcc	.+50     	; 0x19aa <LFSMread+0x236>
				r->page = tmp1.page;
    1978:	ed ec       	ldi	r30, 0xCD	; 205
    197a:	f2 e0       	ldi	r31, 0x02	; 2
    197c:	80 81       	ld	r24, Z
    197e:	d8 01       	movw	r26, r16
    1980:	15 96       	adiw	r26, 0x05	; 5
    1982:	8c 93       	st	X, r24
    1984:	15 97       	sbiw	r26, 0x05	; 5
				r->output=LFSMoutputcalc(r->output,tmp1.outhl,tmp1.outlh,tmp1.mask);
    1986:	84 81       	ldd	r24, Z+4	; 0x04
*/
/***output***/
uint8_t LFSMoutputcalc(uint8_t feedback, uint8_t hl, uint8_t lh, uint8_t mask)
{
	feedback|=(lh & mask);
	feedback&=~(hl & mask);
    1988:	26 81       	ldd	r18, Z+6	; 0x06
    198a:	28 23       	and	r18, r24
    198c:	17 96       	adiw	r26, 0x07	; 7
    198e:	9c 91       	ld	r25, X
    1990:	17 97       	sbiw	r26, 0x07	; 7
    1992:	29 2b       	or	r18, r25
    1994:	95 81       	ldd	r25, Z+5	; 0x05
    1996:	89 23       	and	r24, r25
    1998:	80 95       	com	r24
    199a:	82 23       	and	r24, r18
		case 4: //Local logic exist in page above versus local logic exist in page bellow
			//Choose closest page above otherwise closest bellow.
			r->input=input; //update
			if(n1>ZERO && n1<NPAGES){
				r->page = tmp1.page;
				r->output=LFSMoutputcalc(r->output,tmp1.outhl,tmp1.outlh,tmp1.mask);
    199c:	17 96       	adiw	r26, 0x07	; 7
    199e:	8c 93       	st	X, r24
    19a0:	17 97       	sbiw	r26, 0x07	; 7
				r->status=41;
    19a2:	89 e2       	ldi	r24, 0x29	; 41
    19a4:	18 96       	adiw	r26, 0x08	; 8
    19a6:	8c 93       	st	X, r24
    19a8:	1c c0       	rjmp	.+56     	; 0x19e2 <LFSMread+0x26e>
			}
			else if(n2>ZERO && n2<NPAGES){
    19aa:	8f ef       	ldi	r24, 0xFF	; 255
    19ac:	85 0d       	add	r24, r5
    19ae:	8e 3f       	cpi	r24, 0xFE	; 254
    19b0:	c0 f4       	brcc	.+48     	; 0x19e2 <LFSMread+0x26e>
				r->page=tmp2.page;
    19b2:	e6 ec       	ldi	r30, 0xC6	; 198
    19b4:	f2 e0       	ldi	r31, 0x02	; 2
    19b6:	80 81       	ld	r24, Z
    19b8:	d8 01       	movw	r26, r16
    19ba:	15 96       	adiw	r26, 0x05	; 5
    19bc:	8c 93       	st	X, r24
    19be:	15 97       	sbiw	r26, 0x05	; 5
				r->output=LFSMoutputcalc(r->output,tmp2.outhl,tmp2.outlh,tmp2.mask);
    19c0:	84 81       	ldd	r24, Z+4	; 0x04
*/
/***output***/
uint8_t LFSMoutputcalc(uint8_t feedback, uint8_t hl, uint8_t lh, uint8_t mask)
{
	feedback|=(lh & mask);
	feedback&=~(hl & mask);
    19c2:	26 81       	ldd	r18, Z+6	; 0x06
    19c4:	28 23       	and	r18, r24
    19c6:	17 96       	adiw	r26, 0x07	; 7
    19c8:	9c 91       	ld	r25, X
    19ca:	17 97       	sbiw	r26, 0x07	; 7
    19cc:	29 2b       	or	r18, r25
    19ce:	95 81       	ldd	r25, Z+5	; 0x05
    19d0:	89 23       	and	r24, r25
    19d2:	80 95       	com	r24
    19d4:	82 23       	and	r24, r18
				r->output=LFSMoutputcalc(r->output,tmp1.outhl,tmp1.outlh,tmp1.mask);
				r->status=41;
			}
			else if(n2>ZERO && n2<NPAGES){
				r->page=tmp2.page;
				r->output=LFSMoutputcalc(r->output,tmp2.outhl,tmp2.outlh,tmp2.mask);
    19d6:	17 96       	adiw	r26, 0x07	; 7
    19d8:	8c 93       	st	X, r24
    19da:	17 97       	sbiw	r26, 0x07	; 7
				r->status=42;
    19dc:	8a e2       	ldi	r24, 0x2A	; 42
    19de:	18 96       	adiw	r26, 0x08	; 8
    19e0:	8c 93       	st	X, r24
			break;
		default:
			break;
	}//End switch
	return r->status;
}
    19e2:	f8 01       	movw	r30, r16
    19e4:	80 85       	ldd	r24, Z+8	; 0x08
    19e6:	df 91       	pop	r29
    19e8:	cf 91       	pop	r28
    19ea:	1f 91       	pop	r17
    19ec:	0f 91       	pop	r16
    19ee:	ff 90       	pop	r15
    19f0:	ef 90       	pop	r14
    19f2:	df 90       	pop	r13
    19f4:	cf 90       	pop	r12
    19f6:	bf 90       	pop	r11
    19f8:	af 90       	pop	r10
    19fa:	9f 90       	pop	r9
    19fc:	8f 90       	pop	r8
    19fe:	7f 90       	pop	r7
    1a00:	6f 90       	pop	r6
    1a02:	5f 90       	pop	r5
    1a04:	4f 90       	pop	r4
    1a06:	3f 90       	pop	r3
    1a08:	2f 90       	pop	r2
    1a0a:	08 95       	ret

00001a0c <LFSMremove>:
	}
	return programmed;
}
/***remove***/
uint8_t LFSMremove(struct lfsm *r, uint8_t input)
{
    1a0c:	2f 92       	push	r2
    1a0e:	3f 92       	push	r3
    1a10:	4f 92       	push	r4
    1a12:	5f 92       	push	r5
    1a14:	6f 92       	push	r6
    1a16:	7f 92       	push	r7
    1a18:	8f 92       	push	r8
    1a1a:	9f 92       	push	r9
    1a1c:	af 92       	push	r10
    1a1e:	bf 92       	push	r11
    1a20:	cf 92       	push	r12
    1a22:	df 92       	push	r13
    1a24:	ef 92       	push	r14
    1a26:	ff 92       	push	r15
    1a28:	0f 93       	push	r16
    1a2a:	1f 93       	push	r17
    1a2c:	cf 93       	push	r28
    1a2e:	df 93       	push	r29
    1a30:	00 d0       	rcall	.+0      	; 0x1a32 <LFSMremove+0x26>
    1a32:	00 d0       	rcall	.+0      	; 0x1a34 <LFSMremove+0x28>
    1a34:	00 d0       	rcall	.+0      	; 0x1a36 <LFSMremove+0x2a>
    1a36:	cd b7       	in	r28, 0x3d	; 61
    1a38:	de b7       	in	r29, 0x3e	; 62
    1a3a:	fc 01       	movw	r30, r24
	uint16_t k,k1,k2,i1;
	k=k1=k2=ZERO;
	uint8_t status=ZERO;
	uint8_t sizeblock=r->sizeblock;
    1a3c:	04 81       	ldd	r16, Z+4	; 0x04
	struct lfsmdata* pdata=&data;
	struct lfsmdata* ptmp1=&tmp1;
	ptmp1->page=EMPTY;
    1a3e:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <tmp1>
	int16_t n=ZERO;
	uint8_t n1=NPAGES,n2=NPAGES;
	uint8_t page=r->page;
	uint8_t HL,LH;
	HL=LFSMhl(r->input,input);
    1a42:	b6 80       	ldd	r11, Z+6	; 0x06
	LH=LFSMlh(r->input,input);
	if(HL || LH){ //To not waste time
    1a44:	9b 2c       	mov	r9, r11
    1a46:	96 26       	eor	r9, r22
    1a48:	b6 16       	cp	r11, r22
    1a4a:	09 f4       	brne	.+2      	; 0x1a4e <LFSMremove+0x42>
    1a4c:	04 c1       	rjmp	.+520    	; 0x1c56 <LFSMremove+0x24a>
		status=1; //New entry
		for(i1=ZERO;i1<r->sizeeeprom;i1++){
    1a4e:	82 81       	ldd	r24, Z+2	; 0x02
    1a50:	93 81       	ldd	r25, Z+3	; 0x03
    1a52:	89 2b       	or	r24, r25
    1a54:	09 f4       	brne	.+2      	; 0x1a58 <LFSMremove+0x4c>
    1a56:	01 c1       	rjmp	.+514    	; 0x1c5a <LFSMremove+0x24e>
    1a58:	7f 01       	movw	r14, r30
	struct lfsmdata* pdata=&data;
	struct lfsmdata* ptmp1=&tmp1;
	ptmp1->page=EMPTY;
	int16_t n=ZERO;
	uint8_t n1=NPAGES,n2=NPAGES;
	uint8_t page=r->page;
    1a5a:	75 80       	ldd	r7, Z+5	; 0x05
/***hl***/
uint8_t LFSMhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xf^xi;
	i&=xi;
    1a5c:	b9 20       	and	r11, r9
/***lh***/
uint8_t LFSMlh(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xf^xi;
	i&=xf;
    1a5e:	96 22       	and	r9, r22
    1a60:	66 24       	eor	r6, r6
    1a62:	6a 94       	dec	r6
    1a64:	88 24       	eor	r8, r8
    1a66:	8a 94       	dec	r8
    1a68:	aa 24       	eor	r10, r10
    1a6a:	a3 94       	inc	r10
    1a6c:	1e 82       	std	Y+6, r1	; 0x06
    1a6e:	1d 82       	std	Y+5, r1	; 0x05
    1a70:	1c 82       	std	Y+4, r1	; 0x04
    1a72:	1b 82       	std	Y+3, r1	; 0x03
    1a74:	1a 82       	std	Y+2, r1	; 0x02
    1a76:	19 82       	std	Y+1, r1	; 0x01
    1a78:	21 2c       	mov	r2, r1
    1a7a:	31 2c       	mov	r3, r1
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(HL || LH){ //To not waste time
		status=1; //New entry
		for(i1=ZERO;i1<r->sizeeeprom;i1++){
			r->eprom->read_block(pdata, (const void*) (i1*sizeblock), sizeblock);
    1a7c:	10 e0       	ldi	r17, 0x00	; 0
						status=2; //Global logic exist
					}
					break;
				default: //Local logic
					if( (pdata->feedback & pdata->mask)==(r->output & pdata->mask) && pdata->inhl==HL && pdata->inlh==LH ){
						n=pdata->page - page;
    1a7e:	47 2c       	mov	r4, r7
    1a80:	51 2c       	mov	r5, r1
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(HL || LH){ //To not waste time
		status=1; //New entry
		for(i1=ZERO;i1<r->sizeeeprom;i1++){
			r->eprom->read_block(pdata, (const void*) (i1*sizeblock), sizeblock);
    1a82:	68 01       	movw	r12, r16
    1a84:	8d 81       	ldd	r24, Y+5	; 0x05
    1a86:	9e 81       	ldd	r25, Y+6	; 0x06
    1a88:	08 9f       	mul	r16, r24
    1a8a:	b0 01       	movw	r22, r0
    1a8c:	09 9f       	mul	r16, r25
    1a8e:	70 0d       	add	r23, r0
    1a90:	18 9f       	mul	r17, r24
    1a92:	70 0d       	add	r23, r0
    1a94:	11 24       	eor	r1, r1
    1a96:	d7 01       	movw	r26, r14
    1a98:	ed 91       	ld	r30, X+
    1a9a:	fc 91       	ld	r31, X
    1a9c:	00 8c       	ldd	r0, Z+24	; 0x18
    1a9e:	f1 8d       	ldd	r31, Z+25	; 0x19
    1aa0:	e0 2d       	mov	r30, r0
    1aa2:	a8 01       	movw	r20, r16
    1aa4:	80 ea       	ldi	r24, 0xA0	; 160
    1aa6:	92 e0       	ldi	r25, 0x02	; 2
    1aa8:	09 95       	icall
			switch(pdata->page){
    1aaa:	40 91 a0 02 	lds	r20, 0x02A0	; 0x8002a0 <data>
    1aae:	44 23       	and	r20, r20
    1ab0:	09 f4       	brne	.+2      	; 0x1ab4 <LFSMremove+0xa8>
    1ab2:	60 c0       	rjmp	.+192    	; 0x1b74 <LFSMremove+0x168>
    1ab4:	41 30       	cpi	r20, 0x01	; 1
    1ab6:	a1 f4       	brne	.+40     	; 0x1ae0 <LFSMremove+0xd4>
				case 0:
					//Do nothing, continue search in status=1.
					break;
				case 1: //Global logic
					if( pdata->inhl==HL && pdata->inlh==LH ){
    1ab8:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <data+0x2>
    1abc:	8b 11       	cpse	r24, r11
    1abe:	5a c0       	rjmp	.+180    	; 0x1b74 <LFSMremove+0x168>
    1ac0:	80 91 a3 02 	lds	r24, 0x02A3	; 0x8002a3 <data+0x3>
    1ac4:	89 11       	cpse	r24, r9
    1ac6:	56 c0       	rjmp	.+172    	; 0x1b74 <LFSMremove+0x168>
						k=i1;
						i1=r->sizeeeprom;
    1ac8:	2d 80       	ldd	r2, Y+5	; 0x05
    1aca:	3e 80       	ldd	r3, Y+6	; 0x06
    1acc:	f7 01       	movw	r30, r14
    1ace:	02 80       	ldd	r0, Z+2	; 0x02
    1ad0:	f3 81       	ldd	r31, Z+3	; 0x03
    1ad2:	e0 2d       	mov	r30, r0
    1ad4:	fe 83       	std	Y+6, r31	; 0x06
    1ad6:	ed 83       	std	Y+5, r30	; 0x05
						status=2; //Global logic exist
    1ad8:	68 94       	set
    1ada:	aa 24       	eor	r10, r10
    1adc:	a1 f8       	bld	r10, 1
    1ade:	4a c0       	rjmp	.+148    	; 0x1b74 <LFSMremove+0x168>
					}
					break;
				default: //Local logic
					if( (pdata->feedback & pdata->mask)==(r->output & pdata->mask) && pdata->inhl==HL && pdata->inlh==LH ){
    1ae0:	e0 ea       	ldi	r30, 0xA0	; 160
    1ae2:	f2 e0       	ldi	r31, 0x02	; 2
    1ae4:	91 81       	ldd	r25, Z+1	; 0x01
    1ae6:	d7 01       	movw	r26, r14
    1ae8:	17 96       	adiw	r26, 0x07	; 7
    1aea:	8c 91       	ld	r24, X
    1aec:	17 97       	sbiw	r26, 0x07	; 7
    1aee:	89 27       	eor	r24, r25
    1af0:	94 81       	ldd	r25, Z+4	; 0x04
    1af2:	89 23       	and	r24, r25
    1af4:	09 f0       	breq	.+2      	; 0x1af8 <LFSMremove+0xec>
    1af6:	3e c0       	rjmp	.+124    	; 0x1b74 <LFSMremove+0x168>
    1af8:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <data+0x2>
    1afc:	8b 11       	cpse	r24, r11
    1afe:	3a c0       	rjmp	.+116    	; 0x1b74 <LFSMremove+0x168>
    1b00:	80 91 a3 02 	lds	r24, 0x02A3	; 0x8002a3 <data+0x3>
    1b04:	89 11       	cpse	r24, r9
    1b06:	36 c0       	rjmp	.+108    	; 0x1b74 <LFSMremove+0x168>
						n=pdata->page - page;
    1b08:	84 2f       	mov	r24, r20
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	84 19       	sub	r24, r4
    1b0e:	95 09       	sbc	r25, r5
						if(!n){
    1b10:	69 f4       	brne	.+26     	; 0x1b2c <LFSMremove+0x120>
							k=i1;
							i1=r->sizeeeprom;
							status=3; //Local logic exist in present page
							break;
    1b12:	2d 80       	ldd	r2, Y+5	; 0x05
    1b14:	3e 80       	ldd	r3, Y+6	; 0x06
				default: //Local logic
					if( (pdata->feedback & pdata->mask)==(r->output & pdata->mask) && pdata->inhl==HL && pdata->inlh==LH ){
						n=pdata->page - page;
						if(!n){
							k=i1;
							i1=r->sizeeeprom;
    1b16:	12 96       	adiw	r26, 0x02	; 2
    1b18:	ed 91       	ld	r30, X+
    1b1a:	fc 91       	ld	r31, X
    1b1c:	13 97       	sbiw	r26, 0x03	; 3
    1b1e:	fe 83       	std	Y+6, r31	; 0x06
    1b20:	ed 83       	std	Y+5, r30	; 0x05
							status=3; //Local logic exist in present page
    1b22:	0f 2e       	mov	r0, r31
    1b24:	f3 e0       	ldi	r31, 0x03	; 3
    1b26:	af 2e       	mov	r10, r31
    1b28:	f0 2d       	mov	r31, r0
							break;
    1b2a:	24 c0       	rjmp	.+72     	; 0x1b74 <LFSMremove+0x168>
						}
						if(n>ZERO){
    1b2c:	18 16       	cp	r1, r24
    1b2e:	19 06       	cpc	r1, r25
    1b30:	74 f4       	brge	.+28     	; 0x1b4e <LFSMremove+0x142>
							if(n < n1){
    1b32:	28 2d       	mov	r18, r8
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	82 17       	cp	r24, r18
    1b38:	93 07       	cpc	r25, r19
    1b3a:	4c f4       	brge	.+18     	; 0x1b4e <LFSMremove+0x142>
    1b3c:	84 2e       	mov	r8, r20
    1b3e:	87 18       	sub	r8, r7
    1b40:	2d 81       	ldd	r18, Y+5	; 0x05
    1b42:	3e 81       	ldd	r19, Y+6	; 0x06
    1b44:	3a 83       	std	Y+2, r19	; 0x02
    1b46:	29 83       	std	Y+1, r18	; 0x01
								k1=i1;
								n1=n;
								status=4; //Local logic exist in page above
    1b48:	68 94       	set
    1b4a:	aa 24       	eor	r10, r10
    1b4c:	a2 f8       	bld	r10, 2
							}
						}
						if(n<ZERO){
    1b4e:	99 23       	and	r25, r25
    1b50:	8c f4       	brge	.+34     	; 0x1b74 <LFSMremove+0x168>
							if(n > -n2){
    1b52:	26 2d       	mov	r18, r6
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	31 95       	neg	r19
    1b58:	21 95       	neg	r18
    1b5a:	31 09       	sbc	r19, r1
    1b5c:	28 17       	cp	r18, r24
    1b5e:	39 07       	cpc	r19, r25
    1b60:	4c f4       	brge	.+18     	; 0x1b74 <LFSMremove+0x168>
								k2=i1;
								n2=-n;
    1b62:	67 2c       	mov	r6, r7
    1b64:	64 1a       	sub	r6, r20
    1b66:	8d 81       	ldd	r24, Y+5	; 0x05
    1b68:	9e 81       	ldd	r25, Y+6	; 0x06
    1b6a:	9c 83       	std	Y+4, r25	; 0x04
    1b6c:	8b 83       	std	Y+3, r24	; 0x03
								status=4; //Local logic exist in page bellow
    1b6e:	68 94       	set
    1b70:	aa 24       	eor	r10, r10
    1b72:	a2 f8       	bld	r10, 2
	uint8_t HL,LH;
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(HL || LH){ //To not waste time
		status=1; //New entry
		for(i1=ZERO;i1<r->sizeeeprom;i1++){
    1b74:	ad 81       	ldd	r26, Y+5	; 0x05
    1b76:	be 81       	ldd	r27, Y+6	; 0x06
    1b78:	11 96       	adiw	r26, 0x01	; 1
    1b7a:	be 83       	std	Y+6, r27	; 0x06
    1b7c:	ad 83       	std	Y+5, r26	; 0x05
    1b7e:	f7 01       	movw	r30, r14
    1b80:	82 81       	ldd	r24, Z+2	; 0x02
    1b82:	93 81       	ldd	r25, Z+3	; 0x03
    1b84:	a8 17       	cp	r26, r24
    1b86:	b9 07       	cpc	r27, r25
    1b88:	08 f4       	brcc	.+2      	; 0x1b8c <LFSMremove+0x180>
    1b8a:	7b cf       	rjmp	.-266    	; 0x1a82 <LFSMremove+0x76>
				break;
			}//End switch
		}//End for
	}//End if
	/***status confirmation***/
	switch (status){
    1b8c:	f3 e0       	ldi	r31, 0x03	; 3
    1b8e:	af 16       	cp	r10, r31
    1b90:	c1 f0       	breq	.+48     	; 0x1bc2 <LFSMremove+0x1b6>
    1b92:	24 e0       	ldi	r18, 0x04	; 4
    1b94:	a2 16       	cp	r10, r18
    1b96:	39 f1       	breq	.+78     	; 0x1be6 <LFSMremove+0x1da>
    1b98:	32 e0       	ldi	r19, 0x02	; 2
    1b9a:	a3 12       	cpse	r10, r19
    1b9c:	60 c0       	rjmp	.+192    	; 0x1c5e <LFSMremove+0x252>
		case ZERO: //No entry
			break;
		case 1: //New entry
			break;
		case 2: //Global logic exist
			r->eprom->update_block(ptmp1, (void*) (k*sizeblock), sizeblock);
    1b9e:	2c 9c       	mul	r2, r12
    1ba0:	b0 01       	movw	r22, r0
    1ba2:	2d 9c       	mul	r2, r13
    1ba4:	70 0d       	add	r23, r0
    1ba6:	3c 9c       	mul	r3, r12
    1ba8:	70 0d       	add	r23, r0
    1baa:	11 24       	eor	r1, r1
    1bac:	d7 01       	movw	r26, r14
    1bae:	ed 91       	ld	r30, X+
    1bb0:	fc 91       	ld	r31, X
    1bb2:	04 8c       	ldd	r0, Z+28	; 0x1c
    1bb4:	f5 8d       	ldd	r31, Z+29	; 0x1d
    1bb6:	e0 2d       	mov	r30, r0
    1bb8:	a6 01       	movw	r20, r12
    1bba:	8d ec       	ldi	r24, 0xCD	; 205
    1bbc:	92 e0       	ldi	r25, 0x02	; 2
    1bbe:	09 95       	icall
			break;
    1bc0:	4e c0       	rjmp	.+156    	; 0x1c5e <LFSMremove+0x252>
		case 3: //Local logic exist in present page
			r->eprom->update_block(ptmp1, (void*) (k*sizeblock), sizeblock);
    1bc2:	2c 9c       	mul	r2, r12
    1bc4:	b0 01       	movw	r22, r0
    1bc6:	2d 9c       	mul	r2, r13
    1bc8:	70 0d       	add	r23, r0
    1bca:	3c 9c       	mul	r3, r12
    1bcc:	70 0d       	add	r23, r0
    1bce:	11 24       	eor	r1, r1
    1bd0:	d7 01       	movw	r26, r14
    1bd2:	ed 91       	ld	r30, X+
    1bd4:	fc 91       	ld	r31, X
    1bd6:	04 8c       	ldd	r0, Z+28	; 0x1c
    1bd8:	f5 8d       	ldd	r31, Z+29	; 0x1d
    1bda:	e0 2d       	mov	r30, r0
    1bdc:	a6 01       	movw	r20, r12
    1bde:	8d ec       	ldi	r24, 0xCD	; 205
    1be0:	92 e0       	ldi	r25, 0x02	; 2
    1be2:	09 95       	icall
			break;
    1be4:	3c c0       	rjmp	.+120    	; 0x1c5e <LFSMremove+0x252>
		case 4: //Local logic exist in page above versus local logic exist in page bellow
			//choose closest page above otherwise closest bellow.
			if(n1>ZERO && n1<NPAGES){
    1be6:	8f ef       	ldi	r24, 0xFF	; 255
    1be8:	88 0d       	add	r24, r8
    1bea:	8e 3f       	cpi	r24, 0xFE	; 254
    1bec:	c0 f4       	brcc	.+48     	; 0x1c1e <LFSMremove+0x212>
				r->eprom->update_block(ptmp1, (void*) (k1*sizeblock), sizeblock);
    1bee:	e9 81       	ldd	r30, Y+1	; 0x01
    1bf0:	fa 81       	ldd	r31, Y+2	; 0x02
    1bf2:	ec 9d       	mul	r30, r12
    1bf4:	b0 01       	movw	r22, r0
    1bf6:	ed 9d       	mul	r30, r13
    1bf8:	70 0d       	add	r23, r0
    1bfa:	fc 9d       	mul	r31, r12
    1bfc:	70 0d       	add	r23, r0
    1bfe:	11 24       	eor	r1, r1
    1c00:	d7 01       	movw	r26, r14
    1c02:	ed 91       	ld	r30, X+
    1c04:	fc 91       	ld	r31, X
    1c06:	04 8c       	ldd	r0, Z+28	; 0x1c
    1c08:	f5 8d       	ldd	r31, Z+29	; 0x1d
    1c0a:	e0 2d       	mov	r30, r0
    1c0c:	a6 01       	movw	r20, r12
    1c0e:	8d ec       	ldi	r24, 0xCD	; 205
    1c10:	92 e0       	ldi	r25, 0x02	; 2
    1c12:	09 95       	icall
				status=41;
    1c14:	0f 2e       	mov	r0, r31
    1c16:	f9 e2       	ldi	r31, 0x29	; 41
    1c18:	af 2e       	mov	r10, r31
    1c1a:	f0 2d       	mov	r31, r0
    1c1c:	20 c0       	rjmp	.+64     	; 0x1c5e <LFSMremove+0x252>
			}
			else if(n2>ZERO && n2<NPAGES){
    1c1e:	8f ef       	ldi	r24, 0xFF	; 255
    1c20:	86 0d       	add	r24, r6
    1c22:	8e 3f       	cpi	r24, 0xFE	; 254
    1c24:	e0 f4       	brcc	.+56     	; 0x1c5e <LFSMremove+0x252>
				r->eprom->update_block(ptmp1, (void*) (k2*sizeblock), sizeblock);
    1c26:	eb 81       	ldd	r30, Y+3	; 0x03
    1c28:	fc 81       	ldd	r31, Y+4	; 0x04
    1c2a:	ec 9d       	mul	r30, r12
    1c2c:	b0 01       	movw	r22, r0
    1c2e:	ed 9d       	mul	r30, r13
    1c30:	70 0d       	add	r23, r0
    1c32:	fc 9d       	mul	r31, r12
    1c34:	70 0d       	add	r23, r0
    1c36:	11 24       	eor	r1, r1
    1c38:	d7 01       	movw	r26, r14
    1c3a:	ed 91       	ld	r30, X+
    1c3c:	fc 91       	ld	r31, X
    1c3e:	04 8c       	ldd	r0, Z+28	; 0x1c
    1c40:	f5 8d       	ldd	r31, Z+29	; 0x1d
    1c42:	e0 2d       	mov	r30, r0
    1c44:	a6 01       	movw	r20, r12
    1c46:	8d ec       	ldi	r24, 0xCD	; 205
    1c48:	92 e0       	ldi	r25, 0x02	; 2
    1c4a:	09 95       	icall
				status=42;
    1c4c:	0f 2e       	mov	r0, r31
    1c4e:	fa e2       	ldi	r31, 0x2A	; 42
    1c50:	af 2e       	mov	r10, r31
    1c52:	f0 2d       	mov	r31, r0
    1c54:	04 c0       	rjmp	.+8      	; 0x1c5e <LFSMremove+0x252>
/***remove***/
uint8_t LFSMremove(struct lfsm *r, uint8_t input)
{
	uint16_t k,k1,k2,i1;
	k=k1=k2=ZERO;
	uint8_t status=ZERO;
    1c56:	a1 2c       	mov	r10, r1
    1c58:	02 c0       	rjmp	.+4      	; 0x1c5e <LFSMremove+0x252>
	uint8_t HL,LH;
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(HL || LH){ //To not waste time
		status=1; //New entry
		for(i1=ZERO;i1<r->sizeeeprom;i1++){
    1c5a:	aa 24       	eor	r10, r10
    1c5c:	a3 94       	inc	r10
			break;
		default:
			break;
	}//End switch
	return status;
}//End main
    1c5e:	8a 2d       	mov	r24, r10
    1c60:	26 96       	adiw	r28, 0x06	; 6
    1c62:	0f b6       	in	r0, 0x3f	; 63
    1c64:	f8 94       	cli
    1c66:	de bf       	out	0x3e, r29	; 62
    1c68:	0f be       	out	0x3f, r0	; 63
    1c6a:	cd bf       	out	0x3d, r28	; 61
    1c6c:	df 91       	pop	r29
    1c6e:	cf 91       	pop	r28
    1c70:	1f 91       	pop	r17
    1c72:	0f 91       	pop	r16
    1c74:	ff 90       	pop	r15
    1c76:	ef 90       	pop	r14
    1c78:	df 90       	pop	r13
    1c7a:	cf 90       	pop	r12
    1c7c:	bf 90       	pop	r11
    1c7e:	af 90       	pop	r10
    1c80:	9f 90       	pop	r9
    1c82:	8f 90       	pop	r8
    1c84:	7f 90       	pop	r7
    1c86:	6f 90       	pop	r6
    1c88:	5f 90       	pop	r5
    1c8a:	4f 90       	pop	r4
    1c8c:	3f 90       	pop	r3
    1c8e:	2f 90       	pop	r2
    1c90:	08 95       	ret

00001c92 <LFSMlearn>:
	}//End switch
	return r->status;
}
/***learn***/
uint8_t LFSMlearn(struct lfsm *r, const uint8_t input, const uint8_t next, const uint8_t mask, const uint8_t page)
{
    1c92:	5f 92       	push	r5
    1c94:	6f 92       	push	r6
    1c96:	7f 92       	push	r7
    1c98:	8f 92       	push	r8
    1c9a:	9f 92       	push	r9
    1c9c:	af 92       	push	r10
    1c9e:	bf 92       	push	r11
    1ca0:	cf 92       	push	r12
    1ca2:	df 92       	push	r13
    1ca4:	ef 92       	push	r14
    1ca6:	ff 92       	push	r15
    1ca8:	0f 93       	push	r16
    1caa:	1f 93       	push	r17
    1cac:	cf 93       	push	r28
    1cae:	df 93       	push	r29
	struct lfsmdata* pdata=&data;
	struct lfsmdata* ptmp1=&tmp1;
	uint8_t HL,LH;
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(page>ZERO){ //Enable
    1cb0:	00 23       	and	r16, r16
    1cb2:	09 f4       	brne	.+2      	; 0x1cb6 <LFSMlearn+0x24>
    1cb4:	a1 c0       	rjmp	.+322    	; 0x1df8 <LFSMlearn+0x166>
	uint8_t status=ZERO;
	uint8_t sizeblock=r->sizeblock;
	struct lfsmdata* pdata=&data;
	struct lfsmdata* ptmp1=&tmp1;
	uint8_t HL,LH;
	HL=LFSMhl(r->input,input);
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	16 96       	adiw	r26, 0x06	; 6
    1cba:	7c 90       	ld	r7, X
    1cbc:	16 97       	sbiw	r26, 0x06	; 6
	LH=LFSMlh(r->input,input);
	if(page>ZERO){ //Enable
		if(HL || LH){ //There is a change ?
    1cbe:	57 2c       	mov	r5, r7
    1cc0:	56 26       	eor	r5, r22
    1cc2:	76 16       	cp	r7, r22
    1cc4:	09 f4       	brne	.+2      	; 0x1cc8 <LFSMlearn+0x36>
    1cc6:	9a c0       	rjmp	.+308    	; 0x1dfc <LFSMlearn+0x16a>
			for(i1=ZERO;i1<r->sizeeeprom;i1++){
    1cc8:	12 96       	adiw	r26, 0x02	; 2
    1cca:	ed 91       	ld	r30, X+
    1ccc:	fc 91       	ld	r31, X
    1cce:	13 97       	sbiw	r26, 0x03	; 3
    1cd0:	ef 2b       	or	r30, r31
    1cd2:	09 f4       	brne	.+2      	; 0x1cd6 <LFSMlearn+0x44>
    1cd4:	95 c0       	rjmp	.+298    	; 0x1e00 <LFSMlearn+0x16e>
    1cd6:	90 2e       	mov	r9, r16
    1cd8:	82 2e       	mov	r8, r18
    1cda:	64 2e       	mov	r6, r20
    1cdc:	7c 01       	movw	r14, r24
/***hl***/
uint8_t LFSMhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xf^xi;
	i&=xi;
    1cde:	75 20       	and	r7, r5
/***lh***/
uint8_t LFSMlh(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xf^xi;
	i&=xf;
    1ce0:	56 22       	and	r5, r22
    1ce2:	fc 01       	movw	r30, r24
    1ce4:	c4 80       	ldd	r12, Z+4	; 0x04
    1ce6:	d1 2c       	mov	r13, r1
    1ce8:	a1 2c       	mov	r10, r1
    1cea:	b1 2c       	mov	r11, r1
    1cec:	10 e0       	ldi	r17, 0x00	; 0
    1cee:	c0 e0       	ldi	r28, 0x00	; 0
    1cf0:	d0 e0       	ldi	r29, 0x00	; 0
					if( (pdata->page==1 && pdata->inhl==HL && pdata->inlh==LH)
					|| (pdata->page==page && (pdata->feedback & mask)==(r->output & mask) && pdata->inhl==HL && pdata->inlh==LH) ){
						break;
					}
				}
				status=1; //Record
    1cf2:	01 e0       	ldi	r16, 0x01	; 1
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(page>ZERO){ //Enable
		if(HL || LH){ //There is a change ?
			for(i1=ZERO;i1<r->sizeeeprom;i1++){
				r->eprom->read_block(pdata, (const void*) (i1*sizeblock), sizeblock);
    1cf4:	d7 01       	movw	r26, r14
    1cf6:	ed 91       	ld	r30, X+
    1cf8:	fc 91       	ld	r31, X
    1cfa:	00 8c       	ldd	r0, Z+24	; 0x18
    1cfc:	f1 8d       	ldd	r31, Z+25	; 0x19
    1cfe:	e0 2d       	mov	r30, r0
    1d00:	a6 01       	movw	r20, r12
    1d02:	b5 01       	movw	r22, r10
    1d04:	80 ea       	ldi	r24, 0xA0	; 160
    1d06:	92 e0       	ldi	r25, 0x02	; 2
    1d08:	09 95       	icall
				if(pdata->page){ //Find if it exists already
    1d0a:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <data>
    1d0e:	88 23       	and	r24, r24
    1d10:	99 f0       	breq	.+38     	; 0x1d38 <LFSMlearn+0xa6>
					if( (pdata->page==1 && pdata->inhl==HL && pdata->inlh==LH)
    1d12:	81 30       	cpi	r24, 0x01	; 1
    1d14:	49 f0       	breq	.+18     	; 0x1d28 <LFSMlearn+0x96>
					|| (pdata->page==page && (pdata->feedback & mask)==(r->output & mask) && pdata->inhl==HL && pdata->inlh==LH) ){
    1d16:	98 12       	cpse	r9, r24
    1d18:	0f c0       	rjmp	.+30     	; 0x1d38 <LFSMlearn+0xa6>
    1d1a:	90 91 a1 02 	lds	r25, 0x02A1	; 0x8002a1 <data+0x1>
    1d1e:	f7 01       	movw	r30, r14
    1d20:	87 81       	ldd	r24, Z+7	; 0x07
    1d22:	89 27       	eor	r24, r25
    1d24:	88 21       	and	r24, r8
    1d26:	41 f4       	brne	.+16     	; 0x1d38 <LFSMlearn+0xa6>
    1d28:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <data+0x2>
    1d2c:	87 11       	cpse	r24, r7
    1d2e:	04 c0       	rjmp	.+8      	; 0x1d38 <LFSMlearn+0xa6>
    1d30:	80 91 a3 02 	lds	r24, 0x02A3	; 0x8002a3 <data+0x3>
    1d34:	85 15       	cp	r24, r5
    1d36:	69 f0       	breq	.+26     	; 0x1d52 <LFSMlearn+0xc0>
	uint8_t HL,LH;
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(page>ZERO){ //Enable
		if(HL || LH){ //There is a change ?
			for(i1=ZERO;i1<r->sizeeeprom;i1++){
    1d38:	21 96       	adiw	r28, 0x01	; 1
    1d3a:	ac 0c       	add	r10, r12
    1d3c:	bd 1c       	adc	r11, r13
					if( (pdata->page==1 && pdata->inhl==HL && pdata->inlh==LH)
					|| (pdata->page==page && (pdata->feedback & mask)==(r->output & mask) && pdata->inhl==HL && pdata->inlh==LH) ){
						break;
					}
				}
				status=1; //Record
    1d3e:	10 2f       	mov	r17, r16
	uint8_t HL,LH;
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(page>ZERO){ //Enable
		if(HL || LH){ //There is a change ?
			for(i1=ZERO;i1<r->sizeeeprom;i1++){
    1d40:	d7 01       	movw	r26, r14
    1d42:	12 96       	adiw	r26, 0x02	; 2
    1d44:	8d 91       	ld	r24, X+
    1d46:	9c 91       	ld	r25, X
    1d48:	13 97       	sbiw	r26, 0x03	; 3
    1d4a:	c8 17       	cp	r28, r24
    1d4c:	d9 07       	cpc	r29, r25
    1d4e:	90 f2       	brcs	.-92     	; 0x1cf4 <LFSMlearn+0x62>
    1d50:	03 c0       	rjmp	.+6      	; 0x1d58 <LFSMlearn+0xc6>
				}
				status=1; //Record
			}
		}
	}
	switch (status){
    1d52:	11 30       	cpi	r17, 0x01	; 1
    1d54:	09 f0       	breq	.+2      	; 0x1d58 <LFSMlearn+0xc6>
    1d56:	57 c0       	rjmp	.+174    	; 0x1e06 <LFSMlearn+0x174>
		case ZERO: //Not enabled
			break;
		case 1: //Record
			ptmp1->page=page;
    1d58:	ed ec       	ldi	r30, 0xCD	; 205
    1d5a:	f2 e0       	ldi	r31, 0x02	; 2
    1d5c:	90 82       	st	Z, r9
			ptmp1->feedback=r->output;
    1d5e:	d7 01       	movw	r26, r14
    1d60:	17 96       	adiw	r26, 0x07	; 7
    1d62:	8c 91       	ld	r24, X
    1d64:	81 83       	std	Z+1, r24	; 0x01
			ptmp1->inhl=HL;
    1d66:	72 82       	std	Z+2, r7	; 0x02
			ptmp1->inlh=LH;
    1d68:	53 82       	std	Z+3, r5	; 0x03
			ptmp1->mask=mask;
    1d6a:	84 82       	std	Z+4, r8	; 0x04
			if(page>1){ //Local logic
    1d6c:	b1 e0       	ldi	r27, 0x01	; 1
    1d6e:	b9 15       	cp	r27, r9
    1d70:	40 f4       	brcc	.+16     	; 0x1d82 <LFSMlearn+0xf0>
    1d72:	28 2f       	mov	r18, r24
    1d74:	26 25       	eor	r18, r6
    1d76:	82 22       	and	r8, r18
				ptmp1->outhl=LFSMhl(r->output,next) & mask;
    1d78:	88 21       	and	r24, r8
    1d7a:	85 83       	std	Z+5, r24	; 0x05
				ptmp1->outlh=LFSMlh(r->output,next) & mask;
    1d7c:	86 20       	and	r8, r6
    1d7e:	86 82       	std	Z+6, r8	; 0x06
    1d80:	08 c0       	rjmp	.+16     	; 0x1d92 <LFSMlearn+0x100>
			}else{ //Global logic
				ptmp1->outhl=LFSMhl(BYTEH,next) & mask;
    1d82:	ed ec       	ldi	r30, 0xCD	; 205
    1d84:	f2 e0       	ldi	r31, 0x02	; 2
    1d86:	86 2d       	mov	r24, r6
    1d88:	80 95       	com	r24
    1d8a:	88 21       	and	r24, r8
    1d8c:	85 83       	std	Z+5, r24	; 0x05
				ptmp1->outlh=LFSMlh(BYTEL,next) & mask;
    1d8e:	86 20       	and	r8, r6
    1d90:	86 82       	std	Z+6, r8	; 0x06
			}
			for(i1=ZERO;i1<r->sizeeeprom;i1++){
    1d92:	f7 01       	movw	r30, r14
    1d94:	82 81       	ldd	r24, Z+2	; 0x02
    1d96:	93 81       	ldd	r25, Z+3	; 0x03
    1d98:	89 2b       	or	r24, r25
    1d9a:	a1 f1       	breq	.+104    	; 0x1e04 <LFSMlearn+0x172>
    1d9c:	c0 e0       	ldi	r28, 0x00	; 0
    1d9e:	d0 e0       	ldi	r29, 0x00	; 0
    1da0:	a1 2c       	mov	r10, r1
    1da2:	b1 2c       	mov	r11, r1
				r->eprom->read_block(pdata, (const void*) (i1*sizeblock), sizeblock);
    1da4:	d7 01       	movw	r26, r14
    1da6:	ed 91       	ld	r30, X+
    1da8:	fc 91       	ld	r31, X
    1daa:	00 8c       	ldd	r0, Z+24	; 0x18
    1dac:	f1 8d       	ldd	r31, Z+25	; 0x19
    1dae:	e0 2d       	mov	r30, r0
    1db0:	a6 01       	movw	r20, r12
    1db2:	be 01       	movw	r22, r28
    1db4:	80 ea       	ldi	r24, 0xA0	; 160
    1db6:	92 e0       	ldi	r25, 0x02	; 2
    1db8:	09 95       	icall
				if(pdata->page==EMPTY){
    1dba:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <data>
    1dbe:	81 11       	cpse	r24, r1
    1dc0:	0e c0       	rjmp	.+28     	; 0x1dde <LFSMlearn+0x14c>
					r->eprom->update_block(ptmp1, (void*) (i1*sizeblock), sizeblock);
    1dc2:	d7 01       	movw	r26, r14
    1dc4:	ed 91       	ld	r30, X+
    1dc6:	fc 91       	ld	r31, X
    1dc8:	04 8c       	ldd	r0, Z+28	; 0x1c
    1dca:	f5 8d       	ldd	r31, Z+29	; 0x1d
    1dcc:	e0 2d       	mov	r30, r0
    1dce:	a6 01       	movw	r20, r12
    1dd0:	6c 2f       	mov	r22, r28
    1dd2:	7d 2f       	mov	r23, r29
    1dd4:	8d ec       	ldi	r24, 0xCD	; 205
    1dd6:	92 e0       	ldi	r25, 0x02	; 2
    1dd8:	09 95       	icall
					status=2; //Created
    1dda:	12 e0       	ldi	r17, 0x02	; 2
					break;
    1ddc:	14 c0       	rjmp	.+40     	; 0x1e06 <LFSMlearn+0x174>
				ptmp1->outlh=LFSMlh(r->output,next) & mask;
			}else{ //Global logic
				ptmp1->outhl=LFSMhl(BYTEH,next) & mask;
				ptmp1->outlh=LFSMlh(BYTEL,next) & mask;
			}
			for(i1=ZERO;i1<r->sizeeeprom;i1++){
    1dde:	bf ef       	ldi	r27, 0xFF	; 255
    1de0:	ab 1a       	sub	r10, r27
    1de2:	bb 0a       	sbc	r11, r27
    1de4:	cc 0d       	add	r28, r12
    1de6:	dd 1d       	adc	r29, r13
    1de8:	f7 01       	movw	r30, r14
    1dea:	82 81       	ldd	r24, Z+2	; 0x02
    1dec:	93 81       	ldd	r25, Z+3	; 0x03
    1dee:	a8 16       	cp	r10, r24
    1df0:	b9 06       	cpc	r11, r25
    1df2:	c0 f2       	brcs	.-80     	; 0x1da4 <LFSMlearn+0x112>
				if(pdata->page==EMPTY){
					r->eprom->update_block(ptmp1, (void*) (i1*sizeblock), sizeblock);
					status=2; //Created
					break;
				}
				status=3; //Memory full
    1df4:	13 e0       	ldi	r17, 0x03	; 3
    1df6:	07 c0       	rjmp	.+14     	; 0x1e06 <LFSMlearn+0x174>
    1df8:	10 e0       	ldi	r17, 0x00	; 0
    1dfa:	05 c0       	rjmp	.+10     	; 0x1e06 <LFSMlearn+0x174>
    1dfc:	10 e0       	ldi	r17, 0x00	; 0
    1dfe:	03 c0       	rjmp	.+6      	; 0x1e06 <LFSMlearn+0x174>
	uint8_t HL,LH;
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(page>ZERO){ //Enable
		if(HL || LH){ //There is a change ?
			for(i1=ZERO;i1<r->sizeeeprom;i1++){
    1e00:	10 e0       	ldi	r17, 0x00	; 0
    1e02:	01 c0       	rjmp	.+2      	; 0x1e06 <LFSMlearn+0x174>
				ptmp1->outlh=LFSMlh(r->output,next) & mask;
			}else{ //Global logic
				ptmp1->outhl=LFSMhl(BYTEH,next) & mask;
				ptmp1->outlh=LFSMlh(BYTEL,next) & mask;
			}
			for(i1=ZERO;i1<r->sizeeeprom;i1++){
    1e04:	11 e0       	ldi	r17, 0x01	; 1
			break;
		default:
			break;
	}//End switch
	return status;
}
    1e06:	81 2f       	mov	r24, r17
    1e08:	df 91       	pop	r29
    1e0a:	cf 91       	pop	r28
    1e0c:	1f 91       	pop	r17
    1e0e:	0f 91       	pop	r16
    1e10:	ff 90       	pop	r15
    1e12:	ef 90       	pop	r14
    1e14:	df 90       	pop	r13
    1e16:	cf 90       	pop	r12
    1e18:	bf 90       	pop	r11
    1e1a:	af 90       	pop	r10
    1e1c:	9f 90       	pop	r9
    1e1e:	8f 90       	pop	r8
    1e20:	7f 90       	pop	r7
    1e22:	6f 90       	pop	r6
    1e24:	5f 90       	pop	r5
    1e26:	08 95       	ret

00001e28 <LFSMenable>:
uint8_t LFSMoutputcalc(uint8_t feedback, uint8_t hl, uint8_t lh, uint8_t mask);
/*
** Object Initialize
*/
LFSM LFSMenable(EEPROM* eeprom, const uint16_t sizeeeprom)
{
    1e28:	fc 01       	movw	r30, r24
	r.getstatus=LFSMgetstatus;
	r.setoutput=LFSMsetoutput;
	r.getpage=LFSMgetpage;
	r.setpage=LFSMsetpage;
	/******/
	return r;
    1e2a:	71 83       	std	Z+1, r23	; 0x01
    1e2c:	60 83       	st	Z, r22
    1e2e:	53 83       	std	Z+3, r21	; 0x03
    1e30:	42 83       	std	Z+2, r20	; 0x02
    1e32:	87 e0       	ldi	r24, 0x07	; 7
    1e34:	84 83       	std	Z+4, r24	; 0x04
    1e36:	15 82       	std	Z+5, r1	; 0x05
    1e38:	17 82       	std	Z+7, r1	; 0x07
    1e3a:	8a eb       	ldi	r24, 0xBA	; 186
    1e3c:	9b e0       	ldi	r25, 0x0B	; 11
    1e3e:	92 87       	std	Z+10, r25	; 0x0a
    1e40:	81 87       	std	Z+9, r24	; 0x09
    1e42:	89 e4       	ldi	r24, 0x49	; 73
    1e44:	9e e0       	ldi	r25, 0x0E	; 14
    1e46:	94 87       	std	Z+12, r25	; 0x0c
    1e48:	83 87       	std	Z+11, r24	; 0x0b
    1e4a:	8c e0       	ldi	r24, 0x0C	; 12
    1e4c:	9b e0       	ldi	r25, 0x0B	; 11
    1e4e:	96 87       	std	Z+14, r25	; 0x0e
    1e50:	85 87       	std	Z+13, r24	; 0x0d
    1e52:	86 e0       	ldi	r24, 0x06	; 6
    1e54:	9d e0       	ldi	r25, 0x0D	; 13
    1e56:	90 8b       	std	Z+16, r25	; 0x10
    1e58:	87 87       	std	Z+15, r24	; 0x0f
    1e5a:	82 e5       	ldi	r24, 0x52	; 82
    1e5c:	9b e0       	ldi	r25, 0x0B	; 11
    1e5e:	92 8b       	std	Z+18, r25	; 0x12
    1e60:	81 8b       	std	Z+17, r24	; 0x11
    1e62:	8a ea       	ldi	r24, 0xAA	; 170
    1e64:	9b e0       	ldi	r25, 0x0B	; 11
    1e66:	94 8b       	std	Z+20, r25	; 0x14
    1e68:	83 8b       	std	Z+19, r24	; 0x13
    1e6a:	8d ea       	ldi	r24, 0xAD	; 173
    1e6c:	9b e0       	ldi	r25, 0x0B	; 11
    1e6e:	96 8b       	std	Z+22, r25	; 0x16
    1e70:	85 8b       	std	Z+21, r24	; 0x15
    1e72:	80 eb       	ldi	r24, 0xB0	; 176
    1e74:	9b e0       	ldi	r25, 0x0B	; 11
    1e76:	90 8f       	std	Z+24, r25	; 0x18
    1e78:	87 8b       	std	Z+23, r24	; 0x17
    1e7a:	84 eb       	ldi	r24, 0xB4	; 180
    1e7c:	9b e0       	ldi	r25, 0x0B	; 11
    1e7e:	92 8f       	std	Z+26, r25	; 0x1a
    1e80:	81 8f       	std	Z+25, r24	; 0x19
    1e82:	87 eb       	ldi	r24, 0xB7	; 183
    1e84:	9b e0       	ldi	r25, 0x0B	; 11
    1e86:	94 8f       	std	Z+28, r25	; 0x1c
    1e88:	83 8f       	std	Z+27, r24	; 0x1b
}
    1e8a:	cf 01       	movw	r24, r30
    1e8c:	08 95       	ret

00001e8e <PORTINIT>:
		
	}//End while
}//End main
/***Procedure and Function***/
void PORTINIT(void){
	DDRC=0XFF;
    1e8e:	8f ef       	ldi	r24, 0xFF	; 255
    1e90:	84 bb       	out	0x14, r24	; 20
	PORTC=0XFF;
    1e92:	85 bb       	out	0x15, r24	; 21
	DDRB=0X00;
    1e94:	17 ba       	out	0x17, r1	; 23
	PORTB=0XFF;
    1e96:	88 bb       	out	0x18, r24	; 24
    1e98:	08 95       	ret

00001e9a <main>:
 ** Function Definition
 */
void PORTINIT(void);
/***MAIN***/
int main(void)
{
    1e9a:	cf 93       	push	r28
    1e9c:	df 93       	push	r29
    1e9e:	cd b7       	in	r28, 0x3d	; 61
    1ea0:	de b7       	in	r29, 0x3e	; 62
    1ea2:	c4 5d       	subi	r28, 0xD4	; 212
    1ea4:	d1 09       	sbc	r29, r1
    1ea6:	0f b6       	in	r0, 0x3f	; 63
    1ea8:	f8 94       	cli
    1eaa:	de bf       	out	0x3e, r29	; 62
    1eac:	0f be       	out	0x3f, r0	; 63
    1eae:	cd bf       	out	0x3d, r28	; 61
	PORTINIT();
    1eb0:	ee df       	rcall	.-36     	; 0x1e8e <PORTINIT>
	struct keypadata keypadinput;
	uint8_t output=0;
	uint8_t mask=0;
	uint8_t page=0;
	uint8_t n;
	KEYPAD keypad = KEYPADenable(&DDRE,&PINE,&PORTE);
    1eb2:	43 e2       	ldi	r20, 0x23	; 35
    1eb4:	50 e0       	ldi	r21, 0x00	; 0
    1eb6:	61 e2       	ldi	r22, 0x21	; 33
    1eb8:	70 e0       	ldi	r23, 0x00	; 0
    1eba:	82 e2       	ldi	r24, 0x22	; 34
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	c8 d8       	rcall	.-3696   	; 0x1050 <KEYPADenable>
    1ec0:	2f 8b       	std	Y+23, r18	; 0x17
    1ec2:	38 8f       	std	Y+24, r19	; 0x18
    1ec4:	49 8f       	std	Y+25, r20	; 0x19
    1ec6:	5a 8f       	std	Y+26, r21	; 0x1a
    1ec8:	6b 8f       	std	Y+27, r22	; 0x1b
    1eca:	7c 8f       	std	Y+28, r23	; 0x1c
    1ecc:	6b 8c       	ldd	r6, Y+27	; 0x1b
    1ece:	7c 8c       	ldd	r7, Y+28	; 0x1c
	LCD0 lcd = LCD0enable(&DDRA,&PINA,&PORTA);
    1ed0:	2b e3       	ldi	r18, 0x3B	; 59
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	49 e3       	ldi	r20, 0x39	; 57
    1ed6:	50 e0       	ldi	r21, 0x00	; 0
    1ed8:	6a e3       	ldi	r22, 0x3A	; 58
    1eda:	70 e0       	ldi	r23, 0x00	; 0
    1edc:	ce 01       	movw	r24, r28
    1ede:	4d 96       	adiw	r24, 0x1d	; 29
    1ee0:	33 db       	rcall	.-2458   	; 0x1548 <LCD0enable>
    1ee2:	2f a0       	ldd	r2, Y+39	; 0x27
    1ee4:	38 a4       	ldd	r3, Y+40	; 0x28
    1ee6:	e9 a4       	ldd	r14, Y+41	; 0x29
    1ee8:	fa a4       	ldd	r15, Y+42	; 0x2a
    1eea:	4b a4       	ldd	r4, Y+43	; 0x2b
    1eec:	5c a4       	ldd	r5, Y+44	; 0x2c
    1eee:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ef0:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ef2:	cf 52       	subi	r28, 0x2F	; 47
    1ef4:	df 4f       	sbci	r29, 0xFF	; 255
    1ef6:	99 83       	std	Y+1, r25	; 0x01
    1ef8:	88 83       	st	Y, r24
    1efa:	c1 5d       	subi	r28, 0xD1	; 209
    1efc:	d0 40       	sbci	r29, 0x00	; 0
    1efe:	cf a4       	ldd	r12, Y+47	; 0x2f
    1f00:	d8 a8       	ldd	r13, Y+48	; 0x30
	EEPROM eeprom = EEPROMenable();
    1f02:	ce 01       	movw	r24, r28
    1f04:	c3 96       	adiw	r24, 0x33	; 51
    1f06:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <EEPROMenable>
	LFSM lfsm = LFSMenable(&eeprom,571);
    1f0a:	4b e3       	ldi	r20, 0x3B	; 59
    1f0c:	52 e0       	ldi	r21, 0x02	; 2
    1f0e:	be 01       	movw	r22, r28
    1f10:	6d 5c       	subi	r22, 0xCD	; 205
    1f12:	7f 4f       	sbci	r23, 0xFF	; 255
    1f14:	ce 01       	movw	r24, r28
    1f16:	8f 5a       	subi	r24, 0xAF	; 175
    1f18:	9f 4f       	sbci	r25, 0xFF	; 255
    1f1a:	86 df       	rcall	.-244    	; 0x1e28 <LFSMenable>
	FUNC func = FUNCenable();
    1f1c:	ce 01       	movw	r24, r28
    1f1e:	82 59       	subi	r24, 0x92	; 146
    1f20:	9f 4f       	sbci	r25, 0xFF	; 255
    1f22:	0e 94 23 06 	call	0xc46	; 0xc46 <FUNCenable>
    1f26:	c0 57       	subi	r28, 0x70	; 112
    1f28:	df 4f       	sbci	r29, 0xFF	; 255
    1f2a:	a8 80       	ld	r10, Y
    1f2c:	b9 80       	ldd	r11, Y+1	; 0x01
    1f2e:	c0 59       	subi	r28, 0x90	; 144
    1f30:	d0 40       	sbci	r29, 0x00	; 0
    1f32:	c6 56       	subi	r28, 0x66	; 102
    1f34:	df 4f       	sbci	r29, 0xFF	; 255
    1f36:	e8 81       	ld	r30, Y
    1f38:	f9 81       	ldd	r31, Y+1	; 0x01
    1f3a:	ca 59       	subi	r28, 0x9A	; 154
    1f3c:	d0 40       	sbci	r29, 0x00	; 0
    1f3e:	c2 53       	subi	r28, 0x32	; 50
    1f40:	df 4f       	sbci	r29, 0xFF	; 255
    1f42:	f9 83       	std	Y+1, r31	; 0x01
    1f44:	e8 83       	st	Y, r30
    1f46:	ce 5c       	subi	r28, 0xCE	; 206
    1f48:	d0 40       	sbci	r29, 0x00	; 0
	/**************************************/
	lfsm.setoutput(&lfsm,0);
    1f4a:	aa 96       	adiw	r28, 0x2a	; 42
    1f4c:	ee ad       	ldd	r30, Y+62	; 0x3e
    1f4e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1f50:	aa 97       	sbiw	r28, 0x2a	; 42
    1f52:	60 e0       	ldi	r22, 0x00	; 0
    1f54:	ce 01       	movw	r24, r28
    1f56:	8f 5a       	subi	r24, 0xAF	; 175
    1f58:	9f 4f       	sbci	r25, 0xFF	; 255
    1f5a:	09 95       	icall
	PORTINIT();
	uint8_t option=0; //Menu Jumper
	uint8_t input_tmp=0;
	struct keypadata keypadinput;
	uint8_t output=0;
	uint8_t mask=0;
    1f5c:	cc 52       	subi	r28, 0x2C	; 44
    1f5e:	df 4f       	sbci	r29, 0xFF	; 255
    1f60:	18 82       	st	Y, r1
    1f62:	c4 5d       	subi	r28, 0xD4	; 212
    1f64:	d0 40       	sbci	r29, 0x00	; 0
{
	PORTINIT();
	uint8_t option=0; //Menu Jumper
	uint8_t input_tmp=0;
	struct keypadata keypadinput;
	uint8_t output=0;
    1f66:	cd 52       	subi	r28, 0x2D	; 45
    1f68:	df 4f       	sbci	r29, 0xFF	; 255
    1f6a:	18 82       	st	Y, r1
    1f6c:	c3 5d       	subi	r28, 0xD3	; 211
    1f6e:	d0 40       	sbci	r29, 0x00	; 0
/***MAIN***/
int main(void)
{
	PORTINIT();
	uint8_t option=0; //Menu Jumper
	uint8_t input_tmp=0;
    1f70:	c0 53       	subi	r28, 0x30	; 48
    1f72:	df 4f       	sbci	r29, 0xFF	; 255
    1f74:	18 82       	st	Y, r1
    1f76:	c0 5d       	subi	r28, 0xD0	; 208
    1f78:	d0 40       	sbci	r29, 0x00	; 0
void PORTINIT(void);
/***MAIN***/
int main(void)
{
	PORTINIT();
	uint8_t option=0; //Menu Jumper
    1f7a:	10 e0       	ldi	r17, 0x00	; 0
					keypad.flush();
					option=0;
				}//End if
				if(keypadinput.character == 'C'){
					keypad.flush();
					option=8;
    1f7c:	68 94       	set
    1f7e:	88 24       	eor	r8, r8
    1f80:	83 f8       	bld	r8, 3
					continue;
				}
				if(keypadinput.character == 'B'){//Learn
					lcd.clear();
					keypad.flush();
					option=1;
    1f82:	91 2e       	mov	r9, r17
	lfsm.setoutput(&lfsm,0);
	/*** Replace with your application code ***/
	while (True)
	{
		/******/
		keypadinput=keypad.get();
    1f84:	e9 8d       	ldd	r30, Y+25	; 0x19
    1f86:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1f88:	ce 01       	movw	r24, r28
    1f8a:	88 54       	subi	r24, 0x48	; 72
    1f8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f8e:	09 95       	icall
    1f90:	86 e1       	ldi	r24, 0x16	; 22
    1f92:	fe 01       	movw	r30, r28
    1f94:	e8 54       	subi	r30, 0x48	; 72
    1f96:	ff 4f       	sbci	r31, 0xFF	; 255
    1f98:	de 01       	movw	r26, r28
    1f9a:	11 96       	adiw	r26, 0x01	; 1
    1f9c:	01 90       	ld	r0, Z+
    1f9e:	0d 92       	st	X+, r0
    1fa0:	8a 95       	dec	r24
    1fa2:	e1 f7       	brne	.-8      	; 0x1f9c <main+0x102>
		n=PINB;
    1fa4:	16 b3       	in	r17, 0x16	; 22
		/******/
		lcd.gotoxy(0,16);
    1fa6:	60 e1       	ldi	r22, 0x10	; 16
    1fa8:	70 e0       	ldi	r23, 0x00	; 0
    1faa:	80 e0       	ldi	r24, 0x00	; 0
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	f6 01       	movw	r30, r12
    1fb0:	09 95       	icall
		string=func.ui16toa(n);
    1fb2:	81 2f       	mov	r24, r17
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	f5 01       	movw	r30, r10
    1fb8:	09 95       	icall
    1fba:	90 93 7e 02 	sts	0x027E, r25	; 0x80027e <string+0x1>
    1fbe:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <string>
		lcd.string_size(string,4);
    1fc2:	64 e0       	ldi	r22, 0x04	; 4
    1fc4:	f7 01       	movw	r30, r14
    1fc6:	09 95       	icall
		/******/
		switch(option){
    1fc8:	89 2d       	mov	r24, r9
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	8a 30       	cpi	r24, 0x0A	; 10
    1fce:	91 05       	cpc	r25, r1
    1fd0:	08 f0       	brcs	.+2      	; 0x1fd4 <main+0x13a>
    1fd2:	ee c2       	rjmp	.+1500   	; 0x25b0 <main+0x716>
    1fd4:	fc 01       	movw	r30, r24
    1fd6:	ea 5b       	subi	r30, 0xBA	; 186
    1fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fda:	85 c3       	rjmp	.+1802   	; 0x26e6 <__tablejump2__>
			case 0:
				lcd.gotoxy(0,0);
    1fdc:	60 e0       	ldi	r22, 0x00	; 0
    1fde:	70 e0       	ldi	r23, 0x00	; 0
    1fe0:	80 e0       	ldi	r24, 0x00	; 0
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	f6 01       	movw	r30, r12
    1fe6:	09 95       	icall
				lcd.string_size("Running ",8);
    1fe8:	68 2d       	mov	r22, r8
    1fea:	80 e1       	ldi	r24, 0x10	; 16
    1fec:	91 e0       	ldi	r25, 0x01	; 1
    1fee:	f7 01       	movw	r30, r14
    1ff0:	09 95       	icall
				string=func.ui16toa(lfsm.getpage(&lfsm));
    1ff2:	ac 96       	adiw	r28, 0x2c	; 44
    1ff4:	ee ad       	ldd	r30, Y+62	; 0x3e
    1ff6:	ff ad       	ldd	r31, Y+63	; 0x3f
    1ff8:	ac 97       	sbiw	r28, 0x2c	; 44
    1ffa:	ce 01       	movw	r24, r28
    1ffc:	8f 5a       	subi	r24, 0xAF	; 175
    1ffe:	9f 4f       	sbci	r25, 0xFF	; 255
    2000:	09 95       	icall
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	f5 01       	movw	r30, r10
    2006:	09 95       	icall
    2008:	90 93 7e 02 	sts	0x027E, r25	; 0x80027e <string+0x1>
    200c:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <string>
				lcd.string_size(string,3);
    2010:	63 e0       	ldi	r22, 0x03	; 3
    2012:	f7 01       	movw	r30, r14
    2014:	09 95       	icall
				if(keypadinput.character == 'A'){//Clear screen and empty buffer
    2016:	89 81       	ldd	r24, Y+1	; 0x01
    2018:	81 34       	cpi	r24, 0x41	; 65
    201a:	51 f4       	brne	.+20     	; 0x2030 <main+0x196>
					lcd.clear();
    201c:	cf 52       	subi	r28, 0x2F	; 47
    201e:	df 4f       	sbci	r29, 0xFF	; 255
    2020:	e8 81       	ld	r30, Y
    2022:	f9 81       	ldd	r31, Y+1	; 0x01
    2024:	c1 5d       	subi	r28, 0xD1	; 209
    2026:	d0 40       	sbci	r29, 0x00	; 0
    2028:	09 95       	icall
					keypad.flush();
    202a:	f3 01       	movw	r30, r6
    202c:	09 95       	icall
					continue;
    202e:	aa cf       	rjmp	.-172    	; 0x1f84 <main+0xea>
				}
				if(keypadinput.character == 'B'){//Learn
    2030:	82 34       	cpi	r24, 0x42	; 66
    2032:	59 f4       	brne	.+22     	; 0x204a <main+0x1b0>
					lcd.clear();
    2034:	cf 52       	subi	r28, 0x2F	; 47
    2036:	df 4f       	sbci	r29, 0xFF	; 255
    2038:	e8 81       	ld	r30, Y
    203a:	f9 81       	ldd	r31, Y+1	; 0x01
    203c:	c1 5d       	subi	r28, 0xD1	; 209
    203e:	d0 40       	sbci	r29, 0x00	; 0
    2040:	09 95       	icall
					keypad.flush();
    2042:	f3 01       	movw	r30, r6
    2044:	09 95       	icall
					option=1;
    2046:	99 24       	eor	r9, r9
    2048:	93 94       	inc	r9
				}
				if(keypadinput.character == 'C'){//Delete or remove
    204a:	89 81       	ldd	r24, Y+1	; 0x01
    204c:	83 34       	cpi	r24, 0x43	; 67
    204e:	69 f4       	brne	.+26     	; 0x206a <main+0x1d0>
					lcd.clear();
    2050:	cf 52       	subi	r28, 0x2F	; 47
    2052:	df 4f       	sbci	r29, 0xFF	; 255
    2054:	e8 81       	ld	r30, Y
    2056:	f9 81       	ldd	r31, Y+1	; 0x01
    2058:	c1 5d       	subi	r28, 0xD1	; 209
    205a:	d0 40       	sbci	r29, 0x00	; 0
    205c:	09 95       	icall
					keypad.flush();
    205e:	f3 01       	movw	r30, r6
    2060:	09 95       	icall
					option=6;
    2062:	0f 2e       	mov	r0, r31
    2064:	f6 e0       	ldi	r31, 0x06	; 6
    2066:	9f 2e       	mov	r9, r31
    2068:	f0 2d       	mov	r31, r0
				}
				lfsm.read(&lfsm,n);
    206a:	6c 96       	adiw	r28, 0x1c	; 28
    206c:	ee ad       	ldd	r30, Y+62	; 0x3e
    206e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2070:	6c 97       	sbiw	r28, 0x1c	; 28
    2072:	61 2f       	mov	r22, r17
    2074:	ce 01       	movw	r24, r28
    2076:	8f 5a       	subi	r24, 0xAF	; 175
    2078:	9f 4f       	sbci	r25, 0xFF	; 255
    207a:	09 95       	icall
				break;
    207c:	99 c2       	rjmp	.+1330   	; 0x25b0 <main+0x716>
			case 1:
				// Menu
				lcd.gotoxy(0,0);
    207e:	60 e0       	ldi	r22, 0x00	; 0
    2080:	70 e0       	ldi	r23, 0x00	; 0
    2082:	80 e0       	ldi	r24, 0x00	; 0
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	f6 01       	movw	r30, r12
    2088:	09 95       	icall
				lcd.string_size("Enter: ",12);
    208a:	6c e0       	ldi	r22, 0x0C	; 12
    208c:	89 e1       	ldi	r24, 0x19	; 25
    208e:	91 e0       	ldi	r25, 0x01	; 1
    2090:	f7 01       	movw	r30, r14
    2092:	09 95       	icall
				lcd.gotoxy(1,0);
    2094:	60 e0       	ldi	r22, 0x00	; 0
    2096:	70 e0       	ldi	r23, 0x00	; 0
    2098:	81 e0       	ldi	r24, 0x01	; 1
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	f6 01       	movw	r30, r12
    209e:	09 95       	icall
				lcd.string_size("In   Out  Mask Page",20);
    20a0:	64 e1       	ldi	r22, 0x14	; 20
    20a2:	81 e2       	ldi	r24, 0x21	; 33
    20a4:	91 e0       	ldi	r25, 0x01	; 1
    20a6:	f7 01       	movw	r30, r14
    20a8:	09 95       	icall
				option=2;
    20aa:	68 94       	set
    20ac:	99 24       	eor	r9, r9
    20ae:	91 f8       	bld	r9, 1
				break;
    20b0:	7f c2       	rjmp	.+1278   	; 0x25b0 <main+0x716>
			case 2:
				lcd.gotoxy(0,7);
    20b2:	67 e0       	ldi	r22, 0x07	; 7
    20b4:	70 e0       	ldi	r23, 0x00	; 0
    20b6:	80 e0       	ldi	r24, 0x00	; 0
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	f6 01       	movw	r30, r12
    20bc:	09 95       	icall
				lcd.string_size(keypadinput.string,4);
    20be:	64 e0       	ldi	r22, 0x04	; 4
    20c0:	ce 01       	movw	r24, r28
    20c2:	02 96       	adiw	r24, 0x02	; 2
    20c4:	f7 01       	movw	r30, r14
    20c6:	09 95       	icall
				if(keypadinput.character == 'D'){
    20c8:	89 81       	ldd	r24, Y+1	; 0x01
    20ca:	84 34       	cpi	r24, 0x44	; 68
    20cc:	19 f5       	brne	.+70     	; 0x2114 <main+0x27a>
					input_tmp=func.strToInt(keypadinput.string);
    20ce:	ce 01       	movw	r24, r28
    20d0:	02 96       	adiw	r24, 0x02	; 2
    20d2:	c2 53       	subi	r28, 0x32	; 50
    20d4:	df 4f       	sbci	r29, 0xFF	; 255
    20d6:	e8 81       	ld	r30, Y
    20d8:	f9 81       	ldd	r31, Y+1	; 0x01
    20da:	ce 5c       	subi	r28, 0xCE	; 206
    20dc:	d0 40       	sbci	r29, 0x00	; 0
    20de:	09 95       	icall
    20e0:	8c 01       	movw	r16, r24
    20e2:	c0 53       	subi	r28, 0x30	; 48
    20e4:	df 4f       	sbci	r29, 0xFF	; 255
    20e6:	88 83       	st	Y, r24
    20e8:	c0 5d       	subi	r28, 0xD0	; 208
    20ea:	d0 40       	sbci	r29, 0x00	; 0
					lcd.gotoxy(2,0);
    20ec:	60 e0       	ldi	r22, 0x00	; 0
    20ee:	70 e0       	ldi	r23, 0x00	; 0
    20f0:	82 e0       	ldi	r24, 0x02	; 2
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	f6 01       	movw	r30, r12
    20f6:	09 95       	icall
					string=func.ui16toa(input_tmp);
    20f8:	c8 01       	movw	r24, r16
    20fa:	99 27       	eor	r25, r25
    20fc:	f5 01       	movw	r30, r10
    20fe:	09 95       	icall
    2100:	90 93 7e 02 	sts	0x027E, r25	; 0x80027e <string+0x1>
    2104:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <string>
					lcd.string(string);
    2108:	f1 01       	movw	r30, r2
    210a:	09 95       	icall
					keypad.flush();
    210c:	f3 01       	movw	r30, r6
    210e:	09 95       	icall
					option=3;
    2110:	93 e0       	ldi	r25, 0x03	; 3
    2112:	01 c0       	rjmp	.+2      	; 0x2116 <main+0x27c>
    2114:	99 2d       	mov	r25, r9
				}
				if(keypadinput.character == 'C'){
    2116:	89 81       	ldd	r24, Y+1	; 0x01
    2118:	83 34       	cpi	r24, 0x43	; 67
    211a:	09 f0       	breq	.+2      	; 0x211e <main+0x284>
    211c:	42 c2       	rjmp	.+1156   	; 0x25a2 <main+0x708>
					keypad.flush();
    211e:	f3 01       	movw	r30, r6
    2120:	09 95       	icall
    2122:	46 c2       	rjmp	.+1164   	; 0x25b0 <main+0x716>
					option=2;
				}
				break;
			case 3:
				lcd.gotoxy(0,7);
    2124:	67 e0       	ldi	r22, 0x07	; 7
    2126:	70 e0       	ldi	r23, 0x00	; 0
    2128:	80 e0       	ldi	r24, 0x00	; 0
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	f6 01       	movw	r30, r12
    212e:	09 95       	icall
				lcd.string_size(keypadinput.string,4);
    2130:	64 e0       	ldi	r22, 0x04	; 4
    2132:	ce 01       	movw	r24, r28
    2134:	02 96       	adiw	r24, 0x02	; 2
    2136:	f7 01       	movw	r30, r14
    2138:	09 95       	icall
				if(keypadinput.character == 'D'){
    213a:	89 81       	ldd	r24, Y+1	; 0x01
    213c:	84 34       	cpi	r24, 0x44	; 68
    213e:	19 f5       	brne	.+70     	; 0x2186 <main+0x2ec>
					output=func.strToInt(keypadinput.string);
    2140:	ce 01       	movw	r24, r28
    2142:	02 96       	adiw	r24, 0x02	; 2
    2144:	c2 53       	subi	r28, 0x32	; 50
    2146:	df 4f       	sbci	r29, 0xFF	; 255
    2148:	e8 81       	ld	r30, Y
    214a:	f9 81       	ldd	r31, Y+1	; 0x01
    214c:	ce 5c       	subi	r28, 0xCE	; 206
    214e:	d0 40       	sbci	r29, 0x00	; 0
    2150:	09 95       	icall
    2152:	8c 01       	movw	r16, r24
    2154:	cd 52       	subi	r28, 0x2D	; 45
    2156:	df 4f       	sbci	r29, 0xFF	; 255
    2158:	88 83       	st	Y, r24
    215a:	c3 5d       	subi	r28, 0xD3	; 211
    215c:	d0 40       	sbci	r29, 0x00	; 0
					lcd.gotoxy(2,5);
    215e:	65 e0       	ldi	r22, 0x05	; 5
    2160:	70 e0       	ldi	r23, 0x00	; 0
    2162:	82 e0       	ldi	r24, 0x02	; 2
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	f6 01       	movw	r30, r12
    2168:	09 95       	icall
					string=func.ui16toa(output);
    216a:	c8 01       	movw	r24, r16
    216c:	99 27       	eor	r25, r25
    216e:	f5 01       	movw	r30, r10
    2170:	09 95       	icall
    2172:	90 93 7e 02 	sts	0x027E, r25	; 0x80027e <string+0x1>
    2176:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <string>
					lcd.string(string);
    217a:	f1 01       	movw	r30, r2
    217c:	09 95       	icall
					keypad.flush();
    217e:	f3 01       	movw	r30, r6
    2180:	09 95       	icall
					option=4;
    2182:	94 e0       	ldi	r25, 0x04	; 4
    2184:	01 c0       	rjmp	.+2      	; 0x2188 <main+0x2ee>
    2186:	99 2d       	mov	r25, r9
				}
				if(keypadinput.character == 'C'){
    2188:	89 81       	ldd	r24, Y+1	; 0x01
    218a:	83 34       	cpi	r24, 0x43	; 67
    218c:	09 f0       	breq	.+2      	; 0x2190 <main+0x2f6>
    218e:	0b c2       	rjmp	.+1046   	; 0x25a6 <main+0x70c>
					keypad.flush();
    2190:	f3 01       	movw	r30, r6
    2192:	09 95       	icall
    2194:	0d c2       	rjmp	.+1050   	; 0x25b0 <main+0x716>
					option=3;
				}
				break;
			case 4:
				lcd.gotoxy(0,7);
    2196:	67 e0       	ldi	r22, 0x07	; 7
    2198:	70 e0       	ldi	r23, 0x00	; 0
    219a:	80 e0       	ldi	r24, 0x00	; 0
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	f6 01       	movw	r30, r12
    21a0:	09 95       	icall
				lcd.string_size(keypadinput.string,4);
    21a2:	64 e0       	ldi	r22, 0x04	; 4
    21a4:	ce 01       	movw	r24, r28
    21a6:	02 96       	adiw	r24, 0x02	; 2
    21a8:	f7 01       	movw	r30, r14
    21aa:	09 95       	icall
				if(keypadinput.character == 'D'){
    21ac:	89 81       	ldd	r24, Y+1	; 0x01
    21ae:	84 34       	cpi	r24, 0x44	; 68
    21b0:	19 f5       	brne	.+70     	; 0x21f8 <main+0x35e>
					mask=func.strToInt(keypadinput.string);
    21b2:	ce 01       	movw	r24, r28
    21b4:	02 96       	adiw	r24, 0x02	; 2
    21b6:	c2 53       	subi	r28, 0x32	; 50
    21b8:	df 4f       	sbci	r29, 0xFF	; 255
    21ba:	e8 81       	ld	r30, Y
    21bc:	f9 81       	ldd	r31, Y+1	; 0x01
    21be:	ce 5c       	subi	r28, 0xCE	; 206
    21c0:	d0 40       	sbci	r29, 0x00	; 0
    21c2:	09 95       	icall
    21c4:	8c 01       	movw	r16, r24
    21c6:	cc 52       	subi	r28, 0x2C	; 44
    21c8:	df 4f       	sbci	r29, 0xFF	; 255
    21ca:	88 83       	st	Y, r24
    21cc:	c4 5d       	subi	r28, 0xD4	; 212
    21ce:	d0 40       	sbci	r29, 0x00	; 0
					lcd.gotoxy(2,10);
    21d0:	6a e0       	ldi	r22, 0x0A	; 10
    21d2:	70 e0       	ldi	r23, 0x00	; 0
    21d4:	82 e0       	ldi	r24, 0x02	; 2
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	f6 01       	movw	r30, r12
    21da:	09 95       	icall
					string=func.ui16toa(mask);
    21dc:	c8 01       	movw	r24, r16
    21de:	99 27       	eor	r25, r25
    21e0:	f5 01       	movw	r30, r10
    21e2:	09 95       	icall
    21e4:	90 93 7e 02 	sts	0x027E, r25	; 0x80027e <string+0x1>
    21e8:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <string>
					lcd.string(string);
    21ec:	f1 01       	movw	r30, r2
    21ee:	09 95       	icall
					keypad.flush();
    21f0:	f3 01       	movw	r30, r6
    21f2:	09 95       	icall
					option=5;
    21f4:	95 e0       	ldi	r25, 0x05	; 5
    21f6:	01 c0       	rjmp	.+2      	; 0x21fa <main+0x360>
    21f8:	99 2d       	mov	r25, r9
				}
				if(keypadinput.character == 'C'){
    21fa:	89 81       	ldd	r24, Y+1	; 0x01
    21fc:	83 34       	cpi	r24, 0x43	; 67
    21fe:	09 f0       	breq	.+2      	; 0x2202 <main+0x368>
    2200:	d4 c1       	rjmp	.+936    	; 0x25aa <main+0x710>
					keypad.flush();
    2202:	f3 01       	movw	r30, r6
    2204:	09 95       	icall
    2206:	d4 c1       	rjmp	.+936    	; 0x25b0 <main+0x716>
					option=4;
				}
				break;
			case 5:
				lcd.gotoxy(0,7);
    2208:	67 e0       	ldi	r22, 0x07	; 7
    220a:	70 e0       	ldi	r23, 0x00	; 0
    220c:	80 e0       	ldi	r24, 0x00	; 0
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	f6 01       	movw	r30, r12
    2212:	09 95       	icall
				lcd.string_size(keypadinput.string,4);
    2214:	64 e0       	ldi	r22, 0x04	; 4
    2216:	ce 01       	movw	r24, r28
    2218:	02 96       	adiw	r24, 0x02	; 2
    221a:	f7 01       	movw	r30, r14
    221c:	09 95       	icall
				if(keypadinput.character == 'D'){
    221e:	89 81       	ldd	r24, Y+1	; 0x01
    2220:	84 34       	cpi	r24, 0x44	; 68
    2222:	09 f0       	breq	.+2      	; 0x2226 <main+0x38c>
    2224:	7d c0       	rjmp	.+250    	; 0x2320 <main+0x486>
					page=func.strToInt(keypadinput.string);
    2226:	ce 01       	movw	r24, r28
    2228:	02 96       	adiw	r24, 0x02	; 2
    222a:	c2 53       	subi	r28, 0x32	; 50
    222c:	df 4f       	sbci	r29, 0xFF	; 255
    222e:	e8 81       	ld	r30, Y
    2230:	f9 81       	ldd	r31, Y+1	; 0x01
    2232:	ce 5c       	subi	r28, 0xCE	; 206
    2234:	d0 40       	sbci	r29, 0x00	; 0
    2236:	09 95       	icall
    2238:	8c 01       	movw	r16, r24
					lcd.gotoxy(2,15);
    223a:	6f e0       	ldi	r22, 0x0F	; 15
    223c:	70 e0       	ldi	r23, 0x00	; 0
    223e:	82 e0       	ldi	r24, 0x02	; 2
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	f6 01       	movw	r30, r12
    2244:	09 95       	icall
					string=func.ui16toa(page);
    2246:	c8 01       	movw	r24, r16
    2248:	99 27       	eor	r25, r25
    224a:	f5 01       	movw	r30, r10
    224c:	09 95       	icall
    224e:	90 93 7e 02 	sts	0x027E, r25	; 0x80027e <string+0x1>
    2252:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <string>
					lcd.string(string);
    2256:	f1 01       	movw	r30, r2
    2258:	09 95       	icall
					switch(lfsm.learn(&lfsm,input_tmp,output,mask,page)){
    225a:	6e 96       	adiw	r28, 0x1e	; 30
    225c:	ee ad       	ldd	r30, Y+62	; 0x3e
    225e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2260:	6e 97       	sbiw	r28, 0x1e	; 30
    2262:	cc 52       	subi	r28, 0x2C	; 44
    2264:	df 4f       	sbci	r29, 0xFF	; 255
    2266:	28 81       	ld	r18, Y
    2268:	c4 5d       	subi	r28, 0xD4	; 212
    226a:	d0 40       	sbci	r29, 0x00	; 0
    226c:	cd 52       	subi	r28, 0x2D	; 45
    226e:	df 4f       	sbci	r29, 0xFF	; 255
    2270:	48 81       	ld	r20, Y
    2272:	c3 5d       	subi	r28, 0xD3	; 211
    2274:	d0 40       	sbci	r29, 0x00	; 0
    2276:	c0 53       	subi	r28, 0x30	; 48
    2278:	df 4f       	sbci	r29, 0xFF	; 255
    227a:	68 81       	ld	r22, Y
    227c:	c0 5d       	subi	r28, 0xD0	; 208
    227e:	d0 40       	sbci	r29, 0x00	; 0
    2280:	ce 01       	movw	r24, r28
    2282:	8f 5a       	subi	r24, 0xAF	; 175
    2284:	9f 4f       	sbci	r25, 0xFF	; 255
    2286:	09 95       	icall
    2288:	82 30       	cpi	r24, 0x02	; 2
    228a:	19 f1       	breq	.+70     	; 0x22d2 <main+0x438>
    228c:	28 f4       	brcc	.+10     	; 0x2298 <main+0x3fe>
    228e:	88 23       	and	r24, r24
    2290:	41 f0       	breq	.+16     	; 0x22a2 <main+0x408>
    2292:	81 30       	cpi	r24, 0x01	; 1
    2294:	91 f0       	breq	.+36     	; 0x22ba <main+0x420>
    2296:	40 c0       	rjmp	.+128    	; 0x2318 <main+0x47e>
    2298:	83 30       	cpi	r24, 0x03	; 3
    229a:	39 f1       	breq	.+78     	; 0x22ea <main+0x450>
    229c:	84 30       	cpi	r24, 0x04	; 4
    229e:	89 f1       	breq	.+98     	; 0x2302 <main+0x468>
    22a0:	3b c0       	rjmp	.+118    	; 0x2318 <main+0x47e>
						case 0:
							lcd.gotoxy(3,12);
    22a2:	6c e0       	ldi	r22, 0x0C	; 12
    22a4:	70 e0       	ldi	r23, 0x00	; 0
    22a6:	83 e0       	ldi	r24, 0x03	; 3
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	f6 01       	movw	r30, r12
    22ac:	09 95       	icall
							lcd.string_size("disabled",7);
    22ae:	67 e0       	ldi	r22, 0x07	; 7
    22b0:	85 e3       	ldi	r24, 0x35	; 53
    22b2:	91 e0       	ldi	r25, 0x01	; 1
    22b4:	f7 01       	movw	r30, r14
    22b6:	09 95       	icall
							break;
    22b8:	2f c0       	rjmp	.+94     	; 0x2318 <main+0x47e>
						case 1:
							lcd.gotoxy(3,12);
    22ba:	6c e0       	ldi	r22, 0x0C	; 12
    22bc:	70 e0       	ldi	r23, 0x00	; 0
    22be:	83 e0       	ldi	r24, 0x03	; 3
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	f6 01       	movw	r30, r12
    22c4:	09 95       	icall
							lcd.string_size("exists",7);
    22c6:	67 e0       	ldi	r22, 0x07	; 7
    22c8:	8e e3       	ldi	r24, 0x3E	; 62
    22ca:	91 e0       	ldi	r25, 0x01	; 1
    22cc:	f7 01       	movw	r30, r14
    22ce:	09 95       	icall
							break;
    22d0:	23 c0       	rjmp	.+70     	; 0x2318 <main+0x47e>
						case 2:
							lcd.gotoxy(3,12);
    22d2:	6c e0       	ldi	r22, 0x0C	; 12
    22d4:	70 e0       	ldi	r23, 0x00	; 0
    22d6:	83 e0       	ldi	r24, 0x03	; 3
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	f6 01       	movw	r30, r12
    22dc:	09 95       	icall
							lcd.string_size("upload",7);
    22de:	67 e0       	ldi	r22, 0x07	; 7
    22e0:	85 e4       	ldi	r24, 0x45	; 69
    22e2:	91 e0       	ldi	r25, 0x01	; 1
    22e4:	f7 01       	movw	r30, r14
    22e6:	09 95       	icall
							break;
    22e8:	17 c0       	rjmp	.+46     	; 0x2318 <main+0x47e>
						case 3:
							lcd.gotoxy(3,12);
    22ea:	6c e0       	ldi	r22, 0x0C	; 12
    22ec:	70 e0       	ldi	r23, 0x00	; 0
    22ee:	83 e0       	ldi	r24, 0x03	; 3
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	f6 01       	movw	r30, r12
    22f4:	09 95       	icall
							lcd.string_size("upload",7);
    22f6:	67 e0       	ldi	r22, 0x07	; 7
    22f8:	85 e4       	ldi	r24, 0x45	; 69
    22fa:	91 e0       	ldi	r25, 0x01	; 1
    22fc:	f7 01       	movw	r30, r14
    22fe:	09 95       	icall
							break;
    2300:	0b c0       	rjmp	.+22     	; 0x2318 <main+0x47e>
						case 4:
							lcd.gotoxy(3,12);
    2302:	6c e0       	ldi	r22, 0x0C	; 12
    2304:	70 e0       	ldi	r23, 0x00	; 0
    2306:	83 e0       	ldi	r24, 0x03	; 3
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	f6 01       	movw	r30, r12
    230c:	09 95       	icall
							lcd.string_size("full",7);
    230e:	67 e0       	ldi	r22, 0x07	; 7
    2310:	8c e4       	ldi	r24, 0x4C	; 76
    2312:	91 e0       	ldi	r25, 0x01	; 1
    2314:	f7 01       	movw	r30, r14
    2316:	09 95       	icall
						default:
							break;
					}//End switch
				/******/
				//lfsm.read(&lfsm,input_tmp);
				keypad.flush();
    2318:	f3 01       	movw	r30, r6
    231a:	09 95       	icall
				option=0;
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	01 c0       	rjmp	.+2      	; 0x2322 <main+0x488>
    2320:	99 2d       	mov	r25, r9
				}//End if
				if(keypadinput.character == 'C'){
    2322:	89 81       	ldd	r24, Y+1	; 0x01
    2324:	83 34       	cpi	r24, 0x43	; 67
    2326:	09 f0       	breq	.+2      	; 0x232a <main+0x490>
    2328:	42 c1       	rjmp	.+644    	; 0x25ae <main+0x714>
					keypad.flush();
    232a:	f3 01       	movw	r30, r6
    232c:	09 95       	icall
    232e:	40 c1       	rjmp	.+640    	; 0x25b0 <main+0x716>
					option=5;
				}
				break;
			case 6:
				lcd.gotoxy(1,0);
    2330:	60 e0       	ldi	r22, 0x00	; 0
    2332:	70 e0       	ldi	r23, 0x00	; 0
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	f6 01       	movw	r30, r12
    233a:	09 95       	icall
				lcd.string_size("Delete - 1",10);
    233c:	6a e0       	ldi	r22, 0x0A	; 10
    233e:	81 e5       	ldi	r24, 0x51	; 81
    2340:	91 e0       	ldi	r25, 0x01	; 1
    2342:	f7 01       	movw	r30, r14
    2344:	09 95       	icall
				lcd.gotoxy(2,0);
    2346:	60 e0       	ldi	r22, 0x00	; 0
    2348:	70 e0       	ldi	r23, 0x00	; 0
    234a:	82 e0       	ldi	r24, 0x02	; 2
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	f6 01       	movw	r30, r12
    2350:	09 95       	icall
				lcd.string_size("Remove - 2 No - 3",17);
    2352:	61 e1       	ldi	r22, 0x11	; 17
    2354:	8c e5       	ldi	r24, 0x5C	; 92
    2356:	91 e0       	ldi	r25, 0x01	; 1
    2358:	f7 01       	movw	r30, r14
    235a:	09 95       	icall
				option=7;
    235c:	0f 2e       	mov	r0, r31
    235e:	f7 e0       	ldi	r31, 0x07	; 7
    2360:	9f 2e       	mov	r9, r31
    2362:	f0 2d       	mov	r31, r0
				break;
    2364:	25 c1       	rjmp	.+586    	; 0x25b0 <main+0x716>
			case 7:
				if(keypadinput.character == '1'){//Clear eeprom
    2366:	89 81       	ldd	r24, Y+1	; 0x01
    2368:	81 33       	cpi	r24, 0x31	; 49
    236a:	91 f5       	brne	.+100    	; 0x23d0 <main+0x536>
					lcd.gotoxy(1,0);
    236c:	60 e0       	ldi	r22, 0x00	; 0
    236e:	70 e0       	ldi	r23, 0x00	; 0
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	f6 01       	movw	r30, r12
    2376:	09 95       	icall
					lcd.hspace(10);
    2378:	8a e0       	ldi	r24, 0x0A	; 10
    237a:	f2 01       	movw	r30, r4
    237c:	09 95       	icall
					lcd.gotoxy(2,0);
    237e:	60 e0       	ldi	r22, 0x00	; 0
    2380:	70 e0       	ldi	r23, 0x00	; 0
    2382:	82 e0       	ldi	r24, 0x02	; 2
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	f6 01       	movw	r30, r12
    2388:	09 95       	icall
					lcd.hspace(17);
    238a:	81 e1       	ldi	r24, 0x11	; 17
    238c:	f2 01       	movw	r30, r4
    238e:	09 95       	icall
					lfsm.deleteall(&lfsm);
    2390:	a4 96       	adiw	r28, 0x24	; 36
    2392:	ee ad       	ldd	r30, Y+62	; 0x3e
    2394:	ff ad       	ldd	r31, Y+63	; 0x3f
    2396:	a4 97       	sbiw	r28, 0x24	; 36
    2398:	ce 01       	movw	r24, r28
    239a:	8f 5a       	subi	r24, 0xAF	; 175
    239c:	9f 4f       	sbci	r25, 0xFF	; 255
    239e:	09 95       	icall
					lfsm.setpage(&lfsm,0);
    23a0:	ae 96       	adiw	r28, 0x2e	; 46
    23a2:	ee ad       	ldd	r30, Y+62	; 0x3e
    23a4:	ff ad       	ldd	r31, Y+63	; 0x3f
    23a6:	ae 97       	sbiw	r28, 0x2e	; 46
    23a8:	60 e0       	ldi	r22, 0x00	; 0
    23aa:	ce 01       	movw	r24, r28
    23ac:	8f 5a       	subi	r24, 0xAF	; 175
    23ae:	9f 4f       	sbci	r25, 0xFF	; 255
    23b0:	09 95       	icall
					//lfsm.setoutput(&lfsm,0X00);
					keypad.flush();
    23b2:	f3 01       	movw	r30, r6
    23b4:	09 95       	icall
					lcd.gotoxy(3,12);
    23b6:	6c e0       	ldi	r22, 0x0C	; 12
    23b8:	70 e0       	ldi	r23, 0x00	; 0
    23ba:	83 e0       	ldi	r24, 0x03	; 3
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	f6 01       	movw	r30, r12
    23c0:	09 95       	icall
					lcd.string_size("deleted",7);
    23c2:	67 e0       	ldi	r22, 0x07	; 7
    23c4:	8e e6       	ldi	r24, 0x6E	; 110
    23c6:	91 e0       	ldi	r25, 0x01	; 1
    23c8:	f7 01       	movw	r30, r14
    23ca:	09 95       	icall
					option=0;
    23cc:	91 2c       	mov	r9, r1
    23ce:	f0 c0       	rjmp	.+480    	; 0x25b0 <main+0x716>
				}else if(keypadinput.character == '2'){//Remove one entry
    23d0:	82 33       	cpi	r24, 0x32	; 50
    23d2:	b1 f4       	brne	.+44     	; 0x2400 <main+0x566>
					lcd.gotoxy(1,0);
    23d4:	60 e0       	ldi	r22, 0x00	; 0
    23d6:	70 e0       	ldi	r23, 0x00	; 0
    23d8:	81 e0       	ldi	r24, 0x01	; 1
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	f6 01       	movw	r30, r12
    23de:	09 95       	icall
					lcd.hspace(10);
    23e0:	8a e0       	ldi	r24, 0x0A	; 10
    23e2:	f2 01       	movw	r30, r4
    23e4:	09 95       	icall
					lcd.gotoxy(2,0);
    23e6:	60 e0       	ldi	r22, 0x00	; 0
    23e8:	70 e0       	ldi	r23, 0x00	; 0
    23ea:	82 e0       	ldi	r24, 0x02	; 2
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	f6 01       	movw	r30, r12
    23f0:	09 95       	icall
					lcd.hspace(17);
    23f2:	81 e1       	ldi	r24, 0x11	; 17
    23f4:	f2 01       	movw	r30, r4
    23f6:	09 95       	icall
					keypad.flush();
    23f8:	f3 01       	movw	r30, r6
    23fa:	09 95       	icall
					option=8;
    23fc:	98 2c       	mov	r9, r8
    23fe:	d8 c0       	rjmp	.+432    	; 0x25b0 <main+0x716>
				}else if(keypadinput.character == '3'){//Exit
    2400:	83 33       	cpi	r24, 0x33	; 51
    2402:	09 f0       	breq	.+2      	; 0x2406 <main+0x56c>
    2404:	d5 c0       	rjmp	.+426    	; 0x25b0 <main+0x716>
					lcd.gotoxy(1,0);
    2406:	60 e0       	ldi	r22, 0x00	; 0
    2408:	70 e0       	ldi	r23, 0x00	; 0
    240a:	81 e0       	ldi	r24, 0x01	; 1
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	f6 01       	movw	r30, r12
    2410:	09 95       	icall
					lcd.hspace(10);
    2412:	8a e0       	ldi	r24, 0x0A	; 10
    2414:	f2 01       	movw	r30, r4
    2416:	09 95       	icall
					lcd.gotoxy(2,0);
    2418:	60 e0       	ldi	r22, 0x00	; 0
    241a:	70 e0       	ldi	r23, 0x00	; 0
    241c:	82 e0       	ldi	r24, 0x02	; 2
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	f6 01       	movw	r30, r12
    2422:	09 95       	icall
					lcd.hspace(17);
    2424:	81 e1       	ldi	r24, 0x11	; 17
    2426:	f2 01       	movw	r30, r4
    2428:	09 95       	icall
					keypad.flush();
    242a:	f3 01       	movw	r30, r6
    242c:	09 95       	icall
					option=0;
    242e:	91 2c       	mov	r9, r1
    2430:	bf c0       	rjmp	.+382    	; 0x25b0 <main+0x716>
				}
				break;
			case 8:
				lcd.gotoxy(0,0);
    2432:	60 e0       	ldi	r22, 0x00	; 0
    2434:	70 e0       	ldi	r23, 0x00	; 0
    2436:	80 e0       	ldi	r24, 0x00	; 0
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	f6 01       	movw	r30, r12
    243c:	09 95       	icall
				lcd.string_size("Enter: ",12);
    243e:	6c e0       	ldi	r22, 0x0C	; 12
    2440:	89 e1       	ldi	r24, 0x19	; 25
    2442:	91 e0       	ldi	r25, 0x01	; 1
    2444:	f7 01       	movw	r30, r14
    2446:	09 95       	icall
				lcd.gotoxy(1,0);
    2448:	60 e0       	ldi	r22, 0x00	; 0
    244a:	70 e0       	ldi	r23, 0x00	; 0
    244c:	81 e0       	ldi	r24, 0x01	; 1
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	f6 01       	movw	r30, r12
    2452:	09 95       	icall
				lcd.string_size("Input",20);
    2454:	64 e1       	ldi	r22, 0x14	; 20
    2456:	86 e7       	ldi	r24, 0x76	; 118
    2458:	91 e0       	ldi	r25, 0x01	; 1
    245a:	f7 01       	movw	r30, r14
    245c:	09 95       	icall
				option=9;
    245e:	0f 2e       	mov	r0, r31
    2460:	f9 e0       	ldi	r31, 0x09	; 9
    2462:	9f 2e       	mov	r9, r31
    2464:	f0 2d       	mov	r31, r0
				break;
    2466:	a4 c0       	rjmp	.+328    	; 0x25b0 <main+0x716>
			case 9:
				lcd.gotoxy(0,7);
    2468:	67 e0       	ldi	r22, 0x07	; 7
    246a:	70 e0       	ldi	r23, 0x00	; 0
    246c:	80 e0       	ldi	r24, 0x00	; 0
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	f6 01       	movw	r30, r12
    2472:	09 95       	icall
				lcd.string_size(keypadinput.string,4);
    2474:	64 e0       	ldi	r22, 0x04	; 4
    2476:	ce 01       	movw	r24, r28
    2478:	02 96       	adiw	r24, 0x02	; 2
    247a:	f7 01       	movw	r30, r14
    247c:	09 95       	icall
				if(keypadinput.character == 'D'){
    247e:	89 81       	ldd	r24, Y+1	; 0x01
    2480:	84 34       	cpi	r24, 0x44	; 68
    2482:	09 f0       	breq	.+2      	; 0x2486 <main+0x5ec>
    2484:	87 c0       	rjmp	.+270    	; 0x2594 <main+0x6fa>
					input_tmp=func.strToInt(keypadinput.string);
    2486:	ce 01       	movw	r24, r28
    2488:	02 96       	adiw	r24, 0x02	; 2
    248a:	c2 53       	subi	r28, 0x32	; 50
    248c:	df 4f       	sbci	r29, 0xFF	; 255
    248e:	e8 81       	ld	r30, Y
    2490:	f9 81       	ldd	r31, Y+1	; 0x01
    2492:	ce 5c       	subi	r28, 0xCE	; 206
    2494:	d0 40       	sbci	r29, 0x00	; 0
    2496:	09 95       	icall
    2498:	8c 01       	movw	r16, r24
    249a:	c0 53       	subi	r28, 0x30	; 48
    249c:	df 4f       	sbci	r29, 0xFF	; 255
    249e:	88 83       	st	Y, r24
    24a0:	c0 5d       	subi	r28, 0xD0	; 208
    24a2:	d0 40       	sbci	r29, 0x00	; 0
					lcd.gotoxy(2,0);
    24a4:	60 e0       	ldi	r22, 0x00	; 0
    24a6:	70 e0       	ldi	r23, 0x00	; 0
    24a8:	82 e0       	ldi	r24, 0x02	; 2
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	f6 01       	movw	r30, r12
    24ae:	09 95       	icall
					string=func.ui16toa(input_tmp);
    24b0:	c8 01       	movw	r24, r16
    24b2:	99 27       	eor	r25, r25
    24b4:	f5 01       	movw	r30, r10
    24b6:	09 95       	icall
    24b8:	90 93 7e 02 	sts	0x027E, r25	; 0x80027e <string+0x1>
    24bc:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <string>
					lcd.string(string);
    24c0:	f1 01       	movw	r30, r2
    24c2:	09 95       	icall
					switch(lfsm.remove(&lfsm,input_tmp)){
    24c4:	a2 96       	adiw	r28, 0x22	; 34
    24c6:	ee ad       	ldd	r30, Y+62	; 0x3e
    24c8:	ff ad       	ldd	r31, Y+63	; 0x3f
    24ca:	a2 97       	sbiw	r28, 0x22	; 34
    24cc:	60 2f       	mov	r22, r16
    24ce:	ce 01       	movw	r24, r28
    24d0:	8f 5a       	subi	r24, 0xAF	; 175
    24d2:	9f 4f       	sbci	r25, 0xFF	; 255
    24d4:	09 95       	icall
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	8b 32       	cpi	r24, 0x2B	; 43
    24da:	91 05       	cpc	r25, r1
    24dc:	08 f0       	brcs	.+2      	; 0x24e0 <main+0x646>
    24de:	57 c0       	rjmp	.+174    	; 0x258e <main+0x6f4>
    24e0:	fc 01       	movw	r30, r24
    24e2:	e0 5b       	subi	r30, 0xB0	; 176
    24e4:	ff 4f       	sbci	r31, 0xFF	; 255
    24e6:	ff c0       	rjmp	.+510    	; 0x26e6 <__tablejump2__>
						case 0:
							lcd.gotoxy(3,12);
    24e8:	6c e0       	ldi	r22, 0x0C	; 12
    24ea:	70 e0       	ldi	r23, 0x00	; 0
    24ec:	83 e0       	ldi	r24, 0x03	; 3
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	f6 01       	movw	r30, r12
    24f2:	09 95       	icall
							lcd.string_size("No entry",7);
    24f4:	67 e0       	ldi	r22, 0x07	; 7
    24f6:	8c e7       	ldi	r24, 0x7C	; 124
    24f8:	91 e0       	ldi	r25, 0x01	; 1
    24fa:	f7 01       	movw	r30, r14
    24fc:	09 95       	icall
							break;
    24fe:	47 c0       	rjmp	.+142    	; 0x258e <main+0x6f4>
						case 1:
							lcd.gotoxy(3,12);
    2500:	6c e0       	ldi	r22, 0x0C	; 12
    2502:	70 e0       	ldi	r23, 0x00	; 0
    2504:	83 e0       	ldi	r24, 0x03	; 3
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	f6 01       	movw	r30, r12
    250a:	09 95       	icall
							lcd.string_size("New Entry",7);
    250c:	67 e0       	ldi	r22, 0x07	; 7
    250e:	85 e8       	ldi	r24, 0x85	; 133
    2510:	91 e0       	ldi	r25, 0x01	; 1
    2512:	f7 01       	movw	r30, r14
    2514:	09 95       	icall
							break;
    2516:	3b c0       	rjmp	.+118    	; 0x258e <main+0x6f4>
						case 2:
							lcd.gotoxy(3,12);
    2518:	6c e0       	ldi	r22, 0x0C	; 12
    251a:	70 e0       	ldi	r23, 0x00	; 0
    251c:	83 e0       	ldi	r24, 0x03	; 3
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	f6 01       	movw	r30, r12
    2522:	09 95       	icall
							lcd.string_size("global logic",7);
    2524:	67 e0       	ldi	r22, 0x07	; 7
    2526:	8f e8       	ldi	r24, 0x8F	; 143
    2528:	91 e0       	ldi	r25, 0x01	; 1
    252a:	f7 01       	movw	r30, r14
    252c:	09 95       	icall
							break;
    252e:	2f c0       	rjmp	.+94     	; 0x258e <main+0x6f4>
						case 3:
							lcd.gotoxy(3,12);
    2530:	6c e0       	ldi	r22, 0x0C	; 12
    2532:	70 e0       	ldi	r23, 0x00	; 0
    2534:	83 e0       	ldi	r24, 0x03	; 3
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	f6 01       	movw	r30, r12
    253a:	09 95       	icall
							lcd.string_size("local logic",7);
    253c:	67 e0       	ldi	r22, 0x07	; 7
    253e:	8c e9       	ldi	r24, 0x9C	; 156
    2540:	91 e0       	ldi	r25, 0x01	; 1
    2542:	f7 01       	movw	r30, r14
    2544:	09 95       	icall
							break;
    2546:	23 c0       	rjmp	.+70     	; 0x258e <main+0x6f4>
						case 4:
							lcd.gotoxy(3,12);
    2548:	6c e0       	ldi	r22, 0x0C	; 12
    254a:	70 e0       	ldi	r23, 0x00	; 0
    254c:	83 e0       	ldi	r24, 0x03	; 3
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	f6 01       	movw	r30, r12
    2552:	09 95       	icall
							lcd.string_size("local logic",7);
    2554:	67 e0       	ldi	r22, 0x07	; 7
    2556:	8c e9       	ldi	r24, 0x9C	; 156
    2558:	91 e0       	ldi	r25, 0x01	; 1
    255a:	f7 01       	movw	r30, r14
    255c:	09 95       	icall
							break;
    255e:	17 c0       	rjmp	.+46     	; 0x258e <main+0x6f4>
						case 41:
							lcd.gotoxy(3,12);
    2560:	6c e0       	ldi	r22, 0x0C	; 12
    2562:	70 e0       	ldi	r23, 0x00	; 0
    2564:	83 e0       	ldi	r24, 0x03	; 3
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	f6 01       	movw	r30, r12
    256a:	09 95       	icall
							lcd.string_size("local above",7);
    256c:	67 e0       	ldi	r22, 0x07	; 7
    256e:	88 ea       	ldi	r24, 0xA8	; 168
    2570:	91 e0       	ldi	r25, 0x01	; 1
    2572:	f7 01       	movw	r30, r14
    2574:	09 95       	icall
							break;
    2576:	0b c0       	rjmp	.+22     	; 0x258e <main+0x6f4>
						case 42:
							lcd.gotoxy(3,12);
    2578:	6c e0       	ldi	r22, 0x0C	; 12
    257a:	70 e0       	ldi	r23, 0x00	; 0
    257c:	83 e0       	ldi	r24, 0x03	; 3
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	f6 01       	movw	r30, r12
    2582:	09 95       	icall
							lcd.string_size("local bellow",7);
    2584:	67 e0       	ldi	r22, 0x07	; 7
    2586:	84 eb       	ldi	r24, 0xB4	; 180
    2588:	91 e0       	ldi	r25, 0x01	; 1
    258a:	f7 01       	movw	r30, r14
    258c:	09 95       	icall
							break;
					}//End switch
					/******/
					//lfsm.read(&lfsm,input_tmp);
					
					keypad.flush();
    258e:	f3 01       	movw	r30, r6
    2590:	09 95       	icall
					option=0;
    2592:	91 2c       	mov	r9, r1
				}//End if
				if(keypadinput.character == 'C'){
    2594:	89 81       	ldd	r24, Y+1	; 0x01
    2596:	83 34       	cpi	r24, 0x43	; 67
    2598:	59 f4       	brne	.+22     	; 0x25b0 <main+0x716>
					keypad.flush();
    259a:	f3 01       	movw	r30, r6
    259c:	09 95       	icall
					option=8;
    259e:	98 2c       	mov	r9, r8
    25a0:	07 c0       	rjmp	.+14     	; 0x25b0 <main+0x716>
    25a2:	99 2e       	mov	r9, r25
    25a4:	05 c0       	rjmp	.+10     	; 0x25b0 <main+0x716>
    25a6:	99 2e       	mov	r9, r25
    25a8:	03 c0       	rjmp	.+6      	; 0x25b0 <main+0x716>
    25aa:	99 2e       	mov	r9, r25
    25ac:	01 c0       	rjmp	.+2      	; 0x25b0 <main+0x716>
    25ae:	99 2e       	mov	r9, r25
				break;
			default:
				break;
		}//End switch
		/***DISPLAY***/
		lcd.gotoxy(3,0);
    25b0:	60 e0       	ldi	r22, 0x00	; 0
    25b2:	70 e0       	ldi	r23, 0x00	; 0
    25b4:	83 e0       	ldi	r24, 0x03	; 3
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	f6 01       	movw	r30, r12
    25ba:	09 95       	icall
		lcd.string_size("Output ",7);
    25bc:	67 e0       	ldi	r22, 0x07	; 7
    25be:	81 ec       	ldi	r24, 0xC1	; 193
    25c0:	91 e0       	ldi	r25, 0x01	; 1
    25c2:	f7 01       	movw	r30, r14
    25c4:	09 95       	icall
		string=func.ui16toa(lfsm.getoutput(&lfsm));
    25c6:	a6 96       	adiw	r28, 0x26	; 38
    25c8:	ee ad       	ldd	r30, Y+62	; 0x3e
    25ca:	ff ad       	ldd	r31, Y+63	; 0x3f
    25cc:	a6 97       	sbiw	r28, 0x26	; 38
    25ce:	ce 01       	movw	r24, r28
    25d0:	8f 5a       	subi	r24, 0xAF	; 175
    25d2:	9f 4f       	sbci	r25, 0xFF	; 255
    25d4:	09 95       	icall
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	f5 01       	movw	r30, r10
    25da:	09 95       	icall
    25dc:	90 93 7e 02 	sts	0x027E, r25	; 0x80027e <string+0x1>
    25e0:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <string>
		lcd.string_size(string,4);
    25e4:	64 e0       	ldi	r22, 0x04	; 4
    25e6:	f7 01       	movw	r30, r14
    25e8:	09 95       	icall
		//lcd.hspace(2);
		//string=func.ui16toa(lfsm.getstatus(&lfsm));
		//lcd.string_size(string,4);
		PORTC=lfsm.getoutput(&lfsm);
    25ea:	a6 96       	adiw	r28, 0x26	; 38
    25ec:	ee ad       	ldd	r30, Y+62	; 0x3e
    25ee:	ff ad       	ldd	r31, Y+63	; 0x3f
    25f0:	a6 97       	sbiw	r28, 0x26	; 38
    25f2:	ce 01       	movw	r24, r28
    25f4:	8f 5a       	subi	r24, 0xAF	; 175
    25f6:	9f 4f       	sbci	r25, 0xFF	; 255
    25f8:	09 95       	icall
    25fa:	85 bb       	out	0x15, r24	; 21
    25fc:	c3 cc       	rjmp	.-1658   	; 0x1f84 <main+0xea>

000025fe <__mulsi3>:
    25fe:	db 01       	movw	r26, r22
    2600:	8f 93       	push	r24
    2602:	9f 93       	push	r25
    2604:	88 d0       	rcall	.+272    	; 0x2716 <__muluhisi3>
    2606:	bf 91       	pop	r27
    2608:	af 91       	pop	r26
    260a:	a2 9f       	mul	r26, r18
    260c:	80 0d       	add	r24, r0
    260e:	91 1d       	adc	r25, r1
    2610:	a3 9f       	mul	r26, r19
    2612:	90 0d       	add	r25, r0
    2614:	b2 9f       	mul	r27, r18
    2616:	90 0d       	add	r25, r0
    2618:	11 24       	eor	r1, r1
    261a:	08 95       	ret

0000261c <__udivmodhi4>:
    261c:	aa 1b       	sub	r26, r26
    261e:	bb 1b       	sub	r27, r27
    2620:	51 e1       	ldi	r21, 0x11	; 17
    2622:	07 c0       	rjmp	.+14     	; 0x2632 <__udivmodhi4_ep>

00002624 <__udivmodhi4_loop>:
    2624:	aa 1f       	adc	r26, r26
    2626:	bb 1f       	adc	r27, r27
    2628:	a6 17       	cp	r26, r22
    262a:	b7 07       	cpc	r27, r23
    262c:	10 f0       	brcs	.+4      	; 0x2632 <__udivmodhi4_ep>
    262e:	a6 1b       	sub	r26, r22
    2630:	b7 0b       	sbc	r27, r23

00002632 <__udivmodhi4_ep>:
    2632:	88 1f       	adc	r24, r24
    2634:	99 1f       	adc	r25, r25
    2636:	5a 95       	dec	r21
    2638:	a9 f7       	brne	.-22     	; 0x2624 <__udivmodhi4_loop>
    263a:	80 95       	com	r24
    263c:	90 95       	com	r25
    263e:	bc 01       	movw	r22, r24
    2640:	cd 01       	movw	r24, r26
    2642:	08 95       	ret

00002644 <__divmodhi4>:
    2644:	97 fb       	bst	r25, 7
    2646:	07 2e       	mov	r0, r23
    2648:	16 f4       	brtc	.+4      	; 0x264e <__divmodhi4+0xa>
    264a:	00 94       	com	r0
    264c:	06 d0       	rcall	.+12     	; 0x265a <__divmodhi4_neg1>
    264e:	77 fd       	sbrc	r23, 7
    2650:	08 d0       	rcall	.+16     	; 0x2662 <__divmodhi4_neg2>
    2652:	e4 df       	rcall	.-56     	; 0x261c <__udivmodhi4>
    2654:	07 fc       	sbrc	r0, 7
    2656:	05 d0       	rcall	.+10     	; 0x2662 <__divmodhi4_neg2>
    2658:	3e f4       	brtc	.+14     	; 0x2668 <__divmodhi4_exit>

0000265a <__divmodhi4_neg1>:
    265a:	90 95       	com	r25
    265c:	81 95       	neg	r24
    265e:	9f 4f       	sbci	r25, 0xFF	; 255
    2660:	08 95       	ret

00002662 <__divmodhi4_neg2>:
    2662:	70 95       	com	r23
    2664:	61 95       	neg	r22
    2666:	7f 4f       	sbci	r23, 0xFF	; 255

00002668 <__divmodhi4_exit>:
    2668:	08 95       	ret

0000266a <__udivmodsi4>:
    266a:	a1 e2       	ldi	r26, 0x21	; 33
    266c:	1a 2e       	mov	r1, r26
    266e:	aa 1b       	sub	r26, r26
    2670:	bb 1b       	sub	r27, r27
    2672:	fd 01       	movw	r30, r26
    2674:	0d c0       	rjmp	.+26     	; 0x2690 <__udivmodsi4_ep>

00002676 <__udivmodsi4_loop>:
    2676:	aa 1f       	adc	r26, r26
    2678:	bb 1f       	adc	r27, r27
    267a:	ee 1f       	adc	r30, r30
    267c:	ff 1f       	adc	r31, r31
    267e:	a2 17       	cp	r26, r18
    2680:	b3 07       	cpc	r27, r19
    2682:	e4 07       	cpc	r30, r20
    2684:	f5 07       	cpc	r31, r21
    2686:	20 f0       	brcs	.+8      	; 0x2690 <__udivmodsi4_ep>
    2688:	a2 1b       	sub	r26, r18
    268a:	b3 0b       	sbc	r27, r19
    268c:	e4 0b       	sbc	r30, r20
    268e:	f5 0b       	sbc	r31, r21

00002690 <__udivmodsi4_ep>:
    2690:	66 1f       	adc	r22, r22
    2692:	77 1f       	adc	r23, r23
    2694:	88 1f       	adc	r24, r24
    2696:	99 1f       	adc	r25, r25
    2698:	1a 94       	dec	r1
    269a:	69 f7       	brne	.-38     	; 0x2676 <__udivmodsi4_loop>
    269c:	60 95       	com	r22
    269e:	70 95       	com	r23
    26a0:	80 95       	com	r24
    26a2:	90 95       	com	r25
    26a4:	9b 01       	movw	r18, r22
    26a6:	ac 01       	movw	r20, r24
    26a8:	bd 01       	movw	r22, r26
    26aa:	cf 01       	movw	r24, r30
    26ac:	08 95       	ret

000026ae <__divmodsi4>:
    26ae:	05 2e       	mov	r0, r21
    26b0:	97 fb       	bst	r25, 7
    26b2:	16 f4       	brtc	.+4      	; 0x26b8 <__divmodsi4+0xa>
    26b4:	00 94       	com	r0
    26b6:	0f d0       	rcall	.+30     	; 0x26d6 <__negsi2>
    26b8:	57 fd       	sbrc	r21, 7
    26ba:	05 d0       	rcall	.+10     	; 0x26c6 <__divmodsi4_neg2>
    26bc:	d6 df       	rcall	.-84     	; 0x266a <__udivmodsi4>
    26be:	07 fc       	sbrc	r0, 7
    26c0:	02 d0       	rcall	.+4      	; 0x26c6 <__divmodsi4_neg2>
    26c2:	46 f4       	brtc	.+16     	; 0x26d4 <__divmodsi4_exit>
    26c4:	08 c0       	rjmp	.+16     	; 0x26d6 <__negsi2>

000026c6 <__divmodsi4_neg2>:
    26c6:	50 95       	com	r21
    26c8:	40 95       	com	r20
    26ca:	30 95       	com	r19
    26cc:	21 95       	neg	r18
    26ce:	3f 4f       	sbci	r19, 0xFF	; 255
    26d0:	4f 4f       	sbci	r20, 0xFF	; 255
    26d2:	5f 4f       	sbci	r21, 0xFF	; 255

000026d4 <__divmodsi4_exit>:
    26d4:	08 95       	ret

000026d6 <__negsi2>:
    26d6:	90 95       	com	r25
    26d8:	80 95       	com	r24
    26da:	70 95       	com	r23
    26dc:	61 95       	neg	r22
    26de:	7f 4f       	sbci	r23, 0xFF	; 255
    26e0:	8f 4f       	sbci	r24, 0xFF	; 255
    26e2:	9f 4f       	sbci	r25, 0xFF	; 255
    26e4:	08 95       	ret

000026e6 <__tablejump2__>:
    26e6:	ee 0f       	add	r30, r30
    26e8:	ff 1f       	adc	r31, r31
    26ea:	00 24       	eor	r0, r0
    26ec:	00 1c       	adc	r0, r0
    26ee:	0b be       	out	0x3b, r0	; 59
    26f0:	07 90       	elpm	r0, Z+
    26f2:	f6 91       	elpm	r31, Z
    26f4:	e0 2d       	mov	r30, r0
    26f6:	09 94       	ijmp

000026f8 <__umulhisi3>:
    26f8:	a2 9f       	mul	r26, r18
    26fa:	b0 01       	movw	r22, r0
    26fc:	b3 9f       	mul	r27, r19
    26fe:	c0 01       	movw	r24, r0
    2700:	a3 9f       	mul	r26, r19
    2702:	70 0d       	add	r23, r0
    2704:	81 1d       	adc	r24, r1
    2706:	11 24       	eor	r1, r1
    2708:	91 1d       	adc	r25, r1
    270a:	b2 9f       	mul	r27, r18
    270c:	70 0d       	add	r23, r0
    270e:	81 1d       	adc	r24, r1
    2710:	11 24       	eor	r1, r1
    2712:	91 1d       	adc	r25, r1
    2714:	08 95       	ret

00002716 <__muluhisi3>:
    2716:	f0 df       	rcall	.-32     	; 0x26f8 <__umulhisi3>
    2718:	a5 9f       	mul	r26, r21
    271a:	90 0d       	add	r25, r0
    271c:	b4 9f       	mul	r27, r20
    271e:	90 0d       	add	r25, r0
    2720:	a4 9f       	mul	r26, r20
    2722:	80 0d       	add	r24, r0
    2724:	91 1d       	adc	r25, r1
    2726:	11 24       	eor	r1, r1
    2728:	08 95       	ret

0000272a <eeprom_read_block>:
    272a:	dc 01       	movw	r26, r24
    272c:	cb 01       	movw	r24, r22

0000272e <eeprom_read_blraw>:
    272e:	fc 01       	movw	r30, r24
    2730:	e1 99       	sbic	0x1c, 1	; 28
    2732:	fe cf       	rjmp	.-4      	; 0x2730 <eeprom_read_blraw+0x2>
    2734:	06 c0       	rjmp	.+12     	; 0x2742 <eeprom_read_blraw+0x14>
    2736:	ff bb       	out	0x1f, r31	; 31
    2738:	ee bb       	out	0x1e, r30	; 30
    273a:	e0 9a       	sbi	0x1c, 0	; 28
    273c:	31 96       	adiw	r30, 0x01	; 1
    273e:	0d b2       	in	r0, 0x1d	; 29
    2740:	0d 92       	st	X+, r0
    2742:	41 50       	subi	r20, 0x01	; 1
    2744:	50 40       	sbci	r21, 0x00	; 0
    2746:	b8 f7       	brcc	.-18     	; 0x2736 <eeprom_read_blraw+0x8>
    2748:	08 95       	ret

0000274a <eeprom_read_byte>:
    274a:	e1 99       	sbic	0x1c, 1	; 28
    274c:	fe cf       	rjmp	.-4      	; 0x274a <eeprom_read_byte>
    274e:	9f bb       	out	0x1f, r25	; 31
    2750:	8e bb       	out	0x1e, r24	; 30
    2752:	e0 9a       	sbi	0x1c, 0	; 28
    2754:	99 27       	eor	r25, r25
    2756:	8d b3       	in	r24, 0x1d	; 29
    2758:	08 95       	ret

0000275a <eeprom_read_word>:
    275a:	a8 e1       	ldi	r26, 0x18	; 24
    275c:	b0 e0       	ldi	r27, 0x00	; 0
    275e:	42 e0       	ldi	r20, 0x02	; 2
    2760:	50 e0       	ldi	r21, 0x00	; 0
    2762:	e5 cf       	rjmp	.-54     	; 0x272e <eeprom_read_blraw>

00002764 <eeprom_update_block>:
    2764:	dc 01       	movw	r26, r24
    2766:	a4 0f       	add	r26, r20
    2768:	b5 1f       	adc	r27, r21
    276a:	41 50       	subi	r20, 0x01	; 1
    276c:	50 40       	sbci	r21, 0x00	; 0
    276e:	40 f0       	brcs	.+16     	; 0x2780 <eeprom_update_block+0x1c>
    2770:	cb 01       	movw	r24, r22
    2772:	84 0f       	add	r24, r20
    2774:	95 1f       	adc	r25, r21
    2776:	2e 91       	ld	r18, -X
    2778:	05 d0       	rcall	.+10     	; 0x2784 <eeprom_update_r18>
    277a:	41 50       	subi	r20, 0x01	; 1
    277c:	50 40       	sbci	r21, 0x00	; 0
    277e:	d8 f7       	brcc	.-10     	; 0x2776 <eeprom_update_block+0x12>
    2780:	08 95       	ret

00002782 <eeprom_update_byte>:
    2782:	26 2f       	mov	r18, r22

00002784 <eeprom_update_r18>:
    2784:	e1 99       	sbic	0x1c, 1	; 28
    2786:	fe cf       	rjmp	.-4      	; 0x2784 <eeprom_update_r18>
    2788:	9f bb       	out	0x1f, r25	; 31
    278a:	8e bb       	out	0x1e, r24	; 30
    278c:	e0 9a       	sbi	0x1c, 0	; 28
    278e:	01 97       	sbiw	r24, 0x01	; 1
    2790:	0d b2       	in	r0, 0x1d	; 29
    2792:	02 16       	cp	r0, r18
    2794:	31 f0       	breq	.+12     	; 0x27a2 <eeprom_update_r18+0x1e>
    2796:	2d bb       	out	0x1d, r18	; 29
    2798:	0f b6       	in	r0, 0x3f	; 63
    279a:	f8 94       	cli
    279c:	e2 9a       	sbi	0x1c, 2	; 28
    279e:	e1 9a       	sbi	0x1c, 1	; 28
    27a0:	0f be       	out	0x3f, r0	; 63
    27a2:	08 95       	ret

000027a4 <eeprom_update_dword>:
    27a4:	03 96       	adiw	r24, 0x03	; 3
    27a6:	27 2f       	mov	r18, r23
    27a8:	ed df       	rcall	.-38     	; 0x2784 <eeprom_update_r18>
    27aa:	eb df       	rcall	.-42     	; 0x2782 <eeprom_update_byte>
    27ac:	25 2f       	mov	r18, r21
    27ae:	ea df       	rcall	.-44     	; 0x2784 <eeprom_update_r18>
    27b0:	24 2f       	mov	r18, r20
    27b2:	e8 cf       	rjmp	.-48     	; 0x2784 <eeprom_update_r18>

000027b4 <eeprom_update_word>:
    27b4:	01 96       	adiw	r24, 0x01	; 1
    27b6:	27 2f       	mov	r18, r23
    27b8:	e5 df       	rcall	.-54     	; 0x2784 <eeprom_update_r18>
    27ba:	e3 cf       	rjmp	.-58     	; 0x2782 <eeprom_update_byte>

000027bc <eeprom_write_block>:
    27bc:	dc 01       	movw	r26, r24
    27be:	cb 01       	movw	r24, r22
    27c0:	02 c0       	rjmp	.+4      	; 0x27c6 <eeprom_write_block+0xa>
    27c2:	2d 91       	ld	r18, X+
    27c4:	05 d0       	rcall	.+10     	; 0x27d0 <eeprom_write_r18>
    27c6:	41 50       	subi	r20, 0x01	; 1
    27c8:	50 40       	sbci	r21, 0x00	; 0
    27ca:	d8 f7       	brcc	.-10     	; 0x27c2 <eeprom_write_block+0x6>
    27cc:	08 95       	ret

000027ce <eeprom_write_byte>:
    27ce:	26 2f       	mov	r18, r22

000027d0 <eeprom_write_r18>:
    27d0:	e1 99       	sbic	0x1c, 1	; 28
    27d2:	fe cf       	rjmp	.-4      	; 0x27d0 <eeprom_write_r18>
    27d4:	9f bb       	out	0x1f, r25	; 31
    27d6:	8e bb       	out	0x1e, r24	; 30
    27d8:	2d bb       	out	0x1d, r18	; 29
    27da:	0f b6       	in	r0, 0x3f	; 63
    27dc:	f8 94       	cli
    27de:	e2 9a       	sbi	0x1c, 2	; 28
    27e0:	e1 9a       	sbi	0x1c, 1	; 28
    27e2:	0f be       	out	0x3f, r0	; 63
    27e4:	01 96       	adiw	r24, 0x01	; 1
    27e6:	08 95       	ret

000027e8 <eeprom_write_dword>:
    27e8:	24 2f       	mov	r18, r20
    27ea:	f2 df       	rcall	.-28     	; 0x27d0 <eeprom_write_r18>
    27ec:	25 2f       	mov	r18, r21
    27ee:	f0 df       	rcall	.-32     	; 0x27d0 <eeprom_write_r18>
    27f0:	00 c0       	rjmp	.+0      	; 0x27f2 <eeprom_write_word>

000027f2 <eeprom_write_word>:
    27f2:	ed df       	rcall	.-38     	; 0x27ce <eeprom_write_byte>
    27f4:	27 2f       	mov	r18, r23
    27f6:	ec cf       	rjmp	.-40     	; 0x27d0 <eeprom_write_r18>

000027f8 <_exit>:
    27f8:	f8 94       	cli

000027fa <__stop_program>:
    27fa:	ff cf       	rjmp	.-2      	; 0x27fa <__stop_program>
