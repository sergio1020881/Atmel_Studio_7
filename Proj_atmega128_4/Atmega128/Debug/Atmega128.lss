
Atmega128.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00001f54  00001fe8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f54  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010a  00800110  00800110  00001ff8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001ff8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002028  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000750  00000000  00000000  00002068  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000072c9  00000000  00000000  000027b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001936  00000000  00000000  00009a81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000045ef  00000000  00000000  0000b3b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001078  00000000  00000000  0000f9a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001473  00000000  00000000  00010a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000060aa  00000000  00000000  00011e93  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005a0  00000000  00000000  00017f3d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	62 c0       	rjmp	.+196    	; 0xca <__bad_interrupt>
       6:	00 00       	nop
       8:	60 c0       	rjmp	.+192    	; 0xca <__bad_interrupt>
       a:	00 00       	nop
       c:	5e c0       	rjmp	.+188    	; 0xca <__bad_interrupt>
       e:	00 00       	nop
      10:	5c c0       	rjmp	.+184    	; 0xca <__bad_interrupt>
      12:	00 00       	nop
      14:	5a c0       	rjmp	.+180    	; 0xca <__bad_interrupt>
      16:	00 00       	nop
      18:	58 c0       	rjmp	.+176    	; 0xca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c0       	rjmp	.+172    	; 0xca <__bad_interrupt>
      1e:	00 00       	nop
      20:	54 c0       	rjmp	.+168    	; 0xca <__bad_interrupt>
      22:	00 00       	nop
      24:	52 c0       	rjmp	.+164    	; 0xca <__bad_interrupt>
      26:	00 00       	nop
      28:	50 c0       	rjmp	.+160    	; 0xca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4e c0       	rjmp	.+156    	; 0xca <__bad_interrupt>
      2e:	00 00       	nop
      30:	4c c0       	rjmp	.+152    	; 0xca <__bad_interrupt>
      32:	00 00       	nop
      34:	4a c0       	rjmp	.+148    	; 0xca <__bad_interrupt>
      36:	00 00       	nop
      38:	48 c0       	rjmp	.+144    	; 0xca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	46 c0       	rjmp	.+140    	; 0xca <__bad_interrupt>
      3e:	00 00       	nop
      40:	44 c0       	rjmp	.+136    	; 0xca <__bad_interrupt>
      42:	00 00       	nop
      44:	42 c0       	rjmp	.+132    	; 0xca <__bad_interrupt>
      46:	00 00       	nop
      48:	c6 c0       	rjmp	.+396    	; 0x1d6 <__vector_18>
      4a:	00 00       	nop
      4c:	fc c0       	rjmp	.+504    	; 0x246 <__vector_19>
      4e:	00 00       	nop
      50:	3c c0       	rjmp	.+120    	; 0xca <__bad_interrupt>
      52:	00 00       	nop
      54:	3b c0       	rjmp	.+118    	; 0xcc <__vector_21>
      56:	00 00       	nop
      58:	38 c0       	rjmp	.+112    	; 0xca <__bad_interrupt>
      5a:	00 00       	nop
      5c:	36 c0       	rjmp	.+108    	; 0xca <__bad_interrupt>
      5e:	00 00       	nop
      60:	34 c0       	rjmp	.+104    	; 0xca <__bad_interrupt>
      62:	00 00       	nop
      64:	32 c0       	rjmp	.+100    	; 0xca <__bad_interrupt>
      66:	00 00       	nop
      68:	30 c0       	rjmp	.+96     	; 0xca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2e c0       	rjmp	.+92     	; 0xca <__bad_interrupt>
      6e:	00 00       	nop
      70:	2c c0       	rjmp	.+88     	; 0xca <__bad_interrupt>
      72:	00 00       	nop
      74:	2a c0       	rjmp	.+84     	; 0xca <__bad_interrupt>
      76:	00 00       	nop
      78:	0f c1       	rjmp	.+542    	; 0x298 <__vector_30>
      7a:	00 00       	nop
      7c:	48 c1       	rjmp	.+656    	; 0x30e <__vector_31>
      7e:	00 00       	nop
      80:	24 c0       	rjmp	.+72     	; 0xca <__bad_interrupt>
      82:	00 00       	nop
      84:	22 c0       	rjmp	.+68     	; 0xca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c0       	rjmp	.+64     	; 0xca <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e4 e5       	ldi	r30, 0x54	; 84
      a0:	ff e1       	ldi	r31, 0x1F	; 31
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a0 31       	cpi	r26, 0x10	; 16
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	22 e0       	ldi	r18, 0x02	; 2
      b4:	a0 e1       	ldi	r26, 0x10	; 16
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	aa 31       	cpi	r26, 0x1A	; 26
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <main>
      c6:	0c 94 a8 0f 	jmp	0x1f50	; 0x1f50 <_exit>

000000ca <__bad_interrupt>:
      ca:	9a cf       	rjmp	.-204    	; 0x0 <__vectors>

000000cc <__vector_21>:
void uart1_puts_p(const char *progmem_s )
{
    register char c;
    while ( (c = pgm_read_byte(progmem_s++)) ) 
      uart1_putc(c);
}/* uart1_puts_p */
      cc:	1f 92       	push	r1
      ce:	0f 92       	push	r0
      d0:	0f b6       	in	r0, 0x3f	; 63
      d2:	0f 92       	push	r0
      d4:	11 24       	eor	r1, r1
      d6:	0b b6       	in	r0, 0x3b	; 59
      d8:	0f 92       	push	r0
      da:	2f 93       	push	r18
      dc:	3f 93       	push	r19
      de:	8f 93       	push	r24
      e0:	9f 93       	push	r25
      e2:	ef 93       	push	r30
      e4:	ff 93       	push	r31
      e6:	84 b1       	in	r24, 0x04	; 4
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <adc_tmp+0x1>
      ee:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <adc_tmp>
      f2:	25 b1       	in	r18, 0x05	; 5
      f4:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <adc_tmp>
      f8:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <adc_tmp+0x1>
      fc:	92 2b       	or	r25, r18
      fe:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <adc_tmp+0x1>
     102:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <adc_tmp>
     106:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <adc_n_sample>
     10a:	84 30       	cpi	r24, 0x04	; 4
     10c:	a0 f4       	brcc	.+40     	; 0x136 <__vector_21+0x6a>
     10e:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <adc_n_sample>
     112:	8f 5f       	subi	r24, 0xFF	; 255
     114:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <adc_n_sample>
     118:	20 91 9b 01 	lds	r18, 0x019B	; 0x80019b <adc_tmp>
     11c:	30 91 9c 01 	lds	r19, 0x019C	; 0x80019c <adc_tmp+0x1>
     120:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <adc_sample>
     124:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <adc_sample+0x1>
     128:	82 0f       	add	r24, r18
     12a:	93 1f       	adc	r25, r19
     12c:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <adc_sample+0x1>
     130:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <adc_sample>
     134:	43 c0       	rjmp	.+134    	; 0x1bc <__vector_21+0xf0>
     136:	e0 91 9f 01 	lds	r30, 0x019F	; 0x80019f <ADC_SELECTOR>
     13a:	f0 91 a0 01 	lds	r31, 0x01A0	; 0x8001a0 <ADC_SELECTOR+0x1>
     13e:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <adc_sample>
     142:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <adc_sample+0x1>
     146:	95 95       	asr	r25
     148:	87 95       	ror	r24
     14a:	95 95       	asr	r25
     14c:	87 95       	ror	r24
     14e:	ee 0f       	add	r30, r30
     150:	ff 1f       	adc	r31, r31
     152:	ed 54       	subi	r30, 0x4D	; 77
     154:	fe 4f       	sbci	r31, 0xFE	; 254
     156:	91 83       	std	Z+1, r25	; 0x01
     158:	80 83       	st	Z, r24
     15a:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <adc_sample+0x1>
     15e:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <adc_sample>
     162:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <adc_n_sample>
     166:	20 91 9f 01 	lds	r18, 0x019F	; 0x80019f <ADC_SELECTOR>
     16a:	30 91 a0 01 	lds	r19, 0x01A0	; 0x8001a0 <ADC_SELECTOR+0x1>
     16e:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <ADC_N_CHANNEL>
     172:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <ADC_N_CHANNEL+0x1>
     176:	28 17       	cp	r18, r24
     178:	39 07       	cpc	r19, r25
     17a:	54 f4       	brge	.+20     	; 0x190 <__vector_21+0xc4>
     17c:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <ADC_SELECTOR>
     180:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <ADC_SELECTOR+0x1>
     184:	01 96       	adiw	r24, 0x01	; 1
     186:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <ADC_SELECTOR+0x1>
     18a:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <ADC_SELECTOR>
     18e:	04 c0       	rjmp	.+8      	; 0x198 <__vector_21+0xcc>
     190:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <ADC_SELECTOR+0x1>
     194:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <ADC_SELECTOR>
     198:	87 b1       	in	r24, 0x07	; 7
     19a:	80 7e       	andi	r24, 0xE0	; 224
     19c:	87 b9       	out	0x07, r24	; 7
     19e:	e0 91 9f 01 	lds	r30, 0x019F	; 0x80019f <ADC_SELECTOR>
     1a2:	f0 91 a0 01 	lds	r31, 0x01A0	; 0x8001a0 <ADC_SELECTOR+0x1>
     1a6:	ee 0f       	add	r30, r30
     1a8:	ff 1f       	adc	r31, r31
     1aa:	ed 55       	subi	r30, 0x5D	; 93
     1ac:	fe 4f       	sbci	r31, 0xFE	; 254
     1ae:	80 81       	ld	r24, Z
     1b0:	91 81       	ldd	r25, Z+1	; 0x01
     1b2:	27 b1       	in	r18, 0x07	; 7
     1b4:	8f 71       	andi	r24, 0x1F	; 31
     1b6:	99 27       	eor	r25, r25
     1b8:	82 2b       	or	r24, r18
     1ba:	87 b9       	out	0x07, r24	; 7
     1bc:	ff 91       	pop	r31
     1be:	ef 91       	pop	r30
     1c0:	9f 91       	pop	r25
     1c2:	8f 91       	pop	r24
     1c4:	3f 91       	pop	r19
     1c6:	2f 91       	pop	r18
     1c8:	0f 90       	pop	r0
     1ca:	0b be       	out	0x3b, r0	; 59
     1cc:	0f 90       	pop	r0
     1ce:	0f be       	out	0x3f, r0	; 63
     1d0:	0f 90       	pop	r0
     1d2:	1f 90       	pop	r1
     1d4:	18 95       	reti

000001d6 <__vector_18>:
     1d6:	1f 92       	push	r1
     1d8:	0f 92       	push	r0
     1da:	0f b6       	in	r0, 0x3f	; 63
     1dc:	0f 92       	push	r0
     1de:	11 24       	eor	r1, r1
     1e0:	0b b6       	in	r0, 0x3b	; 59
     1e2:	0f 92       	push	r0
     1e4:	8f 93       	push	r24
     1e6:	9f 93       	push	r25
     1e8:	ef 93       	push	r30
     1ea:	ff 93       	push	r31
     1ec:	8b b1       	in	r24, 0x0b	; 11
     1ee:	9a b1       	in	r25, 0x0a	; 10
     1f0:	88 71       	andi	r24, 0x18	; 24
     1f2:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <UART_LastRxError>
     1f6:	e0 91 57 01 	lds	r30, 0x0157	; 0x800157 <UART_RxHead>
     1fa:	ef 5f       	subi	r30, 0xFF	; 255
     1fc:	ef 71       	andi	r30, 0x1F	; 31
     1fe:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <UART_RxTail>
     202:	e8 13       	cpse	r30, r24
     204:	04 c0       	rjmp	.+8      	; 0x20e <__vector_18+0x38>
     206:	82 e0       	ldi	r24, 0x02	; 2
     208:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <UART_LastRxError>
     20c:	11 c0       	rjmp	.+34     	; 0x230 <__vector_18+0x5a>
     20e:	9c b1       	in	r25, 0x0c	; 12
     210:	e0 93 57 01 	sts	0x0157, r30	; 0x800157 <UART_RxHead>
     214:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <UART_LastRxError>
     218:	88 23       	and	r24, r24
     21a:	31 f0       	breq	.+12     	; 0x228 <__vector_18+0x52>
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	e6 5a       	subi	r30, 0xA6	; 166
     220:	fe 4f       	sbci	r31, 0xFE	; 254
     222:	88 e5       	ldi	r24, 0x58	; 88
     224:	80 83       	st	Z, r24
     226:	04 c0       	rjmp	.+8      	; 0x230 <__vector_18+0x5a>
     228:	f0 e0       	ldi	r31, 0x00	; 0
     22a:	e6 5a       	subi	r30, 0xA6	; 166
     22c:	fe 4f       	sbci	r31, 0xFE	; 254
     22e:	90 83       	st	Z, r25
     230:	ff 91       	pop	r31
     232:	ef 91       	pop	r30
     234:	9f 91       	pop	r25
     236:	8f 91       	pop	r24
     238:	0f 90       	pop	r0
     23a:	0b be       	out	0x3b, r0	; 59
     23c:	0f 90       	pop	r0
     23e:	0f be       	out	0x3f, r0	; 63
     240:	0f 90       	pop	r0
     242:	1f 90       	pop	r1
     244:	18 95       	reti

00000246 <__vector_19>:
     246:	1f 92       	push	r1
     248:	0f 92       	push	r0
     24a:	0f b6       	in	r0, 0x3f	; 63
     24c:	0f 92       	push	r0
     24e:	11 24       	eor	r1, r1
     250:	0b b6       	in	r0, 0x3b	; 59
     252:	0f 92       	push	r0
     254:	8f 93       	push	r24
     256:	9f 93       	push	r25
     258:	ef 93       	push	r30
     25a:	ff 93       	push	r31
     25c:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <UART_TxHead>
     260:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <UART_TxTail>
     264:	98 13       	cpse	r25, r24
     266:	02 c0       	rjmp	.+4      	; 0x26c <__vector_19+0x26>
     268:	55 98       	cbi	0x0a, 5	; 10
     26a:	0b c0       	rjmp	.+22     	; 0x282 <__vector_19+0x3c>
     26c:	e0 91 58 01 	lds	r30, 0x0158	; 0x800158 <UART_TxTail>
     270:	ef 5f       	subi	r30, 0xFF	; 255
     272:	ef 71       	andi	r30, 0x1F	; 31
     274:	e0 93 58 01 	sts	0x0158, r30	; 0x800158 <UART_TxTail>
     278:	f0 e0       	ldi	r31, 0x00	; 0
     27a:	e6 58       	subi	r30, 0x86	; 134
     27c:	fe 4f       	sbci	r31, 0xFE	; 254
     27e:	80 81       	ld	r24, Z
     280:	8c b9       	out	0x0c, r24	; 12
     282:	ff 91       	pop	r31
     284:	ef 91       	pop	r30
     286:	9f 91       	pop	r25
     288:	8f 91       	pop	r24
     28a:	0f 90       	pop	r0
     28c:	0b be       	out	0x3b, r0	; 59
     28e:	0f 90       	pop	r0
     290:	0f be       	out	0x3f, r0	; 63
     292:	0f 90       	pop	r0
     294:	1f 90       	pop	r1
     296:	18 95       	reti

00000298 <__vector_30>:
SIGNAL(UART1_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART1 Receive Complete interrupt
Purpose:  called when the UART1 has received a character
**************************************************************************/
{
     298:	1f 92       	push	r1
     29a:	0f 92       	push	r0
     29c:	0f b6       	in	r0, 0x3f	; 63
     29e:	0f 92       	push	r0
     2a0:	11 24       	eor	r1, r1
     2a2:	0b b6       	in	r0, 0x3b	; 59
     2a4:	0f 92       	push	r0
     2a6:	8f 93       	push	r24
     2a8:	9f 93       	push	r25
     2aa:	ef 93       	push	r30
     2ac:	ff 93       	push	r31
    unsigned char tmphead;
	unsigned char data;
	unsigned char bit9;
    unsigned char usr;
    /* read UART status register and UART data register */
	usr  = UART1_STATUS;
     2ae:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    bit9 = UART1_CONTROL;
     2b2:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
    bit9 = 0x01 & (bit9>>1);
    /* */
    UART1_LastRxError = (usr & (_BV(FE1)|_BV(DOR1)));
     2b6:	88 71       	andi	r24, 0x18	; 24
     2b8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
	/* calculate buffer index */ 
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
     2bc:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <UART1_RxHead>
     2c0:	ef 5f       	subi	r30, 0xFF	; 255
     2c2:	ef 71       	andi	r30, 0x1F	; 31
    if ( tmphead == UART1_RxTail ) {	
     2c4:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <UART1_RxTail>
     2c8:	e8 13       	cpse	r30, r24
     2ca:	04 c0       	rjmp	.+8      	; 0x2d4 <__vector_30+0x3c>
        /* error: receive buffer overflow, caracter is lost*/
        UART1_LastRxError = UART_BUFFER_OVERFLOW >> 8; 
     2cc:	82 e0       	ldi	r24, 0x02	; 2
     2ce:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
     2d2:	12 c0       	rjmp	.+36     	; 0x2f8 <__vector_30+0x60>
	}else{
		data = UART1_DATA;
     2d4:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
        /* store new index */
        UART1_RxHead = tmphead;
     2d8:	e0 93 12 01 	sts	0x0112, r30	; 0x800112 <UART1_RxHead>
		if(UART1_LastRxError){
     2dc:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
     2e0:	88 23       	and	r24, r24
     2e2:	31 f0       	breq	.+12     	; 0x2f0 <__vector_30+0x58>
			/* store indication data error in buffer */
			UART1_RxBuf[tmphead] = 'X';
     2e4:	f0 e0       	ldi	r31, 0x00	; 0
     2e6:	eb 5e       	subi	r30, 0xEB	; 235
     2e8:	fe 4f       	sbci	r31, 0xFE	; 254
     2ea:	88 e5       	ldi	r24, 0x58	; 88
     2ec:	80 83       	st	Z, r24
     2ee:	04 c0       	rjmp	.+8      	; 0x2f8 <__vector_30+0x60>
		}else{
			/* store received data in buffer */
			UART1_RxBuf[tmphead] = data;
     2f0:	f0 e0       	ldi	r31, 0x00	; 0
     2f2:	eb 5e       	subi	r30, 0xEB	; 235
     2f4:	fe 4f       	sbci	r31, 0xFE	; 254
     2f6:	90 83       	st	Z, r25
		}
    }
}
     2f8:	ff 91       	pop	r31
     2fa:	ef 91       	pop	r30
     2fc:	9f 91       	pop	r25
     2fe:	8f 91       	pop	r24
     300:	0f 90       	pop	r0
     302:	0b be       	out	0x3b, r0	; 59
     304:	0f 90       	pop	r0
     306:	0f be       	out	0x3f, r0	; 63
     308:	0f 90       	pop	r0
     30a:	1f 90       	pop	r1
     30c:	18 95       	reti

0000030e <__vector_31>:
SIGNAL(UART1_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART1 Data Register Empty interrupt
Purpose:  called when the UART1 is ready to transmit the next byte
**************************************************************************/
{
     30e:	1f 92       	push	r1
     310:	0f 92       	push	r0
     312:	0f b6       	in	r0, 0x3f	; 63
     314:	0f 92       	push	r0
     316:	11 24       	eor	r1, r1
     318:	0b b6       	in	r0, 0x3b	; 59
     31a:	0f 92       	push	r0
     31c:	8f 93       	push	r24
     31e:	9f 93       	push	r25
     320:	ef 93       	push	r30
     322:	ff 93       	push	r31
    if ( UART1_TxHead == UART1_TxTail ) {
     324:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <UART1_TxHead>
     328:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <UART1_TxTail>
     32c:	98 13       	cpse	r25, r24
     32e:	06 c0       	rjmp	.+12     	; 0x33c <__vector_31+0x2e>
        /* tx buffer empty, disable UDRE interrupt */
        UART1_CONTROL &= ~_BV(UART1_UDRIE);
     330:	ea e9       	ldi	r30, 0x9A	; 154
     332:	f0 e0       	ldi	r31, 0x00	; 0
     334:	80 81       	ld	r24, Z
     336:	8f 7d       	andi	r24, 0xDF	; 223
     338:	80 83       	st	Z, r24
     33a:	0e c0       	rjmp	.+28     	; 0x358 <__vector_31+0x4a>
    }else{
		/* calculate and store new buffer index */
        UART1_TxTail = (UART1_TxTail + 1) & UART_TX_BUFFER_MASK;
     33c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <UART1_TxTail>
     340:	8f 5f       	subi	r24, 0xFF	; 255
     342:	8f 71       	andi	r24, 0x1F	; 31
     344:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <UART1_TxTail>
        /* get one byte from buffer and write it to UART */
		UART1_DATA = UART1_TxBuf[UART1_TxTail];  /* start transmission */
     348:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <UART1_TxTail>
     34c:	f0 e0       	ldi	r31, 0x00	; 0
     34e:	eb 5c       	subi	r30, 0xCB	; 203
     350:	fe 4f       	sbci	r31, 0xFE	; 254
     352:	80 81       	ld	r24, Z
     354:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
	}	
}
     358:	ff 91       	pop	r31
     35a:	ef 91       	pop	r30
     35c:	9f 91       	pop	r25
     35e:	8f 91       	pop	r24
     360:	0f 90       	pop	r0
     362:	0b be       	out	0x3b, r0	; 59
     364:	0f 90       	pop	r0
     366:	0f be       	out	0x3f, r0	; 63
     368:	0f 90       	pop	r0
     36a:	1f 90       	pop	r1
     36c:	18 95       	reti

0000036e <EEPROMenable>:
** procedure and function header
*/
/*
** procedure and function
*/
EEPROM EEPROMenable(void){
     36e:	fc 01       	movw	r30, r24
	eprom.write_float=eeprom_write_float;
	eprom.update_float=eeprom_update_float;
	eprom.read_block=eeprom_read_block;
	eprom.write_block=eeprom_write_block;
	eprom.update_block=eeprom_update_block;
	return eprom;
     370:	81 e5       	ldi	r24, 0x51	; 81
     372:	9f e0       	ldi	r25, 0x0F	; 15
     374:	91 83       	std	Z+1, r25	; 0x01
     376:	80 83       	st	Z, r24
     378:	83 e9       	ldi	r24, 0x93	; 147
     37a:	9f e0       	ldi	r25, 0x0F	; 15
     37c:	93 83       	std	Z+3, r25	; 0x03
     37e:	82 83       	std	Z+2, r24	; 0x02
     380:	8d e6       	ldi	r24, 0x6D	; 109
     382:	9f e0       	ldi	r25, 0x0F	; 15
     384:	95 83       	std	Z+5, r25	; 0x05
     386:	84 83       	std	Z+4, r24	; 0x04
     388:	89 e5       	ldi	r24, 0x59	; 89
     38a:	9f e0       	ldi	r25, 0x0F	; 15
     38c:	97 83       	std	Z+7, r25	; 0x07
     38e:	86 83       	std	Z+6, r24	; 0x06
     390:	85 ea       	ldi	r24, 0xA5	; 165
     392:	9f e0       	ldi	r25, 0x0F	; 15
     394:	91 87       	std	Z+9, r25	; 0x09
     396:	80 87       	std	Z+8, r24	; 0x08
     398:	86 e8       	ldi	r24, 0x86	; 134
     39a:	9f e0       	ldi	r25, 0x0F	; 15
     39c:	93 87       	std	Z+11, r25	; 0x0b
     39e:	82 87       	std	Z+10, r24	; 0x0a
     3a0:	80 ea       	ldi	r24, 0xA0	; 160
     3a2:	9f e0       	ldi	r25, 0x0F	; 15
     3a4:	97 87       	std	Z+15, r25	; 0x0f
     3a6:	86 87       	std	Z+14, r24	; 0x0e
     3a8:	80 ea       	ldi	r24, 0xA0	; 160
     3aa:	9f e0       	ldi	r25, 0x0F	; 15
     3ac:	95 8b       	std	Z+21, r25	; 0x15
     3ae:	84 8b       	std	Z+20, r24	; 0x14
     3b0:	8e e7       	ldi	r24, 0x7E	; 126
     3b2:	9f e0       	ldi	r25, 0x0F	; 15
     3b4:	97 8b       	std	Z+23, r25	; 0x17
     3b6:	86 8b       	std	Z+22, r24	; 0x16
     3b8:	81 e4       	ldi	r24, 0x41	; 65
     3ba:	9f e0       	ldi	r25, 0x0F	; 15
     3bc:	91 8f       	std	Z+25, r25	; 0x19
     3be:	80 8f       	std	Z+24, r24	; 0x18
     3c0:	8a e8       	ldi	r24, 0x8A	; 138
     3c2:	9f e0       	ldi	r25, 0x0F	; 15
     3c4:	93 8f       	std	Z+27, r25	; 0x1b
     3c6:	82 8f       	std	Z+26, r24	; 0x1a
     3c8:	8e e5       	ldi	r24, 0x5E	; 94
     3ca:	9f e0       	ldi	r25, 0x0F	; 15
     3cc:	95 8f       	std	Z+29, r25	; 0x1d
     3ce:	84 8f       	std	Z+28, r24	; 0x1c
}
     3d0:	cf 01       	movw	r24, r30
     3d2:	08 95       	ret

000003d4 <FUNCpinmatch>:
}
//pinmatch
uint8_t FUNCpinmatch(uint8_t match, uint8_t pin, uint8_t HL)
{
	uint8_t result;
	result=match&pin;
     3d4:	68 23       	and	r22, r24
	if(HL){
     3d6:	44 23       	and	r20, r20
     3d8:	21 f0       	breq	.+8      	; 0x3e2 <FUNCpinmatch+0xe>
		if(result==match);
     3da:	86 17       	cp	r24, r22
     3dc:	21 f0       	breq	.+8      	; 0x3e6 <FUNCpinmatch+0x12>
		else
			result=0;
     3de:	80 e0       	ldi	r24, 0x00	; 0
     3e0:	08 95       	ret
	}else{
		if(result)
     3e2:	61 11       	cpse	r22, r1
			result=0;
     3e4:	80 e0       	ldi	r24, 0x00	; 0
		else
			result=match;
	}
	return result;
}
     3e6:	08 95       	ret

000003e8 <FUNChmerge>:
// hmerge
uint8_t FUNChmerge(uint8_t X, uint8_t Y)
{
	return (X | Y);
}
     3e8:	86 2b       	or	r24, r22
     3ea:	08 95       	ret

000003ec <FUNClmerge>:
// lmerge
uint8_t FUNClmerge(uint8_t X, uint8_t Y)
{
	return (X & Y);
}
     3ec:	86 23       	and	r24, r22
     3ee:	08 95       	ret

000003f0 <FUNChh>:
uint8_t FUNChh(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi&xf;
	return i;
}
     3f0:	86 23       	and	r24, r22
     3f2:	08 95       	ret

000003f4 <FUNCll>:
// ll
uint8_t FUNCll(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi|xf;
	return ~i;
     3f4:	86 2b       	or	r24, r22
}
     3f6:	80 95       	com	r24
     3f8:	08 95       	ret

000003fa <FUNClh>:
// lh
uint8_t FUNClh(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi^xf;
     3fa:	86 27       	eor	r24, r22
	i&=xf;
	return i;
}
     3fc:	86 23       	and	r24, r22
     3fe:	08 95       	ret

00000400 <FUNChl>:
// hl
uint8_t FUNChl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xf^xi;
     400:	60 95       	com	r22
	i&=xi;
	return i;
}
     402:	86 23       	and	r24, r22
     404:	08 95       	ret

00000406 <FUNCdiff>:
// diff
uint8_t FUNCdiff(uint8_t xi, uint8_t xf)
{
	return xf^xi;
}
     406:	86 27       	eor	r24, r22
     408:	08 95       	ret

0000040a <FUNCswap>:
// interchange *px and *py
void FUNCswap(long *px, long *py)
{
     40a:	cf 92       	push	r12
     40c:	df 92       	push	r13
     40e:	ef 92       	push	r14
     410:	ff 92       	push	r15
     412:	0f 93       	push	r16
     414:	1f 93       	push	r17
	long temp;
	temp = *px;
     416:	fc 01       	movw	r30, r24
     418:	00 81       	ld	r16, Z
     41a:	11 81       	ldd	r17, Z+1	; 0x01
     41c:	22 81       	ldd	r18, Z+2	; 0x02
     41e:	33 81       	ldd	r19, Z+3	; 0x03
	*px = *py;
     420:	fb 01       	movw	r30, r22
     422:	c0 80       	ld	r12, Z
     424:	d1 80       	ldd	r13, Z+1	; 0x01
     426:	e2 80       	ldd	r14, Z+2	; 0x02
     428:	f3 80       	ldd	r15, Z+3	; 0x03
     42a:	fc 01       	movw	r30, r24
     42c:	c0 82       	st	Z, r12
     42e:	d1 82       	std	Z+1, r13	; 0x01
     430:	e2 82       	std	Z+2, r14	; 0x02
     432:	f3 82       	std	Z+3, r15	; 0x03
	*py = temp;
     434:	fb 01       	movw	r30, r22
     436:	00 83       	st	Z, r16
     438:	11 83       	std	Z+1, r17	; 0x01
     43a:	22 83       	std	Z+2, r18	; 0x02
     43c:	33 83       	std	Z+3, r19	; 0x03
}
     43e:	1f 91       	pop	r17
     440:	0f 91       	pop	r16
     442:	ff 90       	pop	r15
     444:	ef 90       	pop	r14
     446:	df 90       	pop	r13
     448:	cf 90       	pop	r12
     44a:	08 95       	ret

0000044c <FUNCcopy>:
// copy: copy 'from' into 'to'; assume to is big enough
void FUNCcopy(char to[], char from[])
{
	int i;
	i = 0;
	while ((to[i] = from[i]) != '\0')
     44c:	fb 01       	movw	r30, r22
     44e:	20 81       	ld	r18, Z
     450:	fc 01       	movw	r30, r24
     452:	20 83       	st	Z, r18
     454:	22 23       	and	r18, r18
     456:	39 f0       	breq	.+14     	; 0x466 <FUNCcopy+0x1a>
     458:	db 01       	movw	r26, r22
     45a:	11 96       	adiw	r26, 0x01	; 1
     45c:	31 96       	adiw	r30, 0x01	; 1
     45e:	9d 91       	ld	r25, X+
     460:	91 93       	st	Z+, r25
     462:	91 11       	cpse	r25, r1
     464:	fc cf       	rjmp	.-8      	; 0x45e <FUNCcopy+0x12>
     466:	08 95       	ret

00000468 <FUNCsqueeze>:
		++i;
}
// squeeze: delete all c from s
void FUNCsqueeze(char s[], int c)
{
     468:	cf 93       	push	r28
     46a:	df 93       	push	r29
     46c:	ec 01       	movw	r28, r24
	int i, j;
	for (i = j = 0; s[i] != '\0'; i++)
     46e:	98 81       	ld	r25, Y
     470:	99 23       	and	r25, r25
     472:	99 f0       	breq	.+38     	; 0x49a <FUNCsqueeze+0x32>
     474:	fe 01       	movw	r30, r28
     476:	31 96       	adiw	r30, 0x01	; 1
     478:	20 e0       	ldi	r18, 0x00	; 0
     47a:	30 e0       	ldi	r19, 0x00	; 0
		if (s[i] != c)
     47c:	49 2f       	mov	r20, r25
     47e:	50 e0       	ldi	r21, 0x00	; 0
     480:	46 17       	cp	r20, r22
     482:	57 07       	cpc	r21, r23
     484:	31 f0       	breq	.+12     	; 0x492 <FUNCsqueeze+0x2a>
			s[j++] = s[i];
     486:	de 01       	movw	r26, r28
     488:	a2 0f       	add	r26, r18
     48a:	b3 1f       	adc	r27, r19
     48c:	9c 93       	st	X, r25
     48e:	2f 5f       	subi	r18, 0xFF	; 255
     490:	3f 4f       	sbci	r19, 0xFF	; 255
}
// squeeze: delete all c from s
void FUNCsqueeze(char s[], int c)
{
	int i, j;
	for (i = j = 0; s[i] != '\0'; i++)
     492:	91 91       	ld	r25, Z+
     494:	91 11       	cpse	r25, r1
     496:	f2 cf       	rjmp	.-28     	; 0x47c <FUNCsqueeze+0x14>
     498:	02 c0       	rjmp	.+4      	; 0x49e <FUNCsqueeze+0x36>
     49a:	20 e0       	ldi	r18, 0x00	; 0
     49c:	30 e0       	ldi	r19, 0x00	; 0
		if (s[i] != c)
			s[j++] = s[i];
		s[j] = '\0';
     49e:	fe 01       	movw	r30, r28
     4a0:	e2 0f       	add	r30, r18
     4a2:	f3 1f       	adc	r31, r19
     4a4:	10 82       	st	Z, r1
}
     4a6:	df 91       	pop	r29
     4a8:	cf 91       	pop	r28
     4aa:	08 95       	ret

000004ac <FUNCshellsort>:
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
     4ac:	2f 92       	push	r2
     4ae:	3f 92       	push	r3
     4b0:	4f 92       	push	r4
     4b2:	5f 92       	push	r5
     4b4:	6f 92       	push	r6
     4b6:	7f 92       	push	r7
     4b8:	8f 92       	push	r8
     4ba:	9f 92       	push	r9
     4bc:	af 92       	push	r10
     4be:	bf 92       	push	r11
     4c0:	cf 92       	push	r12
     4c2:	df 92       	push	r13
     4c4:	ef 92       	push	r14
     4c6:	ff 92       	push	r15
     4c8:	0f 93       	push	r16
     4ca:	1f 93       	push	r17
     4cc:	cf 93       	push	r28
     4ce:	df 93       	push	r29
     4d0:	00 d0       	rcall	.+0      	; 0x4d2 <FUNCshellsort+0x26>
     4d2:	00 d0       	rcall	.+0      	; 0x4d4 <FUNCshellsort+0x28>
     4d4:	cd b7       	in	r28, 0x3d	; 61
     4d6:	de b7       	in	r29, 0x3e	; 62
     4d8:	2c 01       	movw	r4, r24
     4da:	1b 01       	movw	r2, r22
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
     4dc:	4b 01       	movw	r8, r22
     4de:	77 23       	and	r23, r23
     4e0:	1c f4       	brge	.+6      	; 0x4e8 <FUNCshellsort+0x3c>
     4e2:	2f ef       	ldi	r18, 0xFF	; 255
     4e4:	82 1a       	sub	r8, r18
     4e6:	92 0a       	sbc	r9, r18
     4e8:	95 94       	asr	r9
     4ea:	87 94       	ror	r8
     4ec:	18 14       	cp	r1, r8
     4ee:	19 04       	cpc	r1, r9
     4f0:	0c f4       	brge	.+2      	; 0x4f4 <FUNCshellsort+0x48>
     4f2:	51 c0       	rjmp	.+162    	; 0x596 <FUNCshellsort+0xea>
     4f4:	6a c0       	rjmp	.+212    	; 0x5ca <FUNCshellsort+0x11e>
		for (i = gap; i < n; i++)
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
     4f6:	96 01       	movw	r18, r12
     4f8:	dd 20       	and	r13, r13
     4fa:	9c f1       	brlt	.+102    	; 0x562 <FUNCshellsort+0xb6>
     4fc:	f5 01       	movw	r30, r10
     4fe:	40 81       	ld	r20, Z
     500:	51 81       	ldd	r21, Z+1	; 0x01
     502:	f4 01       	movw	r30, r8
     504:	60 81       	ld	r22, Z
     506:	71 81       	ldd	r23, Z+1	; 0x01
     508:	64 17       	cp	r22, r20
     50a:	75 07       	cpc	r23, r21
     50c:	54 f5       	brge	.+84     	; 0x562 <FUNCshellsort+0xb6>
     50e:	8c 01       	movw	r16, r24
     510:	0a 0d       	add	r16, r10
     512:	1b 1d       	adc	r17, r11
     514:	d4 01       	movw	r26, r8
     516:	bc 82       	std	Y+4, r11	; 0x04
     518:	ab 82       	std	Y+3, r10	; 0x03
     51a:	ba 82       	std	Y+2, r11	; 0x02
     51c:	a9 82       	std	Y+1, r10	; 0x01
				temp = v[j];
				v[j] = v[j+gap];
     51e:	eb 81       	ldd	r30, Y+3	; 0x03
     520:	fc 81       	ldd	r31, Y+4	; 0x04
     522:	71 83       	std	Z+1, r23	; 0x01
     524:	60 83       	st	Z, r22
				v[j+gap] = temp;
     526:	11 96       	adiw	r26, 0x01	; 1
     528:	5c 93       	st	X, r21
     52a:	4e 93       	st	-X, r20
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
		for (i = gap; i < n; i++)
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
     52c:	2e 19       	sub	r18, r14
     52e:	3f 09       	sbc	r19, r15
     530:	c2 f0       	brmi	.+48     	; 0x562 <FUNCshellsort+0xb6>
     532:	f8 01       	movw	r30, r16
     534:	40 81       	ld	r20, Z
     536:	51 81       	ldd	r21, Z+1	; 0x01
     538:	e9 81       	ldd	r30, Y+1	; 0x01
     53a:	fa 81       	ldd	r31, Y+2	; 0x02
     53c:	60 81       	ld	r22, Z
     53e:	71 81       	ldd	r23, Z+1	; 0x01
     540:	08 0f       	add	r16, r24
     542:	19 1f       	adc	r17, r25
     544:	e8 0f       	add	r30, r24
     546:	f9 1f       	adc	r31, r25
     548:	fa 83       	std	Y+2, r31	; 0x02
     54a:	e9 83       	std	Y+1, r30	; 0x01
     54c:	eb 81       	ldd	r30, Y+3	; 0x03
     54e:	fc 81       	ldd	r31, Y+4	; 0x04
     550:	e8 0f       	add	r30, r24
     552:	f9 1f       	adc	r31, r25
     554:	fc 83       	std	Y+4, r31	; 0x04
     556:	eb 83       	std	Y+3, r30	; 0x03
     558:	a8 0f       	add	r26, r24
     55a:	b9 1f       	adc	r27, r25
     55c:	64 17       	cp	r22, r20
     55e:	75 07       	cpc	r23, r21
     560:	f4 f2       	brlt	.-68     	; 0x51e <FUNCshellsort+0x72>
     562:	ff ef       	ldi	r31, 0xFF	; 255
     564:	cf 1a       	sub	r12, r31
     566:	df 0a       	sbc	r13, r31
     568:	22 e0       	ldi	r18, 0x02	; 2
     56a:	a2 0e       	add	r10, r18
     56c:	b1 1c       	adc	r11, r1
     56e:	e2 e0       	ldi	r30, 0x02	; 2
     570:	8e 0e       	add	r8, r30
     572:	91 1c       	adc	r9, r1
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
		for (i = gap; i < n; i++)
     574:	c6 14       	cp	r12, r6
     576:	d7 04       	cpc	r13, r7
     578:	09 f0       	breq	.+2      	; 0x57c <FUNCshellsort+0xd0>
     57a:	bd cf       	rjmp	.-134    	; 0x4f6 <FUNCshellsort+0x4a>
}
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
     57c:	47 01       	movw	r8, r14
     57e:	ff 20       	and	r15, r15
     580:	1c f4       	brge	.+6      	; 0x588 <FUNCshellsort+0xdc>
     582:	ff ef       	ldi	r31, 0xFF	; 255
     584:	8f 1a       	sub	r8, r31
     586:	9f 0a       	sbc	r9, r31
     588:	95 94       	asr	r9
     58a:	87 94       	ror	r8
     58c:	18 14       	cp	r1, r8
     58e:	19 04       	cpc	r1, r9
     590:	e4 f4       	brge	.+56     	; 0x5ca <FUNCshellsort+0x11e>
     592:	74 01       	movw	r14, r8
     594:	01 c0       	rjmp	.+2      	; 0x598 <FUNCshellsort+0xec>
     596:	74 01       	movw	r14, r8
		for (i = gap; i < n; i++)
     598:	82 14       	cp	r8, r2
     59a:	93 04       	cpc	r9, r3
     59c:	7c f7       	brge	.-34     	; 0x57c <FUNCshellsort+0xd0>
     59e:	64 01       	movw	r12, r8
     5a0:	ce 18       	sub	r12, r14
     5a2:	df 08       	sbc	r13, r15
     5a4:	56 01       	movw	r10, r12
     5a6:	aa 0c       	add	r10, r10
     5a8:	bb 1c       	adc	r11, r11
     5aa:	a4 0c       	add	r10, r4
     5ac:	b5 1c       	adc	r11, r5
     5ae:	88 0c       	add	r8, r8
     5b0:	99 1c       	adc	r9, r9
     5b2:	84 0c       	add	r8, r4
     5b4:	95 1c       	adc	r9, r5
     5b6:	31 01       	movw	r6, r2
     5b8:	6e 18       	sub	r6, r14
     5ba:	7f 08       	sbc	r7, r15
     5bc:	c7 01       	movw	r24, r14
     5be:	88 0f       	add	r24, r24
     5c0:	99 1f       	adc	r25, r25
     5c2:	91 95       	neg	r25
     5c4:	81 95       	neg	r24
     5c6:	91 09       	sbc	r25, r1
     5c8:	96 cf       	rjmp	.-212    	; 0x4f6 <FUNCshellsort+0x4a>
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
				temp = v[j];
				v[j] = v[j+gap];
				v[j+gap] = temp;
			}
}
     5ca:	0f 90       	pop	r0
     5cc:	0f 90       	pop	r0
     5ce:	0f 90       	pop	r0
     5d0:	0f 90       	pop	r0
     5d2:	df 91       	pop	r29
     5d4:	cf 91       	pop	r28
     5d6:	1f 91       	pop	r17
     5d8:	0f 91       	pop	r16
     5da:	ff 90       	pop	r15
     5dc:	ef 90       	pop	r14
     5de:	df 90       	pop	r13
     5e0:	cf 90       	pop	r12
     5e2:	bf 90       	pop	r11
     5e4:	af 90       	pop	r10
     5e6:	9f 90       	pop	r9
     5e8:	8f 90       	pop	r8
     5ea:	7f 90       	pop	r7
     5ec:	6f 90       	pop	r6
     5ee:	5f 90       	pop	r5
     5f0:	4f 90       	pop	r4
     5f2:	3f 90       	pop	r3
     5f4:	2f 90       	pop	r2
     5f6:	08 95       	ret

000005f8 <FUNCpmax>:
	if(a1 > a2){
		biggest = a1;
	}else{
		biggest = a2;
	}
	return biggest;
     5f8:	86 17       	cp	r24, r22
     5fa:	97 07       	cpc	r25, r23
     5fc:	0c f4       	brge	.+2      	; 0x600 <FUNCpmax+0x8>
     5fe:	cb 01       	movw	r24, r22
}
     600:	08 95       	ret

00000602 <FUNCgcd>:
// common divisor
int FUNCgcd (int u, int v)
{
     602:	9b 01       	movw	r18, r22
	int temp;
	while ( v != 0 ) {
     604:	67 2b       	or	r22, r23
     606:	11 f4       	brne	.+4      	; 0x60c <FUNCgcd+0xa>
     608:	08 95       	ret
		temp = u % v;
		u = v;
		v = temp;
     60a:	9a 01       	movw	r18, r20
// common divisor
int FUNCgcd (int u, int v)
{
	int temp;
	while ( v != 0 ) {
		temp = u % v;
     60c:	b9 01       	movw	r22, r18
     60e:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <__divmodhi4>
     612:	ac 01       	movw	r20, r24
     614:	82 2f       	mov	r24, r18
     616:	93 2f       	mov	r25, r19
}
// common divisor
int FUNCgcd (int u, int v)
{
	int temp;
	while ( v != 0 ) {
     618:	41 15       	cp	r20, r1
     61a:	51 05       	cpc	r21, r1
     61c:	b1 f7       	brne	.-20     	; 0x60a <FUNCgcd+0x8>
		temp = u % v;
		u = v;
		v = temp;
	}
	return u;
}
     61e:	08 95       	ret

00000620 <FUNCstrToInt>:
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
     620:	fc 01       	movw	r30, r24
	int i, intValue, result = 0;
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
     622:	90 81       	ld	r25, Z
     624:	80 ed       	ldi	r24, 0xD0	; 208
     626:	89 0f       	add	r24, r25
     628:	8a 30       	cpi	r24, 0x0A	; 10
     62a:	d0 f4       	brcc	.+52     	; 0x660 <FUNCstrToInt+0x40>
     62c:	31 96       	adiw	r30, 0x01	; 1
     62e:	20 e0       	ldi	r18, 0x00	; 0
     630:	30 e0       	ldi	r19, 0x00	; 0
		intValue = string[i] - '0';
		result = result * 10 + intValue;
     632:	a9 01       	movw	r20, r18
     634:	44 0f       	add	r20, r20
     636:	55 1f       	adc	r21, r21
     638:	22 0f       	add	r18, r18
     63a:	33 1f       	adc	r19, r19
     63c:	22 0f       	add	r18, r18
     63e:	33 1f       	adc	r19, r19
     640:	22 0f       	add	r18, r18
     642:	33 1f       	adc	r19, r19
     644:	42 0f       	add	r20, r18
     646:	53 1f       	adc	r21, r19
     648:	29 2f       	mov	r18, r25
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	20 53       	subi	r18, 0x30	; 48
     64e:	31 09       	sbc	r19, r1
     650:	24 0f       	add	r18, r20
     652:	35 1f       	adc	r19, r21
}
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
	int i, intValue, result = 0;
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
     654:	91 91       	ld	r25, Z+
     656:	80 ed       	ldi	r24, 0xD0	; 208
     658:	89 0f       	add	r24, r25
     65a:	8a 30       	cpi	r24, 0x0A	; 10
     65c:	50 f3       	brcs	.-44     	; 0x632 <FUNCstrToInt+0x12>
     65e:	02 c0       	rjmp	.+4      	; 0x664 <FUNCstrToInt+0x44>
	return u;
}
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
	int i, intValue, result = 0;
     660:	20 e0       	ldi	r18, 0x00	; 0
     662:	30 e0       	ldi	r19, 0x00	; 0
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
		intValue = string[i] - '0';
		result = result * 10 + intValue;
	}
	return result;
}
     664:	c9 01       	movw	r24, r18
     666:	08 95       	ret

00000668 <FUNCfilter>:
uint8_t FUNCfilter(uint8_t mask, uint8_t data)
{
	uint8_t Z;
	Z=mask & data;
	return Z;
}
     668:	86 23       	and	r24, r22
     66a:	08 95       	ret

0000066c <FUNCticks>:
// ticks
unsigned int FUNCticks(unsigned int num)
{
	unsigned int count;
	for(count=0;count<num;count++)
     66c:	00 97       	sbiw	r24, 0x00	; 0
     66e:	39 f0       	breq	.+14     	; 0x67e <FUNCticks+0x12>
     670:	20 e0       	ldi	r18, 0x00	; 0
     672:	30 e0       	ldi	r19, 0x00	; 0
     674:	2f 5f       	subi	r18, 0xFF	; 255
     676:	3f 4f       	sbci	r19, 0xFF	; 255
     678:	82 17       	cp	r24, r18
     67a:	93 07       	cpc	r25, r19
     67c:	d9 f7       	brne	.-10     	; 0x674 <FUNCticks+0x8>
		;
	return count;
}
     67e:	08 95       	ret

00000680 <FUNCtwocomptoint8bit>:
// Two's Complement function
int FUNCtwocomptoint8bit(int twoscomp){
  
  //Let's see if the byte is negative
  if (twoscomp & 0B10000000){
     680:	87 ff       	sbrs	r24, 7
     682:	08 c0       	rjmp	.+16     	; 0x694 <FUNCtwocomptoint8bit+0x14>
    //Invert
    twoscomp = ~twoscomp + 1;
     684:	91 95       	neg	r25
     686:	81 95       	neg	r24
     688:	91 09       	sbc	r25, r1
	twoscomp = (twoscomp & 0B11111111);
    //Cast as int and multiply by negative one
    int value = (int)(twoscomp)*(-1);
     68a:	99 27       	eor	r25, r25
     68c:	91 95       	neg	r25
     68e:	81 95       	neg	r24
     690:	91 09       	sbc	r25, r1
    return value;
     692:	08 95       	ret
    //Byte is non-negative, therefore convert to decimal and display
    //Make sure we are never over 1279
    twoscomp = (twoscomp & 0B01111111);
    //Cast as int and return
    int value = (int)(twoscomp);
    return value;
     694:	8f 77       	andi	r24, 0x7F	; 127
     696:	99 27       	eor	r25, r25
  }
}
     698:	08 95       	ret

0000069a <FUNCtwocomptoint10bit>:
// Two's Complement function, shifts 10 bit binary to signed integers (-512 to 512)
int FUNCtwocomptoint10bit(int twoscomp){
	
  //Let's see if the byte is negative
  if (twoscomp & 0x200){
     69a:	91 ff       	sbrs	r25, 1
     69c:	08 c0       	rjmp	.+16     	; 0x6ae <FUNCtwocomptoint10bit+0x14>
    //Invert
    twoscomp = ~twoscomp + 1;
     69e:	91 95       	neg	r25
     6a0:	81 95       	neg	r24
     6a2:	91 09       	sbc	r25, r1
    twoscomp = (twoscomp & 0x3FF);
    //Cast as int and multiply by negative one
    int value = (int)(twoscomp)*(-1);
     6a4:	93 70       	andi	r25, 0x03	; 3
     6a6:	91 95       	neg	r25
     6a8:	81 95       	neg	r24
     6aa:	91 09       	sbc	r25, r1
    return value;
     6ac:	08 95       	ret
    //Byte is non-negative, therefore convert to decimal and display
    twoscomp = (twoscomp & 0x1FF);
    //Cast as int and return
    //Serial.println(twoscomp);
    int value = (int)(twoscomp);
    return value;
     6ae:	91 70       	andi	r25, 0x01	; 1
  }
}
     6b0:	08 95       	ret

000006b2 <FUNCtwocomptointnbit>:
// Two's Complement function, nbits
int FUNCtwocomptointnbit(int twoscomp, uint8_t nbits){
  unsigned int signmask;
  unsigned int mask;
  signmask = (1<<(nbits-1));
     6b2:	61 50       	subi	r22, 0x01	; 1
     6b4:	21 e0       	ldi	r18, 0x01	; 1
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	02 c0       	rjmp	.+4      	; 0x6be <FUNCtwocomptointnbit+0xc>
     6ba:	22 0f       	add	r18, r18
     6bc:	33 1f       	adc	r19, r19
     6be:	6a 95       	dec	r22
     6c0:	e2 f7       	brpl	.-8      	; 0x6ba <FUNCtwocomptointnbit+0x8>
  mask=signmask-1;
     6c2:	a9 01       	movw	r20, r18
     6c4:	41 50       	subi	r20, 0x01	; 1
     6c6:	51 09       	sbc	r21, r1
  //Let's see if the number is negative
  if (twoscomp & signmask){
     6c8:	b9 01       	movw	r22, r18
     6ca:	68 23       	and	r22, r24
     6cc:	79 23       	and	r23, r25
     6ce:	67 2b       	or	r22, r23
     6d0:	29 f0       	breq	.+10     	; 0x6dc <FUNCtwocomptointnbit+0x2a>
	twoscomp &= mask;
    twoscomp -= signmask;
     6d2:	84 23       	and	r24, r20
     6d4:	95 23       	and	r25, r21
     6d6:	82 1b       	sub	r24, r18
     6d8:	93 0b       	sbc	r25, r19
     6da:	08 95       	ret
  }else{
	  twoscomp &= mask;
     6dc:	84 23       	and	r24, r20
     6de:	95 23       	and	r25, r21
  }
  return twoscomp;
}
     6e0:	08 95       	ret

000006e2 <FUNCdec2bcd>:
// Convert Decimal to Binary Coded Decimal (BCD)
char FUNCdec2bcd(char num)
{
	return ((num/10 * 16) + (num % 10));
     6e2:	9d ec       	ldi	r25, 0xCD	; 205
     6e4:	89 9f       	mul	r24, r25
     6e6:	91 2d       	mov	r25, r1
     6e8:	11 24       	eor	r1, r1
     6ea:	96 95       	lsr	r25
     6ec:	96 95       	lsr	r25
     6ee:	96 95       	lsr	r25
     6f0:	39 2f       	mov	r19, r25
     6f2:	33 0f       	add	r19, r19
     6f4:	23 2f       	mov	r18, r19
     6f6:	22 0f       	add	r18, r18
     6f8:	22 0f       	add	r18, r18
     6fa:	23 0f       	add	r18, r19
     6fc:	82 1b       	sub	r24, r18
}
     6fe:	20 e1       	ldi	r18, 0x10	; 16
     700:	92 9f       	mul	r25, r18
     702:	80 0d       	add	r24, r0
     704:	11 24       	eor	r1, r1
     706:	08 95       	ret

00000708 <FUNCbcd2dec>:
// Convert Binary Coded Decimal (BCD) to Decimal
char FUNCbcd2dec(char num)
{
	return ((num/16 * 10) + (num % 16));
     708:	98 2f       	mov	r25, r24
     70a:	92 95       	swap	r25
     70c:	9f 70       	andi	r25, 0x0F	; 15
     70e:	99 0f       	add	r25, r25
     710:	29 2f       	mov	r18, r25
     712:	22 0f       	add	r18, r18
     714:	22 0f       	add	r18, r18
     716:	92 0f       	add	r25, r18
     718:	8f 70       	andi	r24, 0x0F	; 15
}
     71a:	89 0f       	add	r24, r25
     71c:	08 95       	ret

0000071e <FUNCresizestr>:
char* FUNCresizestr(char *string, int size)
{
     71e:	fc 01       	movw	r30, r24
	int i;
	FUNCstr[size]='\0';
     720:	db 01       	movw	r26, r22
     722:	ab 53       	subi	r26, 0x3B	; 59
     724:	be 4f       	sbci	r27, 0xFE	; 254
     726:	1c 92       	st	X, r1
	for(i=0;i<size;i++){
     728:	16 16       	cp	r1, r22
     72a:	17 06       	cpc	r1, r23
     72c:	14 f5       	brge	.+68     	; 0x772 <FUNCresizestr+0x54>
		if(*(string+i)=='\0'){
     72e:	90 81       	ld	r25, Z
     730:	91 11       	cpse	r25, r1
     732:	0c c0       	rjmp	.+24     	; 0x74c <FUNCresizestr+0x2e>
     734:	17 c0       	rjmp	.+46     	; 0x764 <FUNCresizestr+0x46>
     736:	91 91       	ld	r25, Z+
     738:	91 11       	cpse	r25, r1
     73a:	0d c0       	rjmp	.+26     	; 0x756 <FUNCresizestr+0x38>
     73c:	15 c0       	rjmp	.+42     	; 0x768 <FUNCresizestr+0x4a>
			for(;i<size;i++){
				FUNCstr[i]=' ';
     73e:	81 93       	st	Z+, r24
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
		if(*(string+i)=='\0'){
			for(;i<size;i++){
     740:	2f 5f       	subi	r18, 0xFF	; 255
     742:	3f 4f       	sbci	r19, 0xFF	; 255
     744:	26 17       	cp	r18, r22
     746:	37 07       	cpc	r19, r23
     748:	d4 f3       	brlt	.-12     	; 0x73e <FUNCresizestr+0x20>
     74a:	13 c0       	rjmp	.+38     	; 0x772 <FUNCresizestr+0x54>
     74c:	a5 ec       	ldi	r26, 0xC5	; 197
     74e:	b1 e0       	ldi	r27, 0x01	; 1
     750:	31 96       	adiw	r30, 0x01	; 1
char* FUNCresizestr(char *string, int size)
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
		if(*(string+i)=='\0'){
     752:	20 e0       	ldi	r18, 0x00	; 0
     754:	30 e0       	ldi	r19, 0x00	; 0
			for(;i<size;i++){
				FUNCstr[i]=' ';
			}
			break;
		}
		FUNCstr[i]=*(string+i);
     756:	9d 93       	st	X+, r25
}
char* FUNCresizestr(char *string, int size)
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
     758:	2f 5f       	subi	r18, 0xFF	; 255
     75a:	3f 4f       	sbci	r19, 0xFF	; 255
     75c:	62 17       	cp	r22, r18
     75e:	73 07       	cpc	r23, r19
     760:	51 f7       	brne	.-44     	; 0x736 <FUNCresizestr+0x18>
     762:	07 c0       	rjmp	.+14     	; 0x772 <FUNCresizestr+0x54>
     764:	20 e0       	ldi	r18, 0x00	; 0
     766:	30 e0       	ldi	r19, 0x00	; 0
     768:	f9 01       	movw	r30, r18
     76a:	eb 53       	subi	r30, 0x3B	; 59
     76c:	fe 4f       	sbci	r31, 0xFE	; 254
		if(*(string+i)=='\0'){
			for(;i<size;i++){
				FUNCstr[i]=' ';
     76e:	80 e2       	ldi	r24, 0x20	; 32
     770:	e6 cf       	rjmp	.-52     	; 0x73e <FUNCresizestr+0x20>
			break;
		}
		FUNCstr[i]=*(string+i);
	}
	return FUNCstr;
}
     772:	85 ec       	ldi	r24, 0xC5	; 197
     774:	91 e0       	ldi	r25, 0x01	; 1
     776:	08 95       	ret

00000778 <FUNCtrimmer>:
long FUNCtrimmer(long x, long in_min, long in_max, long out_min, long out_max)
/*
	same as arduino map function.
*/
{
     778:	4f 92       	push	r4
     77a:	5f 92       	push	r5
     77c:	6f 92       	push	r6
     77e:	7f 92       	push	r7
     780:	af 92       	push	r10
     782:	bf 92       	push	r11
     784:	cf 92       	push	r12
     786:	df 92       	push	r13
     788:	ef 92       	push	r14
     78a:	ff 92       	push	r15
     78c:	0f 93       	push	r16
     78e:	1f 93       	push	r17
     790:	cf 93       	push	r28
     792:	df 93       	push	r29
     794:	cd b7       	in	r28, 0x3d	; 61
     796:	de b7       	in	r29, 0x3e	; 62
     798:	29 01       	movw	r4, r18
     79a:	3a 01       	movw	r6, r20
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     79c:	9b 01       	movw	r18, r22
     79e:	ac 01       	movw	r20, r24
     7a0:	24 19       	sub	r18, r4
     7a2:	35 09       	sbc	r19, r5
     7a4:	46 09       	sbc	r20, r6
     7a6:	57 09       	sbc	r21, r7
     7a8:	89 89       	ldd	r24, Y+17	; 0x11
     7aa:	9a 89       	ldd	r25, Y+18	; 0x12
     7ac:	ab 89       	ldd	r26, Y+19	; 0x13
     7ae:	bc 89       	ldd	r27, Y+20	; 0x14
     7b0:	bc 01       	movw	r22, r24
     7b2:	cd 01       	movw	r24, r26
     7b4:	6a 19       	sub	r22, r10
     7b6:	7b 09       	sbc	r23, r11
     7b8:	8c 09       	sbc	r24, r12
     7ba:	9d 09       	sbc	r25, r13
     7bc:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <__mulsi3>
     7c0:	a8 01       	movw	r20, r16
     7c2:	97 01       	movw	r18, r14
     7c4:	24 19       	sub	r18, r4
     7c6:	35 09       	sbc	r19, r5
     7c8:	46 09       	sbc	r20, r6
     7ca:	57 09       	sbc	r21, r7
     7cc:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <__divmodsi4>
     7d0:	ca 01       	movw	r24, r20
     7d2:	b9 01       	movw	r22, r18
     7d4:	6a 0d       	add	r22, r10
     7d6:	7b 1d       	adc	r23, r11
     7d8:	8c 1d       	adc	r24, r12
     7da:	9d 1d       	adc	r25, r13
}
     7dc:	df 91       	pop	r29
     7de:	cf 91       	pop	r28
     7e0:	1f 91       	pop	r17
     7e2:	0f 91       	pop	r16
     7e4:	ff 90       	pop	r15
     7e6:	ef 90       	pop	r14
     7e8:	df 90       	pop	r13
     7ea:	cf 90       	pop	r12
     7ec:	bf 90       	pop	r11
     7ee:	af 90       	pop	r10
     7f0:	7f 90       	pop	r7
     7f2:	6f 90       	pop	r6
     7f4:	5f 90       	pop	r5
     7f6:	4f 90       	pop	r4
     7f8:	08 95       	ret

000007fa <Pwr>:
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
     7fa:	70 e0       	ldi	r23, 0x00	; 0
     7fc:	61 15       	cp	r22, r1
     7fe:	71 05       	cpc	r23, r1
     800:	99 f0       	breq	.+38     	; 0x828 <Pwr+0x2e>
     802:	41 e0       	ldi	r20, 0x01	; 1
     804:	50 e0       	ldi	r21, 0x00	; 0
     806:	21 e0       	ldi	r18, 0x01	; 1
     808:	30 e0       	ldi	r19, 0x00	; 0
        p = p * bs;
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	fa 01       	movw	r30, r20
     80e:	e8 9f       	mul	r30, r24
     810:	a0 01       	movw	r20, r0
     812:	e9 9f       	mul	r30, r25
     814:	50 0d       	add	r21, r0
     816:	f8 9f       	mul	r31, r24
     818:	50 0d       	add	r21, r0
     81a:	11 24       	eor	r1, r1
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
     81c:	2f 5f       	subi	r18, 0xFF	; 255
     81e:	3f 4f       	sbci	r19, 0xFF	; 255
     820:	62 17       	cp	r22, r18
     822:	73 07       	cpc	r23, r19
     824:	98 f7       	brcc	.-26     	; 0x80c <Pwr+0x12>
     826:	02 c0       	rjmp	.+4      	; 0x82c <Pwr+0x32>
}
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
     828:	41 e0       	ldi	r20, 0x01	; 1
     82a:	50 e0       	ldi	r21, 0x00	; 0
    for (i = 1; i <= n; ++i)
        p = p * bs;
    return p;
}
     82c:	ca 01       	movw	r24, r20
     82e:	08 95       	ret

00000830 <StringLength>:
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
	while ( string[count] != '\0' )
     830:	fc 01       	movw	r30, r24
     832:	20 81       	ld	r18, Z
     834:	22 23       	and	r18, r18
     836:	41 f0       	breq	.+16     	; 0x848 <StringLength+0x18>
     838:	31 96       	adiw	r30, 0x01	; 1
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	90 e0       	ldi	r25, 0x00	; 0
		++count;
     83e:	01 96       	adiw	r24, 0x01	; 1
}
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
	while ( string[count] != '\0' )
     840:	21 91       	ld	r18, Z+
     842:	21 11       	cpse	r18, r1
     844:	fc cf       	rjmp	.-8      	; 0x83e <StringLength+0xe>
     846:	08 95       	ret
    return p;
}
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
     848:	80 e0       	ldi	r24, 0x00	; 0
     84a:	90 e0       	ldi	r25, 0x00	; 0
	while ( string[count] != '\0' )
		++count;
	return count;
}
     84c:	08 95       	ret

0000084e <FUNCtrim>:
	Reverse(FUNCstr);
	return FUNCstr;
}
// trim: remove trailing blanks, tabs, newlines
int FUNCtrim(char s[])
{
     84e:	cf 93       	push	r28
     850:	df 93       	push	r29
     852:	ec 01       	movw	r28, r24
	int n;
	for (n = StringLength(s)-1; n >= 0; n--)
     854:	ed df       	rcall	.-38     	; 0x830 <StringLength>
     856:	9c 01       	movw	r18, r24
     858:	21 50       	subi	r18, 0x01	; 1
     85a:	31 09       	sbc	r19, r1
     85c:	62 f0       	brmi	.+24     	; 0x876 <FUNCtrim+0x28>
     85e:	fe 01       	movw	r30, r28
     860:	e8 0f       	add	r30, r24
     862:	f9 1f       	adc	r31, r25
		if (s[n] != ' ' && s[n] != '\t' && s[n] != '\n')
     864:	92 91       	ld	r25, -Z
     866:	90 32       	cpi	r25, 0x20	; 32
     868:	19 f0       	breq	.+6      	; 0x870 <FUNCtrim+0x22>
     86a:	99 50       	subi	r25, 0x09	; 9
     86c:	92 30       	cpi	r25, 0x02	; 2
     86e:	18 f4       	brcc	.+6      	; 0x876 <FUNCtrim+0x28>
}
// trim: remove trailing blanks, tabs, newlines
int FUNCtrim(char s[])
{
	int n;
	for (n = StringLength(s)-1; n >= 0; n--)
     870:	21 50       	subi	r18, 0x01	; 1
     872:	31 09       	sbc	r19, r1
     874:	b8 f7       	brcc	.-18     	; 0x864 <FUNCtrim+0x16>
		if (s[n] != ' ' && s[n] != '\t' && s[n] != '\n')
			break;
	s[n+1] = '\0';
     876:	c2 0f       	add	r28, r18
     878:	d3 1f       	adc	r29, r19
     87a:	19 82       	std	Y+1, r1	; 0x01
	return n;
}
     87c:	c9 01       	movw	r24, r18
     87e:	df 91       	pop	r29
     880:	cf 91       	pop	r28
     882:	08 95       	ret

00000884 <Reverse>:
		++count;
	return count;
}
// reverse: reverse string s in place
void Reverse(char s[])
{
     884:	cf 93       	push	r28
     886:	df 93       	push	r29
     888:	ec 01       	movw	r28, r24
	int c, i, j;
	for (i = 0, j = StringLength(s)-1; i < j; i++, j--){
     88a:	d2 df       	rcall	.-92     	; 0x830 <StringLength>
     88c:	9c 01       	movw	r18, r24
     88e:	21 50       	subi	r18, 0x01	; 1
     890:	31 09       	sbc	r19, r1
     892:	12 16       	cp	r1, r18
     894:	13 06       	cpc	r1, r19
     896:	84 f4       	brge	.+32     	; 0x8b8 <Reverse+0x34>
     898:	de 01       	movw	r26, r28
     89a:	a8 0f       	add	r26, r24
     89c:	b9 1f       	adc	r27, r25
     89e:	fe 01       	movw	r30, r28
     8a0:	80 e0       	ldi	r24, 0x00	; 0
     8a2:	90 e0       	ldi	r25, 0x00	; 0
		c = s[i];
     8a4:	40 81       	ld	r20, Z
		s[i] = s[j];
     8a6:	5e 91       	ld	r21, -X
     8a8:	51 93       	st	Z+, r21
		s[j] = c;
     8aa:	4c 93       	st	X, r20
}
// reverse: reverse string s in place
void Reverse(char s[])
{
	int c, i, j;
	for (i = 0, j = StringLength(s)-1; i < j; i++, j--){
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	21 50       	subi	r18, 0x01	; 1
     8b0:	31 09       	sbc	r19, r1
     8b2:	82 17       	cp	r24, r18
     8b4:	93 07       	cpc	r25, r19
     8b6:	b4 f3       	brlt	.-20     	; 0x8a4 <Reverse+0x20>
		c = s[i];
		s[i] = s[j];
		s[j] = c;
	}
}
     8b8:	df 91       	pop	r29
     8ba:	cf 91       	pop	r28
     8bc:	08 95       	ret

000008be <FUNCi32toa>:
				v[j+gap] = temp;
			}
}
// i32toa: convert n to characters in s
char* FUNCi32toa(int32_t n)
{
     8be:	8f 92       	push	r8
     8c0:	9f 92       	push	r9
     8c2:	af 92       	push	r10
     8c4:	bf 92       	push	r11
     8c6:	cf 92       	push	r12
     8c8:	df 92       	push	r13
     8ca:	ef 92       	push	r14
     8cc:	ff 92       	push	r15
     8ce:	0f 93       	push	r16
     8d0:	1f 93       	push	r17
     8d2:	cf 93       	push	r28
     8d4:	df 93       	push	r29
     8d6:	6b 01       	movw	r12, r22
     8d8:	7c 01       	movw	r14, r24
     8da:	dc 01       	movw	r26, r24
     8dc:	cb 01       	movw	r24, r22
     8de:	ff 20       	and	r15, r15
     8e0:	3c f4       	brge	.+14     	; 0x8f0 <FUNCi32toa+0x32>
     8e2:	88 27       	eor	r24, r24
     8e4:	99 27       	eor	r25, r25
     8e6:	dc 01       	movw	r26, r24
     8e8:	8c 19       	sub	r24, r12
     8ea:	9d 09       	sbc	r25, r13
     8ec:	ae 09       	sbc	r26, r14
     8ee:	bf 09       	sbc	r27, r15
     8f0:	bc 01       	movw	r22, r24
     8f2:	cd 01       	movw	r24, r26
     8f4:	10 e0       	ldi	r17, 0x00	; 0
	int32_t sign;
	if ((sign = n) < 0) // record sign
	n = -n; // make n positive
	i = 0;
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
     8f6:	0f 2e       	mov	r0, r31
     8f8:	fa e0       	ldi	r31, 0x0A	; 10
     8fa:	8f 2e       	mov	r8, r31
     8fc:	91 2c       	mov	r9, r1
     8fe:	a1 2c       	mov	r10, r1
     900:	b1 2c       	mov	r11, r1
     902:	f0 2d       	mov	r31, r0
     904:	01 c0       	rjmp	.+2      	; 0x908 <FUNCi32toa+0x4a>
     906:	10 2f       	mov	r17, r16
     908:	01 e0       	ldi	r16, 0x01	; 1
     90a:	01 0f       	add	r16, r17
     90c:	c1 2f       	mov	r28, r17
     90e:	d0 e0       	ldi	r29, 0x00	; 0
     910:	cb 53       	subi	r28, 0x3B	; 59
     912:	de 4f       	sbci	r29, 0xFE	; 254
     914:	a5 01       	movw	r20, r10
     916:	94 01       	movw	r18, r8
     918:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <__divmodsi4>
     91c:	60 5d       	subi	r22, 0xD0	; 208
     91e:	68 83       	st	Y, r22
	}while ((n /= 10) > 0); // delete it
     920:	62 2f       	mov	r22, r18
     922:	73 2f       	mov	r23, r19
     924:	84 2f       	mov	r24, r20
     926:	95 2f       	mov	r25, r21
     928:	16 16       	cp	r1, r22
     92a:	17 06       	cpc	r1, r23
     92c:	18 06       	cpc	r1, r24
     92e:	19 06       	cpc	r1, r25
     930:	54 f3       	brlt	.-44     	; 0x906 <FUNCi32toa+0x48>
	if (sign < 0)
     932:	ff 20       	and	r15, r15
     934:	44 f4       	brge	.+16     	; 0x946 <FUNCi32toa+0x88>
	FUNCstr[i++] = '-';
     936:	e0 2f       	mov	r30, r16
     938:	f0 e0       	ldi	r31, 0x00	; 0
     93a:	eb 53       	subi	r30, 0x3B	; 59
     93c:	fe 4f       	sbci	r31, 0xFE	; 254
     93e:	8d e2       	ldi	r24, 0x2D	; 45
     940:	80 83       	st	Z, r24
     942:	02 e0       	ldi	r16, 0x02	; 2
     944:	01 0f       	add	r16, r17
	FUNCstr[i] = '\0';
     946:	e0 2f       	mov	r30, r16
     948:	f0 e0       	ldi	r31, 0x00	; 0
     94a:	eb 53       	subi	r30, 0x3B	; 59
     94c:	fe 4f       	sbci	r31, 0xFE	; 254
     94e:	10 82       	st	Z, r1
	Reverse(FUNCstr);
     950:	85 ec       	ldi	r24, 0xC5	; 197
     952:	91 e0       	ldi	r25, 0x01	; 1
     954:	97 df       	rcall	.-210    	; 0x884 <Reverse>
	return FUNCstr;
}
     956:	85 ec       	ldi	r24, 0xC5	; 197
     958:	91 e0       	ldi	r25, 0x01	; 1
     95a:	df 91       	pop	r29
     95c:	cf 91       	pop	r28
     95e:	1f 91       	pop	r17
     960:	0f 91       	pop	r16
     962:	ff 90       	pop	r15
     964:	ef 90       	pop	r14
     966:	df 90       	pop	r13
     968:	cf 90       	pop	r12
     96a:	bf 90       	pop	r11
     96c:	af 90       	pop	r10
     96e:	9f 90       	pop	r9
     970:	8f 90       	pop	r8
     972:	08 95       	ret

00000974 <FUNCi16toa>:
// i16toa: convert n to characters in s
char* FUNCi16toa(int16_t n)
{
     974:	0f 93       	push	r16
     976:	1f 93       	push	r17
     978:	cf 93       	push	r28
     97a:	df 93       	push	r29
     97c:	ec 01       	movw	r28, r24
     97e:	99 23       	and	r25, r25
     980:	24 f4       	brge	.+8      	; 0x98a <FUNCi16toa+0x16>
     982:	88 27       	eor	r24, r24
     984:	99 27       	eor	r25, r25
     986:	8c 1b       	sub	r24, r28
     988:	9d 0b       	sbc	r25, r29
     98a:	20 e0       	ldi	r18, 0x00	; 0
	int16_t sign;
	if ((sign = n) < 0) // record sign
		n = -n; // make n positive
	i = 0;
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
     98c:	0a e0       	ldi	r16, 0x0A	; 10
     98e:	10 e0       	ldi	r17, 0x00	; 0
     990:	01 c0       	rjmp	.+2      	; 0x994 <FUNCi16toa+0x20>
     992:	23 2f       	mov	r18, r19
     994:	31 e0       	ldi	r19, 0x01	; 1
     996:	32 0f       	add	r19, r18
     998:	e2 2f       	mov	r30, r18
     99a:	f0 e0       	ldi	r31, 0x00	; 0
     99c:	eb 53       	subi	r30, 0x3B	; 59
     99e:	fe 4f       	sbci	r31, 0xFE	; 254
     9a0:	b8 01       	movw	r22, r16
     9a2:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <__divmodhi4>
     9a6:	80 5d       	subi	r24, 0xD0	; 208
     9a8:	80 83       	st	Z, r24
	}while ((n /= 10) > 0); // delete it
     9aa:	86 2f       	mov	r24, r22
     9ac:	97 2f       	mov	r25, r23
     9ae:	18 16       	cp	r1, r24
     9b0:	19 06       	cpc	r1, r25
     9b2:	7c f3       	brlt	.-34     	; 0x992 <FUNCi16toa+0x1e>
	if (sign < 0)
     9b4:	dd 23       	and	r29, r29
     9b6:	44 f4       	brge	.+16     	; 0x9c8 <FUNCi16toa+0x54>
		FUNCstr[i++] = '-';
     9b8:	e3 2f       	mov	r30, r19
     9ba:	f0 e0       	ldi	r31, 0x00	; 0
     9bc:	eb 53       	subi	r30, 0x3B	; 59
     9be:	fe 4f       	sbci	r31, 0xFE	; 254
     9c0:	8d e2       	ldi	r24, 0x2D	; 45
     9c2:	80 83       	st	Z, r24
     9c4:	32 e0       	ldi	r19, 0x02	; 2
     9c6:	32 0f       	add	r19, r18
	FUNCstr[i] = '\0';
     9c8:	e3 2f       	mov	r30, r19
     9ca:	f0 e0       	ldi	r31, 0x00	; 0
     9cc:	eb 53       	subi	r30, 0x3B	; 59
     9ce:	fe 4f       	sbci	r31, 0xFE	; 254
     9d0:	10 82       	st	Z, r1
	Reverse(FUNCstr);
     9d2:	85 ec       	ldi	r24, 0xC5	; 197
     9d4:	91 e0       	ldi	r25, 0x01	; 1
     9d6:	56 df       	rcall	.-340    	; 0x884 <Reverse>
	return FUNCstr;
}
     9d8:	85 ec       	ldi	r24, 0xC5	; 197
     9da:	91 e0       	ldi	r25, 0x01	; 1
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	1f 91       	pop	r17
     9e2:	0f 91       	pop	r16
     9e4:	08 95       	ret

000009e6 <FUNCui16toa>:
// ui16toa: convert n to characters in s
char* FUNCui16toa(uint16_t n)
{
     9e6:	cf 93       	push	r28
     9e8:	ac 01       	movw	r20, r24
	uint8_t i;
	i = 0;
     9ea:	e0 e0       	ldi	r30, 0x00	; 0
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
     9ec:	c1 e0       	ldi	r28, 0x01	; 1
     9ee:	ce 0f       	add	r28, r30
     9f0:	f0 e0       	ldi	r31, 0x00	; 0
     9f2:	eb 53       	subi	r30, 0x3B	; 59
     9f4:	fe 4f       	sbci	r31, 0xFE	; 254
     9f6:	9a 01       	movw	r18, r20
     9f8:	ad ec       	ldi	r26, 0xCD	; 205
     9fa:	bc ec       	ldi	r27, 0xCC	; 204
     9fc:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__umulhisi3>
     a00:	96 95       	lsr	r25
     a02:	87 95       	ror	r24
     a04:	96 95       	lsr	r25
     a06:	87 95       	ror	r24
     a08:	96 95       	lsr	r25
     a0a:	87 95       	ror	r24
     a0c:	9c 01       	movw	r18, r24
     a0e:	22 0f       	add	r18, r18
     a10:	33 1f       	adc	r19, r19
     a12:	88 0f       	add	r24, r24
     a14:	99 1f       	adc	r25, r25
     a16:	88 0f       	add	r24, r24
     a18:	99 1f       	adc	r25, r25
     a1a:	88 0f       	add	r24, r24
     a1c:	99 1f       	adc	r25, r25
     a1e:	82 0f       	add	r24, r18
     a20:	93 1f       	adc	r25, r19
     a22:	9a 01       	movw	r18, r20
     a24:	28 1b       	sub	r18, r24
     a26:	39 0b       	sbc	r19, r25
     a28:	c9 01       	movw	r24, r18
     a2a:	80 5d       	subi	r24, 0xD0	; 208
     a2c:	80 83       	st	Z, r24
	}while ((n /= 10) > 0); // delete it
     a2e:	9a 01       	movw	r18, r20
     a30:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__umulhisi3>
     a34:	ac 01       	movw	r20, r24
     a36:	56 95       	lsr	r21
     a38:	47 95       	ror	r20
     a3a:	56 95       	lsr	r21
     a3c:	47 95       	ror	r20
     a3e:	56 95       	lsr	r21
     a40:	47 95       	ror	r20
char* FUNCui16toa(uint16_t n)
{
	uint8_t i;
	i = 0;
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
     a42:	ec 2f       	mov	r30, r28
	}while ((n /= 10) > 0); // delete it
     a44:	41 15       	cp	r20, r1
     a46:	51 05       	cpc	r21, r1
     a48:	89 f6       	brne	.-94     	; 0x9ec <FUNCui16toa+0x6>
	FUNCstr[i] = '\0';
     a4a:	ec 2f       	mov	r30, r28
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	eb 53       	subi	r30, 0x3B	; 59
     a50:	fe 4f       	sbci	r31, 0xFE	; 254
     a52:	10 82       	st	Z, r1
	Reverse(FUNCstr);
     a54:	85 ec       	ldi	r24, 0xC5	; 197
     a56:	91 e0       	ldi	r25, 0x01	; 1
     a58:	15 df       	rcall	.-470    	; 0x884 <Reverse>
	return FUNCstr;
}
     a5a:	85 ec       	ldi	r24, 0xC5	; 197
     a5c:	91 e0       	ldi	r25, 0x01	; 1
     a5e:	cf 91       	pop	r28
     a60:	08 95       	ret

00000a62 <FUNCbcd2bin>:
		s[j] = c;
	}
}
unsigned char FUNCbcd2bin(unsigned char val)
{
	return (val & 0x0f) + (val >> 4) * 10;
     a62:	98 2f       	mov	r25, r24
     a64:	92 95       	swap	r25
     a66:	9f 70       	andi	r25, 0x0F	; 15
     a68:	99 0f       	add	r25, r25
     a6a:	29 2f       	mov	r18, r25
     a6c:	22 0f       	add	r18, r18
     a6e:	22 0f       	add	r18, r18
     a70:	92 0f       	add	r25, r18
     a72:	8f 70       	andi	r24, 0x0F	; 15
}
     a74:	89 0f       	add	r24, r25
     a76:	08 95       	ret

00000a78 <FUNCbin2bcd>:
unsigned char FUNCbin2bcd(unsigned val)
{
     a78:	ac 01       	movw	r20, r24
	return ((val / 10) << 4) + val % 10;
     a7a:	9c 01       	movw	r18, r24
     a7c:	ad ec       	ldi	r26, 0xCD	; 205
     a7e:	bc ec       	ldi	r27, 0xCC	; 204
     a80:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__umulhisi3>
     a84:	96 95       	lsr	r25
     a86:	87 95       	ror	r24
     a88:	96 95       	lsr	r25
     a8a:	87 95       	ror	r24
     a8c:	96 95       	lsr	r25
     a8e:	87 95       	ror	r24
     a90:	bc 01       	movw	r22, r24
     a92:	66 0f       	add	r22, r22
     a94:	77 1f       	adc	r23, r23
     a96:	9c 01       	movw	r18, r24
     a98:	22 0f       	add	r18, r18
     a9a:	33 1f       	adc	r19, r19
     a9c:	22 0f       	add	r18, r18
     a9e:	33 1f       	adc	r19, r19
     aa0:	22 0f       	add	r18, r18
     aa2:	33 1f       	adc	r19, r19
     aa4:	26 0f       	add	r18, r22
     aa6:	37 1f       	adc	r19, r23
     aa8:	42 1b       	sub	r20, r18
     aaa:	53 0b       	sbc	r21, r19
}
     aac:	34 2f       	mov	r19, r20
     aae:	20 e1       	ldi	r18, 0x10	; 16
     ab0:	82 9f       	mul	r24, r18
     ab2:	30 0d       	add	r19, r0
     ab4:	11 24       	eor	r1, r1
     ab6:	83 2f       	mov	r24, r19
     ab8:	08 95       	ret

00000aba <FUNCgcd1>:
long FUNCgcd1(long a, long b)
{
     aba:	cf 92       	push	r12
     abc:	df 92       	push	r13
     abe:	ef 92       	push	r14
     ac0:	ff 92       	push	r15
     ac2:	cf 93       	push	r28
     ac4:	df 93       	push	r29
     ac6:	cd b7       	in	r28, 0x3d	; 61
     ac8:	de b7       	in	r29, 0x3e	; 62
     aca:	28 97       	sbiw	r28, 0x08	; 8
     acc:	0f b6       	in	r0, 0x3f	; 63
     ace:	f8 94       	cli
     ad0:	de bf       	out	0x3e, r29	; 62
     ad2:	0f be       	out	0x3f, r0	; 63
     ad4:	cd bf       	out	0x3d, r28	; 61
     ad6:	6b 01       	movw	r12, r22
     ad8:	7c 01       	movw	r14, r24
     ada:	69 83       	std	Y+1, r22	; 0x01
     adc:	7a 83       	std	Y+2, r23	; 0x02
     ade:	8b 83       	std	Y+3, r24	; 0x03
     ae0:	9c 83       	std	Y+4, r25	; 0x04
     ae2:	2d 83       	std	Y+5, r18	; 0x05
     ae4:	3e 83       	std	Y+6, r19	; 0x06
     ae6:	4f 83       	std	Y+7, r20	; 0x07
     ae8:	58 87       	std	Y+8, r21	; 0x08
	long r;
	if (a < b)
     aea:	c2 16       	cp	r12, r18
     aec:	d3 06       	cpc	r13, r19
     aee:	e4 06       	cpc	r14, r20
     af0:	f5 06       	cpc	r15, r21
     af2:	34 f4       	brge	.+12     	; 0xb00 <FUNCgcd1+0x46>
		FUNCswap(&a, &b);
     af4:	be 01       	movw	r22, r28
     af6:	6b 5f       	subi	r22, 0xFB	; 251
     af8:	7f 4f       	sbci	r23, 0xFF	; 255
     afa:	ce 01       	movw	r24, r28
     afc:	01 96       	adiw	r24, 0x01	; 1
     afe:	85 dc       	rcall	.-1782   	; 0x40a <FUNCswap>
	if (!b){
     b00:	8d 81       	ldd	r24, Y+5	; 0x05
     b02:	9e 81       	ldd	r25, Y+6	; 0x06
     b04:	af 81       	ldd	r26, Y+7	; 0x07
     b06:	b8 85       	ldd	r27, Y+8	; 0x08
     b08:	89 2b       	or	r24, r25
     b0a:	8a 2b       	or	r24, r26
     b0c:	8b 2b       	or	r24, r27
     b0e:	71 f4       	brne	.+28     	; 0xb2c <FUNCgcd1+0x72>
		while ((r = a % b) != 0) {
     b10:	69 81       	ldd	r22, Y+1	; 0x01
     b12:	7a 81       	ldd	r23, Y+2	; 0x02
     b14:	8b 81       	ldd	r24, Y+3	; 0x03
     b16:	9c 81       	ldd	r25, Y+4	; 0x04
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	a9 01       	movw	r20, r18
     b1e:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <__divmodsi4>
     b22:	61 15       	cp	r22, r1
     b24:	71 05       	cpc	r23, r1
     b26:	81 05       	cpc	r24, r1
     b28:	91 05       	cpc	r25, r1
     b2a:	29 f4       	brne	.+10     	; 0xb36 <FUNCgcd1+0x7c>
			a = b;
			b = r;
		}
	}	
	return b;
     b2c:	6d 81       	ldd	r22, Y+5	; 0x05
     b2e:	7e 81       	ldd	r23, Y+6	; 0x06
     b30:	8f 81       	ldd	r24, Y+7	; 0x07
     b32:	98 85       	ldd	r25, Y+8	; 0x08
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <FUNCgcd1+0x86>
	if (a < b)
		FUNCswap(&a, &b);
	if (!b){
		while ((r = a % b) != 0) {
			a = b;
			b = r;
     b36:	6d 83       	std	Y+5, r22	; 0x05
     b38:	7e 83       	std	Y+6, r23	; 0x06
     b3a:	8f 83       	std	Y+7, r24	; 0x07
     b3c:	98 87       	std	Y+8, r25	; 0x08
     b3e:	f6 cf       	rjmp	.-20     	; 0xb2c <FUNCgcd1+0x72>
		}
	}	
	return b;
}
     b40:	28 96       	adiw	r28, 0x08	; 8
     b42:	0f b6       	in	r0, 0x3f	; 63
     b44:	f8 94       	cli
     b46:	de bf       	out	0x3e, r29	; 62
     b48:	0f be       	out	0x3f, r0	; 63
     b4a:	cd bf       	out	0x3d, r28	; 61
     b4c:	df 91       	pop	r29
     b4e:	cf 91       	pop	r28
     b50:	ff 90       	pop	r15
     b52:	ef 90       	pop	r14
     b54:	df 90       	pop	r13
     b56:	cf 90       	pop	r12
     b58:	08 95       	ret

00000b5a <FUNCpincheck>:
	uint8_t lh;
	if(port & (1<<pin))
		lh=1;
	else
		lh=0;
	return lh;
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	02 c0       	rjmp	.+4      	; 0xb62 <FUNCpincheck+0x8>
     b5e:	95 95       	asr	r25
     b60:	87 95       	ror	r24
     b62:	6a 95       	dec	r22
     b64:	e2 f7       	brpl	.-8      	; 0xb5e <FUNCpincheck+0x4>
}
     b66:	81 70       	andi	r24, 0x01	; 1
     b68:	08 95       	ret

00000b6a <FUNCprint_binary>:
char* FUNCprint_binary(uint8_t number)
{
     b6a:	e5 ec       	ldi	r30, 0xC5	; 197
     b6c:	f1 e0       	ldi	r31, 0x01	; 1
	uint8_t i,c;
    for(i=128,c=0;i;i>>=1,c++){
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	20 e8       	ldi	r18, 0x80	; 128
	(number & i) ? (FUNCstr[c]='1') : (FUNCstr[c]='0');
     b72:	50 e3       	ldi	r21, 0x30	; 48
     b74:	41 e3       	ldi	r20, 0x31	; 49
     b76:	38 2f       	mov	r19, r24
     b78:	32 23       	and	r19, r18
     b7a:	11 f0       	breq	.+4      	; 0xb80 <FUNCprint_binary+0x16>
     b7c:	40 83       	st	Z, r20
     b7e:	01 c0       	rjmp	.+2      	; 0xb82 <FUNCprint_binary+0x18>
     b80:	50 83       	st	Z, r21
	return lh;
}
char* FUNCprint_binary(uint8_t number)
{
	uint8_t i,c;
    for(i=128,c=0;i;i>>=1,c++){
     b82:	26 95       	lsr	r18
     b84:	9f 5f       	subi	r25, 0xFF	; 255
     b86:	31 96       	adiw	r30, 0x01	; 1
     b88:	98 30       	cpi	r25, 0x08	; 8
     b8a:	a9 f7       	brne	.-22     	; 0xb76 <FUNCprint_binary+0xc>
	(number & i) ? (FUNCstr[c]='1') : (FUNCstr[c]='0');
	}
	FUNCstr[c]='\0';
     b8c:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <FUNCstr+0x8>
	return FUNCstr;
}
     b90:	85 ec       	ldi	r24, 0xC5	; 197
     b92:	91 e0       	ldi	r25, 0x01	; 1
     b94:	08 95       	ret

00000b96 <FUNCmayia>:
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
     b96:	a4 2f       	mov	r26, r20
     b98:	b0 e0       	ldi	r27, 0x00	; 0
     b9a:	10 97       	sbiw	r26, 0x00	; 0
     b9c:	61 f0       	breq	.+24     	; 0xbb6 <FUNCmayia+0x20>
     b9e:	21 e0       	ldi	r18, 0x01	; 1
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	e1 e0       	ldi	r30, 0x01	; 1
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
        p = p * bs;
     ba6:	ee 0f       	add	r30, r30
     ba8:	ff 1f       	adc	r31, r31
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
     baa:	2f 5f       	subi	r18, 0xFF	; 255
     bac:	3f 4f       	sbci	r19, 0xFF	; 255
     bae:	a2 17       	cp	r26, r18
     bb0:	b3 07       	cpc	r27, r19
     bb2:	c8 f7       	brcc	.-14     	; 0xba6 <FUNCmayia+0x10>
     bb4:	02 c0       	rjmp	.+4      	; 0xbba <FUNCmayia+0x24>
}
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
unsigned int FUNCmayia(unsigned int xi, unsigned int xf, uint8_t nbits)
{//magic formula
	unsigned int mask;
	unsigned int diff;
	unsigned int trans;
	mask=Pwr(2,nbits)-1;
     bba:	31 97       	sbiw	r30, 0x01	; 1
	xi&=mask;
	xf&=mask;
     bbc:	6e 23       	and	r22, r30
     bbe:	7f 23       	and	r23, r31
	diff=xf^xi;
     bc0:	8e 23       	and	r24, r30
     bc2:	9f 23       	and	r25, r31
     bc4:	86 27       	eor	r24, r22
     bc6:	97 27       	eor	r25, r23
	trans=diff&xf;
	return (trans<<nbits)|diff;
     bc8:	68 23       	and	r22, r24
     bca:	79 23       	and	r23, r25
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <FUNCmayia+0x3c>
     bce:	66 0f       	add	r22, r22
     bd0:	77 1f       	adc	r23, r23
     bd2:	4a 95       	dec	r20
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <FUNCmayia+0x38>
}
     bd6:	86 2b       	or	r24, r22
     bd8:	97 2b       	or	r25, r23
     bda:	08 95       	ret

00000bdc <FUNCenable>:
// uint8_t TRANupdate(struct TRAN *tr, uint8_t idata);
/*
** procedure and function
*/
FUNC FUNCenable( void )
{
     bdc:	fc 01       	movw	r30, r24
	uint8_t tSREG;
	tSREG=SREG;
     bde:	9f b7       	in	r25, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
     be0:	8f b7       	in	r24, 0x3f	; 63
     be2:	8f 77       	andi	r24, 0x7F	; 127
     be4:	8f bf       	out	0x3f, r24	; 63
	func.putstr=FUNCputstr;
	func.getnum=FUNCgetnum;
	func.getnumv2=FUNCgetnumv2;
	func.readint=FUNCreadint;
	*/
	SREG=tSREG;
     be6:	9f bf       	out	0x3f, r25	; 63
	/******/
	return func;
     be8:	8d ef       	ldi	r24, 0xFD	; 253
     bea:	93 e0       	ldi	r25, 0x03	; 3
     bec:	91 83       	std	Z+1, r25	; 0x01
     bee:	80 83       	st	Z, r24
     bf0:	88 e1       	ldi	r24, 0x18	; 24
     bf2:	94 e0       	ldi	r25, 0x04	; 4
     bf4:	93 83       	std	Z+3, r25	; 0x03
     bf6:	82 83       	std	Z+2, r24	; 0x02
     bf8:	82 e4       	ldi	r24, 0x42	; 66
     bfa:	94 e0       	ldi	r25, 0x04	; 4
     bfc:	95 83       	std	Z+5, r25	; 0x05
     bfe:	84 83       	std	Z+4, r24	; 0x04
     c00:	8b ec       	ldi	r24, 0xCB	; 203
     c02:	95 e0       	ldi	r25, 0x05	; 5
     c04:	97 83       	std	Z+7, r25	; 0x07
     c06:	86 83       	std	Z+6, r24	; 0x06
     c08:	8a ee       	ldi	r24, 0xEA	; 234
     c0a:	91 e0       	ldi	r25, 0x01	; 1
     c0c:	91 87       	std	Z+9, r25	; 0x09
     c0e:	80 87       	std	Z+8, r24	; 0x08
     c10:	88 ef       	ldi	r24, 0xF8	; 248
     c12:	91 e0       	ldi	r25, 0x01	; 1
     c14:	93 87       	std	Z+11, r25	; 0x0b
     c16:	82 87       	std	Z+10, r24	; 0x0a
     c18:	8a ef       	ldi	r24, 0xFA	; 250
     c1a:	91 e0       	ldi	r25, 0x01	; 1
     c1c:	95 87       	std	Z+13, r25	; 0x0d
     c1e:	84 87       	std	Z+12, r24	; 0x0c
     c20:	8d ef       	ldi	r24, 0xFD	; 253
     c22:	91 e0       	ldi	r25, 0x01	; 1
     c24:	97 87       	std	Z+15, r25	; 0x0f
     c26:	86 87       	std	Z+14, r24	; 0x0e
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	92 e0       	ldi	r25, 0x02	; 2
     c2c:	91 8b       	std	Z+17, r25	; 0x11
     c2e:	80 8b       	std	Z+16, r24	; 0x10
     c30:	83 e0       	ldi	r24, 0x03	; 3
     c32:	92 e0       	ldi	r25, 0x02	; 2
     c34:	93 8b       	std	Z+19, r25	; 0x13
     c36:	82 8b       	std	Z+18, r24	; 0x12
     c38:	84 ef       	ldi	r24, 0xF4	; 244
     c3a:	91 e0       	ldi	r25, 0x01	; 1
     c3c:	95 8b       	std	Z+21, r25	; 0x15
     c3e:	84 8b       	std	Z+20, r24	; 0x14
     c40:	86 ef       	ldi	r24, 0xF6	; 246
     c42:	91 e0       	ldi	r25, 0x01	; 1
     c44:	97 8b       	std	Z+23, r25	; 0x17
     c46:	86 8b       	std	Z+22, r24	; 0x16
     c48:	85 e0       	ldi	r24, 0x05	; 5
     c4a:	92 e0       	ldi	r25, 0x02	; 2
     c4c:	91 8f       	std	Z+25, r25	; 0x19
     c4e:	80 8f       	std	Z+24, r24	; 0x18
     c50:	86 e2       	ldi	r24, 0x26	; 38
     c52:	92 e0       	ldi	r25, 0x02	; 2
     c54:	93 8f       	std	Z+27, r25	; 0x1b
     c56:	82 8f       	std	Z+26, r24	; 0x1a
     c58:	84 e3       	ldi	r24, 0x34	; 52
     c5a:	92 e0       	ldi	r25, 0x02	; 2
     c5c:	95 8f       	std	Z+29, r25	; 0x1d
     c5e:	84 8f       	std	Z+28, r24	; 0x1c
     c60:	86 e5       	ldi	r24, 0x56	; 86
     c62:	92 e0       	ldi	r25, 0x02	; 2
     c64:	97 8f       	std	Z+31, r25	; 0x1f
     c66:	86 8f       	std	Z+30, r24	; 0x1e
     c68:	8a eb       	ldi	r24, 0xBA	; 186
     c6a:	94 e0       	ldi	r25, 0x04	; 4
     c6c:	91 a3       	std	Z+33, r25	; 0x21
     c6e:	80 a3       	std	Z+32, r24	; 0x20
     c70:	83 ef       	ldi	r24, 0xF3	; 243
     c72:	94 e0       	ldi	r25, 0x04	; 4
     c74:	93 a3       	std	Z+35, r25	; 0x23
     c76:	82 a3       	std	Z+34, r24	; 0x22
     c78:	8f e5       	ldi	r24, 0x5F	; 95
     c7a:	94 e0       	ldi	r25, 0x04	; 4
     c7c:	95 a3       	std	Z+37, r25	; 0x25
     c7e:	84 a3       	std	Z+36, r24	; 0x24
     c80:	87 e2       	ldi	r24, 0x27	; 39
     c82:	94 e0       	ldi	r25, 0x04	; 4
     c84:	97 a3       	std	Z+39, r25	; 0x27
     c86:	86 a3       	std	Z+38, r24	; 0x26
     c88:	8c ef       	ldi	r24, 0xFC	; 252
     c8a:	92 e0       	ldi	r25, 0x02	; 2
     c8c:	91 a7       	std	Z+41, r25	; 0x29
     c8e:	80 a7       	std	Z+40, r24	; 0x28
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	93 e0       	ldi	r25, 0x03	; 3
     c94:	93 a7       	std	Z+43, r25	; 0x2b
     c96:	82 a7       	std	Z+42, r24	; 0x2a
     c98:	80 e1       	ldi	r24, 0x10	; 16
     c9a:	93 e0       	ldi	r25, 0x03	; 3
     c9c:	95 a7       	std	Z+45, r25	; 0x2d
     c9e:	84 a7       	std	Z+44, r24	; 0x2c
     ca0:	84 e3       	ldi	r24, 0x34	; 52
     ca2:	93 e0       	ldi	r25, 0x03	; 3
     ca4:	97 a7       	std	Z+47, r25	; 0x2f
     ca6:	86 a7       	std	Z+46, r24	; 0x2e
     ca8:	86 e3       	ldi	r24, 0x36	; 54
     caa:	93 e0       	ldi	r25, 0x03	; 3
     cac:	91 ab       	std	Z+49, r25	; 0x31
     cae:	80 ab       	std	Z+48, r24	; 0x30
     cb0:	80 e4       	ldi	r24, 0x40	; 64
     cb2:	93 e0       	ldi	r25, 0x03	; 3
     cb4:	93 ab       	std	Z+51, r25	; 0x33
     cb6:	82 ab       	std	Z+50, r24	; 0x32
     cb8:	8d e4       	ldi	r24, 0x4D	; 77
     cba:	93 e0       	ldi	r25, 0x03	; 3
     cbc:	95 ab       	std	Z+53, r25	; 0x35
     cbe:	84 ab       	std	Z+52, r24	; 0x34
     cc0:	89 e5       	ldi	r24, 0x59	; 89
     cc2:	93 e0       	ldi	r25, 0x03	; 3
     cc4:	97 ab       	std	Z+55, r25	; 0x37
     cc6:	86 ab       	std	Z+54, r24	; 0x36
     cc8:	81 e7       	ldi	r24, 0x71	; 113
     cca:	93 e0       	ldi	r25, 0x03	; 3
     ccc:	91 af       	std	Z+57, r25	; 0x39
     cce:	80 af       	std	Z+56, r24	; 0x38
     cd0:	84 e8       	ldi	r24, 0x84	; 132
     cd2:	93 e0       	ldi	r25, 0x03	; 3
     cd4:	93 af       	std	Z+59, r25	; 0x3b
     cd6:	82 af       	std	Z+58, r24	; 0x3a
     cd8:	8f e8       	ldi	r24, 0x8F	; 143
     cda:	93 e0       	ldi	r25, 0x03	; 3
     cdc:	95 af       	std	Z+61, r25	; 0x3d
     cde:	84 af       	std	Z+60, r24	; 0x3c
     ce0:	8c eb       	ldi	r24, 0xBC	; 188
     ce2:	93 e0       	ldi	r25, 0x03	; 3
     ce4:	97 af       	std	Z+63, r25	; 0x3f
     ce6:	86 af       	std	Z+62, r24	; 0x3e
     ce8:	df 01       	movw	r26, r30
     cea:	a0 5c       	subi	r26, 0xC0	; 192
     cec:	bf 4f       	sbci	r27, 0xFF	; 255
     cee:	81 e3       	ldi	r24, 0x31	; 49
     cf0:	95 e0       	ldi	r25, 0x05	; 5
     cf2:	11 96       	adiw	r26, 0x01	; 1
     cf4:	9c 93       	st	X, r25
     cf6:	8e 93       	st	-X, r24
     cf8:	12 96       	adiw	r26, 0x02	; 2
     cfa:	8c e3       	ldi	r24, 0x3C	; 60
     cfc:	95 e0       	ldi	r25, 0x05	; 5
     cfe:	11 96       	adiw	r26, 0x01	; 1
     d00:	9c 93       	st	X, r25
     d02:	8e 93       	st	-X, r24
     d04:	12 96       	adiw	r26, 0x02	; 2
     d06:	8d e5       	ldi	r24, 0x5D	; 93
     d08:	95 e0       	ldi	r25, 0x05	; 5
     d0a:	11 96       	adiw	r26, 0x01	; 1
     d0c:	9c 93       	st	X, r25
     d0e:	8e 93       	st	-X, r24
     d10:	12 96       	adiw	r26, 0x02	; 2
     d12:	8d ea       	ldi	r24, 0xAD	; 173
     d14:	95 e0       	ldi	r25, 0x05	; 5
     d16:	11 96       	adiw	r26, 0x01	; 1
     d18:	9c 93       	st	X, r25
     d1a:	8e 93       	st	-X, r24
     d1c:	12 96       	adiw	r26, 0x02	; 2
     d1e:	85 eb       	ldi	r24, 0xB5	; 181
     d20:	95 e0       	ldi	r25, 0x05	; 5
     d22:	8d 93       	st	X+, r24
     d24:	9c 93       	st	X, r25
}
     d26:	cf 01       	movw	r24, r30
     d28:	08 95       	ret

00000d2a <LCD0_write>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d2a:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <lcd0_PORT>
     d2e:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <lcd0_PORT+0x1>
     d32:	90 81       	ld	r25, Z
     d34:	9d 7f       	andi	r25, 0xFD	; 253
     d36:	90 83       	st	Z, r25
     d38:	67 2b       	or	r22, r23
     d3a:	41 f0       	breq	.+16     	; 0xd4c <LCD0_write+0x22>
     d3c:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <lcd0_PORT>
     d40:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <lcd0_PORT+0x1>
     d44:	90 81       	ld	r25, Z
     d46:	91 60       	ori	r25, 0x01	; 1
     d48:	90 83       	st	Z, r25
     d4a:	07 c0       	rjmp	.+14     	; 0xd5a <LCD0_write+0x30>
     d4c:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <lcd0_PORT>
     d50:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <lcd0_PORT+0x1>
     d54:	90 81       	ld	r25, Z
     d56:	9e 7f       	andi	r25, 0xFE	; 254
     d58:	90 83       	st	Z, r25
     d5a:	e0 91 05 02 	lds	r30, 0x0205	; 0x800205 <lcd0_DDR>
     d5e:	f0 91 06 02 	lds	r31, 0x0206	; 0x800206 <lcd0_DDR+0x1>
     d62:	90 81       	ld	r25, Z
     d64:	90 6f       	ori	r25, 0xF0	; 240
     d66:	90 83       	st	Z, r25
     d68:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <lcd0_PORT>
     d6c:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <lcd0_PORT+0x1>
     d70:	90 81       	ld	r25, Z
     d72:	94 60       	ori	r25, 0x04	; 4
     d74:	90 83       	st	Z, r25
     d76:	88 23       	and	r24, r24
     d78:	44 f4       	brge	.+16     	; 0xd8a <LCD0_write+0x60>
     d7a:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <lcd0_PORT>
     d7e:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <lcd0_PORT+0x1>
     d82:	90 81       	ld	r25, Z
     d84:	90 68       	ori	r25, 0x80	; 128
     d86:	90 83       	st	Z, r25
     d88:	07 c0       	rjmp	.+14     	; 0xd98 <LCD0_write+0x6e>
     d8a:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <lcd0_PORT>
     d8e:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <lcd0_PORT+0x1>
     d92:	90 81       	ld	r25, Z
     d94:	9f 77       	andi	r25, 0x7F	; 127
     d96:	90 83       	st	Z, r25
     d98:	86 ff       	sbrs	r24, 6
     d9a:	08 c0       	rjmp	.+16     	; 0xdac <LCD0_write+0x82>
     d9c:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <lcd0_PORT>
     da0:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <lcd0_PORT+0x1>
     da4:	90 81       	ld	r25, Z
     da6:	90 64       	ori	r25, 0x40	; 64
     da8:	90 83       	st	Z, r25
     daa:	07 c0       	rjmp	.+14     	; 0xdba <LCD0_write+0x90>
     dac:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <lcd0_PORT>
     db0:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <lcd0_PORT+0x1>
     db4:	90 81       	ld	r25, Z
     db6:	9f 7b       	andi	r25, 0xBF	; 191
     db8:	90 83       	st	Z, r25
     dba:	85 ff       	sbrs	r24, 5
     dbc:	08 c0       	rjmp	.+16     	; 0xdce <LCD0_write+0xa4>
     dbe:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <lcd0_PORT>
     dc2:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <lcd0_PORT+0x1>
     dc6:	90 81       	ld	r25, Z
     dc8:	90 62       	ori	r25, 0x20	; 32
     dca:	90 83       	st	Z, r25
     dcc:	07 c0       	rjmp	.+14     	; 0xddc <LCD0_write+0xb2>
     dce:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <lcd0_PORT>
     dd2:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <lcd0_PORT+0x1>
     dd6:	90 81       	ld	r25, Z
     dd8:	9f 7d       	andi	r25, 0xDF	; 223
     dda:	90 83       	st	Z, r25
     ddc:	84 ff       	sbrs	r24, 4
     dde:	08 c0       	rjmp	.+16     	; 0xdf0 <LCD0_write+0xc6>
     de0:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <lcd0_PORT>
     de4:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <lcd0_PORT+0x1>
     de8:	90 81       	ld	r25, Z
     dea:	90 61       	ori	r25, 0x10	; 16
     dec:	90 83       	st	Z, r25
     dee:	07 c0       	rjmp	.+14     	; 0xdfe <LCD0_write+0xd4>
     df0:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <lcd0_PORT>
     df4:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <lcd0_PORT+0x1>
     df8:	90 81       	ld	r25, Z
     dfa:	9f 7e       	andi	r25, 0xEF	; 239
     dfc:	90 83       	st	Z, r25
     dfe:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <lcd0_PORT>
     e02:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <lcd0_PORT+0x1>
     e06:	90 81       	ld	r25, Z
     e08:	9b 7f       	andi	r25, 0xFB	; 251
     e0a:	90 83       	st	Z, r25
     e0c:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <lcd0_PORT>
     e10:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <lcd0_PORT+0x1>
     e14:	90 81       	ld	r25, Z
     e16:	94 60       	ori	r25, 0x04	; 4
     e18:	90 83       	st	Z, r25
     e1a:	83 ff       	sbrs	r24, 3
     e1c:	08 c0       	rjmp	.+16     	; 0xe2e <LCD0_write+0x104>
     e1e:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <lcd0_PORT>
     e22:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <lcd0_PORT+0x1>
     e26:	90 81       	ld	r25, Z
     e28:	90 68       	ori	r25, 0x80	; 128
     e2a:	90 83       	st	Z, r25
     e2c:	07 c0       	rjmp	.+14     	; 0xe3c <LCD0_write+0x112>
     e2e:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <lcd0_PORT>
     e32:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <lcd0_PORT+0x1>
     e36:	90 81       	ld	r25, Z
     e38:	9f 77       	andi	r25, 0x7F	; 127
     e3a:	90 83       	st	Z, r25
     e3c:	82 ff       	sbrs	r24, 2
     e3e:	08 c0       	rjmp	.+16     	; 0xe50 <LCD0_write+0x126>
     e40:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <lcd0_PORT>
     e44:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <lcd0_PORT+0x1>
     e48:	90 81       	ld	r25, Z
     e4a:	90 64       	ori	r25, 0x40	; 64
     e4c:	90 83       	st	Z, r25
     e4e:	07 c0       	rjmp	.+14     	; 0xe5e <LCD0_write+0x134>
     e50:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <lcd0_PORT>
     e54:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <lcd0_PORT+0x1>
     e58:	90 81       	ld	r25, Z
     e5a:	9f 7b       	andi	r25, 0xBF	; 191
     e5c:	90 83       	st	Z, r25
     e5e:	81 ff       	sbrs	r24, 1
     e60:	08 c0       	rjmp	.+16     	; 0xe72 <LCD0_write+0x148>
     e62:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <lcd0_PORT>
     e66:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <lcd0_PORT+0x1>
     e6a:	90 81       	ld	r25, Z
     e6c:	90 62       	ori	r25, 0x20	; 32
     e6e:	90 83       	st	Z, r25
     e70:	07 c0       	rjmp	.+14     	; 0xe80 <LCD0_write+0x156>
     e72:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <lcd0_PORT>
     e76:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <lcd0_PORT+0x1>
     e7a:	90 81       	ld	r25, Z
     e7c:	9f 7d       	andi	r25, 0xDF	; 223
     e7e:	90 83       	st	Z, r25
     e80:	80 ff       	sbrs	r24, 0
     e82:	08 c0       	rjmp	.+16     	; 0xe94 <LCD0_write+0x16a>
     e84:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <lcd0_PORT>
     e88:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <lcd0_PORT+0x1>
     e8c:	80 81       	ld	r24, Z
     e8e:	80 61       	ori	r24, 0x10	; 16
     e90:	80 83       	st	Z, r24
     e92:	07 c0       	rjmp	.+14     	; 0xea2 <LCD0_write+0x178>
     e94:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <lcd0_PORT>
     e98:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <lcd0_PORT+0x1>
     e9c:	80 81       	ld	r24, Z
     e9e:	8f 7e       	andi	r24, 0xEF	; 239
     ea0:	80 83       	st	Z, r24
     ea2:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <lcd0_PORT>
     ea6:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <lcd0_PORT+0x1>
     eaa:	80 81       	ld	r24, Z
     eac:	8b 7f       	andi	r24, 0xFB	; 251
     eae:	80 83       	st	Z, r24
     eb0:	08 95       	ret

00000eb2 <LCD0_read>:
     eb2:	e0 91 05 02 	lds	r30, 0x0205	; 0x800205 <lcd0_DDR>
     eb6:	f0 91 06 02 	lds	r31, 0x0206	; 0x800206 <lcd0_DDR+0x1>
     eba:	20 81       	ld	r18, Z
     ebc:	2f 70       	andi	r18, 0x0F	; 15
     ebe:	20 83       	st	Z, r18
     ec0:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <lcd0_PORT>
     ec4:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <lcd0_PORT+0x1>
     ec8:	20 81       	ld	r18, Z
     eca:	20 6f       	ori	r18, 0xF0	; 240
     ecc:	20 83       	st	Z, r18
     ece:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <lcd0_PORT>
     ed2:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <lcd0_PORT+0x1>
     ed6:	20 81       	ld	r18, Z
     ed8:	22 60       	ori	r18, 0x02	; 2
     eda:	20 83       	st	Z, r18
     edc:	89 2b       	or	r24, r25
     ede:	41 f0       	breq	.+16     	; 0xef0 <LCD0_read+0x3e>
     ee0:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <lcd0_PORT>
     ee4:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <lcd0_PORT+0x1>
     ee8:	80 81       	ld	r24, Z
     eea:	81 60       	ori	r24, 0x01	; 1
     eec:	80 83       	st	Z, r24
     eee:	07 c0       	rjmp	.+14     	; 0xefe <LCD0_read+0x4c>
     ef0:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <lcd0_PORT>
     ef4:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <lcd0_PORT+0x1>
     ef8:	80 81       	ld	r24, Z
     efa:	8e 7f       	andi	r24, 0xFE	; 254
     efc:	80 83       	st	Z, r24
     efe:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <lcd0_PORT>
     f02:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <lcd0_PORT+0x1>
     f06:	80 81       	ld	r24, Z
     f08:	84 60       	ori	r24, 0x04	; 4
     f0a:	80 83       	st	Z, r24
     f0c:	e0 91 fe 01 	lds	r30, 0x01FE	; 0x8001fe <lcd0_PIN>
     f10:	f0 91 ff 01 	lds	r31, 0x01FF	; 0x8001ff <lcd0_PIN+0x1>
     f14:	80 81       	ld	r24, Z
     f16:	88 23       	and	r24, r24
     f18:	14 f0       	brlt	.+4      	; 0xf1e <LCD0_read+0x6c>
     f1a:	80 e0       	ldi	r24, 0x00	; 0
     f1c:	01 c0       	rjmp	.+2      	; 0xf20 <LCD0_read+0x6e>
     f1e:	80 e8       	ldi	r24, 0x80	; 128
     f20:	90 81       	ld	r25, Z
     f22:	96 ff       	sbrs	r25, 6
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <LCD0_read+0x78>
     f26:	80 64       	ori	r24, 0x40	; 64
     f28:	01 c0       	rjmp	.+2      	; 0xf2c <LCD0_read+0x7a>
     f2a:	8f 7b       	andi	r24, 0xBF	; 191
     f2c:	90 81       	ld	r25, Z
     f2e:	95 ff       	sbrs	r25, 5
     f30:	02 c0       	rjmp	.+4      	; 0xf36 <LCD0_read+0x84>
     f32:	80 62       	ori	r24, 0x20	; 32
     f34:	01 c0       	rjmp	.+2      	; 0xf38 <LCD0_read+0x86>
     f36:	8f 7d       	andi	r24, 0xDF	; 223
     f38:	90 81       	ld	r25, Z
     f3a:	94 ff       	sbrs	r25, 4
     f3c:	02 c0       	rjmp	.+4      	; 0xf42 <LCD0_read+0x90>
     f3e:	80 61       	ori	r24, 0x10	; 16
     f40:	01 c0       	rjmp	.+2      	; 0xf44 <LCD0_read+0x92>
     f42:	8f 7e       	andi	r24, 0xEF	; 239
     f44:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <lcd0_PORT>
     f48:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <lcd0_PORT+0x1>
     f4c:	90 81       	ld	r25, Z
     f4e:	9b 7f       	andi	r25, 0xFB	; 251
     f50:	90 83       	st	Z, r25
     f52:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <lcd0_PORT>
     f56:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <lcd0_PORT+0x1>
     f5a:	90 81       	ld	r25, Z
     f5c:	94 60       	ori	r25, 0x04	; 4
     f5e:	90 83       	st	Z, r25
     f60:	e0 91 fe 01 	lds	r30, 0x01FE	; 0x8001fe <lcd0_PIN>
     f64:	f0 91 ff 01 	lds	r31, 0x01FF	; 0x8001ff <lcd0_PIN+0x1>
     f68:	90 81       	ld	r25, Z
     f6a:	99 23       	and	r25, r25
     f6c:	14 f4       	brge	.+4      	; 0xf72 <LCD0_read+0xc0>
     f6e:	88 60       	ori	r24, 0x08	; 8
     f70:	01 c0       	rjmp	.+2      	; 0xf74 <LCD0_read+0xc2>
     f72:	87 7f       	andi	r24, 0xF7	; 247
     f74:	90 81       	ld	r25, Z
     f76:	96 ff       	sbrs	r25, 6
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <LCD0_read+0xcc>
     f7a:	84 60       	ori	r24, 0x04	; 4
     f7c:	01 c0       	rjmp	.+2      	; 0xf80 <LCD0_read+0xce>
     f7e:	8b 7f       	andi	r24, 0xFB	; 251
     f80:	90 81       	ld	r25, Z
     f82:	95 ff       	sbrs	r25, 5
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <LCD0_read+0xd8>
     f86:	82 60       	ori	r24, 0x02	; 2
     f88:	01 c0       	rjmp	.+2      	; 0xf8c <LCD0_read+0xda>
     f8a:	8d 7f       	andi	r24, 0xFD	; 253
     f8c:	90 81       	ld	r25, Z
     f8e:	94 ff       	sbrs	r25, 4
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <LCD0_read+0xe4>
     f92:	81 60       	ori	r24, 0x01	; 1
     f94:	01 c0       	rjmp	.+2      	; 0xf98 <LCD0_read+0xe6>
     f96:	8e 7f       	andi	r24, 0xFE	; 254
     f98:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <lcd0_PORT>
     f9c:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <lcd0_PORT+0x1>
     fa0:	90 81       	ld	r25, Z
     fa2:	9b 7f       	andi	r25, 0xFB	; 251
     fa4:	90 83       	st	Z, r25
     fa6:	08 95       	ret

00000fa8 <LCD0_BF>:
     fa8:	cf 93       	push	r28
     faa:	df 93       	push	r29
     fac:	80 e0       	ldi	r24, 0x00	; 0
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	80 df       	rcall	.-256    	; 0xeb2 <LCD0_read>
     fb2:	cb e0       	ldi	r28, 0x0B	; 11
     fb4:	d0 e0       	ldi	r29, 0x00	; 0
     fb6:	05 c0       	rjmp	.+10     	; 0xfc2 <LCD0_BF+0x1a>
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	7a df       	rcall	.-268    	; 0xeb2 <LCD0_read>
     fbe:	21 97       	sbiw	r28, 0x01	; 1
     fc0:	11 f0       	breq	.+4      	; 0xfc6 <LCD0_BF+0x1e>
     fc2:	88 23       	and	r24, r24
     fc4:	cc f3       	brlt	.-14     	; 0xfb8 <LCD0_BF+0x10>
     fc6:	df 91       	pop	r29
     fc8:	cf 91       	pop	r28
     fca:	08 95       	ret

00000fcc <LCD0_putch>:
     fcc:	61 e0       	ldi	r22, 0x01	; 1
     fce:	70 e0       	ldi	r23, 0x00	; 0
     fd0:	ac de       	rcall	.-680    	; 0xd2a <LCD0_write>
     fd2:	ea cf       	rjmp	.-44     	; 0xfa8 <LCD0_BF>
     fd4:	08 95       	ret

00000fd6 <LCD0_getch>:
     fd6:	cf 93       	push	r28
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	6a df       	rcall	.-300    	; 0xeb2 <LCD0_read>
     fde:	c8 2f       	mov	r28, r24
     fe0:	e3 df       	rcall	.-58     	; 0xfa8 <LCD0_BF>
     fe2:	8c 2f       	mov	r24, r28
     fe4:	cf 91       	pop	r28
     fe6:	08 95       	ret

00000fe8 <LCD0_string>:
     fe8:	cf 93       	push	r28
     fea:	df 93       	push	r29
     fec:	ec 01       	movw	r28, r24
     fee:	88 81       	ld	r24, Y
     ff0:	88 23       	and	r24, r24
     ff2:	41 f0       	breq	.+16     	; 0x1004 <LCD0_string+0x1c>
     ff4:	21 96       	adiw	r28, 0x01	; 1
     ff6:	61 e0       	ldi	r22, 0x01	; 1
     ff8:	70 e0       	ldi	r23, 0x00	; 0
     ffa:	97 de       	rcall	.-722    	; 0xd2a <LCD0_write>
     ffc:	d5 df       	rcall	.-86     	; 0xfa8 <LCD0_BF>
     ffe:	89 91       	ld	r24, Y+
    1000:	81 11       	cpse	r24, r1
    1002:	f9 cf       	rjmp	.-14     	; 0xff6 <LCD0_string+0xe>
    1004:	df 91       	pop	r29
    1006:	cf 91       	pop	r28
    1008:	08 95       	ret

0000100a <LCD0_string_size>:
    100a:	0f 93       	push	r16
    100c:	1f 93       	push	r17
    100e:	cf 93       	push	r28
    1010:	df 93       	push	r29
    1012:	fc 01       	movw	r30, r24
    1014:	d6 2f       	mov	r29, r22
    1016:	80 81       	ld	r24, Z
    1018:	88 23       	and	r24, r24
    101a:	51 f0       	breq	.+20     	; 0x1030 <LCD0_string_size+0x26>
    101c:	8f 01       	movw	r16, r30
    101e:	0f 5f       	subi	r16, 0xFF	; 255
    1020:	1f 4f       	sbci	r17, 0xFF	; 255
    1022:	61 11       	cpse	r22, r1
    1024:	09 c0       	rjmp	.+18     	; 0x1038 <LCD0_string_size+0x2e>
    1026:	1b c0       	rjmp	.+54     	; 0x105e <LCD0_string_size+0x54>
    1028:	cf 5f       	subi	r28, 0xFF	; 255
    102a:	dc 17       	cp	r29, r28
    102c:	30 f4       	brcc	.+12     	; 0x103a <LCD0_string_size+0x30>
    102e:	01 c0       	rjmp	.+2      	; 0x1032 <LCD0_string_size+0x28>
    1030:	c0 e0       	ldi	r28, 0x00	; 0
    1032:	cd 17       	cp	r28, r29
    1034:	60 f0       	brcs	.+24     	; 0x104e <LCD0_string_size+0x44>
    1036:	13 c0       	rjmp	.+38     	; 0x105e <LCD0_string_size+0x54>
    1038:	c1 e0       	ldi	r28, 0x01	; 1
    103a:	61 e0       	ldi	r22, 0x01	; 1
    103c:	70 e0       	ldi	r23, 0x00	; 0
    103e:	75 de       	rcall	.-790    	; 0xd2a <LCD0_write>
    1040:	b3 df       	rcall	.-154    	; 0xfa8 <LCD0_BF>
    1042:	f8 01       	movw	r30, r16
    1044:	81 91       	ld	r24, Z+
    1046:	8f 01       	movw	r16, r30
    1048:	81 11       	cpse	r24, r1
    104a:	ee cf       	rjmp	.-36     	; 0x1028 <LCD0_string_size+0x1e>
    104c:	f2 cf       	rjmp	.-28     	; 0x1032 <LCD0_string_size+0x28>
    104e:	cf 5f       	subi	r28, 0xFF	; 255
    1050:	61 e0       	ldi	r22, 0x01	; 1
    1052:	70 e0       	ldi	r23, 0x00	; 0
    1054:	80 e2       	ldi	r24, 0x20	; 32
    1056:	69 de       	rcall	.-814    	; 0xd2a <LCD0_write>
    1058:	a7 df       	rcall	.-178    	; 0xfa8 <LCD0_BF>
    105a:	cd 17       	cp	r28, r29
    105c:	c0 f3       	brcs	.-16     	; 0x104e <LCD0_string_size+0x44>
    105e:	df 91       	pop	r29
    1060:	cf 91       	pop	r28
    1062:	1f 91       	pop	r17
    1064:	0f 91       	pop	r16
    1066:	08 95       	ret

00001068 <LCD0_hspace>:
    1068:	cf 93       	push	r28
    106a:	c8 2f       	mov	r28, r24
    106c:	88 23       	and	r24, r24
    106e:	39 f0       	breq	.+14     	; 0x107e <LCD0_hspace+0x16>
    1070:	61 e0       	ldi	r22, 0x01	; 1
    1072:	70 e0       	ldi	r23, 0x00	; 0
    1074:	80 e2       	ldi	r24, 0x20	; 32
    1076:	59 de       	rcall	.-846    	; 0xd2a <LCD0_write>
    1078:	97 df       	rcall	.-210    	; 0xfa8 <LCD0_BF>
    107a:	c1 50       	subi	r28, 0x01	; 1
    107c:	c9 f7       	brne	.-14     	; 0x1070 <LCD0_hspace+0x8>
    107e:	cf 91       	pop	r28
    1080:	08 95       	ret

00001082 <LCD0_gotoxy>:
    1082:	26 2f       	mov	r18, r22
    1084:	81 30       	cpi	r24, 0x01	; 1
    1086:	91 05       	cpc	r25, r1
    1088:	71 f0       	breq	.+28     	; 0x10a6 <LCD0_gotoxy+0x24>
    108a:	30 f0       	brcs	.+12     	; 0x1098 <LCD0_gotoxy+0x16>
    108c:	82 30       	cpi	r24, 0x02	; 2
    108e:	91 05       	cpc	r25, r1
    1090:	89 f0       	breq	.+34     	; 0x10b4 <LCD0_gotoxy+0x32>
    1092:	03 97       	sbiw	r24, 0x03	; 3
    1094:	b1 f0       	breq	.+44     	; 0x10c2 <LCD0_gotoxy+0x40>
    1096:	08 95       	ret
    1098:	60 e0       	ldi	r22, 0x00	; 0
    109a:	70 e0       	ldi	r23, 0x00	; 0
    109c:	80 e8       	ldi	r24, 0x80	; 128
    109e:	82 0f       	add	r24, r18
    10a0:	44 de       	rcall	.-888    	; 0xd2a <LCD0_write>
    10a2:	82 cf       	rjmp	.-252    	; 0xfa8 <LCD0_BF>
    10a4:	08 95       	ret
    10a6:	60 e0       	ldi	r22, 0x00	; 0
    10a8:	70 e0       	ldi	r23, 0x00	; 0
    10aa:	80 ec       	ldi	r24, 0xC0	; 192
    10ac:	82 0f       	add	r24, r18
    10ae:	3d de       	rcall	.-902    	; 0xd2a <LCD0_write>
    10b0:	7b cf       	rjmp	.-266    	; 0xfa8 <LCD0_BF>
    10b2:	08 95       	ret
    10b4:	60 e0       	ldi	r22, 0x00	; 0
    10b6:	70 e0       	ldi	r23, 0x00	; 0
    10b8:	84 e9       	ldi	r24, 0x94	; 148
    10ba:	82 0f       	add	r24, r18
    10bc:	36 de       	rcall	.-916    	; 0xd2a <LCD0_write>
    10be:	74 cf       	rjmp	.-280    	; 0xfa8 <LCD0_BF>
    10c0:	08 95       	ret
    10c2:	60 e0       	ldi	r22, 0x00	; 0
    10c4:	70 e0       	ldi	r23, 0x00	; 0
    10c6:	84 ed       	ldi	r24, 0xD4	; 212
    10c8:	82 0f       	add	r24, r18
    10ca:	2f de       	rcall	.-930    	; 0xd2a <LCD0_write>
    10cc:	6d cf       	rjmp	.-294    	; 0xfa8 <LCD0_BF>
    10ce:	08 95       	ret

000010d0 <LCD0_clear>:
    10d0:	60 e0       	ldi	r22, 0x00	; 0
    10d2:	70 e0       	ldi	r23, 0x00	; 0
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	29 de       	rcall	.-942    	; 0xd2a <LCD0_write>
    10d8:	87 ee       	ldi	r24, 0xE7	; 231
    10da:	97 e1       	ldi	r25, 0x17	; 23
    10dc:	01 97       	sbiw	r24, 0x01	; 1
    10de:	f1 f7       	brne	.-4      	; 0x10dc <LCD0_clear+0xc>
    10e0:	00 c0       	rjmp	.+0      	; 0x10e2 <LCD0_clear+0x12>
    10e2:	00 00       	nop
    10e4:	08 95       	ret

000010e6 <LCD0_inic>:
	return lcd0;
}
void LCD0_inic(void)
{
	//LCD INIC
	*lcd0_DDR=(1<<RS)|(1<<RW)|(1<<EN)|(0<<NC);
    10e6:	e0 91 05 02 	lds	r30, 0x0205	; 0x800205 <lcd0_DDR>
    10ea:	f0 91 06 02 	lds	r31, 0x0206	; 0x800206 <lcd0_DDR+0x1>
    10ee:	87 e0       	ldi	r24, 0x07	; 7
    10f0:	80 83       	st	Z, r24
	*lcd0_PORT=(1<<NC);
    10f2:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <lcd0_PORT>
    10f6:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <lcd0_PORT+0x1>
    10fa:	88 e0       	ldi	r24, 0x08	; 8
    10fc:	80 83       	st	Z, r24
    10fe:	2f ef       	ldi	r18, 0xFF	; 255
    1100:	83 ef       	ldi	r24, 0xF3	; 243
    1102:	91 e0       	ldi	r25, 0x01	; 1
    1104:	21 50       	subi	r18, 0x01	; 1
    1106:	80 40       	sbci	r24, 0x00	; 0
    1108:	90 40       	sbci	r25, 0x00	; 0
    110a:	e1 f7       	brne	.-8      	; 0x1104 <__stack+0x5>
    110c:	00 c0       	rjmp	.+0      	; 0x110e <__stack+0xf>
    110e:	00 00       	nop
	/***INICIALIZACAO LCD**datasheet*/
	_delay_ms(40);
	LCD0_write(0x33,INST); //function set
    1110:	60 e0       	ldi	r22, 0x00	; 0
    1112:	70 e0       	ldi	r23, 0x00	; 0
    1114:	83 e3       	ldi	r24, 0x33	; 51
    1116:	09 de       	rcall	.-1006   	; 0xd2a <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1118:	20 ed       	ldi	r18, 0xD0	; 208
    111a:	2a 95       	dec	r18
    111c:	f1 f7       	brne	.-4      	; 0x111a <__stack+0x1b>
	_delay_us(39);
	LCD0_write(0x33,INST); //function set
    111e:	60 e0       	ldi	r22, 0x00	; 0
    1120:	70 e0       	ldi	r23, 0x00	; 0
    1122:	83 e3       	ldi	r24, 0x33	; 51
    1124:	02 de       	rcall	.-1020   	; 0xd2a <LCD0_write>
    1126:	80 ed       	ldi	r24, 0xD0	; 208
    1128:	8a 95       	dec	r24
    112a:	f1 f7       	brne	.-4      	; 0x1128 <__stack+0x29>
	_delay_us(39);
	LCD0_write(0x2B,INST); //function set
    112c:	60 e0       	ldi	r22, 0x00	; 0
    112e:	70 e0       	ldi	r23, 0x00	; 0
    1130:	8b e2       	ldi	r24, 0x2B	; 43
    1132:	fb dd       	rcall	.-1034   	; 0xd2a <LCD0_write>
    1134:	95 ec       	ldi	r25, 0xC5	; 197
    1136:	9a 95       	dec	r25
    1138:	f1 f7       	brne	.-4      	; 0x1136 <__stack+0x37>
    113a:	00 00       	nop
	_delay_us(37);
	LCD0_write(0x0C,INST);// display on/off control
    113c:	60 e0       	ldi	r22, 0x00	; 0
    113e:	70 e0       	ldi	r23, 0x00	; 0
    1140:	8c e0       	ldi	r24, 0x0C	; 12
    1142:	f3 dd       	rcall	.-1050   	; 0xd2a <LCD0_write>
    1144:	25 ec       	ldi	r18, 0xC5	; 197
    1146:	2a 95       	dec	r18
    1148:	f1 f7       	brne	.-4      	; 0x1146 <__stack+0x47>
	_delay_us(37);
	LCD0_write(0x01,INST);// clear display
    114a:	00 00       	nop
    114c:	60 e0       	ldi	r22, 0x00	; 0
    114e:	70 e0       	ldi	r23, 0x00	; 0
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	eb dd       	rcall	.-1066   	; 0xd2a <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1154:	87 ee       	ldi	r24, 0xE7	; 231
    1156:	97 e1       	ldi	r25, 0x17	; 23
    1158:	01 97       	sbiw	r24, 0x01	; 1
    115a:	f1 f7       	brne	.-4      	; 0x1158 <__stack+0x59>
    115c:	00 c0       	rjmp	.+0      	; 0x115e <__stack+0x5f>
	_delay_ms(1.53);
	LCD0_write(0x06,INST);// entry mode set (crazy settings)
    115e:	00 00       	nop
    1160:	60 e0       	ldi	r22, 0x00	; 0
    1162:	70 e0       	ldi	r23, 0x00	; 0
    1164:	86 e0       	ldi	r24, 0x06	; 6
    1166:	e1 dd       	rcall	.-1086   	; 0xd2a <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1168:	95 ec       	ldi	r25, 0xC5	; 197
    116a:	9a 95       	dec	r25
    116c:	f1 f7       	brne	.-4      	; 0x116a <__stack+0x6b>
    116e:	00 00       	nop
    1170:	08 95       	ret

00001172 <LCD0enable>:
unsigned int LCD_ticks(unsigned int num);
/*
** procedure and function
*/
LCD0 LCD0enable(volatile uint8_t *ddr, volatile uint8_t *pin, volatile uint8_t *port)
{
    1172:	1f 93       	push	r17
    1174:	cf 93       	push	r28
    1176:	df 93       	push	r29
    1178:	ec 01       	movw	r28, r24
	//LOCAL VARIABLES
	uint8_t tSREG;
	tSREG=SREG;
    117a:	1f b7       	in	r17, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    117c:	8f b7       	in	r24, 0x3f	; 63
    117e:	8f 77       	andi	r24, 0x7F	; 127
    1180:	8f bf       	out	0x3f, r24	; 63
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	LCD0 lcd0;
	//import parametros
	lcd0_DDR=ddr;
    1182:	70 93 06 02 	sts	0x0206, r23	; 0x800206 <lcd0_DDR+0x1>
    1186:	60 93 05 02 	sts	0x0205, r22	; 0x800205 <lcd0_DDR>
	lcd0_PIN=pin;
    118a:	50 93 ff 01 	sts	0x01FF, r21	; 0x8001ff <lcd0_PIN+0x1>
    118e:	40 93 fe 01 	sts	0x01FE, r20	; 0x8001fe <lcd0_PIN>
	lcd0_PORT=port;
    1192:	30 93 09 02 	sts	0x0209, r19	; 0x800209 <lcd0_PORT+0x1>
    1196:	20 93 08 02 	sts	0x0208, r18	; 0x800208 <lcd0_PORT>
	//inic variables
	*lcd0_DDR=0x00;
    119a:	fb 01       	movw	r30, r22
    119c:	10 82       	st	Z, r1
	*lcd0_PORT=0xFF;
    119e:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <lcd0_PORT>
    11a2:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <lcd0_PORT+0x1>
    11a6:	8f ef       	ldi	r24, 0xFF	; 255
    11a8:	80 83       	st	Z, r24
	lcd0_detect=*lcd0_PIN & (1<<NC);
    11aa:	e0 91 fe 01 	lds	r30, 0x01FE	; 0x8001fe <lcd0_PIN>
    11ae:	f0 91 ff 01 	lds	r31, 0x01FF	; 0x8001ff <lcd0_PIN+0x1>
    11b2:	80 81       	ld	r24, Z
    11b4:	88 70       	andi	r24, 0x08	; 8
    11b6:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <lcd0_detect>
	lcd0.hspace=LCD0_hspace;
	lcd0.clear=LCD0_clear;
	lcd0.gotoxy=LCD0_gotoxy;
	lcd0.reboot=LCD0_reboot;
	//LCD INIC
	LCD0_inic();
    11ba:	95 df       	rcall	.-214    	; 0x10e6 <LCD0_inic>
	SREG=tSREG;
    11bc:	1f bf       	out	0x3f, r17	; 63
	//
	return lcd0;
    11be:	85 e9       	ldi	r24, 0x95	; 149
    11c0:	96 e0       	ldi	r25, 0x06	; 6
    11c2:	99 83       	std	Y+1, r25	; 0x01
    11c4:	88 83       	st	Y, r24
    11c6:	89 e5       	ldi	r24, 0x59	; 89
    11c8:	97 e0       	ldi	r25, 0x07	; 7
    11ca:	9b 83       	std	Y+3, r25	; 0x03
    11cc:	8a 83       	std	Y+2, r24	; 0x02
    11ce:	84 ed       	ldi	r24, 0xD4	; 212
    11d0:	97 e0       	ldi	r25, 0x07	; 7
    11d2:	9d 83       	std	Y+5, r25	; 0x05
    11d4:	8c 83       	std	Y+4, r24	; 0x04
    11d6:	86 ee       	ldi	r24, 0xE6	; 230
    11d8:	97 e0       	ldi	r25, 0x07	; 7
    11da:	9f 83       	std	Y+7, r25	; 0x07
    11dc:	8e 83       	std	Y+6, r24	; 0x06
    11de:	8b ee       	ldi	r24, 0xEB	; 235
    11e0:	97 e0       	ldi	r25, 0x07	; 7
    11e2:	99 87       	std	Y+9, r25	; 0x09
    11e4:	88 87       	std	Y+8, r24	; 0x08
    11e6:	84 ef       	ldi	r24, 0xF4	; 244
    11e8:	97 e0       	ldi	r25, 0x07	; 7
    11ea:	9b 87       	std	Y+11, r25	; 0x0b
    11ec:	8a 87       	std	Y+10, r24	; 0x0a
    11ee:	85 e0       	ldi	r24, 0x05	; 5
    11f0:	98 e0       	ldi	r25, 0x08	; 8
    11f2:	9d 87       	std	Y+13, r25	; 0x0d
    11f4:	8c 87       	std	Y+12, r24	; 0x0c
    11f6:	84 e3       	ldi	r24, 0x34	; 52
    11f8:	98 e0       	ldi	r25, 0x08	; 8
    11fa:	9f 87       	std	Y+15, r25	; 0x0f
    11fc:	8e 87       	std	Y+14, r24	; 0x0e
    11fe:	88 e6       	ldi	r24, 0x68	; 104
    1200:	98 e0       	ldi	r25, 0x08	; 8
    1202:	99 8b       	std	Y+17, r25	; 0x11
    1204:	88 8b       	std	Y+16, r24	; 0x10
    1206:	81 e4       	ldi	r24, 0x41	; 65
    1208:	98 e0       	ldi	r25, 0x08	; 8
    120a:	9b 8b       	std	Y+19, r25	; 0x13
    120c:	8a 8b       	std	Y+18, r24	; 0x12
    120e:	80 e1       	ldi	r24, 0x10	; 16
    1210:	99 e0       	ldi	r25, 0x09	; 9
    1212:	9d 8b       	std	Y+21, r25	; 0x15
    1214:	8c 8b       	std	Y+20, r24	; 0x14
}
    1216:	ce 01       	movw	r24, r28
    1218:	df 91       	pop	r29
    121a:	cf 91       	pop	r28
    121c:	1f 91       	pop	r17
    121e:	08 95       	ret

00001220 <LCD0_reboot>:
	*lcd0_PORT|=(1<<EN);
	LCD_ticks(num);
	*lcd0_PORT&=~(1<<EN);
}
void LCD0_reboot(void)
{
    1220:	cf 93       	push	r28
	//low high detect pin NC
	uint8_t i;
	uint8_t tmp;
	tmp=*lcd0_PIN & (1<<NC);
    1222:	e0 91 fe 01 	lds	r30, 0x01FE	; 0x8001fe <lcd0_PIN>
    1226:	f0 91 ff 01 	lds	r31, 0x01FF	; 0x8001ff <lcd0_PIN+0x1>
    122a:	c0 81       	ld	r28, Z
    122c:	c8 70       	andi	r28, 0x08	; 8
	i=tmp^lcd0_detect;
    122e:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <lcd0_detect>
    1232:	8c 27       	eor	r24, r28
	i&=tmp;
	if(i)
    1234:	8c 23       	and	r24, r28
    1236:	09 f0       	breq	.+2      	; 0x123a <LCD0_reboot+0x1a>
		LCD0_inic();
    1238:	56 df       	rcall	.-340    	; 0x10e6 <LCD0_inic>
	lcd0_detect=tmp;
    123a:	c0 93 07 02 	sts	0x0207, r28	; 0x800207 <lcd0_detect>
}
    123e:	cf 91       	pop	r28
    1240:	08 95       	ret

00001242 <LFSMquant>:
	}//End switch
	return status;
}
/***quant***/
uint8_t LFSMquant(struct lfsm *r)
{
    1242:	af 92       	push	r10
    1244:	bf 92       	push	r11
    1246:	cf 92       	push	r12
    1248:	df 92       	push	r13
    124a:	ef 92       	push	r14
    124c:	ff 92       	push	r15
    124e:	0f 93       	push	r16
    1250:	1f 93       	push	r17
    1252:	cf 93       	push	r28
    1254:	df 93       	push	r29
	uint16_t i1;
	uint8_t sizeblock=r->sizeblock;
    1256:	dc 01       	movw	r26, r24
    1258:	14 96       	adiw	r26, 0x04	; 4
    125a:	cc 90       	ld	r12, X
    125c:	14 97       	sbiw	r26, 0x04	; 4
	struct lfsmdata* pdata=&data;
	uint16_t programmed;
	for(i1=ZERO,programmed=ZERO;i1<r->sizeeeprom;i1++){
    125e:	12 96       	adiw	r26, 0x02	; 2
    1260:	2d 91       	ld	r18, X+
    1262:	3c 91       	ld	r19, X
    1264:	13 97       	sbiw	r26, 0x03	; 3
    1266:	23 2b       	or	r18, r19
    1268:	21 f1       	breq	.+72     	; 0x12b2 <LFSMquant+0x70>
    126a:	7c 01       	movw	r14, r24
    126c:	d1 2c       	mov	r13, r1
    126e:	00 e0       	ldi	r16, 0x00	; 0
    1270:	10 e0       	ldi	r17, 0x00	; 0
    1272:	a1 2c       	mov	r10, r1
    1274:	b1 2c       	mov	r11, r1
    1276:	c0 e0       	ldi	r28, 0x00	; 0
    1278:	d0 e0       	ldi	r29, 0x00	; 0
		r->eprom->read_block(pdata, (const void*) (i1*sizeblock), sizeblock);
    127a:	d7 01       	movw	r26, r14
    127c:	ed 91       	ld	r30, X+
    127e:	fc 91       	ld	r31, X
    1280:	00 8c       	ldd	r0, Z+24	; 0x18
    1282:	f1 8d       	ldd	r31, Z+25	; 0x19
    1284:	e0 2d       	mov	r30, r0
    1286:	a6 01       	movw	r20, r12
    1288:	b8 01       	movw	r22, r16
    128a:	86 ee       	ldi	r24, 0xE6	; 230
    128c:	91 e0       	ldi	r25, 0x01	; 1
    128e:	09 95       	icall
		if(pdata->page!=ZERO){ //Count memory used
    1290:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <data>
    1294:	88 23       	and	r24, r24
    1296:	19 f0       	breq	.+6      	; 0x129e <LFSMquant+0x5c>
			programmed++;
    1298:	bf ef       	ldi	r27, 0xFF	; 255
    129a:	ab 1a       	sub	r10, r27
    129c:	bb 0a       	sbc	r11, r27
{
	uint16_t i1;
	uint8_t sizeblock=r->sizeblock;
	struct lfsmdata* pdata=&data;
	uint16_t programmed;
	for(i1=ZERO,programmed=ZERO;i1<r->sizeeeprom;i1++){
    129e:	21 96       	adiw	r28, 0x01	; 1
    12a0:	0c 0d       	add	r16, r12
    12a2:	1d 1d       	adc	r17, r13
    12a4:	f7 01       	movw	r30, r14
    12a6:	82 81       	ldd	r24, Z+2	; 0x02
    12a8:	93 81       	ldd	r25, Z+3	; 0x03
    12aa:	c8 17       	cp	r28, r24
    12ac:	d9 07       	cpc	r29, r25
    12ae:	28 f3       	brcs	.-54     	; 0x127a <LFSMquant+0x38>
    12b0:	02 c0       	rjmp	.+4      	; 0x12b6 <LFSMquant+0x74>
    12b2:	a1 2c       	mov	r10, r1
    12b4:	b1 2c       	mov	r11, r1
		if(pdata->page!=ZERO){ //Count memory used
			programmed++;
		}
	}
	return programmed;
}
    12b6:	8a 2d       	mov	r24, r10
    12b8:	df 91       	pop	r29
    12ba:	cf 91       	pop	r28
    12bc:	1f 91       	pop	r17
    12be:	0f 91       	pop	r16
    12c0:	ff 90       	pop	r15
    12c2:	ef 90       	pop	r14
    12c4:	df 90       	pop	r13
    12c6:	cf 90       	pop	r12
    12c8:	bf 90       	pop	r11
    12ca:	af 90       	pop	r10
    12cc:	08 95       	ret

000012ce <LFSMdeleteall>:
	}//End switch
	return status;
}//End main
/***deleteall***/
uint8_t LFSMdeleteall(struct lfsm *r)
{
    12ce:	af 92       	push	r10
    12d0:	bf 92       	push	r11
    12d2:	cf 92       	push	r12
    12d4:	df 92       	push	r13
    12d6:	ef 92       	push	r14
    12d8:	ff 92       	push	r15
    12da:	0f 93       	push	r16
    12dc:	1f 93       	push	r17
    12de:	cf 93       	push	r28
    12e0:	df 93       	push	r29
    12e2:	7c 01       	movw	r14, r24
	uint16_t i1;
	uint8_t status=ZERO;
	uint8_t sizeblock=r->sizeblock;
    12e4:	dc 01       	movw	r26, r24
    12e6:	14 96       	adiw	r26, 0x04	; 4
    12e8:	cc 90       	ld	r12, X
    12ea:	14 97       	sbiw	r26, 0x04	; 4
	struct lfsmdata* pdata=&data;
	for(i1=ZERO;i1<r->sizeeeprom;i1++){
    12ec:	12 96       	adiw	r26, 0x02	; 2
    12ee:	8d 91       	ld	r24, X+
    12f0:	9c 91       	ld	r25, X
    12f2:	13 97       	sbiw	r26, 0x03	; 3
    12f4:	89 2b       	or	r24, r25
    12f6:	81 f1       	breq	.+96     	; 0x1358 <LFSMdeleteall+0x8a>
    12f8:	d1 2c       	mov	r13, r1
    12fa:	c0 e0       	ldi	r28, 0x00	; 0
    12fc:	d0 e0       	ldi	r29, 0x00	; 0
    12fe:	a1 2c       	mov	r10, r1
    1300:	00 e0       	ldi	r16, 0x00	; 0
    1302:	10 e0       	ldi	r17, 0x00	; 0
		r->eprom->read_block(pdata, (const void*) (i1*sizeblock), sizeblock);
		if(pdata->page){
			pdata->page=ZERO;
			r->eprom->update_block(pdata, (void*) (i1*sizeblock), sizeblock);
			status=1; //All deleted
    1304:	bb 24       	eor	r11, r11
    1306:	b3 94       	inc	r11
	uint16_t i1;
	uint8_t status=ZERO;
	uint8_t sizeblock=r->sizeblock;
	struct lfsmdata* pdata=&data;
	for(i1=ZERO;i1<r->sizeeeprom;i1++){
		r->eprom->read_block(pdata, (const void*) (i1*sizeblock), sizeblock);
    1308:	d7 01       	movw	r26, r14
    130a:	ed 91       	ld	r30, X+
    130c:	fc 91       	ld	r31, X
    130e:	00 8c       	ldd	r0, Z+24	; 0x18
    1310:	f1 8d       	ldd	r31, Z+25	; 0x19
    1312:	e0 2d       	mov	r30, r0
    1314:	a6 01       	movw	r20, r12
    1316:	be 01       	movw	r22, r28
    1318:	86 ee       	ldi	r24, 0xE6	; 230
    131a:	91 e0       	ldi	r25, 0x01	; 1
    131c:	09 95       	icall
		if(pdata->page){
    131e:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <data>
    1322:	88 23       	and	r24, r24
    1324:	71 f0       	breq	.+28     	; 0x1342 <LFSMdeleteall+0x74>
			pdata->page=ZERO;
    1326:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <data>
			r->eprom->update_block(pdata, (void*) (i1*sizeblock), sizeblock);
    132a:	d7 01       	movw	r26, r14
    132c:	ed 91       	ld	r30, X+
    132e:	fc 91       	ld	r31, X
    1330:	04 8c       	ldd	r0, Z+28	; 0x1c
    1332:	f5 8d       	ldd	r31, Z+29	; 0x1d
    1334:	e0 2d       	mov	r30, r0
    1336:	a6 01       	movw	r20, r12
    1338:	be 01       	movw	r22, r28
    133a:	86 ee       	ldi	r24, 0xE6	; 230
    133c:	91 e0       	ldi	r25, 0x01	; 1
    133e:	09 95       	icall
			status=1; //All deleted
    1340:	ab 2c       	mov	r10, r11
{
	uint16_t i1;
	uint8_t status=ZERO;
	uint8_t sizeblock=r->sizeblock;
	struct lfsmdata* pdata=&data;
	for(i1=ZERO;i1<r->sizeeeprom;i1++){
    1342:	0f 5f       	subi	r16, 0xFF	; 255
    1344:	1f 4f       	sbci	r17, 0xFF	; 255
    1346:	cc 0d       	add	r28, r12
    1348:	dd 1d       	adc	r29, r13
    134a:	f7 01       	movw	r30, r14
    134c:	82 81       	ldd	r24, Z+2	; 0x02
    134e:	93 81       	ldd	r25, Z+3	; 0x03
    1350:	08 17       	cp	r16, r24
    1352:	19 07       	cpc	r17, r25
    1354:	c8 f2       	brcs	.-78     	; 0x1308 <LFSMdeleteall+0x3a>
    1356:	01 c0       	rjmp	.+2      	; 0x135a <LFSMdeleteall+0x8c>
}//End main
/***deleteall***/
uint8_t LFSMdeleteall(struct lfsm *r)
{
	uint16_t i1;
	uint8_t status=ZERO;
    1358:	a1 2c       	mov	r10, r1
			pdata->page=ZERO;
			r->eprom->update_block(pdata, (void*) (i1*sizeblock), sizeblock);
			status=1; //All deleted
		}
	}
	r->output=ZERO;
    135a:	d7 01       	movw	r26, r14
    135c:	17 96       	adiw	r26, 0x07	; 7
    135e:	1c 92       	st	X, r1
    1360:	17 97       	sbiw	r26, 0x07	; 7
	r->status=ZERO;
    1362:	18 96       	adiw	r26, 0x08	; 8
    1364:	1c 92       	st	X, r1
	return status;
}
    1366:	8a 2d       	mov	r24, r10
    1368:	df 91       	pop	r29
    136a:	cf 91       	pop	r28
    136c:	1f 91       	pop	r17
    136e:	0f 91       	pop	r16
    1370:	ff 90       	pop	r15
    1372:	ef 90       	pop	r14
    1374:	df 90       	pop	r13
    1376:	cf 90       	pop	r12
    1378:	bf 90       	pop	r11
    137a:	af 90       	pop	r10
    137c:	08 95       	ret

0000137e <LFSMgetoutput>:
/***get***/
uint8_t LFSMgetoutput(struct lfsm *r)
{
	return r->output;
}
    137e:	fc 01       	movw	r30, r24
    1380:	87 81       	ldd	r24, Z+7	; 0x07
    1382:	08 95       	ret

00001384 <LFSMgetstatus>:
/***get***/
uint8_t LFSMgetstatus(struct lfsm *r)
{
	return r->status;
}
    1384:	fc 01       	movw	r30, r24
    1386:	80 85       	ldd	r24, Z+8	; 0x08
    1388:	08 95       	ret

0000138a <LFSMsetoutput>:
/***set***/
void LFSMsetoutput(struct lfsm *r, uint8_t output)
{
	r->output=output;
    138a:	fc 01       	movw	r30, r24
    138c:	67 83       	std	Z+7, r22	; 0x07
	r->status=ZERO;
    138e:	10 86       	std	Z+8, r1	; 0x08
    1390:	08 95       	ret

00001392 <LFSMgetpage>:
}
/***get***/
uint8_t LFSMgetpage(struct lfsm *r)
{
	return r->page;
}
    1392:	fc 01       	movw	r30, r24
    1394:	85 81       	ldd	r24, Z+5	; 0x05
    1396:	08 95       	ret

00001398 <LFSMsetpage>:
/***set***/
void LFSMsetpage(struct lfsm *r, uint8_t page)
{
	r->page=page;
    1398:	fc 01       	movw	r30, r24
    139a:	65 83       	std	Z+5, r22	; 0x05
    139c:	08 95       	ret

0000139e <LFSMread>:
/*
** procedure and function
*/
/***read***/
uint8_t LFSMread(struct lfsm *r, uint8_t input)
{
    139e:	2f 92       	push	r2
    13a0:	3f 92       	push	r3
    13a2:	4f 92       	push	r4
    13a4:	5f 92       	push	r5
    13a6:	6f 92       	push	r6
    13a8:	7f 92       	push	r7
    13aa:	8f 92       	push	r8
    13ac:	9f 92       	push	r9
    13ae:	af 92       	push	r10
    13b0:	bf 92       	push	r11
    13b2:	cf 92       	push	r12
    13b4:	df 92       	push	r13
    13b6:	ef 92       	push	r14
    13b8:	ff 92       	push	r15
    13ba:	0f 93       	push	r16
    13bc:	1f 93       	push	r17
    13be:	cf 93       	push	r28
    13c0:	df 93       	push	r29
    13c2:	8c 01       	movw	r16, r24
    13c4:	c6 2e       	mov	r12, r22
	struct lfsmdata* pdata=&data;
	int16_t n=ZERO;
	uint8_t n1=NPAGES,n2=NPAGES;
	uint8_t page=r->page;
	uint8_t HL,LH;
	HL=LFSMhl(r->input,input);
    13c6:	dc 01       	movw	r26, r24
    13c8:	16 96       	adiw	r26, 0x06	; 6
    13ca:	dc 90       	ld	r13, X
    13cc:	16 97       	sbiw	r26, 0x06	; 6
	LH=LFSMlh(r->input,input);
	if(HL || LH){ //To not waste time
    13ce:	bd 2c       	mov	r11, r13
    13d0:	b6 26       	eor	r11, r22
    13d2:	d6 16       	cp	r13, r22
    13d4:	09 f4       	brne	.+2      	; 0x13d8 <LFSMread+0x3a>
    13d6:	1a c1       	rjmp	.+564    	; 0x160c <LFSMread+0x26e>
		status=1; //New entry
		for(i1=ZERO;i1<r->sizeeeprom;i1++){
    13d8:	12 96       	adiw	r26, 0x02	; 2
    13da:	8d 91       	ld	r24, X+
    13dc:	9c 91       	ld	r25, X
    13de:	13 97       	sbiw	r26, 0x03	; 3
    13e0:	89 2b       	or	r24, r25
    13e2:	09 f4       	brne	.+2      	; 0x13e6 <LFSMread+0x48>
    13e4:	a2 c0       	rjmp	.+324    	; 0x152a <LFSMread+0x18c>
/***read***/
uint8_t LFSMread(struct lfsm *r, uint8_t input)
{
	uint16_t i1;
	uint8_t status=ZERO;
	uint8_t sizeblock=r->sizeblock;
    13e6:	14 96       	adiw	r26, 0x04	; 4
    13e8:	ec 90       	ld	r14, X
    13ea:	14 97       	sbiw	r26, 0x04	; 4
	struct lfsmdata* pdata=&data;
	int16_t n=ZERO;
	uint8_t n1=NPAGES,n2=NPAGES;
	uint8_t page=r->page;
    13ec:	15 96       	adiw	r26, 0x05	; 5
    13ee:	6c 90       	ld	r6, X
/***hl***/
uint8_t LFSMhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xf^xi;
	i&=xi;
    13f0:	db 20       	and	r13, r11
/***lh***/
uint8_t LFSMlh(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xf^xi;
	i&=xf;
    13f2:	b6 22       	and	r11, r22
    13f4:	55 24       	eor	r5, r5
    13f6:	5a 94       	dec	r5
    13f8:	77 24       	eor	r7, r7
    13fa:	7a 94       	dec	r7
    13fc:	aa 24       	eor	r10, r10
    13fe:	a3 94       	inc	r10
    1400:	c0 e0       	ldi	r28, 0x00	; 0
    1402:	d0 e0       	ldi	r29, 0x00	; 0
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(HL || LH){ //To not waste time
		status=1; //New entry
		for(i1=ZERO;i1<r->sizeeeprom;i1++){
			r->eprom->read_block(pdata, (const void*) (i1*sizeblock), sizeblock);
    1404:	f1 2c       	mov	r15, r1
							status=2; //Global logic exist
					}
					break;
				default: //Local logic
					if( (pdata->feedback & pdata->mask)==(r->output & pdata->mask) && pdata->inhl==HL && pdata->inlh==LH ){
						n=pdata->page - page;	
    1406:	86 2c       	mov	r8, r6
    1408:	91 2c       	mov	r9, r1
						}
						if(n<ZERO){
							if(n > -n2){
								tmp2=*pdata;
								n2=-n;
								status=4; //Local logic exist in page bellow
    140a:	68 94       	set
    140c:	22 24       	eor	r2, r2
    140e:	22 f8       	bld	r2, 2
				default: //Local logic
					if( (pdata->feedback & pdata->mask)==(r->output & pdata->mask) && pdata->inhl==HL && pdata->inlh==LH ){
						n=pdata->page - page;	
						if(!n){
							i1=r->sizeeeprom;
							status=3; //Local logic exist in present page
    1410:	0f 2e       	mov	r0, r31
    1412:	f3 e0       	ldi	r31, 0x03	; 3
    1414:	3f 2e       	mov	r3, r31
    1416:	f0 2d       	mov	r31, r0
					//Do nothing, continue search in status=1.
					break;
				case 1: //Global logic
					if( pdata->inhl==HL && pdata->inlh==LH ){
							i1=r->sizeeeprom;
							status=2; //Global logic exist
    1418:	68 94       	set
    141a:	44 24       	eor	r4, r4
    141c:	41 f8       	bld	r4, 1
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(HL || LH){ //To not waste time
		status=1; //New entry
		for(i1=ZERO;i1<r->sizeeeprom;i1++){
			r->eprom->read_block(pdata, (const void*) (i1*sizeblock), sizeblock);
    141e:	ec 9e       	mul	r14, r28
    1420:	b0 01       	movw	r22, r0
    1422:	ed 9e       	mul	r14, r29
    1424:	70 0d       	add	r23, r0
    1426:	fc 9e       	mul	r15, r28
    1428:	70 0d       	add	r23, r0
    142a:	11 24       	eor	r1, r1
    142c:	d8 01       	movw	r26, r16
    142e:	ed 91       	ld	r30, X+
    1430:	fc 91       	ld	r31, X
    1432:	00 8c       	ldd	r0, Z+24	; 0x18
    1434:	f1 8d       	ldd	r31, Z+25	; 0x19
    1436:	e0 2d       	mov	r30, r0
    1438:	a7 01       	movw	r20, r14
    143a:	86 ee       	ldi	r24, 0xE6	; 230
    143c:	91 e0       	ldi	r25, 0x01	; 1
    143e:	09 95       	icall
			switch(pdata->page){
    1440:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <data>
    1444:	88 23       	and	r24, r24
    1446:	09 f4       	brne	.+2      	; 0x144a <LFSMread+0xac>
    1448:	58 c0       	rjmp	.+176    	; 0x14fa <LFSMread+0x15c>
    144a:	81 30       	cpi	r24, 0x01	; 1
    144c:	69 f4       	brne	.+26     	; 0x1468 <LFSMread+0xca>
				case ZERO:
					//Do nothing, continue search in status=1.
					break;
				case 1: //Global logic
					if( pdata->inhl==HL && pdata->inlh==LH ){
    144e:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <data+0x2>
    1452:	9d 11       	cpse	r25, r13
    1454:	52 c0       	rjmp	.+164    	; 0x14fa <LFSMread+0x15c>
    1456:	90 91 e9 01 	lds	r25, 0x01E9	; 0x8001e9 <data+0x3>
    145a:	9b 11       	cpse	r25, r11
    145c:	4e c0       	rjmp	.+156    	; 0x14fa <LFSMread+0x15c>
							i1=r->sizeeeprom;
    145e:	f8 01       	movw	r30, r16
    1460:	c2 81       	ldd	r28, Z+2	; 0x02
    1462:	d3 81       	ldd	r29, Z+3	; 0x03
							status=2; //Global logic exist
    1464:	a4 2c       	mov	r10, r4
    1466:	49 c0       	rjmp	.+146    	; 0x14fa <LFSMread+0x15c>
					}
					break;
				default: //Local logic
					if( (pdata->feedback & pdata->mask)==(r->output & pdata->mask) && pdata->inhl==HL && pdata->inlh==LH ){
    1468:	e6 ee       	ldi	r30, 0xE6	; 230
    146a:	f1 e0       	ldi	r31, 0x01	; 1
    146c:	21 81       	ldd	r18, Z+1	; 0x01
    146e:	d8 01       	movw	r26, r16
    1470:	17 96       	adiw	r26, 0x07	; 7
    1472:	9c 91       	ld	r25, X
    1474:	17 97       	sbiw	r26, 0x07	; 7
    1476:	92 27       	eor	r25, r18
    1478:	24 81       	ldd	r18, Z+4	; 0x04
    147a:	92 23       	and	r25, r18
    147c:	09 f0       	breq	.+2      	; 0x1480 <LFSMread+0xe2>
    147e:	3d c0       	rjmp	.+122    	; 0x14fa <LFSMread+0x15c>
    1480:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <data+0x2>
    1484:	9d 11       	cpse	r25, r13
    1486:	39 c0       	rjmp	.+114    	; 0x14fa <LFSMread+0x15c>
    1488:	90 91 e9 01 	lds	r25, 0x01E9	; 0x8001e9 <data+0x3>
    148c:	9b 11       	cpse	r25, r11
    148e:	35 c0       	rjmp	.+106    	; 0x14fa <LFSMread+0x15c>
						n=pdata->page - page;	
    1490:	28 2f       	mov	r18, r24
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	28 19       	sub	r18, r8
    1496:	39 09       	sbc	r19, r9
						if(!n){
    1498:	31 f4       	brne	.+12     	; 0x14a6 <LFSMread+0x108>
							i1=r->sizeeeprom;
    149a:	12 96       	adiw	r26, 0x02	; 2
    149c:	cd 91       	ld	r28, X+
    149e:	dc 91       	ld	r29, X
    14a0:	13 97       	sbiw	r26, 0x03	; 3
							status=3; //Local logic exist in present page
    14a2:	a3 2c       	mov	r10, r3
							break;
    14a4:	2a c0       	rjmp	.+84     	; 0x14fa <LFSMread+0x15c>
						}
						if(n>ZERO){
    14a6:	12 16       	cp	r1, r18
    14a8:	13 06       	cpc	r1, r19
    14aa:	8c f4       	brge	.+34     	; 0x14ce <LFSMread+0x130>
							if(n < n1){
    14ac:	47 2d       	mov	r20, r7
    14ae:	50 e0       	ldi	r21, 0x00	; 0
    14b0:	24 17       	cp	r18, r20
    14b2:	35 07       	cpc	r19, r21
    14b4:	64 f4       	brge	.+24     	; 0x14ce <LFSMread+0x130>
								tmp1=*pdata;
    14b6:	97 e0       	ldi	r25, 0x07	; 7
    14b8:	e6 ee       	ldi	r30, 0xE6	; 230
    14ba:	f1 e0       	ldi	r31, 0x01	; 1
    14bc:	a3 e1       	ldi	r26, 0x13	; 19
    14be:	b2 e0       	ldi	r27, 0x02	; 2
    14c0:	01 90       	ld	r0, Z+
    14c2:	0d 92       	st	X+, r0
    14c4:	9a 95       	dec	r25
    14c6:	e1 f7       	brne	.-8      	; 0x14c0 <LFSMread+0x122>
    14c8:	78 2e       	mov	r7, r24
    14ca:	76 18       	sub	r7, r6
								n1=n;
								status=4; //Local logic exist in page above
    14cc:	a2 2c       	mov	r10, r2
							}
						}
						if(n<ZERO){
    14ce:	33 23       	and	r19, r19
    14d0:	a4 f4       	brge	.+40     	; 0x14fa <LFSMread+0x15c>
							if(n > -n2){
    14d2:	45 2d       	mov	r20, r5
    14d4:	50 e0       	ldi	r21, 0x00	; 0
    14d6:	51 95       	neg	r21
    14d8:	41 95       	neg	r20
    14da:	51 09       	sbc	r21, r1
    14dc:	42 17       	cp	r20, r18
    14de:	53 07       	cpc	r21, r19
    14e0:	64 f4       	brge	.+24     	; 0x14fa <LFSMread+0x15c>
								tmp2=*pdata;
    14e2:	97 e0       	ldi	r25, 0x07	; 7
    14e4:	e6 ee       	ldi	r30, 0xE6	; 230
    14e6:	f1 e0       	ldi	r31, 0x01	; 1
    14e8:	ac e0       	ldi	r26, 0x0C	; 12
    14ea:	b2 e0       	ldi	r27, 0x02	; 2
    14ec:	01 90       	ld	r0, Z+
    14ee:	0d 92       	st	X+, r0
    14f0:	9a 95       	dec	r25
    14f2:	e1 f7       	brne	.-8      	; 0x14ec <LFSMread+0x14e>
								n2=-n;
    14f4:	56 2c       	mov	r5, r6
    14f6:	58 1a       	sub	r5, r24
								status=4; //Local logic exist in page bellow
    14f8:	a2 2c       	mov	r10, r2
	uint8_t HL,LH;
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(HL || LH){ //To not waste time
		status=1; //New entry
		for(i1=ZERO;i1<r->sizeeeprom;i1++){
    14fa:	21 96       	adiw	r28, 0x01	; 1
    14fc:	f8 01       	movw	r30, r16
    14fe:	22 81       	ldd	r18, Z+2	; 0x02
    1500:	33 81       	ldd	r19, Z+3	; 0x03
    1502:	c2 17       	cp	r28, r18
    1504:	d3 07       	cpc	r29, r19
    1506:	08 f4       	brcc	.+2      	; 0x150a <LFSMread+0x16c>
    1508:	8a cf       	rjmp	.-236    	; 0x141e <LFSMread+0x80>
					break;
			}//End switch
		}
	}
/***status confirmation***/
	switch (status){
    150a:	f2 e0       	ldi	r31, 0x02	; 2
    150c:	af 16       	cp	r10, r31
    150e:	81 f0       	breq	.+32     	; 0x1530 <LFSMread+0x192>
    1510:	fa 15       	cp	r31, r10
    1512:	20 f0       	brcs	.+8      	; 0x151c <LFSMread+0x17e>
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	a8 16       	cp	r10, r24
    1518:	41 f0       	breq	.+16     	; 0x152a <LFSMread+0x18c>
    151a:	78 c0       	rjmp	.+240    	; 0x160c <LFSMread+0x26e>
    151c:	93 e0       	ldi	r25, 0x03	; 3
    151e:	a9 16       	cp	r10, r25
    1520:	11 f1       	breq	.+68     	; 0x1566 <LFSMread+0x1c8>
    1522:	a4 e0       	ldi	r26, 0x04	; 4
    1524:	aa 16       	cp	r10, r26
    1526:	b9 f1       	breq	.+110    	; 0x1596 <LFSMread+0x1f8>
    1528:	71 c0       	rjmp	.+226    	; 0x160c <LFSMread+0x26e>
		case ZERO: //No entry
			break;
		case 1: //New entry
			//Give warning and pause waiting for decision (very important).
			//Serves has flag to main function.
			r->input=input; //Update
    152a:	f8 01       	movw	r30, r16
    152c:	c6 82       	std	Z+6, r12	; 0x06
			break;
    152e:	6e c0       	rjmp	.+220    	; 0x160c <LFSMread+0x26e>
		case 2: //Global logic exist
			r->page=pdata->page;
    1530:	d8 01       	movw	r26, r16
    1532:	15 96       	adiw	r26, 0x05	; 5
    1534:	8c 93       	st	X, r24
    1536:	15 97       	sbiw	r26, 0x05	; 5
			r->input=input; //Update
    1538:	16 96       	adiw	r26, 0x06	; 6
    153a:	cc 92       	st	X, r12
    153c:	16 97       	sbiw	r26, 0x06	; 6
			r->output=LFSMoutputcalc(r->output,pdata->outhl,pdata->outlh,pdata->mask);
    153e:	e6 ee       	ldi	r30, 0xE6	; 230
    1540:	f1 e0       	ldi	r31, 0x01	; 1
    1542:	34 81       	ldd	r19, Z+4	; 0x04
*/
/***output***/
uint8_t LFSMoutputcalc(uint8_t feedback, uint8_t hl, uint8_t lh, uint8_t mask)
{
	feedback|=(lh & mask);
	feedback&=~(hl & mask);
    1544:	86 81       	ldd	r24, Z+6	; 0x06
    1546:	83 23       	and	r24, r19
    1548:	17 96       	adiw	r26, 0x07	; 7
    154a:	2c 91       	ld	r18, X
    154c:	17 97       	sbiw	r26, 0x07	; 7
    154e:	82 2b       	or	r24, r18
    1550:	95 81       	ldd	r25, Z+5	; 0x05
    1552:	93 23       	and	r25, r19
    1554:	90 95       	com	r25
    1556:	89 23       	and	r24, r25
			r->input=input; //Update
			break;
		case 2: //Global logic exist
			r->page=pdata->page;
			r->input=input; //Update
			r->output=LFSMoutputcalc(r->output,pdata->outhl,pdata->outlh,pdata->mask);
    1558:	17 96       	adiw	r26, 0x07	; 7
    155a:	8c 93       	st	X, r24
    155c:	17 97       	sbiw	r26, 0x07	; 7
			r->status=2;
    155e:	82 e0       	ldi	r24, 0x02	; 2
    1560:	18 96       	adiw	r26, 0x08	; 8
    1562:	8c 93       	st	X, r24
			break;
    1564:	53 c0       	rjmp	.+166    	; 0x160c <LFSMread+0x26e>
		case 3: //Local logic exist in present page
			r->page=pdata->page;
    1566:	f8 01       	movw	r30, r16
    1568:	85 83       	std	Z+5, r24	; 0x05
			r->input=input; //Update
    156a:	c6 82       	std	Z+6, r12	; 0x06
			r->output=LFSMoutputcalc(r->output,pdata->outhl,pdata->outlh,pdata->mask);
    156c:	e6 ee       	ldi	r30, 0xE6	; 230
    156e:	f1 e0       	ldi	r31, 0x01	; 1
    1570:	34 81       	ldd	r19, Z+4	; 0x04
*/
/***output***/
uint8_t LFSMoutputcalc(uint8_t feedback, uint8_t hl, uint8_t lh, uint8_t mask)
{
	feedback|=(lh & mask);
	feedback&=~(hl & mask);
    1572:	86 81       	ldd	r24, Z+6	; 0x06
    1574:	83 23       	and	r24, r19
    1576:	d8 01       	movw	r26, r16
    1578:	17 96       	adiw	r26, 0x07	; 7
    157a:	2c 91       	ld	r18, X
    157c:	17 97       	sbiw	r26, 0x07	; 7
    157e:	82 2b       	or	r24, r18
    1580:	95 81       	ldd	r25, Z+5	; 0x05
    1582:	93 23       	and	r25, r19
    1584:	90 95       	com	r25
    1586:	89 23       	and	r24, r25
			r->status=2;
			break;
		case 3: //Local logic exist in present page
			r->page=pdata->page;
			r->input=input; //Update
			r->output=LFSMoutputcalc(r->output,pdata->outhl,pdata->outlh,pdata->mask);
    1588:	17 96       	adiw	r26, 0x07	; 7
    158a:	8c 93       	st	X, r24
    158c:	17 97       	sbiw	r26, 0x07	; 7
			r->status=3;
    158e:	83 e0       	ldi	r24, 0x03	; 3
    1590:	18 96       	adiw	r26, 0x08	; 8
    1592:	8c 93       	st	X, r24
			break;
    1594:	3b c0       	rjmp	.+118    	; 0x160c <LFSMread+0x26e>
		case 4: //Local logic exist in page above versus local logic exist in page bellow
			//Choose closest page above otherwise closest bellow.
			r->input=input; //update
    1596:	f8 01       	movw	r30, r16
    1598:	c6 82       	std	Z+6, r12	; 0x06
			if(n1>ZERO && n1<NPAGES){
    159a:	8f ef       	ldi	r24, 0xFF	; 255
    159c:	87 0d       	add	r24, r7
    159e:	8e 3f       	cpi	r24, 0xFE	; 254
    15a0:	c8 f4       	brcc	.+50     	; 0x15d4 <LFSMread+0x236>
				r->page = tmp1.page;
    15a2:	e3 e1       	ldi	r30, 0x13	; 19
    15a4:	f2 e0       	ldi	r31, 0x02	; 2
    15a6:	80 81       	ld	r24, Z
    15a8:	d8 01       	movw	r26, r16
    15aa:	15 96       	adiw	r26, 0x05	; 5
    15ac:	8c 93       	st	X, r24
    15ae:	15 97       	sbiw	r26, 0x05	; 5
				r->output=LFSMoutputcalc(r->output,tmp1.outhl,tmp1.outlh,tmp1.mask);
    15b0:	84 81       	ldd	r24, Z+4	; 0x04
*/
/***output***/
uint8_t LFSMoutputcalc(uint8_t feedback, uint8_t hl, uint8_t lh, uint8_t mask)
{
	feedback|=(lh & mask);
	feedback&=~(hl & mask);
    15b2:	26 81       	ldd	r18, Z+6	; 0x06
    15b4:	28 23       	and	r18, r24
    15b6:	17 96       	adiw	r26, 0x07	; 7
    15b8:	9c 91       	ld	r25, X
    15ba:	17 97       	sbiw	r26, 0x07	; 7
    15bc:	29 2b       	or	r18, r25
    15be:	95 81       	ldd	r25, Z+5	; 0x05
    15c0:	89 23       	and	r24, r25
    15c2:	80 95       	com	r24
    15c4:	82 23       	and	r24, r18
		case 4: //Local logic exist in page above versus local logic exist in page bellow
			//Choose closest page above otherwise closest bellow.
			r->input=input; //update
			if(n1>ZERO && n1<NPAGES){
				r->page = tmp1.page;
				r->output=LFSMoutputcalc(r->output,tmp1.outhl,tmp1.outlh,tmp1.mask);
    15c6:	17 96       	adiw	r26, 0x07	; 7
    15c8:	8c 93       	st	X, r24
    15ca:	17 97       	sbiw	r26, 0x07	; 7
				r->status=41;
    15cc:	89 e2       	ldi	r24, 0x29	; 41
    15ce:	18 96       	adiw	r26, 0x08	; 8
    15d0:	8c 93       	st	X, r24
    15d2:	1c c0       	rjmp	.+56     	; 0x160c <LFSMread+0x26e>
			}
			else if(n2>ZERO && n2<NPAGES){
    15d4:	8f ef       	ldi	r24, 0xFF	; 255
    15d6:	85 0d       	add	r24, r5
    15d8:	8e 3f       	cpi	r24, 0xFE	; 254
    15da:	c0 f4       	brcc	.+48     	; 0x160c <LFSMread+0x26e>
				r->page=tmp2.page;
    15dc:	ec e0       	ldi	r30, 0x0C	; 12
    15de:	f2 e0       	ldi	r31, 0x02	; 2
    15e0:	80 81       	ld	r24, Z
    15e2:	d8 01       	movw	r26, r16
    15e4:	15 96       	adiw	r26, 0x05	; 5
    15e6:	8c 93       	st	X, r24
    15e8:	15 97       	sbiw	r26, 0x05	; 5
				r->output=LFSMoutputcalc(r->output,tmp2.outhl,tmp2.outlh,tmp2.mask);
    15ea:	84 81       	ldd	r24, Z+4	; 0x04
*/
/***output***/
uint8_t LFSMoutputcalc(uint8_t feedback, uint8_t hl, uint8_t lh, uint8_t mask)
{
	feedback|=(lh & mask);
	feedback&=~(hl & mask);
    15ec:	26 81       	ldd	r18, Z+6	; 0x06
    15ee:	28 23       	and	r18, r24
    15f0:	17 96       	adiw	r26, 0x07	; 7
    15f2:	9c 91       	ld	r25, X
    15f4:	17 97       	sbiw	r26, 0x07	; 7
    15f6:	29 2b       	or	r18, r25
    15f8:	95 81       	ldd	r25, Z+5	; 0x05
    15fa:	89 23       	and	r24, r25
    15fc:	80 95       	com	r24
    15fe:	82 23       	and	r24, r18
				r->output=LFSMoutputcalc(r->output,tmp1.outhl,tmp1.outlh,tmp1.mask);
				r->status=41;
			}
			else if(n2>ZERO && n2<NPAGES){
				r->page=tmp2.page;
				r->output=LFSMoutputcalc(r->output,tmp2.outhl,tmp2.outlh,tmp2.mask);
    1600:	17 96       	adiw	r26, 0x07	; 7
    1602:	8c 93       	st	X, r24
    1604:	17 97       	sbiw	r26, 0x07	; 7
				r->status=42;
    1606:	8a e2       	ldi	r24, 0x2A	; 42
    1608:	18 96       	adiw	r26, 0x08	; 8
    160a:	8c 93       	st	X, r24
			break;
		default:
			break;
	}//End switch
	return r->status;
}
    160c:	f8 01       	movw	r30, r16
    160e:	80 85       	ldd	r24, Z+8	; 0x08
    1610:	df 91       	pop	r29
    1612:	cf 91       	pop	r28
    1614:	1f 91       	pop	r17
    1616:	0f 91       	pop	r16
    1618:	ff 90       	pop	r15
    161a:	ef 90       	pop	r14
    161c:	df 90       	pop	r13
    161e:	cf 90       	pop	r12
    1620:	bf 90       	pop	r11
    1622:	af 90       	pop	r10
    1624:	9f 90       	pop	r9
    1626:	8f 90       	pop	r8
    1628:	7f 90       	pop	r7
    162a:	6f 90       	pop	r6
    162c:	5f 90       	pop	r5
    162e:	4f 90       	pop	r4
    1630:	3f 90       	pop	r3
    1632:	2f 90       	pop	r2
    1634:	08 95       	ret

00001636 <LFSMremove>:
	}
	return programmed;
}
/***remove***/
uint8_t LFSMremove(struct lfsm *r, uint8_t input)
{
    1636:	2f 92       	push	r2
    1638:	3f 92       	push	r3
    163a:	4f 92       	push	r4
    163c:	5f 92       	push	r5
    163e:	6f 92       	push	r6
    1640:	7f 92       	push	r7
    1642:	8f 92       	push	r8
    1644:	9f 92       	push	r9
    1646:	af 92       	push	r10
    1648:	bf 92       	push	r11
    164a:	cf 92       	push	r12
    164c:	df 92       	push	r13
    164e:	ef 92       	push	r14
    1650:	ff 92       	push	r15
    1652:	0f 93       	push	r16
    1654:	1f 93       	push	r17
    1656:	cf 93       	push	r28
    1658:	df 93       	push	r29
    165a:	00 d0       	rcall	.+0      	; 0x165c <LFSMremove+0x26>
    165c:	00 d0       	rcall	.+0      	; 0x165e <LFSMremove+0x28>
    165e:	00 d0       	rcall	.+0      	; 0x1660 <LFSMremove+0x2a>
    1660:	cd b7       	in	r28, 0x3d	; 61
    1662:	de b7       	in	r29, 0x3e	; 62
    1664:	fc 01       	movw	r30, r24
	uint16_t k,k1,k2,i1;
	k=k1=k2=ZERO;
	uint8_t status=ZERO;
	uint8_t sizeblock=r->sizeblock;
    1666:	04 81       	ldd	r16, Z+4	; 0x04
	struct lfsmdata* pdata=&data;
	struct lfsmdata* ptmp1=&tmp1;
	ptmp1->page=ZERO;
    1668:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <tmp1>
	int16_t n=ZERO;
	uint8_t n1=NPAGES,n2=NPAGES;
	uint8_t page=r->page;
	uint8_t HL,LH;
	HL=LFSMhl(r->input,input);
    166c:	b6 80       	ldd	r11, Z+6	; 0x06
	LH=LFSMlh(r->input,input);
	if(HL || LH){ //To not waste time
    166e:	9b 2c       	mov	r9, r11
    1670:	96 26       	eor	r9, r22
    1672:	b6 16       	cp	r11, r22
    1674:	09 f4       	brne	.+2      	; 0x1678 <LFSMremove+0x42>
    1676:	04 c1       	rjmp	.+520    	; 0x1880 <LFSMremove+0x24a>
		status=1; //New entry
		for(i1=ZERO;i1<r->sizeeeprom;i1++){
    1678:	82 81       	ldd	r24, Z+2	; 0x02
    167a:	93 81       	ldd	r25, Z+3	; 0x03
    167c:	89 2b       	or	r24, r25
    167e:	09 f4       	brne	.+2      	; 0x1682 <LFSMremove+0x4c>
    1680:	01 c1       	rjmp	.+514    	; 0x1884 <LFSMremove+0x24e>
    1682:	7f 01       	movw	r14, r30
	struct lfsmdata* pdata=&data;
	struct lfsmdata* ptmp1=&tmp1;
	ptmp1->page=ZERO;
	int16_t n=ZERO;
	uint8_t n1=NPAGES,n2=NPAGES;
	uint8_t page=r->page;
    1684:	75 80       	ldd	r7, Z+5	; 0x05
/***hl***/
uint8_t LFSMhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xf^xi;
	i&=xi;
    1686:	b9 20       	and	r11, r9
/***lh***/
uint8_t LFSMlh(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xf^xi;
	i&=xf;
    1688:	96 22       	and	r9, r22
    168a:	66 24       	eor	r6, r6
    168c:	6a 94       	dec	r6
    168e:	88 24       	eor	r8, r8
    1690:	8a 94       	dec	r8
    1692:	aa 24       	eor	r10, r10
    1694:	a3 94       	inc	r10
    1696:	1e 82       	std	Y+6, r1	; 0x06
    1698:	1d 82       	std	Y+5, r1	; 0x05
    169a:	1c 82       	std	Y+4, r1	; 0x04
    169c:	1b 82       	std	Y+3, r1	; 0x03
    169e:	1a 82       	std	Y+2, r1	; 0x02
    16a0:	19 82       	std	Y+1, r1	; 0x01
    16a2:	21 2c       	mov	r2, r1
    16a4:	31 2c       	mov	r3, r1
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(HL || LH){ //To not waste time
		status=1; //New entry
		for(i1=ZERO;i1<r->sizeeeprom;i1++){
			r->eprom->read_block(pdata, (const void*) (i1*sizeblock), sizeblock);
    16a6:	10 e0       	ldi	r17, 0x00	; 0
						status=2; //Global logic exist
					}
					break;
				default: //Local logic
					if( (pdata->feedback & pdata->mask)==(r->output & pdata->mask) && pdata->inhl==HL && pdata->inlh==LH ){
						n=pdata->page - page;
    16a8:	47 2c       	mov	r4, r7
    16aa:	51 2c       	mov	r5, r1
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(HL || LH){ //To not waste time
		status=1; //New entry
		for(i1=ZERO;i1<r->sizeeeprom;i1++){
			r->eprom->read_block(pdata, (const void*) (i1*sizeblock), sizeblock);
    16ac:	68 01       	movw	r12, r16
    16ae:	8d 81       	ldd	r24, Y+5	; 0x05
    16b0:	9e 81       	ldd	r25, Y+6	; 0x06
    16b2:	08 9f       	mul	r16, r24
    16b4:	b0 01       	movw	r22, r0
    16b6:	09 9f       	mul	r16, r25
    16b8:	70 0d       	add	r23, r0
    16ba:	18 9f       	mul	r17, r24
    16bc:	70 0d       	add	r23, r0
    16be:	11 24       	eor	r1, r1
    16c0:	d7 01       	movw	r26, r14
    16c2:	ed 91       	ld	r30, X+
    16c4:	fc 91       	ld	r31, X
    16c6:	00 8c       	ldd	r0, Z+24	; 0x18
    16c8:	f1 8d       	ldd	r31, Z+25	; 0x19
    16ca:	e0 2d       	mov	r30, r0
    16cc:	a8 01       	movw	r20, r16
    16ce:	86 ee       	ldi	r24, 0xE6	; 230
    16d0:	91 e0       	ldi	r25, 0x01	; 1
    16d2:	09 95       	icall
			switch(pdata->page){
    16d4:	40 91 e6 01 	lds	r20, 0x01E6	; 0x8001e6 <data>
    16d8:	44 23       	and	r20, r20
    16da:	09 f4       	brne	.+2      	; 0x16de <LFSMremove+0xa8>
    16dc:	60 c0       	rjmp	.+192    	; 0x179e <LFSMremove+0x168>
    16de:	41 30       	cpi	r20, 0x01	; 1
    16e0:	a1 f4       	brne	.+40     	; 0x170a <LFSMremove+0xd4>
				case 0:
					//Do nothing, continue search in status=1.
					break;
				case 1: //Global logic
					if( pdata->inhl==HL && pdata->inlh==LH ){
    16e2:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <data+0x2>
    16e6:	8b 11       	cpse	r24, r11
    16e8:	5a c0       	rjmp	.+180    	; 0x179e <LFSMremove+0x168>
    16ea:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <data+0x3>
    16ee:	89 11       	cpse	r24, r9
    16f0:	56 c0       	rjmp	.+172    	; 0x179e <LFSMremove+0x168>
						k=i1;
						i1=r->sizeeeprom;
    16f2:	2d 80       	ldd	r2, Y+5	; 0x05
    16f4:	3e 80       	ldd	r3, Y+6	; 0x06
    16f6:	f7 01       	movw	r30, r14
    16f8:	02 80       	ldd	r0, Z+2	; 0x02
    16fa:	f3 81       	ldd	r31, Z+3	; 0x03
    16fc:	e0 2d       	mov	r30, r0
    16fe:	fe 83       	std	Y+6, r31	; 0x06
    1700:	ed 83       	std	Y+5, r30	; 0x05
						status=2; //Global logic exist
    1702:	68 94       	set
    1704:	aa 24       	eor	r10, r10
    1706:	a1 f8       	bld	r10, 1
    1708:	4a c0       	rjmp	.+148    	; 0x179e <LFSMremove+0x168>
					}
					break;
				default: //Local logic
					if( (pdata->feedback & pdata->mask)==(r->output & pdata->mask) && pdata->inhl==HL && pdata->inlh==LH ){
    170a:	e6 ee       	ldi	r30, 0xE6	; 230
    170c:	f1 e0       	ldi	r31, 0x01	; 1
    170e:	91 81       	ldd	r25, Z+1	; 0x01
    1710:	d7 01       	movw	r26, r14
    1712:	17 96       	adiw	r26, 0x07	; 7
    1714:	8c 91       	ld	r24, X
    1716:	17 97       	sbiw	r26, 0x07	; 7
    1718:	89 27       	eor	r24, r25
    171a:	94 81       	ldd	r25, Z+4	; 0x04
    171c:	89 23       	and	r24, r25
    171e:	09 f0       	breq	.+2      	; 0x1722 <LFSMremove+0xec>
    1720:	3e c0       	rjmp	.+124    	; 0x179e <LFSMremove+0x168>
    1722:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <data+0x2>
    1726:	8b 11       	cpse	r24, r11
    1728:	3a c0       	rjmp	.+116    	; 0x179e <LFSMremove+0x168>
    172a:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <data+0x3>
    172e:	89 11       	cpse	r24, r9
    1730:	36 c0       	rjmp	.+108    	; 0x179e <LFSMremove+0x168>
						n=pdata->page - page;
    1732:	84 2f       	mov	r24, r20
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	84 19       	sub	r24, r4
    1738:	95 09       	sbc	r25, r5
						if(!n){
    173a:	69 f4       	brne	.+26     	; 0x1756 <LFSMremove+0x120>
							k=i1;
							i1=r->sizeeeprom;
							status=3; //Local logic exist in present page
							break;
    173c:	2d 80       	ldd	r2, Y+5	; 0x05
    173e:	3e 80       	ldd	r3, Y+6	; 0x06
				default: //Local logic
					if( (pdata->feedback & pdata->mask)==(r->output & pdata->mask) && pdata->inhl==HL && pdata->inlh==LH ){
						n=pdata->page - page;
						if(!n){
							k=i1;
							i1=r->sizeeeprom;
    1740:	12 96       	adiw	r26, 0x02	; 2
    1742:	ed 91       	ld	r30, X+
    1744:	fc 91       	ld	r31, X
    1746:	13 97       	sbiw	r26, 0x03	; 3
    1748:	fe 83       	std	Y+6, r31	; 0x06
    174a:	ed 83       	std	Y+5, r30	; 0x05
							status=3; //Local logic exist in present page
    174c:	0f 2e       	mov	r0, r31
    174e:	f3 e0       	ldi	r31, 0x03	; 3
    1750:	af 2e       	mov	r10, r31
    1752:	f0 2d       	mov	r31, r0
							break;
    1754:	24 c0       	rjmp	.+72     	; 0x179e <LFSMremove+0x168>
						}
						if(n>ZERO){
    1756:	18 16       	cp	r1, r24
    1758:	19 06       	cpc	r1, r25
    175a:	74 f4       	brge	.+28     	; 0x1778 <LFSMremove+0x142>
							if(n < n1){
    175c:	28 2d       	mov	r18, r8
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	82 17       	cp	r24, r18
    1762:	93 07       	cpc	r25, r19
    1764:	4c f4       	brge	.+18     	; 0x1778 <LFSMremove+0x142>
    1766:	84 2e       	mov	r8, r20
    1768:	87 18       	sub	r8, r7
    176a:	2d 81       	ldd	r18, Y+5	; 0x05
    176c:	3e 81       	ldd	r19, Y+6	; 0x06
    176e:	3a 83       	std	Y+2, r19	; 0x02
    1770:	29 83       	std	Y+1, r18	; 0x01
								k1=i1;
								n1=n;
								status=4; //Local logic exist in page above
    1772:	68 94       	set
    1774:	aa 24       	eor	r10, r10
    1776:	a2 f8       	bld	r10, 2
							}
						}
						if(n<ZERO){
    1778:	99 23       	and	r25, r25
    177a:	8c f4       	brge	.+34     	; 0x179e <LFSMremove+0x168>
							if(n > -n2){
    177c:	26 2d       	mov	r18, r6
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	31 95       	neg	r19
    1782:	21 95       	neg	r18
    1784:	31 09       	sbc	r19, r1
    1786:	28 17       	cp	r18, r24
    1788:	39 07       	cpc	r19, r25
    178a:	4c f4       	brge	.+18     	; 0x179e <LFSMremove+0x168>
								k2=i1;
								n2=-n;
    178c:	67 2c       	mov	r6, r7
    178e:	64 1a       	sub	r6, r20
    1790:	8d 81       	ldd	r24, Y+5	; 0x05
    1792:	9e 81       	ldd	r25, Y+6	; 0x06
    1794:	9c 83       	std	Y+4, r25	; 0x04
    1796:	8b 83       	std	Y+3, r24	; 0x03
								status=4; //Local logic exist in page bellow
    1798:	68 94       	set
    179a:	aa 24       	eor	r10, r10
    179c:	a2 f8       	bld	r10, 2
	uint8_t HL,LH;
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(HL || LH){ //To not waste time
		status=1; //New entry
		for(i1=ZERO;i1<r->sizeeeprom;i1++){
    179e:	ad 81       	ldd	r26, Y+5	; 0x05
    17a0:	be 81       	ldd	r27, Y+6	; 0x06
    17a2:	11 96       	adiw	r26, 0x01	; 1
    17a4:	be 83       	std	Y+6, r27	; 0x06
    17a6:	ad 83       	std	Y+5, r26	; 0x05
    17a8:	f7 01       	movw	r30, r14
    17aa:	82 81       	ldd	r24, Z+2	; 0x02
    17ac:	93 81       	ldd	r25, Z+3	; 0x03
    17ae:	a8 17       	cp	r26, r24
    17b0:	b9 07       	cpc	r27, r25
    17b2:	08 f4       	brcc	.+2      	; 0x17b6 <LFSMremove+0x180>
    17b4:	7b cf       	rjmp	.-266    	; 0x16ac <LFSMremove+0x76>
				break;
			}//End switch
		}//End for
	}//End if
	/***status confirmation***/
	switch (status){
    17b6:	f3 e0       	ldi	r31, 0x03	; 3
    17b8:	af 16       	cp	r10, r31
    17ba:	c1 f0       	breq	.+48     	; 0x17ec <LFSMremove+0x1b6>
    17bc:	24 e0       	ldi	r18, 0x04	; 4
    17be:	a2 16       	cp	r10, r18
    17c0:	39 f1       	breq	.+78     	; 0x1810 <LFSMremove+0x1da>
    17c2:	32 e0       	ldi	r19, 0x02	; 2
    17c4:	a3 12       	cpse	r10, r19
    17c6:	60 c0       	rjmp	.+192    	; 0x1888 <LFSMremove+0x252>
		case ZERO: //No entry
			break;
		case 1: //New entry
			break;
		case 2: //Global logic exist
			r->eprom->update_block(ptmp1, (void*) (k*sizeblock), sizeblock);
    17c8:	2c 9c       	mul	r2, r12
    17ca:	b0 01       	movw	r22, r0
    17cc:	2d 9c       	mul	r2, r13
    17ce:	70 0d       	add	r23, r0
    17d0:	3c 9c       	mul	r3, r12
    17d2:	70 0d       	add	r23, r0
    17d4:	11 24       	eor	r1, r1
    17d6:	d7 01       	movw	r26, r14
    17d8:	ed 91       	ld	r30, X+
    17da:	fc 91       	ld	r31, X
    17dc:	04 8c       	ldd	r0, Z+28	; 0x1c
    17de:	f5 8d       	ldd	r31, Z+29	; 0x1d
    17e0:	e0 2d       	mov	r30, r0
    17e2:	a6 01       	movw	r20, r12
    17e4:	83 e1       	ldi	r24, 0x13	; 19
    17e6:	92 e0       	ldi	r25, 0x02	; 2
    17e8:	09 95       	icall
			break;
    17ea:	4e c0       	rjmp	.+156    	; 0x1888 <LFSMremove+0x252>
		case 3: //Local logic exist in present page
			r->eprom->update_block(ptmp1, (void*) (k*sizeblock), sizeblock);
    17ec:	2c 9c       	mul	r2, r12
    17ee:	b0 01       	movw	r22, r0
    17f0:	2d 9c       	mul	r2, r13
    17f2:	70 0d       	add	r23, r0
    17f4:	3c 9c       	mul	r3, r12
    17f6:	70 0d       	add	r23, r0
    17f8:	11 24       	eor	r1, r1
    17fa:	d7 01       	movw	r26, r14
    17fc:	ed 91       	ld	r30, X+
    17fe:	fc 91       	ld	r31, X
    1800:	04 8c       	ldd	r0, Z+28	; 0x1c
    1802:	f5 8d       	ldd	r31, Z+29	; 0x1d
    1804:	e0 2d       	mov	r30, r0
    1806:	a6 01       	movw	r20, r12
    1808:	83 e1       	ldi	r24, 0x13	; 19
    180a:	92 e0       	ldi	r25, 0x02	; 2
    180c:	09 95       	icall
			break;
    180e:	3c c0       	rjmp	.+120    	; 0x1888 <LFSMremove+0x252>
		case 4: //Local logic exist in page above versus local logic exist in page bellow
			//choose closest page above otherwise closest bellow.
			if(n1>ZERO && n1<NPAGES){
    1810:	8f ef       	ldi	r24, 0xFF	; 255
    1812:	88 0d       	add	r24, r8
    1814:	8e 3f       	cpi	r24, 0xFE	; 254
    1816:	c0 f4       	brcc	.+48     	; 0x1848 <LFSMremove+0x212>
				r->eprom->update_block(ptmp1, (void*) (k1*sizeblock), sizeblock);
    1818:	e9 81       	ldd	r30, Y+1	; 0x01
    181a:	fa 81       	ldd	r31, Y+2	; 0x02
    181c:	ec 9d       	mul	r30, r12
    181e:	b0 01       	movw	r22, r0
    1820:	ed 9d       	mul	r30, r13
    1822:	70 0d       	add	r23, r0
    1824:	fc 9d       	mul	r31, r12
    1826:	70 0d       	add	r23, r0
    1828:	11 24       	eor	r1, r1
    182a:	d7 01       	movw	r26, r14
    182c:	ed 91       	ld	r30, X+
    182e:	fc 91       	ld	r31, X
    1830:	04 8c       	ldd	r0, Z+28	; 0x1c
    1832:	f5 8d       	ldd	r31, Z+29	; 0x1d
    1834:	e0 2d       	mov	r30, r0
    1836:	a6 01       	movw	r20, r12
    1838:	83 e1       	ldi	r24, 0x13	; 19
    183a:	92 e0       	ldi	r25, 0x02	; 2
    183c:	09 95       	icall
				status=41;
    183e:	0f 2e       	mov	r0, r31
    1840:	f9 e2       	ldi	r31, 0x29	; 41
    1842:	af 2e       	mov	r10, r31
    1844:	f0 2d       	mov	r31, r0
    1846:	20 c0       	rjmp	.+64     	; 0x1888 <LFSMremove+0x252>
			}
			else if(n2>ZERO && n2<NPAGES){
    1848:	8f ef       	ldi	r24, 0xFF	; 255
    184a:	86 0d       	add	r24, r6
    184c:	8e 3f       	cpi	r24, 0xFE	; 254
    184e:	e0 f4       	brcc	.+56     	; 0x1888 <LFSMremove+0x252>
				r->eprom->update_block(ptmp1, (void*) (k2*sizeblock), sizeblock);
    1850:	eb 81       	ldd	r30, Y+3	; 0x03
    1852:	fc 81       	ldd	r31, Y+4	; 0x04
    1854:	ec 9d       	mul	r30, r12
    1856:	b0 01       	movw	r22, r0
    1858:	ed 9d       	mul	r30, r13
    185a:	70 0d       	add	r23, r0
    185c:	fc 9d       	mul	r31, r12
    185e:	70 0d       	add	r23, r0
    1860:	11 24       	eor	r1, r1
    1862:	d7 01       	movw	r26, r14
    1864:	ed 91       	ld	r30, X+
    1866:	fc 91       	ld	r31, X
    1868:	04 8c       	ldd	r0, Z+28	; 0x1c
    186a:	f5 8d       	ldd	r31, Z+29	; 0x1d
    186c:	e0 2d       	mov	r30, r0
    186e:	a6 01       	movw	r20, r12
    1870:	83 e1       	ldi	r24, 0x13	; 19
    1872:	92 e0       	ldi	r25, 0x02	; 2
    1874:	09 95       	icall
				status=42;
    1876:	0f 2e       	mov	r0, r31
    1878:	fa e2       	ldi	r31, 0x2A	; 42
    187a:	af 2e       	mov	r10, r31
    187c:	f0 2d       	mov	r31, r0
    187e:	04 c0       	rjmp	.+8      	; 0x1888 <LFSMremove+0x252>
/***remove***/
uint8_t LFSMremove(struct lfsm *r, uint8_t input)
{
	uint16_t k,k1,k2,i1;
	k=k1=k2=ZERO;
	uint8_t status=ZERO;
    1880:	a1 2c       	mov	r10, r1
    1882:	02 c0       	rjmp	.+4      	; 0x1888 <LFSMremove+0x252>
	uint8_t HL,LH;
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(HL || LH){ //To not waste time
		status=1; //New entry
		for(i1=ZERO;i1<r->sizeeeprom;i1++){
    1884:	aa 24       	eor	r10, r10
    1886:	a3 94       	inc	r10
			break;
		default:
			break;
	}//End switch
	return status;
}//End main
    1888:	8a 2d       	mov	r24, r10
    188a:	26 96       	adiw	r28, 0x06	; 6
    188c:	0f b6       	in	r0, 0x3f	; 63
    188e:	f8 94       	cli
    1890:	de bf       	out	0x3e, r29	; 62
    1892:	0f be       	out	0x3f, r0	; 63
    1894:	cd bf       	out	0x3d, r28	; 61
    1896:	df 91       	pop	r29
    1898:	cf 91       	pop	r28
    189a:	1f 91       	pop	r17
    189c:	0f 91       	pop	r16
    189e:	ff 90       	pop	r15
    18a0:	ef 90       	pop	r14
    18a2:	df 90       	pop	r13
    18a4:	cf 90       	pop	r12
    18a6:	bf 90       	pop	r11
    18a8:	af 90       	pop	r10
    18aa:	9f 90       	pop	r9
    18ac:	8f 90       	pop	r8
    18ae:	7f 90       	pop	r7
    18b0:	6f 90       	pop	r6
    18b2:	5f 90       	pop	r5
    18b4:	4f 90       	pop	r4
    18b6:	3f 90       	pop	r3
    18b8:	2f 90       	pop	r2
    18ba:	08 95       	ret

000018bc <LFSMlearn>:
	}//End switch
	return r->status;
}
/***learn***/
uint8_t LFSMlearn(struct lfsm *r, const uint8_t input, const uint8_t next, const uint8_t mask, const uint8_t page)
{
    18bc:	5f 92       	push	r5
    18be:	6f 92       	push	r6
    18c0:	7f 92       	push	r7
    18c2:	8f 92       	push	r8
    18c4:	9f 92       	push	r9
    18c6:	af 92       	push	r10
    18c8:	bf 92       	push	r11
    18ca:	cf 92       	push	r12
    18cc:	df 92       	push	r13
    18ce:	ef 92       	push	r14
    18d0:	ff 92       	push	r15
    18d2:	0f 93       	push	r16
    18d4:	1f 93       	push	r17
    18d6:	cf 93       	push	r28
    18d8:	df 93       	push	r29
	struct lfsmdata* pdata=&data;
	struct lfsmdata* ptmp1=&tmp1;
	uint8_t HL,LH;
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(page>ZERO){ //Enable
    18da:	00 23       	and	r16, r16
    18dc:	09 f4       	brne	.+2      	; 0x18e0 <LFSMlearn+0x24>
    18de:	a1 c0       	rjmp	.+322    	; 0x1a22 <LFSMlearn+0x166>
	uint8_t status=ZERO;
	uint8_t sizeblock=r->sizeblock;
	struct lfsmdata* pdata=&data;
	struct lfsmdata* ptmp1=&tmp1;
	uint8_t HL,LH;
	HL=LFSMhl(r->input,input);
    18e0:	dc 01       	movw	r26, r24
    18e2:	16 96       	adiw	r26, 0x06	; 6
    18e4:	7c 90       	ld	r7, X
    18e6:	16 97       	sbiw	r26, 0x06	; 6
	LH=LFSMlh(r->input,input);
	if(page>ZERO){ //Enable
		if(HL || LH){ //There is a change ?
    18e8:	57 2c       	mov	r5, r7
    18ea:	56 26       	eor	r5, r22
    18ec:	76 16       	cp	r7, r22
    18ee:	09 f4       	brne	.+2      	; 0x18f2 <LFSMlearn+0x36>
    18f0:	9a c0       	rjmp	.+308    	; 0x1a26 <LFSMlearn+0x16a>
			for(i1=ZERO;i1<r->sizeeeprom;i1++){
    18f2:	12 96       	adiw	r26, 0x02	; 2
    18f4:	ed 91       	ld	r30, X+
    18f6:	fc 91       	ld	r31, X
    18f8:	13 97       	sbiw	r26, 0x03	; 3
    18fa:	ef 2b       	or	r30, r31
    18fc:	09 f4       	brne	.+2      	; 0x1900 <LFSMlearn+0x44>
    18fe:	95 c0       	rjmp	.+298    	; 0x1a2a <LFSMlearn+0x16e>
    1900:	90 2e       	mov	r9, r16
    1902:	82 2e       	mov	r8, r18
    1904:	64 2e       	mov	r6, r20
    1906:	7c 01       	movw	r14, r24
/***hl***/
uint8_t LFSMhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xf^xi;
	i&=xi;
    1908:	75 20       	and	r7, r5
/***lh***/
uint8_t LFSMlh(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xf^xi;
	i&=xf;
    190a:	56 22       	and	r5, r22
    190c:	fc 01       	movw	r30, r24
    190e:	c4 80       	ldd	r12, Z+4	; 0x04
    1910:	d1 2c       	mov	r13, r1
    1912:	a1 2c       	mov	r10, r1
    1914:	b1 2c       	mov	r11, r1
    1916:	10 e0       	ldi	r17, 0x00	; 0
    1918:	c0 e0       	ldi	r28, 0x00	; 0
    191a:	d0 e0       	ldi	r29, 0x00	; 0
					if( (pdata->page==1 && pdata->inhl==HL && pdata->inlh==LH)
					|| (pdata->page==page && (pdata->feedback & mask)==(r->output & mask) && pdata->inhl==HL && pdata->inlh==LH) ){
						break;
					}
				}
				status=1; //Record
    191c:	01 e0       	ldi	r16, 0x01	; 1
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(page>ZERO){ //Enable
		if(HL || LH){ //There is a change ?
			for(i1=ZERO;i1<r->sizeeeprom;i1++){
				r->eprom->read_block(pdata, (const void*) (i1*sizeblock), sizeblock);
    191e:	d7 01       	movw	r26, r14
    1920:	ed 91       	ld	r30, X+
    1922:	fc 91       	ld	r31, X
    1924:	00 8c       	ldd	r0, Z+24	; 0x18
    1926:	f1 8d       	ldd	r31, Z+25	; 0x19
    1928:	e0 2d       	mov	r30, r0
    192a:	a6 01       	movw	r20, r12
    192c:	b5 01       	movw	r22, r10
    192e:	86 ee       	ldi	r24, 0xE6	; 230
    1930:	91 e0       	ldi	r25, 0x01	; 1
    1932:	09 95       	icall
				if(pdata->page){ //Find if it exists already
    1934:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <data>
    1938:	88 23       	and	r24, r24
    193a:	99 f0       	breq	.+38     	; 0x1962 <LFSMlearn+0xa6>
					if( (pdata->page==1 && pdata->inhl==HL && pdata->inlh==LH)
    193c:	81 30       	cpi	r24, 0x01	; 1
    193e:	49 f0       	breq	.+18     	; 0x1952 <LFSMlearn+0x96>
					|| (pdata->page==page && (pdata->feedback & mask)==(r->output & mask) && pdata->inhl==HL && pdata->inlh==LH) ){
    1940:	98 12       	cpse	r9, r24
    1942:	0f c0       	rjmp	.+30     	; 0x1962 <LFSMlearn+0xa6>
    1944:	90 91 e7 01 	lds	r25, 0x01E7	; 0x8001e7 <data+0x1>
    1948:	f7 01       	movw	r30, r14
    194a:	87 81       	ldd	r24, Z+7	; 0x07
    194c:	89 27       	eor	r24, r25
    194e:	88 21       	and	r24, r8
    1950:	41 f4       	brne	.+16     	; 0x1962 <LFSMlearn+0xa6>
    1952:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <data+0x2>
    1956:	87 11       	cpse	r24, r7
    1958:	04 c0       	rjmp	.+8      	; 0x1962 <LFSMlearn+0xa6>
    195a:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <data+0x3>
    195e:	85 15       	cp	r24, r5
    1960:	69 f0       	breq	.+26     	; 0x197c <LFSMlearn+0xc0>
	uint8_t HL,LH;
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(page>ZERO){ //Enable
		if(HL || LH){ //There is a change ?
			for(i1=ZERO;i1<r->sizeeeprom;i1++){
    1962:	21 96       	adiw	r28, 0x01	; 1
    1964:	ac 0c       	add	r10, r12
    1966:	bd 1c       	adc	r11, r13
					if( (pdata->page==1 && pdata->inhl==HL && pdata->inlh==LH)
					|| (pdata->page==page && (pdata->feedback & mask)==(r->output & mask) && pdata->inhl==HL && pdata->inlh==LH) ){
						break;
					}
				}
				status=1; //Record
    1968:	10 2f       	mov	r17, r16
	uint8_t HL,LH;
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(page>ZERO){ //Enable
		if(HL || LH){ //There is a change ?
			for(i1=ZERO;i1<r->sizeeeprom;i1++){
    196a:	d7 01       	movw	r26, r14
    196c:	12 96       	adiw	r26, 0x02	; 2
    196e:	8d 91       	ld	r24, X+
    1970:	9c 91       	ld	r25, X
    1972:	13 97       	sbiw	r26, 0x03	; 3
    1974:	c8 17       	cp	r28, r24
    1976:	d9 07       	cpc	r29, r25
    1978:	90 f2       	brcs	.-92     	; 0x191e <LFSMlearn+0x62>
    197a:	03 c0       	rjmp	.+6      	; 0x1982 <LFSMlearn+0xc6>
				}
				status=1; //Record
			}
		}
	}
	switch (status){
    197c:	11 30       	cpi	r17, 0x01	; 1
    197e:	09 f0       	breq	.+2      	; 0x1982 <LFSMlearn+0xc6>
    1980:	57 c0       	rjmp	.+174    	; 0x1a30 <LFSMlearn+0x174>
		case ZERO: //Not enabled
			break;
		case 1: //Record
			ptmp1->page=page;
    1982:	e3 e1       	ldi	r30, 0x13	; 19
    1984:	f2 e0       	ldi	r31, 0x02	; 2
    1986:	90 82       	st	Z, r9
			ptmp1->feedback=r->output;
    1988:	d7 01       	movw	r26, r14
    198a:	17 96       	adiw	r26, 0x07	; 7
    198c:	8c 91       	ld	r24, X
    198e:	81 83       	std	Z+1, r24	; 0x01
			ptmp1->inhl=HL;
    1990:	72 82       	std	Z+2, r7	; 0x02
			ptmp1->inlh=LH;
    1992:	53 82       	std	Z+3, r5	; 0x03
			ptmp1->mask=mask;
    1994:	84 82       	std	Z+4, r8	; 0x04
			if(page>1){ //Local logic
    1996:	b1 e0       	ldi	r27, 0x01	; 1
    1998:	b9 15       	cp	r27, r9
    199a:	40 f4       	brcc	.+16     	; 0x19ac <LFSMlearn+0xf0>
    199c:	28 2f       	mov	r18, r24
    199e:	26 25       	eor	r18, r6
    19a0:	82 22       	and	r8, r18
				ptmp1->outhl=LFSMhl(r->output,next) & mask;
    19a2:	88 21       	and	r24, r8
    19a4:	85 83       	std	Z+5, r24	; 0x05
				ptmp1->outlh=LFSMlh(r->output,next) & mask;
    19a6:	86 20       	and	r8, r6
    19a8:	86 82       	std	Z+6, r8	; 0x06
    19aa:	08 c0       	rjmp	.+16     	; 0x19bc <LFSMlearn+0x100>
			}else{ //Global logic
				ptmp1->outhl=LFSMhl(BYTEH,next) & mask;
    19ac:	e3 e1       	ldi	r30, 0x13	; 19
    19ae:	f2 e0       	ldi	r31, 0x02	; 2
    19b0:	86 2d       	mov	r24, r6
    19b2:	80 95       	com	r24
    19b4:	88 21       	and	r24, r8
    19b6:	85 83       	std	Z+5, r24	; 0x05
				ptmp1->outlh=LFSMlh(BYTEL,next) & mask;
    19b8:	86 20       	and	r8, r6
    19ba:	86 82       	std	Z+6, r8	; 0x06
			}
			for(i1=ZERO;i1<r->sizeeeprom;i1++){
    19bc:	f7 01       	movw	r30, r14
    19be:	82 81       	ldd	r24, Z+2	; 0x02
    19c0:	93 81       	ldd	r25, Z+3	; 0x03
    19c2:	89 2b       	or	r24, r25
    19c4:	a1 f1       	breq	.+104    	; 0x1a2e <LFSMlearn+0x172>
    19c6:	c0 e0       	ldi	r28, 0x00	; 0
    19c8:	d0 e0       	ldi	r29, 0x00	; 0
    19ca:	a1 2c       	mov	r10, r1
    19cc:	b1 2c       	mov	r11, r1
				r->eprom->read_block(pdata, (const void*) (i1*sizeblock), sizeblock);
    19ce:	d7 01       	movw	r26, r14
    19d0:	ed 91       	ld	r30, X+
    19d2:	fc 91       	ld	r31, X
    19d4:	00 8c       	ldd	r0, Z+24	; 0x18
    19d6:	f1 8d       	ldd	r31, Z+25	; 0x19
    19d8:	e0 2d       	mov	r30, r0
    19da:	a6 01       	movw	r20, r12
    19dc:	be 01       	movw	r22, r28
    19de:	86 ee       	ldi	r24, 0xE6	; 230
    19e0:	91 e0       	ldi	r25, 0x01	; 1
    19e2:	09 95       	icall
				if(pdata->page==ZERO){
    19e4:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <data>
    19e8:	81 11       	cpse	r24, r1
    19ea:	0e c0       	rjmp	.+28     	; 0x1a08 <LFSMlearn+0x14c>
					r->eprom->update_block(ptmp1, (void*) (i1*sizeblock), sizeblock);
    19ec:	d7 01       	movw	r26, r14
    19ee:	ed 91       	ld	r30, X+
    19f0:	fc 91       	ld	r31, X
    19f2:	04 8c       	ldd	r0, Z+28	; 0x1c
    19f4:	f5 8d       	ldd	r31, Z+29	; 0x1d
    19f6:	e0 2d       	mov	r30, r0
    19f8:	a6 01       	movw	r20, r12
    19fa:	6c 2f       	mov	r22, r28
    19fc:	7d 2f       	mov	r23, r29
    19fe:	83 e1       	ldi	r24, 0x13	; 19
    1a00:	92 e0       	ldi	r25, 0x02	; 2
    1a02:	09 95       	icall
					status=2; //Created
    1a04:	12 e0       	ldi	r17, 0x02	; 2
					break;
    1a06:	14 c0       	rjmp	.+40     	; 0x1a30 <LFSMlearn+0x174>
				ptmp1->outlh=LFSMlh(r->output,next) & mask;
			}else{ //Global logic
				ptmp1->outhl=LFSMhl(BYTEH,next) & mask;
				ptmp1->outlh=LFSMlh(BYTEL,next) & mask;
			}
			for(i1=ZERO;i1<r->sizeeeprom;i1++){
    1a08:	bf ef       	ldi	r27, 0xFF	; 255
    1a0a:	ab 1a       	sub	r10, r27
    1a0c:	bb 0a       	sbc	r11, r27
    1a0e:	cc 0d       	add	r28, r12
    1a10:	dd 1d       	adc	r29, r13
    1a12:	f7 01       	movw	r30, r14
    1a14:	82 81       	ldd	r24, Z+2	; 0x02
    1a16:	93 81       	ldd	r25, Z+3	; 0x03
    1a18:	a8 16       	cp	r10, r24
    1a1a:	b9 06       	cpc	r11, r25
    1a1c:	c0 f2       	brcs	.-80     	; 0x19ce <LFSMlearn+0x112>
				if(pdata->page==ZERO){
					r->eprom->update_block(ptmp1, (void*) (i1*sizeblock), sizeblock);
					status=2; //Created
					break;
				}
				status=3; //Memory full
    1a1e:	13 e0       	ldi	r17, 0x03	; 3
    1a20:	07 c0       	rjmp	.+14     	; 0x1a30 <LFSMlearn+0x174>
    1a22:	10 e0       	ldi	r17, 0x00	; 0
    1a24:	05 c0       	rjmp	.+10     	; 0x1a30 <LFSMlearn+0x174>
    1a26:	10 e0       	ldi	r17, 0x00	; 0
    1a28:	03 c0       	rjmp	.+6      	; 0x1a30 <LFSMlearn+0x174>
	uint8_t HL,LH;
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(page>ZERO){ //Enable
		if(HL || LH){ //There is a change ?
			for(i1=ZERO;i1<r->sizeeeprom;i1++){
    1a2a:	10 e0       	ldi	r17, 0x00	; 0
    1a2c:	01 c0       	rjmp	.+2      	; 0x1a30 <LFSMlearn+0x174>
				ptmp1->outlh=LFSMlh(r->output,next) & mask;
			}else{ //Global logic
				ptmp1->outhl=LFSMhl(BYTEH,next) & mask;
				ptmp1->outlh=LFSMlh(BYTEL,next) & mask;
			}
			for(i1=ZERO;i1<r->sizeeeprom;i1++){
    1a2e:	11 e0       	ldi	r17, 0x01	; 1
			break;
		default:
			break;
	}//End switch
	return status;
}
    1a30:	81 2f       	mov	r24, r17
    1a32:	df 91       	pop	r29
    1a34:	cf 91       	pop	r28
    1a36:	1f 91       	pop	r17
    1a38:	0f 91       	pop	r16
    1a3a:	ff 90       	pop	r15
    1a3c:	ef 90       	pop	r14
    1a3e:	df 90       	pop	r13
    1a40:	cf 90       	pop	r12
    1a42:	bf 90       	pop	r11
    1a44:	af 90       	pop	r10
    1a46:	9f 90       	pop	r9
    1a48:	8f 90       	pop	r8
    1a4a:	7f 90       	pop	r7
    1a4c:	6f 90       	pop	r6
    1a4e:	5f 90       	pop	r5
    1a50:	08 95       	ret

00001a52 <LFSMenable>:
uint8_t LFSMoutputcalc(uint8_t feedback, uint8_t hl, uint8_t lh, uint8_t mask);
/*
** Object Initialize
*/
LFSM LFSMenable(EEPROM* eeprom, const uint16_t sizeeeprom)
{
    1a52:	fc 01       	movw	r30, r24
	r.getstatus=LFSMgetstatus;
	r.setoutput=LFSMsetoutput;
	r.getpage=LFSMgetpage;
	r.setpage=LFSMsetpage;
	/******/
	return r;
    1a54:	71 83       	std	Z+1, r23	; 0x01
    1a56:	60 83       	st	Z, r22
    1a58:	53 83       	std	Z+3, r21	; 0x03
    1a5a:	42 83       	std	Z+2, r20	; 0x02
    1a5c:	87 e0       	ldi	r24, 0x07	; 7
    1a5e:	84 83       	std	Z+4, r24	; 0x04
    1a60:	15 82       	std	Z+5, r1	; 0x05
    1a62:	17 82       	std	Z+7, r1	; 0x07
    1a64:	8f ec       	ldi	r24, 0xCF	; 207
    1a66:	99 e0       	ldi	r25, 0x09	; 9
    1a68:	92 87       	std	Z+10, r25	; 0x0a
    1a6a:	81 87       	std	Z+9, r24	; 0x09
    1a6c:	8e e5       	ldi	r24, 0x5E	; 94
    1a6e:	9c e0       	ldi	r25, 0x0C	; 12
    1a70:	94 87       	std	Z+12, r25	; 0x0c
    1a72:	83 87       	std	Z+11, r24	; 0x0b
    1a74:	81 e2       	ldi	r24, 0x21	; 33
    1a76:	99 e0       	ldi	r25, 0x09	; 9
    1a78:	96 87       	std	Z+14, r25	; 0x0e
    1a7a:	85 87       	std	Z+13, r24	; 0x0d
    1a7c:	8b e1       	ldi	r24, 0x1B	; 27
    1a7e:	9b e0       	ldi	r25, 0x0B	; 11
    1a80:	90 8b       	std	Z+16, r25	; 0x10
    1a82:	87 87       	std	Z+15, r24	; 0x0f
    1a84:	87 e6       	ldi	r24, 0x67	; 103
    1a86:	99 e0       	ldi	r25, 0x09	; 9
    1a88:	92 8b       	std	Z+18, r25	; 0x12
    1a8a:	81 8b       	std	Z+17, r24	; 0x11
    1a8c:	8f eb       	ldi	r24, 0xBF	; 191
    1a8e:	99 e0       	ldi	r25, 0x09	; 9
    1a90:	94 8b       	std	Z+20, r25	; 0x14
    1a92:	83 8b       	std	Z+19, r24	; 0x13
    1a94:	82 ec       	ldi	r24, 0xC2	; 194
    1a96:	99 e0       	ldi	r25, 0x09	; 9
    1a98:	96 8b       	std	Z+22, r25	; 0x16
    1a9a:	85 8b       	std	Z+21, r24	; 0x15
    1a9c:	85 ec       	ldi	r24, 0xC5	; 197
    1a9e:	99 e0       	ldi	r25, 0x09	; 9
    1aa0:	90 8f       	std	Z+24, r25	; 0x18
    1aa2:	87 8b       	std	Z+23, r24	; 0x17
    1aa4:	89 ec       	ldi	r24, 0xC9	; 201
    1aa6:	99 e0       	ldi	r25, 0x09	; 9
    1aa8:	92 8f       	std	Z+26, r25	; 0x1a
    1aaa:	81 8f       	std	Z+25, r24	; 0x19
    1aac:	8c ec       	ldi	r24, 0xCC	; 204
    1aae:	99 e0       	ldi	r25, 0x09	; 9
    1ab0:	94 8f       	std	Z+28, r25	; 0x1c
    1ab2:	83 8f       	std	Z+27, r24	; 0x1b
}
    1ab4:	cf 01       	movw	r24, r30
    1ab6:	08 95       	ret

00001ab8 <RotEnc_rte>:
	/******/
	return rtnc;
}
/***Procedure & Function***/
ROTENC RotEnc_rte(ROTENC *self, uint8_t data)
{
    1ab8:	cf 93       	push	r28
    1aba:	df 93       	push	r29
    1abc:	cd b7       	in	r28, 0x3d	; 61
    1abe:	de b7       	in	r29, 0x3e	; 62
    1ac0:	27 97       	sbiw	r28, 0x07	; 7
    1ac2:	0f b6       	in	r0, 0x3f	; 63
    1ac4:	f8 94       	cli
    1ac6:	de bf       	out	0x3e, r29	; 62
    1ac8:	0f be       	out	0x3f, r0	; 63
    1aca:	cd bf       	out	0x3d, r28	; 61
    1acc:	fc 01       	movw	r30, r24
	uint8_t hl;
	self->chn=data & ((1<<self->PinChnB)|(1<<self->PinChnA));
    1ace:	31 81       	ldd	r19, Z+1	; 0x01
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	03 2e       	mov	r0, r19
    1ad8:	02 c0       	rjmp	.+4      	; 0x1ade <RotEnc_rte+0x26>
    1ada:	aa 0f       	add	r26, r26
    1adc:	bb 1f       	adc	r27, r27
    1ade:	0a 94       	dec	r0
    1ae0:	e2 f7       	brpl	.-8      	; 0x1ada <RotEnc_rte+0x22>
    1ae2:	70 81       	ld	r23, Z
    1ae4:	07 2e       	mov	r0, r23
    1ae6:	02 c0       	rjmp	.+4      	; 0x1aec <RotEnc_rte+0x34>
    1ae8:	88 0f       	add	r24, r24
    1aea:	99 1f       	adc	r25, r25
    1aec:	0a 94       	dec	r0
    1aee:	e2 f7       	brpl	.-8      	; 0x1ae8 <RotEnc_rte+0x30>
    1af0:	2a 2f       	mov	r18, r26
    1af2:	28 2b       	or	r18, r24
    1af4:	62 23       	and	r22, r18
    1af6:	63 83       	std	Z+3, r22	; 0x03
	hl=self->chn ^ self->pchn;
    1af8:	22 81       	ldd	r18, Z+2	; 0x02
	hl&=self->pchn;
	if(self->pchn != self->chn){
    1afa:	62 17       	cp	r22, r18
    1afc:	19 f1       	breq	.+70     	; 0x1b44 <RotEnc_rte+0x8c>
		if((self->pchn == ((1<<self->PinChnB)|(1<<self->PinChnA))) && (hl & (1<<self->PinChnA)))
    1afe:	42 2f       	mov	r20, r18
    1b00:	50 e0       	ldi	r21, 0x00	; 0
    1b02:	8a 2b       	or	r24, r26
    1b04:	9b 2b       	or	r25, r27
    1b06:	48 17       	cp	r20, r24
    1b08:	59 07       	cpc	r21, r25
    1b0a:	e1 f4       	brne	.+56     	; 0x1b44 <RotEnc_rte+0x8c>
/***Procedure & Function***/
ROTENC RotEnc_rte(ROTENC *self, uint8_t data)
{
	uint8_t hl;
	self->chn=data & ((1<<self->PinChnB)|(1<<self->PinChnA));
	hl=self->chn ^ self->pchn;
    1b0c:	86 2f       	mov	r24, r22
    1b0e:	82 27       	eor	r24, r18
	hl&=self->pchn;
	if(self->pchn != self->chn){
		if((self->pchn == ((1<<self->PinChnB)|(1<<self->PinChnA))) && (hl & (1<<self->PinChnA)))
    1b10:	28 23       	and	r18, r24
    1b12:	82 2f       	mov	r24, r18
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	ac 01       	movw	r20, r24
    1b18:	02 c0       	rjmp	.+4      	; 0x1b1e <RotEnc_rte+0x66>
    1b1a:	55 95       	asr	r21
    1b1c:	47 95       	ror	r20
    1b1e:	7a 95       	dec	r23
    1b20:	e2 f7       	brpl	.-8      	; 0x1b1a <RotEnc_rte+0x62>
    1b22:	40 ff       	sbrs	r20, 0
    1b24:	08 c0       	rjmp	.+16     	; 0x1b36 <RotEnc_rte+0x7e>
			self->num++;
    1b26:	24 81       	ldd	r18, Z+4	; 0x04
    1b28:	2f 5f       	subi	r18, 0xFF	; 255
    1b2a:	24 83       	std	Z+4, r18	; 0x04
    1b2c:	04 c0       	rjmp	.+8      	; 0x1b36 <RotEnc_rte+0x7e>
		if((self->pchn == ((1<<self->PinChnB)|(1<<self->PinChnA))) && (hl & (1<<self->PinChnB)))
			self->num--;
    1b2e:	84 81       	ldd	r24, Z+4	; 0x04
    1b30:	81 50       	subi	r24, 0x01	; 1
    1b32:	84 83       	std	Z+4, r24	; 0x04
    1b34:	07 c0       	rjmp	.+14     	; 0x1b44 <RotEnc_rte+0x8c>
	hl=self->chn ^ self->pchn;
	hl&=self->pchn;
	if(self->pchn != self->chn){
		if((self->pchn == ((1<<self->PinChnB)|(1<<self->PinChnA))) && (hl & (1<<self->PinChnA)))
			self->num++;
		if((self->pchn == ((1<<self->PinChnB)|(1<<self->PinChnA))) && (hl & (1<<self->PinChnB)))
    1b36:	02 c0       	rjmp	.+4      	; 0x1b3c <RotEnc_rte+0x84>
    1b38:	95 95       	asr	r25
    1b3a:	87 95       	ror	r24
    1b3c:	3a 95       	dec	r19
    1b3e:	e2 f7       	brpl	.-8      	; 0x1b38 <RotEnc_rte+0x80>
    1b40:	80 fd       	sbrc	r24, 0
    1b42:	f5 cf       	rjmp	.-22     	; 0x1b2e <RotEnc_rte+0x76>
			self->num--;
	}
	self->pchn=self->chn;
    1b44:	62 83       	std	Z+2, r22	; 0x02
	return *self;
    1b46:	87 e0       	ldi	r24, 0x07	; 7
    1b48:	de 01       	movw	r26, r28
    1b4a:	11 96       	adiw	r26, 0x01	; 1
    1b4c:	01 90       	ld	r0, Z+
    1b4e:	0d 92       	st	X+, r0
    1b50:	8a 95       	dec	r24
    1b52:	e1 f7       	brne	.-8      	; 0x1b4c <RotEnc_rte+0x94>
    1b54:	29 81       	ldd	r18, Y+1	; 0x01
    1b56:	3a 81       	ldd	r19, Y+2	; 0x02
    1b58:	4b 81       	ldd	r20, Y+3	; 0x03
    1b5a:	5c 81       	ldd	r21, Y+4	; 0x04
    1b5c:	6d 81       	ldd	r22, Y+5	; 0x05
    1b5e:	7e 81       	ldd	r23, Y+6	; 0x06
    1b60:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	27 96       	adiw	r28, 0x07	; 7
    1b66:	0f b6       	in	r0, 0x3f	; 63
    1b68:	f8 94       	cli
    1b6a:	de bf       	out	0x3e, r29	; 62
    1b6c:	0f be       	out	0x3f, r0	; 63
    1b6e:	cd bf       	out	0x3d, r28	; 61
    1b70:	df 91       	pop	r29
    1b72:	cf 91       	pop	r28
    1b74:	08 95       	ret

00001b76 <ROTENCenable>:
/***Global File Variable***/
/***Header***/
ROTENC RotEnc_rte(ROTENC *self, uint8_t data);
/***INITIALIZE OBJECT STRUCT***/
ROTENC ROTENCenable( uint8_t ChnApin, uint8_t ChnBpin )
{
    1b76:	cf 93       	push	r28
    1b78:	df 93       	push	r29
    1b7a:	cd b7       	in	r28, 0x3d	; 61
    1b7c:	de b7       	in	r29, 0x3e	; 62
    1b7e:	27 97       	sbiw	r28, 0x07	; 7
    1b80:	0f b6       	in	r0, 0x3f	; 63
    1b82:	f8 94       	cli
    1b84:	de bf       	out	0x3e, r29	; 62
    1b86:	0f be       	out	0x3f, r0	; 63
    1b88:	cd bf       	out	0x3d, r28	; 61
    1b8a:	36 2f       	mov	r19, r22
	// struct object
	ROTENC rtnc;
	//Initialize variables
	rtnc.PinChnA=ChnApin;
	rtnc.PinChnB=ChnBpin;
	rtnc.pchn=rtnc.chn=(1<<ChnBpin)|(1<<ChnApin);
    1b8c:	e1 e0       	ldi	r30, 0x01	; 1
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	af 01       	movw	r20, r30
    1b92:	02 c0       	rjmp	.+4      	; 0x1b98 <ROTENCenable+0x22>
    1b94:	44 0f       	add	r20, r20
    1b96:	55 1f       	adc	r21, r21
    1b98:	6a 95       	dec	r22
    1b9a:	e2 f7       	brpl	.-8      	; 0x1b94 <ROTENCenable+0x1e>
    1b9c:	08 2e       	mov	r0, r24
    1b9e:	02 c0       	rjmp	.+4      	; 0x1ba4 <ROTENCenable+0x2e>
    1ba0:	ee 0f       	add	r30, r30
    1ba2:	ff 1f       	adc	r31, r31
    1ba4:	0a 94       	dec	r0
    1ba6:	e2 f7       	brpl	.-8      	; 0x1ba0 <ROTENCenable+0x2a>
    1ba8:	e4 2b       	or	r30, r20
	rtnc.num=0;
	// function pointers
	rtnc.rte=RotEnc_rte;
	/******/
	return rtnc;
    1baa:	4c e5       	ldi	r20, 0x5C	; 92
    1bac:	5d e0       	ldi	r21, 0x0D	; 13
    1bae:	5f 83       	std	Y+7, r21	; 0x07
    1bb0:	4e 83       	std	Y+6, r20	; 0x06
    1bb2:	74 2f       	mov	r23, r20
}
    1bb4:	28 2f       	mov	r18, r24
    1bb6:	4e 2f       	mov	r20, r30
    1bb8:	5e 2f       	mov	r21, r30
    1bba:	60 e0       	ldi	r22, 0x00	; 0
    1bbc:	8f 81       	ldd	r24, Y+7	; 0x07
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	27 96       	adiw	r28, 0x07	; 7
    1bc2:	0f b6       	in	r0, 0x3f	; 63
    1bc4:	f8 94       	cli
    1bc6:	de bf       	out	0x3e, r29	; 62
    1bc8:	0f be       	out	0x3f, r0	; 63
    1bca:	cd bf       	out	0x3d, r28	; 61
    1bcc:	df 91       	pop	r29
    1bce:	cf 91       	pop	r28
    1bd0:	08 95       	ret

00001bd2 <PORTINIT>:
	}
}
/***Procedure & Function***/
void PORTINIT(void)
{
	DDRC=0XFF;
    1bd2:	8f ef       	ldi	r24, 0xFF	; 255
    1bd4:	84 bb       	out	0x14, r24	; 20
	PORTC=0XFF;
    1bd6:	85 bb       	out	0x15, r24	; 21
	DDRB=0X77; // rotenc pb3 e pb7 input resto output.
    1bd8:	87 e7       	ldi	r24, 0x77	; 119
    1bda:	87 bb       	out	0x17, r24	; 23
	PORTB=0X88; //rotenc pb3 e pb7 pull up resistor o resto output a zero.
    1bdc:	88 e8       	ldi	r24, 0x88	; 136
    1bde:	88 bb       	out	0x18, r24	; 24
    1be0:	08 95       	ret

00001be2 <main>:
char* string=NULL;
/***Header***/
void PORTINIT(void);
/***MAIN***MAIN***/
int main(void)
{	
    1be2:	cf 93       	push	r28
    1be4:	df 93       	push	r29
    1be6:	cd b7       	in	r28, 0x3d	; 61
    1be8:	de b7       	in	r29, 0x3e	; 62
    1bea:	c9 5a       	subi	r28, 0xA9	; 169
    1bec:	d1 09       	sbc	r29, r1
    1bee:	0f b6       	in	r0, 0x3f	; 63
    1bf0:	f8 94       	cli
    1bf2:	de bf       	out	0x3e, r29	; 62
    1bf4:	0f be       	out	0x3f, r0	; 63
    1bf6:	cd bf       	out	0x3d, r28	; 61
	PORTINIT();
    1bf8:	ec df       	rcall	.-40     	; 0x1bd2 <PORTINIT>
	uint8_t m;
	//KEYPAD keypad = KEYPADenable(&DDRE,&PINE,&PORTE);
	LCD0 lcd = LCD0enable(&DDRA,&PINA,&PORTA);
    1bfa:	2b e3       	ldi	r18, 0x3B	; 59
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	49 e3       	ldi	r20, 0x39	; 57
    1c00:	50 e0       	ldi	r21, 0x00	; 0
    1c02:	6a e3       	ldi	r22, 0x3A	; 58
    1c04:	70 e0       	ldi	r23, 0x00	; 0
    1c06:	ce 01       	movw	r24, r28
    1c08:	08 96       	adiw	r24, 0x08	; 8
    1c0a:	b3 da       	rcall	.-2714   	; 0x1172 <LCD0enable>
    1c0c:	0c 89       	ldd	r16, Y+20	; 0x14
    1c0e:	1d 89       	ldd	r17, Y+21	; 0x15
    1c10:	aa 8c       	ldd	r10, Y+26	; 0x1a
    1c12:	bb 8c       	ldd	r11, Y+27	; 0x1b
	EEPROM eeprom = EEPROMenable();
    1c14:	ce 01       	movw	r24, r28
    1c16:	4e 96       	adiw	r24, 0x1e	; 30
    1c18:	0e 94 b7 01 	call	0x36e	; 0x36e <EEPROMenable>
	LFSM lfsm = LFSMenable(&eeprom,571);
    1c1c:	4b e3       	ldi	r20, 0x3B	; 59
    1c1e:	52 e0       	ldi	r21, 0x02	; 2
    1c20:	be 01       	movw	r22, r28
    1c22:	62 5e       	subi	r22, 0xE2	; 226
    1c24:	7f 4f       	sbci	r23, 0xFF	; 255
    1c26:	ce 01       	movw	r24, r28
    1c28:	cc 96       	adiw	r24, 0x3c	; 60
    1c2a:	13 df       	rcall	.-474    	; 0x1a52 <LFSMenable>
	FUNC func = FUNCenable();
    1c2c:	ce 01       	movw	r24, r28
    1c2e:	87 5a       	subi	r24, 0xA7	; 167
    1c30:	9f 4f       	sbci	r25, 0xFF	; 255
    1c32:	0e 94 ee 05 	call	0xbdc	; 0xbdc <FUNCenable>
    1c36:	ed 96       	adiw	r28, 0x3d	; 61
    1c38:	ce ac       	ldd	r12, Y+62	; 0x3e
    1c3a:	df ac       	ldd	r13, Y+63	; 0x3f
	ROTENC potenc = ROTENCenable(3,7);
    1c3c:	ed 97       	sbiw	r28, 0x3d	; 61
    1c3e:	67 e0       	ldi	r22, 0x07	; 7
    1c40:	83 e0       	ldi	r24, 0x03	; 3
    1c42:	99 df       	rcall	.-206    	; 0x1b76 <ROTENCenable>
    1c44:	cd 55       	subi	r28, 0x5D	; 93
    1c46:	df 4f       	sbci	r29, 0xFF	; 255
    1c48:	28 83       	st	Y, r18
    1c4a:	c3 5a       	subi	r28, 0xA3	; 163
    1c4c:	d0 40       	sbci	r29, 0x00	; 0
    1c4e:	cc 55       	subi	r28, 0x5C	; 92
    1c50:	df 4f       	sbci	r29, 0xFF	; 255
    1c52:	38 83       	st	Y, r19
    1c54:	c4 5a       	subi	r28, 0xA4	; 164
    1c56:	d0 40       	sbci	r29, 0x00	; 0
    1c58:	cb 55       	subi	r28, 0x5B	; 91
    1c5a:	df 4f       	sbci	r29, 0xFF	; 255
    1c5c:	48 83       	st	Y, r20
    1c5e:	c5 5a       	subi	r28, 0xA5	; 165
    1c60:	d0 40       	sbci	r29, 0x00	; 0
    1c62:	ca 55       	subi	r28, 0x5A	; 90
    1c64:	df 4f       	sbci	r29, 0xFF	; 255
    1c66:	58 83       	st	Y, r21
    1c68:	c6 5a       	subi	r28, 0xA6	; 166
    1c6a:	d0 40       	sbci	r29, 0x00	; 0
    1c6c:	c9 55       	subi	r28, 0x59	; 89
    1c6e:	df 4f       	sbci	r29, 0xFF	; 255
    1c70:	68 83       	st	Y, r22
    1c72:	c7 5a       	subi	r28, 0xA7	; 167
    1c74:	d0 40       	sbci	r29, 0x00	; 0
    1c76:	c8 55       	subi	r28, 0x58	; 88
    1c78:	df 4f       	sbci	r29, 0xFF	; 255
    1c7a:	78 83       	st	Y, r23
    1c7c:	c8 5a       	subi	r28, 0xA8	; 168
    1c7e:	d0 40       	sbci	r29, 0x00	; 0
    1c80:	c7 55       	subi	r28, 0x57	; 87
    1c82:	df 4f       	sbci	r29, 0xFF	; 255
    1c84:	88 83       	st	Y, r24
    1c86:	c9 5a       	subi	r28, 0xA9	; 169
    1c88:	d0 40       	sbci	r29, 0x00	; 0
	/**************************************/
	lfsm.setoutput(&lfsm,0);
    1c8a:	65 96       	adiw	r28, 0x15	; 21
    1c8c:	ee ad       	ldd	r30, Y+62	; 0x3e
    1c8e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1c90:	65 97       	sbiw	r28, 0x15	; 21
    1c92:	60 e0       	ldi	r22, 0x00	; 0
    1c94:	ce 01       	movw	r24, r28
    1c96:	cc 96       	adiw	r24, 0x3c	; 60
    1c98:	09 95       	icall
	/*** Replace with your application code ***/
	while (True)
	{
		//m=RotEnc.rte(&RotEnc,PINB).num;
		m=potenc.rte(&potenc,PINB).num;
    1c9a:	66 b3       	in	r22, 0x16	; 22
    1c9c:	c8 55       	subi	r28, 0x58	; 88
    1c9e:	df 4f       	sbci	r29, 0xFF	; 255
    1ca0:	e8 81       	ld	r30, Y
    1ca2:	f9 81       	ldd	r31, Y+1	; 0x01
    1ca4:	c8 5a       	subi	r28, 0xA8	; 168
    1ca6:	d0 40       	sbci	r29, 0x00	; 0
    1ca8:	ce 01       	movw	r24, r28
    1caa:	8d 55       	subi	r24, 0x5D	; 93
    1cac:	9f 4f       	sbci	r25, 0xFF	; 255
    1cae:	09 95       	icall
    1cb0:	f6 2e       	mov	r15, r22
    1cb2:	29 83       	std	Y+1, r18	; 0x01
    1cb4:	3a 83       	std	Y+2, r19	; 0x02
    1cb6:	4b 83       	std	Y+3, r20	; 0x03
    1cb8:	5c 83       	std	Y+4, r21	; 0x04
    1cba:	6d 83       	std	Y+5, r22	; 0x05
    1cbc:	7e 83       	std	Y+6, r23	; 0x06
    1cbe:	8f 83       	std	Y+7, r24	; 0x07
		/******/
		lcd.gotoxy(0,0);
    1cc0:	60 e0       	ldi	r22, 0x00	; 0
    1cc2:	70 e0       	ldi	r23, 0x00	; 0
    1cc4:	80 e0       	ldi	r24, 0x00	; 0
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	f5 01       	movw	r30, r10
    1cca:	09 95       	icall
		string=func.ui16toa(m);
    1ccc:	8f 2c       	mov	r8, r15
    1cce:	91 2c       	mov	r9, r1
    1cd0:	c4 01       	movw	r24, r8
    1cd2:	f6 01       	movw	r30, r12
    1cd4:	09 95       	icall
    1cd6:	90 93 c4 01 	sts	0x01C4, r25	; 0x8001c4 <string+0x1>
    1cda:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <string>
		lcd.string_size(string,4);
    1cde:	64 e0       	ldi	r22, 0x04	; 4
    1ce0:	f8 01       	movw	r30, r16
    1ce2:	09 95       	icall
		lfsm.read(&lfsm,m);
    1ce4:	27 96       	adiw	r28, 0x07	; 7
    1ce6:	ee ad       	ldd	r30, Y+62	; 0x3e
    1ce8:	ff ad       	ldd	r31, Y+63	; 0x3f
    1cea:	27 97       	sbiw	r28, 0x07	; 7
    1cec:	6f 2d       	mov	r22, r15
    1cee:	ce 01       	movw	r24, r28
    1cf0:	cc 96       	adiw	r24, 0x3c	; 60
    1cf2:	09 95       	icall
		/***DISPLAY***/
		lcd.gotoxy(1,0);
    1cf4:	60 e0       	ldi	r22, 0x00	; 0
    1cf6:	70 e0       	ldi	r23, 0x00	; 0
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	f5 01       	movw	r30, r10
    1cfe:	09 95       	icall
		lcd.string_size("Output ",7);
    1d00:	67 e0       	ldi	r22, 0x07	; 7
    1d02:	80 e0       	ldi	r24, 0x00	; 0
    1d04:	91 e0       	ldi	r25, 0x01	; 1
    1d06:	f8 01       	movw	r30, r16
    1d08:	09 95       	icall
		string=func.ui16toa(lfsm.getoutput(&lfsm));
    1d0a:	61 96       	adiw	r28, 0x11	; 17
    1d0c:	ee ad       	ldd	r30, Y+62	; 0x3e
    1d0e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1d10:	61 97       	sbiw	r28, 0x11	; 17
    1d12:	ce 01       	movw	r24, r28
    1d14:	cc 96       	adiw	r24, 0x3c	; 60
    1d16:	09 95       	icall
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	f6 01       	movw	r30, r12
    1d1c:	09 95       	icall
    1d1e:	90 93 c4 01 	sts	0x01C4, r25	; 0x8001c4 <string+0x1>
    1d22:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <string>
		lcd.string_size(string,4);
    1d26:	64 e0       	ldi	r22, 0x04	; 4
    1d28:	f8 01       	movw	r30, r16
    1d2a:	09 95       	icall
		PORTC=lfsm.getoutput(&lfsm);
    1d2c:	61 96       	adiw	r28, 0x11	; 17
    1d2e:	ee ad       	ldd	r30, Y+62	; 0x3e
    1d30:	ff ad       	ldd	r31, Y+63	; 0x3f
    1d32:	61 97       	sbiw	r28, 0x11	; 17
    1d34:	ce 01       	movw	r24, r28
    1d36:	cc 96       	adiw	r24, 0x3c	; 60
    1d38:	09 95       	icall
    1d3a:	85 bb       	out	0x15, r24	; 21
		
		lcd.gotoxy(2,0);
    1d3c:	60 e0       	ldi	r22, 0x00	; 0
    1d3e:	70 e0       	ldi	r23, 0x00	; 0
    1d40:	82 e0       	ldi	r24, 0x02	; 2
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	f5 01       	movw	r30, r10
    1d46:	09 95       	icall
		lcd.string_size("PotEnc ",7);
    1d48:	67 e0       	ldi	r22, 0x07	; 7
    1d4a:	88 e0       	ldi	r24, 0x08	; 8
    1d4c:	91 e0       	ldi	r25, 0x01	; 1
    1d4e:	f8 01       	movw	r30, r16
    1d50:	09 95       	icall
		string=func.ui16toa(m);
    1d52:	c4 01       	movw	r24, r8
    1d54:	f6 01       	movw	r30, r12
    1d56:	09 95       	icall
    1d58:	90 93 c4 01 	sts	0x01C4, r25	; 0x8001c4 <string+0x1>
    1d5c:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <string>
		lcd.string_size(string,4);	
    1d60:	64 e0       	ldi	r22, 0x04	; 4
    1d62:	f8 01       	movw	r30, r16
    1d64:	09 95       	icall
    1d66:	99 cf       	rjmp	.-206    	; 0x1c9a <main+0xb8>

00001d68 <__mulsi3>:
    1d68:	db 01       	movw	r26, r22
    1d6a:	8f 93       	push	r24
    1d6c:	9f 93       	push	r25
    1d6e:	7f d0       	rcall	.+254    	; 0x1e6e <__muluhisi3>
    1d70:	bf 91       	pop	r27
    1d72:	af 91       	pop	r26
    1d74:	a2 9f       	mul	r26, r18
    1d76:	80 0d       	add	r24, r0
    1d78:	91 1d       	adc	r25, r1
    1d7a:	a3 9f       	mul	r26, r19
    1d7c:	90 0d       	add	r25, r0
    1d7e:	b2 9f       	mul	r27, r18
    1d80:	90 0d       	add	r25, r0
    1d82:	11 24       	eor	r1, r1
    1d84:	08 95       	ret

00001d86 <__udivmodhi4>:
    1d86:	aa 1b       	sub	r26, r26
    1d88:	bb 1b       	sub	r27, r27
    1d8a:	51 e1       	ldi	r21, 0x11	; 17
    1d8c:	07 c0       	rjmp	.+14     	; 0x1d9c <__udivmodhi4_ep>

00001d8e <__udivmodhi4_loop>:
    1d8e:	aa 1f       	adc	r26, r26
    1d90:	bb 1f       	adc	r27, r27
    1d92:	a6 17       	cp	r26, r22
    1d94:	b7 07       	cpc	r27, r23
    1d96:	10 f0       	brcs	.+4      	; 0x1d9c <__udivmodhi4_ep>
    1d98:	a6 1b       	sub	r26, r22
    1d9a:	b7 0b       	sbc	r27, r23

00001d9c <__udivmodhi4_ep>:
    1d9c:	88 1f       	adc	r24, r24
    1d9e:	99 1f       	adc	r25, r25
    1da0:	5a 95       	dec	r21
    1da2:	a9 f7       	brne	.-22     	; 0x1d8e <__udivmodhi4_loop>
    1da4:	80 95       	com	r24
    1da6:	90 95       	com	r25
    1da8:	bc 01       	movw	r22, r24
    1daa:	cd 01       	movw	r24, r26
    1dac:	08 95       	ret

00001dae <__divmodhi4>:
    1dae:	97 fb       	bst	r25, 7
    1db0:	07 2e       	mov	r0, r23
    1db2:	16 f4       	brtc	.+4      	; 0x1db8 <__divmodhi4+0xa>
    1db4:	00 94       	com	r0
    1db6:	06 d0       	rcall	.+12     	; 0x1dc4 <__divmodhi4_neg1>
    1db8:	77 fd       	sbrc	r23, 7
    1dba:	08 d0       	rcall	.+16     	; 0x1dcc <__divmodhi4_neg2>
    1dbc:	e4 df       	rcall	.-56     	; 0x1d86 <__udivmodhi4>
    1dbe:	07 fc       	sbrc	r0, 7
    1dc0:	05 d0       	rcall	.+10     	; 0x1dcc <__divmodhi4_neg2>
    1dc2:	3e f4       	brtc	.+14     	; 0x1dd2 <__divmodhi4_exit>

00001dc4 <__divmodhi4_neg1>:
    1dc4:	90 95       	com	r25
    1dc6:	81 95       	neg	r24
    1dc8:	9f 4f       	sbci	r25, 0xFF	; 255
    1dca:	08 95       	ret

00001dcc <__divmodhi4_neg2>:
    1dcc:	70 95       	com	r23
    1dce:	61 95       	neg	r22
    1dd0:	7f 4f       	sbci	r23, 0xFF	; 255

00001dd2 <__divmodhi4_exit>:
    1dd2:	08 95       	ret

00001dd4 <__udivmodsi4>:
    1dd4:	a1 e2       	ldi	r26, 0x21	; 33
    1dd6:	1a 2e       	mov	r1, r26
    1dd8:	aa 1b       	sub	r26, r26
    1dda:	bb 1b       	sub	r27, r27
    1ddc:	fd 01       	movw	r30, r26
    1dde:	0d c0       	rjmp	.+26     	; 0x1dfa <__udivmodsi4_ep>

00001de0 <__udivmodsi4_loop>:
    1de0:	aa 1f       	adc	r26, r26
    1de2:	bb 1f       	adc	r27, r27
    1de4:	ee 1f       	adc	r30, r30
    1de6:	ff 1f       	adc	r31, r31
    1de8:	a2 17       	cp	r26, r18
    1dea:	b3 07       	cpc	r27, r19
    1dec:	e4 07       	cpc	r30, r20
    1dee:	f5 07       	cpc	r31, r21
    1df0:	20 f0       	brcs	.+8      	; 0x1dfa <__udivmodsi4_ep>
    1df2:	a2 1b       	sub	r26, r18
    1df4:	b3 0b       	sbc	r27, r19
    1df6:	e4 0b       	sbc	r30, r20
    1df8:	f5 0b       	sbc	r31, r21

00001dfa <__udivmodsi4_ep>:
    1dfa:	66 1f       	adc	r22, r22
    1dfc:	77 1f       	adc	r23, r23
    1dfe:	88 1f       	adc	r24, r24
    1e00:	99 1f       	adc	r25, r25
    1e02:	1a 94       	dec	r1
    1e04:	69 f7       	brne	.-38     	; 0x1de0 <__udivmodsi4_loop>
    1e06:	60 95       	com	r22
    1e08:	70 95       	com	r23
    1e0a:	80 95       	com	r24
    1e0c:	90 95       	com	r25
    1e0e:	9b 01       	movw	r18, r22
    1e10:	ac 01       	movw	r20, r24
    1e12:	bd 01       	movw	r22, r26
    1e14:	cf 01       	movw	r24, r30
    1e16:	08 95       	ret

00001e18 <__divmodsi4>:
    1e18:	05 2e       	mov	r0, r21
    1e1a:	97 fb       	bst	r25, 7
    1e1c:	16 f4       	brtc	.+4      	; 0x1e22 <__divmodsi4+0xa>
    1e1e:	00 94       	com	r0
    1e20:	0f d0       	rcall	.+30     	; 0x1e40 <__negsi2>
    1e22:	57 fd       	sbrc	r21, 7
    1e24:	05 d0       	rcall	.+10     	; 0x1e30 <__divmodsi4_neg2>
    1e26:	d6 df       	rcall	.-84     	; 0x1dd4 <__udivmodsi4>
    1e28:	07 fc       	sbrc	r0, 7
    1e2a:	02 d0       	rcall	.+4      	; 0x1e30 <__divmodsi4_neg2>
    1e2c:	46 f4       	brtc	.+16     	; 0x1e3e <__divmodsi4_exit>
    1e2e:	08 c0       	rjmp	.+16     	; 0x1e40 <__negsi2>

00001e30 <__divmodsi4_neg2>:
    1e30:	50 95       	com	r21
    1e32:	40 95       	com	r20
    1e34:	30 95       	com	r19
    1e36:	21 95       	neg	r18
    1e38:	3f 4f       	sbci	r19, 0xFF	; 255
    1e3a:	4f 4f       	sbci	r20, 0xFF	; 255
    1e3c:	5f 4f       	sbci	r21, 0xFF	; 255

00001e3e <__divmodsi4_exit>:
    1e3e:	08 95       	ret

00001e40 <__negsi2>:
    1e40:	90 95       	com	r25
    1e42:	80 95       	com	r24
    1e44:	70 95       	com	r23
    1e46:	61 95       	neg	r22
    1e48:	7f 4f       	sbci	r23, 0xFF	; 255
    1e4a:	8f 4f       	sbci	r24, 0xFF	; 255
    1e4c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e4e:	08 95       	ret

00001e50 <__umulhisi3>:
    1e50:	a2 9f       	mul	r26, r18
    1e52:	b0 01       	movw	r22, r0
    1e54:	b3 9f       	mul	r27, r19
    1e56:	c0 01       	movw	r24, r0
    1e58:	a3 9f       	mul	r26, r19
    1e5a:	70 0d       	add	r23, r0
    1e5c:	81 1d       	adc	r24, r1
    1e5e:	11 24       	eor	r1, r1
    1e60:	91 1d       	adc	r25, r1
    1e62:	b2 9f       	mul	r27, r18
    1e64:	70 0d       	add	r23, r0
    1e66:	81 1d       	adc	r24, r1
    1e68:	11 24       	eor	r1, r1
    1e6a:	91 1d       	adc	r25, r1
    1e6c:	08 95       	ret

00001e6e <__muluhisi3>:
    1e6e:	f0 df       	rcall	.-32     	; 0x1e50 <__umulhisi3>
    1e70:	a5 9f       	mul	r26, r21
    1e72:	90 0d       	add	r25, r0
    1e74:	b4 9f       	mul	r27, r20
    1e76:	90 0d       	add	r25, r0
    1e78:	a4 9f       	mul	r26, r20
    1e7a:	80 0d       	add	r24, r0
    1e7c:	91 1d       	adc	r25, r1
    1e7e:	11 24       	eor	r1, r1
    1e80:	08 95       	ret

00001e82 <eeprom_read_block>:
    1e82:	dc 01       	movw	r26, r24
    1e84:	cb 01       	movw	r24, r22

00001e86 <eeprom_read_blraw>:
    1e86:	fc 01       	movw	r30, r24
    1e88:	e1 99       	sbic	0x1c, 1	; 28
    1e8a:	fe cf       	rjmp	.-4      	; 0x1e88 <eeprom_read_blraw+0x2>
    1e8c:	06 c0       	rjmp	.+12     	; 0x1e9a <eeprom_read_blraw+0x14>
    1e8e:	ff bb       	out	0x1f, r31	; 31
    1e90:	ee bb       	out	0x1e, r30	; 30
    1e92:	e0 9a       	sbi	0x1c, 0	; 28
    1e94:	31 96       	adiw	r30, 0x01	; 1
    1e96:	0d b2       	in	r0, 0x1d	; 29
    1e98:	0d 92       	st	X+, r0
    1e9a:	41 50       	subi	r20, 0x01	; 1
    1e9c:	50 40       	sbci	r21, 0x00	; 0
    1e9e:	b8 f7       	brcc	.-18     	; 0x1e8e <eeprom_read_blraw+0x8>
    1ea0:	08 95       	ret

00001ea2 <eeprom_read_byte>:
    1ea2:	e1 99       	sbic	0x1c, 1	; 28
    1ea4:	fe cf       	rjmp	.-4      	; 0x1ea2 <eeprom_read_byte>
    1ea6:	9f bb       	out	0x1f, r25	; 31
    1ea8:	8e bb       	out	0x1e, r24	; 30
    1eaa:	e0 9a       	sbi	0x1c, 0	; 28
    1eac:	99 27       	eor	r25, r25
    1eae:	8d b3       	in	r24, 0x1d	; 29
    1eb0:	08 95       	ret

00001eb2 <eeprom_read_word>:
    1eb2:	a8 e1       	ldi	r26, 0x18	; 24
    1eb4:	b0 e0       	ldi	r27, 0x00	; 0
    1eb6:	42 e0       	ldi	r20, 0x02	; 2
    1eb8:	50 e0       	ldi	r21, 0x00	; 0
    1eba:	e5 cf       	rjmp	.-54     	; 0x1e86 <eeprom_read_blraw>

00001ebc <eeprom_update_block>:
    1ebc:	dc 01       	movw	r26, r24
    1ebe:	a4 0f       	add	r26, r20
    1ec0:	b5 1f       	adc	r27, r21
    1ec2:	41 50       	subi	r20, 0x01	; 1
    1ec4:	50 40       	sbci	r21, 0x00	; 0
    1ec6:	40 f0       	brcs	.+16     	; 0x1ed8 <eeprom_update_block+0x1c>
    1ec8:	cb 01       	movw	r24, r22
    1eca:	84 0f       	add	r24, r20
    1ecc:	95 1f       	adc	r25, r21
    1ece:	2e 91       	ld	r18, -X
    1ed0:	05 d0       	rcall	.+10     	; 0x1edc <eeprom_update_r18>
    1ed2:	41 50       	subi	r20, 0x01	; 1
    1ed4:	50 40       	sbci	r21, 0x00	; 0
    1ed6:	d8 f7       	brcc	.-10     	; 0x1ece <eeprom_update_block+0x12>
    1ed8:	08 95       	ret

00001eda <eeprom_update_byte>:
    1eda:	26 2f       	mov	r18, r22

00001edc <eeprom_update_r18>:
    1edc:	e1 99       	sbic	0x1c, 1	; 28
    1ede:	fe cf       	rjmp	.-4      	; 0x1edc <eeprom_update_r18>
    1ee0:	9f bb       	out	0x1f, r25	; 31
    1ee2:	8e bb       	out	0x1e, r24	; 30
    1ee4:	e0 9a       	sbi	0x1c, 0	; 28
    1ee6:	01 97       	sbiw	r24, 0x01	; 1
    1ee8:	0d b2       	in	r0, 0x1d	; 29
    1eea:	02 16       	cp	r0, r18
    1eec:	31 f0       	breq	.+12     	; 0x1efa <eeprom_update_r18+0x1e>
    1eee:	2d bb       	out	0x1d, r18	; 29
    1ef0:	0f b6       	in	r0, 0x3f	; 63
    1ef2:	f8 94       	cli
    1ef4:	e2 9a       	sbi	0x1c, 2	; 28
    1ef6:	e1 9a       	sbi	0x1c, 1	; 28
    1ef8:	0f be       	out	0x3f, r0	; 63
    1efa:	08 95       	ret

00001efc <eeprom_update_dword>:
    1efc:	03 96       	adiw	r24, 0x03	; 3
    1efe:	27 2f       	mov	r18, r23
    1f00:	ed df       	rcall	.-38     	; 0x1edc <eeprom_update_r18>
    1f02:	eb df       	rcall	.-42     	; 0x1eda <eeprom_update_byte>
    1f04:	25 2f       	mov	r18, r21
    1f06:	ea df       	rcall	.-44     	; 0x1edc <eeprom_update_r18>
    1f08:	24 2f       	mov	r18, r20
    1f0a:	e8 cf       	rjmp	.-48     	; 0x1edc <eeprom_update_r18>

00001f0c <eeprom_update_word>:
    1f0c:	01 96       	adiw	r24, 0x01	; 1
    1f0e:	27 2f       	mov	r18, r23
    1f10:	e5 df       	rcall	.-54     	; 0x1edc <eeprom_update_r18>
    1f12:	e3 cf       	rjmp	.-58     	; 0x1eda <eeprom_update_byte>

00001f14 <eeprom_write_block>:
    1f14:	dc 01       	movw	r26, r24
    1f16:	cb 01       	movw	r24, r22
    1f18:	02 c0       	rjmp	.+4      	; 0x1f1e <eeprom_write_block+0xa>
    1f1a:	2d 91       	ld	r18, X+
    1f1c:	05 d0       	rcall	.+10     	; 0x1f28 <eeprom_write_r18>
    1f1e:	41 50       	subi	r20, 0x01	; 1
    1f20:	50 40       	sbci	r21, 0x00	; 0
    1f22:	d8 f7       	brcc	.-10     	; 0x1f1a <eeprom_write_block+0x6>
    1f24:	08 95       	ret

00001f26 <eeprom_write_byte>:
    1f26:	26 2f       	mov	r18, r22

00001f28 <eeprom_write_r18>:
    1f28:	e1 99       	sbic	0x1c, 1	; 28
    1f2a:	fe cf       	rjmp	.-4      	; 0x1f28 <eeprom_write_r18>
    1f2c:	9f bb       	out	0x1f, r25	; 31
    1f2e:	8e bb       	out	0x1e, r24	; 30
    1f30:	2d bb       	out	0x1d, r18	; 29
    1f32:	0f b6       	in	r0, 0x3f	; 63
    1f34:	f8 94       	cli
    1f36:	e2 9a       	sbi	0x1c, 2	; 28
    1f38:	e1 9a       	sbi	0x1c, 1	; 28
    1f3a:	0f be       	out	0x3f, r0	; 63
    1f3c:	01 96       	adiw	r24, 0x01	; 1
    1f3e:	08 95       	ret

00001f40 <eeprom_write_dword>:
    1f40:	24 2f       	mov	r18, r20
    1f42:	f2 df       	rcall	.-28     	; 0x1f28 <eeprom_write_r18>
    1f44:	25 2f       	mov	r18, r21
    1f46:	f0 df       	rcall	.-32     	; 0x1f28 <eeprom_write_r18>
    1f48:	00 c0       	rjmp	.+0      	; 0x1f4a <eeprom_write_word>

00001f4a <eeprom_write_word>:
    1f4a:	ed df       	rcall	.-38     	; 0x1f26 <eeprom_write_byte>
    1f4c:	27 2f       	mov	r18, r23
    1f4e:	ec cf       	rjmp	.-40     	; 0x1f28 <eeprom_write_r18>

00001f50 <_exit>:
    1f50:	f8 94       	cli

00001f52 <__stop_program>:
    1f52:	ff cf       	rjmp	.-2      	; 0x1f52 <__stop_program>
