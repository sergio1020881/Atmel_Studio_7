
Atmega128.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000d8a  00000e1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d8a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c3  00800106  00800106  00000e24  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e24  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e54  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004b0  00000000  00000000  00000e90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003c02  00000000  00000000  00001340  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001525  00000000  00000000  00004f42  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002fa1  00000000  00000000  00006467  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000be4  00000000  00000000  00009408  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000102b  00000000  00000000  00009fec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003627  00000000  00000000  0000b017  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000460  00000000  00000000  0000e63e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	e6 c0       	rjmp	.+460    	; 0x1d2 <__vector_1>
   6:	00 00       	nop
   8:	ee c0       	rjmp	.+476    	; 0x1e6 <__vector_2>
   a:	00 00       	nop
   c:	f6 c0       	rjmp	.+492    	; 0x1fa <__vector_3>
   e:	00 00       	nop
  10:	fe c0       	rjmp	.+508    	; 0x20e <__vector_4>
  12:	00 00       	nop
  14:	06 c1       	rjmp	.+524    	; 0x222 <__vector_5>
  16:	00 00       	nop
  18:	0e c1       	rjmp	.+540    	; 0x236 <__vector_6>
  1a:	00 00       	nop
  1c:	16 c1       	rjmp	.+556    	; 0x24a <__vector_7>
  1e:	00 00       	nop
  20:	1e c1       	rjmp	.+572    	; 0x25e <__vector_8>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	2e c1       	rjmp	.+604    	; 0x286 <__vector_10>
  2a:	00 00       	nop
  2c:	36 c1       	rjmp	.+620    	; 0x29a <__vector_11>
  2e:	00 00       	nop
  30:	3e c1       	rjmp	.+636    	; 0x2ae <__vector_12>
  32:	00 00       	nop
  34:	46 c1       	rjmp	.+652    	; 0x2c2 <__vector_13>
  36:	00 00       	nop
  38:	4e c1       	rjmp	.+668    	; 0x2d6 <__vector_14>
  3a:	00 00       	nop
  3c:	56 c1       	rjmp	.+684    	; 0x2ea <__vector_15>
  3e:	00 00       	nop
  40:	5e c1       	rjmp	.+700    	; 0x2fe <__vector_16>
  42:	00 00       	nop
  44:	16 c1       	rjmp	.+556    	; 0x272 <__vector_17>
  46:	00 00       	nop
  48:	ea c2       	rjmp	.+1492   	; 0x61e <__vector_18>
  4a:	00 00       	nop
  4c:	20 c3       	rjmp	.+1600   	; 0x68e <__vector_19>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	39 c0       	rjmp	.+114    	; 0xc8 <__vector_21>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c1       	rjmp	.+688    	; 0x312 <__vector_24>
  62:	00 00       	nop
  64:	60 c1       	rjmp	.+704    	; 0x326 <__vector_25>
  66:	00 00       	nop
  68:	68 c1       	rjmp	.+720    	; 0x33a <__vector_26>
  6a:	00 00       	nop
  6c:	70 c1       	rjmp	.+736    	; 0x34e <__vector_27>
  6e:	00 00       	nop
  70:	78 c1       	rjmp	.+752    	; 0x362 <__vector_28>
  72:	00 00       	nop
  74:	80 c1       	rjmp	.+768    	; 0x376 <__vector_29>
  76:	00 00       	nop
  78:	33 c3       	rjmp	.+1638   	; 0x6e0 <__vector_30>
  7a:	00 00       	nop
  7c:	6c c3       	rjmp	.+1752   	; 0x756 <__vector_31>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	c2 c2       	rjmp	.+1412   	; 0x60a <__vector_33>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e8       	ldi	r30, 0x8A	; 138
  a0:	fd e0       	ldi	r31, 0x0D	; 13
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e0       	ldi	r26, 0x06	; 6
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 3c       	cpi	r26, 0xC9	; 201
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	05 d6       	rcall	.+3082   	; 0xcce <main>
  c4:	60 c6       	rjmp	.+3264   	; 0xd86 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_21>:
ISR(ANALOG_INTERRUPT)
/*************************************************************************
Function: ANALOG interrupt
Purpose:  Read Analog Input
**************************************************************************/
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	0b b6       	in	r0, 0x3b	; 59
  d4:	0f 92       	push	r0
  d6:	2f 93       	push	r18
  d8:	3f 93       	push	r19
  da:	8f 93       	push	r24
  dc:	9f 93       	push	r25
  de:	ef 93       	push	r30
  e0:	ff 93       	push	r31
	/******/
	adc_tmp=ADCL;
  e2:	84 b1       	in	r24, 0x04	; 4
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <adc_tmp+0x1>
  ea:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <adc_tmp>
	adc_tmp|=(ADCH<<8);
  ee:	25 b1       	in	r18, 0x05	; 5
  f0:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <adc_tmp>
  f4:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <adc_tmp+0x1>
  f8:	92 2b       	or	r25, r18
  fa:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <adc_tmp+0x1>
  fe:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <adc_tmp>
	if(adc_n_sample < (1<<ADC_NUMBER_SAMPLE)){
 102:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 106:	84 30       	cpi	r24, 0x04	; 4
 108:	a0 f4       	brcc	.+40     	; 0x132 <__vector_21+0x6a>
		adc_n_sample++;
 10a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 10e:	8f 5f       	subi	r24, 0xFF	; 255
 110:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
		adc_sample+=adc_tmp;
 114:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <adc_tmp>
 118:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <adc_tmp+0x1>
 11c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <adc_sample>
 120:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <adc_sample+0x1>
 124:	82 0f       	add	r24, r18
 126:	93 1f       	adc	r25, r19
 128:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <adc_sample+0x1>
 12c:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <adc_sample>
 130:	43 c0       	rjmp	.+134    	; 0x1b8 <__vector_21+0xf0>
	}else{
		ADC_VALUE[ADC_SELECTOR]=adc_sample>>ADC_NUMBER_SAMPLE;
 132:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <ADC_SELECTOR>
 136:	f0 91 0c 01 	lds	r31, 0x010C	; 0x80010c <ADC_SELECTOR+0x1>
 13a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <adc_sample>
 13e:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <adc_sample+0x1>
 142:	95 95       	asr	r25
 144:	87 95       	ror	r24
 146:	95 95       	asr	r25
 148:	87 95       	ror	r24
 14a:	ee 0f       	add	r30, r30
 14c:	ff 1f       	adc	r31, r31
 14e:	e1 5e       	subi	r30, 0xE1	; 225
 150:	fe 4f       	sbci	r31, 0xFE	; 254
 152:	91 83       	std	Z+1, r25	; 0x01
 154:	80 83       	st	Z, r24
		adc_n_sample=adc_sample=0;
 156:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <adc_sample+0x1>
 15a:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <adc_sample>
 15e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
		/******/
		if(ADC_SELECTOR < ADC_N_CHANNEL)
 162:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <ADC_SELECTOR>
 166:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <ADC_SELECTOR+0x1>
 16a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <ADC_N_CHANNEL>
 16e:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <ADC_N_CHANNEL+0x1>
 172:	28 17       	cp	r18, r24
 174:	39 07       	cpc	r19, r25
 176:	54 f4       	brge	.+20     	; 0x18c <__vector_21+0xc4>
			ADC_SELECTOR++;
 178:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <ADC_SELECTOR>
 17c:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <ADC_SELECTOR+0x1>
 180:	01 96       	adiw	r24, 0x01	; 1
 182:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <ADC_SELECTOR+0x1>
 186:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <ADC_SELECTOR>
 18a:	04 c0       	rjmp	.+8      	; 0x194 <__vector_21+0xcc>
		else
			ADC_SELECTOR=0;
 18c:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <ADC_SELECTOR+0x1>
 190:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <ADC_SELECTOR>
		ADC_SELECT &= ~MUX_MASK;
 194:	87 b1       	in	r24, 0x07	; 7
 196:	80 7e       	andi	r24, 0xE0	; 224
 198:	87 b9       	out	0x07, r24	; 7
		ADC_SELECT |= (ADC_CHANNEL_GAIN[ADC_SELECTOR] & MUX_MASK);
 19a:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <ADC_SELECTOR>
 19e:	f0 91 0c 01 	lds	r31, 0x010C	; 0x80010c <ADC_SELECTOR+0x1>
 1a2:	ee 0f       	add	r30, r30
 1a4:	ff 1f       	adc	r31, r31
 1a6:	e1 5f       	subi	r30, 0xF1	; 241
 1a8:	fe 4f       	sbci	r31, 0xFE	; 254
 1aa:	80 81       	ld	r24, Z
 1ac:	91 81       	ldd	r25, Z+1	; 0x01
 1ae:	27 b1       	in	r18, 0x07	; 7
 1b0:	8f 71       	andi	r24, 0x1F	; 31
 1b2:	99 27       	eor	r25, r25
 1b4:	82 2b       	or	r24, r18
 1b6:	87 b9       	out	0x07, r24	; 7
	}		
}
 1b8:	ff 91       	pop	r31
 1ba:	ef 91       	pop	r30
 1bc:	9f 91       	pop	r25
 1be:	8f 91       	pop	r24
 1c0:	3f 91       	pop	r19
 1c2:	2f 91       	pop	r18
 1c4:	0f 90       	pop	r0
 1c6:	0b be       	out	0x3b, r0	; 59
 1c8:	0f 90       	pop	r0
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	0f 90       	pop	r0
 1ce:	1f 90       	pop	r1
 1d0:	18 95       	reti

000001d2 <__vector_1>:

/*
** interrupt
*/
// cross out the ones being used and redefine in main
ISR(INT0_vect){ }
 1d2:	1f 92       	push	r1
 1d4:	0f 92       	push	r0
 1d6:	0f b6       	in	r0, 0x3f	; 63
 1d8:	0f 92       	push	r0
 1da:	11 24       	eor	r1, r1
 1dc:	0f 90       	pop	r0
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	0f 90       	pop	r0
 1e2:	1f 90       	pop	r1
 1e4:	18 95       	reti

000001e6 <__vector_2>:
ISR(INT1_vect){ }
 1e6:	1f 92       	push	r1
 1e8:	0f 92       	push	r0
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	0f 92       	push	r0
 1ee:	11 24       	eor	r1, r1
 1f0:	0f 90       	pop	r0
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	0f 90       	pop	r0
 1f6:	1f 90       	pop	r1
 1f8:	18 95       	reti

000001fa <__vector_3>:
ISR(INT2_vect){ }
 1fa:	1f 92       	push	r1
 1fc:	0f 92       	push	r0
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	0f 92       	push	r0
 202:	11 24       	eor	r1, r1
 204:	0f 90       	pop	r0
 206:	0f be       	out	0x3f, r0	; 63
 208:	0f 90       	pop	r0
 20a:	1f 90       	pop	r1
 20c:	18 95       	reti

0000020e <__vector_4>:
ISR(INT3_vect){ }
 20e:	1f 92       	push	r1
 210:	0f 92       	push	r0
 212:	0f b6       	in	r0, 0x3f	; 63
 214:	0f 92       	push	r0
 216:	11 24       	eor	r1, r1
 218:	0f 90       	pop	r0
 21a:	0f be       	out	0x3f, r0	; 63
 21c:	0f 90       	pop	r0
 21e:	1f 90       	pop	r1
 220:	18 95       	reti

00000222 <__vector_5>:
ISR(INT4_vect){ }
 222:	1f 92       	push	r1
 224:	0f 92       	push	r0
 226:	0f b6       	in	r0, 0x3f	; 63
 228:	0f 92       	push	r0
 22a:	11 24       	eor	r1, r1
 22c:	0f 90       	pop	r0
 22e:	0f be       	out	0x3f, r0	; 63
 230:	0f 90       	pop	r0
 232:	1f 90       	pop	r1
 234:	18 95       	reti

00000236 <__vector_6>:
ISR(INT5_vect){ }
 236:	1f 92       	push	r1
 238:	0f 92       	push	r0
 23a:	0f b6       	in	r0, 0x3f	; 63
 23c:	0f 92       	push	r0
 23e:	11 24       	eor	r1, r1
 240:	0f 90       	pop	r0
 242:	0f be       	out	0x3f, r0	; 63
 244:	0f 90       	pop	r0
 246:	1f 90       	pop	r1
 248:	18 95       	reti

0000024a <__vector_7>:
ISR(INT6_vect){ }
 24a:	1f 92       	push	r1
 24c:	0f 92       	push	r0
 24e:	0f b6       	in	r0, 0x3f	; 63
 250:	0f 92       	push	r0
 252:	11 24       	eor	r1, r1
 254:	0f 90       	pop	r0
 256:	0f be       	out	0x3f, r0	; 63
 258:	0f 90       	pop	r0
 25a:	1f 90       	pop	r1
 25c:	18 95       	reti

0000025e <__vector_8>:
ISR(INT7_vect){ }
 25e:	1f 92       	push	r1
 260:	0f 92       	push	r0
 262:	0f b6       	in	r0, 0x3f	; 63
 264:	0f 92       	push	r0
 266:	11 24       	eor	r1, r1
 268:	0f 90       	pop	r0
 26a:	0f be       	out	0x3f, r0	; 63
 26c:	0f 90       	pop	r0
 26e:	1f 90       	pop	r1
 270:	18 95       	reti

00000272 <__vector_17>:
    return SPI_DATA_REGISTER;
}
/*
** interrupt
*/
ISR(SPI_STC_vect){ }
 272:	1f 92       	push	r1
 274:	0f 92       	push	r0
 276:	0f b6       	in	r0, 0x3f	; 63
 278:	0f 92       	push	r0
 27a:	11 24       	eor	r1, r1
 27c:	0f 90       	pop	r0
 27e:	0f be       	out	0x3f, r0	; 63
 280:	0f 90       	pop	r0
 282:	1f 90       	pop	r1
 284:	18 95       	reti

00000286 <__vector_10>:

/*
** interrupt
*/
// So that main will not freeze when not defined, but rather exclude.
ISR(TIMER2_OVF_vect){ }
 286:	1f 92       	push	r1
 288:	0f 92       	push	r0
 28a:	0f b6       	in	r0, 0x3f	; 63
 28c:	0f 92       	push	r0
 28e:	11 24       	eor	r1, r1
 290:	0f 90       	pop	r0
 292:	0f be       	out	0x3f, r0	; 63
 294:	0f 90       	pop	r0
 296:	1f 90       	pop	r1
 298:	18 95       	reti

0000029a <__vector_11>:
ISR(TIMER1_CAPT_vect){ }
 29a:	1f 92       	push	r1
 29c:	0f 92       	push	r0
 29e:	0f b6       	in	r0, 0x3f	; 63
 2a0:	0f 92       	push	r0
 2a2:	11 24       	eor	r1, r1
 2a4:	0f 90       	pop	r0
 2a6:	0f be       	out	0x3f, r0	; 63
 2a8:	0f 90       	pop	r0
 2aa:	1f 90       	pop	r1
 2ac:	18 95       	reti

000002ae <__vector_12>:
ISR(TIMER1_COMPA_vect){ }
 2ae:	1f 92       	push	r1
 2b0:	0f 92       	push	r0
 2b2:	0f b6       	in	r0, 0x3f	; 63
 2b4:	0f 92       	push	r0
 2b6:	11 24       	eor	r1, r1
 2b8:	0f 90       	pop	r0
 2ba:	0f be       	out	0x3f, r0	; 63
 2bc:	0f 90       	pop	r0
 2be:	1f 90       	pop	r1
 2c0:	18 95       	reti

000002c2 <__vector_13>:
ISR(TIMER1_COMPB_vect){ }
 2c2:	1f 92       	push	r1
 2c4:	0f 92       	push	r0
 2c6:	0f b6       	in	r0, 0x3f	; 63
 2c8:	0f 92       	push	r0
 2ca:	11 24       	eor	r1, r1
 2cc:	0f 90       	pop	r0
 2ce:	0f be       	out	0x3f, r0	; 63
 2d0:	0f 90       	pop	r0
 2d2:	1f 90       	pop	r1
 2d4:	18 95       	reti

000002d6 <__vector_14>:
ISR(TIMER1_OVF_vect){ }
 2d6:	1f 92       	push	r1
 2d8:	0f 92       	push	r0
 2da:	0f b6       	in	r0, 0x3f	; 63
 2dc:	0f 92       	push	r0
 2de:	11 24       	eor	r1, r1
 2e0:	0f 90       	pop	r0
 2e2:	0f be       	out	0x3f, r0	; 63
 2e4:	0f 90       	pop	r0
 2e6:	1f 90       	pop	r1
 2e8:	18 95       	reti

000002ea <__vector_15>:
ISR(TIMER0_COMP_vect){ }
 2ea:	1f 92       	push	r1
 2ec:	0f 92       	push	r0
 2ee:	0f b6       	in	r0, 0x3f	; 63
 2f0:	0f 92       	push	r0
 2f2:	11 24       	eor	r1, r1
 2f4:	0f 90       	pop	r0
 2f6:	0f be       	out	0x3f, r0	; 63
 2f8:	0f 90       	pop	r0
 2fa:	1f 90       	pop	r1
 2fc:	18 95       	reti

000002fe <__vector_16>:
ISR(TIMER0_OVF_vect){ }
 2fe:	1f 92       	push	r1
 300:	0f 92       	push	r0
 302:	0f b6       	in	r0, 0x3f	; 63
 304:	0f 92       	push	r0
 306:	11 24       	eor	r1, r1
 308:	0f 90       	pop	r0
 30a:	0f be       	out	0x3f, r0	; 63
 30c:	0f 90       	pop	r0
 30e:	1f 90       	pop	r1
 310:	18 95       	reti

00000312 <__vector_24>:
ISR(TIMER1_COMPC_vect){ }
 312:	1f 92       	push	r1
 314:	0f 92       	push	r0
 316:	0f b6       	in	r0, 0x3f	; 63
 318:	0f 92       	push	r0
 31a:	11 24       	eor	r1, r1
 31c:	0f 90       	pop	r0
 31e:	0f be       	out	0x3f, r0	; 63
 320:	0f 90       	pop	r0
 322:	1f 90       	pop	r1
 324:	18 95       	reti

00000326 <__vector_25>:
ISR(TIMER3_CAPT_vect){ }
 326:	1f 92       	push	r1
 328:	0f 92       	push	r0
 32a:	0f b6       	in	r0, 0x3f	; 63
 32c:	0f 92       	push	r0
 32e:	11 24       	eor	r1, r1
 330:	0f 90       	pop	r0
 332:	0f be       	out	0x3f, r0	; 63
 334:	0f 90       	pop	r0
 336:	1f 90       	pop	r1
 338:	18 95       	reti

0000033a <__vector_26>:
ISR(TIMER3_COMPA_vect){ }
 33a:	1f 92       	push	r1
 33c:	0f 92       	push	r0
 33e:	0f b6       	in	r0, 0x3f	; 63
 340:	0f 92       	push	r0
 342:	11 24       	eor	r1, r1
 344:	0f 90       	pop	r0
 346:	0f be       	out	0x3f, r0	; 63
 348:	0f 90       	pop	r0
 34a:	1f 90       	pop	r1
 34c:	18 95       	reti

0000034e <__vector_27>:
ISR(TIMER3_COMPB_vect){ }
 34e:	1f 92       	push	r1
 350:	0f 92       	push	r0
 352:	0f b6       	in	r0, 0x3f	; 63
 354:	0f 92       	push	r0
 356:	11 24       	eor	r1, r1
 358:	0f 90       	pop	r0
 35a:	0f be       	out	0x3f, r0	; 63
 35c:	0f 90       	pop	r0
 35e:	1f 90       	pop	r1
 360:	18 95       	reti

00000362 <__vector_28>:
ISR(TIMER3_COMPC_vect){ }
 362:	1f 92       	push	r1
 364:	0f 92       	push	r0
 366:	0f b6       	in	r0, 0x3f	; 63
 368:	0f 92       	push	r0
 36a:	11 24       	eor	r1, r1
 36c:	0f 90       	pop	r0
 36e:	0f be       	out	0x3f, r0	; 63
 370:	0f 90       	pop	r0
 372:	1f 90       	pop	r1
 374:	18 95       	reti

00000376 <__vector_29>:
ISR(TIMER3_OVF_vect){ }
 376:	1f 92       	push	r1
 378:	0f 92       	push	r0
 37a:	0f b6       	in	r0, 0x3f	; 63
 37c:	0f 92       	push	r0
 37e:	11 24       	eor	r1, r1
 380:	0f 90       	pop	r0
 382:	0f be       	out	0x3f, r0	; 63
 384:	0f 90       	pop	r0
 386:	1f 90       	pop	r1
 388:	18 95       	reti

0000038a <I2Cenable>:
}
unsigned char twi_status(void){
	unsigned char status;
	status = TWI_STATUS_REGISTER & TWI_STATUS_MASK;
	return status;
}
 38a:	1f 93       	push	r17
 38c:	cf 93       	push	r28
 38e:	df 93       	push	r29
 390:	ec 01       	movw	r28, r24
 392:	1f b7       	in	r17, 0x3f	; 63
 394:	8f b7       	in	r24, 0x3f	; 63
 396:	8f 77       	andi	r24, 0x7F	; 127
 398:	8f bf       	out	0x3f, r24	; 63
 39a:	16 16       	cp	r1, r22
 39c:	3c f4       	brge	.+14     	; 0x3ac <I2Cenable+0x22>
 39e:	60 93 b9 01 	sts	0x01B9, r22	; 0x8001b9 <twi_chip_id>
 3a2:	66 0f       	add	r22, r22
 3a4:	61 60       	ori	r22, 0x01	; 1
 3a6:	60 93 72 00 	sts	0x0072, r22	; 0x800072 <__TEXT_REGION_LENGTH__+0x7e0072>
 3aa:	03 c0       	rjmp	.+6      	; 0x3b2 <I2Cenable+0x28>
 3ac:	82 e0       	ldi	r24, 0x02	; 2
 3ae:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <twi_chip_id>
 3b2:	81 b3       	in	r24, 0x11	; 17
 3b4:	83 60       	ori	r24, 0x03	; 3
 3b6:	81 bb       	out	0x11, r24	; 17
 3b8:	82 b3       	in	r24, 0x12	; 18
 3ba:	83 60       	ori	r24, 0x03	; 3
 3bc:	82 bb       	out	0x12, r24	; 18
 3be:	44 30       	cpi	r20, 0x04	; 4
 3c0:	79 f0       	breq	.+30     	; 0x3e0 <I2Cenable+0x56>
 3c2:	18 f4       	brcc	.+6      	; 0x3ca <I2Cenable+0x40>
 3c4:	41 30       	cpi	r20, 0x01	; 1
 3c6:	31 f0       	breq	.+12     	; 0x3d4 <I2Cenable+0x4a>
 3c8:	1d c0       	rjmp	.+58     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3ca:	40 31       	cpi	r20, 0x10	; 16
 3cc:	79 f0       	breq	.+30     	; 0x3ec <I2Cenable+0x62>
 3ce:	40 34       	cpi	r20, 0x40	; 64
 3d0:	99 f0       	breq	.+38     	; 0x3f8 <I2Cenable+0x6e>
 3d2:	18 c0       	rjmp	.+48     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3d4:	e1 e7       	ldi	r30, 0x71	; 113
 3d6:	f0 e0       	ldi	r31, 0x00	; 0
 3d8:	80 81       	ld	r24, Z
 3da:	8c 7f       	andi	r24, 0xFC	; 252
 3dc:	80 83       	st	Z, r24
 3de:	18 c0       	rjmp	.+48     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3e0:	e1 e7       	ldi	r30, 0x71	; 113
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	80 81       	ld	r24, Z
 3e6:	81 60       	ori	r24, 0x01	; 1
 3e8:	80 83       	st	Z, r24
 3ea:	12 c0       	rjmp	.+36     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3ec:	e1 e7       	ldi	r30, 0x71	; 113
 3ee:	f0 e0       	ldi	r31, 0x00	; 0
 3f0:	80 81       	ld	r24, Z
 3f2:	82 60       	ori	r24, 0x02	; 2
 3f4:	80 83       	st	Z, r24
 3f6:	0c c0       	rjmp	.+24     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3f8:	e1 e7       	ldi	r30, 0x71	; 113
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	80 81       	ld	r24, Z
 3fe:	83 60       	ori	r24, 0x03	; 3
 400:	80 83       	st	Z, r24
 402:	06 c0       	rjmp	.+12     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 404:	e1 e7       	ldi	r30, 0x71	; 113
 406:	f0 e0       	ldi	r31, 0x00	; 0
 408:	80 81       	ld	r24, Z
 40a:	8c 7f       	andi	r24, 0xFC	; 252
 40c:	80 83       	st	Z, r24
 40e:	41 e0       	ldi	r20, 0x01	; 1
 410:	24 2f       	mov	r18, r20
 412:	30 e0       	ldi	r19, 0x00	; 0
 414:	22 0f       	add	r18, r18
 416:	33 1f       	adc	r19, r19
 418:	03 2e       	mov	r0, r19
 41a:	00 0c       	add	r0, r0
 41c:	44 0b       	sbc	r20, r20
 41e:	55 0b       	sbc	r21, r21
 420:	60 e9       	ldi	r22, 0x90	; 144
 422:	70 e0       	ldi	r23, 0x00	; 0
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	8c d4       	rcall	.+2328   	; 0xd42 <__udivmodsi4>
 42a:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 42e:	1f bf       	out	0x3f, r17	; 63
 430:	8f b7       	in	r24, 0x3f	; 63
 432:	80 68       	ori	r24, 0x80	; 128
 434:	8f bf       	out	0x3f, r24	; 63
 436:	80 e8       	ldi	r24, 0x80	; 128
 438:	92 e0       	ldi	r25, 0x02	; 2
 43a:	99 83       	std	Y+1, r25	; 0x01
 43c:	88 83       	st	Y, r24
 43e:	80 e9       	ldi	r24, 0x90	; 144
 440:	92 e0       	ldi	r25, 0x02	; 2
 442:	9b 83       	std	Y+3, r25	; 0x03
 444:	8a 83       	std	Y+2, r24	; 0x02
 446:	89 ea       	ldi	r24, 0xA9	; 169
 448:	92 e0       	ldi	r25, 0x02	; 2
 44a:	9d 83       	std	Y+5, r25	; 0x05
 44c:	8c 83       	std	Y+4, r24	; 0x04
 44e:	81 ec       	ldi	r24, 0xC1	; 193
 450:	92 e0       	ldi	r25, 0x02	; 2
 452:	9f 83       	std	Y+7, r25	; 0x07
 454:	8e 83       	std	Y+6, r24	; 0x06
 456:	88 e5       	ldi	r24, 0x58	; 88
 458:	92 e0       	ldi	r25, 0x02	; 2
 45a:	99 87       	std	Y+9, r25	; 0x09
 45c:	88 87       	std	Y+8, r24	; 0x08
 45e:	ce 01       	movw	r24, r28
 460:	df 91       	pop	r29
 462:	cf 91       	pop	r28
 464:	1f 91       	pop	r17
 466:	08 95       	ret

00000468 <twi_transmit>:
 468:	81 30       	cpi	r24, 0x01	; 1
 46a:	61 f0       	breq	.+24     	; 0x484 <twi_transmit+0x1c>
 46c:	28 f0       	brcs	.+10     	; 0x478 <twi_transmit+0x10>
 46e:	82 30       	cpi	r24, 0x02	; 2
 470:	79 f0       	breq	.+30     	; 0x490 <twi_transmit+0x28>
 472:	83 30       	cpi	r24, 0x03	; 3
 474:	99 f0       	breq	.+38     	; 0x49c <twi_transmit+0x34>
 476:	18 c0       	rjmp	.+48     	; 0x4a8 <twi_transmit+0x40>
 478:	e4 e7       	ldi	r30, 0x74	; 116
 47a:	f0 e0       	ldi	r31, 0x00	; 0
 47c:	80 81       	ld	r24, Z
 47e:	84 6a       	ori	r24, 0xA4	; 164
 480:	80 83       	st	Z, r24
 482:	08 95       	ret
 484:	e4 e7       	ldi	r30, 0x74	; 116
 486:	f0 e0       	ldi	r31, 0x00	; 0
 488:	80 81       	ld	r24, Z
 48a:	84 68       	ori	r24, 0x84	; 132
 48c:	80 83       	st	Z, r24
 48e:	08 95       	ret
 490:	e4 e7       	ldi	r30, 0x74	; 116
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	80 81       	ld	r24, Z
 496:	84 6c       	ori	r24, 0xC4	; 196
 498:	80 83       	st	Z, r24
 49a:	08 95       	ret
 49c:	e4 e7       	ldi	r30, 0x74	; 116
 49e:	f0 e0       	ldi	r31, 0x00	; 0
 4a0:	80 81       	ld	r24, Z
 4a2:	84 69       	ori	r24, 0x94	; 148
 4a4:	80 83       	st	Z, r24
 4a6:	08 95       	ret
 4a8:	84 e9       	ldi	r24, 0x94	; 148
 4aa:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 4ae:	08 95       	ret

000004b0 <twi_stop>:
 4b0:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 4b4:	88 7f       	andi	r24, 0xF8	; 248
 4b6:	88 33       	cpi	r24, 0x38	; 56
 4b8:	51 f0       	breq	.+20     	; 0x4ce <twi_stop+0x1e>
 4ba:	28 f4       	brcc	.+10     	; 0x4c6 <twi_stop+0x16>
 4bc:	80 32       	cpi	r24, 0x20	; 32
 4be:	39 f0       	breq	.+14     	; 0x4ce <twi_stop+0x1e>
 4c0:	80 33       	cpi	r24, 0x30	; 48
 4c2:	39 f4       	brne	.+14     	; 0x4d2 <twi_stop+0x22>
 4c4:	04 c0       	rjmp	.+8      	; 0x4ce <twi_stop+0x1e>
 4c6:	88 34       	cpi	r24, 0x48	; 72
 4c8:	11 f0       	breq	.+4      	; 0x4ce <twi_stop+0x1e>
 4ca:	88 35       	cpi	r24, 0x58	; 88
 4cc:	11 f4       	brne	.+4      	; 0x4d2 <twi_stop+0x22>
 4ce:	83 e0       	ldi	r24, 0x03	; 3
 4d0:	cb df       	rcall	.-106    	; 0x468 <twi_transmit>
 4d2:	83 e0       	ldi	r24, 0x03	; 3
 4d4:	c9 cf       	rjmp	.-110    	; 0x468 <twi_transmit>
 4d6:	08 95       	ret

000004d8 <twi_poll>:
void twi_poll(unsigned int ticks)
{
 4d8:	ac 01       	movw	r20, r24
	unsigned int i;
	for(i=0;!(TWI_CONTROL_REGISTER & (1<<TWINT));i++) // polling.
 4da:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 4de:	88 23       	and	r24, r24
 4e0:	2c f4       	brge	.+10     	; 0x4ec <twi_poll+0x14>
 4e2:	08 95       	ret
		if(i > ticks)
 4e4:	42 17       	cp	r20, r18
 4e6:	53 07       	cpc	r21, r19
 4e8:	28 f4       	brcc	.+10     	; 0x4f4 <twi_poll+0x1c>
 4ea:	08 95       	ret
	return status;
}
void twi_poll(unsigned int ticks)
{
	unsigned int i;
	for(i=0;!(TWI_CONTROL_REGISTER & (1<<TWINT));i++) // polling.
 4ec:	20 e0       	ldi	r18, 0x00	; 0
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	e4 e7       	ldi	r30, 0x74	; 116
 4f2:	f0 e0       	ldi	r31, 0x00	; 0
 4f4:	2f 5f       	subi	r18, 0xFF	; 255
 4f6:	3f 4f       	sbci	r19, 0xFF	; 255
 4f8:	90 81       	ld	r25, Z
 4fa:	99 23       	and	r25, r25
 4fc:	9c f7       	brge	.-26     	; 0x4e4 <twi_poll+0xc>
 4fe:	08 95       	ret

00000500 <twi_start>:
		if(i > ticks)
			break;
}
void twi_start(unsigned char mode)
{
	if(mode){
 500:	88 23       	and	r24, r24
 502:	41 f0       	breq	.+16     	; 0x514 <twi_start+0x14>
		TWI_CONTROL_REGISTER = (1<<TWEA) | (1<<TWEN) | (1<<TWIE);
 504:	e4 e7       	ldi	r30, 0x74	; 116
 506:	f0 e0       	ldi	r31, 0x00	; 0
 508:	85 e4       	ldi	r24, 0x45	; 69
 50a:	80 83       	st	Z, r24
		TWI_CONTROL_REGISTER &= ~((1<<TWSTA) | (1<<TWSTO));
 50c:	80 81       	ld	r24, Z
 50e:	8f 7c       	andi	r24, 0xCF	; 207
 510:	80 83       	st	Z, r24
 512:	08 95       	ret
	}else{
		twi_transmit(TWI_START_CONDITION);
 514:	80 e0       	ldi	r24, 0x00	; 0
 516:	a8 df       	rcall	.-176    	; 0x468 <twi_transmit>
		twi_poll(680);
 518:	88 ea       	ldi	r24, 0xA8	; 168
 51a:	92 e0       	ldi	r25, 0x02	; 2
 51c:	dd cf       	rjmp	.-70     	; 0x4d8 <twi_poll>
 51e:	08 95       	ret

00000520 <twi_master_connect>:
			break;
	}
}
unsigned char twi_status(void){
	unsigned char status;
	status = TWI_STATUS_REGISTER & TWI_STATUS_MASK;
 520:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
		twi_poll(680);
	}	
}
void twi_master_connect(unsigned char addr, unsigned char rw)
{
	switch(twi_status()){
 524:	98 7f       	andi	r25, 0xF8	; 248
 526:	98 30       	cpi	r25, 0x08	; 8
 528:	99 f4       	brne	.+38     	; 0x550 <twi_master_connect+0x30>
		case TWI_SENT_START:
			TWI_CONTROL_REGISTER &= ~(1<<TWSTA);
 52a:	e4 e7       	ldi	r30, 0x74	; 116
 52c:	f0 e0       	ldi	r31, 0x00	; 0
 52e:	90 81       	ld	r25, Z
 530:	9f 7d       	andi	r25, 0xDF	; 223
 532:	90 83       	st	Z, r25
			if(addr>0 && addr<128){
 534:	18 16       	cp	r1, r24
 536:	2c f4       	brge	.+10     	; 0x542 <twi_master_connect+0x22>
				TWI_DATA_REGISTER=(addr<<TWA0) | rw;
 538:	88 0f       	add	r24, r24
 53a:	86 2b       	or	r24, r22
 53c:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 540:	02 c0       	rjmp	.+4      	; 0x546 <twi_master_connect+0x26>
			}else{
				TWI_DATA_REGISTER=0;
 542:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
			}
			twi_transmit(TWI_DATA_NO_ACK);
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	8f df       	rcall	.-226    	; 0x468 <twi_transmit>
			twi_poll(680);
 54a:	88 ea       	ldi	r24, 0xA8	; 168
 54c:	92 e0       	ldi	r25, 0x02	; 2
 54e:	c4 cf       	rjmp	.-120    	; 0x4d8 <twi_poll>
 550:	08 95       	ret

00000552 <twi_master_write>:
			break;
	}
}
unsigned char twi_status(void){
	unsigned char status;
	status = TWI_STATUS_REGISTER & TWI_STATUS_MASK;
 552:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
			break;
	}
}
void twi_master_write(unsigned char data)
{
	switch(twi_status()){
 556:	98 7f       	andi	r25, 0xF8	; 248
 558:	98 31       	cpi	r25, 0x18	; 24
 55a:	19 f0       	breq	.+6      	; 0x562 <twi_master_write+0x10>
 55c:	98 32       	cpi	r25, 0x28	; 40
 55e:	49 f0       	breq	.+18     	; 0x572 <twi_master_write+0x20>
 560:	08 95       	ret
		case TWI_MASTER_SENT_SLA_W_RECEIVED_ACK:
			TWI_DATA_REGISTER=data; // 8 bit data + ack = 9bit
 562:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
			twi_transmit(TWI_DATA_NO_ACK);
 566:	81 e0       	ldi	r24, 0x01	; 1
 568:	7f df       	rcall	.-258    	; 0x468 <twi_transmit>
			twi_poll(680);
 56a:	88 ea       	ldi	r24, 0xA8	; 168
 56c:	92 e0       	ldi	r25, 0x02	; 2
 56e:	b4 cf       	rjmp	.-152    	; 0x4d8 <twi_poll>
			break;
 570:	08 95       	ret
		case TWI_MASTER_SENT_DATABYTE_RECEIVED_ACK:
			TWI_DATA_REGISTER=data; // 8 bit data + ack = 9bit
 572:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
			twi_transmit(TWI_DATA_NO_ACK);
 576:	81 e0       	ldi	r24, 0x01	; 1
			twi_poll(680);
 578:	77 df       	rcall	.-274    	; 0x468 <twi_transmit>
 57a:	88 ea       	ldi	r24, 0xA8	; 168
 57c:	92 e0       	ldi	r25, 0x02	; 2
 57e:	ac cf       	rjmp	.-168    	; 0x4d8 <twi_poll>
 580:	08 95       	ret

00000582 <twi_master_read>:
		default:
			break;
	}					
}
unsigned char twi_master_read(unsigned char request)
{
 582:	cf 93       	push	r28
 584:	c8 2f       	mov	r28, r24
			break;
	}
}
unsigned char twi_status(void){
	unsigned char status;
	status = TWI_STATUS_REGISTER & TWI_STATUS_MASK;
 586:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
	}					
}
unsigned char twi_master_read(unsigned char request)
{
	unsigned char data='X';
	switch(twi_status()){
 58a:	88 7f       	andi	r24, 0xF8	; 248
 58c:	80 34       	cpi	r24, 0x40	; 64
 58e:	19 f0       	breq	.+6      	; 0x596 <twi_master_read+0x14>
 590:	80 35       	cpi	r24, 0x50	; 80
 592:	e1 f0       	breq	.+56     	; 0x5cc <twi_master_read+0x4a>
 594:	37 c0       	rjmp	.+110    	; 0x604 <twi_master_read+0x82>
		case TWI_MASTER_SENT_SLA_R_RECEIVED_ACK:
			switch(request){
 596:	c1 30       	cpi	r28, 0x01	; 1
 598:	51 f0       	breq	.+20     	; 0x5ae <twi_master_read+0x2c>
 59a:	c2 30       	cpi	r28, 0x02	; 2
 59c:	81 f4       	brne	.+32     	; 0x5be <twi_master_read+0x3c>
				case TWI_DATA_ACK:
					twi_transmit(TWI_DATA_ACK);
 59e:	82 e0       	ldi	r24, 0x02	; 2
 5a0:	63 df       	rcall	.-314    	; 0x468 <twi_transmit>
					twi_poll(680);
 5a2:	88 ea       	ldi	r24, 0xA8	; 168
 5a4:	92 e0       	ldi	r25, 0x02	; 2
 5a6:	98 df       	rcall	.-208    	; 0x4d8 <twi_poll>
					data=TWI_DATA_REGISTER; // 8 bit data + ack = 9bit
 5a8:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
					break;
				case TWI_DATA_NO_ACK:
					twi_transmit(TWI_DATA_NO_ACK); // last byte to read
 5ac:	13 c0       	rjmp	.+38     	; 0x5d4 <twi_master_read+0x52>
 5ae:	81 e0       	ldi	r24, 0x01	; 1
					twi_poll(680);
 5b0:	5b df       	rcall	.-330    	; 0x468 <twi_transmit>
 5b2:	88 ea       	ldi	r24, 0xA8	; 168
 5b4:	92 e0       	ldi	r25, 0x02	; 2
 5b6:	90 df       	rcall	.-224    	; 0x4d8 <twi_poll>
					data=TWI_DATA_REGISTER; // 8 bit data + ack = 9bit
 5b8:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
					break;
				default:
					twi_transmit(TWI_DATA_NO_ACK); // last byte to read
 5bc:	13 c0       	rjmp	.+38     	; 0x5e4 <twi_master_read+0x62>
 5be:	81 e0       	ldi	r24, 0x01	; 1
					twi_poll(680);
 5c0:	53 df       	rcall	.-346    	; 0x468 <twi_transmit>
 5c2:	88 ea       	ldi	r24, 0xA8	; 168
 5c4:	92 e0       	ldi	r25, 0x02	; 2
 5c6:	88 df       	rcall	.-240    	; 0x4d8 <twi_poll>
					data=TWI_DATA_REGISTER; // 8 bit data + ack = 9bit
 5c8:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
					break;
			}
		case TWI_MASTER_RECEIVED_DATABYTE_SENT_ACK:
			switch(request){
 5cc:	c1 30       	cpi	r28, 0x01	; 1
 5ce:	51 f0       	breq	.+20     	; 0x5e4 <twi_master_read+0x62>
				case TWI_DATA_ACK: // 2
					twi_transmit(TWI_DATA_ACK);
 5d0:	c2 30       	cpi	r28, 0x02	; 2
 5d2:	81 f4       	brne	.+32     	; 0x5f4 <twi_master_read+0x72>
 5d4:	82 e0       	ldi	r24, 0x02	; 2
					twi_poll(680);
 5d6:	48 df       	rcall	.-368    	; 0x468 <twi_transmit>
 5d8:	88 ea       	ldi	r24, 0xA8	; 168
 5da:	92 e0       	ldi	r25, 0x02	; 2
					data=TWI_DATA_REGISTER; // 8 bit data + ack = 9bit
 5dc:	7d df       	rcall	.-262    	; 0x4d8 <twi_poll>
 5de:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
					break;
				case TWI_DATA_NO_ACK: // 1
					twi_transmit(TWI_DATA_NO_ACK); // last byte to read
 5e2:	11 c0       	rjmp	.+34     	; 0x606 <twi_master_read+0x84>
 5e4:	81 e0       	ldi	r24, 0x01	; 1
					twi_poll(680);
 5e6:	40 df       	rcall	.-384    	; 0x468 <twi_transmit>
 5e8:	88 ea       	ldi	r24, 0xA8	; 168
 5ea:	92 e0       	ldi	r25, 0x02	; 2
					data=TWI_DATA_REGISTER; // 8 bit data + ack = 9bit
 5ec:	75 df       	rcall	.-278    	; 0x4d8 <twi_poll>
 5ee:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
					break;
				default: // 1
					twi_transmit(TWI_DATA_NO_ACK); // last byte to read
 5f2:	09 c0       	rjmp	.+18     	; 0x606 <twi_master_read+0x84>
 5f4:	81 e0       	ldi	r24, 0x01	; 1
 5f6:	38 df       	rcall	.-400    	; 0x468 <twi_transmit>
					twi_poll(680);
 5f8:	88 ea       	ldi	r24, 0xA8	; 168
 5fa:	92 e0       	ldi	r25, 0x02	; 2
 5fc:	6d df       	rcall	.-294    	; 0x4d8 <twi_poll>
 5fe:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
					data=TWI_DATA_REGISTER; // 8 bit data + ack = 9bit
 602:	01 c0       	rjmp	.+2      	; 0x606 <twi_master_read+0x84>
					break;
 604:	88 e5       	ldi	r24, 0x58	; 88
			break;
	}					
}
unsigned char twi_master_read(unsigned char request)
{
	unsigned char data='X';
 606:	cf 91       	pop	r28
			}
		default:
			break;
	}
	return data;
}
 608:	08 95       	ret

0000060a <__vector_33>:
 60a:	1f 92       	push	r1
	}
}
/*
** interrupt
*/
ISR(TWI_vect){ }
 60c:	0f 92       	push	r0
 60e:	0f b6       	in	r0, 0x3f	; 63
 610:	0f 92       	push	r0
 612:	11 24       	eor	r1, r1
 614:	0f 90       	pop	r0
 616:	0f be       	out	0x3f, r0	; 63
 618:	0f 90       	pop	r0
 61a:	1f 90       	pop	r1
 61c:	18 95       	reti

0000061e <__vector_18>:
void uart1_puts_p(const char *progmem_s )
{
    register char c;
    while ( (c = pgm_read_byte(progmem_s++)) ) 
      uart1_putc(c);
}/* uart1_puts_p */
 61e:	1f 92       	push	r1
 620:	0f 92       	push	r0
 622:	0f b6       	in	r0, 0x3f	; 63
 624:	0f 92       	push	r0
 626:	11 24       	eor	r1, r1
 628:	0b b6       	in	r0, 0x3b	; 59
 62a:	0f 92       	push	r0
 62c:	8f 93       	push	r24
 62e:	9f 93       	push	r25
 630:	ef 93       	push	r30
 632:	ff 93       	push	r31
 634:	8b b1       	in	r24, 0x0b	; 11
 636:	9a b1       	in	r25, 0x0a	; 10
 638:	88 71       	andi	r24, 0x18	; 24
 63a:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <UART_LastRxError>
 63e:	e0 91 76 01 	lds	r30, 0x0176	; 0x800176 <UART_RxHead>
 642:	ef 5f       	subi	r30, 0xFF	; 255
 644:	ef 71       	andi	r30, 0x1F	; 31
 646:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <UART_RxTail>
 64a:	e8 13       	cpse	r30, r24
 64c:	04 c0       	rjmp	.+8      	; 0x656 <__vector_18+0x38>
 64e:	82 e0       	ldi	r24, 0x02	; 2
 650:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <UART_LastRxError>
 654:	11 c0       	rjmp	.+34     	; 0x678 <__vector_18+0x5a>
 656:	9c b1       	in	r25, 0x0c	; 12
 658:	e0 93 76 01 	sts	0x0176, r30	; 0x800176 <UART_RxHead>
 65c:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <UART_LastRxError>
 660:	88 23       	and	r24, r24
 662:	31 f0       	breq	.+12     	; 0x670 <__vector_18+0x52>
 664:	f0 e0       	ldi	r31, 0x00	; 0
 666:	e7 58       	subi	r30, 0x87	; 135
 668:	fe 4f       	sbci	r31, 0xFE	; 254
 66a:	88 e5       	ldi	r24, 0x58	; 88
 66c:	80 83       	st	Z, r24
 66e:	04 c0       	rjmp	.+8      	; 0x678 <__vector_18+0x5a>
 670:	f0 e0       	ldi	r31, 0x00	; 0
 672:	e7 58       	subi	r30, 0x87	; 135
 674:	fe 4f       	sbci	r31, 0xFE	; 254
 676:	90 83       	st	Z, r25
 678:	ff 91       	pop	r31
 67a:	ef 91       	pop	r30
 67c:	9f 91       	pop	r25
 67e:	8f 91       	pop	r24
 680:	0f 90       	pop	r0
 682:	0b be       	out	0x3b, r0	; 59
 684:	0f 90       	pop	r0
 686:	0f be       	out	0x3f, r0	; 63
 688:	0f 90       	pop	r0
 68a:	1f 90       	pop	r1
 68c:	18 95       	reti

0000068e <__vector_19>:
 68e:	1f 92       	push	r1
 690:	0f 92       	push	r0
 692:	0f b6       	in	r0, 0x3f	; 63
 694:	0f 92       	push	r0
 696:	11 24       	eor	r1, r1
 698:	0b b6       	in	r0, 0x3b	; 59
 69a:	0f 92       	push	r0
 69c:	8f 93       	push	r24
 69e:	9f 93       	push	r25
 6a0:	ef 93       	push	r30
 6a2:	ff 93       	push	r31
 6a4:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <UART_TxHead>
 6a8:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <UART_TxTail>
 6ac:	98 13       	cpse	r25, r24
 6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <__vector_19+0x26>
 6b0:	55 98       	cbi	0x0a, 5	; 10
 6b2:	0b c0       	rjmp	.+22     	; 0x6ca <__vector_19+0x3c>
 6b4:	e0 91 77 01 	lds	r30, 0x0177	; 0x800177 <UART_TxTail>
 6b8:	ef 5f       	subi	r30, 0xFF	; 255
 6ba:	ef 71       	andi	r30, 0x1F	; 31
 6bc:	e0 93 77 01 	sts	0x0177, r30	; 0x800177 <UART_TxTail>
 6c0:	f0 e0       	ldi	r31, 0x00	; 0
 6c2:	e7 56       	subi	r30, 0x67	; 103
 6c4:	fe 4f       	sbci	r31, 0xFE	; 254
 6c6:	80 81       	ld	r24, Z
 6c8:	8c b9       	out	0x0c, r24	; 12
 6ca:	ff 91       	pop	r31
 6cc:	ef 91       	pop	r30
 6ce:	9f 91       	pop	r25
 6d0:	8f 91       	pop	r24
 6d2:	0f 90       	pop	r0
 6d4:	0b be       	out	0x3b, r0	; 59
 6d6:	0f 90       	pop	r0
 6d8:	0f be       	out	0x3f, r0	; 63
 6da:	0f 90       	pop	r0
 6dc:	1f 90       	pop	r1
 6de:	18 95       	reti

000006e0 <__vector_30>:
SIGNAL(UART1_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART1 Receive Complete interrupt
Purpose:  called when the UART1 has received a character
**************************************************************************/
{
 6e0:	1f 92       	push	r1
 6e2:	0f 92       	push	r0
 6e4:	0f b6       	in	r0, 0x3f	; 63
 6e6:	0f 92       	push	r0
 6e8:	11 24       	eor	r1, r1
 6ea:	0b b6       	in	r0, 0x3b	; 59
 6ec:	0f 92       	push	r0
 6ee:	8f 93       	push	r24
 6f0:	9f 93       	push	r25
 6f2:	ef 93       	push	r30
 6f4:	ff 93       	push	r31
    unsigned char tmphead;
	unsigned char data;
	unsigned char bit9;
    unsigned char usr;
    /* read UART status register and UART data register */
	usr  = UART1_STATUS;
 6f6:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    bit9 = UART1_CONTROL;
 6fa:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
    bit9 = 0x01 & (bit9>>1);
    /* */
    UART1_LastRxError = (usr & (_BV(FE1)|_BV(DOR1)));
 6fe:	88 71       	andi	r24, 0x18	; 24
 700:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <UART1_LastRxError>
	/* calculate buffer index */
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
 704:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <UART1_RxHead>
 708:	ef 5f       	subi	r30, 0xFF	; 255
 70a:	ef 71       	andi	r30, 0x1F	; 31
    if ( tmphead == UART1_RxTail ) {	
 70c:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <UART1_RxTail>
 710:	e8 13       	cpse	r30, r24
 712:	04 c0       	rjmp	.+8      	; 0x71c <__vector_30+0x3c>
        /* error: receive buffer overflow, caracter is lost*/
        UART1_LastRxError = UART_BUFFER_OVERFLOW >> 8; 
 714:	82 e0       	ldi	r24, 0x02	; 2
 716:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <UART1_LastRxError>
 71a:	12 c0       	rjmp	.+36     	; 0x740 <__vector_30+0x60>
	}else{
		data = UART1_DATA;
 71c:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
        /* store new index */
        UART1_RxHead = tmphead;
 720:	e0 93 31 01 	sts	0x0131, r30	; 0x800131 <UART1_RxHead>
		if(UART1_LastRxError){
 724:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <UART1_LastRxError>
 728:	88 23       	and	r24, r24
 72a:	31 f0       	breq	.+12     	; 0x738 <__vector_30+0x58>
			/* store indication data error in buffer */
			UART1_RxBuf[tmphead] = 'X';
 72c:	f0 e0       	ldi	r31, 0x00	; 0
 72e:	ec 5c       	subi	r30, 0xCC	; 204
 730:	fe 4f       	sbci	r31, 0xFE	; 254
 732:	88 e5       	ldi	r24, 0x58	; 88
 734:	80 83       	st	Z, r24
 736:	04 c0       	rjmp	.+8      	; 0x740 <__vector_30+0x60>
		}else{
			/* store received data in buffer */
			UART1_RxBuf[tmphead] = data;
 738:	f0 e0       	ldi	r31, 0x00	; 0
 73a:	ec 5c       	subi	r30, 0xCC	; 204
 73c:	fe 4f       	sbci	r31, 0xFE	; 254
 73e:	90 83       	st	Z, r25
		}
    }
}
 740:	ff 91       	pop	r31
 742:	ef 91       	pop	r30
 744:	9f 91       	pop	r25
 746:	8f 91       	pop	r24
 748:	0f 90       	pop	r0
 74a:	0b be       	out	0x3b, r0	; 59
 74c:	0f 90       	pop	r0
 74e:	0f be       	out	0x3f, r0	; 63
 750:	0f 90       	pop	r0
 752:	1f 90       	pop	r1
 754:	18 95       	reti

00000756 <__vector_31>:
SIGNAL(UART1_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART1 Data Register Empty interrupt
Purpose:  called when the UART1 is ready to transmit the next byte
**************************************************************************/
{
 756:	1f 92       	push	r1
 758:	0f 92       	push	r0
 75a:	0f b6       	in	r0, 0x3f	; 63
 75c:	0f 92       	push	r0
 75e:	11 24       	eor	r1, r1
 760:	0b b6       	in	r0, 0x3b	; 59
 762:	0f 92       	push	r0
 764:	8f 93       	push	r24
 766:	9f 93       	push	r25
 768:	ef 93       	push	r30
 76a:	ff 93       	push	r31
    if ( UART1_TxHead == UART1_TxTail ) {
 76c:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <UART1_TxHead>
 770:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <UART1_TxTail>
 774:	98 13       	cpse	r25, r24
 776:	06 c0       	rjmp	.+12     	; 0x784 <__vector_31+0x2e>
        /* tx buffer empty, disable UDRE interrupt */
        UART1_CONTROL &= ~_BV(UART1_UDRIE);
 778:	ea e9       	ldi	r30, 0x9A	; 154
 77a:	f0 e0       	ldi	r31, 0x00	; 0
 77c:	80 81       	ld	r24, Z
 77e:	8f 7d       	andi	r24, 0xDF	; 223
 780:	80 83       	st	Z, r24
 782:	0e c0       	rjmp	.+28     	; 0x7a0 <__vector_31+0x4a>
    }else{
		/* calculate and store new buffer index */
        UART1_TxTail = (UART1_TxTail + 1) & UART_TX_BUFFER_MASK;
 784:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <UART1_TxTail>
 788:	8f 5f       	subi	r24, 0xFF	; 255
 78a:	8f 71       	andi	r24, 0x1F	; 31
 78c:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <UART1_TxTail>
        /* get one byte from buffer and write it to UART */
		UART1_DATA = UART1_TxBuf[UART1_TxTail];  /* start transmission */
 790:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <UART1_TxTail>
 794:	f0 e0       	ldi	r31, 0x00	; 0
 796:	ec 5a       	subi	r30, 0xAC	; 172
 798:	fe 4f       	sbci	r31, 0xFE	; 254
 79a:	80 81       	ld	r24, Z
 79c:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
	}
}
 7a0:	ff 91       	pop	r31
 7a2:	ef 91       	pop	r30
 7a4:	9f 91       	pop	r25
 7a6:	8f 91       	pop	r24
 7a8:	0f 90       	pop	r0
 7aa:	0b be       	out	0x3b, r0	; 59
 7ac:	0f 90       	pop	r0
 7ae:	0f be       	out	0x3f, r0	; 63
 7b0:	0f 90       	pop	r0
 7b2:	1f 90       	pop	r1
 7b4:	18 95       	reti

000007b6 <LCD0_write>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7b6:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <lcd0_PORT>
 7ba:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <lcd0_PORT+0x1>
 7be:	90 81       	ld	r25, Z
 7c0:	9d 7f       	andi	r25, 0xFD	; 253
 7c2:	90 83       	st	Z, r25
 7c4:	67 2b       	or	r22, r23
 7c6:	41 f0       	breq	.+16     	; 0x7d8 <LCD0_write+0x22>
 7c8:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <lcd0_PORT>
 7cc:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <lcd0_PORT+0x1>
 7d0:	90 81       	ld	r25, Z
 7d2:	91 60       	ori	r25, 0x01	; 1
 7d4:	90 83       	st	Z, r25
 7d6:	07 c0       	rjmp	.+14     	; 0x7e6 <LCD0_write+0x30>
 7d8:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <lcd0_PORT>
 7dc:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <lcd0_PORT+0x1>
 7e0:	90 81       	ld	r25, Z
 7e2:	9e 7f       	andi	r25, 0xFE	; 254
 7e4:	90 83       	st	Z, r25
 7e6:	e0 91 c2 01 	lds	r30, 0x01C2	; 0x8001c2 <lcd0_DDR>
 7ea:	f0 91 c3 01 	lds	r31, 0x01C3	; 0x8001c3 <lcd0_DDR+0x1>
 7ee:	90 81       	ld	r25, Z
 7f0:	90 6f       	ori	r25, 0xF0	; 240
 7f2:	90 83       	st	Z, r25
 7f4:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <lcd0_PORT>
 7f8:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <lcd0_PORT+0x1>
 7fc:	90 81       	ld	r25, Z
 7fe:	94 60       	ori	r25, 0x04	; 4
 800:	90 83       	st	Z, r25
 802:	88 23       	and	r24, r24
 804:	44 f4       	brge	.+16     	; 0x816 <LCD0_write+0x60>
 806:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <lcd0_PORT>
 80a:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <lcd0_PORT+0x1>
 80e:	90 81       	ld	r25, Z
 810:	90 68       	ori	r25, 0x80	; 128
 812:	90 83       	st	Z, r25
 814:	07 c0       	rjmp	.+14     	; 0x824 <LCD0_write+0x6e>
 816:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <lcd0_PORT>
 81a:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <lcd0_PORT+0x1>
 81e:	90 81       	ld	r25, Z
 820:	9f 77       	andi	r25, 0x7F	; 127
 822:	90 83       	st	Z, r25
 824:	86 ff       	sbrs	r24, 6
 826:	08 c0       	rjmp	.+16     	; 0x838 <LCD0_write+0x82>
 828:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <lcd0_PORT>
 82c:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <lcd0_PORT+0x1>
 830:	90 81       	ld	r25, Z
 832:	90 64       	ori	r25, 0x40	; 64
 834:	90 83       	st	Z, r25
 836:	07 c0       	rjmp	.+14     	; 0x846 <LCD0_write+0x90>
 838:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <lcd0_PORT>
 83c:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <lcd0_PORT+0x1>
 840:	90 81       	ld	r25, Z
 842:	9f 7b       	andi	r25, 0xBF	; 191
 844:	90 83       	st	Z, r25
 846:	85 ff       	sbrs	r24, 5
 848:	08 c0       	rjmp	.+16     	; 0x85a <LCD0_write+0xa4>
 84a:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <lcd0_PORT>
 84e:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <lcd0_PORT+0x1>
 852:	90 81       	ld	r25, Z
 854:	90 62       	ori	r25, 0x20	; 32
 856:	90 83       	st	Z, r25
 858:	07 c0       	rjmp	.+14     	; 0x868 <LCD0_write+0xb2>
 85a:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <lcd0_PORT>
 85e:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <lcd0_PORT+0x1>
 862:	90 81       	ld	r25, Z
 864:	9f 7d       	andi	r25, 0xDF	; 223
 866:	90 83       	st	Z, r25
 868:	84 ff       	sbrs	r24, 4
 86a:	08 c0       	rjmp	.+16     	; 0x87c <LCD0_write+0xc6>
 86c:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <lcd0_PORT>
 870:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <lcd0_PORT+0x1>
 874:	90 81       	ld	r25, Z
 876:	90 61       	ori	r25, 0x10	; 16
 878:	90 83       	st	Z, r25
 87a:	07 c0       	rjmp	.+14     	; 0x88a <LCD0_write+0xd4>
 87c:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <lcd0_PORT>
 880:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <lcd0_PORT+0x1>
 884:	90 81       	ld	r25, Z
 886:	9f 7e       	andi	r25, 0xEF	; 239
 888:	90 83       	st	Z, r25
 88a:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <lcd0_PORT>
 88e:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <lcd0_PORT+0x1>
 892:	90 81       	ld	r25, Z
 894:	9b 7f       	andi	r25, 0xFB	; 251
 896:	90 83       	st	Z, r25
 898:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <lcd0_PORT>
 89c:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <lcd0_PORT+0x1>
 8a0:	90 81       	ld	r25, Z
 8a2:	94 60       	ori	r25, 0x04	; 4
 8a4:	90 83       	st	Z, r25
 8a6:	83 ff       	sbrs	r24, 3
 8a8:	08 c0       	rjmp	.+16     	; 0x8ba <LCD0_write+0x104>
 8aa:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <lcd0_PORT>
 8ae:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <lcd0_PORT+0x1>
 8b2:	90 81       	ld	r25, Z
 8b4:	90 68       	ori	r25, 0x80	; 128
 8b6:	90 83       	st	Z, r25
 8b8:	07 c0       	rjmp	.+14     	; 0x8c8 <LCD0_write+0x112>
 8ba:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <lcd0_PORT>
 8be:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <lcd0_PORT+0x1>
 8c2:	90 81       	ld	r25, Z
 8c4:	9f 77       	andi	r25, 0x7F	; 127
 8c6:	90 83       	st	Z, r25
 8c8:	82 ff       	sbrs	r24, 2
 8ca:	08 c0       	rjmp	.+16     	; 0x8dc <LCD0_write+0x126>
 8cc:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <lcd0_PORT>
 8d0:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <lcd0_PORT+0x1>
 8d4:	90 81       	ld	r25, Z
 8d6:	90 64       	ori	r25, 0x40	; 64
 8d8:	90 83       	st	Z, r25
 8da:	07 c0       	rjmp	.+14     	; 0x8ea <LCD0_write+0x134>
 8dc:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <lcd0_PORT>
 8e0:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <lcd0_PORT+0x1>
 8e4:	90 81       	ld	r25, Z
 8e6:	9f 7b       	andi	r25, 0xBF	; 191
 8e8:	90 83       	st	Z, r25
 8ea:	81 ff       	sbrs	r24, 1
 8ec:	08 c0       	rjmp	.+16     	; 0x8fe <LCD0_write+0x148>
 8ee:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <lcd0_PORT>
 8f2:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <lcd0_PORT+0x1>
 8f6:	90 81       	ld	r25, Z
 8f8:	90 62       	ori	r25, 0x20	; 32
 8fa:	90 83       	st	Z, r25
 8fc:	07 c0       	rjmp	.+14     	; 0x90c <LCD0_write+0x156>
 8fe:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <lcd0_PORT>
 902:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <lcd0_PORT+0x1>
 906:	90 81       	ld	r25, Z
 908:	9f 7d       	andi	r25, 0xDF	; 223
 90a:	90 83       	st	Z, r25
 90c:	80 ff       	sbrs	r24, 0
 90e:	08 c0       	rjmp	.+16     	; 0x920 <LCD0_write+0x16a>
 910:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <lcd0_PORT>
 914:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <lcd0_PORT+0x1>
 918:	80 81       	ld	r24, Z
 91a:	80 61       	ori	r24, 0x10	; 16
 91c:	80 83       	st	Z, r24
 91e:	07 c0       	rjmp	.+14     	; 0x92e <LCD0_write+0x178>
 920:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <lcd0_PORT>
 924:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <lcd0_PORT+0x1>
 928:	80 81       	ld	r24, Z
 92a:	8f 7e       	andi	r24, 0xEF	; 239
 92c:	80 83       	st	Z, r24
 92e:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <lcd0_PORT>
 932:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <lcd0_PORT+0x1>
 936:	80 81       	ld	r24, Z
 938:	8b 7f       	andi	r24, 0xFB	; 251
 93a:	80 83       	st	Z, r24
 93c:	08 95       	ret

0000093e <LCD0_read>:
 93e:	e0 91 c2 01 	lds	r30, 0x01C2	; 0x8001c2 <lcd0_DDR>
 942:	f0 91 c3 01 	lds	r31, 0x01C3	; 0x8001c3 <lcd0_DDR+0x1>
 946:	20 81       	ld	r18, Z
 948:	2f 70       	andi	r18, 0x0F	; 15
 94a:	20 83       	st	Z, r18
 94c:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <lcd0_PORT>
 950:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <lcd0_PORT+0x1>
 954:	20 81       	ld	r18, Z
 956:	20 6f       	ori	r18, 0xF0	; 240
 958:	20 83       	st	Z, r18
 95a:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <lcd0_PORT>
 95e:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <lcd0_PORT+0x1>
 962:	20 81       	ld	r18, Z
 964:	22 60       	ori	r18, 0x02	; 2
 966:	20 83       	st	Z, r18
 968:	89 2b       	or	r24, r25
 96a:	41 f0       	breq	.+16     	; 0x97c <LCD0_read+0x3e>
 96c:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <lcd0_PORT>
 970:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <lcd0_PORT+0x1>
 974:	80 81       	ld	r24, Z
 976:	81 60       	ori	r24, 0x01	; 1
 978:	80 83       	st	Z, r24
 97a:	07 c0       	rjmp	.+14     	; 0x98a <LCD0_read+0x4c>
 97c:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <lcd0_PORT>
 980:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <lcd0_PORT+0x1>
 984:	80 81       	ld	r24, Z
 986:	8e 7f       	andi	r24, 0xFE	; 254
 988:	80 83       	st	Z, r24
 98a:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <lcd0_PORT>
 98e:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <lcd0_PORT+0x1>
 992:	80 81       	ld	r24, Z
 994:	84 60       	ori	r24, 0x04	; 4
 996:	80 83       	st	Z, r24
 998:	e0 91 bb 01 	lds	r30, 0x01BB	; 0x8001bb <lcd0_PIN>
 99c:	f0 91 bc 01 	lds	r31, 0x01BC	; 0x8001bc <lcd0_PIN+0x1>
 9a0:	80 81       	ld	r24, Z
 9a2:	88 23       	and	r24, r24
 9a4:	14 f0       	brlt	.+4      	; 0x9aa <LCD0_read+0x6c>
 9a6:	80 e0       	ldi	r24, 0x00	; 0
 9a8:	01 c0       	rjmp	.+2      	; 0x9ac <LCD0_read+0x6e>
 9aa:	80 e8       	ldi	r24, 0x80	; 128
 9ac:	90 81       	ld	r25, Z
 9ae:	96 ff       	sbrs	r25, 6
 9b0:	02 c0       	rjmp	.+4      	; 0x9b6 <LCD0_read+0x78>
 9b2:	80 64       	ori	r24, 0x40	; 64
 9b4:	01 c0       	rjmp	.+2      	; 0x9b8 <LCD0_read+0x7a>
 9b6:	8f 7b       	andi	r24, 0xBF	; 191
 9b8:	90 81       	ld	r25, Z
 9ba:	95 ff       	sbrs	r25, 5
 9bc:	02 c0       	rjmp	.+4      	; 0x9c2 <LCD0_read+0x84>
 9be:	80 62       	ori	r24, 0x20	; 32
 9c0:	01 c0       	rjmp	.+2      	; 0x9c4 <LCD0_read+0x86>
 9c2:	8f 7d       	andi	r24, 0xDF	; 223
 9c4:	90 81       	ld	r25, Z
 9c6:	94 ff       	sbrs	r25, 4
 9c8:	02 c0       	rjmp	.+4      	; 0x9ce <LCD0_read+0x90>
 9ca:	80 61       	ori	r24, 0x10	; 16
 9cc:	01 c0       	rjmp	.+2      	; 0x9d0 <LCD0_read+0x92>
 9ce:	8f 7e       	andi	r24, 0xEF	; 239
 9d0:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <lcd0_PORT>
 9d4:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <lcd0_PORT+0x1>
 9d8:	90 81       	ld	r25, Z
 9da:	9b 7f       	andi	r25, 0xFB	; 251
 9dc:	90 83       	st	Z, r25
 9de:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <lcd0_PORT>
 9e2:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <lcd0_PORT+0x1>
 9e6:	90 81       	ld	r25, Z
 9e8:	94 60       	ori	r25, 0x04	; 4
 9ea:	90 83       	st	Z, r25
 9ec:	e0 91 bb 01 	lds	r30, 0x01BB	; 0x8001bb <lcd0_PIN>
 9f0:	f0 91 bc 01 	lds	r31, 0x01BC	; 0x8001bc <lcd0_PIN+0x1>
 9f4:	90 81       	ld	r25, Z
 9f6:	99 23       	and	r25, r25
 9f8:	14 f4       	brge	.+4      	; 0x9fe <LCD0_read+0xc0>
 9fa:	88 60       	ori	r24, 0x08	; 8
 9fc:	01 c0       	rjmp	.+2      	; 0xa00 <LCD0_read+0xc2>
 9fe:	87 7f       	andi	r24, 0xF7	; 247
 a00:	90 81       	ld	r25, Z
 a02:	96 ff       	sbrs	r25, 6
 a04:	02 c0       	rjmp	.+4      	; 0xa0a <LCD0_read+0xcc>
 a06:	84 60       	ori	r24, 0x04	; 4
 a08:	01 c0       	rjmp	.+2      	; 0xa0c <LCD0_read+0xce>
 a0a:	8b 7f       	andi	r24, 0xFB	; 251
 a0c:	90 81       	ld	r25, Z
 a0e:	95 ff       	sbrs	r25, 5
 a10:	02 c0       	rjmp	.+4      	; 0xa16 <LCD0_read+0xd8>
 a12:	82 60       	ori	r24, 0x02	; 2
 a14:	01 c0       	rjmp	.+2      	; 0xa18 <LCD0_read+0xda>
 a16:	8d 7f       	andi	r24, 0xFD	; 253
 a18:	90 81       	ld	r25, Z
 a1a:	94 ff       	sbrs	r25, 4
 a1c:	02 c0       	rjmp	.+4      	; 0xa22 <LCD0_read+0xe4>
 a1e:	81 60       	ori	r24, 0x01	; 1
 a20:	01 c0       	rjmp	.+2      	; 0xa24 <LCD0_read+0xe6>
 a22:	8e 7f       	andi	r24, 0xFE	; 254
 a24:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <lcd0_PORT>
 a28:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <lcd0_PORT+0x1>
 a2c:	90 81       	ld	r25, Z
 a2e:	9b 7f       	andi	r25, 0xFB	; 251
 a30:	90 83       	st	Z, r25
 a32:	08 95       	ret

00000a34 <LCD0_BF>:
 a34:	cf 93       	push	r28
 a36:	df 93       	push	r29
 a38:	80 e0       	ldi	r24, 0x00	; 0
 a3a:	90 e0       	ldi	r25, 0x00	; 0
 a3c:	80 df       	rcall	.-256    	; 0x93e <LCD0_read>
 a3e:	cb e0       	ldi	r28, 0x0B	; 11
 a40:	d0 e0       	ldi	r29, 0x00	; 0
 a42:	05 c0       	rjmp	.+10     	; 0xa4e <LCD0_BF+0x1a>
 a44:	80 e0       	ldi	r24, 0x00	; 0
 a46:	90 e0       	ldi	r25, 0x00	; 0
 a48:	7a df       	rcall	.-268    	; 0x93e <LCD0_read>
 a4a:	21 97       	sbiw	r28, 0x01	; 1
 a4c:	11 f0       	breq	.+4      	; 0xa52 <LCD0_BF+0x1e>
 a4e:	88 23       	and	r24, r24
 a50:	cc f3       	brlt	.-14     	; 0xa44 <LCD0_BF+0x10>
 a52:	df 91       	pop	r29
 a54:	cf 91       	pop	r28
 a56:	08 95       	ret

00000a58 <LCD0_putch>:
 a58:	61 e0       	ldi	r22, 0x01	; 1
 a5a:	70 e0       	ldi	r23, 0x00	; 0
 a5c:	ac de       	rcall	.-680    	; 0x7b6 <LCD0_write>
 a5e:	ea cf       	rjmp	.-44     	; 0xa34 <LCD0_BF>
 a60:	08 95       	ret

00000a62 <LCD0_getch>:
 a62:	cf 93       	push	r28
 a64:	81 e0       	ldi	r24, 0x01	; 1
 a66:	90 e0       	ldi	r25, 0x00	; 0
 a68:	6a df       	rcall	.-300    	; 0x93e <LCD0_read>
 a6a:	c8 2f       	mov	r28, r24
 a6c:	e3 df       	rcall	.-58     	; 0xa34 <LCD0_BF>
 a6e:	8c 2f       	mov	r24, r28
 a70:	cf 91       	pop	r28
 a72:	08 95       	ret

00000a74 <LCD0_string>:
 a74:	cf 93       	push	r28
 a76:	df 93       	push	r29
 a78:	ec 01       	movw	r28, r24
 a7a:	88 81       	ld	r24, Y
 a7c:	88 23       	and	r24, r24
 a7e:	41 f0       	breq	.+16     	; 0xa90 <LCD0_string+0x1c>
 a80:	21 96       	adiw	r28, 0x01	; 1
 a82:	61 e0       	ldi	r22, 0x01	; 1
 a84:	70 e0       	ldi	r23, 0x00	; 0
 a86:	97 de       	rcall	.-722    	; 0x7b6 <LCD0_write>
 a88:	d5 df       	rcall	.-86     	; 0xa34 <LCD0_BF>
 a8a:	89 91       	ld	r24, Y+
 a8c:	81 11       	cpse	r24, r1
 a8e:	f9 cf       	rjmp	.-14     	; 0xa82 <LCD0_string+0xe>
 a90:	df 91       	pop	r29
 a92:	cf 91       	pop	r28
 a94:	08 95       	ret

00000a96 <LCD0_string_size>:
 a96:	0f 93       	push	r16
 a98:	1f 93       	push	r17
 a9a:	cf 93       	push	r28
 a9c:	df 93       	push	r29
 a9e:	fc 01       	movw	r30, r24
 aa0:	d6 2f       	mov	r29, r22
 aa2:	80 81       	ld	r24, Z
 aa4:	88 23       	and	r24, r24
 aa6:	51 f0       	breq	.+20     	; 0xabc <LCD0_string_size+0x26>
 aa8:	8f 01       	movw	r16, r30
 aaa:	0f 5f       	subi	r16, 0xFF	; 255
 aac:	1f 4f       	sbci	r17, 0xFF	; 255
 aae:	61 11       	cpse	r22, r1
 ab0:	09 c0       	rjmp	.+18     	; 0xac4 <LCD0_string_size+0x2e>
 ab2:	1b c0       	rjmp	.+54     	; 0xaea <LCD0_string_size+0x54>
 ab4:	cf 5f       	subi	r28, 0xFF	; 255
 ab6:	dc 17       	cp	r29, r28
 ab8:	30 f4       	brcc	.+12     	; 0xac6 <LCD0_string_size+0x30>
 aba:	01 c0       	rjmp	.+2      	; 0xabe <LCD0_string_size+0x28>
 abc:	c0 e0       	ldi	r28, 0x00	; 0
 abe:	cd 17       	cp	r28, r29
 ac0:	60 f0       	brcs	.+24     	; 0xada <LCD0_string_size+0x44>
 ac2:	13 c0       	rjmp	.+38     	; 0xaea <LCD0_string_size+0x54>
 ac4:	c1 e0       	ldi	r28, 0x01	; 1
 ac6:	61 e0       	ldi	r22, 0x01	; 1
 ac8:	70 e0       	ldi	r23, 0x00	; 0
 aca:	75 de       	rcall	.-790    	; 0x7b6 <LCD0_write>
 acc:	b3 df       	rcall	.-154    	; 0xa34 <LCD0_BF>
 ace:	f8 01       	movw	r30, r16
 ad0:	81 91       	ld	r24, Z+
 ad2:	8f 01       	movw	r16, r30
 ad4:	81 11       	cpse	r24, r1
 ad6:	ee cf       	rjmp	.-36     	; 0xab4 <LCD0_string_size+0x1e>
 ad8:	f2 cf       	rjmp	.-28     	; 0xabe <LCD0_string_size+0x28>
 ada:	cf 5f       	subi	r28, 0xFF	; 255
 adc:	61 e0       	ldi	r22, 0x01	; 1
 ade:	70 e0       	ldi	r23, 0x00	; 0
 ae0:	80 e2       	ldi	r24, 0x20	; 32
 ae2:	69 de       	rcall	.-814    	; 0x7b6 <LCD0_write>
 ae4:	a7 df       	rcall	.-178    	; 0xa34 <LCD0_BF>
 ae6:	cd 17       	cp	r28, r29
 ae8:	c0 f3       	brcs	.-16     	; 0xada <LCD0_string_size+0x44>
 aea:	df 91       	pop	r29
 aec:	cf 91       	pop	r28
 aee:	1f 91       	pop	r17
 af0:	0f 91       	pop	r16
 af2:	08 95       	ret

00000af4 <LCD0_hspace>:
 af4:	cf 93       	push	r28
 af6:	c8 2f       	mov	r28, r24
 af8:	88 23       	and	r24, r24
 afa:	39 f0       	breq	.+14     	; 0xb0a <LCD0_hspace+0x16>
 afc:	61 e0       	ldi	r22, 0x01	; 1
 afe:	70 e0       	ldi	r23, 0x00	; 0
 b00:	80 e2       	ldi	r24, 0x20	; 32
 b02:	59 de       	rcall	.-846    	; 0x7b6 <LCD0_write>
 b04:	97 df       	rcall	.-210    	; 0xa34 <LCD0_BF>
 b06:	c1 50       	subi	r28, 0x01	; 1
 b08:	c9 f7       	brne	.-14     	; 0xafc <LCD0_hspace+0x8>
 b0a:	cf 91       	pop	r28
 b0c:	08 95       	ret

00000b0e <LCD0_gotoxy>:
 b0e:	26 2f       	mov	r18, r22
 b10:	81 30       	cpi	r24, 0x01	; 1
 b12:	91 05       	cpc	r25, r1
 b14:	71 f0       	breq	.+28     	; 0xb32 <LCD0_gotoxy+0x24>
 b16:	30 f0       	brcs	.+12     	; 0xb24 <LCD0_gotoxy+0x16>
 b18:	82 30       	cpi	r24, 0x02	; 2
 b1a:	91 05       	cpc	r25, r1
 b1c:	89 f0       	breq	.+34     	; 0xb40 <LCD0_gotoxy+0x32>
 b1e:	03 97       	sbiw	r24, 0x03	; 3
 b20:	b1 f0       	breq	.+44     	; 0xb4e <LCD0_gotoxy+0x40>
 b22:	08 95       	ret
 b24:	60 e0       	ldi	r22, 0x00	; 0
 b26:	70 e0       	ldi	r23, 0x00	; 0
 b28:	80 e8       	ldi	r24, 0x80	; 128
 b2a:	82 0f       	add	r24, r18
 b2c:	44 de       	rcall	.-888    	; 0x7b6 <LCD0_write>
 b2e:	82 cf       	rjmp	.-252    	; 0xa34 <LCD0_BF>
 b30:	08 95       	ret
 b32:	60 e0       	ldi	r22, 0x00	; 0
 b34:	70 e0       	ldi	r23, 0x00	; 0
 b36:	80 ec       	ldi	r24, 0xC0	; 192
 b38:	82 0f       	add	r24, r18
 b3a:	3d de       	rcall	.-902    	; 0x7b6 <LCD0_write>
 b3c:	7b cf       	rjmp	.-266    	; 0xa34 <LCD0_BF>
 b3e:	08 95       	ret
 b40:	60 e0       	ldi	r22, 0x00	; 0
 b42:	70 e0       	ldi	r23, 0x00	; 0
 b44:	84 e9       	ldi	r24, 0x94	; 148
 b46:	82 0f       	add	r24, r18
 b48:	36 de       	rcall	.-916    	; 0x7b6 <LCD0_write>
 b4a:	74 cf       	rjmp	.-280    	; 0xa34 <LCD0_BF>
 b4c:	08 95       	ret
 b4e:	60 e0       	ldi	r22, 0x00	; 0
 b50:	70 e0       	ldi	r23, 0x00	; 0
 b52:	84 ed       	ldi	r24, 0xD4	; 212
 b54:	82 0f       	add	r24, r18
 b56:	2f de       	rcall	.-930    	; 0x7b6 <LCD0_write>
 b58:	6d cf       	rjmp	.-294    	; 0xa34 <LCD0_BF>
 b5a:	08 95       	ret

00000b5c <LCD0_clear>:
 b5c:	60 e0       	ldi	r22, 0x00	; 0
 b5e:	70 e0       	ldi	r23, 0x00	; 0
 b60:	81 e0       	ldi	r24, 0x01	; 1
 b62:	29 de       	rcall	.-942    	; 0x7b6 <LCD0_write>
 b64:	87 ee       	ldi	r24, 0xE7	; 231
 b66:	97 e1       	ldi	r25, 0x17	; 23
 b68:	01 97       	sbiw	r24, 0x01	; 1
 b6a:	f1 f7       	brne	.-4      	; 0xb68 <LCD0_clear+0xc>
 b6c:	00 c0       	rjmp	.+0      	; 0xb6e <LCD0_clear+0x12>
 b6e:	00 00       	nop
 b70:	08 95       	ret

00000b72 <LCD0_inic>:
	return lcd0;
}
void LCD0_inic(void)
{
	//LCD INIC
	*lcd0_DDR=(1<<RS)|(1<<RW)|(1<<EN)|(0<<NC);
 b72:	e0 91 c2 01 	lds	r30, 0x01C2	; 0x8001c2 <lcd0_DDR>
 b76:	f0 91 c3 01 	lds	r31, 0x01C3	; 0x8001c3 <lcd0_DDR+0x1>
 b7a:	87 e0       	ldi	r24, 0x07	; 7
 b7c:	80 83       	st	Z, r24
	*lcd0_PORT=(1<<NC);
 b7e:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <lcd0_PORT>
 b82:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <lcd0_PORT+0x1>
 b86:	88 e0       	ldi	r24, 0x08	; 8
 b88:	80 83       	st	Z, r24
 b8a:	2f ef       	ldi	r18, 0xFF	; 255
 b8c:	83 ef       	ldi	r24, 0xF3	; 243
 b8e:	91 e0       	ldi	r25, 0x01	; 1
 b90:	21 50       	subi	r18, 0x01	; 1
 b92:	80 40       	sbci	r24, 0x00	; 0
 b94:	90 40       	sbci	r25, 0x00	; 0
 b96:	e1 f7       	brne	.-8      	; 0xb90 <LCD0_inic+0x1e>
 b98:	00 c0       	rjmp	.+0      	; 0xb9a <LCD0_inic+0x28>
 b9a:	00 00       	nop
	/***INICIALIZACAO LCD**datasheet*/
	_delay_ms(40);
	LCD0_write(0x33,INST); //function set
 b9c:	60 e0       	ldi	r22, 0x00	; 0
 b9e:	70 e0       	ldi	r23, 0x00	; 0
 ba0:	83 e3       	ldi	r24, 0x33	; 51
 ba2:	09 de       	rcall	.-1006   	; 0x7b6 <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 ba4:	20 ed       	ldi	r18, 0xD0	; 208
 ba6:	2a 95       	dec	r18
 ba8:	f1 f7       	brne	.-4      	; 0xba6 <LCD0_inic+0x34>
	_delay_us(39);
	LCD0_write(0x33,INST); //function set
 baa:	60 e0       	ldi	r22, 0x00	; 0
 bac:	70 e0       	ldi	r23, 0x00	; 0
 bae:	83 e3       	ldi	r24, 0x33	; 51
 bb0:	02 de       	rcall	.-1020   	; 0x7b6 <LCD0_write>
 bb2:	80 ed       	ldi	r24, 0xD0	; 208
 bb4:	8a 95       	dec	r24
 bb6:	f1 f7       	brne	.-4      	; 0xbb4 <LCD0_inic+0x42>
	_delay_us(39);
	LCD0_write(0x2B,INST); //function set
 bb8:	60 e0       	ldi	r22, 0x00	; 0
 bba:	70 e0       	ldi	r23, 0x00	; 0
 bbc:	8b e2       	ldi	r24, 0x2B	; 43
 bbe:	fb dd       	rcall	.-1034   	; 0x7b6 <LCD0_write>
 bc0:	95 ec       	ldi	r25, 0xC5	; 197
 bc2:	9a 95       	dec	r25
 bc4:	f1 f7       	brne	.-4      	; 0xbc2 <LCD0_inic+0x50>
 bc6:	00 00       	nop
	_delay_us(37);
	LCD0_write(0x0C,INST);// display on/off control
 bc8:	60 e0       	ldi	r22, 0x00	; 0
 bca:	70 e0       	ldi	r23, 0x00	; 0
 bcc:	8c e0       	ldi	r24, 0x0C	; 12
 bce:	f3 dd       	rcall	.-1050   	; 0x7b6 <LCD0_write>
 bd0:	25 ec       	ldi	r18, 0xC5	; 197
 bd2:	2a 95       	dec	r18
 bd4:	f1 f7       	brne	.-4      	; 0xbd2 <LCD0_inic+0x60>
	_delay_us(37);
	LCD0_write(0x01,INST);// clear display
 bd6:	00 00       	nop
 bd8:	60 e0       	ldi	r22, 0x00	; 0
 bda:	70 e0       	ldi	r23, 0x00	; 0
 bdc:	81 e0       	ldi	r24, 0x01	; 1
 bde:	eb dd       	rcall	.-1066   	; 0x7b6 <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 be0:	87 ee       	ldi	r24, 0xE7	; 231
 be2:	97 e1       	ldi	r25, 0x17	; 23
 be4:	01 97       	sbiw	r24, 0x01	; 1
 be6:	f1 f7       	brne	.-4      	; 0xbe4 <LCD0_inic+0x72>
 be8:	00 c0       	rjmp	.+0      	; 0xbea <LCD0_inic+0x78>
	_delay_ms(1.53);
	LCD0_write(0x06,INST);// entry mode set (crazy settings)
 bea:	00 00       	nop
 bec:	60 e0       	ldi	r22, 0x00	; 0
 bee:	70 e0       	ldi	r23, 0x00	; 0
 bf0:	86 e0       	ldi	r24, 0x06	; 6
 bf2:	e1 dd       	rcall	.-1086   	; 0x7b6 <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 bf4:	95 ec       	ldi	r25, 0xC5	; 197
 bf6:	9a 95       	dec	r25
 bf8:	f1 f7       	brne	.-4      	; 0xbf6 <LCD0_inic+0x84>
 bfa:	00 00       	nop
 bfc:	08 95       	ret

00000bfe <LCD0enable>:
unsigned int LCD_ticks(unsigned int num);
/*
** procedure and function
*/
LCD0 LCD0enable(volatile uint8_t *ddr, volatile uint8_t *pin, volatile uint8_t *port)
{
 bfe:	1f 93       	push	r17
 c00:	cf 93       	push	r28
 c02:	df 93       	push	r29
 c04:	ec 01       	movw	r28, r24
	//LOCAL VARIABLES
	uint8_t tSREG;
	tSREG=SREG;
 c06:	1f b7       	in	r17, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
 c08:	8f b7       	in	r24, 0x3f	; 63
 c0a:	8f 77       	andi	r24, 0x7F	; 127
 c0c:	8f bf       	out	0x3f, r24	; 63
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	LCD0 lcd0;
	//import parametros
	lcd0_DDR=ddr;
 c0e:	70 93 c3 01 	sts	0x01C3, r23	; 0x8001c3 <lcd0_DDR+0x1>
 c12:	60 93 c2 01 	sts	0x01C2, r22	; 0x8001c2 <lcd0_DDR>
	lcd0_PIN=pin;
 c16:	50 93 bc 01 	sts	0x01BC, r21	; 0x8001bc <lcd0_PIN+0x1>
 c1a:	40 93 bb 01 	sts	0x01BB, r20	; 0x8001bb <lcd0_PIN>
	lcd0_PORT=port;
 c1e:	30 93 c6 01 	sts	0x01C6, r19	; 0x8001c6 <lcd0_PORT+0x1>
 c22:	20 93 c5 01 	sts	0x01C5, r18	; 0x8001c5 <lcd0_PORT>
	//inic variables
	*lcd0_DDR=0x00;
 c26:	fb 01       	movw	r30, r22
 c28:	10 82       	st	Z, r1
	*lcd0_PORT=0xFF;
 c2a:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <lcd0_PORT>
 c2e:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <lcd0_PORT+0x1>
 c32:	8f ef       	ldi	r24, 0xFF	; 255
 c34:	80 83       	st	Z, r24
	lcd0_detect=*lcd0_PIN & (1<<NC);
 c36:	e0 91 bb 01 	lds	r30, 0x01BB	; 0x8001bb <lcd0_PIN>
 c3a:	f0 91 bc 01 	lds	r31, 0x01BC	; 0x8001bc <lcd0_PIN+0x1>
 c3e:	80 81       	ld	r24, Z
 c40:	88 70       	andi	r24, 0x08	; 8
 c42:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <lcd0_detect>
	lcd0.hspace=LCD0_hspace;
	lcd0.clear=LCD0_clear;
	lcd0.gotoxy=LCD0_gotoxy;
	lcd0.reboot=LCD0_reboot;
	//LCD INIC
	LCD0_inic();
 c46:	95 df       	rcall	.-214    	; 0xb72 <LCD0_inic>
	SREG=tSREG;
 c48:	1f bf       	out	0x3f, r17	; 63
	//
	return lcd0;
 c4a:	8b ed       	ldi	r24, 0xDB	; 219
 c4c:	93 e0       	ldi	r25, 0x03	; 3
 c4e:	99 83       	std	Y+1, r25	; 0x01
 c50:	88 83       	st	Y, r24
 c52:	8f e9       	ldi	r24, 0x9F	; 159
 c54:	94 e0       	ldi	r25, 0x04	; 4
 c56:	9b 83       	std	Y+3, r25	; 0x03
 c58:	8a 83       	std	Y+2, r24	; 0x02
 c5a:	8a e1       	ldi	r24, 0x1A	; 26
 c5c:	95 e0       	ldi	r25, 0x05	; 5
 c5e:	9d 83       	std	Y+5, r25	; 0x05
 c60:	8c 83       	std	Y+4, r24	; 0x04
 c62:	8c e2       	ldi	r24, 0x2C	; 44
 c64:	95 e0       	ldi	r25, 0x05	; 5
 c66:	9f 83       	std	Y+7, r25	; 0x07
 c68:	8e 83       	std	Y+6, r24	; 0x06
 c6a:	81 e3       	ldi	r24, 0x31	; 49
 c6c:	95 e0       	ldi	r25, 0x05	; 5
 c6e:	99 87       	std	Y+9, r25	; 0x09
 c70:	88 87       	std	Y+8, r24	; 0x08
 c72:	8a e3       	ldi	r24, 0x3A	; 58
 c74:	95 e0       	ldi	r25, 0x05	; 5
 c76:	9b 87       	std	Y+11, r25	; 0x0b
 c78:	8a 87       	std	Y+10, r24	; 0x0a
 c7a:	8b e4       	ldi	r24, 0x4B	; 75
 c7c:	95 e0       	ldi	r25, 0x05	; 5
 c7e:	9d 87       	std	Y+13, r25	; 0x0d
 c80:	8c 87       	std	Y+12, r24	; 0x0c
 c82:	8a e7       	ldi	r24, 0x7A	; 122
 c84:	95 e0       	ldi	r25, 0x05	; 5
 c86:	9f 87       	std	Y+15, r25	; 0x0f
 c88:	8e 87       	std	Y+14, r24	; 0x0e
 c8a:	8e ea       	ldi	r24, 0xAE	; 174
 c8c:	95 e0       	ldi	r25, 0x05	; 5
 c8e:	99 8b       	std	Y+17, r25	; 0x11
 c90:	88 8b       	std	Y+16, r24	; 0x10
 c92:	87 e8       	ldi	r24, 0x87	; 135
 c94:	95 e0       	ldi	r25, 0x05	; 5
 c96:	9b 8b       	std	Y+19, r25	; 0x13
 c98:	8a 8b       	std	Y+18, r24	; 0x12
 c9a:	86 e5       	ldi	r24, 0x56	; 86
 c9c:	96 e0       	ldi	r25, 0x06	; 6
 c9e:	9d 8b       	std	Y+21, r25	; 0x15
 ca0:	8c 8b       	std	Y+20, r24	; 0x14
}
 ca2:	ce 01       	movw	r24, r28
 ca4:	df 91       	pop	r29
 ca6:	cf 91       	pop	r28
 ca8:	1f 91       	pop	r17
 caa:	08 95       	ret

00000cac <LCD0_reboot>:
	*lcd0_PORT|=(1<<EN);
	LCD_ticks(num);
	*lcd0_PORT&=~(1<<EN);
}
void LCD0_reboot(void)
{
 cac:	cf 93       	push	r28
	//low high detect pin NC
	uint8_t i;
	uint8_t tmp;
	tmp=*lcd0_PIN & (1<<NC);
 cae:	e0 91 bb 01 	lds	r30, 0x01BB	; 0x8001bb <lcd0_PIN>
 cb2:	f0 91 bc 01 	lds	r31, 0x01BC	; 0x8001bc <lcd0_PIN+0x1>
 cb6:	c0 81       	ld	r28, Z
 cb8:	c8 70       	andi	r28, 0x08	; 8
	i=tmp^lcd0_detect;
 cba:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <lcd0_detect>
 cbe:	8c 27       	eor	r24, r28
	i&=tmp;
	if(i)
 cc0:	8c 23       	and	r24, r28
 cc2:	09 f0       	breq	.+2      	; 0xcc6 <LCD0_reboot+0x1a>
		LCD0_inic();
 cc4:	56 df       	rcall	.-340    	; 0xb72 <LCD0_inic>
	lcd0_detect=tmp;
 cc6:	c0 93 c4 01 	sts	0x01C4, r28	; 0x8001c4 <lcd0_detect>
}
 cca:	cf 91       	pop	r28
 ccc:	08 95       	ret

00000cce <main>:
#include "lcd.h"
/******/
#define RTCC_R      0xa3
#define RTCC_W      0xa2
int main(void)
{
 cce:	cf 93       	push	r28
 cd0:	df 93       	push	r29
 cd2:	cd b7       	in	r28, 0x3d	; 61
 cd4:	de b7       	in	r29, 0x3e	; 62
 cd6:	a0 97       	sbiw	r28, 0x20	; 32
 cd8:	0f b6       	in	r0, 0x3f	; 63
 cda:	f8 94       	cli
 cdc:	de bf       	out	0x3e, r29	; 62
 cde:	0f be       	out	0x3f, r0	; 63
 ce0:	cd bf       	out	0x3d, r28	; 61
	uint8_t Rtcc_Addr = RTCC_R>>1;
	I2C twi = I2Cenable(Rtcc_Addr,0);
 ce2:	40 e0       	ldi	r20, 0x00	; 0
 ce4:	61 e5       	ldi	r22, 0x51	; 81
 ce6:	ce 01       	movw	r24, r28
 ce8:	01 96       	adiw	r24, 0x01	; 1
 cea:	4f db       	rcall	.-2402   	; 0x38a <I2Cenable>
	LCD0 lcd = LCD0enable(&DDRA,&PINA,&PORTA);
 cec:	2b e3       	ldi	r18, 0x3B	; 59
 cee:	30 e0       	ldi	r19, 0x00	; 0
 cf0:	49 e3       	ldi	r20, 0x39	; 57
 cf2:	50 e0       	ldi	r21, 0x00	; 0
 cf4:	6a e3       	ldi	r22, 0x3A	; 58
 cf6:	70 e0       	ldi	r23, 0x00	; 0
 cf8:	ce 01       	movw	r24, r28
 cfa:	0b 96       	adiw	r24, 0x0b	; 11
 cfc:	80 df       	rcall	.-256    	; 0xbfe <LCD0enable>
 cfe:	0d 8d       	ldd	r16, Y+29	; 0x1d
 d00:	1e 8d       	ldd	r17, Y+30	; 0x1e
    /* Replace with your application code */
    while (1) 
    {
		lcd.gotoxy(0,0);
 d02:	60 e0       	ldi	r22, 0x00	; 0
 d04:	70 e0       	ldi	r23, 0x00	; 0
 d06:	80 e0       	ldi	r24, 0x00	; 0
 d08:	90 e0       	ldi	r25, 0x00	; 0
 d0a:	f8 01       	movw	r30, r16
 d0c:	09 95       	icall
		lcd.string_size("start",5);
 d0e:	ef 89       	ldd	r30, Y+23	; 0x17
 d10:	f8 8d       	ldd	r31, Y+24	; 0x18
 d12:	65 e0       	ldi	r22, 0x05	; 5
 d14:	80 e0       	ldi	r24, 0x00	; 0
 d16:	91 e0       	ldi	r25, 0x01	; 1
 d18:	09 95       	icall
		twi.master_connect(Rtcc_Addr,1);
 d1a:	eb 81       	ldd	r30, Y+3	; 0x03
 d1c:	fc 81       	ldd	r31, Y+4	; 0x04
 d1e:	61 e0       	ldi	r22, 0x01	; 1
 d20:	81 e5       	ldi	r24, 0x51	; 81
 d22:	09 95       	icall
		lcd.gotoxy(1,0);
 d24:	60 e0       	ldi	r22, 0x00	; 0
 d26:	70 e0       	ldi	r23, 0x00	; 0
 d28:	81 e0       	ldi	r24, 0x01	; 1
 d2a:	90 e0       	ldi	r25, 0x00	; 0
 d2c:	f8 01       	movw	r30, r16
 d2e:	09 95       	icall
		lcd.putch(twi.master_read(1));
 d30:	e9 88       	ldd	r14, Y+17	; 0x11
 d32:	fa 88       	ldd	r15, Y+18	; 0x12
 d34:	ef 81       	ldd	r30, Y+7	; 0x07
 d36:	f8 85       	ldd	r31, Y+8	; 0x08
 d38:	81 e0       	ldi	r24, 0x01	; 1
 d3a:	09 95       	icall
 d3c:	f7 01       	movw	r30, r14
 d3e:	09 95       	icall
 d40:	e0 cf       	rjmp	.-64     	; 0xd02 <main+0x34>

00000d42 <__udivmodsi4>:
 d42:	a1 e2       	ldi	r26, 0x21	; 33
 d44:	1a 2e       	mov	r1, r26
 d46:	aa 1b       	sub	r26, r26
 d48:	bb 1b       	sub	r27, r27
 d4a:	fd 01       	movw	r30, r26
 d4c:	0d c0       	rjmp	.+26     	; 0xd68 <__udivmodsi4_ep>

00000d4e <__udivmodsi4_loop>:
 d4e:	aa 1f       	adc	r26, r26
 d50:	bb 1f       	adc	r27, r27
 d52:	ee 1f       	adc	r30, r30
 d54:	ff 1f       	adc	r31, r31
 d56:	a2 17       	cp	r26, r18
 d58:	b3 07       	cpc	r27, r19
 d5a:	e4 07       	cpc	r30, r20
 d5c:	f5 07       	cpc	r31, r21
 d5e:	20 f0       	brcs	.+8      	; 0xd68 <__udivmodsi4_ep>
 d60:	a2 1b       	sub	r26, r18
 d62:	b3 0b       	sbc	r27, r19
 d64:	e4 0b       	sbc	r30, r20
 d66:	f5 0b       	sbc	r31, r21

00000d68 <__udivmodsi4_ep>:
 d68:	66 1f       	adc	r22, r22
 d6a:	77 1f       	adc	r23, r23
 d6c:	88 1f       	adc	r24, r24
 d6e:	99 1f       	adc	r25, r25
 d70:	1a 94       	dec	r1
 d72:	69 f7       	brne	.-38     	; 0xd4e <__udivmodsi4_loop>
 d74:	60 95       	com	r22
 d76:	70 95       	com	r23
 d78:	80 95       	com	r24
 d7a:	90 95       	com	r25
 d7c:	9b 01       	movw	r18, r22
 d7e:	ac 01       	movw	r20, r24
 d80:	bd 01       	movw	r22, r26
 d82:	cf 01       	movw	r24, r30
 d84:	08 95       	ret

00000d86 <_exit>:
 d86:	f8 94       	cli

00000d88 <__stop_program>:
 d88:	ff cf       	rjmp	.-2      	; 0xd88 <__stop_program>
