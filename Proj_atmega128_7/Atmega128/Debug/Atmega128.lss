
Atmega128.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000059c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000528  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b3  00800100  00800100  0000059c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000348  00000000  00000000  00000608  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002166  00000000  00000000  00000950  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f3e  00000000  00000000  00002ab6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f80  00000000  00000000  000039f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000870  00000000  00000000  00005974  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d2b  00000000  00000000  000061e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002154  00000000  00000000  00006f0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000318  00000000  00000000  00009063  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	e6 c0       	rjmp	.+460    	; 0x1d2 <__vector_1>
   6:	00 00       	nop
   8:	ee c0       	rjmp	.+476    	; 0x1e6 <__vector_2>
   a:	00 00       	nop
   c:	f6 c0       	rjmp	.+492    	; 0x1fa <__vector_3>
   e:	00 00       	nop
  10:	fe c0       	rjmp	.+508    	; 0x20e <__vector_4>
  12:	00 00       	nop
  14:	06 c1       	rjmp	.+524    	; 0x222 <__vector_5>
  16:	00 00       	nop
  18:	0e c1       	rjmp	.+540    	; 0x236 <__vector_6>
  1a:	00 00       	nop
  1c:	16 c1       	rjmp	.+556    	; 0x24a <__vector_7>
  1e:	00 00       	nop
  20:	1e c1       	rjmp	.+572    	; 0x25e <__vector_8>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	2e c1       	rjmp	.+604    	; 0x286 <__vector_10>
  2a:	00 00       	nop
  2c:	36 c1       	rjmp	.+620    	; 0x29a <__vector_11>
  2e:	00 00       	nop
  30:	3e c1       	rjmp	.+636    	; 0x2ae <__vector_12>
  32:	00 00       	nop
  34:	46 c1       	rjmp	.+652    	; 0x2c2 <__vector_13>
  36:	00 00       	nop
  38:	4e c1       	rjmp	.+668    	; 0x2d6 <__vector_14>
  3a:	00 00       	nop
  3c:	56 c1       	rjmp	.+684    	; 0x2ea <__vector_15>
  3e:	00 00       	nop
  40:	5e c1       	rjmp	.+700    	; 0x2fe <__vector_16>
  42:	00 00       	nop
  44:	16 c1       	rjmp	.+556    	; 0x272 <__vector_17>
  46:	00 00       	nop
  48:	a0 c1       	rjmp	.+832    	; 0x38a <__vector_18>
  4a:	00 00       	nop
  4c:	d6 c1       	rjmp	.+940    	; 0x3fa <__vector_19>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	39 c0       	rjmp	.+114    	; 0xc8 <__vector_21>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c1       	rjmp	.+688    	; 0x312 <__vector_24>
  62:	00 00       	nop
  64:	60 c1       	rjmp	.+704    	; 0x326 <__vector_25>
  66:	00 00       	nop
  68:	68 c1       	rjmp	.+720    	; 0x33a <__vector_26>
  6a:	00 00       	nop
  6c:	70 c1       	rjmp	.+736    	; 0x34e <__vector_27>
  6e:	00 00       	nop
  70:	78 c1       	rjmp	.+752    	; 0x362 <__vector_28>
  72:	00 00       	nop
  74:	80 c1       	rjmp	.+768    	; 0x376 <__vector_29>
  76:	00 00       	nop
  78:	e9 c1       	rjmp	.+978    	; 0x44c <__vector_30>
  7a:	00 00       	nop
  7c:	22 c2       	rjmp	.+1092   	; 0x4c2 <__vector_31>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e2       	ldi	r30, 0x28	; 40
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a3 3b       	cpi	r26, 0xB3	; 179
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	2f d2       	rcall	.+1118   	; 0x522 <main>
  c4:	2f c2       	rjmp	.+1118   	; 0x524 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_21>:
ISR(ANALOG_INTERRUPT)
/*************************************************************************
Function: ANALOG interrupt
Purpose:  Read Analog Input
**************************************************************************/
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	0b b6       	in	r0, 0x3b	; 59
  d4:	0f 92       	push	r0
  d6:	2f 93       	push	r18
  d8:	3f 93       	push	r19
  da:	8f 93       	push	r24
  dc:	9f 93       	push	r25
  de:	ef 93       	push	r30
  e0:	ff 93       	push	r31
	/******/
	adc_tmp=ADCL;
  e2:	84 b1       	in	r24, 0x04	; 4
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <adc_tmp+0x1>
  ea:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <adc_tmp>
	adc_tmp|=(ADCH<<8);
  ee:	25 b1       	in	r18, 0x05	; 5
  f0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <adc_tmp>
  f4:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <adc_tmp+0x1>
  f8:	92 2b       	or	r25, r18
  fa:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <adc_tmp+0x1>
  fe:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <adc_tmp>
	if(adc_n_sample < (1<<ADC_NUMBER_SAMPLE)){
 102:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 106:	84 30       	cpi	r24, 0x04	; 4
 108:	a0 f4       	brcc	.+40     	; 0x132 <__vector_21+0x6a>
		adc_n_sample++;
 10a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 10e:	8f 5f       	subi	r24, 0xFF	; 255
 110:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
		adc_sample+=adc_tmp;
 114:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <adc_tmp>
 118:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <adc_tmp+0x1>
 11c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <adc_sample>
 120:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <adc_sample+0x1>
 124:	82 0f       	add	r24, r18
 126:	93 1f       	adc	r25, r19
 128:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <adc_sample+0x1>
 12c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <adc_sample>
 130:	43 c0       	rjmp	.+134    	; 0x1b8 <__vector_21+0xf0>
	}else{
		ADC_VALUE[ADC_SELECTOR]=adc_sample>>ADC_NUMBER_SAMPLE;
 132:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <ADC_SELECTOR>
 136:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <ADC_SELECTOR+0x1>
 13a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <adc_sample>
 13e:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <adc_sample+0x1>
 142:	95 95       	asr	r25
 144:	87 95       	ror	r24
 146:	95 95       	asr	r25
 148:	87 95       	ror	r24
 14a:	ee 0f       	add	r30, r30
 14c:	ff 1f       	adc	r31, r31
 14e:	e7 5e       	subi	r30, 0xE7	; 231
 150:	fe 4f       	sbci	r31, 0xFE	; 254
 152:	91 83       	std	Z+1, r25	; 0x01
 154:	80 83       	st	Z, r24
		adc_n_sample=adc_sample=0;
 156:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <adc_sample+0x1>
 15a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <adc_sample>
 15e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
		/******/
		if(ADC_SELECTOR < ADC_N_CHANNEL)
 162:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <ADC_SELECTOR>
 166:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <ADC_SELECTOR+0x1>
 16a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <ADC_N_CHANNEL>
 16e:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <ADC_N_CHANNEL+0x1>
 172:	28 17       	cp	r18, r24
 174:	39 07       	cpc	r19, r25
 176:	54 f4       	brge	.+20     	; 0x18c <__vector_21+0xc4>
			ADC_SELECTOR++;
 178:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <ADC_SELECTOR>
 17c:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <ADC_SELECTOR+0x1>
 180:	01 96       	adiw	r24, 0x01	; 1
 182:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <ADC_SELECTOR+0x1>
 186:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <ADC_SELECTOR>
 18a:	04 c0       	rjmp	.+8      	; 0x194 <__vector_21+0xcc>
		else
			ADC_SELECTOR=0;
 18c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <ADC_SELECTOR+0x1>
 190:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <ADC_SELECTOR>
		ADC_SELECT &= ~MUX_MASK;
 194:	87 b1       	in	r24, 0x07	; 7
 196:	80 7e       	andi	r24, 0xE0	; 224
 198:	87 b9       	out	0x07, r24	; 7
		ADC_SELECT |= (ADC_CHANNEL_GAIN[ADC_SELECTOR] & MUX_MASK);
 19a:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <ADC_SELECTOR>
 19e:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <ADC_SELECTOR+0x1>
 1a2:	ee 0f       	add	r30, r30
 1a4:	ff 1f       	adc	r31, r31
 1a6:	e7 5f       	subi	r30, 0xF7	; 247
 1a8:	fe 4f       	sbci	r31, 0xFE	; 254
 1aa:	80 81       	ld	r24, Z
 1ac:	91 81       	ldd	r25, Z+1	; 0x01
 1ae:	27 b1       	in	r18, 0x07	; 7
 1b0:	8f 71       	andi	r24, 0x1F	; 31
 1b2:	99 27       	eor	r25, r25
 1b4:	82 2b       	or	r24, r18
 1b6:	87 b9       	out	0x07, r24	; 7
	}		
}
 1b8:	ff 91       	pop	r31
 1ba:	ef 91       	pop	r30
 1bc:	9f 91       	pop	r25
 1be:	8f 91       	pop	r24
 1c0:	3f 91       	pop	r19
 1c2:	2f 91       	pop	r18
 1c4:	0f 90       	pop	r0
 1c6:	0b be       	out	0x3b, r0	; 59
 1c8:	0f 90       	pop	r0
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	0f 90       	pop	r0
 1ce:	1f 90       	pop	r1
 1d0:	18 95       	reti

000001d2 <__vector_1>:

/*
** interrupt
*/
// cross out the ones being used and redefine in main
ISR(INT0_vect){ }
 1d2:	1f 92       	push	r1
 1d4:	0f 92       	push	r0
 1d6:	0f b6       	in	r0, 0x3f	; 63
 1d8:	0f 92       	push	r0
 1da:	11 24       	eor	r1, r1
 1dc:	0f 90       	pop	r0
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	0f 90       	pop	r0
 1e2:	1f 90       	pop	r1
 1e4:	18 95       	reti

000001e6 <__vector_2>:
ISR(INT1_vect){ }
 1e6:	1f 92       	push	r1
 1e8:	0f 92       	push	r0
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	0f 92       	push	r0
 1ee:	11 24       	eor	r1, r1
 1f0:	0f 90       	pop	r0
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	0f 90       	pop	r0
 1f6:	1f 90       	pop	r1
 1f8:	18 95       	reti

000001fa <__vector_3>:
ISR(INT2_vect){ }
 1fa:	1f 92       	push	r1
 1fc:	0f 92       	push	r0
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	0f 92       	push	r0
 202:	11 24       	eor	r1, r1
 204:	0f 90       	pop	r0
 206:	0f be       	out	0x3f, r0	; 63
 208:	0f 90       	pop	r0
 20a:	1f 90       	pop	r1
 20c:	18 95       	reti

0000020e <__vector_4>:
ISR(INT3_vect){ }
 20e:	1f 92       	push	r1
 210:	0f 92       	push	r0
 212:	0f b6       	in	r0, 0x3f	; 63
 214:	0f 92       	push	r0
 216:	11 24       	eor	r1, r1
 218:	0f 90       	pop	r0
 21a:	0f be       	out	0x3f, r0	; 63
 21c:	0f 90       	pop	r0
 21e:	1f 90       	pop	r1
 220:	18 95       	reti

00000222 <__vector_5>:
ISR(INT4_vect){ }
 222:	1f 92       	push	r1
 224:	0f 92       	push	r0
 226:	0f b6       	in	r0, 0x3f	; 63
 228:	0f 92       	push	r0
 22a:	11 24       	eor	r1, r1
 22c:	0f 90       	pop	r0
 22e:	0f be       	out	0x3f, r0	; 63
 230:	0f 90       	pop	r0
 232:	1f 90       	pop	r1
 234:	18 95       	reti

00000236 <__vector_6>:
ISR(INT5_vect){ }
 236:	1f 92       	push	r1
 238:	0f 92       	push	r0
 23a:	0f b6       	in	r0, 0x3f	; 63
 23c:	0f 92       	push	r0
 23e:	11 24       	eor	r1, r1
 240:	0f 90       	pop	r0
 242:	0f be       	out	0x3f, r0	; 63
 244:	0f 90       	pop	r0
 246:	1f 90       	pop	r1
 248:	18 95       	reti

0000024a <__vector_7>:
ISR(INT6_vect){ }
 24a:	1f 92       	push	r1
 24c:	0f 92       	push	r0
 24e:	0f b6       	in	r0, 0x3f	; 63
 250:	0f 92       	push	r0
 252:	11 24       	eor	r1, r1
 254:	0f 90       	pop	r0
 256:	0f be       	out	0x3f, r0	; 63
 258:	0f 90       	pop	r0
 25a:	1f 90       	pop	r1
 25c:	18 95       	reti

0000025e <__vector_8>:
ISR(INT7_vect){ }
 25e:	1f 92       	push	r1
 260:	0f 92       	push	r0
 262:	0f b6       	in	r0, 0x3f	; 63
 264:	0f 92       	push	r0
 266:	11 24       	eor	r1, r1
 268:	0f 90       	pop	r0
 26a:	0f be       	out	0x3f, r0	; 63
 26c:	0f 90       	pop	r0
 26e:	1f 90       	pop	r1
 270:	18 95       	reti

00000272 <__vector_17>:
    return SPI_DATA_REGISTER;
}
/*
** interrupt
*/
ISR(SPI_STC_vect){ }
 272:	1f 92       	push	r1
 274:	0f 92       	push	r0
 276:	0f b6       	in	r0, 0x3f	; 63
 278:	0f 92       	push	r0
 27a:	11 24       	eor	r1, r1
 27c:	0f 90       	pop	r0
 27e:	0f be       	out	0x3f, r0	; 63
 280:	0f 90       	pop	r0
 282:	1f 90       	pop	r1
 284:	18 95       	reti

00000286 <__vector_10>:

/*
** interrupt
*/
// So that main will not freeze when not defined, but rather exclude.
ISR(TIMER2_OVF_vect){ }
 286:	1f 92       	push	r1
 288:	0f 92       	push	r0
 28a:	0f b6       	in	r0, 0x3f	; 63
 28c:	0f 92       	push	r0
 28e:	11 24       	eor	r1, r1
 290:	0f 90       	pop	r0
 292:	0f be       	out	0x3f, r0	; 63
 294:	0f 90       	pop	r0
 296:	1f 90       	pop	r1
 298:	18 95       	reti

0000029a <__vector_11>:
ISR(TIMER1_CAPT_vect){ }
 29a:	1f 92       	push	r1
 29c:	0f 92       	push	r0
 29e:	0f b6       	in	r0, 0x3f	; 63
 2a0:	0f 92       	push	r0
 2a2:	11 24       	eor	r1, r1
 2a4:	0f 90       	pop	r0
 2a6:	0f be       	out	0x3f, r0	; 63
 2a8:	0f 90       	pop	r0
 2aa:	1f 90       	pop	r1
 2ac:	18 95       	reti

000002ae <__vector_12>:
ISR(TIMER1_COMPA_vect){ }
 2ae:	1f 92       	push	r1
 2b0:	0f 92       	push	r0
 2b2:	0f b6       	in	r0, 0x3f	; 63
 2b4:	0f 92       	push	r0
 2b6:	11 24       	eor	r1, r1
 2b8:	0f 90       	pop	r0
 2ba:	0f be       	out	0x3f, r0	; 63
 2bc:	0f 90       	pop	r0
 2be:	1f 90       	pop	r1
 2c0:	18 95       	reti

000002c2 <__vector_13>:
ISR(TIMER1_COMPB_vect){ }
 2c2:	1f 92       	push	r1
 2c4:	0f 92       	push	r0
 2c6:	0f b6       	in	r0, 0x3f	; 63
 2c8:	0f 92       	push	r0
 2ca:	11 24       	eor	r1, r1
 2cc:	0f 90       	pop	r0
 2ce:	0f be       	out	0x3f, r0	; 63
 2d0:	0f 90       	pop	r0
 2d2:	1f 90       	pop	r1
 2d4:	18 95       	reti

000002d6 <__vector_14>:
ISR(TIMER1_OVF_vect){ }
 2d6:	1f 92       	push	r1
 2d8:	0f 92       	push	r0
 2da:	0f b6       	in	r0, 0x3f	; 63
 2dc:	0f 92       	push	r0
 2de:	11 24       	eor	r1, r1
 2e0:	0f 90       	pop	r0
 2e2:	0f be       	out	0x3f, r0	; 63
 2e4:	0f 90       	pop	r0
 2e6:	1f 90       	pop	r1
 2e8:	18 95       	reti

000002ea <__vector_15>:
ISR(TIMER0_COMP_vect){ }
 2ea:	1f 92       	push	r1
 2ec:	0f 92       	push	r0
 2ee:	0f b6       	in	r0, 0x3f	; 63
 2f0:	0f 92       	push	r0
 2f2:	11 24       	eor	r1, r1
 2f4:	0f 90       	pop	r0
 2f6:	0f be       	out	0x3f, r0	; 63
 2f8:	0f 90       	pop	r0
 2fa:	1f 90       	pop	r1
 2fc:	18 95       	reti

000002fe <__vector_16>:
ISR(TIMER0_OVF_vect){ }
 2fe:	1f 92       	push	r1
 300:	0f 92       	push	r0
 302:	0f b6       	in	r0, 0x3f	; 63
 304:	0f 92       	push	r0
 306:	11 24       	eor	r1, r1
 308:	0f 90       	pop	r0
 30a:	0f be       	out	0x3f, r0	; 63
 30c:	0f 90       	pop	r0
 30e:	1f 90       	pop	r1
 310:	18 95       	reti

00000312 <__vector_24>:
ISR(TIMER1_COMPC_vect){ }
 312:	1f 92       	push	r1
 314:	0f 92       	push	r0
 316:	0f b6       	in	r0, 0x3f	; 63
 318:	0f 92       	push	r0
 31a:	11 24       	eor	r1, r1
 31c:	0f 90       	pop	r0
 31e:	0f be       	out	0x3f, r0	; 63
 320:	0f 90       	pop	r0
 322:	1f 90       	pop	r1
 324:	18 95       	reti

00000326 <__vector_25>:
ISR(TIMER3_CAPT_vect){ }
 326:	1f 92       	push	r1
 328:	0f 92       	push	r0
 32a:	0f b6       	in	r0, 0x3f	; 63
 32c:	0f 92       	push	r0
 32e:	11 24       	eor	r1, r1
 330:	0f 90       	pop	r0
 332:	0f be       	out	0x3f, r0	; 63
 334:	0f 90       	pop	r0
 336:	1f 90       	pop	r1
 338:	18 95       	reti

0000033a <__vector_26>:
ISR(TIMER3_COMPA_vect){ }
 33a:	1f 92       	push	r1
 33c:	0f 92       	push	r0
 33e:	0f b6       	in	r0, 0x3f	; 63
 340:	0f 92       	push	r0
 342:	11 24       	eor	r1, r1
 344:	0f 90       	pop	r0
 346:	0f be       	out	0x3f, r0	; 63
 348:	0f 90       	pop	r0
 34a:	1f 90       	pop	r1
 34c:	18 95       	reti

0000034e <__vector_27>:
ISR(TIMER3_COMPB_vect){ }
 34e:	1f 92       	push	r1
 350:	0f 92       	push	r0
 352:	0f b6       	in	r0, 0x3f	; 63
 354:	0f 92       	push	r0
 356:	11 24       	eor	r1, r1
 358:	0f 90       	pop	r0
 35a:	0f be       	out	0x3f, r0	; 63
 35c:	0f 90       	pop	r0
 35e:	1f 90       	pop	r1
 360:	18 95       	reti

00000362 <__vector_28>:
ISR(TIMER3_COMPC_vect){ }
 362:	1f 92       	push	r1
 364:	0f 92       	push	r0
 366:	0f b6       	in	r0, 0x3f	; 63
 368:	0f 92       	push	r0
 36a:	11 24       	eor	r1, r1
 36c:	0f 90       	pop	r0
 36e:	0f be       	out	0x3f, r0	; 63
 370:	0f 90       	pop	r0
 372:	1f 90       	pop	r1
 374:	18 95       	reti

00000376 <__vector_29>:
ISR(TIMER3_OVF_vect){ }
 376:	1f 92       	push	r1
 378:	0f 92       	push	r0
 37a:	0f b6       	in	r0, 0x3f	; 63
 37c:	0f 92       	push	r0
 37e:	11 24       	eor	r1, r1
 380:	0f 90       	pop	r0
 382:	0f be       	out	0x3f, r0	; 63
 384:	0f 90       	pop	r0
 386:	1f 90       	pop	r1
 388:	18 95       	reti

0000038a <__vector_18>:
void uart1_puts_p(const char *progmem_s )
{
    register char c;
    while ( (c = pgm_read_byte(progmem_s++)) ) 
      uart1_putc(c);
}/* uart1_puts_p */
 38a:	1f 92       	push	r1
 38c:	0f 92       	push	r0
 38e:	0f b6       	in	r0, 0x3f	; 63
 390:	0f 92       	push	r0
 392:	11 24       	eor	r1, r1
 394:	0b b6       	in	r0, 0x3b	; 59
 396:	0f 92       	push	r0
 398:	8f 93       	push	r24
 39a:	9f 93       	push	r25
 39c:	ef 93       	push	r30
 39e:	ff 93       	push	r31
 3a0:	8b b1       	in	r24, 0x0b	; 11
 3a2:	9a b1       	in	r25, 0x0a	; 10
 3a4:	88 71       	andi	r24, 0x18	; 24
 3a6:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <UART_LastRxError>
 3aa:	e0 91 70 01 	lds	r30, 0x0170	; 0x800170 <UART_RxHead>
 3ae:	ef 5f       	subi	r30, 0xFF	; 255
 3b0:	ef 71       	andi	r30, 0x1F	; 31
 3b2:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <UART_RxTail>
 3b6:	e8 13       	cpse	r30, r24
 3b8:	04 c0       	rjmp	.+8      	; 0x3c2 <__vector_18+0x38>
 3ba:	82 e0       	ldi	r24, 0x02	; 2
 3bc:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <UART_LastRxError>
 3c0:	11 c0       	rjmp	.+34     	; 0x3e4 <__vector_18+0x5a>
 3c2:	9c b1       	in	r25, 0x0c	; 12
 3c4:	e0 93 70 01 	sts	0x0170, r30	; 0x800170 <UART_RxHead>
 3c8:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <UART_LastRxError>
 3cc:	88 23       	and	r24, r24
 3ce:	31 f0       	breq	.+12     	; 0x3dc <__vector_18+0x52>
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	ed 58       	subi	r30, 0x8D	; 141
 3d4:	fe 4f       	sbci	r31, 0xFE	; 254
 3d6:	88 e5       	ldi	r24, 0x58	; 88
 3d8:	80 83       	st	Z, r24
 3da:	04 c0       	rjmp	.+8      	; 0x3e4 <__vector_18+0x5a>
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	ed 58       	subi	r30, 0x8D	; 141
 3e0:	fe 4f       	sbci	r31, 0xFE	; 254
 3e2:	90 83       	st	Z, r25
 3e4:	ff 91       	pop	r31
 3e6:	ef 91       	pop	r30
 3e8:	9f 91       	pop	r25
 3ea:	8f 91       	pop	r24
 3ec:	0f 90       	pop	r0
 3ee:	0b be       	out	0x3b, r0	; 59
 3f0:	0f 90       	pop	r0
 3f2:	0f be       	out	0x3f, r0	; 63
 3f4:	0f 90       	pop	r0
 3f6:	1f 90       	pop	r1
 3f8:	18 95       	reti

000003fa <__vector_19>:
 3fa:	1f 92       	push	r1
 3fc:	0f 92       	push	r0
 3fe:	0f b6       	in	r0, 0x3f	; 63
 400:	0f 92       	push	r0
 402:	11 24       	eor	r1, r1
 404:	0b b6       	in	r0, 0x3b	; 59
 406:	0f 92       	push	r0
 408:	8f 93       	push	r24
 40a:	9f 93       	push	r25
 40c:	ef 93       	push	r30
 40e:	ff 93       	push	r31
 410:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <UART_TxHead>
 414:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <UART_TxTail>
 418:	98 13       	cpse	r25, r24
 41a:	02 c0       	rjmp	.+4      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 41c:	55 98       	cbi	0x0a, 5	; 10
 41e:	0b c0       	rjmp	.+22     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 420:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <UART_TxTail>
 424:	ef 5f       	subi	r30, 0xFF	; 255
 426:	ef 71       	andi	r30, 0x1F	; 31
 428:	e0 93 71 01 	sts	0x0171, r30	; 0x800171 <UART_TxTail>
 42c:	f0 e0       	ldi	r31, 0x00	; 0
 42e:	ed 56       	subi	r30, 0x6D	; 109
 430:	fe 4f       	sbci	r31, 0xFE	; 254
 432:	80 81       	ld	r24, Z
 434:	8c b9       	out	0x0c, r24	; 12
 436:	ff 91       	pop	r31
 438:	ef 91       	pop	r30
 43a:	9f 91       	pop	r25
 43c:	8f 91       	pop	r24
 43e:	0f 90       	pop	r0
 440:	0b be       	out	0x3b, r0	; 59
 442:	0f 90       	pop	r0
 444:	0f be       	out	0x3f, r0	; 63
 446:	0f 90       	pop	r0
 448:	1f 90       	pop	r1
 44a:	18 95       	reti

0000044c <__vector_30>:
SIGNAL(UART1_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART1 Receive Complete interrupt
Purpose:  called when the UART1 has received a character
**************************************************************************/
{
 44c:	1f 92       	push	r1
 44e:	0f 92       	push	r0
 450:	0f b6       	in	r0, 0x3f	; 63
 452:	0f 92       	push	r0
 454:	11 24       	eor	r1, r1
 456:	0b b6       	in	r0, 0x3b	; 59
 458:	0f 92       	push	r0
 45a:	8f 93       	push	r24
 45c:	9f 93       	push	r25
 45e:	ef 93       	push	r30
 460:	ff 93       	push	r31
    unsigned char tmphead;
	unsigned char data;
	unsigned char bit9;
    unsigned char usr;
    /* read UART status register and UART data register */
	usr  = UART1_STATUS;
 462:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    bit9 = UART1_CONTROL;
 466:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
    bit9 = 0x01 & (bit9>>1);
    /* */
    UART1_LastRxError = (usr & (_BV(FE1)|_BV(DOR1)));
 46a:	88 71       	andi	r24, 0x18	; 24
 46c:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <UART1_LastRxError>
	/* calculate buffer index */
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
 470:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <UART1_RxHead>
 474:	ef 5f       	subi	r30, 0xFF	; 255
 476:	ef 71       	andi	r30, 0x1F	; 31
    if ( tmphead == UART1_RxTail ) {	
 478:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <UART1_RxTail>
 47c:	e8 13       	cpse	r30, r24
 47e:	04 c0       	rjmp	.+8      	; 0x488 <__vector_30+0x3c>
        /* error: receive buffer overflow, caracter is lost*/
        UART1_LastRxError = UART_BUFFER_OVERFLOW >> 8; 
 480:	82 e0       	ldi	r24, 0x02	; 2
 482:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <UART1_LastRxError>
 486:	12 c0       	rjmp	.+36     	; 0x4ac <__vector_30+0x60>
	}else{
		data = UART1_DATA;
 488:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
        /* store new index */
        UART1_RxHead = tmphead;
 48c:	e0 93 2b 01 	sts	0x012B, r30	; 0x80012b <UART1_RxHead>
		if(UART1_LastRxError){
 490:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <UART1_LastRxError>
 494:	88 23       	and	r24, r24
 496:	31 f0       	breq	.+12     	; 0x4a4 <__vector_30+0x58>
			/* store indication data error in buffer */
			UART1_RxBuf[tmphead] = 'X';
 498:	f0 e0       	ldi	r31, 0x00	; 0
 49a:	e2 5d       	subi	r30, 0xD2	; 210
 49c:	fe 4f       	sbci	r31, 0xFE	; 254
 49e:	88 e5       	ldi	r24, 0x58	; 88
 4a0:	80 83       	st	Z, r24
 4a2:	04 c0       	rjmp	.+8      	; 0x4ac <__vector_30+0x60>
		}else{
			/* store received data in buffer */
			UART1_RxBuf[tmphead] = data;
 4a4:	f0 e0       	ldi	r31, 0x00	; 0
 4a6:	e2 5d       	subi	r30, 0xD2	; 210
 4a8:	fe 4f       	sbci	r31, 0xFE	; 254
 4aa:	90 83       	st	Z, r25
		}
    }
}
 4ac:	ff 91       	pop	r31
 4ae:	ef 91       	pop	r30
 4b0:	9f 91       	pop	r25
 4b2:	8f 91       	pop	r24
 4b4:	0f 90       	pop	r0
 4b6:	0b be       	out	0x3b, r0	; 59
 4b8:	0f 90       	pop	r0
 4ba:	0f be       	out	0x3f, r0	; 63
 4bc:	0f 90       	pop	r0
 4be:	1f 90       	pop	r1
 4c0:	18 95       	reti

000004c2 <__vector_31>:
SIGNAL(UART1_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART1 Data Register Empty interrupt
Purpose:  called when the UART1 is ready to transmit the next byte
**************************************************************************/
{
 4c2:	1f 92       	push	r1
 4c4:	0f 92       	push	r0
 4c6:	0f b6       	in	r0, 0x3f	; 63
 4c8:	0f 92       	push	r0
 4ca:	11 24       	eor	r1, r1
 4cc:	0b b6       	in	r0, 0x3b	; 59
 4ce:	0f 92       	push	r0
 4d0:	8f 93       	push	r24
 4d2:	9f 93       	push	r25
 4d4:	ef 93       	push	r30
 4d6:	ff 93       	push	r31
    if ( UART1_TxHead == UART1_TxTail ) {
 4d8:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <UART1_TxHead>
 4dc:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <UART1_TxTail>
 4e0:	98 13       	cpse	r25, r24
 4e2:	06 c0       	rjmp	.+12     	; 0x4f0 <__vector_31+0x2e>
        /* tx buffer empty, disable UDRE interrupt */
        UART1_CONTROL &= ~_BV(UART1_UDRIE);
 4e4:	ea e9       	ldi	r30, 0x9A	; 154
 4e6:	f0 e0       	ldi	r31, 0x00	; 0
 4e8:	80 81       	ld	r24, Z
 4ea:	8f 7d       	andi	r24, 0xDF	; 223
 4ec:	80 83       	st	Z, r24
 4ee:	0e c0       	rjmp	.+28     	; 0x50c <__vector_31+0x4a>
    }else{
		/* calculate and store new buffer index */
        UART1_TxTail = (UART1_TxTail + 1) & UART_TX_BUFFER_MASK;
 4f0:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <UART1_TxTail>
 4f4:	8f 5f       	subi	r24, 0xFF	; 255
 4f6:	8f 71       	andi	r24, 0x1F	; 31
 4f8:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <UART1_TxTail>
        /* get one byte from buffer and write it to UART */
		UART1_DATA = UART1_TxBuf[UART1_TxTail];  /* start transmission */
 4fc:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <UART1_TxTail>
 500:	f0 e0       	ldi	r31, 0x00	; 0
 502:	e2 5b       	subi	r30, 0xB2	; 178
 504:	fe 4f       	sbci	r31, 0xFE	; 254
 506:	80 81       	ld	r24, Z
 508:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
	}
}
 50c:	ff 91       	pop	r31
 50e:	ef 91       	pop	r30
 510:	9f 91       	pop	r25
 512:	8f 91       	pop	r24
 514:	0f 90       	pop	r0
 516:	0b be       	out	0x3b, r0	; 59
 518:	0f 90       	pop	r0
 51a:	0f be       	out	0x3f, r0	; 63
 51c:	0f 90       	pop	r0
 51e:	1f 90       	pop	r1
 520:	18 95       	reti

00000522 <main>:
#define TRUE 1
#define ZERO 0
/***Global Variable***/
/***MAIN_MAIN***/
int main(void)
{
 522:	ff cf       	rjmp	.-2      	; 0x522 <main>

00000524 <_exit>:
 524:	f8 94       	cli

00000526 <__stop_program>:
 526:	ff cf       	rjmp	.-2      	; 0x526 <__stop_program>
