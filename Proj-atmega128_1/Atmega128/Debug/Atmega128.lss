
Atmega128.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  0000315c  00003210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000315c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000016c  0080013e  0080013e  0000324e  2**0
                  ALLOC
  3 .eeprom       00000013  00810000  00810000  0000324e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00003261  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003294  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000005a0  00000000  00000000  000032d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000617a  00000000  00000000  00003870  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001600  00000000  00000000  000099ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003b71  00000000  00000000  0000afea  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000f4c  00000000  00000000  0000eb5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000139d  00000000  00000000  0000faa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000050e9  00000000  00000000  00010e45  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000570  00000000  00000000  00015f2e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	8b c0       	rjmp	.+278    	; 0x118 <__ctors_end>
       2:	00 00       	nop
       4:	a8 c0       	rjmp	.+336    	; 0x156 <__bad_interrupt>
       6:	00 00       	nop
       8:	a6 c0       	rjmp	.+332    	; 0x156 <__bad_interrupt>
       a:	00 00       	nop
       c:	a4 c0       	rjmp	.+328    	; 0x156 <__bad_interrupt>
       e:	00 00       	nop
      10:	a2 c0       	rjmp	.+324    	; 0x156 <__bad_interrupt>
      12:	00 00       	nop
      14:	a0 c0       	rjmp	.+320    	; 0x156 <__bad_interrupt>
      16:	00 00       	nop
      18:	9e c0       	rjmp	.+316    	; 0x156 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0c 94 e7 17 	jmp	0x2fce	; 0x2fce <__vector_7>
      20:	9a c0       	rjmp	.+308    	; 0x156 <__bad_interrupt>
      22:	00 00       	nop
      24:	98 c0       	rjmp	.+304    	; 0x156 <__bad_interrupt>
      26:	00 00       	nop
      28:	96 c0       	rjmp	.+300    	; 0x156 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	94 c0       	rjmp	.+296    	; 0x156 <__bad_interrupt>
      2e:	00 00       	nop
      30:	92 c0       	rjmp	.+292    	; 0x156 <__bad_interrupt>
      32:	00 00       	nop
      34:	90 c0       	rjmp	.+288    	; 0x156 <__bad_interrupt>
      36:	00 00       	nop
      38:	8e c0       	rjmp	.+284    	; 0x156 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	8c c0       	rjmp	.+280    	; 0x156 <__bad_interrupt>
      3e:	00 00       	nop
      40:	8a c0       	rjmp	.+276    	; 0x156 <__bad_interrupt>
      42:	00 00       	nop
      44:	88 c0       	rjmp	.+272    	; 0x156 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 2b 08 	jmp	0x1056	; 0x1056 <__vector_18>
      4c:	0c 94 63 08 	jmp	0x10c6	; 0x10c6 <__vector_19>
      50:	82 c0       	rjmp	.+260    	; 0x156 <__bad_interrupt>
      52:	00 00       	nop
      54:	f0 c3       	rjmp	.+2016   	; 0x836 <__vector_21>
      56:	00 00       	nop
      58:	7e c0       	rjmp	.+252    	; 0x156 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	7c c0       	rjmp	.+248    	; 0x156 <__bad_interrupt>
      5e:	00 00       	nop
      60:	7a c0       	rjmp	.+244    	; 0x156 <__bad_interrupt>
      62:	00 00       	nop
      64:	78 c0       	rjmp	.+240    	; 0x156 <__bad_interrupt>
      66:	00 00       	nop
      68:	76 c0       	rjmp	.+236    	; 0x156 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	74 c0       	rjmp	.+232    	; 0x156 <__bad_interrupt>
      6e:	00 00       	nop
      70:	72 c0       	rjmp	.+228    	; 0x156 <__bad_interrupt>
      72:	00 00       	nop
      74:	0c 94 96 17 	jmp	0x2f2c	; 0x2f2c <__vector_29>
      78:	0c 94 fd 09 	jmp	0x13fa	; 0x13fa <__vector_30>
      7c:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__vector_31>
      80:	6a c0       	rjmp	.+212    	; 0x156 <__bad_interrupt>
      82:	00 00       	nop
      84:	68 c0       	rjmp	.+208    	; 0x156 <__bad_interrupt>
      86:	00 00       	nop
      88:	66 c0       	rjmp	.+204    	; 0x156 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ed 00       	.word	0x00ed	; ????
      8e:	09 01       	movw	r0, r18
      90:	25 01       	movw	r4, r10
      92:	41 01       	movw	r8, r2
      94:	5d 01       	movw	r10, r26
      96:	78 01       	movw	r14, r16
      98:	93 01       	movw	r18, r6
      9a:	ae 01       	movw	r20, r28
      9c:	d4 01       	movw	r26, r8
      9e:	d8 01       	movw	r26, r16
      a0:	dc 01       	movw	r26, r24
      a2:	e0 01       	movw	r28, r0
      a4:	e4 01       	movw	r28, r8
      a6:	e8 01       	movw	r28, r16
      a8:	ec 01       	movw	r28, r24
      aa:	f0 01       	movw	r30, r0
      ac:	d9 04       	cpc	r13, r9
      ae:	dd 04       	cpc	r13, r13
      b0:	e1 04       	cpc	r14, r1
      b2:	e5 04       	cpc	r14, r5
      b4:	e9 04       	cpc	r14, r9
      b6:	f0 04       	cpc	r15, r0
      b8:	f7 04       	cpc	r15, r7
      ba:	fe 04       	cpc	r15, r14
      bc:	02 05       	cpc	r16, r2
      be:	09 05       	cpc	r16, r9
      c0:	10 05       	cpc	r17, r0
      c2:	17 05       	cpc	r17, r7
      c4:	1b 05       	cpc	r17, r11
      c6:	22 05       	cpc	r18, r2
      c8:	29 05       	cpc	r18, r9
      ca:	45 05       	cpc	r20, r5
      cc:	49 05       	cpc	r20, r9
      ce:	4d 05       	cpc	r20, r13
      d0:	51 05       	cpc	r21, r1
      d2:	57 05       	cpc	r21, r7
      d4:	5b 05       	cpc	r21, r11
      d6:	5f 05       	cpc	r21, r15
      d8:	63 05       	cpc	r22, r3
      da:	6c 05       	cpc	r22, r12
      dc:	70 05       	cpc	r23, r0
      de:	74 05       	cpc	r23, r4
      e0:	7d 05       	cpc	r23, r13
      e2:	d5 05       	cpc	r29, r5
      e4:	db 05       	cpc	r29, r11
      e6:	e1 05       	cpc	r30, r1
      e8:	e7 05       	cpc	r30, r7
      ea:	ed 05       	cpc	r30, r13
      ec:	f8 05       	cpc	r31, r8
      ee:	03 06       	cpc	r0, r19
      f0:	0e 06       	cpc	r0, r30
      f2:	14 06       	cpc	r1, r20
      f4:	1f 06       	cpc	r1, r31
      f6:	2a 06       	cpc	r2, r26
      f8:	35 06       	cpc	r3, r21
      fa:	3b 06       	cpc	r3, r27
      fc:	46 06       	cpc	r4, r22
      fe:	51 06       	cpc	r5, r17
     100:	70 06       	cpc	r7, r16
     102:	74 06       	cpc	r7, r20
     104:	7a 06       	cpc	r7, r26
     106:	80 06       	cpc	r8, r16
     108:	86 06       	cpc	r8, r22
     10a:	8c 06       	cpc	r8, r28
     10c:	92 06       	cpc	r9, r18
     10e:	98 06       	cpc	r9, r24
     110:	9e 06       	cpc	r9, r30
     112:	a4 06       	cpc	r10, r20
     114:	aa 06       	cpc	r10, r26
     116:	b0 06       	cpc	r11, r16

00000118 <__ctors_end>:
     118:	11 24       	eor	r1, r1
     11a:	1f be       	out	0x3f, r1	; 63
     11c:	cf ef       	ldi	r28, 0xFF	; 255
     11e:	d0 e1       	ldi	r29, 0x10	; 16
     120:	de bf       	out	0x3e, r29	; 62
     122:	cd bf       	out	0x3d, r28	; 61

00000124 <__do_copy_data>:
     124:	11 e0       	ldi	r17, 0x01	; 1
     126:	a0 e0       	ldi	r26, 0x00	; 0
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	ec e5       	ldi	r30, 0x5C	; 92
     12c:	f1 e3       	ldi	r31, 0x31	; 49
     12e:	00 e0       	ldi	r16, 0x00	; 0
     130:	0b bf       	out	0x3b, r16	; 59
     132:	02 c0       	rjmp	.+4      	; 0x138 <__do_copy_data+0x14>
     134:	07 90       	elpm	r0, Z+
     136:	0d 92       	st	X+, r0
     138:	ae 33       	cpi	r26, 0x3E	; 62
     13a:	b1 07       	cpc	r27, r17
     13c:	d9 f7       	brne	.-10     	; 0x134 <__do_copy_data+0x10>

0000013e <__do_clear_bss>:
     13e:	22 e0       	ldi	r18, 0x02	; 2
     140:	ae e3       	ldi	r26, 0x3E	; 62
     142:	b1 e0       	ldi	r27, 0x01	; 1
     144:	01 c0       	rjmp	.+2      	; 0x148 <.do_clear_bss_start>

00000146 <.do_clear_bss_loop>:
     146:	1d 92       	st	X+, r1

00000148 <.do_clear_bss_start>:
     148:	aa 3a       	cpi	r26, 0xAA	; 170
     14a:	b2 07       	cpc	r27, r18
     14c:	e1 f7       	brne	.-8      	; 0x146 <.do_clear_bss_loop>
     14e:	0e 94 93 15 	call	0x2b26	; 0x2b26 <main>
     152:	0c 94 ac 18 	jmp	0x3158	; 0x3158 <_exit>

00000156 <__bad_interrupt>:
     156:	54 cf       	rjmp	.-344    	; 0x0 <__vectors>

00000158 <ANALOG_read>:
void uart1_puts_p(const char *progmem_s )
{
    register char c;
    while ( (c = pgm_read_byte(progmem_s++)) ) 
      uart1_putc(c);
}/* uart1_puts_p */
     158:	36 9b       	sbis	0x06, 6	; 6
     15a:	36 9a       	sbi	0x06, 6	; 6
     15c:	fc 01       	movw	r30, r24
     15e:	ee 0f       	add	r30, r30
     160:	ff 1f       	adc	r31, r31
     162:	ef 51       	subi	r30, 0x1F	; 31
     164:	fe 4f       	sbci	r31, 0xFE	; 254
     166:	80 81       	ld	r24, Z
     168:	91 81       	ldd	r25, Z+1	; 0x01
     16a:	08 95       	ret

0000016c <INTERRUPT_reset_status>:
     16c:	84 b7       	in	r24, 0x34	; 52
     16e:	8f 71       	andi	r24, 0x1F	; 31
     170:	84 30       	cpi	r24, 0x04	; 4
     172:	a9 f0       	breq	.+42     	; 0x19e <INTERRUPT_reset_status+0x32>
     174:	28 f4       	brcc	.+10     	; 0x180 <INTERRUPT_reset_status+0x14>
     176:	81 30       	cpi	r24, 0x01	; 1
     178:	41 f0       	breq	.+16     	; 0x18a <INTERRUPT_reset_status+0x1e>
     17a:	82 30       	cpi	r24, 0x02	; 2
     17c:	59 f0       	breq	.+22     	; 0x194 <INTERRUPT_reset_status+0x28>
     17e:	1e c0       	rjmp	.+60     	; 0x1bc <INTERRUPT_reset_status+0x50>
     180:	88 30       	cpi	r24, 0x08	; 8
     182:	91 f0       	breq	.+36     	; 0x1a8 <INTERRUPT_reset_status+0x3c>
     184:	80 31       	cpi	r24, 0x10	; 16
     186:	a9 f0       	breq	.+42     	; 0x1b2 <INTERRUPT_reset_status+0x46>
     188:	19 c0       	rjmp	.+50     	; 0x1bc <INTERRUPT_reset_status+0x50>
     18a:	84 b7       	in	r24, 0x34	; 52
     18c:	8e 7f       	andi	r24, 0xFE	; 254
     18e:	84 bf       	out	0x34, r24	; 52
     190:	80 e0       	ldi	r24, 0x00	; 0
     192:	08 95       	ret
     194:	84 b7       	in	r24, 0x34	; 52
     196:	8d 7f       	andi	r24, 0xFD	; 253
     198:	84 bf       	out	0x34, r24	; 52
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	08 95       	ret
     19e:	84 b7       	in	r24, 0x34	; 52
     1a0:	8b 7f       	andi	r24, 0xFB	; 251
     1a2:	84 bf       	out	0x34, r24	; 52
     1a4:	82 e0       	ldi	r24, 0x02	; 2
     1a6:	08 95       	ret
     1a8:	84 b7       	in	r24, 0x34	; 52
     1aa:	87 7f       	andi	r24, 0xF7	; 247
     1ac:	84 bf       	out	0x34, r24	; 52
     1ae:	83 e0       	ldi	r24, 0x03	; 3
     1b0:	08 95       	ret
     1b2:	84 b7       	in	r24, 0x34	; 52
     1b4:	8f 7e       	andi	r24, 0xEF	; 239
     1b6:	84 bf       	out	0x34, r24	; 52
     1b8:	84 e0       	ldi	r24, 0x04	; 4
     1ba:	08 95       	ret
     1bc:	84 b7       	in	r24, 0x34	; 52
     1be:	80 7e       	andi	r24, 0xE0	; 224
     1c0:	84 bf       	out	0x34, r24	; 52
     1c2:	80 e0       	ldi	r24, 0x00	; 0
     1c4:	08 95       	ret

000001c6 <INTERRUPT_set>:
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	88 30       	cpi	r24, 0x08	; 8
     1ca:	91 05       	cpc	r25, r1
     1cc:	08 f0       	brcs	.+2      	; 0x1d0 <INTERRUPT_set+0xa>
     1ce:	e1 c0       	rjmp	.+450    	; 0x392 <INTERRUPT_set+0x1cc>
     1d0:	fc 01       	movw	r30, r24
     1d2:	ea 5b       	subi	r30, 0xBA	; 186
     1d4:	ff 4f       	sbci	r31, 0xFF	; 255
     1d6:	0c 94 8a 18 	jmp	0x3114	; 0x3114 <__tablejump2__>
     1da:	89 b7       	in	r24, 0x39	; 57
     1dc:	8e 7f       	andi	r24, 0xFE	; 254
     1de:	89 bf       	out	0x39, r24	; 57
     1e0:	ea e6       	ldi	r30, 0x6A	; 106
     1e2:	f0 e0       	ldi	r31, 0x00	; 0
     1e4:	80 81       	ld	r24, Z
     1e6:	8c 7f       	andi	r24, 0xFC	; 252
     1e8:	80 83       	st	Z, r24
     1ea:	62 30       	cpi	r22, 0x02	; 2
     1ec:	19 f0       	breq	.+6      	; 0x1f4 <INTERRUPT_set+0x2e>
     1ee:	63 30       	cpi	r22, 0x03	; 3
     1f0:	39 f0       	breq	.+14     	; 0x200 <INTERRUPT_set+0x3a>
     1f2:	0b c0       	rjmp	.+22     	; 0x20a <INTERRUPT_set+0x44>
     1f4:	ea e6       	ldi	r30, 0x6A	; 106
     1f6:	f0 e0       	ldi	r31, 0x00	; 0
     1f8:	80 81       	ld	r24, Z
     1fa:	82 60       	ori	r24, 0x02	; 2
     1fc:	80 83       	st	Z, r24
     1fe:	05 c0       	rjmp	.+10     	; 0x20a <INTERRUPT_set+0x44>
     200:	ea e6       	ldi	r30, 0x6A	; 106
     202:	f0 e0       	ldi	r31, 0x00	; 0
     204:	80 81       	ld	r24, Z
     206:	83 60       	ori	r24, 0x03	; 3
     208:	80 83       	st	Z, r24
     20a:	89 b7       	in	r24, 0x39	; 57
     20c:	81 60       	ori	r24, 0x01	; 1
     20e:	89 bf       	out	0x39, r24	; 57
     210:	08 95       	ret
     212:	89 b7       	in	r24, 0x39	; 57
     214:	8d 7f       	andi	r24, 0xFD	; 253
     216:	89 bf       	out	0x39, r24	; 57
     218:	ea e6       	ldi	r30, 0x6A	; 106
     21a:	f0 e0       	ldi	r31, 0x00	; 0
     21c:	80 81       	ld	r24, Z
     21e:	83 7f       	andi	r24, 0xF3	; 243
     220:	80 83       	st	Z, r24
     222:	62 30       	cpi	r22, 0x02	; 2
     224:	19 f0       	breq	.+6      	; 0x22c <INTERRUPT_set+0x66>
     226:	63 30       	cpi	r22, 0x03	; 3
     228:	39 f0       	breq	.+14     	; 0x238 <INTERRUPT_set+0x72>
     22a:	0b c0       	rjmp	.+22     	; 0x242 <INTERRUPT_set+0x7c>
     22c:	ea e6       	ldi	r30, 0x6A	; 106
     22e:	f0 e0       	ldi	r31, 0x00	; 0
     230:	80 81       	ld	r24, Z
     232:	88 60       	ori	r24, 0x08	; 8
     234:	80 83       	st	Z, r24
     236:	05 c0       	rjmp	.+10     	; 0x242 <INTERRUPT_set+0x7c>
     238:	ea e6       	ldi	r30, 0x6A	; 106
     23a:	f0 e0       	ldi	r31, 0x00	; 0
     23c:	80 81       	ld	r24, Z
     23e:	8c 60       	ori	r24, 0x0C	; 12
     240:	80 83       	st	Z, r24
     242:	89 b7       	in	r24, 0x39	; 57
     244:	82 60       	ori	r24, 0x02	; 2
     246:	89 bf       	out	0x39, r24	; 57
     248:	08 95       	ret
     24a:	89 b7       	in	r24, 0x39	; 57
     24c:	8b 7f       	andi	r24, 0xFB	; 251
     24e:	89 bf       	out	0x39, r24	; 57
     250:	ea e6       	ldi	r30, 0x6A	; 106
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	80 81       	ld	r24, Z
     256:	8f 7c       	andi	r24, 0xCF	; 207
     258:	80 83       	st	Z, r24
     25a:	62 30       	cpi	r22, 0x02	; 2
     25c:	19 f0       	breq	.+6      	; 0x264 <INTERRUPT_set+0x9e>
     25e:	63 30       	cpi	r22, 0x03	; 3
     260:	39 f0       	breq	.+14     	; 0x270 <INTERRUPT_set+0xaa>
     262:	0b c0       	rjmp	.+22     	; 0x27a <INTERRUPT_set+0xb4>
     264:	ea e6       	ldi	r30, 0x6A	; 106
     266:	f0 e0       	ldi	r31, 0x00	; 0
     268:	80 81       	ld	r24, Z
     26a:	80 62       	ori	r24, 0x20	; 32
     26c:	80 83       	st	Z, r24
     26e:	05 c0       	rjmp	.+10     	; 0x27a <INTERRUPT_set+0xb4>
     270:	ea e6       	ldi	r30, 0x6A	; 106
     272:	f0 e0       	ldi	r31, 0x00	; 0
     274:	80 81       	ld	r24, Z
     276:	80 63       	ori	r24, 0x30	; 48
     278:	80 83       	st	Z, r24
     27a:	89 b7       	in	r24, 0x39	; 57
     27c:	84 60       	ori	r24, 0x04	; 4
     27e:	89 bf       	out	0x39, r24	; 57
     280:	08 95       	ret
     282:	89 b7       	in	r24, 0x39	; 57
     284:	87 7f       	andi	r24, 0xF7	; 247
     286:	89 bf       	out	0x39, r24	; 57
     288:	ea e6       	ldi	r30, 0x6A	; 106
     28a:	f0 e0       	ldi	r31, 0x00	; 0
     28c:	80 81       	ld	r24, Z
     28e:	8f 73       	andi	r24, 0x3F	; 63
     290:	80 83       	st	Z, r24
     292:	62 30       	cpi	r22, 0x02	; 2
     294:	19 f0       	breq	.+6      	; 0x29c <INTERRUPT_set+0xd6>
     296:	63 30       	cpi	r22, 0x03	; 3
     298:	39 f0       	breq	.+14     	; 0x2a8 <INTERRUPT_set+0xe2>
     29a:	0b c0       	rjmp	.+22     	; 0x2b2 <INTERRUPT_set+0xec>
     29c:	ea e6       	ldi	r30, 0x6A	; 106
     29e:	f0 e0       	ldi	r31, 0x00	; 0
     2a0:	80 81       	ld	r24, Z
     2a2:	80 68       	ori	r24, 0x80	; 128
     2a4:	80 83       	st	Z, r24
     2a6:	05 c0       	rjmp	.+10     	; 0x2b2 <INTERRUPT_set+0xec>
     2a8:	ea e6       	ldi	r30, 0x6A	; 106
     2aa:	f0 e0       	ldi	r31, 0x00	; 0
     2ac:	80 81       	ld	r24, Z
     2ae:	80 6c       	ori	r24, 0xC0	; 192
     2b0:	80 83       	st	Z, r24
     2b2:	89 b7       	in	r24, 0x39	; 57
     2b4:	88 60       	ori	r24, 0x08	; 8
     2b6:	89 bf       	out	0x39, r24	; 57
     2b8:	08 95       	ret
     2ba:	89 b7       	in	r24, 0x39	; 57
     2bc:	8f 7e       	andi	r24, 0xEF	; 239
     2be:	89 bf       	out	0x39, r24	; 57
     2c0:	8a b7       	in	r24, 0x3a	; 58
     2c2:	8c 7f       	andi	r24, 0xFC	; 252
     2c4:	8a bf       	out	0x3a, r24	; 58
     2c6:	62 30       	cpi	r22, 0x02	; 2
     2c8:	41 f0       	breq	.+16     	; 0x2da <INTERRUPT_set+0x114>
     2ca:	63 30       	cpi	r22, 0x03	; 3
     2cc:	51 f0       	breq	.+20     	; 0x2e2 <INTERRUPT_set+0x11c>
     2ce:	61 30       	cpi	r22, 0x01	; 1
     2d0:	59 f4       	brne	.+22     	; 0x2e8 <INTERRUPT_set+0x122>
     2d2:	8a b7       	in	r24, 0x3a	; 58
     2d4:	81 60       	ori	r24, 0x01	; 1
     2d6:	8a bf       	out	0x3a, r24	; 58
     2d8:	07 c0       	rjmp	.+14     	; 0x2e8 <INTERRUPT_set+0x122>
     2da:	8a b7       	in	r24, 0x3a	; 58
     2dc:	82 60       	ori	r24, 0x02	; 2
     2de:	8a bf       	out	0x3a, r24	; 58
     2e0:	03 c0       	rjmp	.+6      	; 0x2e8 <INTERRUPT_set+0x122>
     2e2:	8a b7       	in	r24, 0x3a	; 58
     2e4:	83 60       	ori	r24, 0x03	; 3
     2e6:	8a bf       	out	0x3a, r24	; 58
     2e8:	89 b7       	in	r24, 0x39	; 57
     2ea:	80 61       	ori	r24, 0x10	; 16
     2ec:	89 bf       	out	0x39, r24	; 57
     2ee:	08 95       	ret
     2f0:	89 b7       	in	r24, 0x39	; 57
     2f2:	8f 7d       	andi	r24, 0xDF	; 223
     2f4:	89 bf       	out	0x39, r24	; 57
     2f6:	8a b7       	in	r24, 0x3a	; 58
     2f8:	83 7f       	andi	r24, 0xF3	; 243
     2fa:	8a bf       	out	0x3a, r24	; 58
     2fc:	62 30       	cpi	r22, 0x02	; 2
     2fe:	41 f0       	breq	.+16     	; 0x310 <INTERRUPT_set+0x14a>
     300:	63 30       	cpi	r22, 0x03	; 3
     302:	51 f0       	breq	.+20     	; 0x318 <INTERRUPT_set+0x152>
     304:	61 30       	cpi	r22, 0x01	; 1
     306:	59 f4       	brne	.+22     	; 0x31e <INTERRUPT_set+0x158>
     308:	8a b7       	in	r24, 0x3a	; 58
     30a:	84 60       	ori	r24, 0x04	; 4
     30c:	8a bf       	out	0x3a, r24	; 58
     30e:	07 c0       	rjmp	.+14     	; 0x31e <INTERRUPT_set+0x158>
     310:	8a b7       	in	r24, 0x3a	; 58
     312:	88 60       	ori	r24, 0x08	; 8
     314:	8a bf       	out	0x3a, r24	; 58
     316:	03 c0       	rjmp	.+6      	; 0x31e <INTERRUPT_set+0x158>
     318:	8a b7       	in	r24, 0x3a	; 58
     31a:	8c 60       	ori	r24, 0x0C	; 12
     31c:	8a bf       	out	0x3a, r24	; 58
     31e:	89 b7       	in	r24, 0x39	; 57
     320:	80 62       	ori	r24, 0x20	; 32
     322:	89 bf       	out	0x39, r24	; 57
     324:	08 95       	ret
     326:	89 b7       	in	r24, 0x39	; 57
     328:	8f 7b       	andi	r24, 0xBF	; 191
     32a:	89 bf       	out	0x39, r24	; 57
     32c:	8a b7       	in	r24, 0x3a	; 58
     32e:	8f 7c       	andi	r24, 0xCF	; 207
     330:	8a bf       	out	0x3a, r24	; 58
     332:	62 30       	cpi	r22, 0x02	; 2
     334:	41 f0       	breq	.+16     	; 0x346 <INTERRUPT_set+0x180>
     336:	63 30       	cpi	r22, 0x03	; 3
     338:	51 f0       	breq	.+20     	; 0x34e <INTERRUPT_set+0x188>
     33a:	61 30       	cpi	r22, 0x01	; 1
     33c:	59 f4       	brne	.+22     	; 0x354 <INTERRUPT_set+0x18e>
     33e:	8a b7       	in	r24, 0x3a	; 58
     340:	80 61       	ori	r24, 0x10	; 16
     342:	8a bf       	out	0x3a, r24	; 58
     344:	07 c0       	rjmp	.+14     	; 0x354 <INTERRUPT_set+0x18e>
     346:	8a b7       	in	r24, 0x3a	; 58
     348:	80 62       	ori	r24, 0x20	; 32
     34a:	8a bf       	out	0x3a, r24	; 58
     34c:	03 c0       	rjmp	.+6      	; 0x354 <INTERRUPT_set+0x18e>
     34e:	8a b7       	in	r24, 0x3a	; 58
     350:	80 63       	ori	r24, 0x30	; 48
     352:	8a bf       	out	0x3a, r24	; 58
     354:	89 b7       	in	r24, 0x39	; 57
     356:	80 64       	ori	r24, 0x40	; 64
     358:	89 bf       	out	0x39, r24	; 57
     35a:	08 95       	ret
     35c:	89 b7       	in	r24, 0x39	; 57
     35e:	8f 77       	andi	r24, 0x7F	; 127
     360:	89 bf       	out	0x39, r24	; 57
     362:	8a b7       	in	r24, 0x3a	; 58
     364:	8f 73       	andi	r24, 0x3F	; 63
     366:	8a bf       	out	0x3a, r24	; 58
     368:	62 30       	cpi	r22, 0x02	; 2
     36a:	41 f0       	breq	.+16     	; 0x37c <INTERRUPT_set+0x1b6>
     36c:	63 30       	cpi	r22, 0x03	; 3
     36e:	51 f0       	breq	.+20     	; 0x384 <INTERRUPT_set+0x1be>
     370:	61 30       	cpi	r22, 0x01	; 1
     372:	59 f4       	brne	.+22     	; 0x38a <INTERRUPT_set+0x1c4>
     374:	8a b7       	in	r24, 0x3a	; 58
     376:	80 64       	ori	r24, 0x40	; 64
     378:	8a bf       	out	0x3a, r24	; 58
     37a:	07 c0       	rjmp	.+14     	; 0x38a <INTERRUPT_set+0x1c4>
     37c:	8a b7       	in	r24, 0x3a	; 58
     37e:	80 68       	ori	r24, 0x80	; 128
     380:	8a bf       	out	0x3a, r24	; 58
     382:	03 c0       	rjmp	.+6      	; 0x38a <INTERRUPT_set+0x1c4>
     384:	8a b7       	in	r24, 0x3a	; 58
     386:	80 6c       	ori	r24, 0xC0	; 192
     388:	8a bf       	out	0x3a, r24	; 58
     38a:	89 b7       	in	r24, 0x39	; 57
     38c:	80 68       	ori	r24, 0x80	; 128
     38e:	89 bf       	out	0x39, r24	; 57
     390:	08 95       	ret
     392:	19 be       	out	0x39, r1	; 57
     394:	08 95       	ret

00000396 <INTERRUPT_off>:
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	88 30       	cpi	r24, 0x08	; 8
     39a:	91 05       	cpc	r25, r1
     39c:	28 f5       	brcc	.+74     	; 0x3e8 <INTERRUPT_off+0x52>
     39e:	fc 01       	movw	r30, r24
     3a0:	e2 5b       	subi	r30, 0xB2	; 178
     3a2:	ff 4f       	sbci	r31, 0xFF	; 255
     3a4:	0c 94 8a 18 	jmp	0x3114	; 0x3114 <__tablejump2__>
     3a8:	89 b7       	in	r24, 0x39	; 57
     3aa:	8e 7f       	andi	r24, 0xFE	; 254
     3ac:	89 bf       	out	0x39, r24	; 57
     3ae:	08 95       	ret
     3b0:	89 b7       	in	r24, 0x39	; 57
     3b2:	8d 7f       	andi	r24, 0xFD	; 253
     3b4:	89 bf       	out	0x39, r24	; 57
     3b6:	08 95       	ret
     3b8:	89 b7       	in	r24, 0x39	; 57
     3ba:	8b 7f       	andi	r24, 0xFB	; 251
     3bc:	89 bf       	out	0x39, r24	; 57
     3be:	08 95       	ret
     3c0:	89 b7       	in	r24, 0x39	; 57
     3c2:	87 7f       	andi	r24, 0xF7	; 247
     3c4:	89 bf       	out	0x39, r24	; 57
     3c6:	08 95       	ret
     3c8:	89 b7       	in	r24, 0x39	; 57
     3ca:	8f 7e       	andi	r24, 0xEF	; 239
     3cc:	89 bf       	out	0x39, r24	; 57
     3ce:	08 95       	ret
     3d0:	89 b7       	in	r24, 0x39	; 57
     3d2:	8f 7d       	andi	r24, 0xDF	; 223
     3d4:	89 bf       	out	0x39, r24	; 57
     3d6:	08 95       	ret
     3d8:	89 b7       	in	r24, 0x39	; 57
     3da:	8f 7b       	andi	r24, 0xBF	; 191
     3dc:	89 bf       	out	0x39, r24	; 57
     3de:	08 95       	ret
     3e0:	89 b7       	in	r24, 0x39	; 57
     3e2:	8f 77       	andi	r24, 0x7F	; 127
     3e4:	89 bf       	out	0x39, r24	; 57
     3e6:	08 95       	ret
     3e8:	19 be       	out	0x39, r1	; 57
     3ea:	08 95       	ret

000003ec <TIMER_COUNTER1_start>:
     3ec:	20 91 11 02 	lds	r18, 0x0211	; 0x800211 <timer1_state>
     3f0:	21 11       	cpse	r18, r1
     3f2:	42 c0       	rjmp	.+132    	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     3f4:	2f ef       	ldi	r18, 0xFF	; 255
     3f6:	3f ef       	ldi	r19, 0xFF	; 255
     3f8:	3b bd       	out	0x2b, r19	; 43
     3fa:	2a bd       	out	0x2a, r18	; 42
     3fc:	2e b5       	in	r18, 0x2e	; 46
     3fe:	28 7f       	andi	r18, 0xF8	; 248
     400:	2e bd       	out	0x2e, r18	; 46
     402:	88 30       	cpi	r24, 0x08	; 8
     404:	91 05       	cpc	r25, r1
     406:	d1 f0       	breq	.+52     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     408:	48 f4       	brcc	.+18     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     40a:	83 30       	cpi	r24, 0x03	; 3
     40c:	91 05       	cpc	r25, r1
     40e:	31 f1       	breq	.+76     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     410:	85 30       	cpi	r24, 0x05	; 5
     412:	91 05       	cpc	r25, r1
     414:	39 f1       	breq	.+78     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     416:	01 97       	sbiw	r24, 0x01	; 1
     418:	49 f5       	brne	.+82     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     41a:	0c c0       	rjmp	.+24     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     41c:	81 15       	cp	r24, r1
     41e:	21 e0       	ldi	r18, 0x01	; 1
     420:	92 07       	cpc	r25, r18
     422:	a1 f0       	breq	.+40     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     424:	81 15       	cp	r24, r1
     426:	24 e0       	ldi	r18, 0x04	; 4
     428:	92 07       	cpc	r25, r18
     42a:	a1 f0       	breq	.+40     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     42c:	80 34       	cpi	r24, 0x40	; 64
     42e:	91 05       	cpc	r25, r1
     430:	e9 f4       	brne	.+58     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     432:	08 c0       	rjmp	.+16     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     434:	8e b5       	in	r24, 0x2e	; 46
     436:	81 60       	ori	r24, 0x01	; 1
     438:	8e bd       	out	0x2e, r24	; 46
     43a:	1b c0       	rjmp	.+54     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     43c:	8e b5       	in	r24, 0x2e	; 46
     43e:	82 60       	ori	r24, 0x02	; 2
     440:	8e bd       	out	0x2e, r24	; 46
     442:	17 c0       	rjmp	.+46     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     444:	8e b5       	in	r24, 0x2e	; 46
     446:	83 60       	ori	r24, 0x03	; 3
     448:	8e bd       	out	0x2e, r24	; 46
     44a:	13 c0       	rjmp	.+38     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     44c:	8e b5       	in	r24, 0x2e	; 46
     44e:	84 60       	ori	r24, 0x04	; 4
     450:	8e bd       	out	0x2e, r24	; 46
     452:	0f c0       	rjmp	.+30     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     454:	8e b5       	in	r24, 0x2e	; 46
     456:	85 60       	ori	r24, 0x05	; 5
     458:	8e bd       	out	0x2e, r24	; 46
     45a:	0b c0       	rjmp	.+22     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     45c:	8e b5       	in	r24, 0x2e	; 46
     45e:	86 60       	ori	r24, 0x06	; 6
     460:	8e bd       	out	0x2e, r24	; 46
     462:	07 c0       	rjmp	.+14     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     464:	8e b5       	in	r24, 0x2e	; 46
     466:	87 60       	ori	r24, 0x07	; 7
     468:	8e bd       	out	0x2e, r24	; 46
     46a:	03 c0       	rjmp	.+6      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     46c:	8e b5       	in	r24, 0x2e	; 46
     46e:	85 60       	ori	r24, 0x05	; 5
     470:	8e bd       	out	0x2e, r24	; 46
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <timer1_state>
     478:	08 95       	ret

0000047a <TIMER_COUNTER1_compoutmodeA>:
     47a:	9f b5       	in	r25, 0x2f	; 47
     47c:	9f 73       	andi	r25, 0x3F	; 63
     47e:	9f bd       	out	0x2f, r25	; 47
     480:	82 30       	cpi	r24, 0x02	; 2
     482:	41 f0       	breq	.+16     	; 0x494 <TIMER_COUNTER1_compoutmodeA+0x1a>
     484:	83 30       	cpi	r24, 0x03	; 3
     486:	51 f0       	breq	.+20     	; 0x49c <TIMER_COUNTER1_compoutmodeA+0x22>
     488:	81 30       	cpi	r24, 0x01	; 1
     48a:	59 f4       	brne	.+22     	; 0x4a2 <TIMER_COUNTER1_compoutmodeA+0x28>
     48c:	8f b5       	in	r24, 0x2f	; 47
     48e:	80 64       	ori	r24, 0x40	; 64
     490:	8f bd       	out	0x2f, r24	; 47
     492:	08 95       	ret
     494:	8f b5       	in	r24, 0x2f	; 47
     496:	80 68       	ori	r24, 0x80	; 128
     498:	8f bd       	out	0x2f, r24	; 47
     49a:	08 95       	ret
     49c:	8f b5       	in	r24, 0x2f	; 47
     49e:	80 6c       	ori	r24, 0xC0	; 192
     4a0:	8f bd       	out	0x2f, r24	; 47
     4a2:	08 95       	ret

000004a4 <TIMER_COUNTER1_compoutmodeB>:
     4a4:	9f b5       	in	r25, 0x2f	; 47
     4a6:	9f 7c       	andi	r25, 0xCF	; 207
     4a8:	9f bd       	out	0x2f, r25	; 47
     4aa:	82 30       	cpi	r24, 0x02	; 2
     4ac:	41 f0       	breq	.+16     	; 0x4be <TIMER_COUNTER1_compoutmodeB+0x1a>
     4ae:	83 30       	cpi	r24, 0x03	; 3
     4b0:	51 f0       	breq	.+20     	; 0x4c6 <TIMER_COUNTER1_compoutmodeB+0x22>
     4b2:	81 30       	cpi	r24, 0x01	; 1
     4b4:	59 f4       	brne	.+22     	; 0x4cc <TIMER_COUNTER1_compoutmodeB+0x28>
     4b6:	8f b5       	in	r24, 0x2f	; 47
     4b8:	80 61       	ori	r24, 0x10	; 16
     4ba:	8f bd       	out	0x2f, r24	; 47
     4bc:	08 95       	ret
     4be:	8f b5       	in	r24, 0x2f	; 47
     4c0:	80 62       	ori	r24, 0x20	; 32
     4c2:	8f bd       	out	0x2f, r24	; 47
     4c4:	08 95       	ret
     4c6:	8f b5       	in	r24, 0x2f	; 47
     4c8:	80 63       	ori	r24, 0x30	; 48
     4ca:	8f bd       	out	0x2f, r24	; 47
     4cc:	08 95       	ret

000004ce <TIMER_COUNTER1_compoutmodeC>:
     4ce:	9f b5       	in	r25, 0x2f	; 47
     4d0:	93 7f       	andi	r25, 0xF3	; 243
     4d2:	9f bd       	out	0x2f, r25	; 47
     4d4:	82 30       	cpi	r24, 0x02	; 2
     4d6:	41 f0       	breq	.+16     	; 0x4e8 <TIMER_COUNTER1_compoutmodeC+0x1a>
     4d8:	83 30       	cpi	r24, 0x03	; 3
     4da:	51 f0       	breq	.+20     	; 0x4f0 <TIMER_COUNTER1_compoutmodeC+0x22>
     4dc:	81 30       	cpi	r24, 0x01	; 1
     4de:	59 f4       	brne	.+22     	; 0x4f6 <TIMER_COUNTER1_compoutmodeC+0x28>
     4e0:	8f b5       	in	r24, 0x2f	; 47
     4e2:	84 60       	ori	r24, 0x04	; 4
     4e4:	8f bd       	out	0x2f, r24	; 47
     4e6:	08 95       	ret
     4e8:	8f b5       	in	r24, 0x2f	; 47
     4ea:	88 60       	ori	r24, 0x08	; 8
     4ec:	8f bd       	out	0x2f, r24	; 47
     4ee:	08 95       	ret
     4f0:	8f b5       	in	r24, 0x2f	; 47
     4f2:	8c 60       	ori	r24, 0x0C	; 12
     4f4:	8f bd       	out	0x2f, r24	; 47
     4f6:	08 95       	ret

000004f8 <TIMER_COUNTER1_compareA>:
     4f8:	9b bd       	out	0x2b, r25	; 43
     4fa:	8a bd       	out	0x2a, r24	; 42
     4fc:	08 95       	ret

000004fe <TIMER_COUNTER1_compareB>:
     4fe:	99 bd       	out	0x29, r25	; 41
     500:	88 bd       	out	0x28, r24	; 40
     502:	08 95       	ret

00000504 <TIMER_COUNTER1_compareC>:
     504:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     508:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     50c:	08 95       	ret

0000050e <TIMER_COUNTER1_stop>:
     50e:	8e b5       	in	r24, 0x2e	; 46
     510:	88 7f       	andi	r24, 0xF8	; 248
     512:	8e bd       	out	0x2e, r24	; 46
     514:	1d bc       	out	0x2d, r1	; 45
     516:	1c bc       	out	0x2c, r1	; 44
     518:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <timer1_state>
     51c:	08 95       	ret

0000051e <TIMER_COUNTER3_start>:
     51e:	20 91 14 02 	lds	r18, 0x0214	; 0x800214 <timer3_state>
     522:	21 11       	cpse	r18, r1
     524:	56 c0       	rjmp	.+172    	; 0x5d2 <TIMER_COUNTER3_start+0xb4>
     526:	2f ef       	ldi	r18, 0xFF	; 255
     528:	3f ef       	ldi	r19, 0xFF	; 255
     52a:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     52e:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     532:	ea e8       	ldi	r30, 0x8A	; 138
     534:	f0 e0       	ldi	r31, 0x00	; 0
     536:	20 81       	ld	r18, Z
     538:	28 7f       	andi	r18, 0xF8	; 248
     53a:	20 83       	st	Z, r18
     53c:	88 30       	cpi	r24, 0x08	; 8
     53e:	91 05       	cpc	r25, r1
     540:	e1 f0       	breq	.+56     	; 0x57a <TIMER_COUNTER3_start+0x5c>
     542:	48 f4       	brcc	.+18     	; 0x556 <TIMER_COUNTER3_start+0x38>
     544:	83 30       	cpi	r24, 0x03	; 3
     546:	91 05       	cpc	r25, r1
     548:	81 f1       	breq	.+96     	; 0x5aa <TIMER_COUNTER3_start+0x8c>
     54a:	85 30       	cpi	r24, 0x05	; 5
     54c:	91 05       	cpc	r25, r1
     54e:	99 f1       	breq	.+102    	; 0x5b6 <TIMER_COUNTER3_start+0x98>
     550:	01 97       	sbiw	r24, 0x01	; 1
     552:	b9 f5       	brne	.+110    	; 0x5c2 <TIMER_COUNTER3_start+0xa4>
     554:	0c c0       	rjmp	.+24     	; 0x56e <TIMER_COUNTER3_start+0x50>
     556:	81 15       	cp	r24, r1
     558:	21 e0       	ldi	r18, 0x01	; 1
     55a:	92 07       	cpc	r25, r18
     55c:	d1 f0       	breq	.+52     	; 0x592 <TIMER_COUNTER3_start+0x74>
     55e:	81 15       	cp	r24, r1
     560:	24 e0       	ldi	r18, 0x04	; 4
     562:	92 07       	cpc	r25, r18
     564:	e1 f0       	breq	.+56     	; 0x59e <TIMER_COUNTER3_start+0x80>
     566:	80 34       	cpi	r24, 0x40	; 64
     568:	91 05       	cpc	r25, r1
     56a:	59 f5       	brne	.+86     	; 0x5c2 <TIMER_COUNTER3_start+0xa4>
     56c:	0c c0       	rjmp	.+24     	; 0x586 <TIMER_COUNTER3_start+0x68>
     56e:	ea e8       	ldi	r30, 0x8A	; 138
     570:	f0 e0       	ldi	r31, 0x00	; 0
     572:	80 81       	ld	r24, Z
     574:	81 60       	ori	r24, 0x01	; 1
     576:	80 83       	st	Z, r24
     578:	29 c0       	rjmp	.+82     	; 0x5cc <TIMER_COUNTER3_start+0xae>
     57a:	ea e8       	ldi	r30, 0x8A	; 138
     57c:	f0 e0       	ldi	r31, 0x00	; 0
     57e:	80 81       	ld	r24, Z
     580:	82 60       	ori	r24, 0x02	; 2
     582:	80 83       	st	Z, r24
     584:	23 c0       	rjmp	.+70     	; 0x5cc <TIMER_COUNTER3_start+0xae>
     586:	ea e8       	ldi	r30, 0x8A	; 138
     588:	f0 e0       	ldi	r31, 0x00	; 0
     58a:	80 81       	ld	r24, Z
     58c:	83 60       	ori	r24, 0x03	; 3
     58e:	80 83       	st	Z, r24
     590:	1d c0       	rjmp	.+58     	; 0x5cc <TIMER_COUNTER3_start+0xae>
     592:	ea e8       	ldi	r30, 0x8A	; 138
     594:	f0 e0       	ldi	r31, 0x00	; 0
     596:	80 81       	ld	r24, Z
     598:	84 60       	ori	r24, 0x04	; 4
     59a:	80 83       	st	Z, r24
     59c:	17 c0       	rjmp	.+46     	; 0x5cc <TIMER_COUNTER3_start+0xae>
     59e:	ea e8       	ldi	r30, 0x8A	; 138
     5a0:	f0 e0       	ldi	r31, 0x00	; 0
     5a2:	80 81       	ld	r24, Z
     5a4:	85 60       	ori	r24, 0x05	; 5
     5a6:	80 83       	st	Z, r24
     5a8:	11 c0       	rjmp	.+34     	; 0x5cc <TIMER_COUNTER3_start+0xae>
     5aa:	ea e8       	ldi	r30, 0x8A	; 138
     5ac:	f0 e0       	ldi	r31, 0x00	; 0
     5ae:	80 81       	ld	r24, Z
     5b0:	86 60       	ori	r24, 0x06	; 6
     5b2:	80 83       	st	Z, r24
     5b4:	0b c0       	rjmp	.+22     	; 0x5cc <TIMER_COUNTER3_start+0xae>
     5b6:	ea e8       	ldi	r30, 0x8A	; 138
     5b8:	f0 e0       	ldi	r31, 0x00	; 0
     5ba:	80 81       	ld	r24, Z
     5bc:	87 60       	ori	r24, 0x07	; 7
     5be:	80 83       	st	Z, r24
     5c0:	05 c0       	rjmp	.+10     	; 0x5cc <TIMER_COUNTER3_start+0xae>
     5c2:	ea e8       	ldi	r30, 0x8A	; 138
     5c4:	f0 e0       	ldi	r31, 0x00	; 0
     5c6:	80 81       	ld	r24, Z
     5c8:	85 60       	ori	r24, 0x05	; 5
     5ca:	80 83       	st	Z, r24
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <timer3_state>
     5d2:	08 95       	ret

000005d4 <TIMER_COUNTER3_compoutmodeA>:
     5d4:	eb e8       	ldi	r30, 0x8B	; 139
     5d6:	f0 e0       	ldi	r31, 0x00	; 0
     5d8:	90 81       	ld	r25, Z
     5da:	9f 73       	andi	r25, 0x3F	; 63
     5dc:	90 83       	st	Z, r25
     5de:	82 30       	cpi	r24, 0x02	; 2
     5e0:	41 f0       	breq	.+16     	; 0x5f2 <TIMER_COUNTER3_compoutmodeA+0x1e>
     5e2:	83 30       	cpi	r24, 0x03	; 3
     5e4:	61 f0       	breq	.+24     	; 0x5fe <TIMER_COUNTER3_compoutmodeA+0x2a>
     5e6:	81 30       	cpi	r24, 0x01	; 1
     5e8:	79 f4       	brne	.+30     	; 0x608 <TIMER_COUNTER3_compoutmodeA+0x34>
     5ea:	80 81       	ld	r24, Z
     5ec:	80 64       	ori	r24, 0x40	; 64
     5ee:	80 83       	st	Z, r24
     5f0:	08 95       	ret
     5f2:	eb e8       	ldi	r30, 0x8B	; 139
     5f4:	f0 e0       	ldi	r31, 0x00	; 0
     5f6:	80 81       	ld	r24, Z
     5f8:	80 68       	ori	r24, 0x80	; 128
     5fa:	80 83       	st	Z, r24
     5fc:	08 95       	ret
     5fe:	eb e8       	ldi	r30, 0x8B	; 139
     600:	f0 e0       	ldi	r31, 0x00	; 0
     602:	80 81       	ld	r24, Z
     604:	80 6c       	ori	r24, 0xC0	; 192
     606:	80 83       	st	Z, r24
     608:	08 95       	ret

0000060a <TIMER_COUNTER3_compoutmodeB>:
     60a:	eb e8       	ldi	r30, 0x8B	; 139
     60c:	f0 e0       	ldi	r31, 0x00	; 0
     60e:	90 81       	ld	r25, Z
     610:	9f 7c       	andi	r25, 0xCF	; 207
     612:	90 83       	st	Z, r25
     614:	82 30       	cpi	r24, 0x02	; 2
     616:	41 f0       	breq	.+16     	; 0x628 <TIMER_COUNTER3_compoutmodeB+0x1e>
     618:	83 30       	cpi	r24, 0x03	; 3
     61a:	61 f0       	breq	.+24     	; 0x634 <TIMER_COUNTER3_compoutmodeB+0x2a>
     61c:	81 30       	cpi	r24, 0x01	; 1
     61e:	79 f4       	brne	.+30     	; 0x63e <TIMER_COUNTER3_compoutmodeB+0x34>
     620:	80 81       	ld	r24, Z
     622:	80 61       	ori	r24, 0x10	; 16
     624:	80 83       	st	Z, r24
     626:	08 95       	ret
     628:	eb e8       	ldi	r30, 0x8B	; 139
     62a:	f0 e0       	ldi	r31, 0x00	; 0
     62c:	80 81       	ld	r24, Z
     62e:	80 62       	ori	r24, 0x20	; 32
     630:	80 83       	st	Z, r24
     632:	08 95       	ret
     634:	eb e8       	ldi	r30, 0x8B	; 139
     636:	f0 e0       	ldi	r31, 0x00	; 0
     638:	80 81       	ld	r24, Z
     63a:	80 63       	ori	r24, 0x30	; 48
     63c:	80 83       	st	Z, r24
     63e:	08 95       	ret

00000640 <TIMER_COUNTER3_compoutmodeC>:
     640:	eb e8       	ldi	r30, 0x8B	; 139
     642:	f0 e0       	ldi	r31, 0x00	; 0
     644:	90 81       	ld	r25, Z
     646:	93 7f       	andi	r25, 0xF3	; 243
     648:	90 83       	st	Z, r25
     64a:	82 30       	cpi	r24, 0x02	; 2
     64c:	41 f0       	breq	.+16     	; 0x65e <TIMER_COUNTER3_compoutmodeC+0x1e>
     64e:	83 30       	cpi	r24, 0x03	; 3
     650:	61 f0       	breq	.+24     	; 0x66a <TIMER_COUNTER3_compoutmodeC+0x2a>
     652:	81 30       	cpi	r24, 0x01	; 1
     654:	79 f4       	brne	.+30     	; 0x674 <TIMER_COUNTER3_compoutmodeC+0x34>
     656:	80 81       	ld	r24, Z
     658:	84 60       	ori	r24, 0x04	; 4
     65a:	80 83       	st	Z, r24
     65c:	08 95       	ret
     65e:	eb e8       	ldi	r30, 0x8B	; 139
     660:	f0 e0       	ldi	r31, 0x00	; 0
     662:	80 81       	ld	r24, Z
     664:	88 60       	ori	r24, 0x08	; 8
     666:	80 83       	st	Z, r24
     668:	08 95       	ret
     66a:	eb e8       	ldi	r30, 0x8B	; 139
     66c:	f0 e0       	ldi	r31, 0x00	; 0
     66e:	80 81       	ld	r24, Z
     670:	8c 60       	ori	r24, 0x0C	; 12
     672:	80 83       	st	Z, r24
     674:	08 95       	ret

00000676 <TIMER_COUNTER3_compareA>:
     676:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     67a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     67e:	08 95       	ret

00000680 <TIMER_COUNTER3_compareB>:
     680:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     684:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     688:	08 95       	ret

0000068a <TIMER_COUNTER3_compareC>:
     68a:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     68e:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     692:	08 95       	ret

00000694 <TIMER_COUNTER3_stop>:
     694:	ea e8       	ldi	r30, 0x8A	; 138
     696:	f0 e0       	ldi	r31, 0x00	; 0
     698:	80 81       	ld	r24, Z
     69a:	88 7f       	andi	r24, 0xF8	; 248
     69c:	80 83       	st	Z, r24
     69e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     6a2:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     6a6:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <timer3_state>
     6aa:	08 95       	ret

000006ac <uart1_getc>:
     6ac:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <UART1_RxHead>
     6b0:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <UART1_RxTail>
     6b4:	98 17       	cp	r25, r24
     6b6:	a1 f0       	breq	.+40     	; 0x6e0 <uart1_getc+0x34>
     6b8:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <UART1_RxTail>
     6bc:	8f 5f       	subi	r24, 0xFF	; 255
     6be:	8f 71       	andi	r24, 0x1F	; 31
     6c0:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <UART1_RxTail>
     6c4:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <UART1_RxTail>
     6c8:	f0 e0       	ldi	r31, 0x00	; 0
     6ca:	ed 5b       	subi	r30, 0xBD	; 189
     6cc:	fe 4f       	sbci	r31, 0xFE	; 254
     6ce:	20 81       	ld	r18, Z
     6d0:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	98 2f       	mov	r25, r24
     6d8:	88 27       	eor	r24, r24
     6da:	82 0f       	add	r24, r18
     6dc:	91 1d       	adc	r25, r1
     6de:	08 95       	ret
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	91 e0       	ldi	r25, 0x01	; 1
     6e4:	08 95       	ret

000006e6 <uart1_available>:
     6e6:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <UART1_RxHead>
     6ea:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <UART1_RxTail>
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	4f 96       	adiw	r24, 0x1f	; 31
     6f2:	82 1b       	sub	r24, r18
     6f4:	91 09       	sbc	r25, r1
     6f6:	6f e1       	ldi	r22, 0x1F	; 31
     6f8:	70 e0       	ldi	r23, 0x00	; 0
     6fa:	0c 94 39 18 	jmp	0x3072	; 0x3072 <__divmodhi4>
     6fe:	08 95       	ret

00000700 <uart1_flush>:
     700:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <UART1_RxTail>
     704:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <UART1_RxHead>
     708:	08 95       	ret

0000070a <ANALOGenable>:
     70a:	0f 93       	push	r16
     70c:	1f 93       	push	r17
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
     712:	cd b7       	in	r28, 0x3d	; 61
     714:	de b7       	in	r29, 0x3e	; 62
     716:	9f 81       	ldd	r25, Y+7	; 0x07
     718:	68 85       	ldd	r22, Y+8	; 0x08
     71a:	49 85       	ldd	r20, Y+9	; 0x09
     71c:	5a 85       	ldd	r21, Y+10	; 0x0a
     71e:	1f b7       	in	r17, 0x3f	; 63
     720:	8f b7       	in	r24, 0x3f	; 63
     722:	8f 77       	andi	r24, 0x7F	; 127
     724:	8f bf       	out	0x3f, r24	; 63
     726:	50 93 d0 01 	sts	0x01D0, r21	; 0x8001d0 <ADC_N_CHANNEL+0x1>
     72a:	40 93 cf 01 	sts	0x01CF, r20	; 0x8001cf <ADC_N_CHANNEL>
     72e:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <ADC_SELECTOR+0x1>
     732:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <ADC_SELECTOR>
     736:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <adc_n_sample>
     73a:	87 b1       	in	r24, 0x07	; 7
     73c:	8f 73       	andi	r24, 0x3F	; 63
     73e:	87 b9       	out	0x07, r24	; 7
     740:	91 30       	cpi	r25, 0x01	; 1
     742:	19 f0       	breq	.+6      	; 0x74a <ANALOGenable+0x40>
     744:	93 30       	cpi	r25, 0x03	; 3
     746:	21 f0       	breq	.+8      	; 0x750 <ANALOGenable+0x46>
     748:	08 c0       	rjmp	.+16     	; 0x75a <ANALOGenable+0x50>
     74a:	3e 9a       	sbi	0x07, 6	; 7
     74c:	01 e0       	ldi	r16, 0x01	; 1
     74e:	06 c0       	rjmp	.+12     	; 0x75c <ANALOGenable+0x52>
     750:	87 b1       	in	r24, 0x07	; 7
     752:	80 6c       	ori	r24, 0xC0	; 192
     754:	87 b9       	out	0x07, r24	; 7
     756:	03 e0       	ldi	r16, 0x03	; 3
     758:	01 c0       	rjmp	.+2      	; 0x75c <ANALOGenable+0x52>
     75a:	00 e0       	ldi	r16, 0x00	; 0
     75c:	3d 98       	cbi	0x07, 5	; 7
     75e:	14 16       	cp	r1, r20
     760:	15 06       	cpc	r1, r21
     762:	8c f4       	brge	.+34     	; 0x786 <ANALOGenable+0x7c>
     764:	de 01       	movw	r26, r28
     766:	1b 96       	adiw	r26, 0x0b	; 11
     768:	80 e0       	ldi	r24, 0x00	; 0
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	2d 91       	ld	r18, X+
     76e:	3d 91       	ld	r19, X+
     770:	fc 01       	movw	r30, r24
     772:	ee 0f       	add	r30, r30
     774:	ff 1f       	adc	r31, r31
     776:	ef 52       	subi	r30, 0x2F	; 47
     778:	fe 4f       	sbci	r31, 0xFE	; 254
     77a:	31 83       	std	Z+1, r19	; 0x01
     77c:	20 83       	st	Z, r18
     77e:	01 96       	adiw	r24, 0x01	; 1
     780:	48 17       	cp	r20, r24
     782:	59 07       	cpc	r21, r25
     784:	99 f7       	brne	.-26     	; 0x76c <ANALOGenable+0x62>
     786:	87 b1       	in	r24, 0x07	; 7
     788:	80 7e       	andi	r24, 0xE0	; 224
     78a:	87 b9       	out	0x07, r24	; 7
     78c:	e0 91 cd 01 	lds	r30, 0x01CD	; 0x8001cd <ADC_SELECTOR>
     790:	f0 91 ce 01 	lds	r31, 0x01CE	; 0x8001ce <ADC_SELECTOR+0x1>
     794:	ee 0f       	add	r30, r30
     796:	ff 1f       	adc	r31, r31
     798:	ef 52       	subi	r30, 0x2F	; 47
     79a:	fe 4f       	sbci	r31, 0xFE	; 254
     79c:	80 81       	ld	r24, Z
     79e:	91 81       	ldd	r25, Z+1	; 0x01
     7a0:	27 b1       	in	r18, 0x07	; 7
     7a2:	8f 71       	andi	r24, 0x1F	; 31
     7a4:	99 27       	eor	r25, r25
     7a6:	82 2b       	or	r24, r18
     7a8:	87 b9       	out	0x07, r24	; 7
     7aa:	37 9a       	sbi	0x06, 7	; 6
     7ac:	36 9a       	sbi	0x06, 6	; 6
     7ae:	35 98       	cbi	0x06, 5	; 6
     7b0:	33 9a       	sbi	0x06, 3	; 6
     7b2:	86 b1       	in	r24, 0x06	; 6
     7b4:	88 7f       	andi	r24, 0xF8	; 248
     7b6:	86 b9       	out	0x06, r24	; 6
     7b8:	60 31       	cpi	r22, 0x10	; 16
     7ba:	d1 f0       	breq	.+52     	; 0x7f0 <ANALOGenable+0xe6>
     7bc:	38 f4       	brcc	.+14     	; 0x7cc <ANALOGenable+0xc2>
     7be:	64 30       	cpi	r22, 0x04	; 4
     7c0:	79 f0       	breq	.+30     	; 0x7e0 <ANALOGenable+0xd6>
     7c2:	68 30       	cpi	r22, 0x08	; 8
     7c4:	81 f0       	breq	.+32     	; 0x7e6 <ANALOGenable+0xdc>
     7c6:	62 30       	cpi	r22, 0x02	; 2
     7c8:	29 f5       	brne	.+74     	; 0x814 <ANALOGenable+0x10a>
     7ca:	07 c0       	rjmp	.+14     	; 0x7da <ANALOGenable+0xd0>
     7cc:	60 34       	cpi	r22, 0x40	; 64
     7ce:	c1 f0       	breq	.+48     	; 0x800 <ANALOGenable+0xf6>
     7d0:	60 38       	cpi	r22, 0x80	; 128
     7d2:	d9 f0       	breq	.+54     	; 0x80a <ANALOGenable+0x100>
     7d4:	60 32       	cpi	r22, 0x20	; 32
     7d6:	f1 f4       	brne	.+60     	; 0x814 <ANALOGenable+0x10a>
     7d8:	0e c0       	rjmp	.+28     	; 0x7f6 <ANALOGenable+0xec>
     7da:	30 9a       	sbi	0x06, 0	; 6
     7dc:	22 e0       	ldi	r18, 0x02	; 2
     7de:	1e c0       	rjmp	.+60     	; 0x81c <ANALOGenable+0x112>
     7e0:	31 9a       	sbi	0x06, 1	; 6
     7e2:	24 e0       	ldi	r18, 0x04	; 4
     7e4:	1b c0       	rjmp	.+54     	; 0x81c <ANALOGenable+0x112>
     7e6:	86 b1       	in	r24, 0x06	; 6
     7e8:	83 60       	ori	r24, 0x03	; 3
     7ea:	86 b9       	out	0x06, r24	; 6
     7ec:	28 e0       	ldi	r18, 0x08	; 8
     7ee:	16 c0       	rjmp	.+44     	; 0x81c <ANALOGenable+0x112>
     7f0:	32 9a       	sbi	0x06, 2	; 6
     7f2:	20 e1       	ldi	r18, 0x10	; 16
     7f4:	13 c0       	rjmp	.+38     	; 0x81c <ANALOGenable+0x112>
     7f6:	86 b1       	in	r24, 0x06	; 6
     7f8:	85 60       	ori	r24, 0x05	; 5
     7fa:	86 b9       	out	0x06, r24	; 6
     7fc:	20 e2       	ldi	r18, 0x20	; 32
     7fe:	0e c0       	rjmp	.+28     	; 0x81c <ANALOGenable+0x112>
     800:	86 b1       	in	r24, 0x06	; 6
     802:	86 60       	ori	r24, 0x06	; 6
     804:	86 b9       	out	0x06, r24	; 6
     806:	20 e4       	ldi	r18, 0x40	; 64
     808:	09 c0       	rjmp	.+18     	; 0x81c <ANALOGenable+0x112>
     80a:	86 b1       	in	r24, 0x06	; 6
     80c:	87 60       	ori	r24, 0x07	; 7
     80e:	86 b9       	out	0x06, r24	; 6
     810:	20 e8       	ldi	r18, 0x80	; 128
     812:	04 c0       	rjmp	.+8      	; 0x81c <ANALOGenable+0x112>
     814:	86 b1       	in	r24, 0x06	; 6
     816:	87 60       	ori	r24, 0x07	; 7
     818:	86 b9       	out	0x06, r24	; 6
     81a:	20 e8       	ldi	r18, 0x80	; 128
     81c:	1f bf       	out	0x3f, r17	; 63
     81e:	8f b7       	in	r24, 0x3f	; 63
     820:	80 68       	ori	r24, 0x80	; 128
     822:	8f bf       	out	0x3f, r24	; 63
     824:	60 2f       	mov	r22, r16
     826:	72 2f       	mov	r23, r18
     828:	8c ea       	ldi	r24, 0xAC	; 172
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	df 91       	pop	r29
     82e:	cf 91       	pop	r28
     830:	1f 91       	pop	r17
     832:	0f 91       	pop	r16
     834:	08 95       	ret

00000836 <__vector_21>:
     836:	1f 92       	push	r1
     838:	0f 92       	push	r0
     83a:	0f b6       	in	r0, 0x3f	; 63
     83c:	0f 92       	push	r0
     83e:	11 24       	eor	r1, r1
     840:	0b b6       	in	r0, 0x3b	; 59
     842:	0f 92       	push	r0
     844:	2f 93       	push	r18
     846:	3f 93       	push	r19
     848:	8f 93       	push	r24
     84a:	9f 93       	push	r25
     84c:	ef 93       	push	r30
     84e:	ff 93       	push	r31
     850:	84 b1       	in	r24, 0x04	; 4
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <adc_tmp+0x1>
     858:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <adc_tmp>
     85c:	25 b1       	in	r18, 0x05	; 5
     85e:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <adc_tmp>
     862:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <adc_tmp+0x1>
     866:	92 2b       	or	r25, r18
     868:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <adc_tmp+0x1>
     86c:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <adc_tmp>
     870:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <adc_n_sample>
     874:	84 30       	cpi	r24, 0x04	; 4
     876:	a0 f4       	brcc	.+40     	; 0x8a0 <__vector_21+0x6a>
     878:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <adc_n_sample>
     87c:	8f 5f       	subi	r24, 0xFF	; 255
     87e:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <adc_n_sample>
     882:	20 91 c9 01 	lds	r18, 0x01C9	; 0x8001c9 <adc_tmp>
     886:	30 91 ca 01 	lds	r19, 0x01CA	; 0x8001ca <adc_tmp+0x1>
     88a:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <adc_sample>
     88e:	90 91 cc 01 	lds	r25, 0x01CC	; 0x8001cc <adc_sample+0x1>
     892:	82 0f       	add	r24, r18
     894:	93 1f       	adc	r25, r19
     896:	90 93 cc 01 	sts	0x01CC, r25	; 0x8001cc <adc_sample+0x1>
     89a:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <adc_sample>
     89e:	43 c0       	rjmp	.+134    	; 0x926 <__vector_21+0xf0>
     8a0:	e0 91 cd 01 	lds	r30, 0x01CD	; 0x8001cd <ADC_SELECTOR>
     8a4:	f0 91 ce 01 	lds	r31, 0x01CE	; 0x8001ce <ADC_SELECTOR+0x1>
     8a8:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <adc_sample>
     8ac:	90 91 cc 01 	lds	r25, 0x01CC	; 0x8001cc <adc_sample+0x1>
     8b0:	95 95       	asr	r25
     8b2:	87 95       	ror	r24
     8b4:	95 95       	asr	r25
     8b6:	87 95       	ror	r24
     8b8:	ee 0f       	add	r30, r30
     8ba:	ff 1f       	adc	r31, r31
     8bc:	ef 51       	subi	r30, 0x1F	; 31
     8be:	fe 4f       	sbci	r31, 0xFE	; 254
     8c0:	91 83       	std	Z+1, r25	; 0x01
     8c2:	80 83       	st	Z, r24
     8c4:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <adc_sample+0x1>
     8c8:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <adc_sample>
     8cc:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <adc_n_sample>
     8d0:	20 91 cd 01 	lds	r18, 0x01CD	; 0x8001cd <ADC_SELECTOR>
     8d4:	30 91 ce 01 	lds	r19, 0x01CE	; 0x8001ce <ADC_SELECTOR+0x1>
     8d8:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <ADC_N_CHANNEL>
     8dc:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <ADC_N_CHANNEL+0x1>
     8e0:	28 17       	cp	r18, r24
     8e2:	39 07       	cpc	r19, r25
     8e4:	54 f4       	brge	.+20     	; 0x8fa <__vector_21+0xc4>
     8e6:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <ADC_SELECTOR>
     8ea:	90 91 ce 01 	lds	r25, 0x01CE	; 0x8001ce <ADC_SELECTOR+0x1>
     8ee:	01 96       	adiw	r24, 0x01	; 1
     8f0:	90 93 ce 01 	sts	0x01CE, r25	; 0x8001ce <ADC_SELECTOR+0x1>
     8f4:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <ADC_SELECTOR>
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__vector_21+0xcc>
     8fa:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <ADC_SELECTOR+0x1>
     8fe:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <ADC_SELECTOR>
     902:	87 b1       	in	r24, 0x07	; 7
     904:	80 7e       	andi	r24, 0xE0	; 224
     906:	87 b9       	out	0x07, r24	; 7
     908:	e0 91 cd 01 	lds	r30, 0x01CD	; 0x8001cd <ADC_SELECTOR>
     90c:	f0 91 ce 01 	lds	r31, 0x01CE	; 0x8001ce <ADC_SELECTOR+0x1>
     910:	ee 0f       	add	r30, r30
     912:	ff 1f       	adc	r31, r31
     914:	ef 52       	subi	r30, 0x2F	; 47
     916:	fe 4f       	sbci	r31, 0xFE	; 254
     918:	80 81       	ld	r24, Z
     91a:	91 81       	ldd	r25, Z+1	; 0x01
     91c:	27 b1       	in	r18, 0x07	; 7
     91e:	8f 71       	andi	r24, 0x1F	; 31
     920:	99 27       	eor	r25, r25
     922:	82 2b       	or	r24, r18
     924:	87 b9       	out	0x07, r24	; 7
     926:	ff 91       	pop	r31
     928:	ef 91       	pop	r30
     92a:	9f 91       	pop	r25
     92c:	8f 91       	pop	r24
     92e:	3f 91       	pop	r19
     930:	2f 91       	pop	r18
     932:	0f 90       	pop	r0
     934:	0b be       	out	0x3b, r0	; 59
     936:	0f 90       	pop	r0
     938:	0f be       	out	0x3f, r0	; 63
     93a:	0f 90       	pop	r0
     93c:	1f 90       	pop	r1
     93e:	18 95       	reti

00000940 <INTERRUPTenable>:
     940:	cf 93       	push	r28
     942:	df 93       	push	r29
     944:	00 d0       	rcall	.+0      	; 0x946 <INTERRUPTenable+0x6>
     946:	00 d0       	rcall	.+0      	; 0x948 <INTERRUPTenable+0x8>
     948:	00 d0       	rcall	.+0      	; 0x94a <INTERRUPTenable+0xa>
     94a:	cd b7       	in	r28, 0x3d	; 61
     94c:	de b7       	in	r29, 0x3e	; 62
     94e:	19 be       	out	0x39, r1	; 57
     950:	23 ee       	ldi	r18, 0xE3	; 227
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	3a 83       	std	Y+2, r19	; 0x02
     956:	29 83       	std	Y+1, r18	; 0x01
     958:	4b ec       	ldi	r20, 0xCB	; 203
     95a:	51 e0       	ldi	r21, 0x01	; 1
     95c:	5c 83       	std	Y+4, r21	; 0x04
     95e:	4b 83       	std	Y+3, r20	; 0x03
     960:	66 eb       	ldi	r22, 0xB6	; 182
     962:	70 e0       	ldi	r23, 0x00	; 0
     964:	7e 83       	std	Y+6, r23	; 0x06
     966:	6d 83       	std	Y+5, r22	; 0x05
     968:	3a 81       	ldd	r19, Y+2	; 0x02
     96a:	5c 81       	ldd	r21, Y+4	; 0x04
     96c:	7e 81       	ldd	r23, Y+6	; 0x06
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	26 96       	adiw	r28, 0x06	; 6
     974:	0f b6       	in	r0, 0x3f	; 63
     976:	f8 94       	cli
     978:	de bf       	out	0x3e, r29	; 62
     97a:	0f be       	out	0x3f, r0	; 63
     97c:	cd bf       	out	0x3d, r28	; 61
     97e:	df 91       	pop	r29
     980:	cf 91       	pop	r28
     982:	08 95       	ret

00000984 <TIMER_COUNTER1enable>:
     984:	0f 93       	push	r16
     986:	1f 93       	push	r17
     988:	dc 01       	movw	r26, r24
     98a:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <timer1_state>
     98e:	8f b5       	in	r24, 0x2f	; 47
     990:	8c 7f       	andi	r24, 0xFC	; 252
     992:	8f bd       	out	0x2f, r24	; 47
     994:	8e b5       	in	r24, 0x2e	; 46
     996:	87 7e       	andi	r24, 0xE7	; 231
     998:	8e bd       	out	0x2e, r24	; 46
     99a:	06 2f       	mov	r16, r22
     99c:	10 e0       	ldi	r17, 0x00	; 0
     99e:	f8 01       	movw	r30, r16
     9a0:	31 97       	sbiw	r30, 0x01	; 1
     9a2:	ef 30       	cpi	r30, 0x0F	; 15
     9a4:	f1 05       	cpc	r31, r1
     9a6:	08 f0       	brcs	.+2      	; 0x9aa <TIMER_COUNTER1enable+0x26>
     9a8:	5a c0       	rjmp	.+180    	; 0xa5e <TIMER_COUNTER1enable+0xda>
     9aa:	ea 5a       	subi	r30, 0xAA	; 170
     9ac:	ff 4f       	sbci	r31, 0xFF	; 255
     9ae:	0c 94 8a 18 	jmp	0x3114	; 0x3114 <__tablejump2__>
     9b2:	8f b5       	in	r24, 0x2f	; 47
     9b4:	81 60       	ori	r24, 0x01	; 1
     9b6:	8f bd       	out	0x2f, r24	; 47
     9b8:	52 c0       	rjmp	.+164    	; 0xa5e <TIMER_COUNTER1enable+0xda>
     9ba:	8f b5       	in	r24, 0x2f	; 47
     9bc:	82 60       	ori	r24, 0x02	; 2
     9be:	8f bd       	out	0x2f, r24	; 47
     9c0:	4e c0       	rjmp	.+156    	; 0xa5e <TIMER_COUNTER1enable+0xda>
     9c2:	8f b5       	in	r24, 0x2f	; 47
     9c4:	83 60       	ori	r24, 0x03	; 3
     9c6:	8f bd       	out	0x2f, r24	; 47
     9c8:	4a c0       	rjmp	.+148    	; 0xa5e <TIMER_COUNTER1enable+0xda>
     9ca:	8e b5       	in	r24, 0x2e	; 46
     9cc:	88 60       	ori	r24, 0x08	; 8
     9ce:	8e bd       	out	0x2e, r24	; 46
     9d0:	46 c0       	rjmp	.+140    	; 0xa5e <TIMER_COUNTER1enable+0xda>
     9d2:	8f b5       	in	r24, 0x2f	; 47
     9d4:	81 60       	ori	r24, 0x01	; 1
     9d6:	8f bd       	out	0x2f, r24	; 47
     9d8:	8e b5       	in	r24, 0x2e	; 46
     9da:	88 60       	ori	r24, 0x08	; 8
     9dc:	8e bd       	out	0x2e, r24	; 46
     9de:	3f c0       	rjmp	.+126    	; 0xa5e <TIMER_COUNTER1enable+0xda>
     9e0:	8f b5       	in	r24, 0x2f	; 47
     9e2:	82 60       	ori	r24, 0x02	; 2
     9e4:	8f bd       	out	0x2f, r24	; 47
     9e6:	8e b5       	in	r24, 0x2e	; 46
     9e8:	88 60       	ori	r24, 0x08	; 8
     9ea:	8e bd       	out	0x2e, r24	; 46
     9ec:	38 c0       	rjmp	.+112    	; 0xa5e <TIMER_COUNTER1enable+0xda>
     9ee:	8f b5       	in	r24, 0x2f	; 47
     9f0:	83 60       	ori	r24, 0x03	; 3
     9f2:	8f bd       	out	0x2f, r24	; 47
     9f4:	8e b5       	in	r24, 0x2e	; 46
     9f6:	88 60       	ori	r24, 0x08	; 8
     9f8:	8e bd       	out	0x2e, r24	; 46
     9fa:	31 c0       	rjmp	.+98     	; 0xa5e <TIMER_COUNTER1enable+0xda>
     9fc:	8e b5       	in	r24, 0x2e	; 46
     9fe:	80 61       	ori	r24, 0x10	; 16
     a00:	8e bd       	out	0x2e, r24	; 46
     a02:	2d c0       	rjmp	.+90     	; 0xa5e <TIMER_COUNTER1enable+0xda>
     a04:	8f b5       	in	r24, 0x2f	; 47
     a06:	81 60       	ori	r24, 0x01	; 1
     a08:	8f bd       	out	0x2f, r24	; 47
     a0a:	8e b5       	in	r24, 0x2e	; 46
     a0c:	80 61       	ori	r24, 0x10	; 16
     a0e:	8e bd       	out	0x2e, r24	; 46
     a10:	26 c0       	rjmp	.+76     	; 0xa5e <TIMER_COUNTER1enable+0xda>
     a12:	8f b5       	in	r24, 0x2f	; 47
     a14:	82 60       	ori	r24, 0x02	; 2
     a16:	8f bd       	out	0x2f, r24	; 47
     a18:	8e b5       	in	r24, 0x2e	; 46
     a1a:	80 61       	ori	r24, 0x10	; 16
     a1c:	8e bd       	out	0x2e, r24	; 46
     a1e:	1f c0       	rjmp	.+62     	; 0xa5e <TIMER_COUNTER1enable+0xda>
     a20:	8f b5       	in	r24, 0x2f	; 47
     a22:	83 60       	ori	r24, 0x03	; 3
     a24:	8f bd       	out	0x2f, r24	; 47
     a26:	8e b5       	in	r24, 0x2e	; 46
     a28:	80 61       	ori	r24, 0x10	; 16
     a2a:	8e bd       	out	0x2e, r24	; 46
     a2c:	18 c0       	rjmp	.+48     	; 0xa5e <TIMER_COUNTER1enable+0xda>
     a2e:	8e b5       	in	r24, 0x2e	; 46
     a30:	88 61       	ori	r24, 0x18	; 24
     a32:	8e bd       	out	0x2e, r24	; 46
     a34:	14 c0       	rjmp	.+40     	; 0xa5e <TIMER_COUNTER1enable+0xda>
     a36:	8f b5       	in	r24, 0x2f	; 47
     a38:	81 60       	ori	r24, 0x01	; 1
     a3a:	8f bd       	out	0x2f, r24	; 47
     a3c:	8e b5       	in	r24, 0x2e	; 46
     a3e:	88 61       	ori	r24, 0x18	; 24
     a40:	8e bd       	out	0x2e, r24	; 46
     a42:	0d c0       	rjmp	.+26     	; 0xa5e <TIMER_COUNTER1enable+0xda>
     a44:	8f b5       	in	r24, 0x2f	; 47
     a46:	82 60       	ori	r24, 0x02	; 2
     a48:	8f bd       	out	0x2f, r24	; 47
     a4a:	8e b5       	in	r24, 0x2e	; 46
     a4c:	88 61       	ori	r24, 0x18	; 24
     a4e:	8e bd       	out	0x2e, r24	; 46
     a50:	06 c0       	rjmp	.+12     	; 0xa5e <TIMER_COUNTER1enable+0xda>
     a52:	8f b5       	in	r24, 0x2f	; 47
     a54:	83 60       	ori	r24, 0x03	; 3
     a56:	8f bd       	out	0x2f, r24	; 47
     a58:	8e b5       	in	r24, 0x2e	; 46
     a5a:	88 61       	ori	r24, 0x18	; 24
     a5c:	8e bd       	out	0x2e, r24	; 46
     a5e:	8f b5       	in	r24, 0x2f	; 47
     a60:	83 70       	andi	r24, 0x03	; 3
     a62:	8f bd       	out	0x2f, r24	; 47
     a64:	87 b7       	in	r24, 0x37	; 55
     a66:	83 7c       	andi	r24, 0xC3	; 195
     a68:	87 bf       	out	0x37, r24	; 55
     a6a:	ed e7       	ldi	r30, 0x7D	; 125
     a6c:	f0 e0       	ldi	r31, 0x00	; 0
     a6e:	80 81       	ld	r24, Z
     a70:	8e 7f       	andi	r24, 0xFE	; 254
     a72:	80 83       	st	Z, r24
     a74:	50 e0       	ldi	r21, 0x00	; 0
     a76:	fa 01       	movw	r30, r20
     a78:	31 97       	sbiw	r30, 0x01	; 1
     a7a:	ec 30       	cpi	r30, 0x0C	; 12
     a7c:	f1 05       	cpc	r31, r1
     a7e:	08 f0       	brcs	.+2      	; 0xa82 <TIMER_COUNTER1enable+0xfe>
     a80:	44 c0       	rjmp	.+136    	; 0xb0a <TIMER_COUNTER1enable+0x186>
     a82:	eb 59       	subi	r30, 0x9B	; 155
     a84:	ff 4f       	sbci	r31, 0xFF	; 255
     a86:	0c 94 8a 18 	jmp	0x3114	; 0x3114 <__tablejump2__>
     a8a:	87 b7       	in	r24, 0x37	; 55
     a8c:	84 60       	ori	r24, 0x04	; 4
     a8e:	87 bf       	out	0x37, r24	; 55
     a90:	3c c0       	rjmp	.+120    	; 0xb0a <TIMER_COUNTER1enable+0x186>
     a92:	87 b7       	in	r24, 0x37	; 55
     a94:	80 61       	ori	r24, 0x10	; 16
     a96:	87 bf       	out	0x37, r24	; 55
     a98:	38 c0       	rjmp	.+112    	; 0xb0a <TIMER_COUNTER1enable+0x186>
     a9a:	87 b7       	in	r24, 0x37	; 55
     a9c:	88 60       	ori	r24, 0x08	; 8
     a9e:	87 bf       	out	0x37, r24	; 55
     aa0:	34 c0       	rjmp	.+104    	; 0xb0a <TIMER_COUNTER1enable+0x186>
     aa2:	ed e7       	ldi	r30, 0x7D	; 125
     aa4:	f0 e0       	ldi	r31, 0x00	; 0
     aa6:	80 81       	ld	r24, Z
     aa8:	81 60       	ori	r24, 0x01	; 1
     aaa:	80 83       	st	Z, r24
     aac:	2e c0       	rjmp	.+92     	; 0xb0a <TIMER_COUNTER1enable+0x186>
     aae:	87 b7       	in	r24, 0x37	; 55
     ab0:	80 62       	ori	r24, 0x20	; 32
     ab2:	87 bf       	out	0x37, r24	; 55
     ab4:	2a c0       	rjmp	.+84     	; 0xb0a <TIMER_COUNTER1enable+0x186>
     ab6:	87 b7       	in	r24, 0x37	; 55
     ab8:	84 61       	ori	r24, 0x14	; 20
     aba:	87 bf       	out	0x37, r24	; 55
     abc:	26 c0       	rjmp	.+76     	; 0xb0a <TIMER_COUNTER1enable+0x186>
     abe:	87 b7       	in	r24, 0x37	; 55
     ac0:	8c 60       	ori	r24, 0x0C	; 12
     ac2:	87 bf       	out	0x37, r24	; 55
     ac4:	22 c0       	rjmp	.+68     	; 0xb0a <TIMER_COUNTER1enable+0x186>
     ac6:	87 b7       	in	r24, 0x37	; 55
     ac8:	84 60       	ori	r24, 0x04	; 4
     aca:	87 bf       	out	0x37, r24	; 55
     acc:	ed e7       	ldi	r30, 0x7D	; 125
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	80 81       	ld	r24, Z
     ad2:	81 60       	ori	r24, 0x01	; 1
     ad4:	80 83       	st	Z, r24
     ad6:	19 c0       	rjmp	.+50     	; 0xb0a <TIMER_COUNTER1enable+0x186>
     ad8:	87 b7       	in	r24, 0x37	; 55
     ada:	84 62       	ori	r24, 0x24	; 36
     adc:	87 bf       	out	0x37, r24	; 55
     ade:	15 c0       	rjmp	.+42     	; 0xb0a <TIMER_COUNTER1enable+0x186>
     ae0:	87 b7       	in	r24, 0x37	; 55
     ae2:	8c 61       	ori	r24, 0x1C	; 28
     ae4:	87 bf       	out	0x37, r24	; 55
     ae6:	11 c0       	rjmp	.+34     	; 0xb0a <TIMER_COUNTER1enable+0x186>
     ae8:	87 b7       	in	r24, 0x37	; 55
     aea:	8c 61       	ori	r24, 0x1C	; 28
     aec:	87 bf       	out	0x37, r24	; 55
     aee:	ed e7       	ldi	r30, 0x7D	; 125
     af0:	f0 e0       	ldi	r31, 0x00	; 0
     af2:	80 81       	ld	r24, Z
     af4:	81 60       	ori	r24, 0x01	; 1
     af6:	80 83       	st	Z, r24
     af8:	08 c0       	rjmp	.+16     	; 0xb0a <TIMER_COUNTER1enable+0x186>
     afa:	87 b7       	in	r24, 0x37	; 55
     afc:	88 61       	ori	r24, 0x18	; 24
     afe:	87 bf       	out	0x37, r24	; 55
     b00:	ed e7       	ldi	r30, 0x7D	; 125
     b02:	f0 e0       	ldi	r31, 0x00	; 0
     b04:	80 81       	ld	r24, Z
     b06:	81 60       	ori	r24, 0x01	; 1
     b08:	80 83       	st	Z, r24
     b0a:	8d e3       	ldi	r24, 0x3D	; 61
     b0c:	92 e0       	ldi	r25, 0x02	; 2
     b0e:	11 96       	adiw	r26, 0x01	; 1
     b10:	9c 93       	st	X, r25
     b12:	8e 93       	st	-X, r24
     b14:	82 e5       	ldi	r24, 0x52	; 82
     b16:	92 e0       	ldi	r25, 0x02	; 2
     b18:	13 96       	adiw	r26, 0x03	; 3
     b1a:	9c 93       	st	X, r25
     b1c:	8e 93       	st	-X, r24
     b1e:	12 97       	sbiw	r26, 0x02	; 2
     b20:	87 e6       	ldi	r24, 0x67	; 103
     b22:	92 e0       	ldi	r25, 0x02	; 2
     b24:	15 96       	adiw	r26, 0x05	; 5
     b26:	9c 93       	st	X, r25
     b28:	8e 93       	st	-X, r24
     b2a:	14 97       	sbiw	r26, 0x04	; 4
     b2c:	8c e7       	ldi	r24, 0x7C	; 124
     b2e:	92 e0       	ldi	r25, 0x02	; 2
     b30:	17 96       	adiw	r26, 0x07	; 7
     b32:	9c 93       	st	X, r25
     b34:	8e 93       	st	-X, r24
     b36:	16 97       	sbiw	r26, 0x06	; 6
     b38:	8f e7       	ldi	r24, 0x7F	; 127
     b3a:	92 e0       	ldi	r25, 0x02	; 2
     b3c:	19 96       	adiw	r26, 0x09	; 9
     b3e:	9c 93       	st	X, r25
     b40:	8e 93       	st	-X, r24
     b42:	18 97       	sbiw	r26, 0x08	; 8
     b44:	82 e8       	ldi	r24, 0x82	; 130
     b46:	92 e0       	ldi	r25, 0x02	; 2
     b48:	1b 96       	adiw	r26, 0x0b	; 11
     b4a:	9c 93       	st	X, r25
     b4c:	8e 93       	st	-X, r24
     b4e:	1a 97       	sbiw	r26, 0x0a	; 10
     b50:	86 ef       	ldi	r24, 0xF6	; 246
     b52:	91 e0       	ldi	r25, 0x01	; 1
     b54:	1d 96       	adiw	r26, 0x0d	; 13
     b56:	9c 93       	st	X, r25
     b58:	8e 93       	st	-X, r24
     b5a:	1c 97       	sbiw	r26, 0x0c	; 12
     b5c:	87 e8       	ldi	r24, 0x87	; 135
     b5e:	92 e0       	ldi	r25, 0x02	; 2
     b60:	1f 96       	adiw	r26, 0x0f	; 15
     b62:	9c 93       	st	X, r25
     b64:	8e 93       	st	-X, r24
     b66:	1e 97       	sbiw	r26, 0x0e	; 14
     b68:	cd 01       	movw	r24, r26
     b6a:	1f 91       	pop	r17
     b6c:	0f 91       	pop	r16
     b6e:	08 95       	ret

00000b70 <TIMER_COUNTER3enable>:
     b70:	0f 93       	push	r16
     b72:	1f 93       	push	r17
     b74:	cf 93       	push	r28
     b76:	df 93       	push	r29
     b78:	dc 01       	movw	r26, r24
     b7a:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <timer3_state>
     b7e:	cb e8       	ldi	r28, 0x8B	; 139
     b80:	d0 e0       	ldi	r29, 0x00	; 0
     b82:	88 81       	ld	r24, Y
     b84:	8c 7f       	andi	r24, 0xFC	; 252
     b86:	88 83       	st	Y, r24
     b88:	ca e8       	ldi	r28, 0x8A	; 138
     b8a:	d0 e0       	ldi	r29, 0x00	; 0
     b8c:	88 81       	ld	r24, Y
     b8e:	87 7e       	andi	r24, 0xE7	; 231
     b90:	88 83       	st	Y, r24
     b92:	06 2f       	mov	r16, r22
     b94:	10 e0       	ldi	r17, 0x00	; 0
     b96:	f8 01       	movw	r30, r16
     b98:	31 97       	sbiw	r30, 0x01	; 1
     b9a:	ef 30       	cpi	r30, 0x0F	; 15
     b9c:	f1 05       	cpc	r31, r1
     b9e:	08 f0       	brcs	.+2      	; 0xba2 <TIMER_COUNTER3enable+0x32>
     ba0:	8a c0       	rjmp	.+276    	; 0xcb6 <TIMER_COUNTER3enable+0x146>
     ba2:	ef 58       	subi	r30, 0x8F	; 143
     ba4:	ff 4f       	sbci	r31, 0xFF	; 255
     ba6:	0c 94 8a 18 	jmp	0x3114	; 0x3114 <__tablejump2__>
     baa:	eb e8       	ldi	r30, 0x8B	; 139
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	81 60       	ori	r24, 0x01	; 1
     bb2:	80 83       	st	Z, r24
     bb4:	80 c0       	rjmp	.+256    	; 0xcb6 <TIMER_COUNTER3enable+0x146>
     bb6:	eb e8       	ldi	r30, 0x8B	; 139
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	82 60       	ori	r24, 0x02	; 2
     bbe:	80 83       	st	Z, r24
     bc0:	7a c0       	rjmp	.+244    	; 0xcb6 <TIMER_COUNTER3enable+0x146>
     bc2:	eb e8       	ldi	r30, 0x8B	; 139
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	83 60       	ori	r24, 0x03	; 3
     bca:	80 83       	st	Z, r24
     bcc:	74 c0       	rjmp	.+232    	; 0xcb6 <TIMER_COUNTER3enable+0x146>
     bce:	ea e8       	ldi	r30, 0x8A	; 138
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	80 81       	ld	r24, Z
     bd4:	88 60       	ori	r24, 0x08	; 8
     bd6:	80 83       	st	Z, r24
     bd8:	6e c0       	rjmp	.+220    	; 0xcb6 <TIMER_COUNTER3enable+0x146>
     bda:	eb e8       	ldi	r30, 0x8B	; 139
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	80 81       	ld	r24, Z
     be0:	81 60       	ori	r24, 0x01	; 1
     be2:	80 83       	st	Z, r24
     be4:	ea e8       	ldi	r30, 0x8A	; 138
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	80 81       	ld	r24, Z
     bea:	88 60       	ori	r24, 0x08	; 8
     bec:	80 83       	st	Z, r24
     bee:	63 c0       	rjmp	.+198    	; 0xcb6 <TIMER_COUNTER3enable+0x146>
     bf0:	eb e8       	ldi	r30, 0x8B	; 139
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	80 81       	ld	r24, Z
     bf6:	82 60       	ori	r24, 0x02	; 2
     bf8:	80 83       	st	Z, r24
     bfa:	ea e8       	ldi	r30, 0x8A	; 138
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	88 60       	ori	r24, 0x08	; 8
     c02:	80 83       	st	Z, r24
     c04:	58 c0       	rjmp	.+176    	; 0xcb6 <TIMER_COUNTER3enable+0x146>
     c06:	eb e8       	ldi	r30, 0x8B	; 139
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	80 81       	ld	r24, Z
     c0c:	83 60       	ori	r24, 0x03	; 3
     c0e:	80 83       	st	Z, r24
     c10:	ea e8       	ldi	r30, 0x8A	; 138
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	88 60       	ori	r24, 0x08	; 8
     c18:	80 83       	st	Z, r24
     c1a:	4d c0       	rjmp	.+154    	; 0xcb6 <TIMER_COUNTER3enable+0x146>
     c1c:	ea e8       	ldi	r30, 0x8A	; 138
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	80 61       	ori	r24, 0x10	; 16
     c24:	80 83       	st	Z, r24
     c26:	47 c0       	rjmp	.+142    	; 0xcb6 <TIMER_COUNTER3enable+0x146>
     c28:	eb e8       	ldi	r30, 0x8B	; 139
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	80 81       	ld	r24, Z
     c2e:	81 60       	ori	r24, 0x01	; 1
     c30:	80 83       	st	Z, r24
     c32:	ea e8       	ldi	r30, 0x8A	; 138
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	80 61       	ori	r24, 0x10	; 16
     c3a:	80 83       	st	Z, r24
     c3c:	3c c0       	rjmp	.+120    	; 0xcb6 <TIMER_COUNTER3enable+0x146>
     c3e:	eb e8       	ldi	r30, 0x8B	; 139
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	80 81       	ld	r24, Z
     c44:	82 60       	ori	r24, 0x02	; 2
     c46:	80 83       	st	Z, r24
     c48:	ea e8       	ldi	r30, 0x8A	; 138
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	80 61       	ori	r24, 0x10	; 16
     c50:	80 83       	st	Z, r24
     c52:	31 c0       	rjmp	.+98     	; 0xcb6 <TIMER_COUNTER3enable+0x146>
     c54:	eb e8       	ldi	r30, 0x8B	; 139
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	80 81       	ld	r24, Z
     c5a:	83 60       	ori	r24, 0x03	; 3
     c5c:	80 83       	st	Z, r24
     c5e:	ea e8       	ldi	r30, 0x8A	; 138
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	80 81       	ld	r24, Z
     c64:	80 61       	ori	r24, 0x10	; 16
     c66:	80 83       	st	Z, r24
     c68:	26 c0       	rjmp	.+76     	; 0xcb6 <TIMER_COUNTER3enable+0x146>
     c6a:	ea e8       	ldi	r30, 0x8A	; 138
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	80 81       	ld	r24, Z
     c70:	88 61       	ori	r24, 0x18	; 24
     c72:	80 83       	st	Z, r24
     c74:	20 c0       	rjmp	.+64     	; 0xcb6 <TIMER_COUNTER3enable+0x146>
     c76:	eb e8       	ldi	r30, 0x8B	; 139
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	80 81       	ld	r24, Z
     c7c:	81 60       	ori	r24, 0x01	; 1
     c7e:	80 83       	st	Z, r24
     c80:	ea e8       	ldi	r30, 0x8A	; 138
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	80 81       	ld	r24, Z
     c86:	88 61       	ori	r24, 0x18	; 24
     c88:	80 83       	st	Z, r24
     c8a:	15 c0       	rjmp	.+42     	; 0xcb6 <TIMER_COUNTER3enable+0x146>
     c8c:	eb e8       	ldi	r30, 0x8B	; 139
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	80 81       	ld	r24, Z
     c92:	82 60       	ori	r24, 0x02	; 2
     c94:	80 83       	st	Z, r24
     c96:	ea e8       	ldi	r30, 0x8A	; 138
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 81       	ld	r24, Z
     c9c:	88 61       	ori	r24, 0x18	; 24
     c9e:	80 83       	st	Z, r24
     ca0:	0a c0       	rjmp	.+20     	; 0xcb6 <TIMER_COUNTER3enable+0x146>
     ca2:	eb e8       	ldi	r30, 0x8B	; 139
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 81       	ld	r24, Z
     ca8:	83 60       	ori	r24, 0x03	; 3
     caa:	80 83       	st	Z, r24
     cac:	ea e8       	ldi	r30, 0x8A	; 138
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
     cb2:	88 61       	ori	r24, 0x18	; 24
     cb4:	80 83       	st	Z, r24
     cb6:	eb e8       	ldi	r30, 0x8B	; 139
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	83 70       	andi	r24, 0x03	; 3
     cbe:	80 83       	st	Z, r24
     cc0:	ed e7       	ldi	r30, 0x7D	; 125
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	81 7c       	andi	r24, 0xC1	; 193
     cc8:	80 83       	st	Z, r24
     cca:	50 e0       	ldi	r21, 0x00	; 0
     ccc:	fa 01       	movw	r30, r20
     cce:	31 97       	sbiw	r30, 0x01	; 1
     cd0:	ec 30       	cpi	r30, 0x0C	; 12
     cd2:	f1 05       	cpc	r31, r1
     cd4:	08 f0       	brcs	.+2      	; 0xcd8 <TIMER_COUNTER3enable+0x168>
     cd6:	49 c0       	rjmp	.+146    	; 0xd6a <TIMER_COUNTER3enable+0x1fa>
     cd8:	e0 58       	subi	r30, 0x80	; 128
     cda:	ff 4f       	sbci	r31, 0xFF	; 255
     cdc:	0c 94 8a 18 	jmp	0x3114	; 0x3114 <__tablejump2__>
     ce0:	84 e0       	ldi	r24, 0x04	; 4
     ce2:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x7e007d>
     ce6:	41 c0       	rjmp	.+130    	; 0xd6a <TIMER_COUNTER3enable+0x1fa>
     ce8:	ed e7       	ldi	r30, 0x7D	; 125
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	80 61       	ori	r24, 0x10	; 16
     cf0:	80 83       	st	Z, r24
     cf2:	3b c0       	rjmp	.+118    	; 0xd6a <TIMER_COUNTER3enable+0x1fa>
     cf4:	ed e7       	ldi	r30, 0x7D	; 125
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 81       	ld	r24, Z
     cfa:	88 60       	ori	r24, 0x08	; 8
     cfc:	80 83       	st	Z, r24
     cfe:	35 c0       	rjmp	.+106    	; 0xd6a <TIMER_COUNTER3enable+0x1fa>
     d00:	ed e7       	ldi	r30, 0x7D	; 125
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	82 60       	ori	r24, 0x02	; 2
     d08:	80 83       	st	Z, r24
     d0a:	2f c0       	rjmp	.+94     	; 0xd6a <TIMER_COUNTER3enable+0x1fa>
     d0c:	ed e7       	ldi	r30, 0x7D	; 125
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	80 62       	ori	r24, 0x20	; 32
     d14:	80 83       	st	Z, r24
     d16:	29 c0       	rjmp	.+82     	; 0xd6a <TIMER_COUNTER3enable+0x1fa>
     d18:	ed e7       	ldi	r30, 0x7D	; 125
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	84 61       	ori	r24, 0x14	; 20
     d20:	80 83       	st	Z, r24
     d22:	23 c0       	rjmp	.+70     	; 0xd6a <TIMER_COUNTER3enable+0x1fa>
     d24:	ed e7       	ldi	r30, 0x7D	; 125
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	8c 60       	ori	r24, 0x0C	; 12
     d2c:	80 83       	st	Z, r24
     d2e:	1d c0       	rjmp	.+58     	; 0xd6a <TIMER_COUNTER3enable+0x1fa>
     d30:	ed e7       	ldi	r30, 0x7D	; 125
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	86 60       	ori	r24, 0x06	; 6
     d38:	80 83       	st	Z, r24
     d3a:	17 c0       	rjmp	.+46     	; 0xd6a <TIMER_COUNTER3enable+0x1fa>
     d3c:	ed e7       	ldi	r30, 0x7D	; 125
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	84 62       	ori	r24, 0x24	; 36
     d44:	80 83       	st	Z, r24
     d46:	11 c0       	rjmp	.+34     	; 0xd6a <TIMER_COUNTER3enable+0x1fa>
     d48:	ed e7       	ldi	r30, 0x7D	; 125
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	8c 61       	ori	r24, 0x1C	; 28
     d50:	80 83       	st	Z, r24
     d52:	0b c0       	rjmp	.+22     	; 0xd6a <TIMER_COUNTER3enable+0x1fa>
     d54:	ed e7       	ldi	r30, 0x7D	; 125
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	80 81       	ld	r24, Z
     d5a:	8e 61       	ori	r24, 0x1E	; 30
     d5c:	80 83       	st	Z, r24
     d5e:	05 c0       	rjmp	.+10     	; 0xd6a <TIMER_COUNTER3enable+0x1fa>
     d60:	ed e7       	ldi	r30, 0x7D	; 125
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	8a 61       	ori	r24, 0x1A	; 26
     d68:	80 83       	st	Z, r24
     d6a:	8a ee       	ldi	r24, 0xEA	; 234
     d6c:	92 e0       	ldi	r25, 0x02	; 2
     d6e:	11 96       	adiw	r26, 0x01	; 1
     d70:	9c 93       	st	X, r25
     d72:	8e 93       	st	-X, r24
     d74:	85 e0       	ldi	r24, 0x05	; 5
     d76:	93 e0       	ldi	r25, 0x03	; 3
     d78:	13 96       	adiw	r26, 0x03	; 3
     d7a:	9c 93       	st	X, r25
     d7c:	8e 93       	st	-X, r24
     d7e:	12 97       	sbiw	r26, 0x02	; 2
     d80:	80 e2       	ldi	r24, 0x20	; 32
     d82:	93 e0       	ldi	r25, 0x03	; 3
     d84:	15 96       	adiw	r26, 0x05	; 5
     d86:	9c 93       	st	X, r25
     d88:	8e 93       	st	-X, r24
     d8a:	14 97       	sbiw	r26, 0x04	; 4
     d8c:	8b e3       	ldi	r24, 0x3B	; 59
     d8e:	93 e0       	ldi	r25, 0x03	; 3
     d90:	17 96       	adiw	r26, 0x07	; 7
     d92:	9c 93       	st	X, r25
     d94:	8e 93       	st	-X, r24
     d96:	16 97       	sbiw	r26, 0x06	; 6
     d98:	80 e4       	ldi	r24, 0x40	; 64
     d9a:	93 e0       	ldi	r25, 0x03	; 3
     d9c:	19 96       	adiw	r26, 0x09	; 9
     d9e:	9c 93       	st	X, r25
     da0:	8e 93       	st	-X, r24
     da2:	18 97       	sbiw	r26, 0x08	; 8
     da4:	85 e4       	ldi	r24, 0x45	; 69
     da6:	93 e0       	ldi	r25, 0x03	; 3
     da8:	1b 96       	adiw	r26, 0x0b	; 11
     daa:	9c 93       	st	X, r25
     dac:	8e 93       	st	-X, r24
     dae:	1a 97       	sbiw	r26, 0x0a	; 10
     db0:	8f e8       	ldi	r24, 0x8F	; 143
     db2:	92 e0       	ldi	r25, 0x02	; 2
     db4:	1d 96       	adiw	r26, 0x0d	; 13
     db6:	9c 93       	st	X, r25
     db8:	8e 93       	st	-X, r24
     dba:	1c 97       	sbiw	r26, 0x0c	; 12
     dbc:	8a e4       	ldi	r24, 0x4A	; 74
     dbe:	93 e0       	ldi	r25, 0x03	; 3
     dc0:	1f 96       	adiw	r26, 0x0f	; 15
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	1e 97       	sbiw	r26, 0x0e	; 14
     dc8:	cd 01       	movw	r24, r26
     dca:	df 91       	pop	r29
     dcc:	cf 91       	pop	r28
     dce:	1f 91       	pop	r17
     dd0:	0f 91       	pop	r16
     dd2:	08 95       	ret

00000dd4 <I2Cenable>:
     dd4:	1f 93       	push	r17
     dd6:	cf 93       	push	r28
     dd8:	df 93       	push	r29
     dda:	ec 01       	movw	r28, r24
     ddc:	1f b7       	in	r17, 0x3f	; 63
     dde:	8f b7       	in	r24, 0x3f	; 63
     de0:	8f 77       	andi	r24, 0x7F	; 127
     de2:	8f bf       	out	0x3f, r24	; 63
     de4:	16 16       	cp	r1, r22
     de6:	3c f4       	brge	.+14     	; 0xdf6 <I2Cenable+0x22>
     de8:	60 93 38 02 	sts	0x0238, r22	; 0x800238 <twi_chip_id>
     dec:	66 0f       	add	r22, r22
     dee:	61 60       	ori	r22, 0x01	; 1
     df0:	60 93 72 00 	sts	0x0072, r22	; 0x800072 <__TEXT_REGION_LENGTH__+0x7e0072>
     df4:	03 c0       	rjmp	.+6      	; 0xdfc <I2Cenable+0x28>
     df6:	82 e0       	ldi	r24, 0x02	; 2
     df8:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <twi_chip_id>
     dfc:	81 b3       	in	r24, 0x11	; 17
     dfe:	83 60       	ori	r24, 0x03	; 3
     e00:	81 bb       	out	0x11, r24	; 17
     e02:	82 b3       	in	r24, 0x12	; 18
     e04:	83 60       	ori	r24, 0x03	; 3
     e06:	82 bb       	out	0x12, r24	; 18
     e08:	44 30       	cpi	r20, 0x04	; 4
     e0a:	79 f0       	breq	.+30     	; 0xe2a <I2Cenable+0x56>
     e0c:	18 f4       	brcc	.+6      	; 0xe14 <I2Cenable+0x40>
     e0e:	41 30       	cpi	r20, 0x01	; 1
     e10:	31 f0       	breq	.+12     	; 0xe1e <I2Cenable+0x4a>
     e12:	1d c0       	rjmp	.+58     	; 0xe4e <I2Cenable+0x7a>
     e14:	40 31       	cpi	r20, 0x10	; 16
     e16:	79 f0       	breq	.+30     	; 0xe36 <I2Cenable+0x62>
     e18:	40 34       	cpi	r20, 0x40	; 64
     e1a:	99 f0       	breq	.+38     	; 0xe42 <I2Cenable+0x6e>
     e1c:	18 c0       	rjmp	.+48     	; 0xe4e <I2Cenable+0x7a>
     e1e:	e1 e7       	ldi	r30, 0x71	; 113
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	8c 7f       	andi	r24, 0xFC	; 252
     e26:	80 83       	st	Z, r24
     e28:	18 c0       	rjmp	.+48     	; 0xe5a <I2Cenable+0x86>
     e2a:	e1 e7       	ldi	r30, 0x71	; 113
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	81 60       	ori	r24, 0x01	; 1
     e32:	80 83       	st	Z, r24
     e34:	12 c0       	rjmp	.+36     	; 0xe5a <I2Cenable+0x86>
     e36:	e1 e7       	ldi	r30, 0x71	; 113
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	82 60       	ori	r24, 0x02	; 2
     e3e:	80 83       	st	Z, r24
     e40:	0c c0       	rjmp	.+24     	; 0xe5a <I2Cenable+0x86>
     e42:	e1 e7       	ldi	r30, 0x71	; 113
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	83 60       	ori	r24, 0x03	; 3
     e4a:	80 83       	st	Z, r24
     e4c:	06 c0       	rjmp	.+12     	; 0xe5a <I2Cenable+0x86>
     e4e:	e1 e7       	ldi	r30, 0x71	; 113
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	8c 7f       	andi	r24, 0xFC	; 252
     e56:	80 83       	st	Z, r24
     e58:	41 e0       	ldi	r20, 0x01	; 1
     e5a:	24 2f       	mov	r18, r20
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	22 0f       	add	r18, r18
     e60:	33 1f       	adc	r19, r19
     e62:	03 2e       	mov	r0, r19
     e64:	00 0c       	add	r0, r0
     e66:	44 0b       	sbc	r20, r20
     e68:	55 0b       	sbc	r21, r21
     e6a:	60 e9       	ldi	r22, 0x90	; 144
     e6c:	70 e0       	ldi	r23, 0x00	; 0
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	0e 94 4c 18 	call	0x3098	; 0x3098 <__udivmodsi4>
     e76:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     e7a:	1f bf       	out	0x3f, r17	; 63
     e7c:	8f b7       	in	r24, 0x3f	; 63
     e7e:	80 68       	ori	r24, 0x80	; 128
     e80:	8f bf       	out	0x3f, r24	; 63
     e82:	86 ea       	ldi	r24, 0xA6	; 166
     e84:	97 e0       	ldi	r25, 0x07	; 7
     e86:	99 83       	std	Y+1, r25	; 0x01
     e88:	88 83       	st	Y, r24
     e8a:	86 eb       	ldi	r24, 0xB6	; 182
     e8c:	97 e0       	ldi	r25, 0x07	; 7
     e8e:	9b 83       	std	Y+3, r25	; 0x03
     e90:	8a 83       	std	Y+2, r24	; 0x02
     e92:	8f ec       	ldi	r24, 0xCF	; 207
     e94:	97 e0       	ldi	r25, 0x07	; 7
     e96:	9d 83       	std	Y+5, r25	; 0x05
     e98:	8c 83       	std	Y+4, r24	; 0x04
     e9a:	87 ee       	ldi	r24, 0xE7	; 231
     e9c:	97 e0       	ldi	r25, 0x07	; 7
     e9e:	9f 83       	std	Y+7, r25	; 0x07
     ea0:	8e 83       	std	Y+6, r24	; 0x06
     ea2:	8e e7       	ldi	r24, 0x7E	; 126
     ea4:	97 e0       	ldi	r25, 0x07	; 7
     ea6:	99 87       	std	Y+9, r25	; 0x09
     ea8:	88 87       	std	Y+8, r24	; 0x08
     eaa:	ce 01       	movw	r24, r28
     eac:	df 91       	pop	r29
     eae:	cf 91       	pop	r28
     eb0:	1f 91       	pop	r17
     eb2:	08 95       	ret

00000eb4 <twi_transmit>:
     eb4:	81 30       	cpi	r24, 0x01	; 1
     eb6:	61 f0       	breq	.+24     	; 0xed0 <twi_transmit+0x1c>
     eb8:	28 f0       	brcs	.+10     	; 0xec4 <twi_transmit+0x10>
     eba:	82 30       	cpi	r24, 0x02	; 2
     ebc:	79 f0       	breq	.+30     	; 0xedc <twi_transmit+0x28>
     ebe:	83 30       	cpi	r24, 0x03	; 3
     ec0:	99 f0       	breq	.+38     	; 0xee8 <twi_transmit+0x34>
     ec2:	18 c0       	rjmp	.+48     	; 0xef4 <twi_transmit+0x40>
     ec4:	e4 e7       	ldi	r30, 0x74	; 116
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	84 6a       	ori	r24, 0xA4	; 164
     ecc:	80 83       	st	Z, r24
     ece:	08 95       	ret
     ed0:	e4 e7       	ldi	r30, 0x74	; 116
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	84 68       	ori	r24, 0x84	; 132
     ed8:	80 83       	st	Z, r24
     eda:	08 95       	ret
     edc:	e4 e7       	ldi	r30, 0x74	; 116
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	84 6c       	ori	r24, 0xC4	; 196
     ee4:	80 83       	st	Z, r24
     ee6:	08 95       	ret
     ee8:	e4 e7       	ldi	r30, 0x74	; 116
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	84 69       	ori	r24, 0x94	; 148
     ef0:	80 83       	st	Z, r24
     ef2:	08 95       	ret
     ef4:	84 e9       	ldi	r24, 0x94	; 148
     ef6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     efa:	08 95       	ret

00000efc <twi_stop>:
     efc:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
     f00:	88 7f       	andi	r24, 0xF8	; 248
     f02:	88 33       	cpi	r24, 0x38	; 56
     f04:	51 f0       	breq	.+20     	; 0xf1a <twi_stop+0x1e>
     f06:	28 f4       	brcc	.+10     	; 0xf12 <twi_stop+0x16>
     f08:	80 32       	cpi	r24, 0x20	; 32
     f0a:	39 f0       	breq	.+14     	; 0xf1a <twi_stop+0x1e>
     f0c:	80 33       	cpi	r24, 0x30	; 48
     f0e:	39 f4       	brne	.+14     	; 0xf1e <twi_stop+0x22>
     f10:	04 c0       	rjmp	.+8      	; 0xf1a <twi_stop+0x1e>
     f12:	88 34       	cpi	r24, 0x48	; 72
     f14:	11 f0       	breq	.+4      	; 0xf1a <twi_stop+0x1e>
     f16:	88 35       	cpi	r24, 0x58	; 88
     f18:	11 f4       	brne	.+4      	; 0xf1e <twi_stop+0x22>
     f1a:	83 e0       	ldi	r24, 0x03	; 3
     f1c:	cb df       	rcall	.-106    	; 0xeb4 <twi_transmit>
     f1e:	83 e0       	ldi	r24, 0x03	; 3
     f20:	c9 cf       	rjmp	.-110    	; 0xeb4 <twi_transmit>
     f22:	08 95       	ret

00000f24 <twi_poll>:
     f24:	ac 01       	movw	r20, r24
     f26:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     f2a:	88 23       	and	r24, r24
     f2c:	2c f4       	brge	.+10     	; 0xf38 <twi_poll+0x14>
     f2e:	08 95       	ret
     f30:	42 17       	cp	r20, r18
     f32:	53 07       	cpc	r21, r19
     f34:	28 f4       	brcc	.+10     	; 0xf40 <twi_poll+0x1c>
     f36:	08 95       	ret
     f38:	20 e0       	ldi	r18, 0x00	; 0
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	e4 e7       	ldi	r30, 0x74	; 116
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	2f 5f       	subi	r18, 0xFF	; 255
     f42:	3f 4f       	sbci	r19, 0xFF	; 255
     f44:	90 81       	ld	r25, Z
     f46:	99 23       	and	r25, r25
     f48:	9c f7       	brge	.-26     	; 0xf30 <twi_poll+0xc>
     f4a:	08 95       	ret

00000f4c <twi_start>:
     f4c:	88 23       	and	r24, r24
     f4e:	41 f0       	breq	.+16     	; 0xf60 <twi_start+0x14>
     f50:	e4 e7       	ldi	r30, 0x74	; 116
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	85 e4       	ldi	r24, 0x45	; 69
     f56:	80 83       	st	Z, r24
     f58:	80 81       	ld	r24, Z
     f5a:	8f 7c       	andi	r24, 0xCF	; 207
     f5c:	80 83       	st	Z, r24
     f5e:	08 95       	ret
     f60:	80 e0       	ldi	r24, 0x00	; 0
     f62:	a8 df       	rcall	.-176    	; 0xeb4 <twi_transmit>
     f64:	88 ea       	ldi	r24, 0xA8	; 168
     f66:	92 e0       	ldi	r25, 0x02	; 2
     f68:	dd cf       	rjmp	.-70     	; 0xf24 <twi_poll>
     f6a:	08 95       	ret

00000f6c <twi_master_connect>:
     f6c:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
     f70:	98 7f       	andi	r25, 0xF8	; 248
     f72:	98 30       	cpi	r25, 0x08	; 8
     f74:	99 f4       	brne	.+38     	; 0xf9c <twi_master_connect+0x30>
     f76:	e4 e7       	ldi	r30, 0x74	; 116
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	90 81       	ld	r25, Z
     f7c:	9f 7d       	andi	r25, 0xDF	; 223
     f7e:	90 83       	st	Z, r25
     f80:	18 16       	cp	r1, r24
     f82:	2c f4       	brge	.+10     	; 0xf8e <twi_master_connect+0x22>
     f84:	88 0f       	add	r24, r24
     f86:	86 2b       	or	r24, r22
     f88:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <twi_master_connect+0x26>
     f8e:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	8f df       	rcall	.-226    	; 0xeb4 <twi_transmit>
     f96:	88 ea       	ldi	r24, 0xA8	; 168
     f98:	92 e0       	ldi	r25, 0x02	; 2
     f9a:	c4 cf       	rjmp	.-120    	; 0xf24 <twi_poll>
     f9c:	08 95       	ret

00000f9e <twi_master_write>:
     f9e:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
     fa2:	98 7f       	andi	r25, 0xF8	; 248
     fa4:	98 31       	cpi	r25, 0x18	; 24
     fa6:	19 f0       	breq	.+6      	; 0xfae <twi_master_write+0x10>
     fa8:	98 32       	cpi	r25, 0x28	; 40
     faa:	49 f0       	breq	.+18     	; 0xfbe <twi_master_write+0x20>
     fac:	08 95       	ret
     fae:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	7f df       	rcall	.-258    	; 0xeb4 <twi_transmit>
     fb6:	88 ea       	ldi	r24, 0xA8	; 168
     fb8:	92 e0       	ldi	r25, 0x02	; 2
     fba:	b4 cf       	rjmp	.-152    	; 0xf24 <twi_poll>
     fbc:	08 95       	ret
     fbe:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	77 df       	rcall	.-274    	; 0xeb4 <twi_transmit>
     fc6:	88 ea       	ldi	r24, 0xA8	; 168
     fc8:	92 e0       	ldi	r25, 0x02	; 2
     fca:	ac cf       	rjmp	.-168    	; 0xf24 <twi_poll>
     fcc:	08 95       	ret

00000fce <twi_master_read>:
     fce:	cf 93       	push	r28
     fd0:	c8 2f       	mov	r28, r24
     fd2:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
     fd6:	88 7f       	andi	r24, 0xF8	; 248
     fd8:	80 34       	cpi	r24, 0x40	; 64
     fda:	19 f0       	breq	.+6      	; 0xfe2 <twi_master_read+0x14>
     fdc:	80 35       	cpi	r24, 0x50	; 80
     fde:	e1 f0       	breq	.+56     	; 0x1018 <twi_master_read+0x4a>
     fe0:	37 c0       	rjmp	.+110    	; 0x1050 <twi_master_read+0x82>
     fe2:	c1 30       	cpi	r28, 0x01	; 1
     fe4:	51 f0       	breq	.+20     	; 0xffa <twi_master_read+0x2c>
     fe6:	c2 30       	cpi	r28, 0x02	; 2
     fe8:	81 f4       	brne	.+32     	; 0x100a <twi_master_read+0x3c>
     fea:	82 e0       	ldi	r24, 0x02	; 2
     fec:	63 df       	rcall	.-314    	; 0xeb4 <twi_transmit>
     fee:	88 ea       	ldi	r24, 0xA8	; 168
     ff0:	92 e0       	ldi	r25, 0x02	; 2
     ff2:	98 df       	rcall	.-208    	; 0xf24 <twi_poll>
     ff4:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
     ff8:	13 c0       	rjmp	.+38     	; 0x1020 <twi_master_read+0x52>
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	5b df       	rcall	.-330    	; 0xeb4 <twi_transmit>
     ffe:	88 ea       	ldi	r24, 0xA8	; 168
    1000:	92 e0       	ldi	r25, 0x02	; 2
    1002:	90 df       	rcall	.-224    	; 0xf24 <twi_poll>
    1004:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    1008:	13 c0       	rjmp	.+38     	; 0x1030 <twi_master_read+0x62>
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	53 df       	rcall	.-346    	; 0xeb4 <twi_transmit>
    100e:	88 ea       	ldi	r24, 0xA8	; 168
    1010:	92 e0       	ldi	r25, 0x02	; 2
    1012:	88 df       	rcall	.-240    	; 0xf24 <twi_poll>
    1014:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    1018:	c1 30       	cpi	r28, 0x01	; 1
    101a:	51 f0       	breq	.+20     	; 0x1030 <twi_master_read+0x62>
    101c:	c2 30       	cpi	r28, 0x02	; 2
    101e:	81 f4       	brne	.+32     	; 0x1040 <twi_master_read+0x72>
    1020:	82 e0       	ldi	r24, 0x02	; 2
    1022:	48 df       	rcall	.-368    	; 0xeb4 <twi_transmit>
    1024:	88 ea       	ldi	r24, 0xA8	; 168
    1026:	92 e0       	ldi	r25, 0x02	; 2
    1028:	7d df       	rcall	.-262    	; 0xf24 <twi_poll>
    102a:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    102e:	11 c0       	rjmp	.+34     	; 0x1052 <twi_master_read+0x84>
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	40 df       	rcall	.-384    	; 0xeb4 <twi_transmit>
    1034:	88 ea       	ldi	r24, 0xA8	; 168
    1036:	92 e0       	ldi	r25, 0x02	; 2
    1038:	75 df       	rcall	.-278    	; 0xf24 <twi_poll>
    103a:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    103e:	09 c0       	rjmp	.+18     	; 0x1052 <twi_master_read+0x84>
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	38 df       	rcall	.-400    	; 0xeb4 <twi_transmit>
    1044:	88 ea       	ldi	r24, 0xA8	; 168
    1046:	92 e0       	ldi	r25, 0x02	; 2
    1048:	6d df       	rcall	.-294    	; 0xf24 <twi_poll>
    104a:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    104e:	01 c0       	rjmp	.+2      	; 0x1052 <twi_master_read+0x84>
    1050:	88 e5       	ldi	r24, 0x58	; 88
    1052:	cf 91       	pop	r28
    1054:	08 95       	ret

00001056 <__vector_18>:
    1056:	1f 92       	push	r1
    1058:	0f 92       	push	r0
    105a:	0f b6       	in	r0, 0x3f	; 63
    105c:	0f 92       	push	r0
    105e:	11 24       	eor	r1, r1
    1060:	0b b6       	in	r0, 0x3b	; 59
    1062:	0f 92       	push	r0
    1064:	8f 93       	push	r24
    1066:	9f 93       	push	r25
    1068:	ef 93       	push	r30
    106a:	ff 93       	push	r31
    106c:	8b b1       	in	r24, 0x0b	; 11
    106e:	9a b1       	in	r25, 0x0a	; 10
    1070:	88 71       	andi	r24, 0x18	; 24
    1072:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <UART_LastRxError>
    1076:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <UART_RxHead>
    107a:	ef 5f       	subi	r30, 0xFF	; 255
    107c:	ef 71       	andi	r30, 0x1F	; 31
    107e:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <UART_RxTail>
    1082:	e8 13       	cpse	r30, r24
    1084:	04 c0       	rjmp	.+8      	; 0x108e <__vector_18+0x38>
    1086:	82 e0       	ldi	r24, 0x02	; 2
    1088:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <UART_LastRxError>
    108c:	11 c0       	rjmp	.+34     	; 0x10b0 <__vector_18+0x5a>
    108e:	9c b1       	in	r25, 0x0c	; 12
    1090:	e0 93 85 01 	sts	0x0185, r30	; 0x800185 <UART_RxHead>
    1094:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <UART_LastRxError>
    1098:	88 23       	and	r24, r24
    109a:	31 f0       	breq	.+12     	; 0x10a8 <__vector_18+0x52>
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	e8 57       	subi	r30, 0x78	; 120
    10a0:	fe 4f       	sbci	r31, 0xFE	; 254
    10a2:	88 e5       	ldi	r24, 0x58	; 88
    10a4:	80 83       	st	Z, r24
    10a6:	04 c0       	rjmp	.+8      	; 0x10b0 <__vector_18+0x5a>
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	e8 57       	subi	r30, 0x78	; 120
    10ac:	fe 4f       	sbci	r31, 0xFE	; 254
    10ae:	90 83       	st	Z, r25
    10b0:	ff 91       	pop	r31
    10b2:	ef 91       	pop	r30
    10b4:	9f 91       	pop	r25
    10b6:	8f 91       	pop	r24
    10b8:	0f 90       	pop	r0
    10ba:	0b be       	out	0x3b, r0	; 59
    10bc:	0f 90       	pop	r0
    10be:	0f be       	out	0x3f, r0	; 63
    10c0:	0f 90       	pop	r0
    10c2:	1f 90       	pop	r1
    10c4:	18 95       	reti

000010c6 <__vector_19>:
    10c6:	1f 92       	push	r1
    10c8:	0f 92       	push	r0
    10ca:	0f b6       	in	r0, 0x3f	; 63
    10cc:	0f 92       	push	r0
    10ce:	11 24       	eor	r1, r1
    10d0:	0b b6       	in	r0, 0x3b	; 59
    10d2:	0f 92       	push	r0
    10d4:	8f 93       	push	r24
    10d6:	9f 93       	push	r25
    10d8:	ef 93       	push	r30
    10da:	ff 93       	push	r31
    10dc:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <UART_TxHead>
    10e0:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <UART_TxTail>
    10e4:	98 13       	cpse	r25, r24
    10e6:	02 c0       	rjmp	.+4      	; 0x10ec <__vector_19+0x26>
    10e8:	55 98       	cbi	0x0a, 5	; 10
    10ea:	0b c0       	rjmp	.+22     	; 0x1102 <__stack+0x3>
    10ec:	e0 91 86 01 	lds	r30, 0x0186	; 0x800186 <UART_TxTail>
    10f0:	ef 5f       	subi	r30, 0xFF	; 255
    10f2:	ef 71       	andi	r30, 0x1F	; 31
    10f4:	e0 93 86 01 	sts	0x0186, r30	; 0x800186 <UART_TxTail>
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	e8 55       	subi	r30, 0x58	; 88
    10fc:	fe 4f       	sbci	r31, 0xFE	; 254
    10fe:	80 81       	ld	r24, Z
    1100:	8c b9       	out	0x0c, r24	; 12
    1102:	ff 91       	pop	r31
    1104:	ef 91       	pop	r30
    1106:	9f 91       	pop	r25
    1108:	8f 91       	pop	r24
    110a:	0f 90       	pop	r0
    110c:	0b be       	out	0x3b, r0	; 59
    110e:	0f 90       	pop	r0
    1110:	0f be       	out	0x3f, r0	; 63
    1112:	0f 90       	pop	r0
    1114:	1f 90       	pop	r1
    1116:	18 95       	reti

00001118 <UART1enable>:
    1118:	ff 92       	push	r15
    111a:	0f 93       	push	r16
    111c:	1f 93       	push	r17
    111e:	cf 93       	push	r28
    1120:	df 93       	push	r29
    1122:	fc 01       	movw	r30, r24
    1124:	ff b6       	in	r15, 0x3f	; 63
    1126:	8f b7       	in	r24, 0x3f	; 63
    1128:	8f 77       	andi	r24, 0x7F	; 127
    112a:	8f bf       	out	0x3f, r24	; 63
    112c:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <UART1_TxHead>
    1130:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <UART1_TxTail>
    1134:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <UART1_RxHead>
    1138:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <UART1_RxTail>
    113c:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <uart1_index+0x1>
    1140:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <uart1_index>
    1144:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <uart1_msg>
    1148:	77 23       	and	r23, r23
    114a:	34 f4       	brge	.+12     	; 0x1158 <UART1enable+0x40>
    114c:	82 e0       	ldi	r24, 0x02	; 2
    114e:	80 93 9b 00 	sts	0x009B, r24	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    1152:	cb 01       	movw	r24, r22
    1154:	9f 77       	andi	r25, 0x7F	; 127
    1156:	01 c0       	rjmp	.+2      	; 0x115a <UART1enable+0x42>
    1158:	cb 01       	movw	r24, r22
    115a:	90 93 98 00 	sts	0x0098, r25	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
    115e:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    1162:	88 e9       	ldi	r24, 0x98	; 152
    1164:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
    1168:	47 30       	cpi	r20, 0x07	; 7
    116a:	51 05       	cpc	r21, r1
    116c:	51 f1       	breq	.+84     	; 0x11c2 <UART1enable+0xaa>
    116e:	40 f4       	brcc	.+16     	; 0x1180 <UART1enable+0x68>
    1170:	45 30       	cpi	r20, 0x05	; 5
    1172:	51 05       	cpc	r21, r1
    1174:	09 f4       	brne	.+2      	; 0x1178 <UART1enable+0x60>
    1176:	45 c0       	rjmp	.+138    	; 0x1202 <UART1enable+0xea>
    1178:	46 30       	cpi	r20, 0x06	; 6
    117a:	51 05       	cpc	r21, r1
    117c:	91 f1       	breq	.+100    	; 0x11e2 <UART1enable+0xca>
    117e:	4e c0       	rjmp	.+156    	; 0x121c <UART1enable+0x104>
    1180:	48 30       	cpi	r20, 0x08	; 8
    1182:	51 05       	cpc	r21, r1
    1184:	89 f0       	breq	.+34     	; 0x11a8 <UART1enable+0x90>
    1186:	49 30       	cpi	r20, 0x09	; 9
    1188:	51 05       	cpc	r21, r1
    118a:	09 f0       	breq	.+2      	; 0x118e <UART1enable+0x76>
    118c:	47 c0       	rjmp	.+142    	; 0x121c <UART1enable+0x104>
    118e:	ca e9       	ldi	r28, 0x9A	; 154
    1190:	d0 e0       	ldi	r29, 0x00	; 0
    1192:	88 81       	ld	r24, Y
    1194:	84 60       	ori	r24, 0x04	; 4
    1196:	88 83       	st	Y, r24
    1198:	cd e9       	ldi	r28, 0x9D	; 157
    119a:	d0 e0       	ldi	r29, 0x00	; 0
    119c:	88 81       	ld	r24, Y
    119e:	86 60       	ori	r24, 0x06	; 6
    11a0:	88 83       	st	Y, r24
    11a2:	c9 e0       	ldi	r28, 0x09	; 9
    11a4:	d0 e0       	ldi	r29, 0x00	; 0
    11a6:	46 c0       	rjmp	.+140    	; 0x1234 <UART1enable+0x11c>
    11a8:	ca e9       	ldi	r28, 0x9A	; 154
    11aa:	d0 e0       	ldi	r29, 0x00	; 0
    11ac:	88 81       	ld	r24, Y
    11ae:	8b 7f       	andi	r24, 0xFB	; 251
    11b0:	88 83       	st	Y, r24
    11b2:	cd e9       	ldi	r28, 0x9D	; 157
    11b4:	d0 e0       	ldi	r29, 0x00	; 0
    11b6:	88 81       	ld	r24, Y
    11b8:	86 60       	ori	r24, 0x06	; 6
    11ba:	88 83       	st	Y, r24
    11bc:	c8 e0       	ldi	r28, 0x08	; 8
    11be:	d0 e0       	ldi	r29, 0x00	; 0
    11c0:	39 c0       	rjmp	.+114    	; 0x1234 <UART1enable+0x11c>
    11c2:	ca e9       	ldi	r28, 0x9A	; 154
    11c4:	d0 e0       	ldi	r29, 0x00	; 0
    11c6:	88 81       	ld	r24, Y
    11c8:	8b 7f       	andi	r24, 0xFB	; 251
    11ca:	88 83       	st	Y, r24
    11cc:	cd e9       	ldi	r28, 0x9D	; 157
    11ce:	d0 e0       	ldi	r29, 0x00	; 0
    11d0:	88 81       	ld	r24, Y
    11d2:	84 60       	ori	r24, 0x04	; 4
    11d4:	88 83       	st	Y, r24
    11d6:	88 81       	ld	r24, Y
    11d8:	8d 7f       	andi	r24, 0xFD	; 253
    11da:	88 83       	st	Y, r24
    11dc:	c7 e0       	ldi	r28, 0x07	; 7
    11de:	d0 e0       	ldi	r29, 0x00	; 0
    11e0:	29 c0       	rjmp	.+82     	; 0x1234 <UART1enable+0x11c>
    11e2:	ca e9       	ldi	r28, 0x9A	; 154
    11e4:	d0 e0       	ldi	r29, 0x00	; 0
    11e6:	88 81       	ld	r24, Y
    11e8:	8b 7f       	andi	r24, 0xFB	; 251
    11ea:	88 83       	st	Y, r24
    11ec:	cd e9       	ldi	r28, 0x9D	; 157
    11ee:	d0 e0       	ldi	r29, 0x00	; 0
    11f0:	88 81       	ld	r24, Y
    11f2:	8b 7f       	andi	r24, 0xFB	; 251
    11f4:	88 83       	st	Y, r24
    11f6:	88 81       	ld	r24, Y
    11f8:	82 60       	ori	r24, 0x02	; 2
    11fa:	88 83       	st	Y, r24
    11fc:	c6 e0       	ldi	r28, 0x06	; 6
    11fe:	d0 e0       	ldi	r29, 0x00	; 0
    1200:	19 c0       	rjmp	.+50     	; 0x1234 <UART1enable+0x11c>
    1202:	ca e9       	ldi	r28, 0x9A	; 154
    1204:	d0 e0       	ldi	r29, 0x00	; 0
    1206:	88 81       	ld	r24, Y
    1208:	8b 7f       	andi	r24, 0xFB	; 251
    120a:	88 83       	st	Y, r24
    120c:	cd e9       	ldi	r28, 0x9D	; 157
    120e:	d0 e0       	ldi	r29, 0x00	; 0
    1210:	88 81       	ld	r24, Y
    1212:	89 7f       	andi	r24, 0xF9	; 249
    1214:	88 83       	st	Y, r24
    1216:	c5 e0       	ldi	r28, 0x05	; 5
    1218:	d0 e0       	ldi	r29, 0x00	; 0
    121a:	0c c0       	rjmp	.+24     	; 0x1234 <UART1enable+0x11c>
    121c:	ca e9       	ldi	r28, 0x9A	; 154
    121e:	d0 e0       	ldi	r29, 0x00	; 0
    1220:	88 81       	ld	r24, Y
    1222:	8b 7f       	andi	r24, 0xFB	; 251
    1224:	88 83       	st	Y, r24
    1226:	cd e9       	ldi	r28, 0x9D	; 157
    1228:	d0 e0       	ldi	r29, 0x00	; 0
    122a:	88 81       	ld	r24, Y
    122c:	86 60       	ori	r24, 0x06	; 6
    122e:	88 83       	st	Y, r24
    1230:	c8 e0       	ldi	r28, 0x08	; 8
    1232:	d0 e0       	ldi	r29, 0x00	; 0
    1234:	21 30       	cpi	r18, 0x01	; 1
    1236:	31 05       	cpc	r19, r1
    1238:	21 f0       	breq	.+8      	; 0x1242 <UART1enable+0x12a>
    123a:	22 30       	cpi	r18, 0x02	; 2
    123c:	31 05       	cpc	r19, r1
    123e:	51 f0       	breq	.+20     	; 0x1254 <UART1enable+0x13c>
    1240:	12 c0       	rjmp	.+36     	; 0x1266 <UART1enable+0x14e>
    1242:	2d e9       	ldi	r18, 0x9D	; 157
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	d9 01       	movw	r26, r18
    1248:	8c 91       	ld	r24, X
    124a:	87 7f       	andi	r24, 0xF7	; 247
    124c:	8c 93       	st	X, r24
    124e:	41 e0       	ldi	r20, 0x01	; 1
    1250:	50 e0       	ldi	r21, 0x00	; 0
    1252:	11 c0       	rjmp	.+34     	; 0x1276 <UART1enable+0x15e>
    1254:	2d e9       	ldi	r18, 0x9D	; 157
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	d9 01       	movw	r26, r18
    125a:	8c 91       	ld	r24, X
    125c:	88 60       	ori	r24, 0x08	; 8
    125e:	8c 93       	st	X, r24
    1260:	42 e0       	ldi	r20, 0x02	; 2
    1262:	50 e0       	ldi	r21, 0x00	; 0
    1264:	08 c0       	rjmp	.+16     	; 0x1276 <UART1enable+0x15e>
    1266:	2d e9       	ldi	r18, 0x9D	; 157
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	d9 01       	movw	r26, r18
    126c:	8c 91       	ld	r24, X
    126e:	87 7f       	andi	r24, 0xF7	; 247
    1270:	8c 93       	st	X, r24
    1272:	41 e0       	ldi	r20, 0x01	; 1
    1274:	50 e0       	ldi	r21, 0x00	; 0
    1276:	02 30       	cpi	r16, 0x02	; 2
    1278:	11 05       	cpc	r17, r1
    127a:	71 f0       	breq	.+28     	; 0x1298 <UART1enable+0x180>
    127c:	03 30       	cpi	r16, 0x03	; 3
    127e:	11 05       	cpc	r17, r1
    1280:	b9 f0       	breq	.+46     	; 0x12b0 <UART1enable+0x198>
    1282:	01 2b       	or	r16, r17
    1284:	f1 f4       	brne	.+60     	; 0x12c2 <UART1enable+0x1aa>
    1286:	2d e9       	ldi	r18, 0x9D	; 157
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	d9 01       	movw	r26, r18
    128c:	8c 91       	ld	r24, X
    128e:	8f 7c       	andi	r24, 0xCF	; 207
    1290:	8c 93       	st	X, r24
    1292:	20 e0       	ldi	r18, 0x00	; 0
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	1d c0       	rjmp	.+58     	; 0x12d2 <UART1enable+0x1ba>
    1298:	8d e9       	ldi	r24, 0x9D	; 157
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	dc 01       	movw	r26, r24
    129e:	2c 91       	ld	r18, X
    12a0:	20 62       	ori	r18, 0x20	; 32
    12a2:	2c 93       	st	X, r18
    12a4:	2c 91       	ld	r18, X
    12a6:	2f 7e       	andi	r18, 0xEF	; 239
    12a8:	2c 93       	st	X, r18
    12aa:	22 e0       	ldi	r18, 0x02	; 2
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	11 c0       	rjmp	.+34     	; 0x12d2 <UART1enable+0x1ba>
    12b0:	2d e9       	ldi	r18, 0x9D	; 157
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	d9 01       	movw	r26, r18
    12b6:	8c 91       	ld	r24, X
    12b8:	80 63       	ori	r24, 0x30	; 48
    12ba:	8c 93       	st	X, r24
    12bc:	23 e0       	ldi	r18, 0x03	; 3
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	08 c0       	rjmp	.+16     	; 0x12d2 <UART1enable+0x1ba>
    12c2:	2d e9       	ldi	r18, 0x9D	; 157
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	d9 01       	movw	r26, r18
    12c8:	8c 91       	ld	r24, X
    12ca:	8f 7c       	andi	r24, 0xCF	; 207
    12cc:	8c 93       	st	X, r24
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	ff be       	out	0x3f, r15	; 63
    12d4:	8f b7       	in	r24, 0x3f	; 63
    12d6:	80 68       	ori	r24, 0x80	; 128
    12d8:	8f bf       	out	0x3f, r24	; 63
    12da:	71 83       	std	Z+1, r23	; 0x01
    12dc:	60 83       	st	Z, r22
    12de:	d3 83       	std	Z+3, r29	; 0x03
    12e0:	c2 83       	std	Z+2, r28	; 0x02
    12e2:	55 83       	std	Z+5, r21	; 0x05
    12e4:	44 83       	std	Z+4, r20	; 0x04
    12e6:	37 83       	std	Z+7, r19	; 0x07
    12e8:	26 83       	std	Z+6, r18	; 0x06
    12ea:	89 ea       	ldi	r24, 0xA9	; 169
    12ec:	99 e0       	ldi	r25, 0x09	; 9
    12ee:	91 87       	std	Z+9, r25	; 0x09
    12f0:	80 87       	std	Z+8, r24	; 0x08
    12f2:	86 e5       	ldi	r24, 0x56	; 86
    12f4:	93 e0       	ldi	r25, 0x03	; 3
    12f6:	93 87       	std	Z+11, r25	; 0x0b
    12f8:	82 87       	std	Z+10, r24	; 0x0a
    12fa:	88 ee       	ldi	r24, 0xE8	; 232
    12fc:	99 e0       	ldi	r25, 0x09	; 9
    12fe:	95 87       	std	Z+13, r25	; 0x0d
    1300:	84 87       	std	Z+12, r24	; 0x0c
    1302:	8f ee       	ldi	r24, 0xEF	; 239
    1304:	99 e0       	ldi	r25, 0x09	; 9
    1306:	97 87       	std	Z+15, r25	; 0x0f
    1308:	86 87       	std	Z+14, r24	; 0x0e
    130a:	83 e7       	ldi	r24, 0x73	; 115
    130c:	93 e0       	ldi	r25, 0x03	; 3
    130e:	91 8b       	std	Z+17, r25	; 0x11
    1310:	80 8b       	std	Z+16, r24	; 0x10
    1312:	80 e8       	ldi	r24, 0x80	; 128
    1314:	93 e0       	ldi	r25, 0x03	; 3
    1316:	93 8b       	std	Z+19, r25	; 0x13
    1318:	82 8b       	std	Z+18, r24	; 0x12
    131a:	cf 01       	movw	r24, r30
    131c:	df 91       	pop	r29
    131e:	cf 91       	pop	r28
    1320:	1f 91       	pop	r17
    1322:	0f 91       	pop	r16
    1324:	ff 90       	pop	r15
    1326:	08 95       	ret

00001328 <UART1_Rx_pop>:
    1328:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <UART1_RxHead>
    132c:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <UART1_RxTail>
    1330:	98 17       	cp	r25, r24
    1332:	69 f0       	breq	.+26     	; 0x134e <UART1_Rx_pop+0x26>
    1334:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <UART1_RxTail>
    1338:	8f 5f       	subi	r24, 0xFF	; 255
    133a:	8f 71       	andi	r24, 0x1F	; 31
    133c:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <UART1_RxTail>
    1340:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <UART1_RxTail>
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	ed 5b       	subi	r30, 0xBD	; 189
    1348:	fe 4f       	sbci	r31, 0xFE	; 254
    134a:	80 81       	ld	r24, Z
    134c:	08 95       	ret
    134e:	80 e0       	ldi	r24, 0x00	; 0
    1350:	08 95       	ret

00001352 <uart1_read>:
    1352:	cf 93       	push	r28
    1354:	df 93       	push	r29
    1356:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <UART1_RxTail>
    135a:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <UART1_RxHead>
    135e:	98 17       	cp	r25, r24
    1360:	d9 f0       	breq	.+54     	; 0x1398 <uart1_read+0x46>
    1362:	c0 91 12 02 	lds	r28, 0x0212	; 0x800212 <uart1_index>
    1366:	d0 91 13 02 	lds	r29, 0x0213	; 0x800213 <uart1_index+0x1>
    136a:	cf 31       	cpi	r28, 0x1F	; 31
    136c:	d1 05       	cpc	r29, r1
    136e:	a4 f4       	brge	.+40     	; 0x1398 <uart1_read+0x46>
    1370:	db df       	rcall	.-74     	; 0x1328 <UART1_Rx_pop>
    1372:	cb 5e       	subi	r28, 0xEB	; 235
    1374:	dd 4f       	sbci	r29, 0xFD	; 253
    1376:	88 83       	st	Y, r24
    1378:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <uart1_index>
    137c:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <uart1_index+0x1>
    1380:	01 96       	adiw	r24, 0x01	; 1
    1382:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <uart1_index+0x1>
    1386:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <uart1_index>
    138a:	fc 01       	movw	r30, r24
    138c:	eb 5e       	subi	r30, 0xEB	; 235
    138e:	fd 4f       	sbci	r31, 0xFD	; 253
    1390:	10 82       	st	Z, r1
    1392:	80 e2       	ldi	r24, 0x20	; 32
    1394:	91 e0       	ldi	r25, 0x01	; 1
    1396:	06 c0       	rjmp	.+12     	; 0x13a4 <uart1_read+0x52>
    1398:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <uart1_index+0x1>
    139c:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <uart1_index>
    13a0:	85 e1       	ldi	r24, 0x15	; 21
    13a2:	92 e0       	ldi	r25, 0x02	; 2
    13a4:	df 91       	pop	r29
    13a6:	cf 91       	pop	r28
    13a8:	08 95       	ret

000013aa <UART1_Tx_push>:
    13aa:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <UART1_TxHead>
    13ae:	9f 5f       	subi	r25, 0xFF	; 255
    13b0:	9f 71       	andi	r25, 0x1F	; 31
    13b2:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <UART1_TxHead>
    13b6:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <UART1_TxHead>
    13ba:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <UART1_TxTail>
    13be:	29 17       	cp	r18, r25
    13c0:	d1 f3       	breq	.-12     	; 0x13b6 <UART1_Tx_push+0xc>
    13c2:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <UART1_TxHead>
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	ed 59       	subi	r30, 0x9D	; 157
    13ca:	fe 4f       	sbci	r31, 0xFE	; 254
    13cc:	80 83       	st	Z, r24
    13ce:	08 95       	ret

000013d0 <uart1_putc>:
    13d0:	ec df       	rcall	.-40     	; 0x13aa <UART1_Tx_push>
    13d2:	ea e9       	ldi	r30, 0x9A	; 154
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	80 62       	ori	r24, 0x20	; 32
    13da:	80 83       	st	Z, r24
    13dc:	08 95       	ret

000013de <uart1_puts>:
    13de:	cf 93       	push	r28
    13e0:	df 93       	push	r29
    13e2:	ec 01       	movw	r28, r24
    13e4:	88 81       	ld	r24, Y
    13e6:	88 23       	and	r24, r24
    13e8:	29 f0       	breq	.+10     	; 0x13f4 <uart1_puts+0x16>
    13ea:	21 96       	adiw	r28, 0x01	; 1
    13ec:	f1 df       	rcall	.-30     	; 0x13d0 <uart1_putc>
    13ee:	89 91       	ld	r24, Y+
    13f0:	81 11       	cpse	r24, r1
    13f2:	fc cf       	rjmp	.-8      	; 0x13ec <uart1_puts+0xe>
    13f4:	df 91       	pop	r29
    13f6:	cf 91       	pop	r28
    13f8:	08 95       	ret

000013fa <__vector_30>:
SIGNAL(UART1_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART1 Receive Complete interrupt
Purpose:  called when the UART1 has received a character
**************************************************************************/
{
    13fa:	1f 92       	push	r1
    13fc:	0f 92       	push	r0
    13fe:	0f b6       	in	r0, 0x3f	; 63
    1400:	0f 92       	push	r0
    1402:	11 24       	eor	r1, r1
    1404:	0b b6       	in	r0, 0x3b	; 59
    1406:	0f 92       	push	r0
    1408:	8f 93       	push	r24
    140a:	9f 93       	push	r25
    140c:	ef 93       	push	r30
    140e:	ff 93       	push	r31
    unsigned char tmphead;
	unsigned char data;
	unsigned char bit9;
    unsigned char usr;
    /* read UART status register and UART data register */
	usr  = UART1_STATUS;
    1410:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    bit9 = UART1_CONTROL;
    1414:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
    bit9 = 0x01 & (bit9>>1);
    /* */
    UART1_LastRxError = (usr & (_BV(FE1)|_BV(DOR1)));
    1418:	88 71       	andi	r24, 0x18	; 24
    141a:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
	/* calculate buffer index */ 
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
    141e:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <UART1_RxHead>
    1422:	ef 5f       	subi	r30, 0xFF	; 255
    1424:	ef 71       	andi	r30, 0x1F	; 31
    if ( tmphead == UART1_RxTail ) {	
    1426:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <UART1_RxTail>
    142a:	e8 13       	cpse	r30, r24
    142c:	04 c0       	rjmp	.+8      	; 0x1436 <__vector_30+0x3c>
        /* error: receive buffer overflow, caracter is lost*/
        UART1_LastRxError = UART_BUFFER_OVERFLOW >> 8; 
    142e:	82 e0       	ldi	r24, 0x02	; 2
    1430:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
    1434:	12 c0       	rjmp	.+36     	; 0x145a <__vector_30+0x60>
	}else{
		data = UART1_DATA;
    1436:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
        /* store new index */
        UART1_RxHead = tmphead;
    143a:	e0 93 40 01 	sts	0x0140, r30	; 0x800140 <UART1_RxHead>
		if(UART1_LastRxError){
    143e:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
    1442:	88 23       	and	r24, r24
    1444:	31 f0       	breq	.+12     	; 0x1452 <__vector_30+0x58>
			/* store indication data error in buffer */
			UART1_RxBuf[tmphead] = 'X';
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	ed 5b       	subi	r30, 0xBD	; 189
    144a:	fe 4f       	sbci	r31, 0xFE	; 254
    144c:	88 e5       	ldi	r24, 0x58	; 88
    144e:	80 83       	st	Z, r24
    1450:	04 c0       	rjmp	.+8      	; 0x145a <__vector_30+0x60>
		}else{
			/* store received data in buffer */
			UART1_RxBuf[tmphead] = data;
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	ed 5b       	subi	r30, 0xBD	; 189
    1456:	fe 4f       	sbci	r31, 0xFE	; 254
    1458:	90 83       	st	Z, r25
		}
    }
}
    145a:	ff 91       	pop	r31
    145c:	ef 91       	pop	r30
    145e:	9f 91       	pop	r25
    1460:	8f 91       	pop	r24
    1462:	0f 90       	pop	r0
    1464:	0b be       	out	0x3b, r0	; 59
    1466:	0f 90       	pop	r0
    1468:	0f be       	out	0x3f, r0	; 63
    146a:	0f 90       	pop	r0
    146c:	1f 90       	pop	r1
    146e:	18 95       	reti

00001470 <__vector_31>:
SIGNAL(UART1_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART1 Data Register Empty interrupt
Purpose:  called when the UART1 is ready to transmit the next byte
**************************************************************************/
{
    1470:	1f 92       	push	r1
    1472:	0f 92       	push	r0
    1474:	0f b6       	in	r0, 0x3f	; 63
    1476:	0f 92       	push	r0
    1478:	11 24       	eor	r1, r1
    147a:	0b b6       	in	r0, 0x3b	; 59
    147c:	0f 92       	push	r0
    147e:	8f 93       	push	r24
    1480:	9f 93       	push	r25
    1482:	ef 93       	push	r30
    1484:	ff 93       	push	r31
    if ( UART1_TxHead == UART1_TxTail ) {
    1486:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <UART1_TxHead>
    148a:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <UART1_TxTail>
    148e:	98 13       	cpse	r25, r24
    1490:	06 c0       	rjmp	.+12     	; 0x149e <__vector_31+0x2e>
        /* tx buffer empty, disable UDRE interrupt */
        UART1_CONTROL &= ~_BV(UART1_UDRIE);
    1492:	ea e9       	ldi	r30, 0x9A	; 154
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	8f 7d       	andi	r24, 0xDF	; 223
    149a:	80 83       	st	Z, r24
    149c:	0e c0       	rjmp	.+28     	; 0x14ba <__vector_31+0x4a>
    }else{
		/* calculate and store new buffer index */
        UART1_TxTail = (UART1_TxTail + 1) & UART_TX_BUFFER_MASK;
    149e:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <UART1_TxTail>
    14a2:	8f 5f       	subi	r24, 0xFF	; 255
    14a4:	8f 71       	andi	r24, 0x1F	; 31
    14a6:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <UART1_TxTail>
        /* get one byte from buffer and write it to UART */
		UART1_DATA = UART1_TxBuf[UART1_TxTail];  /* start transmission */
    14aa:	e0 91 41 01 	lds	r30, 0x0141	; 0x800141 <UART1_TxTail>
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	ed 59       	subi	r30, 0x9D	; 157
    14b2:	fe 4f       	sbci	r31, 0xFE	; 254
    14b4:	80 81       	ld	r24, Z
    14b6:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
	}	
}
    14ba:	ff 91       	pop	r31
    14bc:	ef 91       	pop	r30
    14be:	9f 91       	pop	r25
    14c0:	8f 91       	pop	r24
    14c2:	0f 90       	pop	r0
    14c4:	0b be       	out	0x3b, r0	; 59
    14c6:	0f 90       	pop	r0
    14c8:	0f be       	out	0x3f, r0	; 63
    14ca:	0f 90       	pop	r0
    14cc:	1f 90       	pop	r1
    14ce:	18 95       	reti

000014d0 <CLOCK_set>:
	clock.show=CLOCK_show;
	return clock;
}
void CLOCK_set(uint8_t hour, uint8_t minute, uint8_t second)
{
	time.hour=hour;
    14d0:	e8 e4       	ldi	r30, 0x48	; 72
    14d2:	f2 e0       	ldi	r31, 0x02	; 2
    14d4:	80 83       	st	Z, r24
	time.minute=minute;
    14d6:	61 83       	std	Z+1, r22	; 0x01
	time.second=second;
    14d8:	42 83       	std	Z+2, r20	; 0x02
    14da:	08 95       	ret

000014dc <CLOCK_increment>:
}
void CLOCK_increment(void)
{
	time.second++;
    14dc:	e8 e4       	ldi	r30, 0x48	; 72
    14de:	f2 e0       	ldi	r31, 0x02	; 2
    14e0:	82 81       	ldd	r24, Z+2	; 0x02
    14e2:	8f 5f       	subi	r24, 0xFF	; 255
    14e4:	82 83       	std	Z+2, r24	; 0x02
	if(time.second>59){
    14e6:	8c 33       	cpi	r24, 0x3C	; 60
    14e8:	0c f4       	brge	.+2      	; 0x14ec <CLOCK_increment+0x10>
    14ea:	7a c0       	rjmp	.+244    	; 0x15e0 <CLOCK_increment+0x104>
		time.minute++;
    14ec:	81 81       	ldd	r24, Z+1	; 0x01
    14ee:	8f 5f       	subi	r24, 0xFF	; 255
    14f0:	81 83       	std	Z+1, r24	; 0x01
		time.second=0;
    14f2:	12 82       	std	Z+2, r1	; 0x02
		if(time.minute>59){
    14f4:	8c 33       	cpi	r24, 0x3C	; 60
    14f6:	44 f0       	brlt	.+16     	; 0x1508 <CLOCK_increment+0x2c>
			time.hour++;
    14f8:	80 81       	ld	r24, Z
    14fa:	8f 5f       	subi	r24, 0xFF	; 255
    14fc:	80 83       	st	Z, r24
			time.minute=0;
    14fe:	11 82       	std	Z+1, r1	; 0x01
			switch (HORA){
				case 24:
					if(time.hour>23)
    1500:	88 31       	cpi	r24, 0x18	; 24
    1502:	14 f0       	brlt	.+4      	; 0x1508 <CLOCK_increment+0x2c>
						time.hour=0;
    1504:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <time>
					break;
			}
		}
	}
	/******************************************************************************************************************/
	if(time.hour==laptime.hour && CLOCK_compare_active==4)
    1508:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <time>
    150c:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <laptime>
    1510:	89 13       	cpse	r24, r25
    1512:	2a c0       	rjmp	.+84     	; 0x1568 <CLOCK_increment+0x8c>
    1514:	90 91 4e 02 	lds	r25, 0x024E	; 0x80024e <CLOCK_compare_active>
    1518:	94 30       	cpi	r25, 0x04	; 4
    151a:	09 f0       	breq	.+2      	; 0x151e <CLOCK_increment+0x42>
    151c:	53 c0       	rjmp	.+166    	; 0x15c4 <CLOCK_increment+0xe8>
		CLOCK_compare_active=3;
    151e:	93 e0       	ldi	r25, 0x03	; 3
    1520:	90 93 4e 02 	sts	0x024E, r25	; 0x80024e <CLOCK_compare_active>
	if(time.hour==laptime.hour && time.minute==laptime.minute && CLOCK_compare_active==3)
    1524:	20 91 4c 02 	lds	r18, 0x024C	; 0x80024c <laptime+0x1>
    1528:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <time+0x1>
    152c:	29 13       	cpse	r18, r25
    152e:	09 c0       	rjmp	.+18     	; 0x1542 <CLOCK_increment+0x66>
    1530:	04 c0       	rjmp	.+8      	; 0x153a <CLOCK_increment+0x5e>
    1532:	90 91 4e 02 	lds	r25, 0x024E	; 0x80024e <CLOCK_compare_active>
    1536:	93 30       	cpi	r25, 0x03	; 3
    1538:	51 f4       	brne	.+20     	; 0x154e <CLOCK_increment+0x72>
		CLOCK_compare_active=2;
    153a:	92 e0       	ldi	r25, 0x02	; 2
    153c:	90 93 4e 02 	sts	0x024E, r25	; 0x80024e <CLOCK_compare_active>
    1540:	06 c0       	rjmp	.+12     	; 0x154e <CLOCK_increment+0x72>
	if(time.hour==laptime.hour && time.minute==laptime.minute && time.second==laptime.second && CLOCK_compare_active==2)
    1542:	20 91 49 02 	lds	r18, 0x0249	; 0x800249 <time+0x1>
    1546:	90 91 4c 02 	lds	r25, 0x024C	; 0x80024c <laptime+0x1>
    154a:	29 13       	cpse	r18, r25
    154c:	0d c0       	rjmp	.+26     	; 0x1568 <CLOCK_increment+0x8c>
    154e:	20 91 4a 02 	lds	r18, 0x024A	; 0x80024a <time+0x2>
    1552:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <laptime+0x2>
    1556:	29 13       	cpse	r18, r25
    1558:	07 c0       	rjmp	.+14     	; 0x1568 <CLOCK_increment+0x8c>
    155a:	90 91 4e 02 	lds	r25, 0x024E	; 0x80024e <CLOCK_compare_active>
    155e:	92 30       	cpi	r25, 0x02	; 2
    1560:	19 f4       	brne	.+6      	; 0x1568 <CLOCK_increment+0x8c>
		CLOCK_compare_active=1;
    1562:	91 e0       	ldi	r25, 0x01	; 1
    1564:	90 93 4e 02 	sts	0x024E, r25	; 0x80024e <CLOCK_compare_active>
	/******************************************************************************************************************/
	if(time.hour==alarmtime.hour && CLOCK_alarm_flag==4)
    1568:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <alarmtime>
    156c:	98 13       	cpse	r25, r24
    156e:	3f c0       	rjmp	.+126    	; 0x15ee <CLOCK_increment+0x112>
    1570:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <CLOCK_alarm_flag>
    1574:	84 30       	cpi	r24, 0x04	; 4
    1576:	69 f5       	brne	.+90     	; 0x15d2 <CLOCK_increment+0xf6>
		CLOCK_alarm_flag=3;
    1578:	83 e0       	ldi	r24, 0x03	; 3
    157a:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <CLOCK_alarm_flag>
	if(time.hour==alarmtime.hour && time.minute==alarmtime.minute && CLOCK_alarm_flag==3)
    157e:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <time+0x1>
    1582:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <alarmtime+0x1>
    1586:	98 13       	cpse	r25, r24
    1588:	09 c0       	rjmp	.+18     	; 0x159c <CLOCK_increment+0xc0>
    158a:	04 c0       	rjmp	.+8      	; 0x1594 <CLOCK_increment+0xb8>
    158c:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <CLOCK_alarm_flag>
    1590:	83 30       	cpi	r24, 0x03	; 3
    1592:	51 f4       	brne	.+20     	; 0x15a8 <CLOCK_increment+0xcc>
		CLOCK_alarm_flag=2;
    1594:	82 e0       	ldi	r24, 0x02	; 2
    1596:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <CLOCK_alarm_flag>
    159a:	06 c0       	rjmp	.+12     	; 0x15a8 <CLOCK_increment+0xcc>
	if(time.hour==alarmtime.hour && time.minute==alarmtime.minute && time.second==alarmtime.second && CLOCK_alarm_flag==2)
    159c:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <time+0x1>
    15a0:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <alarmtime+0x1>
    15a4:	98 13       	cpse	r25, r24
    15a6:	23 c0       	rjmp	.+70     	; 0x15ee <CLOCK_increment+0x112>
    15a8:	90 91 4a 02 	lds	r25, 0x024A	; 0x80024a <time+0x2>
    15ac:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <alarmtime+0x2>
    15b0:	98 13       	cpse	r25, r24
    15b2:	1d c0       	rjmp	.+58     	; 0x15ee <CLOCK_increment+0x112>
    15b4:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <CLOCK_alarm_flag>
    15b8:	82 30       	cpi	r24, 0x02	; 2
    15ba:	c9 f4       	brne	.+50     	; 0x15ee <CLOCK_increment+0x112>
		CLOCK_alarm_flag=1;
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <CLOCK_alarm_flag>
}
    15c2:	08 95       	ret
		}
	}
	/******************************************************************************************************************/
	if(time.hour==laptime.hour && CLOCK_compare_active==4)
		CLOCK_compare_active=3;
	if(time.hour==laptime.hour && time.minute==laptime.minute && CLOCK_compare_active==3)
    15c4:	20 91 49 02 	lds	r18, 0x0249	; 0x800249 <time+0x1>
    15c8:	90 91 4c 02 	lds	r25, 0x024C	; 0x80024c <laptime+0x1>
    15cc:	29 13       	cpse	r18, r25
    15ce:	cc cf       	rjmp	.-104    	; 0x1568 <CLOCK_increment+0x8c>
    15d0:	b0 cf       	rjmp	.-160    	; 0x1532 <CLOCK_increment+0x56>
	if(time.hour==laptime.hour && time.minute==laptime.minute && time.second==laptime.second && CLOCK_compare_active==2)
		CLOCK_compare_active=1;
	/******************************************************************************************************************/
	if(time.hour==alarmtime.hour && CLOCK_alarm_flag==4)
		CLOCK_alarm_flag=3;
	if(time.hour==alarmtime.hour && time.minute==alarmtime.minute && CLOCK_alarm_flag==3)
    15d2:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <time+0x1>
    15d6:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <alarmtime+0x1>
    15da:	98 13       	cpse	r25, r24
    15dc:	08 c0       	rjmp	.+16     	; 0x15ee <CLOCK_increment+0x112>
    15de:	d6 cf       	rjmp	.-84     	; 0x158c <CLOCK_increment+0xb0>
					break;
			}
		}
	}
	/******************************************************************************************************************/
	if(time.hour==laptime.hour && CLOCK_compare_active==4)
    15e0:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <time>
    15e4:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <laptime>
    15e8:	98 13       	cpse	r25, r24
    15ea:	be cf       	rjmp	.-132    	; 0x1568 <CLOCK_increment+0x8c>
    15ec:	93 cf       	rjmp	.-218    	; 0x1514 <CLOCK_increment+0x38>
    15ee:	08 95       	ret

000015f0 <CLOCK_decrement>:
	if(time.hour==alarmtime.hour && time.minute==alarmtime.minute && time.second==alarmtime.second && CLOCK_alarm_flag==2)
		CLOCK_alarm_flag=1;
}
void CLOCK_decrement(void)
{
	time.second--;
    15f0:	e8 e4       	ldi	r30, 0x48	; 72
    15f2:	f2 e0       	ldi	r31, 0x02	; 2
    15f4:	82 81       	ldd	r24, Z+2	; 0x02
    15f6:	81 50       	subi	r24, 0x01	; 1
    15f8:	82 83       	std	Z+2, r24	; 0x02
	if(time.second<0){
    15fa:	88 23       	and	r24, r24
    15fc:	0c f0       	brlt	.+2      	; 0x1600 <CLOCK_decrement+0x10>
    15fe:	47 c0       	rjmp	.+142    	; 0x168e <CLOCK_decrement+0x9e>
		time.minute--;
    1600:	81 81       	ldd	r24, Z+1	; 0x01
    1602:	81 50       	subi	r24, 0x01	; 1
    1604:	81 83       	std	Z+1, r24	; 0x01
		time.second=59;
    1606:	9b e3       	ldi	r25, 0x3B	; 59
    1608:	92 83       	std	Z+2, r25	; 0x02
		if(time.minute<0){
    160a:	88 23       	and	r24, r24
    160c:	4c f4       	brge	.+18     	; 0x1620 <CLOCK_decrement+0x30>
			time.hour--;
    160e:	80 81       	ld	r24, Z
    1610:	81 50       	subi	r24, 0x01	; 1
    1612:	80 83       	st	Z, r24
			time.minute=59;
    1614:	91 83       	std	Z+1, r25	; 0x01
			switch (HORA){
				case 24:
					if(time.hour<0)
    1616:	88 23       	and	r24, r24
    1618:	1c f4       	brge	.+6      	; 0x1620 <CLOCK_decrement+0x30>
						time.hour=23;
    161a:	87 e1       	ldi	r24, 0x17	; 23
    161c:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <time>
					break;
			}
		}
	}
	/******************************************************************************************************************/
	if(time.hour==alarmtime.hour && CLOCK_alarm_flag==4)
    1620:	90 91 48 02 	lds	r25, 0x0248	; 0x800248 <time>
    1624:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <alarmtime>
    1628:	98 13       	cpse	r25, r24
    162a:	37 c0       	rjmp	.+110    	; 0x169a <CLOCK_decrement+0xaa>
    162c:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <CLOCK_alarm_flag>
    1630:	84 30       	cpi	r24, 0x04	; 4
    1632:	31 f5       	brne	.+76     	; 0x1680 <CLOCK_decrement+0x90>
		CLOCK_alarm_flag=3;
    1634:	83 e0       	ldi	r24, 0x03	; 3
    1636:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <CLOCK_alarm_flag>
	if(time.hour==alarmtime.hour && time.minute==alarmtime.minute && CLOCK_alarm_flag==3)
    163a:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <time+0x1>
    163e:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <alarmtime+0x1>
    1642:	98 13       	cpse	r25, r24
    1644:	09 c0       	rjmp	.+18     	; 0x1658 <CLOCK_decrement+0x68>
    1646:	04 c0       	rjmp	.+8      	; 0x1650 <CLOCK_decrement+0x60>
    1648:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <CLOCK_alarm_flag>
    164c:	83 30       	cpi	r24, 0x03	; 3
    164e:	51 f4       	brne	.+20     	; 0x1664 <CLOCK_decrement+0x74>
		CLOCK_alarm_flag=2;
    1650:	82 e0       	ldi	r24, 0x02	; 2
    1652:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <CLOCK_alarm_flag>
    1656:	06 c0       	rjmp	.+12     	; 0x1664 <CLOCK_decrement+0x74>
	if(time.hour==alarmtime.hour && time.minute==alarmtime.minute && time.second==alarmtime.second && CLOCK_alarm_flag==2)
    1658:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <time+0x1>
    165c:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <alarmtime+0x1>
    1660:	98 13       	cpse	r25, r24
    1662:	1b c0       	rjmp	.+54     	; 0x169a <CLOCK_decrement+0xaa>
    1664:	90 91 4a 02 	lds	r25, 0x024A	; 0x80024a <time+0x2>
    1668:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <alarmtime+0x2>
    166c:	98 13       	cpse	r25, r24
    166e:	15 c0       	rjmp	.+42     	; 0x169a <CLOCK_decrement+0xaa>
    1670:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <CLOCK_alarm_flag>
    1674:	82 30       	cpi	r24, 0x02	; 2
    1676:	89 f4       	brne	.+34     	; 0x169a <CLOCK_decrement+0xaa>
		CLOCK_alarm_flag=1;		
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <CLOCK_alarm_flag>
}
    167e:	08 95       	ret
		}
	}
	/******************************************************************************************************************/
	if(time.hour==alarmtime.hour && CLOCK_alarm_flag==4)
		CLOCK_alarm_flag=3;
	if(time.hour==alarmtime.hour && time.minute==alarmtime.minute && CLOCK_alarm_flag==3)
    1680:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <time+0x1>
    1684:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <alarmtime+0x1>
    1688:	98 13       	cpse	r25, r24
    168a:	07 c0       	rjmp	.+14     	; 0x169a <CLOCK_decrement+0xaa>
    168c:	dd cf       	rjmp	.-70     	; 0x1648 <CLOCK_decrement+0x58>
					break;
			}
		}
	}
	/******************************************************************************************************************/
	if(time.hour==alarmtime.hour && CLOCK_alarm_flag==4)
    168e:	90 91 48 02 	lds	r25, 0x0248	; 0x800248 <time>
    1692:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <alarmtime>
    1696:	98 17       	cp	r25, r24
    1698:	49 f2       	breq	.-110    	; 0x162c <CLOCK_decrement+0x3c>
    169a:	08 95       	ret

0000169c <CLOCK_alarm>:
	if(time.hour==alarmtime.hour && time.minute==alarmtime.minute && time.second==alarmtime.second && CLOCK_alarm_flag==2)
		CLOCK_alarm_flag=1;		
}
uint8_t CLOCK_alarm(uint8_t hour, uint8_t minute, uint8_t second)
{
	if(!CLOCK_alarm_flag){
    169c:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <CLOCK_alarm_flag>
    16a0:	91 11       	cpse	r25, r1
    16a2:	08 c0       	rjmp	.+16     	; 0x16b4 <CLOCK_alarm+0x18>
		alarmtime.hour=hour;
    16a4:	e5 e4       	ldi	r30, 0x45	; 69
    16a6:	f2 e0       	ldi	r31, 0x02	; 2
    16a8:	80 83       	st	Z, r24
		alarmtime.minute=minute;
    16aa:	61 83       	std	Z+1, r22	; 0x01
		alarmtime.second=second;
    16ac:	42 83       	std	Z+2, r20	; 0x02
		CLOCK_alarm_flag=4;
    16ae:	84 e0       	ldi	r24, 0x04	; 4
    16b0:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <CLOCK_alarm_flag>
	}	
	return CLOCK_alarm_flag;
}
    16b4:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <CLOCK_alarm_flag>
    16b8:	08 95       	ret

000016ba <CLOCK_second_count>:
uint8_t CLOCK_second_count(uint16_t second)
{
    16ba:	cf 92       	push	r12
    16bc:	df 92       	push	r13
    16be:	ef 92       	push	r14
    16c0:	ff 92       	push	r15
    16c2:	0f 93       	push	r16
    16c4:	1f 93       	push	r17
    16c6:	cf 93       	push	r28
    16c8:	df 93       	push	r29
    16ca:	fc 01       	movw	r30, r24
	uint16_t tmp;
	uint8_t tmp_1;
	uint8_t tmp_2;
	uint8_t tmp_3;
	if(!CLOCK_compare_active){
    16cc:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <CLOCK_compare_active>
    16d0:	81 11       	cpse	r24, r1
    16d2:	65 c0       	rjmp	.+202    	; 0x179e <CLOCK_second_count+0xe4>
		tmp_3=(int8_t)(second % 60);
		tmp=second/60;
		tmp_2=(int8_t)(tmp % 60);
		tmp=tmp/60;
		tmp_1=(int8_t)tmp;
		laptime.second=(time.second + tmp_3) % 60;
    16d4:	9f 01       	movw	r18, r30
    16d6:	a9 e8       	ldi	r26, 0x89	; 137
    16d8:	b8 e8       	ldi	r27, 0x88	; 136
    16da:	0e 94 93 18 	call	0x3126	; 0x3126 <__umulhisi3>
    16de:	6c 01       	movw	r12, r24
    16e0:	d6 94       	lsr	r13
    16e2:	c7 94       	ror	r12
    16e4:	d6 94       	lsr	r13
    16e6:	c7 94       	ror	r12
    16e8:	d6 94       	lsr	r13
    16ea:	c7 94       	ror	r12
    16ec:	d6 94       	lsr	r13
    16ee:	c7 94       	ror	r12
    16f0:	d6 94       	lsr	r13
    16f2:	c7 94       	ror	r12
    16f4:	4c e3       	ldi	r20, 0x3C	; 60
    16f6:	4c 9d       	mul	r20, r12
    16f8:	c0 01       	movw	r24, r0
    16fa:	4d 9d       	mul	r20, r13
    16fc:	90 0d       	add	r25, r0
    16fe:	11 24       	eor	r1, r1
    1700:	28 1b       	sub	r18, r24
    1702:	39 0b       	sbc	r19, r25
    1704:	c8 e4       	ldi	r28, 0x48	; 72
    1706:	d2 e0       	ldi	r29, 0x02	; 2
    1708:	8a 81       	ldd	r24, Y+2	; 0x02
    170a:	08 2e       	mov	r0, r24
    170c:	00 0c       	add	r0, r0
    170e:	99 0b       	sbc	r25, r25
    1710:	82 0f       	add	r24, r18
    1712:	91 1d       	adc	r25, r1
    1714:	0b e4       	ldi	r16, 0x4B	; 75
    1716:	12 e0       	ldi	r17, 0x02	; 2
    1718:	0f 2e       	mov	r0, r31
    171a:	fc e3       	ldi	r31, 0x3C	; 60
    171c:	ef 2e       	mov	r14, r31
    171e:	f1 2c       	mov	r15, r1
    1720:	f0 2d       	mov	r31, r0
    1722:	b7 01       	movw	r22, r14
    1724:	0e 94 39 18 	call	0x3072	; 0x3072 <__divmodhi4>
    1728:	56 2f       	mov	r21, r22
    172a:	d8 01       	movw	r26, r16
    172c:	12 96       	adiw	r26, 0x02	; 2
    172e:	8c 93       	st	X, r24
		tmp_3=(time.second + tmp_3)/60;
		laptime.minute=(time.minute + tmp_2 + tmp_3) % 60;
    1730:	96 01       	movw	r18, r12
    1732:	a9 e8       	ldi	r26, 0x89	; 137
    1734:	b8 e8       	ldi	r27, 0x88	; 136
    1736:	0e 94 93 18 	call	0x3126	; 0x3126 <__umulhisi3>
    173a:	96 95       	lsr	r25
    173c:	87 95       	ror	r24
    173e:	92 95       	swap	r25
    1740:	82 95       	swap	r24
    1742:	8f 70       	andi	r24, 0x0F	; 15
    1744:	89 27       	eor	r24, r25
    1746:	9f 70       	andi	r25, 0x0F	; 15
    1748:	89 27       	eor	r24, r25
    174a:	48 9f       	mul	r20, r24
    174c:	90 01       	movw	r18, r0
    174e:	49 9f       	mul	r20, r25
    1750:	30 0d       	add	r19, r0
    1752:	11 24       	eor	r1, r1
    1754:	c2 1a       	sub	r12, r18
    1756:	d3 0a       	sbc	r13, r19
    1758:	89 81       	ldd	r24, Y+1	; 0x01
    175a:	08 2e       	mov	r0, r24
    175c:	00 0c       	add	r0, r0
    175e:	99 0b       	sbc	r25, r25
    1760:	8c 0d       	add	r24, r12
    1762:	91 1d       	adc	r25, r1
    1764:	85 0f       	add	r24, r21
    1766:	91 1d       	adc	r25, r1
    1768:	b7 01       	movw	r22, r14
    176a:	0e 94 39 18 	call	0x3072	; 0x3072 <__divmodhi4>
    176e:	26 2f       	mov	r18, r22
    1770:	d8 01       	movw	r26, r16
    1772:	11 96       	adiw	r26, 0x01	; 1
    1774:	8c 93       	st	X, r24
		tmp_2=(time.minute + tmp_2 + tmp_3)/60;
		tmp_1=time.hour+ tmp_1 + tmp_2;
    1776:	cf 01       	movw	r24, r30
    1778:	60 e1       	ldi	r22, 0x10	; 16
    177a:	7e e0       	ldi	r23, 0x0E	; 14
    177c:	0e 94 25 18 	call	0x304a	; 0x304a <__udivmodhi4>
    1780:	88 81       	ld	r24, Y
    1782:	68 0f       	add	r22, r24
    1784:	62 0f       	add	r22, r18
		if(tmp_1 > HORA)
    1786:	69 31       	cpi	r22, 0x19	; 25
    1788:	28 f0       	brcs	.+10     	; 0x1794 <CLOCK_second_count+0xda>
			laptime.hour=HORA-tmp_1;
    178a:	88 e1       	ldi	r24, 0x18	; 24
    178c:	86 1b       	sub	r24, r22
    178e:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <laptime>
    1792:	02 c0       	rjmp	.+4      	; 0x1798 <CLOCK_second_count+0xde>
		else
			laptime.hour=tmp_1;
    1794:	60 93 4b 02 	sts	0x024B, r22	; 0x80024b <laptime>
		CLOCK_compare_active=4;
    1798:	84 e0       	ldi	r24, 0x04	; 4
    179a:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <CLOCK_compare_active>
	}
	return CLOCK_compare_active;
}
    179e:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <CLOCK_compare_active>
    17a2:	df 91       	pop	r29
    17a4:	cf 91       	pop	r28
    17a6:	1f 91       	pop	r17
    17a8:	0f 91       	pop	r16
    17aa:	ff 90       	pop	r15
    17ac:	ef 90       	pop	r14
    17ae:	df 90       	pop	r13
    17b0:	cf 90       	pop	r12
    17b2:	08 95       	ret

000017b4 <CLOCK_alarm_reset>:
void CLOCK_alarm_reset(void)
{
	CLOCK_alarm_flag=0;
    17b4:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <CLOCK_alarm_flag>
    17b8:	08 95       	ret

000017ba <CLOCK_alarm_stop>:
}
void CLOCK_alarm_stop(void)
{
	CLOCK_alarm_flag=0X0F;
    17ba:	8f e0       	ldi	r24, 0x0F	; 15
    17bc:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <CLOCK_alarm_flag>
    17c0:	08 95       	ret

000017c2 <CLOCK_second_count_reset>:
}
void CLOCK_second_count_reset(void)
{
	CLOCK_compare_active=0;
    17c2:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <CLOCK_compare_active>
    17c6:	08 95       	ret

000017c8 <CLOCK_second_count_stop>:
}
void CLOCK_second_count_stop(void)
{
	CLOCK_compare_active=0X0F;
    17c8:	8f e0       	ldi	r24, 0x0F	; 15
    17ca:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <CLOCK_compare_active>
    17ce:	08 95       	ret

000017d0 <CLOCK_show>:
}
char* CLOCK_show(void)
{
	uint8_t tmp;
	CLOCK_timp[8]='\0';
    17d0:	eb e3       	ldi	r30, 0x3B	; 59
    17d2:	f2 e0       	ldi	r31, 0x02	; 2
    17d4:	10 86       	std	Z+8, r1	; 0x08
	CLOCK_timp[7]=time.second % 10 + '0';
    17d6:	a8 e4       	ldi	r26, 0x48	; 72
    17d8:	b2 e0       	ldi	r27, 0x02	; 2
    17da:	12 96       	adiw	r26, 0x02	; 2
    17dc:	2c 91       	ld	r18, X
    17de:	12 97       	sbiw	r26, 0x02	; 2
    17e0:	87 e6       	ldi	r24, 0x67	; 103
    17e2:	28 02       	muls	r18, r24
    17e4:	91 2d       	mov	r25, r1
    17e6:	11 24       	eor	r1, r1
    17e8:	95 95       	asr	r25
    17ea:	95 95       	asr	r25
    17ec:	27 fd       	sbrc	r18, 7
    17ee:	93 95       	inc	r25
    17f0:	49 2f       	mov	r20, r25
    17f2:	44 0f       	add	r20, r20
    17f4:	34 2f       	mov	r19, r20
    17f6:	33 0f       	add	r19, r19
    17f8:	33 0f       	add	r19, r19
    17fa:	34 0f       	add	r19, r20
    17fc:	23 1b       	sub	r18, r19
    17fe:	20 5d       	subi	r18, 0xD0	; 208
    1800:	27 83       	std	Z+7, r18	; 0x07
	tmp = time.second / 10;
	CLOCK_timp[6]=tmp % 10 + '0';
    1802:	2d ec       	ldi	r18, 0xCD	; 205
    1804:	92 9f       	mul	r25, r18
    1806:	31 2d       	mov	r19, r1
    1808:	11 24       	eor	r1, r1
    180a:	36 95       	lsr	r19
    180c:	36 95       	lsr	r19
    180e:	36 95       	lsr	r19
    1810:	33 0f       	add	r19, r19
    1812:	43 2f       	mov	r20, r19
    1814:	44 0f       	add	r20, r20
    1816:	44 0f       	add	r20, r20
    1818:	34 0f       	add	r19, r20
    181a:	93 1b       	sub	r25, r19
    181c:	90 5d       	subi	r25, 0xD0	; 208
    181e:	96 83       	std	Z+6, r25	; 0x06
	CLOCK_timp[5]=':';
    1820:	5a e3       	ldi	r21, 0x3A	; 58
    1822:	55 83       	std	Z+5, r21	; 0x05
	CLOCK_timp[4]=time.minute % 10 + '0';
    1824:	11 96       	adiw	r26, 0x01	; 1
    1826:	3c 91       	ld	r19, X
    1828:	11 97       	sbiw	r26, 0x01	; 1
    182a:	38 02       	muls	r19, r24
    182c:	91 2d       	mov	r25, r1
    182e:	11 24       	eor	r1, r1
    1830:	95 95       	asr	r25
    1832:	95 95       	asr	r25
    1834:	37 fd       	sbrc	r19, 7
    1836:	93 95       	inc	r25
    1838:	69 2f       	mov	r22, r25
    183a:	66 0f       	add	r22, r22
    183c:	46 2f       	mov	r20, r22
    183e:	44 0f       	add	r20, r20
    1840:	44 0f       	add	r20, r20
    1842:	46 0f       	add	r20, r22
    1844:	34 1b       	sub	r19, r20
    1846:	30 5d       	subi	r19, 0xD0	; 208
    1848:	34 83       	std	Z+4, r19	; 0x04
	tmp = time.minute / 10;
	CLOCK_timp[3]=tmp % 10 + '0';
    184a:	92 9f       	mul	r25, r18
    184c:	31 2d       	mov	r19, r1
    184e:	11 24       	eor	r1, r1
    1850:	36 95       	lsr	r19
    1852:	36 95       	lsr	r19
    1854:	36 95       	lsr	r19
    1856:	33 0f       	add	r19, r19
    1858:	43 2f       	mov	r20, r19
    185a:	44 0f       	add	r20, r20
    185c:	44 0f       	add	r20, r20
    185e:	34 0f       	add	r19, r20
    1860:	93 1b       	sub	r25, r19
    1862:	90 5d       	subi	r25, 0xD0	; 208
    1864:	93 83       	std	Z+3, r25	; 0x03
	CLOCK_timp[2]=':';
    1866:	52 83       	std	Z+2, r21	; 0x02
	CLOCK_timp[1]=time.hour % 10 + '0';
    1868:	9c 91       	ld	r25, X
    186a:	98 02       	muls	r25, r24
    186c:	81 2d       	mov	r24, r1
    186e:	11 24       	eor	r1, r1
    1870:	85 95       	asr	r24
    1872:	85 95       	asr	r24
    1874:	97 fd       	sbrc	r25, 7
    1876:	83 95       	inc	r24
    1878:	48 2f       	mov	r20, r24
    187a:	44 0f       	add	r20, r20
    187c:	34 2f       	mov	r19, r20
    187e:	33 0f       	add	r19, r19
    1880:	33 0f       	add	r19, r19
    1882:	34 0f       	add	r19, r20
    1884:	93 1b       	sub	r25, r19
    1886:	90 5d       	subi	r25, 0xD0	; 208
    1888:	91 83       	std	Z+1, r25	; 0x01
	tmp = time.hour / 10;
	CLOCK_timp[0]=tmp % 10 + '0';
    188a:	82 9f       	mul	r24, r18
    188c:	21 2d       	mov	r18, r1
    188e:	11 24       	eor	r1, r1
    1890:	26 95       	lsr	r18
    1892:	26 95       	lsr	r18
    1894:	26 95       	lsr	r18
    1896:	22 0f       	add	r18, r18
    1898:	92 2f       	mov	r25, r18
    189a:	99 0f       	add	r25, r25
    189c:	99 0f       	add	r25, r25
    189e:	29 0f       	add	r18, r25
    18a0:	82 1b       	sub	r24, r18
    18a2:	80 5d       	subi	r24, 0xD0	; 208
    18a4:	80 83       	st	Z, r24
	return CLOCK_timp;
}
    18a6:	cf 01       	movw	r24, r30
    18a8:	08 95       	ret

000018aa <CLOCKenable>:
char* CLOCK_show(void);
/*
** procedure and function
*/
CLOCK CLOCKenable(uint8_t hour, uint8_t minute, uint8_t second)
{
    18aa:	fc 01       	movw	r30, r24
	CLOCK clock;
	time.hour=hour;
    18ac:	a8 e4       	ldi	r26, 0x48	; 72
    18ae:	b2 e0       	ldi	r27, 0x02	; 2
    18b0:	6c 93       	st	X, r22
	time.minute=minute;
    18b2:	11 96       	adiw	r26, 0x01	; 1
    18b4:	4c 93       	st	X, r20
    18b6:	11 97       	sbiw	r26, 0x01	; 1
	time.second=second;
    18b8:	12 96       	adiw	r26, 0x02	; 2
    18ba:	2c 93       	st	X, r18
	CLOCK_alarm_flag=0X0F;
    18bc:	8f e0       	ldi	r24, 0x0F	; 15
    18be:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <CLOCK_alarm_flag>
	CLOCK_compare_active=0X0F;
    18c2:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <CLOCK_compare_active>
	clock.second_count_reset=CLOCK_second_count_reset;
	clock.second_count_stop=CLOCK_second_count_stop;
	clock.alarm_reset=CLOCK_alarm_reset;
	clock.alarm_stop=CLOCK_alarm_stop;
	clock.show=CLOCK_show;
	return clock;
    18c6:	88 e6       	ldi	r24, 0x68	; 104
    18c8:	9a e0       	ldi	r25, 0x0A	; 10
    18ca:	91 83       	std	Z+1, r25	; 0x01
    18cc:	80 83       	st	Z, r24
    18ce:	8e e6       	ldi	r24, 0x6E	; 110
    18d0:	9a e0       	ldi	r25, 0x0A	; 10
    18d2:	93 83       	std	Z+3, r25	; 0x03
    18d4:	82 83       	std	Z+2, r24	; 0x02
    18d6:	88 ef       	ldi	r24, 0xF8	; 248
    18d8:	9a e0       	ldi	r25, 0x0A	; 10
    18da:	95 83       	std	Z+5, r25	; 0x05
    18dc:	84 83       	std	Z+4, r24	; 0x04
    18de:	8e e4       	ldi	r24, 0x4E	; 78
    18e0:	9b e0       	ldi	r25, 0x0B	; 11
    18e2:	97 83       	std	Z+7, r25	; 0x07
    18e4:	86 83       	std	Z+6, r24	; 0x06
    18e6:	8d e5       	ldi	r24, 0x5D	; 93
    18e8:	9b e0       	ldi	r25, 0x0B	; 11
    18ea:	91 87       	std	Z+9, r25	; 0x09
    18ec:	80 87       	std	Z+8, r24	; 0x08
    18ee:	81 ee       	ldi	r24, 0xE1	; 225
    18f0:	9b e0       	ldi	r25, 0x0B	; 11
    18f2:	93 87       	std	Z+11, r25	; 0x0b
    18f4:	82 87       	std	Z+10, r24	; 0x0a
    18f6:	84 ee       	ldi	r24, 0xE4	; 228
    18f8:	9b e0       	ldi	r25, 0x0B	; 11
    18fa:	95 87       	std	Z+13, r25	; 0x0d
    18fc:	84 87       	std	Z+12, r24	; 0x0c
    18fe:	8a ed       	ldi	r24, 0xDA	; 218
    1900:	9b e0       	ldi	r25, 0x0B	; 11
    1902:	97 87       	std	Z+15, r25	; 0x0f
    1904:	86 87       	std	Z+14, r24	; 0x0e
    1906:	8d ed       	ldi	r24, 0xDD	; 221
    1908:	9b e0       	ldi	r25, 0x0B	; 11
    190a:	91 8b       	std	Z+17, r25	; 0x11
    190c:	80 8b       	std	Z+16, r24	; 0x10
    190e:	88 ee       	ldi	r24, 0xE8	; 232
    1910:	9b e0       	ldi	r25, 0x0B	; 11
    1912:	93 8b       	std	Z+19, r25	; 0x13
    1914:	82 8b       	std	Z+18, r24	; 0x12
}
    1916:	cf 01       	movw	r24, r30
    1918:	08 95       	ret

0000191a <FUNCpinmatch>:
}
//pinmatch
uint8_t FUNCpinmatch(uint8_t match, uint8_t pin, uint8_t HL)
{
	uint8_t result;
	result=match&pin;
    191a:	68 23       	and	r22, r24
	if(HL){
    191c:	44 23       	and	r20, r20
    191e:	21 f0       	breq	.+8      	; 0x1928 <FUNCpinmatch+0xe>
		if(result==match);
    1920:	86 17       	cp	r24, r22
    1922:	21 f0       	breq	.+8      	; 0x192c <FUNCpinmatch+0x12>
		else
			result=0;
    1924:	80 e0       	ldi	r24, 0x00	; 0
    1926:	08 95       	ret
	}else{
		if(result)
    1928:	61 11       	cpse	r22, r1
			result=0;
    192a:	80 e0       	ldi	r24, 0x00	; 0
		else
			result=match;
	}
	return result;
}
    192c:	08 95       	ret

0000192e <FUNChmerge>:
// hmerge
uint8_t FUNChmerge(uint8_t X, uint8_t Y)
{
	return (X | Y);
}
    192e:	86 2b       	or	r24, r22
    1930:	08 95       	ret

00001932 <FUNClmerge>:
// lmerge
uint8_t FUNClmerge(uint8_t X, uint8_t Y)
{
	return (X & Y);
}
    1932:	86 23       	and	r24, r22
    1934:	08 95       	ret

00001936 <FUNChh>:
uint8_t FUNChh(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi&xf;
	return i;
}
    1936:	86 23       	and	r24, r22
    1938:	08 95       	ret

0000193a <FUNCll>:
// ll
uint8_t FUNCll(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi|xf;
	return ~i;
    193a:	86 2b       	or	r24, r22
}
    193c:	80 95       	com	r24
    193e:	08 95       	ret

00001940 <FUNClh>:
// lh
uint8_t FUNClh(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi^xf;
    1940:	86 27       	eor	r24, r22
	i&=xf;
	return i;
}
    1942:	86 23       	and	r24, r22
    1944:	08 95       	ret

00001946 <FUNChl>:
// hl
uint8_t FUNChl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xf^xi;
    1946:	60 95       	com	r22
	i&=xi;
	return i;
}
    1948:	86 23       	and	r24, r22
    194a:	08 95       	ret

0000194c <FUNCdiff>:
// diff
uint8_t FUNCdiff(uint8_t xi, uint8_t xf)
{
	return xf^xi;
}
    194c:	86 27       	eor	r24, r22
    194e:	08 95       	ret

00001950 <FUNCswap>:
// interchange *px and *py
void FUNCswap(long *px, long *py)
{
    1950:	cf 92       	push	r12
    1952:	df 92       	push	r13
    1954:	ef 92       	push	r14
    1956:	ff 92       	push	r15
    1958:	0f 93       	push	r16
    195a:	1f 93       	push	r17
	long temp;
	temp = *px;
    195c:	fc 01       	movw	r30, r24
    195e:	00 81       	ld	r16, Z
    1960:	11 81       	ldd	r17, Z+1	; 0x01
    1962:	22 81       	ldd	r18, Z+2	; 0x02
    1964:	33 81       	ldd	r19, Z+3	; 0x03
	*px = *py;
    1966:	fb 01       	movw	r30, r22
    1968:	c0 80       	ld	r12, Z
    196a:	d1 80       	ldd	r13, Z+1	; 0x01
    196c:	e2 80       	ldd	r14, Z+2	; 0x02
    196e:	f3 80       	ldd	r15, Z+3	; 0x03
    1970:	fc 01       	movw	r30, r24
    1972:	c0 82       	st	Z, r12
    1974:	d1 82       	std	Z+1, r13	; 0x01
    1976:	e2 82       	std	Z+2, r14	; 0x02
    1978:	f3 82       	std	Z+3, r15	; 0x03
	*py = temp;
    197a:	fb 01       	movw	r30, r22
    197c:	00 83       	st	Z, r16
    197e:	11 83       	std	Z+1, r17	; 0x01
    1980:	22 83       	std	Z+2, r18	; 0x02
    1982:	33 83       	std	Z+3, r19	; 0x03
}
    1984:	1f 91       	pop	r17
    1986:	0f 91       	pop	r16
    1988:	ff 90       	pop	r15
    198a:	ef 90       	pop	r14
    198c:	df 90       	pop	r13
    198e:	cf 90       	pop	r12
    1990:	08 95       	ret

00001992 <FUNCcopy>:
// copy: copy 'from' into 'to'; assume to is big enough
void FUNCcopy(char to[], char from[])
{
	int i;
	i = 0;
	while ((to[i] = from[i]) != '\0')
    1992:	fb 01       	movw	r30, r22
    1994:	20 81       	ld	r18, Z
    1996:	fc 01       	movw	r30, r24
    1998:	20 83       	st	Z, r18
    199a:	22 23       	and	r18, r18
    199c:	39 f0       	breq	.+14     	; 0x19ac <FUNCcopy+0x1a>
    199e:	db 01       	movw	r26, r22
    19a0:	11 96       	adiw	r26, 0x01	; 1
    19a2:	31 96       	adiw	r30, 0x01	; 1
    19a4:	9d 91       	ld	r25, X+
    19a6:	91 93       	st	Z+, r25
    19a8:	91 11       	cpse	r25, r1
    19aa:	fc cf       	rjmp	.-8      	; 0x19a4 <FUNCcopy+0x12>
    19ac:	08 95       	ret

000019ae <FUNCsqueeze>:
		++i;
}
// squeeze: delete all c from s
void FUNCsqueeze(char s[], int c)
{
    19ae:	cf 93       	push	r28
    19b0:	df 93       	push	r29
    19b2:	ec 01       	movw	r28, r24
	int i, j;
	for (i = j = 0; s[i] != '\0'; i++)
    19b4:	98 81       	ld	r25, Y
    19b6:	99 23       	and	r25, r25
    19b8:	99 f0       	breq	.+38     	; 0x19e0 <FUNCsqueeze+0x32>
    19ba:	fe 01       	movw	r30, r28
    19bc:	31 96       	adiw	r30, 0x01	; 1
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	30 e0       	ldi	r19, 0x00	; 0
		if (s[i] != c)
    19c2:	49 2f       	mov	r20, r25
    19c4:	50 e0       	ldi	r21, 0x00	; 0
    19c6:	46 17       	cp	r20, r22
    19c8:	57 07       	cpc	r21, r23
    19ca:	31 f0       	breq	.+12     	; 0x19d8 <FUNCsqueeze+0x2a>
			s[j++] = s[i];
    19cc:	de 01       	movw	r26, r28
    19ce:	a2 0f       	add	r26, r18
    19d0:	b3 1f       	adc	r27, r19
    19d2:	9c 93       	st	X, r25
    19d4:	2f 5f       	subi	r18, 0xFF	; 255
    19d6:	3f 4f       	sbci	r19, 0xFF	; 255
}
// squeeze: delete all c from s
void FUNCsqueeze(char s[], int c)
{
	int i, j;
	for (i = j = 0; s[i] != '\0'; i++)
    19d8:	91 91       	ld	r25, Z+
    19da:	91 11       	cpse	r25, r1
    19dc:	f2 cf       	rjmp	.-28     	; 0x19c2 <FUNCsqueeze+0x14>
    19de:	02 c0       	rjmp	.+4      	; 0x19e4 <FUNCsqueeze+0x36>
    19e0:	20 e0       	ldi	r18, 0x00	; 0
    19e2:	30 e0       	ldi	r19, 0x00	; 0
		if (s[i] != c)
			s[j++] = s[i];
		s[j] = '\0';
    19e4:	fe 01       	movw	r30, r28
    19e6:	e2 0f       	add	r30, r18
    19e8:	f3 1f       	adc	r31, r19
    19ea:	10 82       	st	Z, r1
}
    19ec:	df 91       	pop	r29
    19ee:	cf 91       	pop	r28
    19f0:	08 95       	ret

000019f2 <FUNCshellsort>:
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
    19f2:	2f 92       	push	r2
    19f4:	3f 92       	push	r3
    19f6:	4f 92       	push	r4
    19f8:	5f 92       	push	r5
    19fa:	6f 92       	push	r6
    19fc:	7f 92       	push	r7
    19fe:	8f 92       	push	r8
    1a00:	9f 92       	push	r9
    1a02:	af 92       	push	r10
    1a04:	bf 92       	push	r11
    1a06:	cf 92       	push	r12
    1a08:	df 92       	push	r13
    1a0a:	ef 92       	push	r14
    1a0c:	ff 92       	push	r15
    1a0e:	0f 93       	push	r16
    1a10:	1f 93       	push	r17
    1a12:	cf 93       	push	r28
    1a14:	df 93       	push	r29
    1a16:	00 d0       	rcall	.+0      	; 0x1a18 <FUNCshellsort+0x26>
    1a18:	00 d0       	rcall	.+0      	; 0x1a1a <FUNCshellsort+0x28>
    1a1a:	cd b7       	in	r28, 0x3d	; 61
    1a1c:	de b7       	in	r29, 0x3e	; 62
    1a1e:	2c 01       	movw	r4, r24
    1a20:	1b 01       	movw	r2, r22
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
    1a22:	4b 01       	movw	r8, r22
    1a24:	77 23       	and	r23, r23
    1a26:	1c f4       	brge	.+6      	; 0x1a2e <FUNCshellsort+0x3c>
    1a28:	2f ef       	ldi	r18, 0xFF	; 255
    1a2a:	82 1a       	sub	r8, r18
    1a2c:	92 0a       	sbc	r9, r18
    1a2e:	95 94       	asr	r9
    1a30:	87 94       	ror	r8
    1a32:	18 14       	cp	r1, r8
    1a34:	19 04       	cpc	r1, r9
    1a36:	0c f4       	brge	.+2      	; 0x1a3a <FUNCshellsort+0x48>
    1a38:	51 c0       	rjmp	.+162    	; 0x1adc <FUNCshellsort+0xea>
    1a3a:	6a c0       	rjmp	.+212    	; 0x1b10 <FUNCshellsort+0x11e>
		for (i = gap; i < n; i++)
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
    1a3c:	96 01       	movw	r18, r12
    1a3e:	dd 20       	and	r13, r13
    1a40:	9c f1       	brlt	.+102    	; 0x1aa8 <FUNCshellsort+0xb6>
    1a42:	f5 01       	movw	r30, r10
    1a44:	40 81       	ld	r20, Z
    1a46:	51 81       	ldd	r21, Z+1	; 0x01
    1a48:	f4 01       	movw	r30, r8
    1a4a:	60 81       	ld	r22, Z
    1a4c:	71 81       	ldd	r23, Z+1	; 0x01
    1a4e:	64 17       	cp	r22, r20
    1a50:	75 07       	cpc	r23, r21
    1a52:	54 f5       	brge	.+84     	; 0x1aa8 <FUNCshellsort+0xb6>
    1a54:	8c 01       	movw	r16, r24
    1a56:	0a 0d       	add	r16, r10
    1a58:	1b 1d       	adc	r17, r11
    1a5a:	d4 01       	movw	r26, r8
    1a5c:	bc 82       	std	Y+4, r11	; 0x04
    1a5e:	ab 82       	std	Y+3, r10	; 0x03
    1a60:	ba 82       	std	Y+2, r11	; 0x02
    1a62:	a9 82       	std	Y+1, r10	; 0x01
				temp = v[j];
				v[j] = v[j+gap];
    1a64:	eb 81       	ldd	r30, Y+3	; 0x03
    1a66:	fc 81       	ldd	r31, Y+4	; 0x04
    1a68:	71 83       	std	Z+1, r23	; 0x01
    1a6a:	60 83       	st	Z, r22
				v[j+gap] = temp;
    1a6c:	11 96       	adiw	r26, 0x01	; 1
    1a6e:	5c 93       	st	X, r21
    1a70:	4e 93       	st	-X, r20
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
		for (i = gap; i < n; i++)
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
    1a72:	2e 19       	sub	r18, r14
    1a74:	3f 09       	sbc	r19, r15
    1a76:	c2 f0       	brmi	.+48     	; 0x1aa8 <FUNCshellsort+0xb6>
    1a78:	f8 01       	movw	r30, r16
    1a7a:	40 81       	ld	r20, Z
    1a7c:	51 81       	ldd	r21, Z+1	; 0x01
    1a7e:	e9 81       	ldd	r30, Y+1	; 0x01
    1a80:	fa 81       	ldd	r31, Y+2	; 0x02
    1a82:	60 81       	ld	r22, Z
    1a84:	71 81       	ldd	r23, Z+1	; 0x01
    1a86:	08 0f       	add	r16, r24
    1a88:	19 1f       	adc	r17, r25
    1a8a:	e8 0f       	add	r30, r24
    1a8c:	f9 1f       	adc	r31, r25
    1a8e:	fa 83       	std	Y+2, r31	; 0x02
    1a90:	e9 83       	std	Y+1, r30	; 0x01
    1a92:	eb 81       	ldd	r30, Y+3	; 0x03
    1a94:	fc 81       	ldd	r31, Y+4	; 0x04
    1a96:	e8 0f       	add	r30, r24
    1a98:	f9 1f       	adc	r31, r25
    1a9a:	fc 83       	std	Y+4, r31	; 0x04
    1a9c:	eb 83       	std	Y+3, r30	; 0x03
    1a9e:	a8 0f       	add	r26, r24
    1aa0:	b9 1f       	adc	r27, r25
    1aa2:	64 17       	cp	r22, r20
    1aa4:	75 07       	cpc	r23, r21
    1aa6:	f4 f2       	brlt	.-68     	; 0x1a64 <FUNCshellsort+0x72>
    1aa8:	ff ef       	ldi	r31, 0xFF	; 255
    1aaa:	cf 1a       	sub	r12, r31
    1aac:	df 0a       	sbc	r13, r31
    1aae:	22 e0       	ldi	r18, 0x02	; 2
    1ab0:	a2 0e       	add	r10, r18
    1ab2:	b1 1c       	adc	r11, r1
    1ab4:	e2 e0       	ldi	r30, 0x02	; 2
    1ab6:	8e 0e       	add	r8, r30
    1ab8:	91 1c       	adc	r9, r1
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
		for (i = gap; i < n; i++)
    1aba:	c6 14       	cp	r12, r6
    1abc:	d7 04       	cpc	r13, r7
    1abe:	09 f0       	breq	.+2      	; 0x1ac2 <FUNCshellsort+0xd0>
    1ac0:	bd cf       	rjmp	.-134    	; 0x1a3c <FUNCshellsort+0x4a>
}
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
    1ac2:	47 01       	movw	r8, r14
    1ac4:	ff 20       	and	r15, r15
    1ac6:	1c f4       	brge	.+6      	; 0x1ace <FUNCshellsort+0xdc>
    1ac8:	ff ef       	ldi	r31, 0xFF	; 255
    1aca:	8f 1a       	sub	r8, r31
    1acc:	9f 0a       	sbc	r9, r31
    1ace:	95 94       	asr	r9
    1ad0:	87 94       	ror	r8
    1ad2:	18 14       	cp	r1, r8
    1ad4:	19 04       	cpc	r1, r9
    1ad6:	e4 f4       	brge	.+56     	; 0x1b10 <FUNCshellsort+0x11e>
    1ad8:	74 01       	movw	r14, r8
    1ada:	01 c0       	rjmp	.+2      	; 0x1ade <FUNCshellsort+0xec>
    1adc:	74 01       	movw	r14, r8
		for (i = gap; i < n; i++)
    1ade:	82 14       	cp	r8, r2
    1ae0:	93 04       	cpc	r9, r3
    1ae2:	7c f7       	brge	.-34     	; 0x1ac2 <FUNCshellsort+0xd0>
    1ae4:	64 01       	movw	r12, r8
    1ae6:	ce 18       	sub	r12, r14
    1ae8:	df 08       	sbc	r13, r15
    1aea:	56 01       	movw	r10, r12
    1aec:	aa 0c       	add	r10, r10
    1aee:	bb 1c       	adc	r11, r11
    1af0:	a4 0c       	add	r10, r4
    1af2:	b5 1c       	adc	r11, r5
    1af4:	88 0c       	add	r8, r8
    1af6:	99 1c       	adc	r9, r9
    1af8:	84 0c       	add	r8, r4
    1afa:	95 1c       	adc	r9, r5
    1afc:	31 01       	movw	r6, r2
    1afe:	6e 18       	sub	r6, r14
    1b00:	7f 08       	sbc	r7, r15
    1b02:	c7 01       	movw	r24, r14
    1b04:	88 0f       	add	r24, r24
    1b06:	99 1f       	adc	r25, r25
    1b08:	91 95       	neg	r25
    1b0a:	81 95       	neg	r24
    1b0c:	91 09       	sbc	r25, r1
    1b0e:	96 cf       	rjmp	.-212    	; 0x1a3c <FUNCshellsort+0x4a>
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
				temp = v[j];
				v[j] = v[j+gap];
				v[j+gap] = temp;
			}
}
    1b10:	0f 90       	pop	r0
    1b12:	0f 90       	pop	r0
    1b14:	0f 90       	pop	r0
    1b16:	0f 90       	pop	r0
    1b18:	df 91       	pop	r29
    1b1a:	cf 91       	pop	r28
    1b1c:	1f 91       	pop	r17
    1b1e:	0f 91       	pop	r16
    1b20:	ff 90       	pop	r15
    1b22:	ef 90       	pop	r14
    1b24:	df 90       	pop	r13
    1b26:	cf 90       	pop	r12
    1b28:	bf 90       	pop	r11
    1b2a:	af 90       	pop	r10
    1b2c:	9f 90       	pop	r9
    1b2e:	8f 90       	pop	r8
    1b30:	7f 90       	pop	r7
    1b32:	6f 90       	pop	r6
    1b34:	5f 90       	pop	r5
    1b36:	4f 90       	pop	r4
    1b38:	3f 90       	pop	r3
    1b3a:	2f 90       	pop	r2
    1b3c:	08 95       	ret

00001b3e <FUNCpmax>:
	if(a1 > a2){
		biggest = a1;
	}else{
		biggest = a2;
	}
	return biggest;
    1b3e:	86 17       	cp	r24, r22
    1b40:	97 07       	cpc	r25, r23
    1b42:	0c f4       	brge	.+2      	; 0x1b46 <FUNCpmax+0x8>
    1b44:	cb 01       	movw	r24, r22
}
    1b46:	08 95       	ret

00001b48 <FUNCgcd>:
// common divisor
int FUNCgcd (int u, int v)
{
    1b48:	9b 01       	movw	r18, r22
	int temp;
	while ( v != 0 ) {
    1b4a:	67 2b       	or	r22, r23
    1b4c:	11 f4       	brne	.+4      	; 0x1b52 <FUNCgcd+0xa>
    1b4e:	08 95       	ret
		temp = u % v;
		u = v;
		v = temp;
    1b50:	9a 01       	movw	r18, r20
// common divisor
int FUNCgcd (int u, int v)
{
	int temp;
	while ( v != 0 ) {
		temp = u % v;
    1b52:	b9 01       	movw	r22, r18
    1b54:	0e 94 39 18 	call	0x3072	; 0x3072 <__divmodhi4>
    1b58:	ac 01       	movw	r20, r24
    1b5a:	82 2f       	mov	r24, r18
    1b5c:	93 2f       	mov	r25, r19
}
// common divisor
int FUNCgcd (int u, int v)
{
	int temp;
	while ( v != 0 ) {
    1b5e:	41 15       	cp	r20, r1
    1b60:	51 05       	cpc	r21, r1
    1b62:	b1 f7       	brne	.-20     	; 0x1b50 <FUNCgcd+0x8>
		temp = u % v;
		u = v;
		v = temp;
	}
	return u;
}
    1b64:	08 95       	ret

00001b66 <FUNCstrToInt>:
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
    1b66:	fc 01       	movw	r30, r24
	int i, intValue, result = 0;
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
    1b68:	90 81       	ld	r25, Z
    1b6a:	80 ed       	ldi	r24, 0xD0	; 208
    1b6c:	89 0f       	add	r24, r25
    1b6e:	8a 30       	cpi	r24, 0x0A	; 10
    1b70:	d0 f4       	brcc	.+52     	; 0x1ba6 <FUNCstrToInt+0x40>
    1b72:	31 96       	adiw	r30, 0x01	; 1
    1b74:	20 e0       	ldi	r18, 0x00	; 0
    1b76:	30 e0       	ldi	r19, 0x00	; 0
		intValue = string[i] - '0';
		result = result * 10 + intValue;
    1b78:	a9 01       	movw	r20, r18
    1b7a:	44 0f       	add	r20, r20
    1b7c:	55 1f       	adc	r21, r21
    1b7e:	22 0f       	add	r18, r18
    1b80:	33 1f       	adc	r19, r19
    1b82:	22 0f       	add	r18, r18
    1b84:	33 1f       	adc	r19, r19
    1b86:	22 0f       	add	r18, r18
    1b88:	33 1f       	adc	r19, r19
    1b8a:	42 0f       	add	r20, r18
    1b8c:	53 1f       	adc	r21, r19
    1b8e:	29 2f       	mov	r18, r25
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	20 53       	subi	r18, 0x30	; 48
    1b94:	31 09       	sbc	r19, r1
    1b96:	24 0f       	add	r18, r20
    1b98:	35 1f       	adc	r19, r21
}
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
	int i, intValue, result = 0;
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
    1b9a:	91 91       	ld	r25, Z+
    1b9c:	80 ed       	ldi	r24, 0xD0	; 208
    1b9e:	89 0f       	add	r24, r25
    1ba0:	8a 30       	cpi	r24, 0x0A	; 10
    1ba2:	50 f3       	brcs	.-44     	; 0x1b78 <FUNCstrToInt+0x12>
    1ba4:	02 c0       	rjmp	.+4      	; 0x1baa <FUNCstrToInt+0x44>
	return u;
}
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
	int i, intValue, result = 0;
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
		intValue = string[i] - '0';
		result = result * 10 + intValue;
	}
	return result;
}
    1baa:	c9 01       	movw	r24, r18
    1bac:	08 95       	ret

00001bae <FUNCfilter>:
uint8_t FUNCfilter(uint8_t mask, uint8_t data)
{
	uint8_t Z;
	Z=mask & data;
	return Z;
}
    1bae:	86 23       	and	r24, r22
    1bb0:	08 95       	ret

00001bb2 <FUNCticks>:
// ticks
unsigned int FUNCticks(unsigned int num)
{
	unsigned int count;
	for(count=0;count<num;count++)
    1bb2:	00 97       	sbiw	r24, 0x00	; 0
    1bb4:	39 f0       	breq	.+14     	; 0x1bc4 <FUNCticks+0x12>
    1bb6:	20 e0       	ldi	r18, 0x00	; 0
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	2f 5f       	subi	r18, 0xFF	; 255
    1bbc:	3f 4f       	sbci	r19, 0xFF	; 255
    1bbe:	82 17       	cp	r24, r18
    1bc0:	93 07       	cpc	r25, r19
    1bc2:	d9 f7       	brne	.-10     	; 0x1bba <FUNCticks+0x8>
		;
	return count;
}
    1bc4:	08 95       	ret

00001bc6 <FUNCtwocomptoint8bit>:
// Two's Complement function
int FUNCtwocomptoint8bit(int twoscomp){
  
  //Let's see if the byte is negative
  if (twoscomp & 0B10000000){
    1bc6:	87 ff       	sbrs	r24, 7
    1bc8:	08 c0       	rjmp	.+16     	; 0x1bda <FUNCtwocomptoint8bit+0x14>
    //Invert
    twoscomp = ~twoscomp + 1;
    1bca:	91 95       	neg	r25
    1bcc:	81 95       	neg	r24
    1bce:	91 09       	sbc	r25, r1
	twoscomp = (twoscomp & 0B11111111);
    //Cast as int and multiply by negative one
    int value = (int)(twoscomp)*(-1);
    1bd0:	99 27       	eor	r25, r25
    1bd2:	91 95       	neg	r25
    1bd4:	81 95       	neg	r24
    1bd6:	91 09       	sbc	r25, r1
    return value;
    1bd8:	08 95       	ret
    //Byte is non-negative, therefore convert to decimal and display
    //Make sure we are never over 1279
    twoscomp = (twoscomp & 0B01111111);
    //Cast as int and return
    int value = (int)(twoscomp);
    return value;
    1bda:	8f 77       	andi	r24, 0x7F	; 127
    1bdc:	99 27       	eor	r25, r25
  }
}
    1bde:	08 95       	ret

00001be0 <FUNCtwocomptoint10bit>:
// Two's Complement function, shifts 10 bit binary to signed integers (-512 to 512)
int FUNCtwocomptoint10bit(int twoscomp){
	
  //Let's see if the byte is negative
  if (twoscomp & 0x200){
    1be0:	91 ff       	sbrs	r25, 1
    1be2:	08 c0       	rjmp	.+16     	; 0x1bf4 <FUNCtwocomptoint10bit+0x14>
    //Invert
    twoscomp = ~twoscomp + 1;
    1be4:	91 95       	neg	r25
    1be6:	81 95       	neg	r24
    1be8:	91 09       	sbc	r25, r1
    twoscomp = (twoscomp & 0x3FF);
    //Cast as int and multiply by negative one
    int value = (int)(twoscomp)*(-1);
    1bea:	93 70       	andi	r25, 0x03	; 3
    1bec:	91 95       	neg	r25
    1bee:	81 95       	neg	r24
    1bf0:	91 09       	sbc	r25, r1
    return value;
    1bf2:	08 95       	ret
    //Byte is non-negative, therefore convert to decimal and display
    twoscomp = (twoscomp & 0x1FF);
    //Cast as int and return
    //Serial.println(twoscomp);
    int value = (int)(twoscomp);
    return value;
    1bf4:	91 70       	andi	r25, 0x01	; 1
  }
}
    1bf6:	08 95       	ret

00001bf8 <FUNCtwocomptointnbit>:
// Two's Complement function, nbits
int FUNCtwocomptointnbit(int twoscomp, uint8_t nbits){
  unsigned int signmask;
  unsigned int mask;
  signmask = (1<<(nbits-1));
    1bf8:	61 50       	subi	r22, 0x01	; 1
    1bfa:	21 e0       	ldi	r18, 0x01	; 1
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	02 c0       	rjmp	.+4      	; 0x1c04 <FUNCtwocomptointnbit+0xc>
    1c00:	22 0f       	add	r18, r18
    1c02:	33 1f       	adc	r19, r19
    1c04:	6a 95       	dec	r22
    1c06:	e2 f7       	brpl	.-8      	; 0x1c00 <FUNCtwocomptointnbit+0x8>
  mask=signmask-1;
    1c08:	a9 01       	movw	r20, r18
    1c0a:	41 50       	subi	r20, 0x01	; 1
    1c0c:	51 09       	sbc	r21, r1
  //Let's see if the number is negative
  if (twoscomp & signmask){
    1c0e:	b9 01       	movw	r22, r18
    1c10:	68 23       	and	r22, r24
    1c12:	79 23       	and	r23, r25
    1c14:	67 2b       	or	r22, r23
    1c16:	29 f0       	breq	.+10     	; 0x1c22 <FUNCtwocomptointnbit+0x2a>
	twoscomp &= mask;
    twoscomp -= signmask;
    1c18:	84 23       	and	r24, r20
    1c1a:	95 23       	and	r25, r21
    1c1c:	82 1b       	sub	r24, r18
    1c1e:	93 0b       	sbc	r25, r19
    1c20:	08 95       	ret
  }else{
	  twoscomp &= mask;
    1c22:	84 23       	and	r24, r20
    1c24:	95 23       	and	r25, r21
  }
  return twoscomp;
}
    1c26:	08 95       	ret

00001c28 <FUNCdec2bcd>:
// Convert Decimal to Binary Coded Decimal (BCD)
char FUNCdec2bcd(char num)
{
	return ((num/10 * 16) + (num % 10));
    1c28:	9d ec       	ldi	r25, 0xCD	; 205
    1c2a:	89 9f       	mul	r24, r25
    1c2c:	91 2d       	mov	r25, r1
    1c2e:	11 24       	eor	r1, r1
    1c30:	96 95       	lsr	r25
    1c32:	96 95       	lsr	r25
    1c34:	96 95       	lsr	r25
    1c36:	39 2f       	mov	r19, r25
    1c38:	33 0f       	add	r19, r19
    1c3a:	23 2f       	mov	r18, r19
    1c3c:	22 0f       	add	r18, r18
    1c3e:	22 0f       	add	r18, r18
    1c40:	23 0f       	add	r18, r19
    1c42:	82 1b       	sub	r24, r18
}
    1c44:	20 e1       	ldi	r18, 0x10	; 16
    1c46:	92 9f       	mul	r25, r18
    1c48:	80 0d       	add	r24, r0
    1c4a:	11 24       	eor	r1, r1
    1c4c:	08 95       	ret

00001c4e <FUNCbcd2dec>:
// Convert Binary Coded Decimal (BCD) to Decimal
char FUNCbcd2dec(char num)
{
	return ((num/16 * 10) + (num % 16));
    1c4e:	98 2f       	mov	r25, r24
    1c50:	92 95       	swap	r25
    1c52:	9f 70       	andi	r25, 0x0F	; 15
    1c54:	99 0f       	add	r25, r25
    1c56:	29 2f       	mov	r18, r25
    1c58:	22 0f       	add	r18, r18
    1c5a:	22 0f       	add	r18, r18
    1c5c:	92 0f       	add	r25, r18
    1c5e:	8f 70       	andi	r24, 0x0F	; 15
}
    1c60:	89 0f       	add	r24, r25
    1c62:	08 95       	ret

00001c64 <FUNCresizestr>:
char* FUNCresizestr(char *string, int size)
{
    1c64:	fc 01       	movw	r30, r24
	int i;
	FUNCstr[size]='\0';
    1c66:	db 01       	movw	r26, r22
    1c68:	a1 5b       	subi	r26, 0xB1	; 177
    1c6a:	bd 4f       	sbci	r27, 0xFD	; 253
    1c6c:	1c 92       	st	X, r1
	for(i=0;i<size;i++){
    1c6e:	16 16       	cp	r1, r22
    1c70:	17 06       	cpc	r1, r23
    1c72:	14 f5       	brge	.+68     	; 0x1cb8 <FUNCresizestr+0x54>
		if(*(string+i)=='\0'){
    1c74:	90 81       	ld	r25, Z
    1c76:	91 11       	cpse	r25, r1
    1c78:	0c c0       	rjmp	.+24     	; 0x1c92 <FUNCresizestr+0x2e>
    1c7a:	17 c0       	rjmp	.+46     	; 0x1caa <FUNCresizestr+0x46>
    1c7c:	91 91       	ld	r25, Z+
    1c7e:	91 11       	cpse	r25, r1
    1c80:	0d c0       	rjmp	.+26     	; 0x1c9c <FUNCresizestr+0x38>
    1c82:	15 c0       	rjmp	.+42     	; 0x1cae <FUNCresizestr+0x4a>
			for(;i<size;i++){
				FUNCstr[i]=' ';
    1c84:	81 93       	st	Z+, r24
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
		if(*(string+i)=='\0'){
			for(;i<size;i++){
    1c86:	2f 5f       	subi	r18, 0xFF	; 255
    1c88:	3f 4f       	sbci	r19, 0xFF	; 255
    1c8a:	26 17       	cp	r18, r22
    1c8c:	37 07       	cpc	r19, r23
    1c8e:	d4 f3       	brlt	.-12     	; 0x1c84 <FUNCresizestr+0x20>
    1c90:	13 c0       	rjmp	.+38     	; 0x1cb8 <FUNCresizestr+0x54>
    1c92:	af e4       	ldi	r26, 0x4F	; 79
    1c94:	b2 e0       	ldi	r27, 0x02	; 2
    1c96:	31 96       	adiw	r30, 0x01	; 1
char* FUNCresizestr(char *string, int size)
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
		if(*(string+i)=='\0'){
    1c98:	20 e0       	ldi	r18, 0x00	; 0
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
			for(;i<size;i++){
				FUNCstr[i]=' ';
			}
			break;
		}
		FUNCstr[i]=*(string+i);
    1c9c:	9d 93       	st	X+, r25
}
char* FUNCresizestr(char *string, int size)
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
    1c9e:	2f 5f       	subi	r18, 0xFF	; 255
    1ca0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ca2:	62 17       	cp	r22, r18
    1ca4:	73 07       	cpc	r23, r19
    1ca6:	51 f7       	brne	.-44     	; 0x1c7c <FUNCresizestr+0x18>
    1ca8:	07 c0       	rjmp	.+14     	; 0x1cb8 <FUNCresizestr+0x54>
    1caa:	20 e0       	ldi	r18, 0x00	; 0
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	f9 01       	movw	r30, r18
    1cb0:	e1 5b       	subi	r30, 0xB1	; 177
    1cb2:	fd 4f       	sbci	r31, 0xFD	; 253
		if(*(string+i)=='\0'){
			for(;i<size;i++){
				FUNCstr[i]=' ';
    1cb4:	80 e2       	ldi	r24, 0x20	; 32
    1cb6:	e6 cf       	rjmp	.-52     	; 0x1c84 <FUNCresizestr+0x20>
			break;
		}
		FUNCstr[i]=*(string+i);
	}
	return FUNCstr;
}
    1cb8:	8f e4       	ldi	r24, 0x4F	; 79
    1cba:	92 e0       	ldi	r25, 0x02	; 2
    1cbc:	08 95       	ret

00001cbe <FUNCtrimmer>:
long FUNCtrimmer(long x, long in_min, long in_max, long out_min, long out_max)
/*
	same as arduino map function.
*/
{
    1cbe:	4f 92       	push	r4
    1cc0:	5f 92       	push	r5
    1cc2:	6f 92       	push	r6
    1cc4:	7f 92       	push	r7
    1cc6:	af 92       	push	r10
    1cc8:	bf 92       	push	r11
    1cca:	cf 92       	push	r12
    1ccc:	df 92       	push	r13
    1cce:	ef 92       	push	r14
    1cd0:	ff 92       	push	r15
    1cd2:	0f 93       	push	r16
    1cd4:	1f 93       	push	r17
    1cd6:	cf 93       	push	r28
    1cd8:	df 93       	push	r29
    1cda:	cd b7       	in	r28, 0x3d	; 61
    1cdc:	de b7       	in	r29, 0x3e	; 62
    1cde:	29 01       	movw	r4, r18
    1ce0:	3a 01       	movw	r6, r20
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    1ce2:	9b 01       	movw	r18, r22
    1ce4:	ac 01       	movw	r20, r24
    1ce6:	24 19       	sub	r18, r4
    1ce8:	35 09       	sbc	r19, r5
    1cea:	46 09       	sbc	r20, r6
    1cec:	57 09       	sbc	r21, r7
    1cee:	89 89       	ldd	r24, Y+17	; 0x11
    1cf0:	9a 89       	ldd	r25, Y+18	; 0x12
    1cf2:	ab 89       	ldd	r26, Y+19	; 0x13
    1cf4:	bc 89       	ldd	r27, Y+20	; 0x14
    1cf6:	bc 01       	movw	r22, r24
    1cf8:	cd 01       	movw	r24, r26
    1cfa:	6a 19       	sub	r22, r10
    1cfc:	7b 09       	sbc	r23, r11
    1cfe:	8c 09       	sbc	r24, r12
    1d00:	9d 09       	sbc	r25, r13
    1d02:	0e 94 16 18 	call	0x302c	; 0x302c <__mulsi3>
    1d06:	a8 01       	movw	r20, r16
    1d08:	97 01       	movw	r18, r14
    1d0a:	24 19       	sub	r18, r4
    1d0c:	35 09       	sbc	r19, r5
    1d0e:	46 09       	sbc	r20, r6
    1d10:	57 09       	sbc	r21, r7
    1d12:	0e 94 6e 18 	call	0x30dc	; 0x30dc <__divmodsi4>
    1d16:	ca 01       	movw	r24, r20
    1d18:	b9 01       	movw	r22, r18
    1d1a:	6a 0d       	add	r22, r10
    1d1c:	7b 1d       	adc	r23, r11
    1d1e:	8c 1d       	adc	r24, r12
    1d20:	9d 1d       	adc	r25, r13
}
    1d22:	df 91       	pop	r29
    1d24:	cf 91       	pop	r28
    1d26:	1f 91       	pop	r17
    1d28:	0f 91       	pop	r16
    1d2a:	ff 90       	pop	r15
    1d2c:	ef 90       	pop	r14
    1d2e:	df 90       	pop	r13
    1d30:	cf 90       	pop	r12
    1d32:	bf 90       	pop	r11
    1d34:	af 90       	pop	r10
    1d36:	7f 90       	pop	r7
    1d38:	6f 90       	pop	r6
    1d3a:	5f 90       	pop	r5
    1d3c:	4f 90       	pop	r4
    1d3e:	08 95       	ret

00001d40 <Power>:
// power: raise base to n-th power; n >= 0
unsigned int Power(uint8_t base, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
    1d40:	70 e0       	ldi	r23, 0x00	; 0
    1d42:	61 15       	cp	r22, r1
    1d44:	71 05       	cpc	r23, r1
    1d46:	99 f0       	breq	.+38     	; 0x1d6e <Power+0x2e>
    1d48:	41 e0       	ldi	r20, 0x01	; 1
    1d4a:	50 e0       	ldi	r21, 0x00	; 0
    1d4c:	21 e0       	ldi	r18, 0x01	; 1
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
        p = p * base;
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	fa 01       	movw	r30, r20
    1d54:	e8 9f       	mul	r30, r24
    1d56:	a0 01       	movw	r20, r0
    1d58:	e9 9f       	mul	r30, r25
    1d5a:	50 0d       	add	r21, r0
    1d5c:	f8 9f       	mul	r31, r24
    1d5e:	50 0d       	add	r21, r0
    1d60:	11 24       	eor	r1, r1
// power: raise base to n-th power; n >= 0
unsigned int Power(uint8_t base, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
    1d62:	2f 5f       	subi	r18, 0xFF	; 255
    1d64:	3f 4f       	sbci	r19, 0xFF	; 255
    1d66:	62 17       	cp	r22, r18
    1d68:	73 07       	cpc	r23, r19
    1d6a:	98 f7       	brcc	.-26     	; 0x1d52 <Power+0x12>
    1d6c:	02 c0       	rjmp	.+4      	; 0x1d72 <Power+0x32>
}
// power: raise base to n-th power; n >= 0
unsigned int Power(uint8_t base, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    1d6e:	41 e0       	ldi	r20, 0x01	; 1
    1d70:	50 e0       	ldi	r21, 0x00	; 0
    for (i = 1; i <= n; ++i)
        p = p * base;
    return p;
}
    1d72:	ca 01       	movw	r24, r20
    1d74:	08 95       	ret

00001d76 <StringLength>:
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
	while ( string[count] != '\0' )
    1d76:	fc 01       	movw	r30, r24
    1d78:	20 81       	ld	r18, Z
    1d7a:	22 23       	and	r18, r18
    1d7c:	41 f0       	breq	.+16     	; 0x1d8e <StringLength+0x18>
    1d7e:	31 96       	adiw	r30, 0x01	; 1
    1d80:	80 e0       	ldi	r24, 0x00	; 0
    1d82:	90 e0       	ldi	r25, 0x00	; 0
		++count;
    1d84:	01 96       	adiw	r24, 0x01	; 1
}
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
	while ( string[count] != '\0' )
    1d86:	21 91       	ld	r18, Z+
    1d88:	21 11       	cpse	r18, r1
    1d8a:	fc cf       	rjmp	.-8      	; 0x1d84 <StringLength+0xe>
    1d8c:	08 95       	ret
    return p;
}
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
    1d8e:	80 e0       	ldi	r24, 0x00	; 0
    1d90:	90 e0       	ldi	r25, 0x00	; 0
	while ( string[count] != '\0' )
		++count;
	return count;
}
    1d92:	08 95       	ret

00001d94 <FUNCtrim>:
	s[i] = '\0';
	Reverse(s);
}
// trim: remove trailing blanks, tabs, newlines
int FUNCtrim(char s[])
{
    1d94:	cf 93       	push	r28
    1d96:	df 93       	push	r29
    1d98:	ec 01       	movw	r28, r24
	int n;
	for (n = StringLength(s)-1; n >= 0; n--)
    1d9a:	ed df       	rcall	.-38     	; 0x1d76 <StringLength>
    1d9c:	9c 01       	movw	r18, r24
    1d9e:	21 50       	subi	r18, 0x01	; 1
    1da0:	31 09       	sbc	r19, r1
    1da2:	62 f0       	brmi	.+24     	; 0x1dbc <FUNCtrim+0x28>
    1da4:	fe 01       	movw	r30, r28
    1da6:	e8 0f       	add	r30, r24
    1da8:	f9 1f       	adc	r31, r25
		if (s[n] != ' ' && s[n] != '\t' && s[n] != '\n')
    1daa:	92 91       	ld	r25, -Z
    1dac:	90 32       	cpi	r25, 0x20	; 32
    1dae:	19 f0       	breq	.+6      	; 0x1db6 <FUNCtrim+0x22>
    1db0:	99 50       	subi	r25, 0x09	; 9
    1db2:	92 30       	cpi	r25, 0x02	; 2
    1db4:	18 f4       	brcc	.+6      	; 0x1dbc <FUNCtrim+0x28>
}
// trim: remove trailing blanks, tabs, newlines
int FUNCtrim(char s[])
{
	int n;
	for (n = StringLength(s)-1; n >= 0; n--)
    1db6:	21 50       	subi	r18, 0x01	; 1
    1db8:	31 09       	sbc	r19, r1
    1dba:	b8 f7       	brcc	.-18     	; 0x1daa <FUNCtrim+0x16>
		if (s[n] != ' ' && s[n] != '\t' && s[n] != '\n')
			break;
	s[n+1] = '\0';
    1dbc:	c2 0f       	add	r28, r18
    1dbe:	d3 1f       	adc	r29, r19
    1dc0:	19 82       	std	Y+1, r1	; 0x01
	return n;
}
    1dc2:	c9 01       	movw	r24, r18
    1dc4:	df 91       	pop	r29
    1dc6:	cf 91       	pop	r28
    1dc8:	08 95       	ret

00001dca <Reverse>:
		++count;
	return count;
}
// reverse: reverse string s in place
void Reverse(char s[])
{
    1dca:	cf 93       	push	r28
    1dcc:	df 93       	push	r29
    1dce:	ec 01       	movw	r28, r24
	int c, i, j;
	for (i = 0, j = StringLength(s)-1; i < j; i++, j--){
    1dd0:	d2 df       	rcall	.-92     	; 0x1d76 <StringLength>
    1dd2:	9c 01       	movw	r18, r24
    1dd4:	21 50       	subi	r18, 0x01	; 1
    1dd6:	31 09       	sbc	r19, r1
    1dd8:	12 16       	cp	r1, r18
    1dda:	13 06       	cpc	r1, r19
    1ddc:	84 f4       	brge	.+32     	; 0x1dfe <Reverse+0x34>
    1dde:	de 01       	movw	r26, r28
    1de0:	a8 0f       	add	r26, r24
    1de2:	b9 1f       	adc	r27, r25
    1de4:	fe 01       	movw	r30, r28
    1de6:	80 e0       	ldi	r24, 0x00	; 0
    1de8:	90 e0       	ldi	r25, 0x00	; 0
		c = s[i];
    1dea:	40 81       	ld	r20, Z
		s[i] = s[j];
    1dec:	5e 91       	ld	r21, -X
    1dee:	51 93       	st	Z+, r21
		s[j] = c;
    1df0:	4c 93       	st	X, r20
}
// reverse: reverse string s in place
void Reverse(char s[])
{
	int c, i, j;
	for (i = 0, j = StringLength(s)-1; i < j; i++, j--){
    1df2:	01 96       	adiw	r24, 0x01	; 1
    1df4:	21 50       	subi	r18, 0x01	; 1
    1df6:	31 09       	sbc	r19, r1
    1df8:	82 17       	cp	r24, r18
    1dfa:	93 07       	cpc	r25, r19
    1dfc:	b4 f3       	brlt	.-20     	; 0x1dea <Reverse+0x20>
		c = s[i];
		s[i] = s[j];
		s[j] = c;
	}
}
    1dfe:	df 91       	pop	r29
    1e00:	cf 91       	pop	r28
    1e02:	08 95       	ret

00001e04 <FUNCi32toa>:
				v[j+gap] = temp;
			}
}
// i32toa: convert n to characters in s
void FUNCi32toa(int32_t n, char s[])
{
    1e04:	6f 92       	push	r6
    1e06:	7f 92       	push	r7
    1e08:	8f 92       	push	r8
    1e0a:	9f 92       	push	r9
    1e0c:	af 92       	push	r10
    1e0e:	bf 92       	push	r11
    1e10:	cf 92       	push	r12
    1e12:	df 92       	push	r13
    1e14:	ef 92       	push	r14
    1e16:	ff 92       	push	r15
    1e18:	0f 93       	push	r16
    1e1a:	1f 93       	push	r17
    1e1c:	cf 93       	push	r28
    1e1e:	df 93       	push	r29
    1e20:	6b 01       	movw	r12, r22
    1e22:	7c 01       	movw	r14, r24
    1e24:	ea 01       	movw	r28, r20
    1e26:	dc 01       	movw	r26, r24
    1e28:	cb 01       	movw	r24, r22
    1e2a:	ff 20       	and	r15, r15
    1e2c:	3c f4       	brge	.+14     	; 0x1e3c <FUNCi32toa+0x38>
    1e2e:	88 27       	eor	r24, r24
    1e30:	99 27       	eor	r25, r25
    1e32:	dc 01       	movw	r26, r24
    1e34:	8c 19       	sub	r24, r12
    1e36:	9d 09       	sbc	r25, r13
    1e38:	ae 09       	sbc	r26, r14
    1e3a:	bf 09       	sbc	r27, r15
    1e3c:	bc 01       	movw	r22, r24
    1e3e:	cd 01       	movw	r24, r26
    1e40:	71 2c       	mov	r7, r1
	int32_t sign;
	if ((sign = n) < 0) // record sign
	n = -n; // make n positive
	i = 0;
	do { // generate digits in reverse order
		s[i++] = n % 10 + '0'; // get next digit
    1e42:	0f 2e       	mov	r0, r31
    1e44:	fa e0       	ldi	r31, 0x0A	; 10
    1e46:	8f 2e       	mov	r8, r31
    1e48:	91 2c       	mov	r9, r1
    1e4a:	a1 2c       	mov	r10, r1
    1e4c:	b1 2c       	mov	r11, r1
    1e4e:	f0 2d       	mov	r31, r0
    1e50:	01 c0       	rjmp	.+2      	; 0x1e54 <FUNCi32toa+0x50>
    1e52:	76 2c       	mov	r7, r6
    1e54:	66 24       	eor	r6, r6
    1e56:	63 94       	inc	r6
    1e58:	67 0c       	add	r6, r7
    1e5a:	8e 01       	movw	r16, r28
    1e5c:	07 0d       	add	r16, r7
    1e5e:	11 1d       	adc	r17, r1
    1e60:	a5 01       	movw	r20, r10
    1e62:	94 01       	movw	r18, r8
    1e64:	0e 94 6e 18 	call	0x30dc	; 0x30dc <__divmodsi4>
    1e68:	60 5d       	subi	r22, 0xD0	; 208
    1e6a:	f8 01       	movw	r30, r16
    1e6c:	60 83       	st	Z, r22
	}while ((n /= 10) > 0); // delete it
    1e6e:	62 2f       	mov	r22, r18
    1e70:	73 2f       	mov	r23, r19
    1e72:	84 2f       	mov	r24, r20
    1e74:	95 2f       	mov	r25, r21
    1e76:	16 16       	cp	r1, r22
    1e78:	17 06       	cpc	r1, r23
    1e7a:	18 06       	cpc	r1, r24
    1e7c:	19 06       	cpc	r1, r25
    1e7e:	4c f3       	brlt	.-46     	; 0x1e52 <FUNCi32toa+0x4e>
	if (sign < 0)
    1e80:	ff 20       	and	r15, r15
    1e82:	4c f4       	brge	.+18     	; 0x1e96 <FUNCi32toa+0x92>
	s[i++] = '-';
    1e84:	fe 01       	movw	r30, r28
    1e86:	e6 0d       	add	r30, r6
    1e88:	f1 1d       	adc	r31, r1
    1e8a:	8d e2       	ldi	r24, 0x2D	; 45
    1e8c:	80 83       	st	Z, r24
    1e8e:	68 94       	set
    1e90:	66 24       	eor	r6, r6
    1e92:	61 f8       	bld	r6, 1
    1e94:	67 0c       	add	r6, r7
	s[i] = '\0';
    1e96:	fe 01       	movw	r30, r28
    1e98:	e6 0d       	add	r30, r6
    1e9a:	f1 1d       	adc	r31, r1
    1e9c:	10 82       	st	Z, r1
	Reverse(s);
    1e9e:	ce 01       	movw	r24, r28
    1ea0:	94 df       	rcall	.-216    	; 0x1dca <Reverse>
}
    1ea2:	df 91       	pop	r29
    1ea4:	cf 91       	pop	r28
    1ea6:	1f 91       	pop	r17
    1ea8:	0f 91       	pop	r16
    1eaa:	ff 90       	pop	r15
    1eac:	ef 90       	pop	r14
    1eae:	df 90       	pop	r13
    1eb0:	cf 90       	pop	r12
    1eb2:	bf 90       	pop	r11
    1eb4:	af 90       	pop	r10
    1eb6:	9f 90       	pop	r9
    1eb8:	8f 90       	pop	r8
    1eba:	7f 90       	pop	r7
    1ebc:	6f 90       	pop	r6
    1ebe:	08 95       	ret

00001ec0 <FUNCi16toa>:
// i16toa: convert n to characters in s
void FUNCi16toa(int16_t n, char s[])
{
    1ec0:	ef 92       	push	r14
    1ec2:	ff 92       	push	r15
    1ec4:	0f 93       	push	r16
    1ec6:	1f 93       	push	r17
    1ec8:	cf 93       	push	r28
    1eca:	df 93       	push	r29
    1ecc:	8c 01       	movw	r16, r24
    1ece:	eb 01       	movw	r28, r22
    1ed0:	99 23       	and	r25, r25
    1ed2:	24 f4       	brge	.+8      	; 0x1edc <FUNCi16toa+0x1c>
    1ed4:	88 27       	eor	r24, r24
    1ed6:	99 27       	eor	r25, r25
    1ed8:	80 1b       	sub	r24, r16
    1eda:	91 0b       	sbc	r25, r17
    1edc:	20 e0       	ldi	r18, 0x00	; 0
	int16_t sign;
	if ((sign = n) < 0) // record sign
		n = -n; // make n positive
	i = 0;
	do { // generate digits in reverse order
		s[i++] = n % 10 + '0'; // get next digit
    1ede:	0f 2e       	mov	r0, r31
    1ee0:	fa e0       	ldi	r31, 0x0A	; 10
    1ee2:	ef 2e       	mov	r14, r31
    1ee4:	f1 2c       	mov	r15, r1
    1ee6:	f0 2d       	mov	r31, r0
    1ee8:	01 c0       	rjmp	.+2      	; 0x1eec <FUNCi16toa+0x2c>
    1eea:	23 2f       	mov	r18, r19
    1eec:	31 e0       	ldi	r19, 0x01	; 1
    1eee:	32 0f       	add	r19, r18
    1ef0:	fe 01       	movw	r30, r28
    1ef2:	e2 0f       	add	r30, r18
    1ef4:	f1 1d       	adc	r31, r1
    1ef6:	b7 01       	movw	r22, r14
    1ef8:	0e 94 39 18 	call	0x3072	; 0x3072 <__divmodhi4>
    1efc:	80 5d       	subi	r24, 0xD0	; 208
    1efe:	80 83       	st	Z, r24
	}while ((n /= 10) > 0); // delete it
    1f00:	86 2f       	mov	r24, r22
    1f02:	97 2f       	mov	r25, r23
    1f04:	18 16       	cp	r1, r24
    1f06:	19 06       	cpc	r1, r25
    1f08:	84 f3       	brlt	.-32     	; 0x1eea <FUNCi16toa+0x2a>
	if (sign < 0)
    1f0a:	11 23       	and	r17, r17
    1f0c:	3c f4       	brge	.+14     	; 0x1f1c <FUNCi16toa+0x5c>
		s[i++] = '-';
    1f0e:	fe 01       	movw	r30, r28
    1f10:	e3 0f       	add	r30, r19
    1f12:	f1 1d       	adc	r31, r1
    1f14:	8d e2       	ldi	r24, 0x2D	; 45
    1f16:	80 83       	st	Z, r24
    1f18:	32 e0       	ldi	r19, 0x02	; 2
    1f1a:	32 0f       	add	r19, r18
	s[i] = '\0';
    1f1c:	fe 01       	movw	r30, r28
    1f1e:	e3 0f       	add	r30, r19
    1f20:	f1 1d       	adc	r31, r1
    1f22:	10 82       	st	Z, r1
	Reverse(s);
    1f24:	ce 01       	movw	r24, r28
    1f26:	51 df       	rcall	.-350    	; 0x1dca <Reverse>
}
    1f28:	df 91       	pop	r29
    1f2a:	cf 91       	pop	r28
    1f2c:	1f 91       	pop	r17
    1f2e:	0f 91       	pop	r16
    1f30:	ff 90       	pop	r15
    1f32:	ef 90       	pop	r14
    1f34:	08 95       	ret

00001f36 <FUNCui16toa>:
// ui16toa: convert n to characters in s
void FUNCui16toa(uint16_t n, char s[])
{
    1f36:	1f 93       	push	r17
    1f38:	cf 93       	push	r28
    1f3a:	df 93       	push	r29
    1f3c:	ac 01       	movw	r20, r24
    1f3e:	fb 01       	movw	r30, r22
	uint8_t i;
	i = 0;
    1f40:	80 e0       	ldi	r24, 0x00	; 0
	do { // generate digits in reverse order
		s[i++] = n % 10 + '0'; // get next digit
    1f42:	11 e0       	ldi	r17, 0x01	; 1
    1f44:	18 0f       	add	r17, r24
    1f46:	ef 01       	movw	r28, r30
    1f48:	c8 0f       	add	r28, r24
    1f4a:	d1 1d       	adc	r29, r1
    1f4c:	9a 01       	movw	r18, r20
    1f4e:	ad ec       	ldi	r26, 0xCD	; 205
    1f50:	bc ec       	ldi	r27, 0xCC	; 204
    1f52:	0e 94 93 18 	call	0x3126	; 0x3126 <__umulhisi3>
    1f56:	96 95       	lsr	r25
    1f58:	87 95       	ror	r24
    1f5a:	96 95       	lsr	r25
    1f5c:	87 95       	ror	r24
    1f5e:	96 95       	lsr	r25
    1f60:	87 95       	ror	r24
    1f62:	9c 01       	movw	r18, r24
    1f64:	22 0f       	add	r18, r18
    1f66:	33 1f       	adc	r19, r19
    1f68:	88 0f       	add	r24, r24
    1f6a:	99 1f       	adc	r25, r25
    1f6c:	88 0f       	add	r24, r24
    1f6e:	99 1f       	adc	r25, r25
    1f70:	88 0f       	add	r24, r24
    1f72:	99 1f       	adc	r25, r25
    1f74:	82 0f       	add	r24, r18
    1f76:	93 1f       	adc	r25, r19
    1f78:	9a 01       	movw	r18, r20
    1f7a:	28 1b       	sub	r18, r24
    1f7c:	39 0b       	sbc	r19, r25
    1f7e:	c9 01       	movw	r24, r18
    1f80:	80 5d       	subi	r24, 0xD0	; 208
    1f82:	88 83       	st	Y, r24
	}while ((n /= 10) > 0); // delete it
    1f84:	9a 01       	movw	r18, r20
    1f86:	0e 94 93 18 	call	0x3126	; 0x3126 <__umulhisi3>
    1f8a:	ac 01       	movw	r20, r24
    1f8c:	56 95       	lsr	r21
    1f8e:	47 95       	ror	r20
    1f90:	56 95       	lsr	r21
    1f92:	47 95       	ror	r20
    1f94:	56 95       	lsr	r21
    1f96:	47 95       	ror	r20
void FUNCui16toa(uint16_t n, char s[])
{
	uint8_t i;
	i = 0;
	do { // generate digits in reverse order
		s[i++] = n % 10 + '0'; // get next digit
    1f98:	81 2f       	mov	r24, r17
	}while ((n /= 10) > 0); // delete it
    1f9a:	41 15       	cp	r20, r1
    1f9c:	51 05       	cpc	r21, r1
    1f9e:	89 f6       	brne	.-94     	; 0x1f42 <FUNCui16toa+0xc>
	s[i] = '\0';
    1fa0:	df 01       	movw	r26, r30
    1fa2:	a1 0f       	add	r26, r17
    1fa4:	b1 1d       	adc	r27, r1
    1fa6:	1c 92       	st	X, r1
	Reverse(s);
    1fa8:	cf 01       	movw	r24, r30
    1faa:	0f df       	rcall	.-482    	; 0x1dca <Reverse>
}
    1fac:	df 91       	pop	r29
    1fae:	cf 91       	pop	r28
    1fb0:	1f 91       	pop	r17
    1fb2:	08 95       	ret

00001fb4 <FUNCbcd2bin>:
		s[j] = c;
	}
}
unsigned char FUNCbcd2bin(unsigned char val)
{
	return (val & 0x0f) + (val >> 4) * 10;
    1fb4:	98 2f       	mov	r25, r24
    1fb6:	92 95       	swap	r25
    1fb8:	9f 70       	andi	r25, 0x0F	; 15
    1fba:	99 0f       	add	r25, r25
    1fbc:	29 2f       	mov	r18, r25
    1fbe:	22 0f       	add	r18, r18
    1fc0:	22 0f       	add	r18, r18
    1fc2:	92 0f       	add	r25, r18
    1fc4:	8f 70       	andi	r24, 0x0F	; 15
}
    1fc6:	89 0f       	add	r24, r25
    1fc8:	08 95       	ret

00001fca <FUNCbin2bcd>:
unsigned char FUNCbin2bcd(unsigned val)
{
    1fca:	ac 01       	movw	r20, r24
	return ((val / 10) << 4) + val % 10;
    1fcc:	9c 01       	movw	r18, r24
    1fce:	ad ec       	ldi	r26, 0xCD	; 205
    1fd0:	bc ec       	ldi	r27, 0xCC	; 204
    1fd2:	0e 94 93 18 	call	0x3126	; 0x3126 <__umulhisi3>
    1fd6:	96 95       	lsr	r25
    1fd8:	87 95       	ror	r24
    1fda:	96 95       	lsr	r25
    1fdc:	87 95       	ror	r24
    1fde:	96 95       	lsr	r25
    1fe0:	87 95       	ror	r24
    1fe2:	bc 01       	movw	r22, r24
    1fe4:	66 0f       	add	r22, r22
    1fe6:	77 1f       	adc	r23, r23
    1fe8:	9c 01       	movw	r18, r24
    1fea:	22 0f       	add	r18, r18
    1fec:	33 1f       	adc	r19, r19
    1fee:	22 0f       	add	r18, r18
    1ff0:	33 1f       	adc	r19, r19
    1ff2:	22 0f       	add	r18, r18
    1ff4:	33 1f       	adc	r19, r19
    1ff6:	26 0f       	add	r18, r22
    1ff8:	37 1f       	adc	r19, r23
    1ffa:	42 1b       	sub	r20, r18
    1ffc:	53 0b       	sbc	r21, r19
}
    1ffe:	34 2f       	mov	r19, r20
    2000:	20 e1       	ldi	r18, 0x10	; 16
    2002:	82 9f       	mul	r24, r18
    2004:	30 0d       	add	r19, r0
    2006:	11 24       	eor	r1, r1
    2008:	83 2f       	mov	r24, r19
    200a:	08 95       	ret

0000200c <FUNCgcd1>:
long FUNCgcd1(long a, long b)
{
    200c:	cf 92       	push	r12
    200e:	df 92       	push	r13
    2010:	ef 92       	push	r14
    2012:	ff 92       	push	r15
    2014:	cf 93       	push	r28
    2016:	df 93       	push	r29
    2018:	cd b7       	in	r28, 0x3d	; 61
    201a:	de b7       	in	r29, 0x3e	; 62
    201c:	28 97       	sbiw	r28, 0x08	; 8
    201e:	0f b6       	in	r0, 0x3f	; 63
    2020:	f8 94       	cli
    2022:	de bf       	out	0x3e, r29	; 62
    2024:	0f be       	out	0x3f, r0	; 63
    2026:	cd bf       	out	0x3d, r28	; 61
    2028:	6b 01       	movw	r12, r22
    202a:	7c 01       	movw	r14, r24
    202c:	69 83       	std	Y+1, r22	; 0x01
    202e:	7a 83       	std	Y+2, r23	; 0x02
    2030:	8b 83       	std	Y+3, r24	; 0x03
    2032:	9c 83       	std	Y+4, r25	; 0x04
    2034:	2d 83       	std	Y+5, r18	; 0x05
    2036:	3e 83       	std	Y+6, r19	; 0x06
    2038:	4f 83       	std	Y+7, r20	; 0x07
    203a:	58 87       	std	Y+8, r21	; 0x08
	long r;
	if (a < b)
    203c:	c2 16       	cp	r12, r18
    203e:	d3 06       	cpc	r13, r19
    2040:	e4 06       	cpc	r14, r20
    2042:	f5 06       	cpc	r15, r21
    2044:	34 f4       	brge	.+12     	; 0x2052 <FUNCgcd1+0x46>
		FUNCswap(&a, &b);
    2046:	be 01       	movw	r22, r28
    2048:	6b 5f       	subi	r22, 0xFB	; 251
    204a:	7f 4f       	sbci	r23, 0xFF	; 255
    204c:	ce 01       	movw	r24, r28
    204e:	01 96       	adiw	r24, 0x01	; 1
    2050:	7f dc       	rcall	.-1794   	; 0x1950 <FUNCswap>
	if (!b){
    2052:	8d 81       	ldd	r24, Y+5	; 0x05
    2054:	9e 81       	ldd	r25, Y+6	; 0x06
    2056:	af 81       	ldd	r26, Y+7	; 0x07
    2058:	b8 85       	ldd	r27, Y+8	; 0x08
    205a:	89 2b       	or	r24, r25
    205c:	8a 2b       	or	r24, r26
    205e:	8b 2b       	or	r24, r27
    2060:	71 f4       	brne	.+28     	; 0x207e <FUNCgcd1+0x72>
		while ((r = a % b) != 0) {
    2062:	69 81       	ldd	r22, Y+1	; 0x01
    2064:	7a 81       	ldd	r23, Y+2	; 0x02
    2066:	8b 81       	ldd	r24, Y+3	; 0x03
    2068:	9c 81       	ldd	r25, Y+4	; 0x04
    206a:	20 e0       	ldi	r18, 0x00	; 0
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	a9 01       	movw	r20, r18
    2070:	0e 94 6e 18 	call	0x30dc	; 0x30dc <__divmodsi4>
    2074:	61 15       	cp	r22, r1
    2076:	71 05       	cpc	r23, r1
    2078:	81 05       	cpc	r24, r1
    207a:	91 05       	cpc	r25, r1
    207c:	29 f4       	brne	.+10     	; 0x2088 <FUNCgcd1+0x7c>
			a = b;
			b = r;
		}
	}	
	return b;
    207e:	6d 81       	ldd	r22, Y+5	; 0x05
    2080:	7e 81       	ldd	r23, Y+6	; 0x06
    2082:	8f 81       	ldd	r24, Y+7	; 0x07
    2084:	98 85       	ldd	r25, Y+8	; 0x08
    2086:	05 c0       	rjmp	.+10     	; 0x2092 <FUNCgcd1+0x86>
	if (a < b)
		FUNCswap(&a, &b);
	if (!b){
		while ((r = a % b) != 0) {
			a = b;
			b = r;
    2088:	6d 83       	std	Y+5, r22	; 0x05
    208a:	7e 83       	std	Y+6, r23	; 0x06
    208c:	8f 83       	std	Y+7, r24	; 0x07
    208e:	98 87       	std	Y+8, r25	; 0x08
    2090:	f6 cf       	rjmp	.-20     	; 0x207e <FUNCgcd1+0x72>
		}
	}	
	return b;
}
    2092:	28 96       	adiw	r28, 0x08	; 8
    2094:	0f b6       	in	r0, 0x3f	; 63
    2096:	f8 94       	cli
    2098:	de bf       	out	0x3e, r29	; 62
    209a:	0f be       	out	0x3f, r0	; 63
    209c:	cd bf       	out	0x3d, r28	; 61
    209e:	df 91       	pop	r29
    20a0:	cf 91       	pop	r28
    20a2:	ff 90       	pop	r15
    20a4:	ef 90       	pop	r14
    20a6:	df 90       	pop	r13
    20a8:	cf 90       	pop	r12
    20aa:	08 95       	ret

000020ac <FUNCpincheck>:
	uint8_t lh;
	if(port & (1<<pin))
		lh=1;
	else
		lh=0;
	return lh;
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	02 c0       	rjmp	.+4      	; 0x20b4 <FUNCpincheck+0x8>
    20b0:	95 95       	asr	r25
    20b2:	87 95       	ror	r24
    20b4:	6a 95       	dec	r22
    20b6:	e2 f7       	brpl	.-8      	; 0x20b0 <FUNCpincheck+0x4>
}
    20b8:	81 70       	andi	r24, 0x01	; 1
    20ba:	08 95       	ret

000020bc <FUNCprint_binary>:
char* FUNCprint_binary(uint8_t number)
{
    20bc:	ef e4       	ldi	r30, 0x4F	; 79
    20be:	f2 e0       	ldi	r31, 0x02	; 2
	uint8_t i,c;
    for(i=128,c=0;i;i>>=1,c++){
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	20 e8       	ldi	r18, 0x80	; 128
	(number & i) ? (FUNCstr[c]='1') : (FUNCstr[c]='0');
    20c4:	50 e3       	ldi	r21, 0x30	; 48
    20c6:	41 e3       	ldi	r20, 0x31	; 49
    20c8:	38 2f       	mov	r19, r24
    20ca:	32 23       	and	r19, r18
    20cc:	11 f0       	breq	.+4      	; 0x20d2 <FUNCprint_binary+0x16>
    20ce:	40 83       	st	Z, r20
    20d0:	01 c0       	rjmp	.+2      	; 0x20d4 <FUNCprint_binary+0x18>
    20d2:	50 83       	st	Z, r21
	return lh;
}
char* FUNCprint_binary(uint8_t number)
{
	uint8_t i,c;
    for(i=128,c=0;i;i>>=1,c++){
    20d4:	26 95       	lsr	r18
    20d6:	9f 5f       	subi	r25, 0xFF	; 255
    20d8:	31 96       	adiw	r30, 0x01	; 1
    20da:	98 30       	cpi	r25, 0x08	; 8
    20dc:	a9 f7       	brne	.-22     	; 0x20c8 <FUNCprint_binary+0xc>
	(number & i) ? (FUNCstr[c]='1') : (FUNCstr[c]='0');
	}
	FUNCstr[c]='\0';
    20de:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <FUNCstr+0x8>
	return FUNCstr;
}
    20e2:	8f e4       	ldi	r24, 0x4F	; 79
    20e4:	92 e0       	ldi	r25, 0x02	; 2
    20e6:	08 95       	ret

000020e8 <FUNCmayia>:
// power: raise base to n-th power; n >= 0
unsigned int Power(uint8_t base, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
    20e8:	a4 2f       	mov	r26, r20
    20ea:	b0 e0       	ldi	r27, 0x00	; 0
    20ec:	10 97       	sbiw	r26, 0x00	; 0
    20ee:	61 f0       	breq	.+24     	; 0x2108 <FUNCmayia+0x20>
    20f0:	21 e0       	ldi	r18, 0x01	; 1
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	e1 e0       	ldi	r30, 0x01	; 1
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
        p = p * base;
    20f8:	ee 0f       	add	r30, r30
    20fa:	ff 1f       	adc	r31, r31
// power: raise base to n-th power; n >= 0
unsigned int Power(uint8_t base, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
    20fc:	2f 5f       	subi	r18, 0xFF	; 255
    20fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2100:	a2 17       	cp	r26, r18
    2102:	b3 07       	cpc	r27, r19
    2104:	c8 f7       	brcc	.-14     	; 0x20f8 <FUNCmayia+0x10>
    2106:	02 c0       	rjmp	.+4      	; 0x210c <FUNCmayia+0x24>
}
// power: raise base to n-th power; n >= 0
unsigned int Power(uint8_t base, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    2108:	e1 e0       	ldi	r30, 0x01	; 1
    210a:	f0 e0       	ldi	r31, 0x00	; 0
unsigned int FUNCmayia(unsigned int xi, unsigned int xf, uint8_t nbits)
{//magic formula
	unsigned int mask;
	unsigned int diff;
	unsigned int trans;
	mask=Power(2,nbits)-1;
    210c:	31 97       	sbiw	r30, 0x01	; 1
	xi&=mask;
	xf&=mask;
    210e:	6e 23       	and	r22, r30
    2110:	7f 23       	and	r23, r31
	diff=xf^xi;
    2112:	8e 23       	and	r24, r30
    2114:	9f 23       	and	r25, r31
    2116:	86 27       	eor	r24, r22
    2118:	97 27       	eor	r25, r23
	trans=diff&xf;
	return (trans<<nbits)|diff;
    211a:	68 23       	and	r22, r24
    211c:	79 23       	and	r23, r25
    211e:	02 c0       	rjmp	.+4      	; 0x2124 <FUNCmayia+0x3c>
    2120:	66 0f       	add	r22, r22
    2122:	77 1f       	adc	r23, r23
    2124:	4a 95       	dec	r20
    2126:	e2 f7       	brpl	.-8      	; 0x2120 <FUNCmayia+0x38>
}
    2128:	86 2b       	or	r24, r22
    212a:	97 2b       	or	r25, r23
    212c:	08 95       	ret

0000212e <FUNCenable>:
// uint8_t TRANupdate(struct TRAN *tr, uint8_t idata);
/*
** procedure and function
*/
FUNC FUNCenable( void )
{
    212e:	fc 01       	movw	r30, r24
	uint8_t tSREG;
	tSREG=SREG;
    2130:	9f b7       	in	r25, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    2132:	8f b7       	in	r24, 0x3f	; 63
    2134:	8f 77       	andi	r24, 0x7F	; 127
    2136:	8f bf       	out	0x3f, r24	; 63
	func.putstr=FUNCputstr;
	func.getnum=FUNCgetnum;
	func.getnumv2=FUNCgetnumv2;
	func.readint=FUNCreadint;
	*/
	SREG=tSREG;
    2138:	9f bf       	out	0x3f, r25	; 63
	/******/
	return func;
    213a:	80 ea       	ldi	r24, 0xA0	; 160
    213c:	9e e0       	ldi	r25, 0x0E	; 14
    213e:	91 83       	std	Z+1, r25	; 0x01
    2140:	80 83       	st	Z, r24
    2142:	8b eb       	ldi	r24, 0xBB	; 187
    2144:	9e e0       	ldi	r25, 0x0E	; 14
    2146:	93 83       	std	Z+3, r25	; 0x03
    2148:	82 83       	std	Z+2, r24	; 0x02
    214a:	85 ee       	ldi	r24, 0xE5	; 229
    214c:	9e e0       	ldi	r25, 0x0E	; 14
    214e:	95 83       	std	Z+5, r25	; 0x05
    2150:	84 83       	std	Z+4, r24	; 0x04
    2152:	84 e7       	ldi	r24, 0x74	; 116
    2154:	90 e1       	ldi	r25, 0x10	; 16
    2156:	97 83       	std	Z+7, r25	; 0x07
    2158:	86 83       	std	Z+6, r24	; 0x06
    215a:	8d e8       	ldi	r24, 0x8D	; 141
    215c:	9c e0       	ldi	r25, 0x0C	; 12
    215e:	91 87       	std	Z+9, r25	; 0x09
    2160:	80 87       	std	Z+8, r24	; 0x08
    2162:	8b e9       	ldi	r24, 0x9B	; 155
    2164:	9c e0       	ldi	r25, 0x0C	; 12
    2166:	93 87       	std	Z+11, r25	; 0x0b
    2168:	82 87       	std	Z+10, r24	; 0x0a
    216a:	8d e9       	ldi	r24, 0x9D	; 157
    216c:	9c e0       	ldi	r25, 0x0C	; 12
    216e:	95 87       	std	Z+13, r25	; 0x0d
    2170:	84 87       	std	Z+12, r24	; 0x0c
    2172:	80 ea       	ldi	r24, 0xA0	; 160
    2174:	9c e0       	ldi	r25, 0x0C	; 12
    2176:	97 87       	std	Z+15, r25	; 0x0f
    2178:	86 87       	std	Z+14, r24	; 0x0e
    217a:	83 ea       	ldi	r24, 0xA3	; 163
    217c:	9c e0       	ldi	r25, 0x0C	; 12
    217e:	91 8b       	std	Z+17, r25	; 0x11
    2180:	80 8b       	std	Z+16, r24	; 0x10
    2182:	86 ea       	ldi	r24, 0xA6	; 166
    2184:	9c e0       	ldi	r25, 0x0C	; 12
    2186:	93 8b       	std	Z+19, r25	; 0x13
    2188:	82 8b       	std	Z+18, r24	; 0x12
    218a:	87 e9       	ldi	r24, 0x97	; 151
    218c:	9c e0       	ldi	r25, 0x0C	; 12
    218e:	95 8b       	std	Z+21, r25	; 0x15
    2190:	84 8b       	std	Z+20, r24	; 0x14
    2192:	89 e9       	ldi	r24, 0x99	; 153
    2194:	9c e0       	ldi	r25, 0x0C	; 12
    2196:	97 8b       	std	Z+23, r25	; 0x17
    2198:	86 8b       	std	Z+22, r24	; 0x16
    219a:	88 ea       	ldi	r24, 0xA8	; 168
    219c:	9c e0       	ldi	r25, 0x0C	; 12
    219e:	91 8f       	std	Z+25, r25	; 0x19
    21a0:	80 8f       	std	Z+24, r24	; 0x18
    21a2:	89 ec       	ldi	r24, 0xC9	; 201
    21a4:	9c e0       	ldi	r25, 0x0C	; 12
    21a6:	93 8f       	std	Z+27, r25	; 0x1b
    21a8:	82 8f       	std	Z+26, r24	; 0x1a
    21aa:	87 ed       	ldi	r24, 0xD7	; 215
    21ac:	9c e0       	ldi	r25, 0x0C	; 12
    21ae:	95 8f       	std	Z+29, r25	; 0x1d
    21b0:	84 8f       	std	Z+28, r24	; 0x1c
    21b2:	89 ef       	ldi	r24, 0xF9	; 249
    21b4:	9c e0       	ldi	r25, 0x0C	; 12
    21b6:	97 8f       	std	Z+31, r25	; 0x1f
    21b8:	86 8f       	std	Z+30, r24	; 0x1e
    21ba:	80 e6       	ldi	r24, 0x60	; 96
    21bc:	9f e0       	ldi	r25, 0x0F	; 15
    21be:	91 a3       	std	Z+33, r25	; 0x21
    21c0:	80 a3       	std	Z+32, r24	; 0x20
    21c2:	8b e9       	ldi	r24, 0x9B	; 155
    21c4:	9f e0       	ldi	r25, 0x0F	; 15
    21c6:	93 a3       	std	Z+35, r25	; 0x23
    21c8:	82 a3       	std	Z+34, r24	; 0x22
    21ca:	82 e0       	ldi	r24, 0x02	; 2
    21cc:	9f e0       	ldi	r25, 0x0F	; 15
    21ce:	95 a3       	std	Z+37, r25	; 0x25
    21d0:	84 a3       	std	Z+36, r24	; 0x24
    21d2:	8a ec       	ldi	r24, 0xCA	; 202
    21d4:	9e e0       	ldi	r25, 0x0E	; 14
    21d6:	97 a3       	std	Z+39, r25	; 0x27
    21d8:	86 a3       	std	Z+38, r24	; 0x26
    21da:	8f e9       	ldi	r24, 0x9F	; 159
    21dc:	9d e0       	ldi	r25, 0x0D	; 13
    21de:	91 a7       	std	Z+41, r25	; 0x29
    21e0:	80 a7       	std	Z+40, r24	; 0x28
    21e2:	84 ea       	ldi	r24, 0xA4	; 164
    21e4:	9d e0       	ldi	r25, 0x0D	; 13
    21e6:	93 a7       	std	Z+43, r25	; 0x2b
    21e8:	82 a7       	std	Z+42, r24	; 0x2a
    21ea:	83 eb       	ldi	r24, 0xB3	; 179
    21ec:	9d e0       	ldi	r25, 0x0D	; 13
    21ee:	95 a7       	std	Z+45, r25	; 0x2d
    21f0:	84 a7       	std	Z+44, r24	; 0x2c
    21f2:	87 ed       	ldi	r24, 0xD7	; 215
    21f4:	9d e0       	ldi	r25, 0x0D	; 13
    21f6:	97 a7       	std	Z+47, r25	; 0x2f
    21f8:	86 a7       	std	Z+46, r24	; 0x2e
    21fa:	89 ed       	ldi	r24, 0xD9	; 217
    21fc:	9d e0       	ldi	r25, 0x0D	; 13
    21fe:	91 ab       	std	Z+49, r25	; 0x31
    2200:	80 ab       	std	Z+48, r24	; 0x30
    2202:	83 ee       	ldi	r24, 0xE3	; 227
    2204:	9d e0       	ldi	r25, 0x0D	; 13
    2206:	93 ab       	std	Z+51, r25	; 0x33
    2208:	82 ab       	std	Z+50, r24	; 0x32
    220a:	80 ef       	ldi	r24, 0xF0	; 240
    220c:	9d e0       	ldi	r25, 0x0D	; 13
    220e:	95 ab       	std	Z+53, r25	; 0x35
    2210:	84 ab       	std	Z+52, r24	; 0x34
    2212:	8c ef       	ldi	r24, 0xFC	; 252
    2214:	9d e0       	ldi	r25, 0x0D	; 13
    2216:	97 ab       	std	Z+55, r25	; 0x37
    2218:	86 ab       	std	Z+54, r24	; 0x36
    221a:	84 e1       	ldi	r24, 0x14	; 20
    221c:	9e e0       	ldi	r25, 0x0E	; 14
    221e:	91 af       	std	Z+57, r25	; 0x39
    2220:	80 af       	std	Z+56, r24	; 0x38
    2222:	87 e2       	ldi	r24, 0x27	; 39
    2224:	9e e0       	ldi	r25, 0x0E	; 14
    2226:	93 af       	std	Z+59, r25	; 0x3b
    2228:	82 af       	std	Z+58, r24	; 0x3a
    222a:	82 e3       	ldi	r24, 0x32	; 50
    222c:	9e e0       	ldi	r25, 0x0E	; 14
    222e:	95 af       	std	Z+61, r25	; 0x3d
    2230:	84 af       	std	Z+60, r24	; 0x3c
    2232:	8f e5       	ldi	r24, 0x5F	; 95
    2234:	9e e0       	ldi	r25, 0x0E	; 14
    2236:	97 af       	std	Z+63, r25	; 0x3f
    2238:	86 af       	std	Z+62, r24	; 0x3e
    223a:	df 01       	movw	r26, r30
    223c:	a0 5c       	subi	r26, 0xC0	; 192
    223e:	bf 4f       	sbci	r27, 0xFF	; 255
    2240:	8a ed       	ldi	r24, 0xDA	; 218
    2242:	9f e0       	ldi	r25, 0x0F	; 15
    2244:	11 96       	adiw	r26, 0x01	; 1
    2246:	9c 93       	st	X, r25
    2248:	8e 93       	st	-X, r24
    224a:	12 96       	adiw	r26, 0x02	; 2
    224c:	85 ee       	ldi	r24, 0xE5	; 229
    224e:	9f e0       	ldi	r25, 0x0F	; 15
    2250:	11 96       	adiw	r26, 0x01	; 1
    2252:	9c 93       	st	X, r25
    2254:	8e 93       	st	-X, r24
    2256:	12 96       	adiw	r26, 0x02	; 2
    2258:	86 e0       	ldi	r24, 0x06	; 6
    225a:	90 e1       	ldi	r25, 0x10	; 16
    225c:	11 96       	adiw	r26, 0x01	; 1
    225e:	9c 93       	st	X, r25
    2260:	8e 93       	st	-X, r24
    2262:	12 96       	adiw	r26, 0x02	; 2
    2264:	86 e5       	ldi	r24, 0x56	; 86
    2266:	90 e1       	ldi	r25, 0x10	; 16
    2268:	11 96       	adiw	r26, 0x01	; 1
    226a:	9c 93       	st	X, r25
    226c:	8e 93       	st	-X, r24
    226e:	12 96       	adiw	r26, 0x02	; 2
    2270:	8e e5       	ldi	r24, 0x5E	; 94
    2272:	90 e1       	ldi	r25, 0x10	; 16
    2274:	8d 93       	st	X+, r24
    2276:	9c 93       	st	X, r25
}
    2278:	cf 01       	movw	r24, r30
    227a:	08 95       	ret

0000227c <KEYPAD_flush>:
	return data;
}
/***flush***/
void KEYPAD_flush(void)
{
	KEYPADSTRINGINDEX=0;
    227c:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <KEYPADSTRINGINDEX>
	keypadstring[KEYPADSTRINGINDEX]='\0';
    2280:	e0 91 78 02 	lds	r30, 0x0278	; 0x800278 <KEYPADSTRINGINDEX>
    2284:	f0 e0       	ldi	r31, 0x00	; 0
    2286:	ef 59       	subi	r30, 0x9F	; 159
    2288:	fd 4f       	sbci	r31, 0xFD	; 253
    228a:	10 82       	st	Z, r1
    228c:	08 95       	ret

0000228e <KEYPAD_getkey>:
	*keypad_PORT|=(1<<KEYPADLINE_1) | (1<<KEYPADLINE_2) | (1<<KEYPADLINE_3) | (1<<KEYPADLINE_4);
	//Going to use pull down method.
	return keypad;
}
char KEYPAD_getkey(void)
{
    228e:	cf 93       	push	r28
    2290:	df 93       	push	r29
    2292:	21 e0       	ldi	r18, 0x01	; 1
	uint8_t HL;
	char c='\0';
    2294:	80 e0       	ldi	r24, 0x00	; 0
				*keypad_PORT|=(1<<KEYPADLINE_1);
				break;
			case 1: //line 2 index 1
				*keypad_DDR|=(1<<KEYPADLINE_2);
				*keypad_PORT&=~(1<<KEYPADLINE_2);
				keypad_dataf.line_2=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    2296:	a0 e7       	ldi	r26, 0x70	; 112
    2298:	b2 e0       	ldi	r27, 0x02	; 2
				HL=KEYPADhl(keypad_datai.line_2,keypad_dataf.line_2);
    229a:	e4 e7       	ldi	r30, 0x74	; 116
    229c:	f2 e0       	ldi	r31, 0x02	; 2
					if(HL == (1<<KEYPADDATA_2))
						c=keypadvalue[1][1];
					if(HL == (1<<KEYPADDATA_3))
						c=keypadvalue[1][2];
					if(HL == (1<<KEYPADDATA_4))
						c=keypadvalue[1][3];
    229e:	60 e0       	ldi	r22, 0x00	; 0
    22a0:	71 e0       	ldi	r23, 0x01	; 1
    22a2:	01 c0       	rjmp	.+2      	; 0x22a6 <KEYPAD_getkey+0x18>
    22a4:	2f 5f       	subi	r18, 0xFF	; 255
{
	uint8_t HL;
	char c='\0';
	uint8_t keypad_option;
	for(keypad_option=0;keypad_option<KEYPADLINES;keypad_option++){
		switch (keypad_option)
    22a6:	9f ef       	ldi	r25, 0xFF	; 255
    22a8:	92 0f       	add	r25, r18
    22aa:	91 30       	cpi	r25, 0x01	; 1
    22ac:	09 f4       	brne	.+2      	; 0x22b0 <KEYPAD_getkey+0x22>
    22ae:	4b c0       	rjmp	.+150    	; 0x2346 <KEYPAD_getkey+0xb8>
    22b0:	38 f0       	brcs	.+14     	; 0x22c0 <KEYPAD_getkey+0x32>
    22b2:	92 30       	cpi	r25, 0x02	; 2
    22b4:	09 f4       	brne	.+2      	; 0x22b8 <KEYPAD_getkey+0x2a>
    22b6:	8c c0       	rjmp	.+280    	; 0x23d0 <KEYPAD_getkey+0x142>
    22b8:	93 30       	cpi	r25, 0x03	; 3
    22ba:	09 f4       	brne	.+2      	; 0x22be <KEYPAD_getkey+0x30>
    22bc:	ce c0       	rjmp	.+412    	; 0x245a <KEYPAD_getkey+0x1cc>
    22be:	0e c1       	rjmp	.+540    	; 0x24dc <KEYPAD_getkey+0x24e>
		{
			case 0: //line 1 index 0
				*keypad_DDR|=(1<<KEYPADLINE_1);
    22c0:	40 91 7b 02 	lds	r20, 0x027B	; 0x80027b <keypad_DDR>
    22c4:	50 91 7c 02 	lds	r21, 0x027C	; 0x80027c <keypad_DDR+0x1>
    22c8:	ea 01       	movw	r28, r20
    22ca:	98 81       	ld	r25, Y
    22cc:	90 68       	ori	r25, 0x80	; 128
    22ce:	98 83       	st	Y, r25
				*keypad_PORT&=~(1<<KEYPADLINE_1);
    22d0:	40 91 5f 02 	lds	r20, 0x025F	; 0x80025f <keypad_PORT>
    22d4:	50 91 60 02 	lds	r21, 0x0260	; 0x800260 <keypad_PORT+0x1>
    22d8:	ea 01       	movw	r28, r20
    22da:	98 81       	ld	r25, Y
    22dc:	9f 77       	andi	r25, 0x7F	; 127
    22de:	98 83       	st	Y, r25
				keypad_dataf.line_1=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    22e0:	40 91 79 02 	lds	r20, 0x0279	; 0x800279 <keypad_PIN>
    22e4:	50 91 7a 02 	lds	r21, 0x027A	; 0x80027a <keypad_PIN+0x1>
    22e8:	ea 01       	movw	r28, r20
    22ea:	38 81       	ld	r19, Y
    22ec:	34 77       	andi	r19, 0x74	; 116
    22ee:	3c 93       	st	X, r19
				HL=KEYPADhl(keypad_datai.line_1,keypad_dataf.line_1);
    22f0:	90 81       	ld	r25, Z
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
    22f2:	43 2f       	mov	r20, r19
    22f4:	49 27       	eor	r20, r25
    22f6:	94 23       	and	r25, r20
			case 0: //line 1 index 0
				*keypad_DDR|=(1<<KEYPADLINE_1);
				*keypad_PORT&=~(1<<KEYPADLINE_1);
				keypad_dataf.line_1=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_1,keypad_dataf.line_1);
				keypad_datai.line_1=keypad_dataf.line_1;
    22f8:	30 83       	st	Z, r19
				if(HL){
    22fa:	99 23       	and	r25, r25
    22fc:	99 f0       	breq	.+38     	; 0x2324 <KEYPAD_getkey+0x96>
					//decode index line one column what ?
					if(HL == (1<<KEYPADDATA_1))
    22fe:	94 30       	cpi	r25, 0x04	; 4
    2300:	19 f4       	brne	.+6      	; 0x2308 <KEYPAD_getkey+0x7a>
						c=keypadvalue[0][0];
    2302:	eb 01       	movw	r28, r22
    2304:	88 81       	ld	r24, Y
    2306:	0a c0       	rjmp	.+20     	; 0x231c <KEYPAD_getkey+0x8e>
					if(HL == (1<<KEYPADDATA_2))
    2308:	90 31       	cpi	r25, 0x10	; 16
    230a:	19 f4       	brne	.+6      	; 0x2312 <KEYPAD_getkey+0x84>
						c=keypadvalue[0][1];
    230c:	eb 01       	movw	r28, r22
    230e:	89 81       	ldd	r24, Y+1	; 0x01
    2310:	09 c0       	rjmp	.+18     	; 0x2324 <KEYPAD_getkey+0x96>
					if(HL == (1<<KEYPADDATA_3))
    2312:	90 32       	cpi	r25, 0x20	; 32
    2314:	19 f4       	brne	.+6      	; 0x231c <KEYPAD_getkey+0x8e>
						c=keypadvalue[0][2];
    2316:	eb 01       	movw	r28, r22
    2318:	8a 81       	ldd	r24, Y+2	; 0x02
    231a:	04 c0       	rjmp	.+8      	; 0x2324 <KEYPAD_getkey+0x96>
					if(HL == (1<<KEYPADDATA_4))
    231c:	90 34       	cpi	r25, 0x40	; 64
    231e:	11 f4       	brne	.+4      	; 0x2324 <KEYPAD_getkey+0x96>
						c=keypadvalue[0][3];
    2320:	eb 01       	movw	r28, r22
    2322:	8b 81       	ldd	r24, Y+3	; 0x03
				}
				*keypad_DDR&=~(1<<KEYPADLINE_1);
    2324:	40 91 7b 02 	lds	r20, 0x027B	; 0x80027b <keypad_DDR>
    2328:	50 91 7c 02 	lds	r21, 0x027C	; 0x80027c <keypad_DDR+0x1>
    232c:	ea 01       	movw	r28, r20
    232e:	98 81       	ld	r25, Y
    2330:	9f 77       	andi	r25, 0x7F	; 127
    2332:	98 83       	st	Y, r25
				*keypad_PORT|=(1<<KEYPADLINE_1);
    2334:	40 91 5f 02 	lds	r20, 0x025F	; 0x80025f <keypad_PORT>
    2338:	50 91 60 02 	lds	r21, 0x0260	; 0x800260 <keypad_PORT+0x1>
    233c:	ea 01       	movw	r28, r20
    233e:	98 81       	ld	r25, Y
    2340:	90 68       	ori	r25, 0x80	; 128
    2342:	98 83       	st	Y, r25
				break;
    2344:	af cf       	rjmp	.-162    	; 0x22a4 <KEYPAD_getkey+0x16>
			case 1: //line 2 index 1
				*keypad_DDR|=(1<<KEYPADLINE_2);
    2346:	40 91 7b 02 	lds	r20, 0x027B	; 0x80027b <keypad_DDR>
    234a:	50 91 7c 02 	lds	r21, 0x027C	; 0x80027c <keypad_DDR+0x1>
    234e:	ea 01       	movw	r28, r20
    2350:	98 81       	ld	r25, Y
    2352:	91 60       	ori	r25, 0x01	; 1
    2354:	98 83       	st	Y, r25
				*keypad_PORT&=~(1<<KEYPADLINE_2);
    2356:	40 91 5f 02 	lds	r20, 0x025F	; 0x80025f <keypad_PORT>
    235a:	50 91 60 02 	lds	r21, 0x0260	; 0x800260 <keypad_PORT+0x1>
    235e:	ea 01       	movw	r28, r20
    2360:	98 81       	ld	r25, Y
    2362:	9e 7f       	andi	r25, 0xFE	; 254
    2364:	98 83       	st	Y, r25
				keypad_dataf.line_2=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    2366:	40 91 79 02 	lds	r20, 0x0279	; 0x800279 <keypad_PIN>
    236a:	50 91 7a 02 	lds	r21, 0x027A	; 0x80027a <keypad_PIN+0x1>
    236e:	ea 01       	movw	r28, r20
    2370:	38 81       	ld	r19, Y
    2372:	34 77       	andi	r19, 0x74	; 116
    2374:	11 96       	adiw	r26, 0x01	; 1
    2376:	3c 93       	st	X, r19
    2378:	11 97       	sbiw	r26, 0x01	; 1
				HL=KEYPADhl(keypad_datai.line_2,keypad_dataf.line_2);
    237a:	91 81       	ldd	r25, Z+1	; 0x01
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
    237c:	43 2f       	mov	r20, r19
    237e:	49 27       	eor	r20, r25
    2380:	94 23       	and	r25, r20
			case 1: //line 2 index 1
				*keypad_DDR|=(1<<KEYPADLINE_2);
				*keypad_PORT&=~(1<<KEYPADLINE_2);
				keypad_dataf.line_2=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_2,keypad_dataf.line_2);
				keypad_datai.line_2=keypad_dataf.line_2;
    2382:	31 83       	std	Z+1, r19	; 0x01
				if(HL){
    2384:	99 23       	and	r25, r25
    2386:	99 f0       	breq	.+38     	; 0x23ae <KEYPAD_getkey+0x120>
					//decode index line two column what ?
					if(HL == (1<<KEYPADDATA_1))
    2388:	94 30       	cpi	r25, 0x04	; 4
    238a:	19 f4       	brne	.+6      	; 0x2392 <KEYPAD_getkey+0x104>
						c=keypadvalue[1][0];
    238c:	eb 01       	movw	r28, r22
    238e:	8c 81       	ldd	r24, Y+4	; 0x04
    2390:	0a c0       	rjmp	.+20     	; 0x23a6 <KEYPAD_getkey+0x118>
					if(HL == (1<<KEYPADDATA_2))
    2392:	90 31       	cpi	r25, 0x10	; 16
    2394:	19 f4       	brne	.+6      	; 0x239c <KEYPAD_getkey+0x10e>
						c=keypadvalue[1][1];
    2396:	eb 01       	movw	r28, r22
    2398:	8d 81       	ldd	r24, Y+5	; 0x05
    239a:	09 c0       	rjmp	.+18     	; 0x23ae <KEYPAD_getkey+0x120>
					if(HL == (1<<KEYPADDATA_3))
    239c:	90 32       	cpi	r25, 0x20	; 32
    239e:	19 f4       	brne	.+6      	; 0x23a6 <KEYPAD_getkey+0x118>
						c=keypadvalue[1][2];
    23a0:	eb 01       	movw	r28, r22
    23a2:	8e 81       	ldd	r24, Y+6	; 0x06
    23a4:	04 c0       	rjmp	.+8      	; 0x23ae <KEYPAD_getkey+0x120>
					if(HL == (1<<KEYPADDATA_4))
    23a6:	90 34       	cpi	r25, 0x40	; 64
    23a8:	11 f4       	brne	.+4      	; 0x23ae <KEYPAD_getkey+0x120>
						c=keypadvalue[1][3];
    23aa:	eb 01       	movw	r28, r22
    23ac:	8f 81       	ldd	r24, Y+7	; 0x07
				}
				*keypad_DDR&=~(1<<KEYPADLINE_2);
    23ae:	40 91 7b 02 	lds	r20, 0x027B	; 0x80027b <keypad_DDR>
    23b2:	50 91 7c 02 	lds	r21, 0x027C	; 0x80027c <keypad_DDR+0x1>
    23b6:	ea 01       	movw	r28, r20
    23b8:	98 81       	ld	r25, Y
    23ba:	9e 7f       	andi	r25, 0xFE	; 254
    23bc:	98 83       	st	Y, r25
				*keypad_PORT|=(1<<KEYPADLINE_2);
    23be:	40 91 5f 02 	lds	r20, 0x025F	; 0x80025f <keypad_PORT>
    23c2:	50 91 60 02 	lds	r21, 0x0260	; 0x800260 <keypad_PORT+0x1>
    23c6:	ea 01       	movw	r28, r20
    23c8:	98 81       	ld	r25, Y
    23ca:	91 60       	ori	r25, 0x01	; 1
    23cc:	98 83       	st	Y, r25
				break;
    23ce:	6a cf       	rjmp	.-300    	; 0x22a4 <KEYPAD_getkey+0x16>
			case 2: //line 3 index 2
				*keypad_DDR|=(1<<KEYPADLINE_3);
    23d0:	40 91 7b 02 	lds	r20, 0x027B	; 0x80027b <keypad_DDR>
    23d4:	50 91 7c 02 	lds	r21, 0x027C	; 0x80027c <keypad_DDR+0x1>
    23d8:	ea 01       	movw	r28, r20
    23da:	98 81       	ld	r25, Y
    23dc:	92 60       	ori	r25, 0x02	; 2
    23de:	98 83       	st	Y, r25
				*keypad_PORT&=~(1<<KEYPADLINE_3);
    23e0:	40 91 5f 02 	lds	r20, 0x025F	; 0x80025f <keypad_PORT>
    23e4:	50 91 60 02 	lds	r21, 0x0260	; 0x800260 <keypad_PORT+0x1>
    23e8:	ea 01       	movw	r28, r20
    23ea:	98 81       	ld	r25, Y
    23ec:	9d 7f       	andi	r25, 0xFD	; 253
    23ee:	98 83       	st	Y, r25
				keypad_dataf.line_3=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    23f0:	40 91 79 02 	lds	r20, 0x0279	; 0x800279 <keypad_PIN>
    23f4:	50 91 7a 02 	lds	r21, 0x027A	; 0x80027a <keypad_PIN+0x1>
    23f8:	ea 01       	movw	r28, r20
    23fa:	38 81       	ld	r19, Y
    23fc:	34 77       	andi	r19, 0x74	; 116
    23fe:	12 96       	adiw	r26, 0x02	; 2
    2400:	3c 93       	st	X, r19
    2402:	12 97       	sbiw	r26, 0x02	; 2
				HL=KEYPADhl(keypad_datai.line_3,keypad_dataf.line_3);
    2404:	92 81       	ldd	r25, Z+2	; 0x02
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
    2406:	43 2f       	mov	r20, r19
    2408:	49 27       	eor	r20, r25
    240a:	94 23       	and	r25, r20
			case 2: //line 3 index 2
				*keypad_DDR|=(1<<KEYPADLINE_3);
				*keypad_PORT&=~(1<<KEYPADLINE_3);
				keypad_dataf.line_3=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_3,keypad_dataf.line_3);
				keypad_datai.line_3=keypad_dataf.line_3;
    240c:	32 83       	std	Z+2, r19	; 0x02
				if(HL){
    240e:	99 23       	and	r25, r25
    2410:	99 f0       	breq	.+38     	; 0x2438 <KEYPAD_getkey+0x1aa>
					//decode index line three column what ?
					if(HL == (1<<KEYPADDATA_1))
    2412:	94 30       	cpi	r25, 0x04	; 4
    2414:	19 f4       	brne	.+6      	; 0x241c <KEYPAD_getkey+0x18e>
						c=keypadvalue[2][0];
    2416:	eb 01       	movw	r28, r22
    2418:	88 85       	ldd	r24, Y+8	; 0x08
    241a:	0a c0       	rjmp	.+20     	; 0x2430 <KEYPAD_getkey+0x1a2>
					if(HL == (1<<KEYPADDATA_2))
    241c:	90 31       	cpi	r25, 0x10	; 16
    241e:	19 f4       	brne	.+6      	; 0x2426 <KEYPAD_getkey+0x198>
						c=keypadvalue[2][1];
    2420:	eb 01       	movw	r28, r22
    2422:	89 85       	ldd	r24, Y+9	; 0x09
    2424:	09 c0       	rjmp	.+18     	; 0x2438 <KEYPAD_getkey+0x1aa>
					if(HL == (1<<KEYPADDATA_3))
    2426:	90 32       	cpi	r25, 0x20	; 32
    2428:	19 f4       	brne	.+6      	; 0x2430 <KEYPAD_getkey+0x1a2>
						c=keypadvalue[2][2];
    242a:	eb 01       	movw	r28, r22
    242c:	8a 85       	ldd	r24, Y+10	; 0x0a
    242e:	04 c0       	rjmp	.+8      	; 0x2438 <KEYPAD_getkey+0x1aa>
					if(HL == (1<<KEYPADDATA_4))
    2430:	90 34       	cpi	r25, 0x40	; 64
    2432:	11 f4       	brne	.+4      	; 0x2438 <KEYPAD_getkey+0x1aa>
						c=keypadvalue[2][3];
    2434:	eb 01       	movw	r28, r22
    2436:	8b 85       	ldd	r24, Y+11	; 0x0b
				}
				*keypad_DDR&=~(1<<KEYPADLINE_3);
    2438:	40 91 7b 02 	lds	r20, 0x027B	; 0x80027b <keypad_DDR>
    243c:	50 91 7c 02 	lds	r21, 0x027C	; 0x80027c <keypad_DDR+0x1>
    2440:	ea 01       	movw	r28, r20
    2442:	98 81       	ld	r25, Y
    2444:	9d 7f       	andi	r25, 0xFD	; 253
    2446:	98 83       	st	Y, r25
				*keypad_PORT|=(1<<KEYPADLINE_3);
    2448:	40 91 5f 02 	lds	r20, 0x025F	; 0x80025f <keypad_PORT>
    244c:	50 91 60 02 	lds	r21, 0x0260	; 0x800260 <keypad_PORT+0x1>
    2450:	ea 01       	movw	r28, r20
    2452:	98 81       	ld	r25, Y
    2454:	92 60       	ori	r25, 0x02	; 2
    2456:	98 83       	st	Y, r25
				break;
    2458:	25 cf       	rjmp	.-438    	; 0x22a4 <KEYPAD_getkey+0x16>
			case 3: //line 4 index 3
				*keypad_DDR|=(1<<KEYPADLINE_4);
    245a:	e0 91 7b 02 	lds	r30, 0x027B	; 0x80027b <keypad_DDR>
    245e:	f0 91 7c 02 	lds	r31, 0x027C	; 0x80027c <keypad_DDR+0x1>
    2462:	90 81       	ld	r25, Z
    2464:	98 60       	ori	r25, 0x08	; 8
    2466:	90 83       	st	Z, r25
				*keypad_PORT&=~(1<<KEYPADLINE_4);
    2468:	e0 91 5f 02 	lds	r30, 0x025F	; 0x80025f <keypad_PORT>
    246c:	f0 91 60 02 	lds	r31, 0x0260	; 0x800260 <keypad_PORT+0x1>
    2470:	90 81       	ld	r25, Z
    2472:	97 7f       	andi	r25, 0xF7	; 247
    2474:	90 83       	st	Z, r25
				keypad_dataf.line_4=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    2476:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <keypad_PIN>
    247a:	f0 91 7a 02 	lds	r31, 0x027A	; 0x80027a <keypad_PIN+0x1>
    247e:	20 81       	ld	r18, Z
    2480:	24 77       	andi	r18, 0x74	; 116
    2482:	20 93 73 02 	sts	0x0273, r18	; 0x800273 <keypad_dataf+0x3>
				HL=KEYPADhl(keypad_datai.line_4,keypad_dataf.line_4);
    2486:	e4 e7       	ldi	r30, 0x74	; 116
    2488:	f2 e0       	ldi	r31, 0x02	; 2
    248a:	93 81       	ldd	r25, Z+3	; 0x03
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
    248c:	32 2f       	mov	r19, r18
    248e:	39 27       	eor	r19, r25
    2490:	93 23       	and	r25, r19
			case 3: //line 4 index 3
				*keypad_DDR|=(1<<KEYPADLINE_4);
				*keypad_PORT&=~(1<<KEYPADLINE_4);
				keypad_dataf.line_4=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_4,keypad_dataf.line_4);
				keypad_datai.line_4=keypad_dataf.line_4;
    2492:	23 83       	std	Z+3, r18	; 0x03
				if(HL){
    2494:	99 23       	and	r25, r25
    2496:	99 f0       	breq	.+38     	; 0x24be <KEYPAD_getkey+0x230>
					//decode index line four column what ?
					if(HL == (1<<KEYPADDATA_1))
    2498:	94 30       	cpi	r25, 0x04	; 4
    249a:	19 f4       	brne	.+6      	; 0x24a2 <KEYPAD_getkey+0x214>
						c=keypadvalue[3][0];
    249c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__DATA_REGION_ORIGIN__+0xc>
    24a0:	0a c0       	rjmp	.+20     	; 0x24b6 <KEYPAD_getkey+0x228>
					if(HL == (1<<KEYPADDATA_2))
    24a2:	90 31       	cpi	r25, 0x10	; 16
    24a4:	19 f4       	brne	.+6      	; 0x24ac <KEYPAD_getkey+0x21e>
						c=keypadvalue[3][1];
    24a6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <__DATA_REGION_ORIGIN__+0xd>
    24aa:	09 c0       	rjmp	.+18     	; 0x24be <KEYPAD_getkey+0x230>
					if(HL == (1<<KEYPADDATA_3))
    24ac:	90 32       	cpi	r25, 0x20	; 32
    24ae:	19 f4       	brne	.+6      	; 0x24b6 <KEYPAD_getkey+0x228>
						c=keypadvalue[3][2];
    24b0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__DATA_REGION_ORIGIN__+0xe>
    24b4:	04 c0       	rjmp	.+8      	; 0x24be <KEYPAD_getkey+0x230>
					if(HL == (1<<KEYPADDATA_4))
    24b6:	90 34       	cpi	r25, 0x40	; 64
    24b8:	11 f4       	brne	.+4      	; 0x24be <KEYPAD_getkey+0x230>
						c=keypadvalue[3][3];
    24ba:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <__DATA_REGION_ORIGIN__+0xf>
				}
				*keypad_DDR&=~(1<<KEYPADLINE_4);
    24be:	e0 91 7b 02 	lds	r30, 0x027B	; 0x80027b <keypad_DDR>
    24c2:	f0 91 7c 02 	lds	r31, 0x027C	; 0x80027c <keypad_DDR+0x1>
    24c6:	90 81       	ld	r25, Z
    24c8:	97 7f       	andi	r25, 0xF7	; 247
    24ca:	90 83       	st	Z, r25
				*keypad_PORT|=(1<<KEYPADLINE_4);
    24cc:	e0 91 5f 02 	lds	r30, 0x025F	; 0x80025f <keypad_PORT>
    24d0:	f0 91 60 02 	lds	r31, 0x0260	; 0x800260 <keypad_PORT+0x1>
    24d4:	90 81       	ld	r25, Z
    24d6:	98 60       	ori	r25, 0x08	; 8
    24d8:	90 83       	st	Z, r25
    24da:	03 c0       	rjmp	.+6      	; 0x24e2 <KEYPAD_getkey+0x254>
char KEYPAD_getkey(void)
{
	uint8_t HL;
	char c='\0';
	uint8_t keypad_option;
	for(keypad_option=0;keypad_option<KEYPADLINES;keypad_option++){
    24dc:	24 30       	cpi	r18, 0x04	; 4
    24de:	08 f4       	brcc	.+2      	; 0x24e2 <KEYPAD_getkey+0x254>
    24e0:	e1 ce       	rjmp	.-574    	; 0x22a4 <KEYPAD_getkey+0x16>
			default:
				break;
		}//endswitch
	}//endfor
	return c;
}
    24e2:	df 91       	pop	r29
    24e4:	cf 91       	pop	r28
    24e6:	08 95       	ret

000024e8 <KEYPAD_get>:
/***get***/
struct keypadata KEYPAD_get(void)
{
	char c;
	struct keypadata data;
	c=KEYPAD_getkey();
    24e8:	d2 de       	rcall	.-604    	; 0x228e <KEYPAD_getkey>
	if(c){
    24ea:	88 23       	and	r24, r24
    24ec:	09 f1       	breq	.+66     	; 0x2530 <KEYPAD_get+0x48>
		if(c==KEYPADENTERKEY){
    24ee:	84 34       	cpi	r24, 0x44	; 68
    24f0:	49 f4       	brne	.+18     	; 0x2504 <KEYPAD_get+0x1c>
			keypadstring[KEYPADSTRINGINDEX]='\0';
    24f2:	e0 91 78 02 	lds	r30, 0x0278	; 0x800278 <KEYPADSTRINGINDEX>
    24f6:	f0 e0       	ldi	r31, 0x00	; 0
    24f8:	ef 59       	subi	r30, 0x9F	; 159
    24fa:	fd 4f       	sbci	r31, 0xFD	; 253
    24fc:	10 82       	st	Z, r1
			KEYPADSTRINGINDEX=0;
    24fe:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <KEYPADSTRINGINDEX>
    2502:	17 c0       	rjmp	.+46     	; 0x2532 <KEYPAD_get+0x4a>
			data.string=keypadstring;
		}else{
			if(KEYPADSTRINGINDEX<(KEYPADSTRINGSIZE-1)){
    2504:	90 91 78 02 	lds	r25, 0x0278	; 0x800278 <KEYPADSTRINGINDEX>
    2508:	9e 30       	cpi	r25, 0x0E	; 14
    250a:	98 f4       	brcc	.+38     	; 0x2532 <KEYPAD_get+0x4a>
				keypadstring[KEYPADSTRINGINDEX]=c;
    250c:	e0 91 78 02 	lds	r30, 0x0278	; 0x800278 <KEYPADSTRINGINDEX>
    2510:	f0 e0       	ldi	r31, 0x00	; 0
    2512:	ef 59       	subi	r30, 0x9F	; 159
    2514:	fd 4f       	sbci	r31, 0xFD	; 253
    2516:	80 83       	st	Z, r24
				KEYPADSTRINGINDEX++;
    2518:	90 91 78 02 	lds	r25, 0x0278	; 0x800278 <KEYPADSTRINGINDEX>
    251c:	9f 5f       	subi	r25, 0xFF	; 255
    251e:	90 93 78 02 	sts	0x0278, r25	; 0x800278 <KEYPADSTRINGINDEX>
				keypadstring[KEYPADSTRINGINDEX]='\0';
    2522:	e0 91 78 02 	lds	r30, 0x0278	; 0x800278 <KEYPADSTRINGINDEX>
    2526:	f0 e0       	ldi	r31, 0x00	; 0
    2528:	ef 59       	subi	r30, 0x9F	; 159
    252a:	fd 4f       	sbci	r31, 0xFD	; 253
    252c:	10 82       	st	Z, r1
    252e:	01 c0       	rjmp	.+2      	; 0x2532 <KEYPAD_get+0x4a>
    2530:	80 e0       	ldi	r24, 0x00	; 0
				data.string=keypadstring;
			}
		}
		data.character=c;
	}
	return data;
    2532:	21 e6       	ldi	r18, 0x61	; 97
    2534:	32 e0       	ldi	r19, 0x02	; 2
    2536:	48 2f       	mov	r20, r24
}
    2538:	84 2f       	mov	r24, r20
    253a:	b9 01       	movw	r22, r18
    253c:	08 95       	ret

0000253e <KEYPADenable>:
uint8_t KEYPADhl(uint8_t xi, uint8_t xf);
/*
** procedure and function
*/
KEYPAD KEYPADenable(volatile uint8_t *ddr, volatile uint8_t *pin, volatile uint8_t *port)
{
    253e:	cf 93       	push	r28
    2540:	df 93       	push	r29
    2542:	00 d0       	rcall	.+0      	; 0x2544 <KEYPADenable+0x6>
    2544:	00 d0       	rcall	.+0      	; 0x2546 <KEYPADenable+0x8>
    2546:	00 d0       	rcall	.+0      	; 0x2548 <KEYPADenable+0xa>
    2548:	cd b7       	in	r28, 0x3d	; 61
    254a:	de b7       	in	r29, 0x3e	; 62
    254c:	fc 01       	movw	r30, r24
	//LOCAL VARIABLES
	uint8_t tSREG;
	tSREG=SREG;
    254e:	2f b7       	in	r18, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    2550:	9f b7       	in	r25, 0x3f	; 63
    2552:	9f 77       	andi	r25, 0x7F	; 127
    2554:	9f bf       	out	0x3f, r25	; 63
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	KEYPAD keypad;
	//import parametros
	keypad_DDR=ddr;
    2556:	f0 93 7c 02 	sts	0x027C, r31	; 0x80027c <keypad_DDR+0x1>
    255a:	e0 93 7b 02 	sts	0x027B, r30	; 0x80027b <keypad_DDR>
	keypad_PIN=pin;
    255e:	70 93 7a 02 	sts	0x027A, r23	; 0x80027a <keypad_PIN+0x1>
    2562:	60 93 79 02 	sts	0x0279, r22	; 0x800279 <keypad_PIN>
	keypad_PORT=port;
    2566:	50 93 60 02 	sts	0x0260, r21	; 0x800260 <keypad_PORT+0x1>
    256a:	40 93 5f 02 	sts	0x025F, r20	; 0x80025f <keypad_PORT>
	//inic variables
	*keypad_DDR=(1<<KEYPADLINE_1) | (1<<KEYPADLINE_2) | (1<<KEYPADLINE_3) | (1<<KEYPADLINE_4);
    256e:	8b e8       	ldi	r24, 0x8B	; 139
    2570:	80 83       	st	Z, r24
	*keypad_PORT=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    2572:	e0 91 5f 02 	lds	r30, 0x025F	; 0x80025f <keypad_PORT>
    2576:	f0 91 60 02 	lds	r31, 0x0260	; 0x800260 <keypad_PORT+0x1>
    257a:	84 e7       	ldi	r24, 0x74	; 116
    257c:	80 83       	st	Z, r24
	keypad_datai.line_1=keypad_dataf.line_1=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    257e:	a0 e7       	ldi	r26, 0x70	; 112
    2580:	b2 e0       	ldi	r27, 0x02	; 2
    2582:	8c 93       	st	X, r24
    2584:	e4 e7       	ldi	r30, 0x74	; 116
    2586:	f2 e0       	ldi	r31, 0x02	; 2
    2588:	80 83       	st	Z, r24
	keypad_datai.line_2=keypad_dataf.line_2=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    258a:	11 96       	adiw	r26, 0x01	; 1
    258c:	8c 93       	st	X, r24
    258e:	11 97       	sbiw	r26, 0x01	; 1
    2590:	81 83       	std	Z+1, r24	; 0x01
	keypad_datai.line_3=keypad_dataf.line_3=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    2592:	12 96       	adiw	r26, 0x02	; 2
    2594:	8c 93       	st	X, r24
    2596:	12 97       	sbiw	r26, 0x02	; 2
    2598:	82 83       	std	Z+2, r24	; 0x02
	keypad_datai.line_4=keypad_dataf.line_4=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    259a:	13 96       	adiw	r26, 0x03	; 3
    259c:	8c 93       	st	X, r24
    259e:	83 83       	std	Z+3, r24	; 0x03
	KEYPADSTRINGINDEX=0;
    25a0:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <KEYPADSTRINGINDEX>
	//Direccionar apontadores para PROTOTIPOS
	keypad.getkey=KEYPAD_getkey;
	keypad.get=KEYPAD_get;
	keypad.flush=KEYPAD_flush;
	SREG=tSREG;
    25a4:	2f bf       	out	0x3f, r18	; 63
	//
	*keypad_PORT|=(1<<KEYPADLINE_1) | (1<<KEYPADLINE_2) | (1<<KEYPADLINE_3) | (1<<KEYPADLINE_4);
    25a6:	e0 91 5f 02 	lds	r30, 0x025F	; 0x80025f <keypad_PORT>
    25aa:	f0 91 60 02 	lds	r31, 0x0260	; 0x800260 <keypad_PORT+0x1>
    25ae:	80 81       	ld	r24, Z
    25b0:	8b 68       	ori	r24, 0x8B	; 139
    25b2:	80 83       	st	Z, r24
	//Going to use pull down method.
	return keypad;
    25b4:	27 e4       	ldi	r18, 0x47	; 71
    25b6:	31 e1       	ldi	r19, 0x11	; 17
    25b8:	3a 83       	std	Y+2, r19	; 0x02
    25ba:	29 83       	std	Y+1, r18	; 0x01
    25bc:	44 e7       	ldi	r20, 0x74	; 116
    25be:	52 e1       	ldi	r21, 0x12	; 18
    25c0:	5c 83       	std	Y+4, r21	; 0x04
    25c2:	4b 83       	std	Y+3, r20	; 0x03
    25c4:	6e e3       	ldi	r22, 0x3E	; 62
    25c6:	71 e1       	ldi	r23, 0x11	; 17
    25c8:	7e 83       	std	Y+6, r23	; 0x06
    25ca:	6d 83       	std	Y+5, r22	; 0x05
    25cc:	3a 81       	ldd	r19, Y+2	; 0x02
    25ce:	5c 81       	ldd	r21, Y+4	; 0x04
    25d0:	7e 81       	ldd	r23, Y+6	; 0x06
}
    25d2:	80 e0       	ldi	r24, 0x00	; 0
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	26 96       	adiw	r28, 0x06	; 6
    25d8:	0f b6       	in	r0, 0x3f	; 63
    25da:	f8 94       	cli
    25dc:	de bf       	out	0x3e, r29	; 62
    25de:	0f be       	out	0x3f, r0	; 63
    25e0:	cd bf       	out	0x3d, r28	; 61
    25e2:	df 91       	pop	r29
    25e4:	cf 91       	pop	r28
    25e6:	08 95       	ret

000025e8 <LCD1_write>:
}
void LCD0_strobe(unsigned int num)
{
	*lcd0_PORT|=(1<<EN);
	LCD_ticks(num);
	*lcd0_PORT&=~(1<<EN);
    25e8:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    25ec:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    25f0:	90 81       	ld	r25, Z
    25f2:	9d 7f       	andi	r25, 0xFD	; 253
    25f4:	90 83       	st	Z, r25
    25f6:	67 2b       	or	r22, r23
    25f8:	41 f0       	breq	.+16     	; 0x260a <LCD1_write+0x22>
    25fa:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    25fe:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    2602:	90 81       	ld	r25, Z
    2604:	91 60       	ori	r25, 0x01	; 1
    2606:	90 83       	st	Z, r25
    2608:	07 c0       	rjmp	.+14     	; 0x2618 <LCD1_write+0x30>
    260a:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    260e:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    2612:	90 81       	ld	r25, Z
    2614:	9e 7f       	andi	r25, 0xFE	; 254
    2616:	90 83       	st	Z, r25
    2618:	e0 91 7f 02 	lds	r30, 0x027F	; 0x80027f <lcd1_DDR>
    261c:	f0 91 80 02 	lds	r31, 0x0280	; 0x800280 <lcd1_DDR+0x1>
    2620:	90 81       	ld	r25, Z
    2622:	90 6f       	ori	r25, 0xF0	; 240
    2624:	90 83       	st	Z, r25
    2626:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    262a:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    262e:	90 81       	ld	r25, Z
    2630:	94 60       	ori	r25, 0x04	; 4
    2632:	90 83       	st	Z, r25
    2634:	88 23       	and	r24, r24
    2636:	44 f4       	brge	.+16     	; 0x2648 <LCD1_write+0x60>
    2638:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    263c:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    2640:	90 81       	ld	r25, Z
    2642:	90 68       	ori	r25, 0x80	; 128
    2644:	90 83       	st	Z, r25
    2646:	07 c0       	rjmp	.+14     	; 0x2656 <LCD1_write+0x6e>
    2648:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    264c:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    2650:	90 81       	ld	r25, Z
    2652:	9f 77       	andi	r25, 0x7F	; 127
    2654:	90 83       	st	Z, r25
    2656:	86 ff       	sbrs	r24, 6
    2658:	08 c0       	rjmp	.+16     	; 0x266a <LCD1_write+0x82>
    265a:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    265e:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    2662:	90 81       	ld	r25, Z
    2664:	90 64       	ori	r25, 0x40	; 64
    2666:	90 83       	st	Z, r25
    2668:	07 c0       	rjmp	.+14     	; 0x2678 <LCD1_write+0x90>
    266a:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    266e:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    2672:	90 81       	ld	r25, Z
    2674:	9f 7b       	andi	r25, 0xBF	; 191
    2676:	90 83       	st	Z, r25
    2678:	85 ff       	sbrs	r24, 5
    267a:	08 c0       	rjmp	.+16     	; 0x268c <LCD1_write+0xa4>
    267c:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    2680:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    2684:	90 81       	ld	r25, Z
    2686:	90 62       	ori	r25, 0x20	; 32
    2688:	90 83       	st	Z, r25
    268a:	07 c0       	rjmp	.+14     	; 0x269a <LCD1_write+0xb2>
    268c:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    2690:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    2694:	90 81       	ld	r25, Z
    2696:	9f 7d       	andi	r25, 0xDF	; 223
    2698:	90 83       	st	Z, r25
    269a:	84 ff       	sbrs	r24, 4
    269c:	08 c0       	rjmp	.+16     	; 0x26ae <LCD1_write+0xc6>
    269e:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    26a2:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    26a6:	90 81       	ld	r25, Z
    26a8:	90 61       	ori	r25, 0x10	; 16
    26aa:	90 83       	st	Z, r25
    26ac:	07 c0       	rjmp	.+14     	; 0x26bc <LCD1_write+0xd4>
    26ae:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    26b2:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    26b6:	90 81       	ld	r25, Z
    26b8:	9f 7e       	andi	r25, 0xEF	; 239
    26ba:	90 83       	st	Z, r25
    26bc:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    26c0:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    26c4:	90 81       	ld	r25, Z
    26c6:	9b 7f       	andi	r25, 0xFB	; 251
    26c8:	90 83       	st	Z, r25
    26ca:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    26ce:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    26d2:	90 81       	ld	r25, Z
    26d4:	94 60       	ori	r25, 0x04	; 4
    26d6:	90 83       	st	Z, r25
    26d8:	83 ff       	sbrs	r24, 3
    26da:	08 c0       	rjmp	.+16     	; 0x26ec <LCD1_write+0x104>
    26dc:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    26e0:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    26e4:	90 81       	ld	r25, Z
    26e6:	90 68       	ori	r25, 0x80	; 128
    26e8:	90 83       	st	Z, r25
    26ea:	07 c0       	rjmp	.+14     	; 0x26fa <LCD1_write+0x112>
    26ec:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    26f0:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    26f4:	90 81       	ld	r25, Z
    26f6:	9f 77       	andi	r25, 0x7F	; 127
    26f8:	90 83       	st	Z, r25
    26fa:	82 ff       	sbrs	r24, 2
    26fc:	08 c0       	rjmp	.+16     	; 0x270e <LCD1_write+0x126>
    26fe:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    2702:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    2706:	90 81       	ld	r25, Z
    2708:	90 64       	ori	r25, 0x40	; 64
    270a:	90 83       	st	Z, r25
    270c:	07 c0       	rjmp	.+14     	; 0x271c <LCD1_write+0x134>
    270e:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    2712:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    2716:	90 81       	ld	r25, Z
    2718:	9f 7b       	andi	r25, 0xBF	; 191
    271a:	90 83       	st	Z, r25
    271c:	81 ff       	sbrs	r24, 1
    271e:	08 c0       	rjmp	.+16     	; 0x2730 <LCD1_write+0x148>
    2720:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    2724:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    2728:	90 81       	ld	r25, Z
    272a:	90 62       	ori	r25, 0x20	; 32
    272c:	90 83       	st	Z, r25
    272e:	07 c0       	rjmp	.+14     	; 0x273e <LCD1_write+0x156>
    2730:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    2734:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    2738:	90 81       	ld	r25, Z
    273a:	9f 7d       	andi	r25, 0xDF	; 223
    273c:	90 83       	st	Z, r25
    273e:	80 ff       	sbrs	r24, 0
    2740:	08 c0       	rjmp	.+16     	; 0x2752 <LCD1_write+0x16a>
    2742:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    2746:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    274a:	80 81       	ld	r24, Z
    274c:	80 61       	ori	r24, 0x10	; 16
    274e:	80 83       	st	Z, r24
    2750:	07 c0       	rjmp	.+14     	; 0x2760 <LCD1_write+0x178>
    2752:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    2756:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    275a:	80 81       	ld	r24, Z
    275c:	8f 7e       	andi	r24, 0xEF	; 239
    275e:	80 83       	st	Z, r24
    2760:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    2764:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    2768:	80 81       	ld	r24, Z
    276a:	8b 7f       	andi	r24, 0xFB	; 251
    276c:	80 83       	st	Z, r24
    276e:	08 95       	ret

00002770 <LCD1_read>:
    2770:	e0 91 7f 02 	lds	r30, 0x027F	; 0x80027f <lcd1_DDR>
    2774:	f0 91 80 02 	lds	r31, 0x0280	; 0x800280 <lcd1_DDR+0x1>
    2778:	20 81       	ld	r18, Z
    277a:	2f 70       	andi	r18, 0x0F	; 15
    277c:	20 83       	st	Z, r18
    277e:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    2782:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    2786:	20 81       	ld	r18, Z
    2788:	20 6f       	ori	r18, 0xF0	; 240
    278a:	20 83       	st	Z, r18
    278c:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    2790:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    2794:	20 81       	ld	r18, Z
    2796:	22 60       	ori	r18, 0x02	; 2
    2798:	20 83       	st	Z, r18
    279a:	89 2b       	or	r24, r25
    279c:	41 f0       	breq	.+16     	; 0x27ae <LCD1_read+0x3e>
    279e:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    27a2:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    27a6:	80 81       	ld	r24, Z
    27a8:	81 60       	ori	r24, 0x01	; 1
    27aa:	80 83       	st	Z, r24
    27ac:	07 c0       	rjmp	.+14     	; 0x27bc <LCD1_read+0x4c>
    27ae:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    27b2:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    27b6:	80 81       	ld	r24, Z
    27b8:	8e 7f       	andi	r24, 0xFE	; 254
    27ba:	80 83       	st	Z, r24
    27bc:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    27c0:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    27c4:	80 81       	ld	r24, Z
    27c6:	84 60       	ori	r24, 0x04	; 4
    27c8:	80 83       	st	Z, r24
    27ca:	e0 91 82 02 	lds	r30, 0x0282	; 0x800282 <lcd1_PIN>
    27ce:	f0 91 83 02 	lds	r31, 0x0283	; 0x800283 <lcd1_PIN+0x1>
    27d2:	80 81       	ld	r24, Z
    27d4:	88 23       	and	r24, r24
    27d6:	14 f0       	brlt	.+4      	; 0x27dc <LCD1_read+0x6c>
    27d8:	80 e0       	ldi	r24, 0x00	; 0
    27da:	01 c0       	rjmp	.+2      	; 0x27de <LCD1_read+0x6e>
    27dc:	80 e8       	ldi	r24, 0x80	; 128
    27de:	90 81       	ld	r25, Z
    27e0:	96 ff       	sbrs	r25, 6
    27e2:	02 c0       	rjmp	.+4      	; 0x27e8 <LCD1_read+0x78>
    27e4:	80 64       	ori	r24, 0x40	; 64
    27e6:	01 c0       	rjmp	.+2      	; 0x27ea <LCD1_read+0x7a>
    27e8:	8f 7b       	andi	r24, 0xBF	; 191
    27ea:	90 81       	ld	r25, Z
    27ec:	95 ff       	sbrs	r25, 5
    27ee:	02 c0       	rjmp	.+4      	; 0x27f4 <LCD1_read+0x84>
    27f0:	80 62       	ori	r24, 0x20	; 32
    27f2:	01 c0       	rjmp	.+2      	; 0x27f6 <LCD1_read+0x86>
    27f4:	8f 7d       	andi	r24, 0xDF	; 223
    27f6:	90 81       	ld	r25, Z
    27f8:	94 ff       	sbrs	r25, 4
    27fa:	02 c0       	rjmp	.+4      	; 0x2800 <LCD1_read+0x90>
    27fc:	80 61       	ori	r24, 0x10	; 16
    27fe:	01 c0       	rjmp	.+2      	; 0x2802 <LCD1_read+0x92>
    2800:	8f 7e       	andi	r24, 0xEF	; 239
    2802:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    2806:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    280a:	90 81       	ld	r25, Z
    280c:	9b 7f       	andi	r25, 0xFB	; 251
    280e:	90 83       	st	Z, r25
    2810:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    2814:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    2818:	90 81       	ld	r25, Z
    281a:	94 60       	ori	r25, 0x04	; 4
    281c:	90 83       	st	Z, r25
    281e:	e0 91 82 02 	lds	r30, 0x0282	; 0x800282 <lcd1_PIN>
    2822:	f0 91 83 02 	lds	r31, 0x0283	; 0x800283 <lcd1_PIN+0x1>
    2826:	90 81       	ld	r25, Z
    2828:	99 23       	and	r25, r25
    282a:	14 f4       	brge	.+4      	; 0x2830 <LCD1_read+0xc0>
    282c:	88 60       	ori	r24, 0x08	; 8
    282e:	01 c0       	rjmp	.+2      	; 0x2832 <LCD1_read+0xc2>
    2830:	87 7f       	andi	r24, 0xF7	; 247
    2832:	90 81       	ld	r25, Z
    2834:	96 ff       	sbrs	r25, 6
    2836:	02 c0       	rjmp	.+4      	; 0x283c <LCD1_read+0xcc>
    2838:	84 60       	ori	r24, 0x04	; 4
    283a:	01 c0       	rjmp	.+2      	; 0x283e <LCD1_read+0xce>
    283c:	8b 7f       	andi	r24, 0xFB	; 251
    283e:	90 81       	ld	r25, Z
    2840:	95 ff       	sbrs	r25, 5
    2842:	02 c0       	rjmp	.+4      	; 0x2848 <LCD1_read+0xd8>
    2844:	82 60       	ori	r24, 0x02	; 2
    2846:	01 c0       	rjmp	.+2      	; 0x284a <LCD1_read+0xda>
    2848:	8d 7f       	andi	r24, 0xFD	; 253
    284a:	90 81       	ld	r25, Z
    284c:	94 ff       	sbrs	r25, 4
    284e:	02 c0       	rjmp	.+4      	; 0x2854 <LCD1_read+0xe4>
    2850:	81 60       	ori	r24, 0x01	; 1
    2852:	01 c0       	rjmp	.+2      	; 0x2856 <LCD1_read+0xe6>
    2854:	8e 7f       	andi	r24, 0xFE	; 254
    2856:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    285a:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    285e:	90 81       	ld	r25, Z
    2860:	9b 7f       	andi	r25, 0xFB	; 251
    2862:	90 83       	st	Z, r25
    2864:	08 95       	ret

00002866 <LCD1_BF>:
    2866:	cf 93       	push	r28
    2868:	df 93       	push	r29
    286a:	80 e0       	ldi	r24, 0x00	; 0
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	80 df       	rcall	.-256    	; 0x2770 <LCD1_read>
    2870:	cb e0       	ldi	r28, 0x0B	; 11
    2872:	d0 e0       	ldi	r29, 0x00	; 0
    2874:	05 c0       	rjmp	.+10     	; 0x2880 <LCD1_BF+0x1a>
    2876:	80 e0       	ldi	r24, 0x00	; 0
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	7a df       	rcall	.-268    	; 0x2770 <LCD1_read>
    287c:	21 97       	sbiw	r28, 0x01	; 1
    287e:	11 f0       	breq	.+4      	; 0x2884 <LCD1_BF+0x1e>
    2880:	88 23       	and	r24, r24
    2882:	cc f3       	brlt	.-14     	; 0x2876 <LCD1_BF+0x10>
    2884:	df 91       	pop	r29
    2886:	cf 91       	pop	r28
    2888:	08 95       	ret

0000288a <LCD1_putch>:
    288a:	61 e0       	ldi	r22, 0x01	; 1
    288c:	70 e0       	ldi	r23, 0x00	; 0
    288e:	ac de       	rcall	.-680    	; 0x25e8 <LCD1_write>
    2890:	ea cf       	rjmp	.-44     	; 0x2866 <LCD1_BF>
    2892:	08 95       	ret

00002894 <LCD1_getch>:
    2894:	cf 93       	push	r28
    2896:	81 e0       	ldi	r24, 0x01	; 1
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	6a df       	rcall	.-300    	; 0x2770 <LCD1_read>
    289c:	c8 2f       	mov	r28, r24
    289e:	e3 df       	rcall	.-58     	; 0x2866 <LCD1_BF>
    28a0:	8c 2f       	mov	r24, r28
    28a2:	cf 91       	pop	r28
    28a4:	08 95       	ret

000028a6 <LCD1_string>:
    28a6:	cf 93       	push	r28
    28a8:	df 93       	push	r29
    28aa:	ec 01       	movw	r28, r24
    28ac:	88 81       	ld	r24, Y
    28ae:	88 23       	and	r24, r24
    28b0:	41 f0       	breq	.+16     	; 0x28c2 <LCD1_string+0x1c>
    28b2:	21 96       	adiw	r28, 0x01	; 1
    28b4:	61 e0       	ldi	r22, 0x01	; 1
    28b6:	70 e0       	ldi	r23, 0x00	; 0
    28b8:	97 de       	rcall	.-722    	; 0x25e8 <LCD1_write>
    28ba:	d5 df       	rcall	.-86     	; 0x2866 <LCD1_BF>
    28bc:	89 91       	ld	r24, Y+
    28be:	81 11       	cpse	r24, r1
    28c0:	f9 cf       	rjmp	.-14     	; 0x28b4 <LCD1_string+0xe>
    28c2:	df 91       	pop	r29
    28c4:	cf 91       	pop	r28
    28c6:	08 95       	ret

000028c8 <LCD1_string_size>:
    28c8:	0f 93       	push	r16
    28ca:	1f 93       	push	r17
    28cc:	cf 93       	push	r28
    28ce:	df 93       	push	r29
    28d0:	fc 01       	movw	r30, r24
    28d2:	d6 2f       	mov	r29, r22
    28d4:	80 81       	ld	r24, Z
    28d6:	88 23       	and	r24, r24
    28d8:	51 f0       	breq	.+20     	; 0x28ee <LCD1_string_size+0x26>
    28da:	8f 01       	movw	r16, r30
    28dc:	0f 5f       	subi	r16, 0xFF	; 255
    28de:	1f 4f       	sbci	r17, 0xFF	; 255
    28e0:	61 11       	cpse	r22, r1
    28e2:	09 c0       	rjmp	.+18     	; 0x28f6 <LCD1_string_size+0x2e>
    28e4:	1b c0       	rjmp	.+54     	; 0x291c <LCD1_string_size+0x54>
    28e6:	cf 5f       	subi	r28, 0xFF	; 255
    28e8:	dc 17       	cp	r29, r28
    28ea:	30 f4       	brcc	.+12     	; 0x28f8 <LCD1_string_size+0x30>
    28ec:	01 c0       	rjmp	.+2      	; 0x28f0 <LCD1_string_size+0x28>
    28ee:	c0 e0       	ldi	r28, 0x00	; 0
    28f0:	cd 17       	cp	r28, r29
    28f2:	60 f0       	brcs	.+24     	; 0x290c <LCD1_string_size+0x44>
    28f4:	13 c0       	rjmp	.+38     	; 0x291c <LCD1_string_size+0x54>
    28f6:	c1 e0       	ldi	r28, 0x01	; 1
    28f8:	61 e0       	ldi	r22, 0x01	; 1
    28fa:	70 e0       	ldi	r23, 0x00	; 0
    28fc:	75 de       	rcall	.-790    	; 0x25e8 <LCD1_write>
    28fe:	b3 df       	rcall	.-154    	; 0x2866 <LCD1_BF>
    2900:	f8 01       	movw	r30, r16
    2902:	81 91       	ld	r24, Z+
    2904:	8f 01       	movw	r16, r30
    2906:	81 11       	cpse	r24, r1
    2908:	ee cf       	rjmp	.-36     	; 0x28e6 <LCD1_string_size+0x1e>
    290a:	f2 cf       	rjmp	.-28     	; 0x28f0 <LCD1_string_size+0x28>
    290c:	cf 5f       	subi	r28, 0xFF	; 255
    290e:	61 e0       	ldi	r22, 0x01	; 1
    2910:	70 e0       	ldi	r23, 0x00	; 0
    2912:	80 e2       	ldi	r24, 0x20	; 32
    2914:	69 de       	rcall	.-814    	; 0x25e8 <LCD1_write>
    2916:	a7 df       	rcall	.-178    	; 0x2866 <LCD1_BF>
    2918:	cd 17       	cp	r28, r29
    291a:	c0 f3       	brcs	.-16     	; 0x290c <LCD1_string_size+0x44>
    291c:	df 91       	pop	r29
    291e:	cf 91       	pop	r28
    2920:	1f 91       	pop	r17
    2922:	0f 91       	pop	r16
    2924:	08 95       	ret

00002926 <LCD1_hspace>:
    2926:	cf 93       	push	r28
    2928:	c8 2f       	mov	r28, r24
    292a:	88 23       	and	r24, r24
    292c:	39 f0       	breq	.+14     	; 0x293c <LCD1_hspace+0x16>
    292e:	61 e0       	ldi	r22, 0x01	; 1
    2930:	70 e0       	ldi	r23, 0x00	; 0
    2932:	80 e2       	ldi	r24, 0x20	; 32
    2934:	59 de       	rcall	.-846    	; 0x25e8 <LCD1_write>
    2936:	97 df       	rcall	.-210    	; 0x2866 <LCD1_BF>
    2938:	c1 50       	subi	r28, 0x01	; 1
    293a:	c9 f7       	brne	.-14     	; 0x292e <LCD1_hspace+0x8>
    293c:	cf 91       	pop	r28
    293e:	08 95       	ret

00002940 <LCD1_gotoxy>:
    2940:	26 2f       	mov	r18, r22
    2942:	81 30       	cpi	r24, 0x01	; 1
    2944:	91 05       	cpc	r25, r1
    2946:	71 f0       	breq	.+28     	; 0x2964 <LCD1_gotoxy+0x24>
    2948:	30 f0       	brcs	.+12     	; 0x2956 <LCD1_gotoxy+0x16>
    294a:	82 30       	cpi	r24, 0x02	; 2
    294c:	91 05       	cpc	r25, r1
    294e:	89 f0       	breq	.+34     	; 0x2972 <LCD1_gotoxy+0x32>
    2950:	03 97       	sbiw	r24, 0x03	; 3
    2952:	b1 f0       	breq	.+44     	; 0x2980 <LCD1_gotoxy+0x40>
    2954:	08 95       	ret
    2956:	60 e0       	ldi	r22, 0x00	; 0
    2958:	70 e0       	ldi	r23, 0x00	; 0
    295a:	80 e8       	ldi	r24, 0x80	; 128
    295c:	82 0f       	add	r24, r18
    295e:	44 de       	rcall	.-888    	; 0x25e8 <LCD1_write>
    2960:	82 cf       	rjmp	.-252    	; 0x2866 <LCD1_BF>
    2962:	08 95       	ret
    2964:	60 e0       	ldi	r22, 0x00	; 0
    2966:	70 e0       	ldi	r23, 0x00	; 0
    2968:	80 ec       	ldi	r24, 0xC0	; 192
    296a:	82 0f       	add	r24, r18
    296c:	3d de       	rcall	.-902    	; 0x25e8 <LCD1_write>
    296e:	7b cf       	rjmp	.-266    	; 0x2866 <LCD1_BF>
    2970:	08 95       	ret
    2972:	60 e0       	ldi	r22, 0x00	; 0
    2974:	70 e0       	ldi	r23, 0x00	; 0
    2976:	84 e9       	ldi	r24, 0x94	; 148
    2978:	82 0f       	add	r24, r18
    297a:	36 de       	rcall	.-916    	; 0x25e8 <LCD1_write>
    297c:	74 cf       	rjmp	.-280    	; 0x2866 <LCD1_BF>
    297e:	08 95       	ret
    2980:	60 e0       	ldi	r22, 0x00	; 0
    2982:	70 e0       	ldi	r23, 0x00	; 0
    2984:	84 ed       	ldi	r24, 0xD4	; 212
    2986:	82 0f       	add	r24, r18
    2988:	2f de       	rcall	.-930    	; 0x25e8 <LCD1_write>
    298a:	6d cf       	rjmp	.-294    	; 0x2866 <LCD1_BF>
    298c:	08 95       	ret

0000298e <LCD1_clear>:
    298e:	60 e0       	ldi	r22, 0x00	; 0
    2990:	70 e0       	ldi	r23, 0x00	; 0
    2992:	81 e0       	ldi	r24, 0x01	; 1
    2994:	29 de       	rcall	.-942    	; 0x25e8 <LCD1_write>
    2996:	87 ee       	ldi	r24, 0xE7	; 231
    2998:	97 e1       	ldi	r25, 0x17	; 23
    299a:	01 97       	sbiw	r24, 0x01	; 1
    299c:	f1 f7       	brne	.-4      	; 0x299a <LCD1_clear+0xc>
    299e:	00 c0       	rjmp	.+0      	; 0x29a0 <LCD1_clear+0x12>
    29a0:	00 00       	nop
    29a2:	08 95       	ret

000029a4 <LCD1_inic>:
	return lcd1;
}
void LCD1_inic(void)
{
	//LCD INIC
	*lcd1_DDR=(1<<RS)|(1<<RW)|(1<<EN)|(0<<NC);
    29a4:	e0 91 7f 02 	lds	r30, 0x027F	; 0x80027f <lcd1_DDR>
    29a8:	f0 91 80 02 	lds	r31, 0x0280	; 0x800280 <lcd1_DDR+0x1>
    29ac:	87 e0       	ldi	r24, 0x07	; 7
    29ae:	80 83       	st	Z, r24
	*lcd1_PORT=(1<<NC);
    29b0:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    29b4:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    29b8:	88 e0       	ldi	r24, 0x08	; 8
    29ba:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    29bc:	2f ef       	ldi	r18, 0xFF	; 255
    29be:	83 ef       	ldi	r24, 0xF3	; 243
    29c0:	91 e0       	ldi	r25, 0x01	; 1
    29c2:	21 50       	subi	r18, 0x01	; 1
    29c4:	80 40       	sbci	r24, 0x00	; 0
    29c6:	90 40       	sbci	r25, 0x00	; 0
    29c8:	e1 f7       	brne	.-8      	; 0x29c2 <LCD1_inic+0x1e>
    29ca:	00 c0       	rjmp	.+0      	; 0x29cc <LCD1_inic+0x28>
    29cc:	00 00       	nop
	/***INICIALIZACAO LCD**datasheet*/
	_delay_ms(40);
	LCD1_write(0x33,INST); //function set
    29ce:	60 e0       	ldi	r22, 0x00	; 0
    29d0:	70 e0       	ldi	r23, 0x00	; 0
    29d2:	83 e3       	ldi	r24, 0x33	; 51
    29d4:	09 de       	rcall	.-1006   	; 0x25e8 <LCD1_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    29d6:	20 ed       	ldi	r18, 0xD0	; 208
    29d8:	2a 95       	dec	r18
    29da:	f1 f7       	brne	.-4      	; 0x29d8 <LCD1_inic+0x34>
	_delay_us(39);
	LCD1_write(0x33,INST); //function set
    29dc:	60 e0       	ldi	r22, 0x00	; 0
    29de:	70 e0       	ldi	r23, 0x00	; 0
    29e0:	83 e3       	ldi	r24, 0x33	; 51
    29e2:	02 de       	rcall	.-1020   	; 0x25e8 <LCD1_write>
    29e4:	80 ed       	ldi	r24, 0xD0	; 208
    29e6:	8a 95       	dec	r24
    29e8:	f1 f7       	brne	.-4      	; 0x29e6 <LCD1_inic+0x42>
	_delay_us(39);
	LCD1_write(0x2B,INST); //function set
    29ea:	60 e0       	ldi	r22, 0x00	; 0
    29ec:	70 e0       	ldi	r23, 0x00	; 0
    29ee:	8b e2       	ldi	r24, 0x2B	; 43
    29f0:	fb dd       	rcall	.-1034   	; 0x25e8 <LCD1_write>
    29f2:	95 ec       	ldi	r25, 0xC5	; 197
    29f4:	9a 95       	dec	r25
    29f6:	f1 f7       	brne	.-4      	; 0x29f4 <LCD1_inic+0x50>
    29f8:	00 00       	nop
	_delay_us(37);
	LCD1_write(0x0C,INST);// display on/off control
    29fa:	60 e0       	ldi	r22, 0x00	; 0
    29fc:	70 e0       	ldi	r23, 0x00	; 0
    29fe:	8c e0       	ldi	r24, 0x0C	; 12
    2a00:	f3 dd       	rcall	.-1050   	; 0x25e8 <LCD1_write>
    2a02:	25 ec       	ldi	r18, 0xC5	; 197
    2a04:	2a 95       	dec	r18
    2a06:	f1 f7       	brne	.-4      	; 0x2a04 <LCD1_inic+0x60>
	_delay_us(37);
	LCD1_write(0x01,INST);// clear display
    2a08:	00 00       	nop
    2a0a:	60 e0       	ldi	r22, 0x00	; 0
    2a0c:	70 e0       	ldi	r23, 0x00	; 0
    2a0e:	81 e0       	ldi	r24, 0x01	; 1
    2a10:	eb dd       	rcall	.-1066   	; 0x25e8 <LCD1_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2a12:	87 ee       	ldi	r24, 0xE7	; 231
    2a14:	97 e1       	ldi	r25, 0x17	; 23
    2a16:	01 97       	sbiw	r24, 0x01	; 1
    2a18:	f1 f7       	brne	.-4      	; 0x2a16 <LCD1_inic+0x72>
    2a1a:	00 c0       	rjmp	.+0      	; 0x2a1c <LCD1_inic+0x78>
	_delay_ms(1.53);
	LCD1_write(0x06,INST);// entry mode set (crazy settings)
    2a1c:	00 00       	nop
    2a1e:	60 e0       	ldi	r22, 0x00	; 0
    2a20:	70 e0       	ldi	r23, 0x00	; 0
    2a22:	86 e0       	ldi	r24, 0x06	; 6
    2a24:	e1 dd       	rcall	.-1086   	; 0x25e8 <LCD1_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2a26:	95 ec       	ldi	r25, 0xC5	; 197
    2a28:	9a 95       	dec	r25
    2a2a:	f1 f7       	brne	.-4      	; 0x2a28 <LCD1_inic+0x84>
    2a2c:	00 00       	nop
    2a2e:	08 95       	ret

00002a30 <LCD1enable>:
		LCD0_inic();
	lcd0_detect=tmp;
}
/*******************************************************************/
LCD1 LCD1enable(volatile uint8_t *ddr, volatile uint8_t *pin, volatile uint8_t *port)
{
    2a30:	1f 93       	push	r17
    2a32:	cf 93       	push	r28
    2a34:	df 93       	push	r29
    2a36:	ec 01       	movw	r28, r24
	//LOCAL VARIABLES
	uint8_t tSREG;
	tSREG=SREG;
    2a38:	1f b7       	in	r17, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    2a3a:	8f b7       	in	r24, 0x3f	; 63
    2a3c:	8f 77       	andi	r24, 0x7F	; 127
    2a3e:	8f bf       	out	0x3f, r24	; 63
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	LCD1 lcd1;
	//import parametros
	lcd1_DDR=ddr;
    2a40:	70 93 80 02 	sts	0x0280, r23	; 0x800280 <lcd1_DDR+0x1>
    2a44:	60 93 7f 02 	sts	0x027F, r22	; 0x80027f <lcd1_DDR>
	lcd1_PIN=pin;
    2a48:	50 93 83 02 	sts	0x0283, r21	; 0x800283 <lcd1_PIN+0x1>
    2a4c:	40 93 82 02 	sts	0x0282, r20	; 0x800282 <lcd1_PIN>
	lcd1_PORT=port;
    2a50:	30 93 8a 02 	sts	0x028A, r19	; 0x80028a <lcd1_PORT+0x1>
    2a54:	20 93 89 02 	sts	0x0289, r18	; 0x800289 <lcd1_PORT>
	//inic variables
	*lcd1_DDR=0x00;
    2a58:	fb 01       	movw	r30, r22
    2a5a:	10 82       	st	Z, r1
	*lcd1_PORT=0xFF;
    2a5c:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <lcd1_PORT>
    2a60:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <lcd1_PORT+0x1>
    2a64:	8f ef       	ldi	r24, 0xFF	; 255
    2a66:	80 83       	st	Z, r24
	lcd1_detect=*lcd1_PIN & (1<<NC);
    2a68:	e0 91 82 02 	lds	r30, 0x0282	; 0x800282 <lcd1_PIN>
    2a6c:	f0 91 83 02 	lds	r31, 0x0283	; 0x800283 <lcd1_PIN+0x1>
    2a70:	80 81       	ld	r24, Z
    2a72:	88 70       	andi	r24, 0x08	; 8
    2a74:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <lcd1_detect>
	lcd1.hspace=LCD1_hspace;
	lcd1.clear=LCD1_clear;
	lcd1.gotoxy=LCD1_gotoxy;
	lcd1.reboot=LCD1_reboot;
	//LCD INIC
	LCD1_inic();
    2a78:	95 df       	rcall	.-214    	; 0x29a4 <LCD1_inic>
	SREG=tSREG;
    2a7a:	1f bf       	out	0x3f, r17	; 63
	//
	return lcd1;
    2a7c:	84 ef       	ldi	r24, 0xF4	; 244
    2a7e:	92 e1       	ldi	r25, 0x12	; 18
    2a80:	99 83       	std	Y+1, r25	; 0x01
    2a82:	88 83       	st	Y, r24
    2a84:	88 eb       	ldi	r24, 0xB8	; 184
    2a86:	93 e1       	ldi	r25, 0x13	; 19
    2a88:	9b 83       	std	Y+3, r25	; 0x03
    2a8a:	8a 83       	std	Y+2, r24	; 0x02
    2a8c:	83 e3       	ldi	r24, 0x33	; 51
    2a8e:	94 e1       	ldi	r25, 0x14	; 20
    2a90:	9d 83       	std	Y+5, r25	; 0x05
    2a92:	8c 83       	std	Y+4, r24	; 0x04
    2a94:	85 e4       	ldi	r24, 0x45	; 69
    2a96:	94 e1       	ldi	r25, 0x14	; 20
    2a98:	9f 83       	std	Y+7, r25	; 0x07
    2a9a:	8e 83       	std	Y+6, r24	; 0x06
    2a9c:	8a e4       	ldi	r24, 0x4A	; 74
    2a9e:	94 e1       	ldi	r25, 0x14	; 20
    2aa0:	99 87       	std	Y+9, r25	; 0x09
    2aa2:	88 87       	std	Y+8, r24	; 0x08
    2aa4:	83 e5       	ldi	r24, 0x53	; 83
    2aa6:	94 e1       	ldi	r25, 0x14	; 20
    2aa8:	9b 87       	std	Y+11, r25	; 0x0b
    2aaa:	8a 87       	std	Y+10, r24	; 0x0a
    2aac:	84 e6       	ldi	r24, 0x64	; 100
    2aae:	94 e1       	ldi	r25, 0x14	; 20
    2ab0:	9d 87       	std	Y+13, r25	; 0x0d
    2ab2:	8c 87       	std	Y+12, r24	; 0x0c
    2ab4:	83 e9       	ldi	r24, 0x93	; 147
    2ab6:	94 e1       	ldi	r25, 0x14	; 20
    2ab8:	9f 87       	std	Y+15, r25	; 0x0f
    2aba:	8e 87       	std	Y+14, r24	; 0x0e
    2abc:	87 ec       	ldi	r24, 0xC7	; 199
    2abe:	94 e1       	ldi	r25, 0x14	; 20
    2ac0:	99 8b       	std	Y+17, r25	; 0x11
    2ac2:	88 8b       	std	Y+16, r24	; 0x10
    2ac4:	80 ea       	ldi	r24, 0xA0	; 160
    2ac6:	94 e1       	ldi	r25, 0x14	; 20
    2ac8:	9b 8b       	std	Y+19, r25	; 0x13
    2aca:	8a 8b       	std	Y+18, r24	; 0x12
    2acc:	8f e6       	ldi	r24, 0x6F	; 111
    2ace:	95 e1       	ldi	r25, 0x15	; 21
    2ad0:	9d 8b       	std	Y+21, r25	; 0x15
    2ad2:	8c 8b       	std	Y+20, r24	; 0x14
}
    2ad4:	ce 01       	movw	r24, r28
    2ad6:	df 91       	pop	r29
    2ad8:	cf 91       	pop	r28
    2ada:	1f 91       	pop	r17
    2adc:	08 95       	ret

00002ade <LCD1_reboot>:
	*lcd1_PORT|=(1<<EN);
	LCD_ticks(num);
	*lcd1_PORT&=~(1<<EN);
}
void LCD1_reboot(void)
{
    2ade:	cf 93       	push	r28
	//low high detect pin NC
	uint8_t i;
	uint8_t tmp;
	tmp=*lcd1_PIN & (1<<NC);
    2ae0:	e0 91 82 02 	lds	r30, 0x0282	; 0x800282 <lcd1_PIN>
    2ae4:	f0 91 83 02 	lds	r31, 0x0283	; 0x800283 <lcd1_PIN+0x1>
    2ae8:	c0 81       	ld	r28, Z
    2aea:	c8 70       	andi	r28, 0x08	; 8
	i=tmp^lcd1_detect;
    2aec:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <lcd1_detect>
    2af0:	8c 27       	eor	r24, r28
	i&=tmp;
	if(i)
    2af2:	8c 23       	and	r24, r28
    2af4:	09 f0       	breq	.+2      	; 0x2af8 <LCD1_reboot+0x1a>
		LCD1_inic();
    2af6:	56 df       	rcall	.-340    	; 0x29a4 <LCD1_inic>
	lcd1_detect=tmp;
    2af8:	c0 93 81 02 	sts	0x0281, r28	; 0x800281 <lcd1_detect>
}
    2afc:	cf 91       	pop	r28
    2afe:	08 95       	ret

00002b00 <PORTINIT>:
** procedure and function definition
*/
void PORTINIT()
{
	//INPUT
	DDRF=0x00;
    2b00:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	PORTF=0x0F;
    2b04:	8f e0       	ldi	r24, 0x0F	; 15
    2b06:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	DDRE=0X00;
    2b0a:	12 b8       	out	0x02, r1	; 2
	PORTE=0XFF;
    2b0c:	8f ef       	ldi	r24, 0xFF	; 255
    2b0e:	83 b9       	out	0x03, r24	; 3
	DDRD=0X00;
    2b10:	11 ba       	out	0x11, r1	; 17
	PORTD=0XFF;
    2b12:	82 bb       	out	0x12, r24	; 18
	//OUTPUT
	DDRC=0XFF;
    2b14:	84 bb       	out	0x14, r24	; 20
	PORTC=0x00;
    2b16:	15 ba       	out	0x15, r1	; 21
	DDRB|=(1<<5) | (1<<6) | (1<<7);
    2b18:	87 b3       	in	r24, 0x17	; 23
    2b1a:	80 6e       	ori	r24, 0xE0	; 224
    2b1c:	87 bb       	out	0x17, r24	; 23
	//UART0
	//DDRE=0X02;
	SREG|=(1<<GI);
    2b1e:	8f b7       	in	r24, 0x3f	; 63
    2b20:	80 68       	ori	r24, 0x80	; 128
    2b22:	8f bf       	out	0x3f, r24	; 63
    2b24:	08 95       	ret

00002b26 <main>:
/*
** procedure and function
*/
/*MAIN*/
int main(void)
{
    2b26:	cf 93       	push	r28
    2b28:	df 93       	push	r29
    2b2a:	cd b7       	in	r28, 0x3d	; 61
    2b2c:	de b7       	in	r29, 0x3e	; 62
    2b2e:	ce 5c       	subi	r28, 0xCE	; 206
    2b30:	d1 09       	sbc	r29, r1
    2b32:	0f b6       	in	r0, 0x3f	; 63
    2b34:	f8 94       	cli
    2b36:	de bf       	out	0x3e, r29	; 62
    2b38:	0f be       	out	0x3f, r0	; 63
    2b3a:	cd bf       	out	0x3d, r28	; 61
	/***INICIALIZE OBJECTS***/
	FUNC function= FUNCenable();
    2b3c:	ce 01       	movw	r24, r28
    2b3e:	01 96       	adiw	r24, 0x01	; 1
    2b40:	f6 da       	rcall	.-2580   	; 0x212e <FUNCenable>
    2b42:	4b a0       	ldd	r4, Y+35	; 0x23
    2b44:	5c a0       	ldd	r5, Y+36	; 0x24
    2b46:	2d ad       	ldd	r18, Y+61	; 0x3d
    2b48:	3e ad       	ldd	r19, Y+62	; 0x3e
    2b4a:	c7 53       	subi	r28, 0x37	; 55
    2b4c:	df 4f       	sbci	r29, 0xFF	; 255
    2b4e:	39 83       	std	Y+1, r19	; 0x01
    2b50:	28 83       	st	Y, r18
    2b52:	c9 5c       	subi	r28, 0xC9	; 201
    2b54:	d0 40       	sbci	r29, 0x00	; 0
    2b56:	21 96       	adiw	r28, 0x01	; 1
    2b58:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b5a:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b5c:	21 97       	sbiw	r28, 0x01	; 1
    2b5e:	c5 53       	subi	r28, 0x35	; 53
    2b60:	df 4f       	sbci	r29, 0xFF	; 255
    2b62:	99 83       	std	Y+1, r25	; 0x01
    2b64:	88 83       	st	Y, r24
    2b66:	cb 5c       	subi	r28, 0xCB	; 203
    2b68:	d0 40       	sbci	r29, 0x00	; 0
	LCD1 lcd0 = LCD1enable(&DDRA,&PINA,&PORTA);
    2b6a:	2b e3       	ldi	r18, 0x3B	; 59
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	49 e3       	ldi	r20, 0x39	; 57
    2b70:	50 e0       	ldi	r21, 0x00	; 0
    2b72:	6a e3       	ldi	r22, 0x3A	; 58
    2b74:	70 e0       	ldi	r23, 0x00	; 0
    2b76:	ce 01       	movw	r24, r28
    2b78:	85 5b       	subi	r24, 0xB5	; 181
    2b7a:	9f 4f       	sbci	r25, 0xFF	; 255
    2b7c:	59 df       	rcall	.-334    	; 0x2a30 <LCD1enable>
    2b7e:	67 96       	adiw	r28, 0x17	; 23
    2b80:	6e ac       	ldd	r6, Y+62	; 0x3e
    2b82:	7f ac       	ldd	r7, Y+63	; 0x3f
    2b84:	67 97       	sbiw	r28, 0x17	; 23
    2b86:	6f 96       	adiw	r28, 0x1f	; 31
    2b88:	8e ac       	ldd	r8, Y+62	; 0x3e
    2b8a:	9f ac       	ldd	r9, Y+63	; 0x3f
    2b8c:	6f 97       	sbiw	r28, 0x1f	; 31
	//LCD1 lcd1 = LCD1enable(&DDRC,&PINC,&PORTC);
	UART1 uart= UART1enable(103,8,1,NONE);//103 para 9600, 68 para 14400
    2b8e:	00 e0       	ldi	r16, 0x00	; 0
    2b90:	10 e0       	ldi	r17, 0x00	; 0
    2b92:	21 e0       	ldi	r18, 0x01	; 1
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	48 e0       	ldi	r20, 0x08	; 8
    2b98:	50 e0       	ldi	r21, 0x00	; 0
    2b9a:	67 e6       	ldi	r22, 0x67	; 103
    2b9c:	70 e0       	ldi	r23, 0x00	; 0
    2b9e:	ce 01       	movw	r24, r28
    2ba0:	8f 59       	subi	r24, 0x9F	; 159
    2ba2:	9f 4f       	sbci	r25, 0xFF	; 255
    2ba4:	0e 94 8c 08 	call	0x1118	; 0x1118 <UART1enable>
	I2C i2c = I2Cenable(85, 1);
    2ba8:	41 e0       	ldi	r20, 0x01	; 1
    2baa:	65 e5       	ldi	r22, 0x55	; 85
    2bac:	ce 01       	movw	r24, r28
    2bae:	8b 58       	subi	r24, 0x8B	; 139
    2bb0:	9f 4f       	sbci	r25, 0xFF	; 255
    2bb2:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <I2Cenable>
	ANALOG analog = ANALOGenable(1, 128, 3, 0, 4, 7);
    2bb6:	1f 92       	push	r1
    2bb8:	87 e0       	ldi	r24, 0x07	; 7
    2bba:	8f 93       	push	r24
    2bbc:	1f 92       	push	r1
    2bbe:	84 e0       	ldi	r24, 0x04	; 4
    2bc0:	8f 93       	push	r24
    2bc2:	1f 92       	push	r1
    2bc4:	1f 92       	push	r1
    2bc6:	1f 92       	push	r1
    2bc8:	83 e0       	ldi	r24, 0x03	; 3
    2bca:	8f 93       	push	r24
    2bcc:	80 e8       	ldi	r24, 0x80	; 128
    2bce:	8f 93       	push	r24
    2bd0:	81 e0       	ldi	r24, 0x01	; 1
    2bd2:	8f 93       	push	r24
    2bd4:	0e 94 85 03 	call	0x70a	; 0x70a <ANALOGenable>
    2bd8:	1c 01       	movw	r2, r24
	TIMER_COUNTER3 timer3 = TIMER_COUNTER3enable(0,1);
    2bda:	41 e0       	ldi	r20, 0x01	; 1
    2bdc:	60 e0       	ldi	r22, 0x00	; 0
    2bde:	ce 01       	movw	r24, r28
    2be0:	81 58       	subi	r24, 0x81	; 129
    2be2:	9f 4f       	sbci	r25, 0xFF	; 255
    2be4:	0e 94 b8 05 	call	0xb70	; 0xb70 <TIMER_COUNTER3enable>
	TIMER_COUNTER1 timer1 = TIMER_COUNTER1enable(9,0);
    2be8:	40 e0       	ldi	r20, 0x00	; 0
    2bea:	69 e0       	ldi	r22, 0x09	; 9
    2bec:	ce 01       	movw	r24, r28
    2bee:	81 57       	subi	r24, 0x71	; 113
    2bf0:	9f 4f       	sbci	r25, 0xFF	; 255
    2bf2:	0e 94 c2 04 	call	0x984	; 0x984 <TIMER_COUNTER1enable>
	//SPI spi = SPIenable(SPI_MASTER_MODE, SPI_MSB_DATA_ORDER, 0, 8);
	//EEPROM eeprom = EEPROMenable();
	PORTINIT();
    2bf6:	84 df       	rcall	.-248    	; 0x2b00 <PORTINIT>
	int6=INTERRUPTenable();
    2bf8:	0e 94 a0 04 	call	0x940	; 0x940 <INTERRUPTenable>
    2bfc:	20 93 8b 02 	sts	0x028B, r18	; 0x80028b <int6>
    2c00:	30 93 8c 02 	sts	0x028C, r19	; 0x80028c <int6+0x1>
    2c04:	40 93 8d 02 	sts	0x028D, r20	; 0x80028d <int6+0x2>
    2c08:	50 93 8e 02 	sts	0x028E, r21	; 0x80028e <int6+0x3>
    2c0c:	60 93 8f 02 	sts	0x028F, r22	; 0x80028f <int6+0x4>
    2c10:	70 93 90 02 	sts	0x0290, r23	; 0x800290 <int6+0x5>
	relogio=CLOCKenable(0,0,0);
    2c14:	20 e0       	ldi	r18, 0x00	; 0
    2c16:	40 e0       	ldi	r20, 0x00	; 0
    2c18:	60 e0       	ldi	r22, 0x00	; 0
    2c1a:	ce 01       	movw	r24, r28
    2c1c:	8b 54       	subi	r24, 0x4B	; 75
    2c1e:	9f 4f       	sbci	r25, 0xFF	; 255
    2c20:	0e 94 55 0c 	call	0x18aa	; 0x18aa <CLOCKenable>
    2c24:	84 e1       	ldi	r24, 0x14	; 20
    2c26:	fe 01       	movw	r30, r28
    2c28:	eb 54       	subi	r30, 0x4B	; 75
    2c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2c:	a3 e9       	ldi	r26, 0x93	; 147
    2c2e:	b2 e0       	ldi	r27, 0x02	; 2
    2c30:	01 90       	ld	r0, Z+
    2c32:	0d 92       	st	X+, r0
    2c34:	8a 95       	dec	r24
    2c36:	e1 f7       	brne	.-8      	; 0x2c30 <main+0x10a>
	struct keypadata keypadinput={"Ola",'0'};
	KEYPAD keypad = KEYPADenable(&DDRE,&PINE,&PORTE);
    2c38:	43 e2       	ldi	r20, 0x23	; 35
    2c3a:	50 e0       	ldi	r21, 0x00	; 0
    2c3c:	61 e2       	ldi	r22, 0x21	; 33
    2c3e:	70 e0       	ldi	r23, 0x00	; 0
    2c40:	82 e2       	ldi	r24, 0x22	; 34
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	7c dc       	rcall	.-1800   	; 0x253e <KEYPADenable>
    2c46:	c1 56       	subi	r28, 0x61	; 97
    2c48:	df 4f       	sbci	r29, 0xFF	; 255
    2c4a:	28 83       	st	Y, r18
    2c4c:	cf 59       	subi	r28, 0x9F	; 159
    2c4e:	d0 40       	sbci	r29, 0x00	; 0
    2c50:	c0 56       	subi	r28, 0x60	; 96
    2c52:	df 4f       	sbci	r29, 0xFF	; 255
    2c54:	38 83       	st	Y, r19
    2c56:	c0 5a       	subi	r28, 0xA0	; 160
    2c58:	d0 40       	sbci	r29, 0x00	; 0
    2c5a:	cf 55       	subi	r28, 0x5F	; 95
    2c5c:	df 4f       	sbci	r29, 0xFF	; 255
    2c5e:	48 83       	st	Y, r20
    2c60:	c1 5a       	subi	r28, 0xA1	; 161
    2c62:	d0 40       	sbci	r29, 0x00	; 0
    2c64:	ce 55       	subi	r28, 0x5E	; 94
    2c66:	df 4f       	sbci	r29, 0xFF	; 255
    2c68:	58 83       	st	Y, r21
    2c6a:	c2 5a       	subi	r28, 0xA2	; 162
    2c6c:	d0 40       	sbci	r29, 0x00	; 0
    2c6e:	cd 55       	subi	r28, 0x5D	; 93
    2c70:	df 4f       	sbci	r29, 0xFF	; 255
    2c72:	68 83       	st	Y, r22
    2c74:	c3 5a       	subi	r28, 0xA3	; 163
    2c76:	d0 40       	sbci	r29, 0x00	; 0
    2c78:	cc 55       	subi	r28, 0x5C	; 92
    2c7a:	df 4f       	sbci	r29, 0xFF	; 255
    2c7c:	78 83       	st	Y, r23
    2c7e:	c4 5a       	subi	r28, 0xA4	; 164
    2c80:	d0 40       	sbci	r29, 0x00	; 0
	/******/
	//eeprom.update_block( "Sergio !!" , (uint8_t*)&NonVolatileString, 16);
	count=0;
    2c82:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <count>
	char tmp[16];
	uart.putc('>');
    2c86:	af 96       	adiw	r28, 0x2f	; 47
    2c88:	ee ad       	ldd	r30, Y+62	; 0x3e
    2c8a:	ff ad       	ldd	r31, Y+63	; 0x3f
    2c8c:	af 97       	sbiw	r28, 0x2f	; 47
    2c8e:	8e e3       	ldi	r24, 0x3E	; 62
    2c90:	09 95       	icall
	uart.puts("SERGIO CODE");
    2c92:	e1 96       	adiw	r28, 0x31	; 49
    2c94:	ee ad       	ldd	r30, Y+62	; 0x3e
    2c96:	ff ad       	ldd	r31, Y+63	; 0x3f
    2c98:	e1 97       	sbiw	r28, 0x31	; 49
    2c9a:	86 e2       	ldi	r24, 0x26	; 38
    2c9c:	91 e0       	ldi	r25, 0x01	; 1
    2c9e:	09 95       	icall
	timer1.compoutmodeB(2);
    2ca0:	cf 56       	subi	r28, 0x6F	; 111
    2ca2:	df 4f       	sbci	r29, 0xFF	; 255
    2ca4:	e8 81       	ld	r30, Y
    2ca6:	f9 81       	ldd	r31, Y+1	; 0x01
    2ca8:	c1 59       	subi	r28, 0x91	; 145
    2caa:	d0 40       	sbci	r29, 0x00	; 0
    2cac:	82 e0       	ldi	r24, 0x02	; 2
    2cae:	09 95       	icall
	timer1.compareA(20000);
    2cb0:	cb 56       	subi	r28, 0x6B	; 107
    2cb2:	df 4f       	sbci	r29, 0xFF	; 255
    2cb4:	e8 81       	ld	r30, Y
    2cb6:	f9 81       	ldd	r31, Y+1	; 0x01
    2cb8:	c5 59       	subi	r28, 0x95	; 149
    2cba:	d0 40       	sbci	r29, 0x00	; 0
    2cbc:	80 e2       	ldi	r24, 0x20	; 32
    2cbe:	9e e4       	ldi	r25, 0x4E	; 78
    2cc0:	09 95       	icall
	timer1.start(8);
    2cc2:	c5 56       	subi	r28, 0x65	; 101
    2cc4:	df 4f       	sbci	r29, 0xFF	; 255
    2cc6:	e8 81       	ld	r30, Y
    2cc8:	f9 81       	ldd	r31, Y+1	; 0x01
    2cca:	cb 59       	subi	r28, 0x9B	; 155
    2ccc:	d0 40       	sbci	r29, 0x00	; 0
    2cce:	88 e0       	ldi	r24, 0x08	; 8
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	09 95       	icall
	timer3.start(1);
    2cd4:	c5 57       	subi	r28, 0x75	; 117
    2cd6:	df 4f       	sbci	r29, 0xFF	; 255
    2cd8:	e8 81       	ld	r30, Y
    2cda:	f9 81       	ldd	r31, Y+1	; 0x01
    2cdc:	cb 58       	subi	r28, 0x8B	; 139
    2cde:	d0 40       	sbci	r29, 0x00	; 0
    2ce0:	81 e0       	ldi	r24, 0x01	; 1
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	09 95       	icall
	int6.set(6,1);
    2ce6:	e0 91 8b 02 	lds	r30, 0x028B	; 0x80028b <int6>
    2cea:	f0 91 8c 02 	lds	r31, 0x028C	; 0x80028c <int6+0x1>
    2cee:	61 e0       	ldi	r22, 0x01	; 1
    2cf0:	86 e0       	ldi	r24, 0x06	; 6
    2cf2:	09 95       	icall
	lcd0.clear();
    2cf4:	6d 96       	adiw	r28, 0x1d	; 29
    2cf6:	ee ad       	ldd	r30, Y+62	; 0x3e
    2cf8:	ff ad       	ldd	r31, Y+63	; 0x3f
    2cfa:	6d 97       	sbiw	r28, 0x1d	; 29
    2cfc:	09 95       	icall
    2cfe:	0f b6       	in	r0, 0x3f	; 63
    2d00:	f8 94       	cli
    2d02:	de bf       	out	0x3e, r29	; 62
    2d04:	0f be       	out	0x3f, r0	; 63
    2d06:	cd bf       	out	0x3d, r28	; 61
	/**********/
	while(TRUE){
		lcd0.reboot();
    2d08:	a1 96       	adiw	r28, 0x21	; 33
    2d0a:	ee ad       	ldd	r30, Y+62	; 0x3e
    2d0c:	ff ad       	ldd	r31, Y+63	; 0x3f
    2d0e:	a1 97       	sbiw	r28, 0x21	; 33
    2d10:	09 95       	icall
		//lcd1.reboot();
		//TODO:: Please write your application code
		keypadinput=keypad.get();
    2d12:	cf 55       	subi	r28, 0x5F	; 95
    2d14:	df 4f       	sbci	r29, 0xFF	; 255
    2d16:	e8 81       	ld	r30, Y
    2d18:	f9 81       	ldd	r31, Y+1	; 0x01
    2d1a:	c1 5a       	subi	r28, 0xA1	; 161
    2d1c:	d0 40       	sbci	r29, 0x00	; 0
    2d1e:	09 95       	icall
    2d20:	18 2f       	mov	r17, r24
		if(keypadinput.character){
    2d22:	88 23       	and	r24, r24
    2d24:	d9 f0       	breq	.+54     	; 0x2d5c <main+0x236>
			lcd0.gotoxy(0,0);
    2d26:	60 e0       	ldi	r22, 0x00	; 0
    2d28:	70 e0       	ldi	r23, 0x00	; 0
    2d2a:	80 e0       	ldi	r24, 0x00	; 0
    2d2c:	90 e0       	ldi	r25, 0x00	; 0
    2d2e:	f4 01       	movw	r30, r8
    2d30:	09 95       	icall
			lcd0.putch(keypadinput.character);
    2d32:	63 96       	adiw	r28, 0x13	; 19
    2d34:	ee ad       	ldd	r30, Y+62	; 0x3e
    2d36:	ff ad       	ldd	r31, Y+63	; 0x3f
    2d38:	63 97       	sbiw	r28, 0x13	; 19
    2d3a:	81 2f       	mov	r24, r17
    2d3c:	09 95       	icall
		}
		if(keypadinput.character == 'A'){
    2d3e:	11 34       	cpi	r17, 0x41	; 65
    2d40:	31 f4       	brne	.+12     	; 0x2d4e <main+0x228>
			relogio.second_count_reset();
    2d42:	e0 91 9d 02 	lds	r30, 0x029D	; 0x80029d <relogio+0xa>
    2d46:	f0 91 9e 02 	lds	r31, 0x029E	; 0x80029e <relogio+0xb>
    2d4a:	09 95       	icall
    2d4c:	07 c0       	rjmp	.+14     	; 0x2d5c <main+0x236>
		}
		if(keypadinput.character == 'B'){
    2d4e:	12 34       	cpi	r17, 0x42	; 66
    2d50:	29 f4       	brne	.+10     	; 0x2d5c <main+0x236>
			relogio.second_count_stop();
    2d52:	e0 91 9f 02 	lds	r30, 0x029F	; 0x80029f <relogio+0xc>
    2d56:	f0 91 a0 02 	lds	r31, 0x02A0	; 0x8002a0 <relogio+0xd>
    2d5a:	09 95       	icall
		}
		//lcd0.string(function.resizestr(tmp,3));
		lcd0.gotoxy(0,4);
    2d5c:	64 e0       	ldi	r22, 0x04	; 4
    2d5e:	70 e0       	ldi	r23, 0x00	; 0
    2d60:	80 e0       	ldi	r24, 0x00	; 0
    2d62:	90 e0       	ldi	r25, 0x00	; 0
    2d64:	f4 01       	movw	r30, r8
    2d66:	09 95       	icall
		function.ui16toa(PORTC,tmp);
    2d68:	85 b3       	in	r24, 0x15	; 21
    2d6a:	be 01       	movw	r22, r28
    2d6c:	6b 55       	subi	r22, 0x5B	; 91
    2d6e:	7f 4f       	sbci	r23, 0xFF	; 255
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	f2 01       	movw	r30, r4
    2d74:	09 95       	icall
		//lcd0.string(function.resizestr(tmp,3));
		lcd0.string(relogio.show());
    2d76:	e0 91 a5 02 	lds	r30, 0x02A5	; 0x8002a5 <relogio+0x12>
    2d7a:	f0 91 a6 02 	lds	r31, 0x02A6	; 0x8002a6 <relogio+0x13>
    2d7e:	09 95       	icall
    2d80:	f3 01       	movw	r30, r6
    2d82:	09 95       	icall
		//lcd1.gotoxy(0,0);
		//lcd1.string("Ola Sergio");
		lcd0.gotoxy(0,13);
    2d84:	6d e0       	ldi	r22, 0x0D	; 13
    2d86:	70 e0       	ldi	r23, 0x00	; 0
    2d88:	80 e0       	ldi	r24, 0x00	; 0
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	f4 01       	movw	r30, r8
    2d8e:	09 95       	icall
		a=function.trimmer(analog.read(0),0,1023,0,255);
    2d90:	80 e0       	ldi	r24, 0x00	; 0
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	f1 01       	movw	r30, r2
    2d96:	09 95       	icall
    2d98:	bc 01       	movw	r22, r24
    2d9a:	99 0f       	add	r25, r25
    2d9c:	88 0b       	sbc	r24, r24
    2d9e:	99 0b       	sbc	r25, r25
    2da0:	1f 92       	push	r1
    2da2:	1f 92       	push	r1
    2da4:	1f 92       	push	r1
    2da6:	ff ef       	ldi	r31, 0xFF	; 255
    2da8:	ff 93       	push	r31
    2daa:	a1 2c       	mov	r10, r1
    2dac:	b1 2c       	mov	r11, r1
    2dae:	65 01       	movw	r12, r10
    2db0:	ee 24       	eor	r14, r14
    2db2:	ea 94       	dec	r14
    2db4:	13 e0       	ldi	r17, 0x03	; 3
    2db6:	f1 2e       	mov	r15, r17
    2db8:	00 e0       	ldi	r16, 0x00	; 0
    2dba:	10 e0       	ldi	r17, 0x00	; 0
    2dbc:	20 e0       	ldi	r18, 0x00	; 0
    2dbe:	30 e0       	ldi	r19, 0x00	; 0
    2dc0:	a9 01       	movw	r20, r18
    2dc2:	c5 53       	subi	r28, 0x35	; 53
    2dc4:	df 4f       	sbci	r29, 0xFF	; 255
    2dc6:	e8 81       	ld	r30, Y
    2dc8:	f9 81       	ldd	r31, Y+1	; 0x01
    2dca:	cb 5c       	subi	r28, 0xCB	; 203
    2dcc:	d0 40       	sbci	r29, 0x00	; 0
    2dce:	09 95       	icall
    2dd0:	70 93 a9 02 	sts	0x02A9, r23	; 0x8002a9 <a+0x1>
    2dd4:	60 93 a8 02 	sts	0x02A8, r22	; 0x8002a8 <a>
		timer1.compareB(function.trimmer(analog.read(0),0,1023,450,2450));
    2dd8:	c9 56       	subi	r28, 0x69	; 105
    2dda:	df 4f       	sbci	r29, 0xFF	; 255
    2ddc:	28 81       	ld	r18, Y
    2dde:	39 81       	ldd	r19, Y+1	; 0x01
    2de0:	c7 59       	subi	r28, 0x97	; 151
    2de2:	d0 40       	sbci	r29, 0x00	; 0
    2de4:	c3 53       	subi	r28, 0x33	; 51
    2de6:	df 4f       	sbci	r29, 0xFF	; 255
    2de8:	39 83       	std	Y+1, r19	; 0x01
    2dea:	28 83       	st	Y, r18
    2dec:	cd 5c       	subi	r28, 0xCD	; 205
    2dee:	d0 40       	sbci	r29, 0x00	; 0
    2df0:	80 e0       	ldi	r24, 0x00	; 0
    2df2:	90 e0       	ldi	r25, 0x00	; 0
    2df4:	f1 01       	movw	r30, r2
    2df6:	09 95       	icall
    2df8:	bc 01       	movw	r22, r24
    2dfa:	99 0f       	add	r25, r25
    2dfc:	88 0b       	sbc	r24, r24
    2dfe:	99 0b       	sbc	r25, r25
    2e00:	1f 92       	push	r1
    2e02:	1f 92       	push	r1
    2e04:	f9 e0       	ldi	r31, 0x09	; 9
    2e06:	ff 93       	push	r31
    2e08:	22 e9       	ldi	r18, 0x92	; 146
    2e0a:	2f 93       	push	r18
    2e0c:	0f 2e       	mov	r0, r31
    2e0e:	f2 ec       	ldi	r31, 0xC2	; 194
    2e10:	af 2e       	mov	r10, r31
    2e12:	bb 24       	eor	r11, r11
    2e14:	b3 94       	inc	r11
    2e16:	c1 2c       	mov	r12, r1
    2e18:	d1 2c       	mov	r13, r1
    2e1a:	f0 2d       	mov	r31, r0
    2e1c:	20 e0       	ldi	r18, 0x00	; 0
    2e1e:	30 e0       	ldi	r19, 0x00	; 0
    2e20:	a9 01       	movw	r20, r18
    2e22:	c5 53       	subi	r28, 0x35	; 53
    2e24:	df 4f       	sbci	r29, 0xFF	; 255
    2e26:	e8 81       	ld	r30, Y
    2e28:	f9 81       	ldd	r31, Y+1	; 0x01
    2e2a:	cb 5c       	subi	r28, 0xCB	; 203
    2e2c:	d0 40       	sbci	r29, 0x00	; 0
    2e2e:	09 95       	icall
    2e30:	cb 01       	movw	r24, r22
    2e32:	c3 53       	subi	r28, 0x33	; 51
    2e34:	df 4f       	sbci	r29, 0xFF	; 255
    2e36:	e8 81       	ld	r30, Y
    2e38:	f9 81       	ldd	r31, Y+1	; 0x01
    2e3a:	cd 5c       	subi	r28, 0xCD	; 205
    2e3c:	d0 40       	sbci	r29, 0x00	; 0
    2e3e:	09 95       	icall
		function.ui16toa(a,tmp);
    2e40:	be 01       	movw	r22, r28
    2e42:	6b 55       	subi	r22, 0x5B	; 91
    2e44:	7f 4f       	sbci	r23, 0xFF	; 255
    2e46:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <a>
    2e4a:	90 91 a9 02 	lds	r25, 0x02A9	; 0x8002a9 <a+0x1>
    2e4e:	f2 01       	movw	r30, r4
    2e50:	09 95       	icall
		lcd0.string(function.resizestr(tmp,5));
    2e52:	65 e0       	ldi	r22, 0x05	; 5
    2e54:	70 e0       	ldi	r23, 0x00	; 0
    2e56:	ce 01       	movw	r24, r28
    2e58:	8b 55       	subi	r24, 0x5B	; 91
    2e5a:	9f 4f       	sbci	r25, 0xFF	; 255
    2e5c:	c7 53       	subi	r28, 0x37	; 55
    2e5e:	df 4f       	sbci	r29, 0xFF	; 255
    2e60:	e8 81       	ld	r30, Y
    2e62:	f9 81       	ldd	r31, Y+1	; 0x01
    2e64:	c9 5c       	subi	r28, 0xC9	; 201
    2e66:	d0 40       	sbci	r29, 0x00	; 0
    2e68:	09 95       	icall
    2e6a:	f3 01       	movw	r30, r6
    2e6c:	09 95       	icall
		lcd0.gotoxy(1,12);
    2e6e:	6c e0       	ldi	r22, 0x0C	; 12
    2e70:	70 e0       	ldi	r23, 0x00	; 0
    2e72:	81 e0       	ldi	r24, 0x01	; 1
    2e74:	90 e0       	ldi	r25, 0x00	; 0
    2e76:	f4 01       	movw	r30, r8
    2e78:	09 95       	icall
		function.ui16toa(analog.read(2),tmp);
    2e7a:	82 e0       	ldi	r24, 0x02	; 2
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	f1 01       	movw	r30, r2
    2e80:	09 95       	icall
    2e82:	be 01       	movw	r22, r28
    2e84:	6b 55       	subi	r22, 0x5B	; 91
    2e86:	7f 4f       	sbci	r23, 0xFF	; 255
    2e88:	f2 01       	movw	r30, r4
    2e8a:	09 95       	icall
		lcd0.string(function.resizestr(tmp,4));
    2e8c:	64 e0       	ldi	r22, 0x04	; 4
    2e8e:	70 e0       	ldi	r23, 0x00	; 0
    2e90:	ce 01       	movw	r24, r28
    2e92:	8b 55       	subi	r24, 0x5B	; 91
    2e94:	9f 4f       	sbci	r25, 0xFF	; 255
    2e96:	c7 53       	subi	r28, 0x37	; 55
    2e98:	df 4f       	sbci	r29, 0xFF	; 255
    2e9a:	e8 81       	ld	r30, Y
    2e9c:	f9 81       	ldd	r31, Y+1	; 0x01
    2e9e:	c9 5c       	subi	r28, 0xC9	; 201
    2ea0:	d0 40       	sbci	r29, 0x00	; 0
    2ea2:	09 95       	icall
    2ea4:	f3 01       	movw	r30, r6
    2ea6:	09 95       	icall
		//spi.fast_shift(10);
		/***/
		lcd0.gotoxy(1,0);
    2ea8:	60 e0       	ldi	r22, 0x00	; 0
    2eaa:	70 e0       	ldi	r23, 0x00	; 0
    2eac:	81 e0       	ldi	r24, 0x01	; 1
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	f4 01       	movw	r30, r8
    2eb2:	09 95       	icall
		//lcd0.string(function.resizestr(uart.read(),12));
		if(relogio.second_count(210)==1)
    2eb4:	e0 91 9b 02 	lds	r30, 0x029B	; 0x80029b <relogio+0x8>
    2eb8:	f0 91 9c 02 	lds	r31, 0x029C	; 0x80029c <relogio+0x9>
    2ebc:	82 ed       	ldi	r24, 0xD2	; 210
    2ebe:	90 e0       	ldi	r25, 0x00	; 0
    2ec0:	09 95       	icall
    2ec2:	0f b6       	in	r0, 0x3f	; 63
    2ec4:	f8 94       	cli
    2ec6:	de bf       	out	0x3e, r29	; 62
    2ec8:	0f be       	out	0x3f, r0	; 63
    2eca:	cd bf       	out	0x3d, r28	; 61
    2ecc:	81 30       	cpi	r24, 0x01	; 1
    2ece:	29 f4       	brne	.+10     	; 0x2eda <main+0x3b4>
			lcd0.string("3.5 minute");
    2ed0:	82 e3       	ldi	r24, 0x32	; 50
    2ed2:	91 e0       	ldi	r25, 0x01	; 1
    2ed4:	f3 01       	movw	r30, r6
    2ed6:	09 95       	icall
    2ed8:	10 c0       	rjmp	.+32     	; 0x2efa <main+0x3d4>
		else
			lcd0.string(function.resizestr(uart.read(),12));
    2eda:	ab 96       	adiw	r28, 0x2b	; 43
    2edc:	ee ad       	ldd	r30, Y+62	; 0x3e
    2ede:	ff ad       	ldd	r31, Y+63	; 0x3f
    2ee0:	ab 97       	sbiw	r28, 0x2b	; 43
    2ee2:	09 95       	icall
    2ee4:	6c e0       	ldi	r22, 0x0C	; 12
    2ee6:	70 e0       	ldi	r23, 0x00	; 0
    2ee8:	c7 53       	subi	r28, 0x37	; 55
    2eea:	df 4f       	sbci	r29, 0xFF	; 255
    2eec:	e8 81       	ld	r30, Y
    2eee:	f9 81       	ldd	r31, Y+1	; 0x01
    2ef0:	c9 5c       	subi	r28, 0xC9	; 201
    2ef2:	d0 40       	sbci	r29, 0x00	; 0
    2ef4:	09 95       	icall
    2ef6:	f3 01       	movw	r30, r6
    2ef8:	09 95       	icall
		//eeprom.read_block((char*)tmp, (uint8_t*)NonVolatileString, 16);
		//lcd0.string(function.resizestr(tmp,12));
		/***/
		i2c.start(TWI_MASTER_MODE);
    2efa:	e7 96       	adiw	r28, 0x37	; 55
    2efc:	ee ad       	ldd	r30, Y+62	; 0x3e
    2efe:	ff ad       	ldd	r31, Y+63	; 0x3f
    2f00:	e7 97       	sbiw	r28, 0x37	; 55
    2f02:	80 e0       	ldi	r24, 0x00	; 0
    2f04:	09 95       	icall
		i2c.master_connect(10,TWI_WRITE);
    2f06:	e9 96       	adiw	r28, 0x39	; 57
    2f08:	ee ad       	ldd	r30, Y+62	; 0x3e
    2f0a:	ff ad       	ldd	r31, Y+63	; 0x3f
    2f0c:	e9 97       	sbiw	r28, 0x39	; 57
    2f0e:	60 e0       	ldi	r22, 0x00	; 0
    2f10:	8a e0       	ldi	r24, 0x0A	; 10
    2f12:	09 95       	icall
		i2c.master_write('h');
    2f14:	eb 96       	adiw	r28, 0x3b	; 59
    2f16:	ee ad       	ldd	r30, Y+62	; 0x3e
    2f18:	ff ad       	ldd	r31, Y+63	; 0x3f
    2f1a:	eb 97       	sbiw	r28, 0x3b	; 59
    2f1c:	88 e6       	ldi	r24, 0x68	; 104
    2f1e:	09 95       	icall
		i2c.stop();
    2f20:	ef 96       	adiw	r28, 0x3f	; 63
    2f22:	ee ad       	ldd	r30, Y+62	; 0x3e
    2f24:	ff ad       	ldd	r31, Y+63	; 0x3f
    2f26:	ef 97       	sbiw	r28, 0x3f	; 63
    2f28:	09 95       	icall
	}
    2f2a:	ee ce       	rjmp	.-548    	; 0x2d08 <main+0x1e2>

00002f2c <__vector_29>:
}
/*
** interrupt
*/
ISR(TIMER3_OVF_vect) // TIMER0_COMP_vect
{
    2f2c:	1f 92       	push	r1
    2f2e:	0f 92       	push	r0
    2f30:	0f b6       	in	r0, 0x3f	; 63
    2f32:	0f 92       	push	r0
    2f34:	11 24       	eor	r1, r1
    2f36:	0b b6       	in	r0, 0x3b	; 59
    2f38:	0f 92       	push	r0
    2f3a:	2f 93       	push	r18
    2f3c:	3f 93       	push	r19
    2f3e:	4f 93       	push	r20
    2f40:	5f 93       	push	r21
    2f42:	6f 93       	push	r22
    2f44:	7f 93       	push	r23
    2f46:	8f 93       	push	r24
    2f48:	9f 93       	push	r25
    2f4a:	af 93       	push	r26
    2f4c:	bf 93       	push	r27
    2f4e:	ef 93       	push	r30
    2f50:	ff 93       	push	r31
	PORTC=memoria_1[count];
    2f52:	e0 91 a7 02 	lds	r30, 0x02A7	; 0x8002a7 <count>
    2f56:	f0 e0       	ldi	r31, 0x00	; 0
    2f58:	e0 5f       	subi	r30, 0xF0	; 240
    2f5a:	fe 4f       	sbci	r31, 0xFE	; 254
    2f5c:	80 81       	ld	r24, Z
    2f5e:	85 bb       	out	0x15, r24	; 21
	TIMER0_COMPARE_MATCH++;
    2f60:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <TIMER0_COMPARE_MATCH>
    2f64:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <TIMER0_COMPARE_MATCH+0x1>
    2f68:	01 96       	adiw	r24, 0x01	; 1
    2f6a:	90 93 92 02 	sts	0x0292, r25	; 0x800292 <TIMER0_COMPARE_MATCH+0x1>
    2f6e:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <TIMER0_COMPARE_MATCH>
	if(TIMER0_COMPARE_MATCH > a){
    2f72:	20 91 a8 02 	lds	r18, 0x02A8	; 0x8002a8 <a>
    2f76:	30 91 a9 02 	lds	r19, 0x02A9	; 0x8002a9 <a+0x1>
    2f7a:	28 17       	cp	r18, r24
    2f7c:	39 07       	cpc	r19, r25
    2f7e:	70 f4       	brcc	.+28     	; 0x2f9c <__vector_29+0x70>
		TIMER0_COMPARE_MATCH=0;
    2f80:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <TIMER0_COMPARE_MATCH+0x1>
    2f84:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <TIMER0_COMPARE_MATCH>
		count++;
    2f88:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <count>
    2f8c:	8f 5f       	subi	r24, 0xFF	; 255
    2f8e:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <count>
		relogio.increment();
    2f92:	e0 91 95 02 	lds	r30, 0x0295	; 0x800295 <relogio+0x2>
    2f96:	f0 91 96 02 	lds	r31, 0x0296	; 0x800296 <relogio+0x3>
    2f9a:	09 95       	icall
	}
	if(count == vector_size)
    2f9c:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <count>
    2fa0:	80 31       	cpi	r24, 0x10	; 16
    2fa2:	11 f4       	brne	.+4      	; 0x2fa8 <__vector_29+0x7c>
		count=0;
    2fa4:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <count>
}
    2fa8:	ff 91       	pop	r31
    2faa:	ef 91       	pop	r30
    2fac:	bf 91       	pop	r27
    2fae:	af 91       	pop	r26
    2fb0:	9f 91       	pop	r25
    2fb2:	8f 91       	pop	r24
    2fb4:	7f 91       	pop	r23
    2fb6:	6f 91       	pop	r22
    2fb8:	5f 91       	pop	r21
    2fba:	4f 91       	pop	r20
    2fbc:	3f 91       	pop	r19
    2fbe:	2f 91       	pop	r18
    2fc0:	0f 90       	pop	r0
    2fc2:	0b be       	out	0x3b, r0	; 59
    2fc4:	0f 90       	pop	r0
    2fc6:	0f be       	out	0x3f, r0	; 63
    2fc8:	0f 90       	pop	r0
    2fca:	1f 90       	pop	r1
    2fcc:	18 95       	reti

00002fce <__vector_7>:
ISR(INT6_vect)
{
    2fce:	1f 92       	push	r1
    2fd0:	0f 92       	push	r0
    2fd2:	0f b6       	in	r0, 0x3f	; 63
    2fd4:	0f 92       	push	r0
    2fd6:	11 24       	eor	r1, r1
    2fd8:	0b b6       	in	r0, 0x3b	; 59
    2fda:	0f 92       	push	r0
    2fdc:	2f 93       	push	r18
    2fde:	3f 93       	push	r19
    2fe0:	4f 93       	push	r20
    2fe2:	5f 93       	push	r21
    2fe4:	6f 93       	push	r22
    2fe6:	7f 93       	push	r23
    2fe8:	8f 93       	push	r24
    2fea:	9f 93       	push	r25
    2fec:	af 93       	push	r26
    2fee:	bf 93       	push	r27
    2ff0:	ef 93       	push	r30
    2ff2:	ff 93       	push	r31
	int6.set(6,3);
    2ff4:	e0 91 8b 02 	lds	r30, 0x028B	; 0x80028b <int6>
    2ff8:	f0 91 8c 02 	lds	r31, 0x028C	; 0x80028c <int6+0x1>
    2ffc:	63 e0       	ldi	r22, 0x03	; 3
    2ffe:	86 e0       	ldi	r24, 0x06	; 6
    3000:	09 95       	icall
	PORTC=0XFF;
    3002:	8f ef       	ldi	r24, 0xFF	; 255
    3004:	85 bb       	out	0x15, r24	; 21
}
    3006:	ff 91       	pop	r31
    3008:	ef 91       	pop	r30
    300a:	bf 91       	pop	r27
    300c:	af 91       	pop	r26
    300e:	9f 91       	pop	r25
    3010:	8f 91       	pop	r24
    3012:	7f 91       	pop	r23
    3014:	6f 91       	pop	r22
    3016:	5f 91       	pop	r21
    3018:	4f 91       	pop	r20
    301a:	3f 91       	pop	r19
    301c:	2f 91       	pop	r18
    301e:	0f 90       	pop	r0
    3020:	0b be       	out	0x3b, r0	; 59
    3022:	0f 90       	pop	r0
    3024:	0f be       	out	0x3f, r0	; 63
    3026:	0f 90       	pop	r0
    3028:	1f 90       	pop	r1
    302a:	18 95       	reti

0000302c <__mulsi3>:
    302c:	db 01       	movw	r26, r22
    302e:	8f 93       	push	r24
    3030:	9f 93       	push	r25
    3032:	88 d0       	rcall	.+272    	; 0x3144 <__muluhisi3>
    3034:	bf 91       	pop	r27
    3036:	af 91       	pop	r26
    3038:	a2 9f       	mul	r26, r18
    303a:	80 0d       	add	r24, r0
    303c:	91 1d       	adc	r25, r1
    303e:	a3 9f       	mul	r26, r19
    3040:	90 0d       	add	r25, r0
    3042:	b2 9f       	mul	r27, r18
    3044:	90 0d       	add	r25, r0
    3046:	11 24       	eor	r1, r1
    3048:	08 95       	ret

0000304a <__udivmodhi4>:
    304a:	aa 1b       	sub	r26, r26
    304c:	bb 1b       	sub	r27, r27
    304e:	51 e1       	ldi	r21, 0x11	; 17
    3050:	07 c0       	rjmp	.+14     	; 0x3060 <__udivmodhi4_ep>

00003052 <__udivmodhi4_loop>:
    3052:	aa 1f       	adc	r26, r26
    3054:	bb 1f       	adc	r27, r27
    3056:	a6 17       	cp	r26, r22
    3058:	b7 07       	cpc	r27, r23
    305a:	10 f0       	brcs	.+4      	; 0x3060 <__udivmodhi4_ep>
    305c:	a6 1b       	sub	r26, r22
    305e:	b7 0b       	sbc	r27, r23

00003060 <__udivmodhi4_ep>:
    3060:	88 1f       	adc	r24, r24
    3062:	99 1f       	adc	r25, r25
    3064:	5a 95       	dec	r21
    3066:	a9 f7       	brne	.-22     	; 0x3052 <__udivmodhi4_loop>
    3068:	80 95       	com	r24
    306a:	90 95       	com	r25
    306c:	bc 01       	movw	r22, r24
    306e:	cd 01       	movw	r24, r26
    3070:	08 95       	ret

00003072 <__divmodhi4>:
    3072:	97 fb       	bst	r25, 7
    3074:	07 2e       	mov	r0, r23
    3076:	16 f4       	brtc	.+4      	; 0x307c <__divmodhi4+0xa>
    3078:	00 94       	com	r0
    307a:	06 d0       	rcall	.+12     	; 0x3088 <__divmodhi4_neg1>
    307c:	77 fd       	sbrc	r23, 7
    307e:	08 d0       	rcall	.+16     	; 0x3090 <__divmodhi4_neg2>
    3080:	e4 df       	rcall	.-56     	; 0x304a <__udivmodhi4>
    3082:	07 fc       	sbrc	r0, 7
    3084:	05 d0       	rcall	.+10     	; 0x3090 <__divmodhi4_neg2>
    3086:	3e f4       	brtc	.+14     	; 0x3096 <__divmodhi4_exit>

00003088 <__divmodhi4_neg1>:
    3088:	90 95       	com	r25
    308a:	81 95       	neg	r24
    308c:	9f 4f       	sbci	r25, 0xFF	; 255
    308e:	08 95       	ret

00003090 <__divmodhi4_neg2>:
    3090:	70 95       	com	r23
    3092:	61 95       	neg	r22
    3094:	7f 4f       	sbci	r23, 0xFF	; 255

00003096 <__divmodhi4_exit>:
    3096:	08 95       	ret

00003098 <__udivmodsi4>:
    3098:	a1 e2       	ldi	r26, 0x21	; 33
    309a:	1a 2e       	mov	r1, r26
    309c:	aa 1b       	sub	r26, r26
    309e:	bb 1b       	sub	r27, r27
    30a0:	fd 01       	movw	r30, r26
    30a2:	0d c0       	rjmp	.+26     	; 0x30be <__udivmodsi4_ep>

000030a4 <__udivmodsi4_loop>:
    30a4:	aa 1f       	adc	r26, r26
    30a6:	bb 1f       	adc	r27, r27
    30a8:	ee 1f       	adc	r30, r30
    30aa:	ff 1f       	adc	r31, r31
    30ac:	a2 17       	cp	r26, r18
    30ae:	b3 07       	cpc	r27, r19
    30b0:	e4 07       	cpc	r30, r20
    30b2:	f5 07       	cpc	r31, r21
    30b4:	20 f0       	brcs	.+8      	; 0x30be <__udivmodsi4_ep>
    30b6:	a2 1b       	sub	r26, r18
    30b8:	b3 0b       	sbc	r27, r19
    30ba:	e4 0b       	sbc	r30, r20
    30bc:	f5 0b       	sbc	r31, r21

000030be <__udivmodsi4_ep>:
    30be:	66 1f       	adc	r22, r22
    30c0:	77 1f       	adc	r23, r23
    30c2:	88 1f       	adc	r24, r24
    30c4:	99 1f       	adc	r25, r25
    30c6:	1a 94       	dec	r1
    30c8:	69 f7       	brne	.-38     	; 0x30a4 <__udivmodsi4_loop>
    30ca:	60 95       	com	r22
    30cc:	70 95       	com	r23
    30ce:	80 95       	com	r24
    30d0:	90 95       	com	r25
    30d2:	9b 01       	movw	r18, r22
    30d4:	ac 01       	movw	r20, r24
    30d6:	bd 01       	movw	r22, r26
    30d8:	cf 01       	movw	r24, r30
    30da:	08 95       	ret

000030dc <__divmodsi4>:
    30dc:	05 2e       	mov	r0, r21
    30de:	97 fb       	bst	r25, 7
    30e0:	16 f4       	brtc	.+4      	; 0x30e6 <__divmodsi4+0xa>
    30e2:	00 94       	com	r0
    30e4:	0f d0       	rcall	.+30     	; 0x3104 <__negsi2>
    30e6:	57 fd       	sbrc	r21, 7
    30e8:	05 d0       	rcall	.+10     	; 0x30f4 <__divmodsi4_neg2>
    30ea:	d6 df       	rcall	.-84     	; 0x3098 <__udivmodsi4>
    30ec:	07 fc       	sbrc	r0, 7
    30ee:	02 d0       	rcall	.+4      	; 0x30f4 <__divmodsi4_neg2>
    30f0:	46 f4       	brtc	.+16     	; 0x3102 <__divmodsi4_exit>
    30f2:	08 c0       	rjmp	.+16     	; 0x3104 <__negsi2>

000030f4 <__divmodsi4_neg2>:
    30f4:	50 95       	com	r21
    30f6:	40 95       	com	r20
    30f8:	30 95       	com	r19
    30fa:	21 95       	neg	r18
    30fc:	3f 4f       	sbci	r19, 0xFF	; 255
    30fe:	4f 4f       	sbci	r20, 0xFF	; 255
    3100:	5f 4f       	sbci	r21, 0xFF	; 255

00003102 <__divmodsi4_exit>:
    3102:	08 95       	ret

00003104 <__negsi2>:
    3104:	90 95       	com	r25
    3106:	80 95       	com	r24
    3108:	70 95       	com	r23
    310a:	61 95       	neg	r22
    310c:	7f 4f       	sbci	r23, 0xFF	; 255
    310e:	8f 4f       	sbci	r24, 0xFF	; 255
    3110:	9f 4f       	sbci	r25, 0xFF	; 255
    3112:	08 95       	ret

00003114 <__tablejump2__>:
    3114:	ee 0f       	add	r30, r30
    3116:	ff 1f       	adc	r31, r31
    3118:	00 24       	eor	r0, r0
    311a:	00 1c       	adc	r0, r0
    311c:	0b be       	out	0x3b, r0	; 59
    311e:	07 90       	elpm	r0, Z+
    3120:	f6 91       	elpm	r31, Z
    3122:	e0 2d       	mov	r30, r0
    3124:	09 94       	ijmp

00003126 <__umulhisi3>:
    3126:	a2 9f       	mul	r26, r18
    3128:	b0 01       	movw	r22, r0
    312a:	b3 9f       	mul	r27, r19
    312c:	c0 01       	movw	r24, r0
    312e:	a3 9f       	mul	r26, r19
    3130:	70 0d       	add	r23, r0
    3132:	81 1d       	adc	r24, r1
    3134:	11 24       	eor	r1, r1
    3136:	91 1d       	adc	r25, r1
    3138:	b2 9f       	mul	r27, r18
    313a:	70 0d       	add	r23, r0
    313c:	81 1d       	adc	r24, r1
    313e:	11 24       	eor	r1, r1
    3140:	91 1d       	adc	r25, r1
    3142:	08 95       	ret

00003144 <__muluhisi3>:
    3144:	f0 df       	rcall	.-32     	; 0x3126 <__umulhisi3>
    3146:	a5 9f       	mul	r26, r21
    3148:	90 0d       	add	r25, r0
    314a:	b4 9f       	mul	r27, r20
    314c:	90 0d       	add	r25, r0
    314e:	a4 9f       	mul	r26, r20
    3150:	80 0d       	add	r24, r0
    3152:	91 1d       	adc	r25, r1
    3154:	11 24       	eor	r1, r1
    3156:	08 95       	ret

00003158 <_exit>:
    3158:	f8 94       	cli

0000315a <__stop_program>:
    315a:	ff cf       	rjmp	.-2      	; 0x315a <__stop_program>
