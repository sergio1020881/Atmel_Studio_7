
Atmega128.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00001a4a  00001ade  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a4a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e5  00800106  00800106  00001ae4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001ae4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001b14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000678  00000000  00000000  00001b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005a5f  00000000  00000000  000021c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a3f  00000000  00000000  00007c27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003bf5  00000000  00000000  00009666  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000010ec  00000000  00000000  0000d25c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001433  00000000  00000000  0000e348  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000051ea  00000000  00000000  0000f77b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005f8  00000000  00000000  00014965  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	c5 c1       	rjmp	.+906    	; 0x390 <__vector_1>
       6:	00 00       	nop
       8:	cd c1       	rjmp	.+922    	; 0x3a4 <__vector_2>
       a:	00 00       	nop
       c:	d5 c1       	rjmp	.+938    	; 0x3b8 <__vector_3>
       e:	00 00       	nop
      10:	dd c1       	rjmp	.+954    	; 0x3cc <__vector_4>
      12:	00 00       	nop
      14:	e5 c1       	rjmp	.+970    	; 0x3e0 <__vector_5>
      16:	00 00       	nop
      18:	ed c1       	rjmp	.+986    	; 0x3f4 <__vector_6>
      1a:	00 00       	nop
      1c:	f5 c1       	rjmp	.+1002   	; 0x408 <__vector_7>
      1e:	00 00       	nop
      20:	fd c1       	rjmp	.+1018   	; 0x41c <__vector_8>
      22:	00 00       	nop
      24:	52 c0       	rjmp	.+164    	; 0xca <__bad_interrupt>
      26:	00 00       	nop
      28:	0d c2       	rjmp	.+1050   	; 0x444 <__vector_10>
      2a:	00 00       	nop
      2c:	15 c2       	rjmp	.+1066   	; 0x458 <__vector_11>
      2e:	00 00       	nop
      30:	1d c2       	rjmp	.+1082   	; 0x46c <__vector_12>
      32:	00 00       	nop
      34:	25 c2       	rjmp	.+1098   	; 0x480 <__vector_13>
      36:	00 00       	nop
      38:	2d c2       	rjmp	.+1114   	; 0x494 <__vector_14>
      3a:	00 00       	nop
      3c:	35 c2       	rjmp	.+1130   	; 0x4a8 <__vector_15>
      3e:	00 00       	nop
      40:	3d c2       	rjmp	.+1146   	; 0x4bc <__vector_16>
      42:	00 00       	nop
      44:	f5 c1       	rjmp	.+1002   	; 0x430 <__vector_17>
      46:	00 00       	nop
      48:	7f c2       	rjmp	.+1278   	; 0x548 <__vector_18>
      4a:	00 00       	nop
      4c:	b5 c2       	rjmp	.+1386   	; 0x5b8 <__vector_19>
      4e:	00 00       	nop
      50:	3c c0       	rjmp	.+120    	; 0xca <__bad_interrupt>
      52:	00 00       	nop
      54:	18 c1       	rjmp	.+560    	; 0x286 <__vector_21>
      56:	00 00       	nop
      58:	38 c0       	rjmp	.+112    	; 0xca <__bad_interrupt>
      5a:	00 00       	nop
      5c:	36 c0       	rjmp	.+108    	; 0xca <__bad_interrupt>
      5e:	00 00       	nop
      60:	37 c2       	rjmp	.+1134   	; 0x4d0 <__vector_24>
      62:	00 00       	nop
      64:	3f c2       	rjmp	.+1150   	; 0x4e4 <__vector_25>
      66:	00 00       	nop
      68:	47 c2       	rjmp	.+1166   	; 0x4f8 <__vector_26>
      6a:	00 00       	nop
      6c:	4f c2       	rjmp	.+1182   	; 0x50c <__vector_27>
      6e:	00 00       	nop
      70:	57 c2       	rjmp	.+1198   	; 0x520 <__vector_28>
      72:	00 00       	nop
      74:	5f c2       	rjmp	.+1214   	; 0x534 <__vector_29>
      76:	00 00       	nop
      78:	c8 c2       	rjmp	.+1424   	; 0x60a <__vector_30>
      7a:	00 00       	nop
      7c:	01 c3       	rjmp	.+1538   	; 0x680 <__vector_31>
      7e:	00 00       	nop
      80:	24 c0       	rjmp	.+72     	; 0xca <__bad_interrupt>
      82:	00 00       	nop
      84:	22 c0       	rjmp	.+68     	; 0xca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c0       	rjmp	.+64     	; 0xca <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ea e4       	ldi	r30, 0x4A	; 74
      a0:	fa e1       	ldi	r31, 0x1A	; 26
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 30       	cpi	r26, 0x06	; 6
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	a6 e0       	ldi	r26, 0x06	; 6
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ab 3e       	cpi	r26, 0xEB	; 235
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 a8 0b 	call	0x1750	; 0x1750 <main>
      c6:	0c 94 23 0d 	jmp	0x1a46	; 0x1a46 <_exit>

000000ca <__bad_interrupt>:
      ca:	9a cf       	rjmp	.-204    	; 0x0 <__vectors>

000000cc <HC595_shift_bit>:
	//
	return hc595;
}
void HC595_shift_bit(uint8_t bool)
{
	if (bool)
      cc:	88 23       	and	r24, r24
      ce:	89 f0       	breq	.+34     	; 0xf2 <HC595_shift_bit+0x26>
		*hc595_PORT |= (1<<HC595_datapin); //Data bit HIGH
      d0:	e0 91 bb 01 	lds	r30, 0x01BB	; 0x8001bb <hc595_PORT>
      d4:	f0 91 bc 01 	lds	r31, 0x01BC	; 0x8001bc <hc595_PORT+0x1>
      d8:	20 81       	ld	r18, Z
      da:	81 e0       	ldi	r24, 0x01	; 1
      dc:	90 e0       	ldi	r25, 0x00	; 0
      de:	00 90 bd 01 	lds	r0, 0x01BD	; 0x8001bd <HC595_datapin>
      e2:	02 c0       	rjmp	.+4      	; 0xe8 <HC595_shift_bit+0x1c>
      e4:	88 0f       	add	r24, r24
      e6:	99 1f       	adc	r25, r25
      e8:	0a 94       	dec	r0
      ea:	e2 f7       	brpl	.-8      	; 0xe4 <HC595_shift_bit+0x18>
      ec:	82 2b       	or	r24, r18
      ee:	80 83       	st	Z, r24
      f0:	11 c0       	rjmp	.+34     	; 0x114 <HC595_shift_bit+0x48>
	else
		*hc595_PORT &= ~(1<<HC595_datapin); //Data bit LOW
      f2:	e0 91 bb 01 	lds	r30, 0x01BB	; 0x8001bb <hc595_PORT>
      f6:	f0 91 bc 01 	lds	r31, 0x01BC	; 0x8001bc <hc595_PORT+0x1>
      fa:	20 81       	ld	r18, Z
      fc:	81 e0       	ldi	r24, 0x01	; 1
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	00 90 bd 01 	lds	r0, 0x01BD	; 0x8001bd <HC595_datapin>
     104:	02 c0       	rjmp	.+4      	; 0x10a <HC595_shift_bit+0x3e>
     106:	88 0f       	add	r24, r24
     108:	99 1f       	adc	r25, r25
     10a:	0a 94       	dec	r0
     10c:	e2 f7       	brpl	.-8      	; 0x106 <HC595_shift_bit+0x3a>
     10e:	80 95       	com	r24
     110:	82 23       	and	r24, r18
     112:	80 83       	st	Z, r24
	*hc595_PORT |= (1<<HC595_clkpin); // Shift bit
     114:	e0 91 bb 01 	lds	r30, 0x01BB	; 0x8001bb <hc595_PORT>
     118:	f0 91 bc 01 	lds	r31, 0x01BC	; 0x8001bc <hc595_PORT+0x1>
     11c:	40 81       	ld	r20, Z
     11e:	81 e0       	ldi	r24, 0x01	; 1
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	9c 01       	movw	r18, r24
     124:	00 90 bf 01 	lds	r0, 0x01BF	; 0x8001bf <HC595_clkpin>
     128:	02 c0       	rjmp	.+4      	; 0x12e <HC595_shift_bit+0x62>
     12a:	22 0f       	add	r18, r18
     12c:	33 1f       	adc	r19, r19
     12e:	0a 94       	dec	r0
     130:	e2 f7       	brpl	.-8      	; 0x12a <HC595_shift_bit+0x5e>
     132:	24 2b       	or	r18, r20
     134:	20 83       	st	Z, r18
	*hc595_PORT &= ~(1<<HC595_clkpin); //Shift disable
     136:	e0 91 bb 01 	lds	r30, 0x01BB	; 0x8001bb <hc595_PORT>
     13a:	f0 91 bc 01 	lds	r31, 0x01BC	; 0x8001bc <hc595_PORT+0x1>
     13e:	20 81       	ld	r18, Z
     140:	00 90 bf 01 	lds	r0, 0x01BF	; 0x8001bf <HC595_clkpin>
     144:	02 c0       	rjmp	.+4      	; 0x14a <HC595_shift_bit+0x7e>
     146:	88 0f       	add	r24, r24
     148:	99 1f       	adc	r25, r25
     14a:	0a 94       	dec	r0
     14c:	e2 f7       	brpl	.-8      	; 0x146 <HC595_shift_bit+0x7a>
     14e:	80 95       	com	r24
     150:	82 23       	and	r24, r18
     152:	80 83       	st	Z, r24
     154:	08 95       	ret

00000156 <HC595_shift_out>:
		HC595_shift_bit(byte & (1<<i));
	HC595_shift_out();
}
void HC595_shift_out(void)
{
	*hc595_PORT |= (1<<HC595_outpin); //Output enable
     156:	e0 91 bb 01 	lds	r30, 0x01BB	; 0x8001bb <hc595_PORT>
     15a:	f0 91 bc 01 	lds	r31, 0x01BC	; 0x8001bc <hc595_PORT+0x1>
     15e:	40 81       	ld	r20, Z
     160:	81 e0       	ldi	r24, 0x01	; 1
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	9c 01       	movw	r18, r24
     166:	00 90 be 01 	lds	r0, 0x01BE	; 0x8001be <HC595_outpin>
     16a:	02 c0       	rjmp	.+4      	; 0x170 <HC595_shift_out+0x1a>
     16c:	22 0f       	add	r18, r18
     16e:	33 1f       	adc	r19, r19
     170:	0a 94       	dec	r0
     172:	e2 f7       	brpl	.-8      	; 0x16c <HC595_shift_out+0x16>
     174:	24 2b       	or	r18, r20
     176:	20 83       	st	Z, r18
	*hc595_PORT &= ~(1<<HC595_outpin); //Output disable
     178:	e0 91 bb 01 	lds	r30, 0x01BB	; 0x8001bb <hc595_PORT>
     17c:	f0 91 bc 01 	lds	r31, 0x01BC	; 0x8001bc <hc595_PORT+0x1>
     180:	20 81       	ld	r18, Z
     182:	00 90 be 01 	lds	r0, 0x01BE	; 0x8001be <HC595_outpin>
     186:	02 c0       	rjmp	.+4      	; 0x18c <HC595_shift_out+0x36>
     188:	88 0f       	add	r24, r24
     18a:	99 1f       	adc	r25, r25
     18c:	0a 94       	dec	r0
     18e:	e2 f7       	brpl	.-8      	; 0x188 <HC595_shift_out+0x32>
     190:	80 95       	com	r24
     192:	82 23       	and	r24, r18
     194:	80 83       	st	Z, r24
     196:	08 95       	ret

00000198 <HC595_shift_byte>:
		*hc595_PORT &= ~(1<<HC595_datapin); //Data bit LOW
	*hc595_PORT |= (1<<HC595_clkpin); // Shift bit
	*hc595_PORT &= ~(1<<HC595_clkpin); //Shift disable
}
void HC595_shift_byte(uint8_t byte)
{
     198:	ff 92       	push	r15
     19a:	0f 93       	push	r16
     19c:	1f 93       	push	r17
     19e:	cf 93       	push	r28
     1a0:	df 93       	push	r29
     1a2:	f8 2e       	mov	r15, r24
     1a4:	c0 e0       	ldi	r28, 0x00	; 0
     1a6:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i;
	for(i=0;i<8;i++)
		HC595_shift_bit(byte & (1<<i));
     1a8:	01 e0       	ldi	r16, 0x01	; 1
     1aa:	10 e0       	ldi	r17, 0x00	; 0
     1ac:	c8 01       	movw	r24, r16
     1ae:	0c 2e       	mov	r0, r28
     1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <HC595_shift_byte+0x1e>
     1b2:	88 0f       	add	r24, r24
     1b4:	99 1f       	adc	r25, r25
     1b6:	0a 94       	dec	r0
     1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <HC595_shift_byte+0x1a>
     1ba:	8f 21       	and	r24, r15
     1bc:	87 df       	rcall	.-242    	; 0xcc <HC595_shift_bit>
     1be:	21 96       	adiw	r28, 0x01	; 1
	*hc595_PORT &= ~(1<<HC595_clkpin); //Shift disable
}
void HC595_shift_byte(uint8_t byte)
{
	uint8_t i;
	for(i=0;i<8;i++)
     1c0:	c8 30       	cpi	r28, 0x08	; 8
     1c2:	d1 05       	cpc	r29, r1
		HC595_shift_bit(byte & (1<<i));
	HC595_shift_out();
     1c4:	99 f7       	brne	.-26     	; 0x1ac <HC595_shift_byte+0x14>
     1c6:	c7 df       	rcall	.-114    	; 0x156 <HC595_shift_out>
}
     1c8:	df 91       	pop	r29
     1ca:	cf 91       	pop	r28
     1cc:	1f 91       	pop	r17
     1ce:	0f 91       	pop	r16
     1d0:	ff 90       	pop	r15
     1d2:	08 95       	ret

000001d4 <HC595enable>:
void HC595_shift_out(void);
/*
** procedure and function
*/
HC595 HC595enable(volatile uint8_t *ddr, volatile uint8_t *port, uint8_t datapin, uint8_t clkpin, uint8_t outpin)
{
     1d4:	0f 93       	push	r16
     1d6:	cf 93       	push	r28
     1d8:	df 93       	push	r29
     1da:	00 d0       	rcall	.+0      	; 0x1dc <HC595enable+0x8>
     1dc:	00 d0       	rcall	.+0      	; 0x1de <HC595enable+0xa>
     1de:	00 d0       	rcall	.+0      	; 0x1e0 <HC595enable+0xc>
     1e0:	cd b7       	in	r28, 0x3d	; 61
     1e2:	de b7       	in	r29, 0x3e	; 62
	//LOCAL VARIABLES
	uint8_t tSREG;
	tSREG=SREG;
     1e4:	5f b7       	in	r21, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
     1e6:	3f b7       	in	r19, 0x3f	; 63
     1e8:	3f 77       	andi	r19, 0x7F	; 127
     1ea:	3f bf       	out	0x3f, r19	; 63
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	HC595 hc595;
	//import parametros
	hc595_DDR=ddr;
     1ec:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <hc595_DDR+0x1>
     1f0:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <hc595_DDR>
	hc595_PORT=port;
     1f4:	70 93 bc 01 	sts	0x01BC, r23	; 0x8001bc <hc595_PORT+0x1>
     1f8:	60 93 bb 01 	sts	0x01BB, r22	; 0x8001bb <hc595_PORT>
	HC595_datapin=datapin; 
     1fc:	40 93 bd 01 	sts	0x01BD, r20	; 0x8001bd <HC595_datapin>
	HC595_clkpin=clkpin; 
     200:	20 93 bf 01 	sts	0x01BF, r18	; 0x8001bf <HC595_clkpin>
	HC595_outpin=outpin;
     204:	00 93 be 01 	sts	0x01BE, r16	; 0x8001be <HC595_outpin>
	//inic variables
    *hc595_DDR |= (1<<datapin) | (1<<clkpin) | (1<<outpin);
     208:	fc 01       	movw	r30, r24
     20a:	30 81       	ld	r19, Z
     20c:	61 e0       	ldi	r22, 0x01	; 1
     20e:	70 e0       	ldi	r23, 0x00	; 0
     210:	db 01       	movw	r26, r22
     212:	02 c0       	rjmp	.+4      	; 0x218 <HC595enable+0x44>
     214:	aa 0f       	add	r26, r26
     216:	bb 1f       	adc	r27, r27
     218:	2a 95       	dec	r18
     21a:	e2 f7       	brpl	.-8      	; 0x214 <HC595enable+0x40>
     21c:	fb 01       	movw	r30, r22
     21e:	02 c0       	rjmp	.+4      	; 0x224 <HC595enable+0x50>
     220:	ee 0f       	add	r30, r30
     222:	ff 1f       	adc	r31, r31
     224:	0a 95       	dec	r16
     226:	e2 f7       	brpl	.-8      	; 0x220 <HC595enable+0x4c>
     228:	ea 2b       	or	r30, r26
     22a:	02 c0       	rjmp	.+4      	; 0x230 <HC595enable+0x5c>
     22c:	66 0f       	add	r22, r22
     22e:	77 1f       	adc	r23, r23
     230:	4a 95       	dec	r20
     232:	e2 f7       	brpl	.-8      	; 0x22c <HC595enable+0x58>
     234:	6e 2b       	or	r22, r30
     236:	23 2f       	mov	r18, r19
     238:	26 2b       	or	r18, r22
     23a:	fc 01       	movw	r30, r24
     23c:	20 83       	st	Z, r18
	*hc595_PORT &= ~((1<<datapin) | (1<<clkpin) | (1<<outpin));
     23e:	e0 91 bb 01 	lds	r30, 0x01BB	; 0x8001bb <hc595_PORT>
     242:	f0 91 bc 01 	lds	r31, 0x01BC	; 0x8001bc <hc595_PORT+0x1>
     246:	80 81       	ld	r24, Z
     248:	60 95       	com	r22
     24a:	68 23       	and	r22, r24
     24c:	60 83       	st	Z, r22
	//Direccionar apontadores para PROTOTIPOS
	hc595.bit=HC595_shift_bit;
	hc595.byte=HC595_shift_byte;
	hc595.out=HC595_shift_out;
	SREG=tSREG;
     24e:	5f bf       	out	0x3f, r21	; 63
	//
	return hc595;
     250:	26 e6       	ldi	r18, 0x66	; 102
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	3a 83       	std	Y+2, r19	; 0x02
     256:	29 83       	std	Y+1, r18	; 0x01
     258:	4c ec       	ldi	r20, 0xCC	; 204
     25a:	50 e0       	ldi	r21, 0x00	; 0
     25c:	5c 83       	std	Y+4, r21	; 0x04
     25e:	4b 83       	std	Y+3, r20	; 0x03
     260:	6b ea       	ldi	r22, 0xAB	; 171
     262:	70 e0       	ldi	r23, 0x00	; 0
     264:	7e 83       	std	Y+6, r23	; 0x06
     266:	6d 83       	std	Y+5, r22	; 0x05
     268:	3a 81       	ldd	r19, Y+2	; 0x02
     26a:	5c 81       	ldd	r21, Y+4	; 0x04
     26c:	7e 81       	ldd	r23, Y+6	; 0x06
}
     26e:	80 e0       	ldi	r24, 0x00	; 0
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	26 96       	adiw	r28, 0x06	; 6
     274:	0f b6       	in	r0, 0x3f	; 63
     276:	f8 94       	cli
     278:	de bf       	out	0x3e, r29	; 62
     27a:	0f be       	out	0x3f, r0	; 63
     27c:	cd bf       	out	0x3d, r28	; 61
     27e:	df 91       	pop	r29
     280:	cf 91       	pop	r28
     282:	0f 91       	pop	r16
     284:	08 95       	ret

00000286 <__vector_21>:
ISR(ANALOG_INTERRUPT)
/*************************************************************************
Function: ANALOG interrupt
Purpose:  Read Analog Input
**************************************************************************/
{
     286:	1f 92       	push	r1
     288:	0f 92       	push	r0
     28a:	0f b6       	in	r0, 0x3f	; 63
     28c:	0f 92       	push	r0
     28e:	11 24       	eor	r1, r1
     290:	0b b6       	in	r0, 0x3b	; 59
     292:	0f 92       	push	r0
     294:	2f 93       	push	r18
     296:	3f 93       	push	r19
     298:	8f 93       	push	r24
     29a:	9f 93       	push	r25
     29c:	ef 93       	push	r30
     29e:	ff 93       	push	r31
	/******/
	adc_tmp=ADCL;
     2a0:	84 b1       	in	r24, 0x04	; 4
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <adc_tmp+0x1>
     2a8:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <adc_tmp>
	adc_tmp|=(ADCH<<8);
     2ac:	25 b1       	in	r18, 0x05	; 5
     2ae:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <adc_tmp>
     2b2:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <adc_tmp+0x1>
     2b6:	92 2b       	or	r25, r18
     2b8:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <adc_tmp+0x1>
     2bc:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <adc_tmp>
	if(adc_n_sample < (1<<ADC_NUMBER_SAMPLE)){
     2c0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
     2c4:	84 30       	cpi	r24, 0x04	; 4
     2c6:	a0 f4       	brcc	.+40     	; 0x2f0 <__vector_21+0x6a>
		adc_n_sample++;
     2c8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
     2cc:	8f 5f       	subi	r24, 0xFF	; 255
     2ce:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
		adc_sample+=adc_tmp;
     2d2:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <adc_tmp>
     2d6:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <adc_tmp+0x1>
     2da:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <adc_sample>
     2de:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <adc_sample+0x1>
     2e2:	82 0f       	add	r24, r18
     2e4:	93 1f       	adc	r25, r19
     2e6:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <adc_sample+0x1>
     2ea:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <adc_sample>
     2ee:	43 c0       	rjmp	.+134    	; 0x376 <__vector_21+0xf0>
	}else{
		ADC_VALUE[ADC_SELECTOR]=adc_sample>>ADC_NUMBER_SAMPLE;
     2f0:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <ADC_SELECTOR>
     2f4:	f0 91 0c 01 	lds	r31, 0x010C	; 0x80010c <ADC_SELECTOR+0x1>
     2f8:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <adc_sample>
     2fc:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <adc_sample+0x1>
     300:	95 95       	asr	r25
     302:	87 95       	ror	r24
     304:	95 95       	asr	r25
     306:	87 95       	ror	r24
     308:	ee 0f       	add	r30, r30
     30a:	ff 1f       	adc	r31, r31
     30c:	e1 5e       	subi	r30, 0xE1	; 225
     30e:	fe 4f       	sbci	r31, 0xFE	; 254
     310:	91 83       	std	Z+1, r25	; 0x01
     312:	80 83       	st	Z, r24
		adc_n_sample=adc_sample=0;
     314:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <adc_sample+0x1>
     318:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <adc_sample>
     31c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
		/******/
		if(ADC_SELECTOR < ADC_N_CHANNEL)
     320:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <ADC_SELECTOR>
     324:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <ADC_SELECTOR+0x1>
     328:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <ADC_N_CHANNEL>
     32c:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <ADC_N_CHANNEL+0x1>
     330:	28 17       	cp	r18, r24
     332:	39 07       	cpc	r19, r25
     334:	54 f4       	brge	.+20     	; 0x34a <__vector_21+0xc4>
			ADC_SELECTOR++;
     336:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <ADC_SELECTOR>
     33a:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <ADC_SELECTOR+0x1>
     33e:	01 96       	adiw	r24, 0x01	; 1
     340:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <ADC_SELECTOR+0x1>
     344:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <ADC_SELECTOR>
     348:	04 c0       	rjmp	.+8      	; 0x352 <__vector_21+0xcc>
		else
			ADC_SELECTOR=0;
     34a:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <ADC_SELECTOR+0x1>
     34e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <ADC_SELECTOR>
		ADC_SELECT &= ~MUX_MASK;
     352:	87 b1       	in	r24, 0x07	; 7
     354:	80 7e       	andi	r24, 0xE0	; 224
     356:	87 b9       	out	0x07, r24	; 7
		ADC_SELECT |= (ADC_CHANNEL_GAIN[ADC_SELECTOR] & MUX_MASK);
     358:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <ADC_SELECTOR>
     35c:	f0 91 0c 01 	lds	r31, 0x010C	; 0x80010c <ADC_SELECTOR+0x1>
     360:	ee 0f       	add	r30, r30
     362:	ff 1f       	adc	r31, r31
     364:	e1 5f       	subi	r30, 0xF1	; 241
     366:	fe 4f       	sbci	r31, 0xFE	; 254
     368:	80 81       	ld	r24, Z
     36a:	91 81       	ldd	r25, Z+1	; 0x01
     36c:	27 b1       	in	r18, 0x07	; 7
     36e:	8f 71       	andi	r24, 0x1F	; 31
     370:	99 27       	eor	r25, r25
     372:	82 2b       	or	r24, r18
     374:	87 b9       	out	0x07, r24	; 7
	}		
}
     376:	ff 91       	pop	r31
     378:	ef 91       	pop	r30
     37a:	9f 91       	pop	r25
     37c:	8f 91       	pop	r24
     37e:	3f 91       	pop	r19
     380:	2f 91       	pop	r18
     382:	0f 90       	pop	r0
     384:	0b be       	out	0x3b, r0	; 59
     386:	0f 90       	pop	r0
     388:	0f be       	out	0x3f, r0	; 63
     38a:	0f 90       	pop	r0
     38c:	1f 90       	pop	r1
     38e:	18 95       	reti

00000390 <__vector_1>:

/*
** interrupt
*/
// cross out the ones being used and redefine in main
ISR(INT0_vect){ }
     390:	1f 92       	push	r1
     392:	0f 92       	push	r0
     394:	0f b6       	in	r0, 0x3f	; 63
     396:	0f 92       	push	r0
     398:	11 24       	eor	r1, r1
     39a:	0f 90       	pop	r0
     39c:	0f be       	out	0x3f, r0	; 63
     39e:	0f 90       	pop	r0
     3a0:	1f 90       	pop	r1
     3a2:	18 95       	reti

000003a4 <__vector_2>:
ISR(INT1_vect){ }
     3a4:	1f 92       	push	r1
     3a6:	0f 92       	push	r0
     3a8:	0f b6       	in	r0, 0x3f	; 63
     3aa:	0f 92       	push	r0
     3ac:	11 24       	eor	r1, r1
     3ae:	0f 90       	pop	r0
     3b0:	0f be       	out	0x3f, r0	; 63
     3b2:	0f 90       	pop	r0
     3b4:	1f 90       	pop	r1
     3b6:	18 95       	reti

000003b8 <__vector_3>:
ISR(INT2_vect){ }
     3b8:	1f 92       	push	r1
     3ba:	0f 92       	push	r0
     3bc:	0f b6       	in	r0, 0x3f	; 63
     3be:	0f 92       	push	r0
     3c0:	11 24       	eor	r1, r1
     3c2:	0f 90       	pop	r0
     3c4:	0f be       	out	0x3f, r0	; 63
     3c6:	0f 90       	pop	r0
     3c8:	1f 90       	pop	r1
     3ca:	18 95       	reti

000003cc <__vector_4>:
ISR(INT3_vect){ }
     3cc:	1f 92       	push	r1
     3ce:	0f 92       	push	r0
     3d0:	0f b6       	in	r0, 0x3f	; 63
     3d2:	0f 92       	push	r0
     3d4:	11 24       	eor	r1, r1
     3d6:	0f 90       	pop	r0
     3d8:	0f be       	out	0x3f, r0	; 63
     3da:	0f 90       	pop	r0
     3dc:	1f 90       	pop	r1
     3de:	18 95       	reti

000003e0 <__vector_5>:
ISR(INT4_vect){ }
     3e0:	1f 92       	push	r1
     3e2:	0f 92       	push	r0
     3e4:	0f b6       	in	r0, 0x3f	; 63
     3e6:	0f 92       	push	r0
     3e8:	11 24       	eor	r1, r1
     3ea:	0f 90       	pop	r0
     3ec:	0f be       	out	0x3f, r0	; 63
     3ee:	0f 90       	pop	r0
     3f0:	1f 90       	pop	r1
     3f2:	18 95       	reti

000003f4 <__vector_6>:
ISR(INT5_vect){ }
     3f4:	1f 92       	push	r1
     3f6:	0f 92       	push	r0
     3f8:	0f b6       	in	r0, 0x3f	; 63
     3fa:	0f 92       	push	r0
     3fc:	11 24       	eor	r1, r1
     3fe:	0f 90       	pop	r0
     400:	0f be       	out	0x3f, r0	; 63
     402:	0f 90       	pop	r0
     404:	1f 90       	pop	r1
     406:	18 95       	reti

00000408 <__vector_7>:
ISR(INT6_vect){ }
     408:	1f 92       	push	r1
     40a:	0f 92       	push	r0
     40c:	0f b6       	in	r0, 0x3f	; 63
     40e:	0f 92       	push	r0
     410:	11 24       	eor	r1, r1
     412:	0f 90       	pop	r0
     414:	0f be       	out	0x3f, r0	; 63
     416:	0f 90       	pop	r0
     418:	1f 90       	pop	r1
     41a:	18 95       	reti

0000041c <__vector_8>:
ISR(INT7_vect){ }
     41c:	1f 92       	push	r1
     41e:	0f 92       	push	r0
     420:	0f b6       	in	r0, 0x3f	; 63
     422:	0f 92       	push	r0
     424:	11 24       	eor	r1, r1
     426:	0f 90       	pop	r0
     428:	0f be       	out	0x3f, r0	; 63
     42a:	0f 90       	pop	r0
     42c:	1f 90       	pop	r1
     42e:	18 95       	reti

00000430 <__vector_17>:
    return SPI_DATA_REGISTER;
}
/*
** interrupt
*/
ISR(SPI_STC_vect){ }
     430:	1f 92       	push	r1
     432:	0f 92       	push	r0
     434:	0f b6       	in	r0, 0x3f	; 63
     436:	0f 92       	push	r0
     438:	11 24       	eor	r1, r1
     43a:	0f 90       	pop	r0
     43c:	0f be       	out	0x3f, r0	; 63
     43e:	0f 90       	pop	r0
     440:	1f 90       	pop	r1
     442:	18 95       	reti

00000444 <__vector_10>:

/*
** interrupt
*/
// So that main will not freeze when not defined, but rather exclude.
ISR(TIMER2_OVF_vect){ }
     444:	1f 92       	push	r1
     446:	0f 92       	push	r0
     448:	0f b6       	in	r0, 0x3f	; 63
     44a:	0f 92       	push	r0
     44c:	11 24       	eor	r1, r1
     44e:	0f 90       	pop	r0
     450:	0f be       	out	0x3f, r0	; 63
     452:	0f 90       	pop	r0
     454:	1f 90       	pop	r1
     456:	18 95       	reti

00000458 <__vector_11>:
ISR(TIMER1_CAPT_vect){ }
     458:	1f 92       	push	r1
     45a:	0f 92       	push	r0
     45c:	0f b6       	in	r0, 0x3f	; 63
     45e:	0f 92       	push	r0
     460:	11 24       	eor	r1, r1
     462:	0f 90       	pop	r0
     464:	0f be       	out	0x3f, r0	; 63
     466:	0f 90       	pop	r0
     468:	1f 90       	pop	r1
     46a:	18 95       	reti

0000046c <__vector_12>:
ISR(TIMER1_COMPA_vect){ }
     46c:	1f 92       	push	r1
     46e:	0f 92       	push	r0
     470:	0f b6       	in	r0, 0x3f	; 63
     472:	0f 92       	push	r0
     474:	11 24       	eor	r1, r1
     476:	0f 90       	pop	r0
     478:	0f be       	out	0x3f, r0	; 63
     47a:	0f 90       	pop	r0
     47c:	1f 90       	pop	r1
     47e:	18 95       	reti

00000480 <__vector_13>:
ISR(TIMER1_COMPB_vect){ }
     480:	1f 92       	push	r1
     482:	0f 92       	push	r0
     484:	0f b6       	in	r0, 0x3f	; 63
     486:	0f 92       	push	r0
     488:	11 24       	eor	r1, r1
     48a:	0f 90       	pop	r0
     48c:	0f be       	out	0x3f, r0	; 63
     48e:	0f 90       	pop	r0
     490:	1f 90       	pop	r1
     492:	18 95       	reti

00000494 <__vector_14>:
ISR(TIMER1_OVF_vect){ }
     494:	1f 92       	push	r1
     496:	0f 92       	push	r0
     498:	0f b6       	in	r0, 0x3f	; 63
     49a:	0f 92       	push	r0
     49c:	11 24       	eor	r1, r1
     49e:	0f 90       	pop	r0
     4a0:	0f be       	out	0x3f, r0	; 63
     4a2:	0f 90       	pop	r0
     4a4:	1f 90       	pop	r1
     4a6:	18 95       	reti

000004a8 <__vector_15>:
ISR(TIMER0_COMP_vect){ }
     4a8:	1f 92       	push	r1
     4aa:	0f 92       	push	r0
     4ac:	0f b6       	in	r0, 0x3f	; 63
     4ae:	0f 92       	push	r0
     4b0:	11 24       	eor	r1, r1
     4b2:	0f 90       	pop	r0
     4b4:	0f be       	out	0x3f, r0	; 63
     4b6:	0f 90       	pop	r0
     4b8:	1f 90       	pop	r1
     4ba:	18 95       	reti

000004bc <__vector_16>:
ISR(TIMER0_OVF_vect){ }
     4bc:	1f 92       	push	r1
     4be:	0f 92       	push	r0
     4c0:	0f b6       	in	r0, 0x3f	; 63
     4c2:	0f 92       	push	r0
     4c4:	11 24       	eor	r1, r1
     4c6:	0f 90       	pop	r0
     4c8:	0f be       	out	0x3f, r0	; 63
     4ca:	0f 90       	pop	r0
     4cc:	1f 90       	pop	r1
     4ce:	18 95       	reti

000004d0 <__vector_24>:
ISR(TIMER1_COMPC_vect){ }
     4d0:	1f 92       	push	r1
     4d2:	0f 92       	push	r0
     4d4:	0f b6       	in	r0, 0x3f	; 63
     4d6:	0f 92       	push	r0
     4d8:	11 24       	eor	r1, r1
     4da:	0f 90       	pop	r0
     4dc:	0f be       	out	0x3f, r0	; 63
     4de:	0f 90       	pop	r0
     4e0:	1f 90       	pop	r1
     4e2:	18 95       	reti

000004e4 <__vector_25>:
ISR(TIMER3_CAPT_vect){ }
     4e4:	1f 92       	push	r1
     4e6:	0f 92       	push	r0
     4e8:	0f b6       	in	r0, 0x3f	; 63
     4ea:	0f 92       	push	r0
     4ec:	11 24       	eor	r1, r1
     4ee:	0f 90       	pop	r0
     4f0:	0f be       	out	0x3f, r0	; 63
     4f2:	0f 90       	pop	r0
     4f4:	1f 90       	pop	r1
     4f6:	18 95       	reti

000004f8 <__vector_26>:
ISR(TIMER3_COMPA_vect){ }
     4f8:	1f 92       	push	r1
     4fa:	0f 92       	push	r0
     4fc:	0f b6       	in	r0, 0x3f	; 63
     4fe:	0f 92       	push	r0
     500:	11 24       	eor	r1, r1
     502:	0f 90       	pop	r0
     504:	0f be       	out	0x3f, r0	; 63
     506:	0f 90       	pop	r0
     508:	1f 90       	pop	r1
     50a:	18 95       	reti

0000050c <__vector_27>:
ISR(TIMER3_COMPB_vect){ }
     50c:	1f 92       	push	r1
     50e:	0f 92       	push	r0
     510:	0f b6       	in	r0, 0x3f	; 63
     512:	0f 92       	push	r0
     514:	11 24       	eor	r1, r1
     516:	0f 90       	pop	r0
     518:	0f be       	out	0x3f, r0	; 63
     51a:	0f 90       	pop	r0
     51c:	1f 90       	pop	r1
     51e:	18 95       	reti

00000520 <__vector_28>:
ISR(TIMER3_COMPC_vect){ }
     520:	1f 92       	push	r1
     522:	0f 92       	push	r0
     524:	0f b6       	in	r0, 0x3f	; 63
     526:	0f 92       	push	r0
     528:	11 24       	eor	r1, r1
     52a:	0f 90       	pop	r0
     52c:	0f be       	out	0x3f, r0	; 63
     52e:	0f 90       	pop	r0
     530:	1f 90       	pop	r1
     532:	18 95       	reti

00000534 <__vector_29>:
ISR(TIMER3_OVF_vect){ }
     534:	1f 92       	push	r1
     536:	0f 92       	push	r0
     538:	0f b6       	in	r0, 0x3f	; 63
     53a:	0f 92       	push	r0
     53c:	11 24       	eor	r1, r1
     53e:	0f 90       	pop	r0
     540:	0f be       	out	0x3f, r0	; 63
     542:	0f 90       	pop	r0
     544:	1f 90       	pop	r1
     546:	18 95       	reti

00000548 <__vector_18>:
void uart1_puts_p(const char *progmem_s )
{
    register char c;
    while ( (c = pgm_read_byte(progmem_s++)) ) 
      uart1_putc(c);
}/* uart1_puts_p */
     548:	1f 92       	push	r1
     54a:	0f 92       	push	r0
     54c:	0f b6       	in	r0, 0x3f	; 63
     54e:	0f 92       	push	r0
     550:	11 24       	eor	r1, r1
     552:	0b b6       	in	r0, 0x3b	; 59
     554:	0f 92       	push	r0
     556:	8f 93       	push	r24
     558:	9f 93       	push	r25
     55a:	ef 93       	push	r30
     55c:	ff 93       	push	r31
     55e:	8b b1       	in	r24, 0x0b	; 11
     560:	9a b1       	in	r25, 0x0a	; 10
     562:	88 71       	andi	r24, 0x18	; 24
     564:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <UART_LastRxError>
     568:	e0 91 76 01 	lds	r30, 0x0176	; 0x800176 <UART_RxHead>
     56c:	ef 5f       	subi	r30, 0xFF	; 255
     56e:	ef 71       	andi	r30, 0x1F	; 31
     570:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <UART_RxTail>
     574:	e8 13       	cpse	r30, r24
     576:	04 c0       	rjmp	.+8      	; 0x580 <__vector_18+0x38>
     578:	82 e0       	ldi	r24, 0x02	; 2
     57a:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <UART_LastRxError>
     57e:	11 c0       	rjmp	.+34     	; 0x5a2 <__vector_18+0x5a>
     580:	9c b1       	in	r25, 0x0c	; 12
     582:	e0 93 76 01 	sts	0x0176, r30	; 0x800176 <UART_RxHead>
     586:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <UART_LastRxError>
     58a:	88 23       	and	r24, r24
     58c:	31 f0       	breq	.+12     	; 0x59a <__vector_18+0x52>
     58e:	f0 e0       	ldi	r31, 0x00	; 0
     590:	e7 58       	subi	r30, 0x87	; 135
     592:	fe 4f       	sbci	r31, 0xFE	; 254
     594:	88 e5       	ldi	r24, 0x58	; 88
     596:	80 83       	st	Z, r24
     598:	04 c0       	rjmp	.+8      	; 0x5a2 <__vector_18+0x5a>
     59a:	f0 e0       	ldi	r31, 0x00	; 0
     59c:	e7 58       	subi	r30, 0x87	; 135
     59e:	fe 4f       	sbci	r31, 0xFE	; 254
     5a0:	90 83       	st	Z, r25
     5a2:	ff 91       	pop	r31
     5a4:	ef 91       	pop	r30
     5a6:	9f 91       	pop	r25
     5a8:	8f 91       	pop	r24
     5aa:	0f 90       	pop	r0
     5ac:	0b be       	out	0x3b, r0	; 59
     5ae:	0f 90       	pop	r0
     5b0:	0f be       	out	0x3f, r0	; 63
     5b2:	0f 90       	pop	r0
     5b4:	1f 90       	pop	r1
     5b6:	18 95       	reti

000005b8 <__vector_19>:
     5b8:	1f 92       	push	r1
     5ba:	0f 92       	push	r0
     5bc:	0f b6       	in	r0, 0x3f	; 63
     5be:	0f 92       	push	r0
     5c0:	11 24       	eor	r1, r1
     5c2:	0b b6       	in	r0, 0x3b	; 59
     5c4:	0f 92       	push	r0
     5c6:	8f 93       	push	r24
     5c8:	9f 93       	push	r25
     5ca:	ef 93       	push	r30
     5cc:	ff 93       	push	r31
     5ce:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <UART_TxHead>
     5d2:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <UART_TxTail>
     5d6:	98 13       	cpse	r25, r24
     5d8:	02 c0       	rjmp	.+4      	; 0x5de <__vector_19+0x26>
     5da:	55 98       	cbi	0x0a, 5	; 10
     5dc:	0b c0       	rjmp	.+22     	; 0x5f4 <__vector_19+0x3c>
     5de:	e0 91 77 01 	lds	r30, 0x0177	; 0x800177 <UART_TxTail>
     5e2:	ef 5f       	subi	r30, 0xFF	; 255
     5e4:	ef 71       	andi	r30, 0x1F	; 31
     5e6:	e0 93 77 01 	sts	0x0177, r30	; 0x800177 <UART_TxTail>
     5ea:	f0 e0       	ldi	r31, 0x00	; 0
     5ec:	e7 56       	subi	r30, 0x67	; 103
     5ee:	fe 4f       	sbci	r31, 0xFE	; 254
     5f0:	80 81       	ld	r24, Z
     5f2:	8c b9       	out	0x0c, r24	; 12
     5f4:	ff 91       	pop	r31
     5f6:	ef 91       	pop	r30
     5f8:	9f 91       	pop	r25
     5fa:	8f 91       	pop	r24
     5fc:	0f 90       	pop	r0
     5fe:	0b be       	out	0x3b, r0	; 59
     600:	0f 90       	pop	r0
     602:	0f be       	out	0x3f, r0	; 63
     604:	0f 90       	pop	r0
     606:	1f 90       	pop	r1
     608:	18 95       	reti

0000060a <__vector_30>:
SIGNAL(UART1_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART1 Receive Complete interrupt
Purpose:  called when the UART1 has received a character
**************************************************************************/
{
     60a:	1f 92       	push	r1
     60c:	0f 92       	push	r0
     60e:	0f b6       	in	r0, 0x3f	; 63
     610:	0f 92       	push	r0
     612:	11 24       	eor	r1, r1
     614:	0b b6       	in	r0, 0x3b	; 59
     616:	0f 92       	push	r0
     618:	8f 93       	push	r24
     61a:	9f 93       	push	r25
     61c:	ef 93       	push	r30
     61e:	ff 93       	push	r31
    unsigned char tmphead;
	unsigned char data;
	unsigned char bit9;
    unsigned char usr;
    /* read UART status register and UART data register */
	usr  = UART1_STATUS;
     620:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    bit9 = UART1_CONTROL;
     624:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
    bit9 = 0x01 & (bit9>>1);
    /* */
    UART1_LastRxError = (usr & (_BV(FE1)|_BV(DOR1)));
     628:	88 71       	andi	r24, 0x18	; 24
     62a:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <UART1_LastRxError>
	/* calculate buffer index */
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
     62e:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <UART1_RxHead>
     632:	ef 5f       	subi	r30, 0xFF	; 255
     634:	ef 71       	andi	r30, 0x1F	; 31
    if ( tmphead == UART1_RxTail ) {	
     636:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <UART1_RxTail>
     63a:	e8 13       	cpse	r30, r24
     63c:	04 c0       	rjmp	.+8      	; 0x646 <__vector_30+0x3c>
        /* error: receive buffer overflow, caracter is lost*/
        UART1_LastRxError = UART_BUFFER_OVERFLOW >> 8; 
     63e:	82 e0       	ldi	r24, 0x02	; 2
     640:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <UART1_LastRxError>
     644:	12 c0       	rjmp	.+36     	; 0x66a <__vector_30+0x60>
	}else{
		data = UART1_DATA;
     646:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
        /* store new index */
        UART1_RxHead = tmphead;
     64a:	e0 93 31 01 	sts	0x0131, r30	; 0x800131 <UART1_RxHead>
		if(UART1_LastRxError){
     64e:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <UART1_LastRxError>
     652:	88 23       	and	r24, r24
     654:	31 f0       	breq	.+12     	; 0x662 <__vector_30+0x58>
			/* store indication data error in buffer */
			UART1_RxBuf[tmphead] = 'X';
     656:	f0 e0       	ldi	r31, 0x00	; 0
     658:	ec 5c       	subi	r30, 0xCC	; 204
     65a:	fe 4f       	sbci	r31, 0xFE	; 254
     65c:	88 e5       	ldi	r24, 0x58	; 88
     65e:	80 83       	st	Z, r24
     660:	04 c0       	rjmp	.+8      	; 0x66a <__vector_30+0x60>
		}else{
			/* store received data in buffer */
			UART1_RxBuf[tmphead] = data;
     662:	f0 e0       	ldi	r31, 0x00	; 0
     664:	ec 5c       	subi	r30, 0xCC	; 204
     666:	fe 4f       	sbci	r31, 0xFE	; 254
     668:	90 83       	st	Z, r25
		}
    }
}
     66a:	ff 91       	pop	r31
     66c:	ef 91       	pop	r30
     66e:	9f 91       	pop	r25
     670:	8f 91       	pop	r24
     672:	0f 90       	pop	r0
     674:	0b be       	out	0x3b, r0	; 59
     676:	0f 90       	pop	r0
     678:	0f be       	out	0x3f, r0	; 63
     67a:	0f 90       	pop	r0
     67c:	1f 90       	pop	r1
     67e:	18 95       	reti

00000680 <__vector_31>:
SIGNAL(UART1_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART1 Data Register Empty interrupt
Purpose:  called when the UART1 is ready to transmit the next byte
**************************************************************************/
{
     680:	1f 92       	push	r1
     682:	0f 92       	push	r0
     684:	0f b6       	in	r0, 0x3f	; 63
     686:	0f 92       	push	r0
     688:	11 24       	eor	r1, r1
     68a:	0b b6       	in	r0, 0x3b	; 59
     68c:	0f 92       	push	r0
     68e:	8f 93       	push	r24
     690:	9f 93       	push	r25
     692:	ef 93       	push	r30
     694:	ff 93       	push	r31
    if ( UART1_TxHead == UART1_TxTail ) {
     696:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <UART1_TxHead>
     69a:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <UART1_TxTail>
     69e:	98 13       	cpse	r25, r24
     6a0:	06 c0       	rjmp	.+12     	; 0x6ae <__vector_31+0x2e>
        /* tx buffer empty, disable UDRE interrupt */
        UART1_CONTROL &= ~_BV(UART1_UDRIE);
     6a2:	ea e9       	ldi	r30, 0x9A	; 154
     6a4:	f0 e0       	ldi	r31, 0x00	; 0
     6a6:	80 81       	ld	r24, Z
     6a8:	8f 7d       	andi	r24, 0xDF	; 223
     6aa:	80 83       	st	Z, r24
     6ac:	0e c0       	rjmp	.+28     	; 0x6ca <__vector_31+0x4a>
    }else{
		/* calculate and store new buffer index */
        UART1_TxTail = (UART1_TxTail + 1) & UART_TX_BUFFER_MASK;
     6ae:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <UART1_TxTail>
     6b2:	8f 5f       	subi	r24, 0xFF	; 255
     6b4:	8f 71       	andi	r24, 0x1F	; 31
     6b6:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <UART1_TxTail>
        /* get one byte from buffer and write it to UART */
		UART1_DATA = UART1_TxBuf[UART1_TxTail];  /* start transmission */
     6ba:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <UART1_TxTail>
     6be:	f0 e0       	ldi	r31, 0x00	; 0
     6c0:	ec 5a       	subi	r30, 0xAC	; 172
     6c2:	fe 4f       	sbci	r31, 0xFE	; 254
     6c4:	80 81       	ld	r24, Z
     6c6:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
	}
}
     6ca:	ff 91       	pop	r31
     6cc:	ef 91       	pop	r30
     6ce:	9f 91       	pop	r25
     6d0:	8f 91       	pop	r24
     6d2:	0f 90       	pop	r0
     6d4:	0b be       	out	0x3b, r0	; 59
     6d6:	0f 90       	pop	r0
     6d8:	0f be       	out	0x3f, r0	; 63
     6da:	0f 90       	pop	r0
     6dc:	1f 90       	pop	r1
     6de:	18 95       	reti

000006e0 <FUNCpinmatch>:
}
//pinmatch
uint8_t FUNCpinmatch(uint8_t match, uint8_t pin, uint8_t HL)
{
	uint8_t result;
	result=match&pin;
     6e0:	68 23       	and	r22, r24
	if(HL){
     6e2:	44 23       	and	r20, r20
     6e4:	21 f0       	breq	.+8      	; 0x6ee <FUNCpinmatch+0xe>
		if(result==match);
     6e6:	86 17       	cp	r24, r22
     6e8:	21 f0       	breq	.+8      	; 0x6f2 <FUNCpinmatch+0x12>
		else
			result=0;
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	08 95       	ret
	}else{
		if(result)
     6ee:	61 11       	cpse	r22, r1
			result=0;
     6f0:	80 e0       	ldi	r24, 0x00	; 0
		else
			result=match;
	}
	return result;
}
     6f2:	08 95       	ret

000006f4 <FUNChmerge>:
// hmerge
uint8_t FUNChmerge(uint8_t X, uint8_t Y)
{
	return (X | Y);
}
     6f4:	86 2b       	or	r24, r22
     6f6:	08 95       	ret

000006f8 <FUNClmerge>:
// lmerge
uint8_t FUNClmerge(uint8_t X, uint8_t Y)
{
	return (X & Y);
}
     6f8:	86 23       	and	r24, r22
     6fa:	08 95       	ret

000006fc <FUNChh>:
uint8_t FUNChh(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi&xf;
	return i;
}
     6fc:	86 23       	and	r24, r22
     6fe:	08 95       	ret

00000700 <FUNCll>:
// ll
uint8_t FUNCll(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi|xf;
	return ~i;
     700:	86 2b       	or	r24, r22
}
     702:	80 95       	com	r24
     704:	08 95       	ret

00000706 <FUNClh>:
// lh
uint8_t FUNClh(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi^xf;
     706:	86 27       	eor	r24, r22
	i&=xf;
	return i;
}
     708:	86 23       	and	r24, r22
     70a:	08 95       	ret

0000070c <FUNChl>:
// hl
uint8_t FUNChl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xf^xi;
     70c:	60 95       	com	r22
	i&=xi;
	return i;
}
     70e:	86 23       	and	r24, r22
     710:	08 95       	ret

00000712 <FUNCdiff>:
// diff
uint8_t FUNCdiff(uint8_t xi, uint8_t xf)
{
	return xf^xi;
}
     712:	86 27       	eor	r24, r22
     714:	08 95       	ret

00000716 <FUNCswap>:
// interchange *px and *py
void FUNCswap(long *px, long *py)
{
     716:	cf 92       	push	r12
     718:	df 92       	push	r13
     71a:	ef 92       	push	r14
     71c:	ff 92       	push	r15
     71e:	0f 93       	push	r16
     720:	1f 93       	push	r17
	long temp;
	temp = *px;
     722:	fc 01       	movw	r30, r24
     724:	00 81       	ld	r16, Z
     726:	11 81       	ldd	r17, Z+1	; 0x01
     728:	22 81       	ldd	r18, Z+2	; 0x02
     72a:	33 81       	ldd	r19, Z+3	; 0x03
	*px = *py;
     72c:	fb 01       	movw	r30, r22
     72e:	c0 80       	ld	r12, Z
     730:	d1 80       	ldd	r13, Z+1	; 0x01
     732:	e2 80       	ldd	r14, Z+2	; 0x02
     734:	f3 80       	ldd	r15, Z+3	; 0x03
     736:	fc 01       	movw	r30, r24
     738:	c0 82       	st	Z, r12
     73a:	d1 82       	std	Z+1, r13	; 0x01
     73c:	e2 82       	std	Z+2, r14	; 0x02
     73e:	f3 82       	std	Z+3, r15	; 0x03
	*py = temp;
     740:	fb 01       	movw	r30, r22
     742:	00 83       	st	Z, r16
     744:	11 83       	std	Z+1, r17	; 0x01
     746:	22 83       	std	Z+2, r18	; 0x02
     748:	33 83       	std	Z+3, r19	; 0x03
}
     74a:	1f 91       	pop	r17
     74c:	0f 91       	pop	r16
     74e:	ff 90       	pop	r15
     750:	ef 90       	pop	r14
     752:	df 90       	pop	r13
     754:	cf 90       	pop	r12
     756:	08 95       	ret

00000758 <FUNCcopy>:
// copy: copy 'from' into 'to'; assume to is big enough
void FUNCcopy(char to[], char from[])
{
	int i;
	i = 0;
	while ((to[i] = from[i]) != '\0')
     758:	fb 01       	movw	r30, r22
     75a:	20 81       	ld	r18, Z
     75c:	fc 01       	movw	r30, r24
     75e:	20 83       	st	Z, r18
     760:	22 23       	and	r18, r18
     762:	39 f0       	breq	.+14     	; 0x772 <FUNCcopy+0x1a>
     764:	db 01       	movw	r26, r22
     766:	11 96       	adiw	r26, 0x01	; 1
     768:	31 96       	adiw	r30, 0x01	; 1
     76a:	9d 91       	ld	r25, X+
     76c:	91 93       	st	Z+, r25
     76e:	91 11       	cpse	r25, r1
     770:	fc cf       	rjmp	.-8      	; 0x76a <FUNCcopy+0x12>
     772:	08 95       	ret

00000774 <FUNCsqueeze>:
		++i;
}
// squeeze: delete all c from s
void FUNCsqueeze(char s[], int c)
{
     774:	cf 93       	push	r28
     776:	df 93       	push	r29
     778:	ec 01       	movw	r28, r24
	int i, j;
	for (i = j = 0; s[i] != '\0'; i++)
     77a:	98 81       	ld	r25, Y
     77c:	99 23       	and	r25, r25
     77e:	99 f0       	breq	.+38     	; 0x7a6 <FUNCsqueeze+0x32>
     780:	fe 01       	movw	r30, r28
     782:	31 96       	adiw	r30, 0x01	; 1
     784:	20 e0       	ldi	r18, 0x00	; 0
     786:	30 e0       	ldi	r19, 0x00	; 0
		if (s[i] != c)
     788:	49 2f       	mov	r20, r25
     78a:	50 e0       	ldi	r21, 0x00	; 0
     78c:	46 17       	cp	r20, r22
     78e:	57 07       	cpc	r21, r23
     790:	31 f0       	breq	.+12     	; 0x79e <FUNCsqueeze+0x2a>
			s[j++] = s[i];
     792:	de 01       	movw	r26, r28
     794:	a2 0f       	add	r26, r18
     796:	b3 1f       	adc	r27, r19
     798:	9c 93       	st	X, r25
     79a:	2f 5f       	subi	r18, 0xFF	; 255
     79c:	3f 4f       	sbci	r19, 0xFF	; 255
}
// squeeze: delete all c from s
void FUNCsqueeze(char s[], int c)
{
	int i, j;
	for (i = j = 0; s[i] != '\0'; i++)
     79e:	91 91       	ld	r25, Z+
     7a0:	91 11       	cpse	r25, r1
     7a2:	f2 cf       	rjmp	.-28     	; 0x788 <FUNCsqueeze+0x14>
     7a4:	02 c0       	rjmp	.+4      	; 0x7aa <FUNCsqueeze+0x36>
     7a6:	20 e0       	ldi	r18, 0x00	; 0
     7a8:	30 e0       	ldi	r19, 0x00	; 0
		if (s[i] != c)
			s[j++] = s[i];
		s[j] = '\0';
     7aa:	fe 01       	movw	r30, r28
     7ac:	e2 0f       	add	r30, r18
     7ae:	f3 1f       	adc	r31, r19
     7b0:	10 82       	st	Z, r1
}
     7b2:	df 91       	pop	r29
     7b4:	cf 91       	pop	r28
     7b6:	08 95       	ret

000007b8 <FUNCshellsort>:
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
     7b8:	2f 92       	push	r2
     7ba:	3f 92       	push	r3
     7bc:	4f 92       	push	r4
     7be:	5f 92       	push	r5
     7c0:	6f 92       	push	r6
     7c2:	7f 92       	push	r7
     7c4:	8f 92       	push	r8
     7c6:	9f 92       	push	r9
     7c8:	af 92       	push	r10
     7ca:	bf 92       	push	r11
     7cc:	cf 92       	push	r12
     7ce:	df 92       	push	r13
     7d0:	ef 92       	push	r14
     7d2:	ff 92       	push	r15
     7d4:	0f 93       	push	r16
     7d6:	1f 93       	push	r17
     7d8:	cf 93       	push	r28
     7da:	df 93       	push	r29
     7dc:	00 d0       	rcall	.+0      	; 0x7de <FUNCshellsort+0x26>
     7de:	00 d0       	rcall	.+0      	; 0x7e0 <FUNCshellsort+0x28>
     7e0:	cd b7       	in	r28, 0x3d	; 61
     7e2:	de b7       	in	r29, 0x3e	; 62
     7e4:	2c 01       	movw	r4, r24
     7e6:	1b 01       	movw	r2, r22
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
     7e8:	4b 01       	movw	r8, r22
     7ea:	77 23       	and	r23, r23
     7ec:	1c f4       	brge	.+6      	; 0x7f4 <FUNCshellsort+0x3c>
     7ee:	2f ef       	ldi	r18, 0xFF	; 255
     7f0:	82 1a       	sub	r8, r18
     7f2:	92 0a       	sbc	r9, r18
     7f4:	95 94       	asr	r9
     7f6:	87 94       	ror	r8
     7f8:	18 14       	cp	r1, r8
     7fa:	19 04       	cpc	r1, r9
     7fc:	0c f4       	brge	.+2      	; 0x800 <FUNCshellsort+0x48>
     7fe:	51 c0       	rjmp	.+162    	; 0x8a2 <FUNCshellsort+0xea>
     800:	6a c0       	rjmp	.+212    	; 0x8d6 <FUNCshellsort+0x11e>
		for (i = gap; i < n; i++)
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
     802:	96 01       	movw	r18, r12
     804:	dd 20       	and	r13, r13
     806:	9c f1       	brlt	.+102    	; 0x86e <FUNCshellsort+0xb6>
     808:	f5 01       	movw	r30, r10
     80a:	40 81       	ld	r20, Z
     80c:	51 81       	ldd	r21, Z+1	; 0x01
     80e:	f4 01       	movw	r30, r8
     810:	60 81       	ld	r22, Z
     812:	71 81       	ldd	r23, Z+1	; 0x01
     814:	64 17       	cp	r22, r20
     816:	75 07       	cpc	r23, r21
     818:	54 f5       	brge	.+84     	; 0x86e <FUNCshellsort+0xb6>
     81a:	8c 01       	movw	r16, r24
     81c:	0a 0d       	add	r16, r10
     81e:	1b 1d       	adc	r17, r11
     820:	d4 01       	movw	r26, r8
     822:	bc 82       	std	Y+4, r11	; 0x04
     824:	ab 82       	std	Y+3, r10	; 0x03
     826:	ba 82       	std	Y+2, r11	; 0x02
     828:	a9 82       	std	Y+1, r10	; 0x01
				temp = v[j];
				v[j] = v[j+gap];
     82a:	eb 81       	ldd	r30, Y+3	; 0x03
     82c:	fc 81       	ldd	r31, Y+4	; 0x04
     82e:	71 83       	std	Z+1, r23	; 0x01
     830:	60 83       	st	Z, r22
				v[j+gap] = temp;
     832:	11 96       	adiw	r26, 0x01	; 1
     834:	5c 93       	st	X, r21
     836:	4e 93       	st	-X, r20
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
		for (i = gap; i < n; i++)
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
     838:	2e 19       	sub	r18, r14
     83a:	3f 09       	sbc	r19, r15
     83c:	c2 f0       	brmi	.+48     	; 0x86e <FUNCshellsort+0xb6>
     83e:	f8 01       	movw	r30, r16
     840:	40 81       	ld	r20, Z
     842:	51 81       	ldd	r21, Z+1	; 0x01
     844:	e9 81       	ldd	r30, Y+1	; 0x01
     846:	fa 81       	ldd	r31, Y+2	; 0x02
     848:	60 81       	ld	r22, Z
     84a:	71 81       	ldd	r23, Z+1	; 0x01
     84c:	08 0f       	add	r16, r24
     84e:	19 1f       	adc	r17, r25
     850:	e8 0f       	add	r30, r24
     852:	f9 1f       	adc	r31, r25
     854:	fa 83       	std	Y+2, r31	; 0x02
     856:	e9 83       	std	Y+1, r30	; 0x01
     858:	eb 81       	ldd	r30, Y+3	; 0x03
     85a:	fc 81       	ldd	r31, Y+4	; 0x04
     85c:	e8 0f       	add	r30, r24
     85e:	f9 1f       	adc	r31, r25
     860:	fc 83       	std	Y+4, r31	; 0x04
     862:	eb 83       	std	Y+3, r30	; 0x03
     864:	a8 0f       	add	r26, r24
     866:	b9 1f       	adc	r27, r25
     868:	64 17       	cp	r22, r20
     86a:	75 07       	cpc	r23, r21
     86c:	f4 f2       	brlt	.-68     	; 0x82a <FUNCshellsort+0x72>
     86e:	ff ef       	ldi	r31, 0xFF	; 255
     870:	cf 1a       	sub	r12, r31
     872:	df 0a       	sbc	r13, r31
     874:	22 e0       	ldi	r18, 0x02	; 2
     876:	a2 0e       	add	r10, r18
     878:	b1 1c       	adc	r11, r1
     87a:	e2 e0       	ldi	r30, 0x02	; 2
     87c:	8e 0e       	add	r8, r30
     87e:	91 1c       	adc	r9, r1
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
		for (i = gap; i < n; i++)
     880:	c6 14       	cp	r12, r6
     882:	d7 04       	cpc	r13, r7
     884:	09 f0       	breq	.+2      	; 0x888 <FUNCshellsort+0xd0>
     886:	bd cf       	rjmp	.-134    	; 0x802 <FUNCshellsort+0x4a>
}
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
     888:	47 01       	movw	r8, r14
     88a:	ff 20       	and	r15, r15
     88c:	1c f4       	brge	.+6      	; 0x894 <FUNCshellsort+0xdc>
     88e:	ff ef       	ldi	r31, 0xFF	; 255
     890:	8f 1a       	sub	r8, r31
     892:	9f 0a       	sbc	r9, r31
     894:	95 94       	asr	r9
     896:	87 94       	ror	r8
     898:	18 14       	cp	r1, r8
     89a:	19 04       	cpc	r1, r9
     89c:	e4 f4       	brge	.+56     	; 0x8d6 <FUNCshellsort+0x11e>
     89e:	74 01       	movw	r14, r8
     8a0:	01 c0       	rjmp	.+2      	; 0x8a4 <FUNCshellsort+0xec>
     8a2:	74 01       	movw	r14, r8
		for (i = gap; i < n; i++)
     8a4:	82 14       	cp	r8, r2
     8a6:	93 04       	cpc	r9, r3
     8a8:	7c f7       	brge	.-34     	; 0x888 <FUNCshellsort+0xd0>
     8aa:	64 01       	movw	r12, r8
     8ac:	ce 18       	sub	r12, r14
     8ae:	df 08       	sbc	r13, r15
     8b0:	56 01       	movw	r10, r12
     8b2:	aa 0c       	add	r10, r10
     8b4:	bb 1c       	adc	r11, r11
     8b6:	a4 0c       	add	r10, r4
     8b8:	b5 1c       	adc	r11, r5
     8ba:	88 0c       	add	r8, r8
     8bc:	99 1c       	adc	r9, r9
     8be:	84 0c       	add	r8, r4
     8c0:	95 1c       	adc	r9, r5
     8c2:	31 01       	movw	r6, r2
     8c4:	6e 18       	sub	r6, r14
     8c6:	7f 08       	sbc	r7, r15
     8c8:	c7 01       	movw	r24, r14
     8ca:	88 0f       	add	r24, r24
     8cc:	99 1f       	adc	r25, r25
     8ce:	91 95       	neg	r25
     8d0:	81 95       	neg	r24
     8d2:	91 09       	sbc	r25, r1
     8d4:	96 cf       	rjmp	.-212    	; 0x802 <FUNCshellsort+0x4a>
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
				temp = v[j];
				v[j] = v[j+gap];
				v[j+gap] = temp;
			}
}
     8d6:	0f 90       	pop	r0
     8d8:	0f 90       	pop	r0
     8da:	0f 90       	pop	r0
     8dc:	0f 90       	pop	r0
     8de:	df 91       	pop	r29
     8e0:	cf 91       	pop	r28
     8e2:	1f 91       	pop	r17
     8e4:	0f 91       	pop	r16
     8e6:	ff 90       	pop	r15
     8e8:	ef 90       	pop	r14
     8ea:	df 90       	pop	r13
     8ec:	cf 90       	pop	r12
     8ee:	bf 90       	pop	r11
     8f0:	af 90       	pop	r10
     8f2:	9f 90       	pop	r9
     8f4:	8f 90       	pop	r8
     8f6:	7f 90       	pop	r7
     8f8:	6f 90       	pop	r6
     8fa:	5f 90       	pop	r5
     8fc:	4f 90       	pop	r4
     8fe:	3f 90       	pop	r3
     900:	2f 90       	pop	r2
     902:	08 95       	ret

00000904 <FUNCpmax>:
	if(a1 > a2){
		biggest = a1;
	}else{
		biggest = a2;
	}
	return biggest;
     904:	86 17       	cp	r24, r22
     906:	97 07       	cpc	r25, r23
     908:	0c f4       	brge	.+2      	; 0x90c <FUNCpmax+0x8>
     90a:	cb 01       	movw	r24, r22
}
     90c:	08 95       	ret

0000090e <FUNCgcd>:
// common divisor
int FUNCgcd (int u, int v)
{
     90e:	9b 01       	movw	r18, r22
	int temp;
	while ( v != 0 ) {
     910:	67 2b       	or	r22, r23
     912:	11 f4       	brne	.+4      	; 0x918 <FUNCgcd+0xa>
     914:	08 95       	ret
		temp = u % v;
		u = v;
		v = temp;
     916:	9a 01       	movw	r18, r20
// common divisor
int FUNCgcd (int u, int v)
{
	int temp;
	while ( v != 0 ) {
		temp = u % v;
     918:	b9 01       	movw	r22, r18
     91a:	0e 94 b9 0c 	call	0x1972	; 0x1972 <__divmodhi4>
     91e:	ac 01       	movw	r20, r24
     920:	82 2f       	mov	r24, r18
     922:	93 2f       	mov	r25, r19
}
// common divisor
int FUNCgcd (int u, int v)
{
	int temp;
	while ( v != 0 ) {
     924:	41 15       	cp	r20, r1
     926:	51 05       	cpc	r21, r1
     928:	b1 f7       	brne	.-20     	; 0x916 <FUNCgcd+0x8>
		temp = u % v;
		u = v;
		v = temp;
	}
	return u;
}
     92a:	08 95       	ret

0000092c <FUNCstrToInt>:
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
     92c:	fc 01       	movw	r30, r24
	int i, intValue, result = 0;
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
     92e:	90 81       	ld	r25, Z
     930:	80 ed       	ldi	r24, 0xD0	; 208
     932:	89 0f       	add	r24, r25
     934:	8a 30       	cpi	r24, 0x0A	; 10
     936:	d0 f4       	brcc	.+52     	; 0x96c <FUNCstrToInt+0x40>
     938:	31 96       	adiw	r30, 0x01	; 1
     93a:	20 e0       	ldi	r18, 0x00	; 0
     93c:	30 e0       	ldi	r19, 0x00	; 0
		intValue = string[i] - '0';
		result = result * 10 + intValue;
     93e:	a9 01       	movw	r20, r18
     940:	44 0f       	add	r20, r20
     942:	55 1f       	adc	r21, r21
     944:	22 0f       	add	r18, r18
     946:	33 1f       	adc	r19, r19
     948:	22 0f       	add	r18, r18
     94a:	33 1f       	adc	r19, r19
     94c:	22 0f       	add	r18, r18
     94e:	33 1f       	adc	r19, r19
     950:	42 0f       	add	r20, r18
     952:	53 1f       	adc	r21, r19
     954:	29 2f       	mov	r18, r25
     956:	30 e0       	ldi	r19, 0x00	; 0
     958:	20 53       	subi	r18, 0x30	; 48
     95a:	31 09       	sbc	r19, r1
     95c:	24 0f       	add	r18, r20
     95e:	35 1f       	adc	r19, r21
}
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
	int i, intValue, result = 0;
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
     960:	91 91       	ld	r25, Z+
     962:	80 ed       	ldi	r24, 0xD0	; 208
     964:	89 0f       	add	r24, r25
     966:	8a 30       	cpi	r24, 0x0A	; 10
     968:	50 f3       	brcs	.-44     	; 0x93e <FUNCstrToInt+0x12>
     96a:	02 c0       	rjmp	.+4      	; 0x970 <FUNCstrToInt+0x44>
	return u;
}
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
	int i, intValue, result = 0;
     96c:	20 e0       	ldi	r18, 0x00	; 0
     96e:	30 e0       	ldi	r19, 0x00	; 0
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
		intValue = string[i] - '0';
		result = result * 10 + intValue;
	}
	return result;
}
     970:	c9 01       	movw	r24, r18
     972:	08 95       	ret

00000974 <FUNCfilter>:
uint8_t FUNCfilter(uint8_t mask, uint8_t data)
{
	uint8_t Z;
	Z=mask & data;
	return Z;
}
     974:	86 23       	and	r24, r22
     976:	08 95       	ret

00000978 <FUNCticks>:
// ticks
unsigned int FUNCticks(unsigned int num)
{
	unsigned int count;
	for(count=0;count<num;count++)
     978:	00 97       	sbiw	r24, 0x00	; 0
     97a:	39 f0       	breq	.+14     	; 0x98a <FUNCticks+0x12>
     97c:	20 e0       	ldi	r18, 0x00	; 0
     97e:	30 e0       	ldi	r19, 0x00	; 0
     980:	2f 5f       	subi	r18, 0xFF	; 255
     982:	3f 4f       	sbci	r19, 0xFF	; 255
     984:	82 17       	cp	r24, r18
     986:	93 07       	cpc	r25, r19
     988:	d9 f7       	brne	.-10     	; 0x980 <FUNCticks+0x8>
		;
	return count;
}
     98a:	08 95       	ret

0000098c <FUNCtwocomptoint8bit>:
// Two's Complement function
int FUNCtwocomptoint8bit(int twoscomp){
  
  //Let's see if the byte is negative
  if (twoscomp & 0B10000000){
     98c:	87 ff       	sbrs	r24, 7
     98e:	08 c0       	rjmp	.+16     	; 0x9a0 <FUNCtwocomptoint8bit+0x14>
    //Invert
    twoscomp = ~twoscomp + 1;
     990:	91 95       	neg	r25
     992:	81 95       	neg	r24
     994:	91 09       	sbc	r25, r1
	twoscomp = (twoscomp & 0B11111111);
    //Cast as int and multiply by negative one
    int value = (int)(twoscomp)*(-1);
     996:	99 27       	eor	r25, r25
     998:	91 95       	neg	r25
     99a:	81 95       	neg	r24
     99c:	91 09       	sbc	r25, r1
    return value;
     99e:	08 95       	ret
    //Byte is non-negative, therefore convert to decimal and display
    //Make sure we are never over 1279
    twoscomp = (twoscomp & 0B01111111);
    //Cast as int and return
    int value = (int)(twoscomp);
    return value;
     9a0:	8f 77       	andi	r24, 0x7F	; 127
     9a2:	99 27       	eor	r25, r25
  }
}
     9a4:	08 95       	ret

000009a6 <FUNCtwocomptoint10bit>:
// Two's Complement function, shifts 10 bit binary to signed integers (-512 to 512)
int FUNCtwocomptoint10bit(int twoscomp){
	
  //Let's see if the byte is negative
  if (twoscomp & 0x200){
     9a6:	91 ff       	sbrs	r25, 1
     9a8:	08 c0       	rjmp	.+16     	; 0x9ba <FUNCtwocomptoint10bit+0x14>
    //Invert
    twoscomp = ~twoscomp + 1;
     9aa:	91 95       	neg	r25
     9ac:	81 95       	neg	r24
     9ae:	91 09       	sbc	r25, r1
    twoscomp = (twoscomp & 0x3FF);
    //Cast as int and multiply by negative one
    int value = (int)(twoscomp)*(-1);
     9b0:	93 70       	andi	r25, 0x03	; 3
     9b2:	91 95       	neg	r25
     9b4:	81 95       	neg	r24
     9b6:	91 09       	sbc	r25, r1
    return value;
     9b8:	08 95       	ret
    //Byte is non-negative, therefore convert to decimal and display
    twoscomp = (twoscomp & 0x1FF);
    //Cast as int and return
    //Serial.println(twoscomp);
    int value = (int)(twoscomp);
    return value;
     9ba:	91 70       	andi	r25, 0x01	; 1
  }
}
     9bc:	08 95       	ret

000009be <FUNCtwocomptointnbit>:
// Two's Complement function, nbits
int FUNCtwocomptointnbit(int twoscomp, uint8_t nbits){
  unsigned int signmask;
  unsigned int mask;
  signmask = (1<<(nbits-1));
     9be:	61 50       	subi	r22, 0x01	; 1
     9c0:	21 e0       	ldi	r18, 0x01	; 1
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	02 c0       	rjmp	.+4      	; 0x9ca <FUNCtwocomptointnbit+0xc>
     9c6:	22 0f       	add	r18, r18
     9c8:	33 1f       	adc	r19, r19
     9ca:	6a 95       	dec	r22
     9cc:	e2 f7       	brpl	.-8      	; 0x9c6 <FUNCtwocomptointnbit+0x8>
  mask=signmask-1;
     9ce:	a9 01       	movw	r20, r18
     9d0:	41 50       	subi	r20, 0x01	; 1
     9d2:	51 09       	sbc	r21, r1
  //Let's see if the number is negative
  if (twoscomp & signmask){
     9d4:	b9 01       	movw	r22, r18
     9d6:	68 23       	and	r22, r24
     9d8:	79 23       	and	r23, r25
     9da:	67 2b       	or	r22, r23
     9dc:	29 f0       	breq	.+10     	; 0x9e8 <FUNCtwocomptointnbit+0x2a>
	twoscomp &= mask;
    twoscomp -= signmask;
     9de:	84 23       	and	r24, r20
     9e0:	95 23       	and	r25, r21
     9e2:	82 1b       	sub	r24, r18
     9e4:	93 0b       	sbc	r25, r19
     9e6:	08 95       	ret
  }else{
	  twoscomp &= mask;
     9e8:	84 23       	and	r24, r20
     9ea:	95 23       	and	r25, r21
  }
  return twoscomp;
}
     9ec:	08 95       	ret

000009ee <FUNCdec2bcd>:
// Convert Decimal to Binary Coded Decimal (BCD)
char FUNCdec2bcd(char num)
{
	return ((num/10 * 16) + (num % 10));
     9ee:	9d ec       	ldi	r25, 0xCD	; 205
     9f0:	89 9f       	mul	r24, r25
     9f2:	91 2d       	mov	r25, r1
     9f4:	11 24       	eor	r1, r1
     9f6:	96 95       	lsr	r25
     9f8:	96 95       	lsr	r25
     9fa:	96 95       	lsr	r25
     9fc:	39 2f       	mov	r19, r25
     9fe:	33 0f       	add	r19, r19
     a00:	23 2f       	mov	r18, r19
     a02:	22 0f       	add	r18, r18
     a04:	22 0f       	add	r18, r18
     a06:	23 0f       	add	r18, r19
     a08:	82 1b       	sub	r24, r18
}
     a0a:	20 e1       	ldi	r18, 0x10	; 16
     a0c:	92 9f       	mul	r25, r18
     a0e:	80 0d       	add	r24, r0
     a10:	11 24       	eor	r1, r1
     a12:	08 95       	ret

00000a14 <FUNCbcd2dec>:
// Convert Binary Coded Decimal (BCD) to Decimal
char FUNCbcd2dec(char num)
{
	return ((num/16 * 10) + (num % 16));
     a14:	98 2f       	mov	r25, r24
     a16:	92 95       	swap	r25
     a18:	9f 70       	andi	r25, 0x0F	; 15
     a1a:	99 0f       	add	r25, r25
     a1c:	29 2f       	mov	r18, r25
     a1e:	22 0f       	add	r18, r18
     a20:	22 0f       	add	r18, r18
     a22:	92 0f       	add	r25, r18
     a24:	8f 70       	andi	r24, 0x0F	; 15
}
     a26:	89 0f       	add	r24, r25
     a28:	08 95       	ret

00000a2a <FUNCresizestr>:
char* FUNCresizestr(char *string, int size)
{
     a2a:	fc 01       	movw	r30, r24
	int i;
	FUNCstr[size]='\0';
     a2c:	db 01       	movw	r26, r22
     a2e:	a0 54       	subi	r26, 0x40	; 64
     a30:	be 4f       	sbci	r27, 0xFE	; 254
     a32:	1c 92       	st	X, r1
	for(i=0;i<size;i++){
     a34:	16 16       	cp	r1, r22
     a36:	17 06       	cpc	r1, r23
     a38:	14 f5       	brge	.+68     	; 0xa7e <FUNCresizestr+0x54>
		if(*(string+i)=='\0'){
     a3a:	90 81       	ld	r25, Z
     a3c:	91 11       	cpse	r25, r1
     a3e:	0c c0       	rjmp	.+24     	; 0xa58 <FUNCresizestr+0x2e>
     a40:	17 c0       	rjmp	.+46     	; 0xa70 <FUNCresizestr+0x46>
     a42:	91 91       	ld	r25, Z+
     a44:	91 11       	cpse	r25, r1
     a46:	0d c0       	rjmp	.+26     	; 0xa62 <FUNCresizestr+0x38>
     a48:	15 c0       	rjmp	.+42     	; 0xa74 <FUNCresizestr+0x4a>
			for(;i<size;i++){
				FUNCstr[i]=' ';
     a4a:	81 93       	st	Z+, r24
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
		if(*(string+i)=='\0'){
			for(;i<size;i++){
     a4c:	2f 5f       	subi	r18, 0xFF	; 255
     a4e:	3f 4f       	sbci	r19, 0xFF	; 255
     a50:	26 17       	cp	r18, r22
     a52:	37 07       	cpc	r19, r23
     a54:	d4 f3       	brlt	.-12     	; 0xa4a <FUNCresizestr+0x20>
     a56:	13 c0       	rjmp	.+38     	; 0xa7e <FUNCresizestr+0x54>
     a58:	a0 ec       	ldi	r26, 0xC0	; 192
     a5a:	b1 e0       	ldi	r27, 0x01	; 1
     a5c:	31 96       	adiw	r30, 0x01	; 1
char* FUNCresizestr(char *string, int size)
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
		if(*(string+i)=='\0'){
     a5e:	20 e0       	ldi	r18, 0x00	; 0
     a60:	30 e0       	ldi	r19, 0x00	; 0
			for(;i<size;i++){
				FUNCstr[i]=' ';
			}
			break;
		}
		FUNCstr[i]=*(string+i);
     a62:	9d 93       	st	X+, r25
}
char* FUNCresizestr(char *string, int size)
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
     a64:	2f 5f       	subi	r18, 0xFF	; 255
     a66:	3f 4f       	sbci	r19, 0xFF	; 255
     a68:	62 17       	cp	r22, r18
     a6a:	73 07       	cpc	r23, r19
     a6c:	51 f7       	brne	.-44     	; 0xa42 <FUNCresizestr+0x18>
     a6e:	07 c0       	rjmp	.+14     	; 0xa7e <FUNCresizestr+0x54>
     a70:	20 e0       	ldi	r18, 0x00	; 0
     a72:	30 e0       	ldi	r19, 0x00	; 0
     a74:	f9 01       	movw	r30, r18
     a76:	e0 54       	subi	r30, 0x40	; 64
     a78:	fe 4f       	sbci	r31, 0xFE	; 254
		if(*(string+i)=='\0'){
			for(;i<size;i++){
				FUNCstr[i]=' ';
     a7a:	80 e2       	ldi	r24, 0x20	; 32
     a7c:	e6 cf       	rjmp	.-52     	; 0xa4a <FUNCresizestr+0x20>
			break;
		}
		FUNCstr[i]=*(string+i);
	}
	return FUNCstr;
}
     a7e:	80 ec       	ldi	r24, 0xC0	; 192
     a80:	91 e0       	ldi	r25, 0x01	; 1
     a82:	08 95       	ret

00000a84 <FUNCtrimmer>:
long FUNCtrimmer(long x, long in_min, long in_max, long out_min, long out_max)
/*
	same as arduino map function.
*/
{
     a84:	4f 92       	push	r4
     a86:	5f 92       	push	r5
     a88:	6f 92       	push	r6
     a8a:	7f 92       	push	r7
     a8c:	af 92       	push	r10
     a8e:	bf 92       	push	r11
     a90:	cf 92       	push	r12
     a92:	df 92       	push	r13
     a94:	ef 92       	push	r14
     a96:	ff 92       	push	r15
     a98:	0f 93       	push	r16
     a9a:	1f 93       	push	r17
     a9c:	cf 93       	push	r28
     a9e:	df 93       	push	r29
     aa0:	cd b7       	in	r28, 0x3d	; 61
     aa2:	de b7       	in	r29, 0x3e	; 62
     aa4:	29 01       	movw	r4, r18
     aa6:	3a 01       	movw	r6, r20
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     aa8:	9b 01       	movw	r18, r22
     aaa:	ac 01       	movw	r20, r24
     aac:	24 19       	sub	r18, r4
     aae:	35 09       	sbc	r19, r5
     ab0:	46 09       	sbc	r20, r6
     ab2:	57 09       	sbc	r21, r7
     ab4:	89 89       	ldd	r24, Y+17	; 0x11
     ab6:	9a 89       	ldd	r25, Y+18	; 0x12
     ab8:	ab 89       	ldd	r26, Y+19	; 0x13
     aba:	bc 89       	ldd	r27, Y+20	; 0x14
     abc:	bc 01       	movw	r22, r24
     abe:	cd 01       	movw	r24, r26
     ac0:	6a 19       	sub	r22, r10
     ac2:	7b 09       	sbc	r23, r11
     ac4:	8c 09       	sbc	r24, r12
     ac6:	9d 09       	sbc	r25, r13
     ac8:	31 d7       	rcall	.+3682   	; 0x192c <__mulsi3>
     aca:	a8 01       	movw	r20, r16
     acc:	97 01       	movw	r18, r14
     ace:	24 19       	sub	r18, r4
     ad0:	35 09       	sbc	r19, r5
     ad2:	46 09       	sbc	r20, r6
     ad4:	57 09       	sbc	r21, r7
     ad6:	82 d7       	rcall	.+3844   	; 0x19dc <__divmodsi4>
     ad8:	ca 01       	movw	r24, r20
     ada:	b9 01       	movw	r22, r18
     adc:	6a 0d       	add	r22, r10
     ade:	7b 1d       	adc	r23, r11
     ae0:	8c 1d       	adc	r24, r12
     ae2:	9d 1d       	adc	r25, r13
}
     ae4:	df 91       	pop	r29
     ae6:	cf 91       	pop	r28
     ae8:	1f 91       	pop	r17
     aea:	0f 91       	pop	r16
     aec:	ff 90       	pop	r15
     aee:	ef 90       	pop	r14
     af0:	df 90       	pop	r13
     af2:	cf 90       	pop	r12
     af4:	bf 90       	pop	r11
     af6:	af 90       	pop	r10
     af8:	7f 90       	pop	r7
     afa:	6f 90       	pop	r6
     afc:	5f 90       	pop	r5
     afe:	4f 90       	pop	r4
     b00:	08 95       	ret

00000b02 <Pwr>:
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
     b02:	70 e0       	ldi	r23, 0x00	; 0
     b04:	61 15       	cp	r22, r1
     b06:	71 05       	cpc	r23, r1
     b08:	99 f0       	breq	.+38     	; 0xb30 <Pwr+0x2e>
     b0a:	41 e0       	ldi	r20, 0x01	; 1
     b0c:	50 e0       	ldi	r21, 0x00	; 0
     b0e:	21 e0       	ldi	r18, 0x01	; 1
     b10:	30 e0       	ldi	r19, 0x00	; 0
        p = p * bs;
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	fa 01       	movw	r30, r20
     b16:	e8 9f       	mul	r30, r24
     b18:	a0 01       	movw	r20, r0
     b1a:	e9 9f       	mul	r30, r25
     b1c:	50 0d       	add	r21, r0
     b1e:	f8 9f       	mul	r31, r24
     b20:	50 0d       	add	r21, r0
     b22:	11 24       	eor	r1, r1
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
     b24:	2f 5f       	subi	r18, 0xFF	; 255
     b26:	3f 4f       	sbci	r19, 0xFF	; 255
     b28:	62 17       	cp	r22, r18
     b2a:	73 07       	cpc	r23, r19
     b2c:	98 f7       	brcc	.-26     	; 0xb14 <Pwr+0x12>
     b2e:	02 c0       	rjmp	.+4      	; 0xb34 <Pwr+0x32>
}
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
     b30:	41 e0       	ldi	r20, 0x01	; 1
     b32:	50 e0       	ldi	r21, 0x00	; 0
    for (i = 1; i <= n; ++i)
        p = p * bs;
    return p;
}
     b34:	ca 01       	movw	r24, r20
     b36:	08 95       	ret

00000b38 <StringLength>:
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
	while ( string[count] != '\0' )
     b38:	fc 01       	movw	r30, r24
     b3a:	20 81       	ld	r18, Z
     b3c:	22 23       	and	r18, r18
     b3e:	41 f0       	breq	.+16     	; 0xb50 <StringLength+0x18>
     b40:	31 96       	adiw	r30, 0x01	; 1
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	90 e0       	ldi	r25, 0x00	; 0
		++count;
     b46:	01 96       	adiw	r24, 0x01	; 1
}
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
	while ( string[count] != '\0' )
     b48:	21 91       	ld	r18, Z+
     b4a:	21 11       	cpse	r18, r1
     b4c:	fc cf       	rjmp	.-8      	; 0xb46 <StringLength+0xe>
     b4e:	08 95       	ret
    return p;
}
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	90 e0       	ldi	r25, 0x00	; 0
	while ( string[count] != '\0' )
		++count;
	return count;
}
     b54:	08 95       	ret

00000b56 <FUNCtrim>:
	Reverse(FUNCstr);
	return FUNCstr;
}
// trim: remove trailing blanks, tabs, newlines
int FUNCtrim(char s[])
{
     b56:	cf 93       	push	r28
     b58:	df 93       	push	r29
     b5a:	ec 01       	movw	r28, r24
	int n;
	for (n = StringLength(s)-1; n >= 0; n--)
     b5c:	ed df       	rcall	.-38     	; 0xb38 <StringLength>
     b5e:	9c 01       	movw	r18, r24
     b60:	21 50       	subi	r18, 0x01	; 1
     b62:	31 09       	sbc	r19, r1
     b64:	62 f0       	brmi	.+24     	; 0xb7e <FUNCtrim+0x28>
     b66:	fe 01       	movw	r30, r28
     b68:	e8 0f       	add	r30, r24
     b6a:	f9 1f       	adc	r31, r25
		if (s[n] != ' ' && s[n] != '\t' && s[n] != '\n')
     b6c:	92 91       	ld	r25, -Z
     b6e:	90 32       	cpi	r25, 0x20	; 32
     b70:	19 f0       	breq	.+6      	; 0xb78 <FUNCtrim+0x22>
     b72:	99 50       	subi	r25, 0x09	; 9
     b74:	92 30       	cpi	r25, 0x02	; 2
     b76:	18 f4       	brcc	.+6      	; 0xb7e <FUNCtrim+0x28>
}
// trim: remove trailing blanks, tabs, newlines
int FUNCtrim(char s[])
{
	int n;
	for (n = StringLength(s)-1; n >= 0; n--)
     b78:	21 50       	subi	r18, 0x01	; 1
     b7a:	31 09       	sbc	r19, r1
     b7c:	b8 f7       	brcc	.-18     	; 0xb6c <FUNCtrim+0x16>
		if (s[n] != ' ' && s[n] != '\t' && s[n] != '\n')
			break;
	s[n+1] = '\0';
     b7e:	c2 0f       	add	r28, r18
     b80:	d3 1f       	adc	r29, r19
     b82:	19 82       	std	Y+1, r1	; 0x01
	return n;
}
     b84:	c9 01       	movw	r24, r18
     b86:	df 91       	pop	r29
     b88:	cf 91       	pop	r28
     b8a:	08 95       	ret

00000b8c <Reverse>:
		++count;
	return count;
}
// reverse: reverse string s in place
void Reverse(char s[])
{
     b8c:	cf 93       	push	r28
     b8e:	df 93       	push	r29
     b90:	ec 01       	movw	r28, r24
	int c, i, j;
	for (i = 0, j = StringLength(s)-1; i < j; i++, j--){
     b92:	d2 df       	rcall	.-92     	; 0xb38 <StringLength>
     b94:	9c 01       	movw	r18, r24
     b96:	21 50       	subi	r18, 0x01	; 1
     b98:	31 09       	sbc	r19, r1
     b9a:	12 16       	cp	r1, r18
     b9c:	13 06       	cpc	r1, r19
     b9e:	84 f4       	brge	.+32     	; 0xbc0 <Reverse+0x34>
     ba0:	de 01       	movw	r26, r28
     ba2:	a8 0f       	add	r26, r24
     ba4:	b9 1f       	adc	r27, r25
     ba6:	fe 01       	movw	r30, r28
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	90 e0       	ldi	r25, 0x00	; 0
		c = s[i];
     bac:	40 81       	ld	r20, Z
		s[i] = s[j];
     bae:	5e 91       	ld	r21, -X
     bb0:	51 93       	st	Z+, r21
		s[j] = c;
     bb2:	4c 93       	st	X, r20
}
// reverse: reverse string s in place
void Reverse(char s[])
{
	int c, i, j;
	for (i = 0, j = StringLength(s)-1; i < j; i++, j--){
     bb4:	01 96       	adiw	r24, 0x01	; 1
     bb6:	21 50       	subi	r18, 0x01	; 1
     bb8:	31 09       	sbc	r19, r1
     bba:	82 17       	cp	r24, r18
     bbc:	93 07       	cpc	r25, r19
     bbe:	b4 f3       	brlt	.-20     	; 0xbac <Reverse+0x20>
		c = s[i];
		s[i] = s[j];
		s[j] = c;
	}
}
     bc0:	df 91       	pop	r29
     bc2:	cf 91       	pop	r28
     bc4:	08 95       	ret

00000bc6 <FUNCi32toa>:
				v[j+gap] = temp;
			}
}
// i32toa: convert n to characters in s
char* FUNCi32toa(int32_t n)
{
     bc6:	8f 92       	push	r8
     bc8:	9f 92       	push	r9
     bca:	af 92       	push	r10
     bcc:	bf 92       	push	r11
     bce:	cf 92       	push	r12
     bd0:	df 92       	push	r13
     bd2:	ef 92       	push	r14
     bd4:	ff 92       	push	r15
     bd6:	0f 93       	push	r16
     bd8:	1f 93       	push	r17
     bda:	cf 93       	push	r28
     bdc:	df 93       	push	r29
     bde:	6b 01       	movw	r12, r22
     be0:	7c 01       	movw	r14, r24
     be2:	dc 01       	movw	r26, r24
     be4:	cb 01       	movw	r24, r22
     be6:	ff 20       	and	r15, r15
     be8:	3c f4       	brge	.+14     	; 0xbf8 <FUNCi32toa+0x32>
     bea:	88 27       	eor	r24, r24
     bec:	99 27       	eor	r25, r25
     bee:	dc 01       	movw	r26, r24
     bf0:	8c 19       	sub	r24, r12
     bf2:	9d 09       	sbc	r25, r13
     bf4:	ae 09       	sbc	r26, r14
     bf6:	bf 09       	sbc	r27, r15
     bf8:	bc 01       	movw	r22, r24
     bfa:	cd 01       	movw	r24, r26
     bfc:	10 e0       	ldi	r17, 0x00	; 0
	int32_t sign;
	if ((sign = n) < 0) // record sign
	n = -n; // make n positive
	i = 0;
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
     bfe:	0f 2e       	mov	r0, r31
     c00:	fa e0       	ldi	r31, 0x0A	; 10
     c02:	8f 2e       	mov	r8, r31
     c04:	91 2c       	mov	r9, r1
     c06:	a1 2c       	mov	r10, r1
     c08:	b1 2c       	mov	r11, r1
     c0a:	f0 2d       	mov	r31, r0
     c0c:	01 c0       	rjmp	.+2      	; 0xc10 <FUNCi32toa+0x4a>
     c0e:	10 2f       	mov	r17, r16
     c10:	01 e0       	ldi	r16, 0x01	; 1
     c12:	01 0f       	add	r16, r17
     c14:	c1 2f       	mov	r28, r17
     c16:	d0 e0       	ldi	r29, 0x00	; 0
     c18:	c0 54       	subi	r28, 0x40	; 64
     c1a:	de 4f       	sbci	r29, 0xFE	; 254
     c1c:	a5 01       	movw	r20, r10
     c1e:	94 01       	movw	r18, r8
     c20:	dd d6       	rcall	.+3514   	; 0x19dc <__divmodsi4>
     c22:	60 5d       	subi	r22, 0xD0	; 208
     c24:	68 83       	st	Y, r22
	}while ((n /= 10) > 0); // delete it
     c26:	62 2f       	mov	r22, r18
     c28:	73 2f       	mov	r23, r19
     c2a:	84 2f       	mov	r24, r20
     c2c:	95 2f       	mov	r25, r21
     c2e:	16 16       	cp	r1, r22
     c30:	17 06       	cpc	r1, r23
     c32:	18 06       	cpc	r1, r24
     c34:	19 06       	cpc	r1, r25
     c36:	5c f3       	brlt	.-42     	; 0xc0e <FUNCi32toa+0x48>
	if (sign < 0)
     c38:	ff 20       	and	r15, r15
     c3a:	44 f4       	brge	.+16     	; 0xc4c <FUNCi32toa+0x86>
	FUNCstr[i++] = '-';
     c3c:	e0 2f       	mov	r30, r16
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	e0 54       	subi	r30, 0x40	; 64
     c42:	fe 4f       	sbci	r31, 0xFE	; 254
     c44:	8d e2       	ldi	r24, 0x2D	; 45
     c46:	80 83       	st	Z, r24
     c48:	02 e0       	ldi	r16, 0x02	; 2
     c4a:	01 0f       	add	r16, r17
	FUNCstr[i] = '\0';
     c4c:	e0 2f       	mov	r30, r16
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	e0 54       	subi	r30, 0x40	; 64
     c52:	fe 4f       	sbci	r31, 0xFE	; 254
     c54:	10 82       	st	Z, r1
	Reverse(FUNCstr);
     c56:	80 ec       	ldi	r24, 0xC0	; 192
     c58:	91 e0       	ldi	r25, 0x01	; 1
     c5a:	98 df       	rcall	.-208    	; 0xb8c <Reverse>
	return FUNCstr;
}
     c5c:	80 ec       	ldi	r24, 0xC0	; 192
     c5e:	91 e0       	ldi	r25, 0x01	; 1
     c60:	df 91       	pop	r29
     c62:	cf 91       	pop	r28
     c64:	1f 91       	pop	r17
     c66:	0f 91       	pop	r16
     c68:	ff 90       	pop	r15
     c6a:	ef 90       	pop	r14
     c6c:	df 90       	pop	r13
     c6e:	cf 90       	pop	r12
     c70:	bf 90       	pop	r11
     c72:	af 90       	pop	r10
     c74:	9f 90       	pop	r9
     c76:	8f 90       	pop	r8
     c78:	08 95       	ret

00000c7a <FUNCi16toa>:
// i16toa: convert n to characters in s
char* FUNCi16toa(int16_t n)
{
     c7a:	0f 93       	push	r16
     c7c:	1f 93       	push	r17
     c7e:	cf 93       	push	r28
     c80:	df 93       	push	r29
     c82:	ec 01       	movw	r28, r24
     c84:	99 23       	and	r25, r25
     c86:	24 f4       	brge	.+8      	; 0xc90 <FUNCi16toa+0x16>
     c88:	88 27       	eor	r24, r24
     c8a:	99 27       	eor	r25, r25
     c8c:	8c 1b       	sub	r24, r28
     c8e:	9d 0b       	sbc	r25, r29
     c90:	20 e0       	ldi	r18, 0x00	; 0
	int16_t sign;
	if ((sign = n) < 0) // record sign
		n = -n; // make n positive
	i = 0;
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
     c92:	0a e0       	ldi	r16, 0x0A	; 10
     c94:	10 e0       	ldi	r17, 0x00	; 0
     c96:	01 c0       	rjmp	.+2      	; 0xc9a <FUNCi16toa+0x20>
     c98:	23 2f       	mov	r18, r19
     c9a:	31 e0       	ldi	r19, 0x01	; 1
     c9c:	32 0f       	add	r19, r18
     c9e:	e2 2f       	mov	r30, r18
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	e0 54       	subi	r30, 0x40	; 64
     ca4:	fe 4f       	sbci	r31, 0xFE	; 254
     ca6:	b8 01       	movw	r22, r16
     ca8:	64 d6       	rcall	.+3272   	; 0x1972 <__divmodhi4>
     caa:	80 5d       	subi	r24, 0xD0	; 208
     cac:	80 83       	st	Z, r24
	}while ((n /= 10) > 0); // delete it
     cae:	86 2f       	mov	r24, r22
     cb0:	97 2f       	mov	r25, r23
     cb2:	18 16       	cp	r1, r24
     cb4:	19 06       	cpc	r1, r25
     cb6:	84 f3       	brlt	.-32     	; 0xc98 <FUNCi16toa+0x1e>
	if (sign < 0)
     cb8:	dd 23       	and	r29, r29
     cba:	44 f4       	brge	.+16     	; 0xccc <FUNCi16toa+0x52>
		FUNCstr[i++] = '-';
     cbc:	e3 2f       	mov	r30, r19
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	e0 54       	subi	r30, 0x40	; 64
     cc2:	fe 4f       	sbci	r31, 0xFE	; 254
     cc4:	8d e2       	ldi	r24, 0x2D	; 45
     cc6:	80 83       	st	Z, r24
     cc8:	32 e0       	ldi	r19, 0x02	; 2
     cca:	32 0f       	add	r19, r18
	FUNCstr[i] = '\0';
     ccc:	e3 2f       	mov	r30, r19
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	e0 54       	subi	r30, 0x40	; 64
     cd2:	fe 4f       	sbci	r31, 0xFE	; 254
     cd4:	10 82       	st	Z, r1
	Reverse(FUNCstr);
     cd6:	80 ec       	ldi	r24, 0xC0	; 192
     cd8:	91 e0       	ldi	r25, 0x01	; 1
     cda:	58 df       	rcall	.-336    	; 0xb8c <Reverse>
	return FUNCstr;
}
     cdc:	80 ec       	ldi	r24, 0xC0	; 192
     cde:	91 e0       	ldi	r25, 0x01	; 1
     ce0:	df 91       	pop	r29
     ce2:	cf 91       	pop	r28
     ce4:	1f 91       	pop	r17
     ce6:	0f 91       	pop	r16
     ce8:	08 95       	ret

00000cea <FUNCui16toa>:
// ui16toa: convert n to characters in s
char* FUNCui16toa(uint16_t n)
{
     cea:	cf 93       	push	r28
     cec:	ac 01       	movw	r20, r24
	uint8_t i;
	i = 0;
     cee:	e0 e0       	ldi	r30, 0x00	; 0
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
     cf0:	c1 e0       	ldi	r28, 0x01	; 1
     cf2:	ce 0f       	add	r28, r30
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	e0 54       	subi	r30, 0x40	; 64
     cf8:	fe 4f       	sbci	r31, 0xFE	; 254
     cfa:	9a 01       	movw	r18, r20
     cfc:	ad ec       	ldi	r26, 0xCD	; 205
     cfe:	bc ec       	ldi	r27, 0xCC	; 204
     d00:	89 d6       	rcall	.+3346   	; 0x1a14 <__umulhisi3>
     d02:	96 95       	lsr	r25
     d04:	87 95       	ror	r24
     d06:	96 95       	lsr	r25
     d08:	87 95       	ror	r24
     d0a:	96 95       	lsr	r25
     d0c:	87 95       	ror	r24
     d0e:	9c 01       	movw	r18, r24
     d10:	22 0f       	add	r18, r18
     d12:	33 1f       	adc	r19, r19
     d14:	88 0f       	add	r24, r24
     d16:	99 1f       	adc	r25, r25
     d18:	88 0f       	add	r24, r24
     d1a:	99 1f       	adc	r25, r25
     d1c:	88 0f       	add	r24, r24
     d1e:	99 1f       	adc	r25, r25
     d20:	82 0f       	add	r24, r18
     d22:	93 1f       	adc	r25, r19
     d24:	9a 01       	movw	r18, r20
     d26:	28 1b       	sub	r18, r24
     d28:	39 0b       	sbc	r19, r25
     d2a:	c9 01       	movw	r24, r18
     d2c:	80 5d       	subi	r24, 0xD0	; 208
     d2e:	80 83       	st	Z, r24
	}while ((n /= 10) > 0); // delete it
     d30:	9a 01       	movw	r18, r20
     d32:	70 d6       	rcall	.+3296   	; 0x1a14 <__umulhisi3>
     d34:	ac 01       	movw	r20, r24
     d36:	56 95       	lsr	r21
     d38:	47 95       	ror	r20
     d3a:	56 95       	lsr	r21
     d3c:	47 95       	ror	r20
     d3e:	56 95       	lsr	r21
     d40:	47 95       	ror	r20
char* FUNCui16toa(uint16_t n)
{
	uint8_t i;
	i = 0;
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
     d42:	ec 2f       	mov	r30, r28
	}while ((n /= 10) > 0); // delete it
     d44:	41 15       	cp	r20, r1
     d46:	51 05       	cpc	r21, r1
     d48:	99 f6       	brne	.-90     	; 0xcf0 <FUNCui16toa+0x6>
	FUNCstr[i] = '\0';
     d4a:	ec 2f       	mov	r30, r28
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	e0 54       	subi	r30, 0x40	; 64
     d50:	fe 4f       	sbci	r31, 0xFE	; 254
     d52:	10 82       	st	Z, r1
	Reverse(FUNCstr);
     d54:	80 ec       	ldi	r24, 0xC0	; 192
     d56:	91 e0       	ldi	r25, 0x01	; 1
     d58:	19 df       	rcall	.-462    	; 0xb8c <Reverse>
	return FUNCstr;
}
     d5a:	80 ec       	ldi	r24, 0xC0	; 192
     d5c:	91 e0       	ldi	r25, 0x01	; 1
     d5e:	cf 91       	pop	r28
     d60:	08 95       	ret

00000d62 <FUNCbcd2bin>:
		s[j] = c;
	}
}
unsigned char FUNCbcd2bin(unsigned char val)
{
	return (val & 0x0f) + (val >> 4) * 10;
     d62:	98 2f       	mov	r25, r24
     d64:	92 95       	swap	r25
     d66:	9f 70       	andi	r25, 0x0F	; 15
     d68:	99 0f       	add	r25, r25
     d6a:	29 2f       	mov	r18, r25
     d6c:	22 0f       	add	r18, r18
     d6e:	22 0f       	add	r18, r18
     d70:	92 0f       	add	r25, r18
     d72:	8f 70       	andi	r24, 0x0F	; 15
}
     d74:	89 0f       	add	r24, r25
     d76:	08 95       	ret

00000d78 <FUNCbin2bcd>:
unsigned char FUNCbin2bcd(unsigned val)
{
     d78:	ac 01       	movw	r20, r24
	return ((val / 10) << 4) + val % 10;
     d7a:	9c 01       	movw	r18, r24
     d7c:	ad ec       	ldi	r26, 0xCD	; 205
     d7e:	bc ec       	ldi	r27, 0xCC	; 204
     d80:	49 d6       	rcall	.+3218   	; 0x1a14 <__umulhisi3>
     d82:	96 95       	lsr	r25
     d84:	87 95       	ror	r24
     d86:	96 95       	lsr	r25
     d88:	87 95       	ror	r24
     d8a:	96 95       	lsr	r25
     d8c:	87 95       	ror	r24
     d8e:	bc 01       	movw	r22, r24
     d90:	66 0f       	add	r22, r22
     d92:	77 1f       	adc	r23, r23
     d94:	9c 01       	movw	r18, r24
     d96:	22 0f       	add	r18, r18
     d98:	33 1f       	adc	r19, r19
     d9a:	22 0f       	add	r18, r18
     d9c:	33 1f       	adc	r19, r19
     d9e:	22 0f       	add	r18, r18
     da0:	33 1f       	adc	r19, r19
     da2:	26 0f       	add	r18, r22
     da4:	37 1f       	adc	r19, r23
     da6:	42 1b       	sub	r20, r18
     da8:	53 0b       	sbc	r21, r19
}
     daa:	34 2f       	mov	r19, r20
     dac:	20 e1       	ldi	r18, 0x10	; 16
     dae:	82 9f       	mul	r24, r18
     db0:	30 0d       	add	r19, r0
     db2:	11 24       	eor	r1, r1
     db4:	83 2f       	mov	r24, r19
     db6:	08 95       	ret

00000db8 <FUNCgcd1>:
long FUNCgcd1(long a, long b)
{
     db8:	cf 92       	push	r12
     dba:	df 92       	push	r13
     dbc:	ef 92       	push	r14
     dbe:	ff 92       	push	r15
     dc0:	cf 93       	push	r28
     dc2:	df 93       	push	r29
     dc4:	cd b7       	in	r28, 0x3d	; 61
     dc6:	de b7       	in	r29, 0x3e	; 62
     dc8:	28 97       	sbiw	r28, 0x08	; 8
     dca:	0f b6       	in	r0, 0x3f	; 63
     dcc:	f8 94       	cli
     dce:	de bf       	out	0x3e, r29	; 62
     dd0:	0f be       	out	0x3f, r0	; 63
     dd2:	cd bf       	out	0x3d, r28	; 61
     dd4:	6b 01       	movw	r12, r22
     dd6:	7c 01       	movw	r14, r24
     dd8:	69 83       	std	Y+1, r22	; 0x01
     dda:	7a 83       	std	Y+2, r23	; 0x02
     ddc:	8b 83       	std	Y+3, r24	; 0x03
     dde:	9c 83       	std	Y+4, r25	; 0x04
     de0:	2d 83       	std	Y+5, r18	; 0x05
     de2:	3e 83       	std	Y+6, r19	; 0x06
     de4:	4f 83       	std	Y+7, r20	; 0x07
     de6:	58 87       	std	Y+8, r21	; 0x08
	long r;
	if (a < b)
     de8:	c2 16       	cp	r12, r18
     dea:	d3 06       	cpc	r13, r19
     dec:	e4 06       	cpc	r14, r20
     dee:	f5 06       	cpc	r15, r21
     df0:	34 f4       	brge	.+12     	; 0xdfe <FUNCgcd1+0x46>
		FUNCswap(&a, &b);
     df2:	be 01       	movw	r22, r28
     df4:	6b 5f       	subi	r22, 0xFB	; 251
     df6:	7f 4f       	sbci	r23, 0xFF	; 255
     df8:	ce 01       	movw	r24, r28
     dfa:	01 96       	adiw	r24, 0x01	; 1
     dfc:	8c dc       	rcall	.-1768   	; 0x716 <FUNCswap>
	if (!b){
     dfe:	8d 81       	ldd	r24, Y+5	; 0x05
     e00:	9e 81       	ldd	r25, Y+6	; 0x06
     e02:	af 81       	ldd	r26, Y+7	; 0x07
     e04:	b8 85       	ldd	r27, Y+8	; 0x08
     e06:	89 2b       	or	r24, r25
     e08:	8a 2b       	or	r24, r26
     e0a:	8b 2b       	or	r24, r27
     e0c:	69 f4       	brne	.+26     	; 0xe28 <FUNCgcd1+0x70>
		while ((r = a % b) != 0) {
     e0e:	69 81       	ldd	r22, Y+1	; 0x01
     e10:	7a 81       	ldd	r23, Y+2	; 0x02
     e12:	8b 81       	ldd	r24, Y+3	; 0x03
     e14:	9c 81       	ldd	r25, Y+4	; 0x04
     e16:	20 e0       	ldi	r18, 0x00	; 0
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	a9 01       	movw	r20, r18
     e1c:	df d5       	rcall	.+3006   	; 0x19dc <__divmodsi4>
     e1e:	61 15       	cp	r22, r1
     e20:	71 05       	cpc	r23, r1
     e22:	81 05       	cpc	r24, r1
     e24:	91 05       	cpc	r25, r1
     e26:	29 f4       	brne	.+10     	; 0xe32 <FUNCgcd1+0x7a>
			a = b;
			b = r;
		}
	}	
	return b;
     e28:	6d 81       	ldd	r22, Y+5	; 0x05
     e2a:	7e 81       	ldd	r23, Y+6	; 0x06
     e2c:	8f 81       	ldd	r24, Y+7	; 0x07
     e2e:	98 85       	ldd	r25, Y+8	; 0x08
     e30:	05 c0       	rjmp	.+10     	; 0xe3c <FUNCgcd1+0x84>
	if (a < b)
		FUNCswap(&a, &b);
	if (!b){
		while ((r = a % b) != 0) {
			a = b;
			b = r;
     e32:	6d 83       	std	Y+5, r22	; 0x05
     e34:	7e 83       	std	Y+6, r23	; 0x06
     e36:	8f 83       	std	Y+7, r24	; 0x07
     e38:	98 87       	std	Y+8, r25	; 0x08
     e3a:	f6 cf       	rjmp	.-20     	; 0xe28 <FUNCgcd1+0x70>
		}
	}	
	return b;
}
     e3c:	28 96       	adiw	r28, 0x08	; 8
     e3e:	0f b6       	in	r0, 0x3f	; 63
     e40:	f8 94       	cli
     e42:	de bf       	out	0x3e, r29	; 62
     e44:	0f be       	out	0x3f, r0	; 63
     e46:	cd bf       	out	0x3d, r28	; 61
     e48:	df 91       	pop	r29
     e4a:	cf 91       	pop	r28
     e4c:	ff 90       	pop	r15
     e4e:	ef 90       	pop	r14
     e50:	df 90       	pop	r13
     e52:	cf 90       	pop	r12
     e54:	08 95       	ret

00000e56 <FUNCpincheck>:
	uint8_t lh;
	if(port & (1<<pin))
		lh=1;
	else
		lh=0;
	return lh;
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	02 c0       	rjmp	.+4      	; 0xe5e <FUNCpincheck+0x8>
     e5a:	95 95       	asr	r25
     e5c:	87 95       	ror	r24
     e5e:	6a 95       	dec	r22
     e60:	e2 f7       	brpl	.-8      	; 0xe5a <FUNCpincheck+0x4>
}
     e62:	81 70       	andi	r24, 0x01	; 1
     e64:	08 95       	ret

00000e66 <FUNCprint_binary>:
char* FUNCprint_binary(uint8_t number)
{
     e66:	e0 ec       	ldi	r30, 0xC0	; 192
     e68:	f1 e0       	ldi	r31, 0x01	; 1
	uint8_t i,c;
    for(i=128,c=0;i;i>>=1,c++){
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	20 e8       	ldi	r18, 0x80	; 128
	(number & i) ? (FUNCstr[c]='1') : (FUNCstr[c]='0');
     e6e:	50 e3       	ldi	r21, 0x30	; 48
     e70:	41 e3       	ldi	r20, 0x31	; 49
     e72:	38 2f       	mov	r19, r24
     e74:	32 23       	and	r19, r18
     e76:	11 f0       	breq	.+4      	; 0xe7c <FUNCprint_binary+0x16>
     e78:	40 83       	st	Z, r20
     e7a:	01 c0       	rjmp	.+2      	; 0xe7e <FUNCprint_binary+0x18>
     e7c:	50 83       	st	Z, r21
	return lh;
}
char* FUNCprint_binary(uint8_t number)
{
	uint8_t i,c;
    for(i=128,c=0;i;i>>=1,c++){
     e7e:	26 95       	lsr	r18
     e80:	9f 5f       	subi	r25, 0xFF	; 255
     e82:	31 96       	adiw	r30, 0x01	; 1
     e84:	98 30       	cpi	r25, 0x08	; 8
     e86:	a9 f7       	brne	.-22     	; 0xe72 <FUNCprint_binary+0xc>
	(number & i) ? (FUNCstr[c]='1') : (FUNCstr[c]='0');
	}
	FUNCstr[c]='\0';
     e88:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <FUNCstr+0x8>
	return FUNCstr;
}
     e8c:	80 ec       	ldi	r24, 0xC0	; 192
     e8e:	91 e0       	ldi	r25, 0x01	; 1
     e90:	08 95       	ret

00000e92 <FUNCmayia>:
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
     e92:	a4 2f       	mov	r26, r20
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	10 97       	sbiw	r26, 0x00	; 0
     e98:	61 f0       	breq	.+24     	; 0xeb2 <FUNCmayia+0x20>
     e9a:	21 e0       	ldi	r18, 0x01	; 1
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	e1 e0       	ldi	r30, 0x01	; 1
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
        p = p * bs;
     ea2:	ee 0f       	add	r30, r30
     ea4:	ff 1f       	adc	r31, r31
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
     ea6:	2f 5f       	subi	r18, 0xFF	; 255
     ea8:	3f 4f       	sbci	r19, 0xFF	; 255
     eaa:	a2 17       	cp	r26, r18
     eac:	b3 07       	cpc	r27, r19
     eae:	c8 f7       	brcc	.-14     	; 0xea2 <FUNCmayia+0x10>
     eb0:	02 c0       	rjmp	.+4      	; 0xeb6 <FUNCmayia+0x24>
}
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
     eb2:	e1 e0       	ldi	r30, 0x01	; 1
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
unsigned int FUNCmayia(unsigned int xi, unsigned int xf, uint8_t nbits)
{//magic formula
	unsigned int mask;
	unsigned int diff;
	unsigned int trans;
	mask=Pwr(2,nbits)-1;
     eb6:	31 97       	sbiw	r30, 0x01	; 1
	xi&=mask;
	xf&=mask;
     eb8:	6e 23       	and	r22, r30
     eba:	7f 23       	and	r23, r31
	diff=xf^xi;
     ebc:	8e 23       	and	r24, r30
     ebe:	9f 23       	and	r25, r31
     ec0:	86 27       	eor	r24, r22
     ec2:	97 27       	eor	r25, r23
	trans=diff&xf;
	return (trans<<nbits)|diff;
     ec4:	68 23       	and	r22, r24
     ec6:	79 23       	and	r23, r25
     ec8:	02 c0       	rjmp	.+4      	; 0xece <FUNCmayia+0x3c>
     eca:	66 0f       	add	r22, r22
     ecc:	77 1f       	adc	r23, r23
     ece:	4a 95       	dec	r20
     ed0:	e2 f7       	brpl	.-8      	; 0xeca <FUNCmayia+0x38>
}
     ed2:	86 2b       	or	r24, r22
     ed4:	97 2b       	or	r25, r23
     ed6:	08 95       	ret

00000ed8 <FUNCenable>:
// uint8_t TRANupdate(struct TRAN *tr, uint8_t idata);
/*
** procedure and function
*/
FUNC FUNCenable( void )
{
     ed8:	fc 01       	movw	r30, r24
	uint8_t tSREG;
	tSREG=SREG;
     eda:	9f b7       	in	r25, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
     edc:	8f b7       	in	r24, 0x3f	; 63
     ede:	8f 77       	andi	r24, 0x7F	; 127
     ee0:	8f bf       	out	0x3f, r24	; 63
	func.putstr=FUNCputstr;
	func.getnum=FUNCgetnum;
	func.getnumv2=FUNCgetnumv2;
	func.readint=FUNCreadint;
	*/
	SREG=tSREG;
     ee2:	9f bf       	out	0x3f, r25	; 63
	/******/
	return func;
     ee4:	81 e8       	ldi	r24, 0x81	; 129
     ee6:	95 e0       	ldi	r25, 0x05	; 5
     ee8:	91 83       	std	Z+1, r25	; 0x01
     eea:	80 83       	st	Z, r24
     eec:	8c e9       	ldi	r24, 0x9C	; 156
     eee:	95 e0       	ldi	r25, 0x05	; 5
     ef0:	93 83       	std	Z+3, r25	; 0x03
     ef2:	82 83       	std	Z+2, r24	; 0x02
     ef4:	86 ec       	ldi	r24, 0xC6	; 198
     ef6:	95 e0       	ldi	r25, 0x05	; 5
     ef8:	95 83       	std	Z+5, r25	; 0x05
     efa:	84 83       	std	Z+4, r24	; 0x04
     efc:	89 e4       	ldi	r24, 0x49	; 73
     efe:	97 e0       	ldi	r25, 0x07	; 7
     f00:	97 83       	std	Z+7, r25	; 0x07
     f02:	86 83       	std	Z+6, r24	; 0x06
     f04:	80 e7       	ldi	r24, 0x70	; 112
     f06:	93 e0       	ldi	r25, 0x03	; 3
     f08:	91 87       	std	Z+9, r25	; 0x09
     f0a:	80 87       	std	Z+8, r24	; 0x08
     f0c:	8e e7       	ldi	r24, 0x7E	; 126
     f0e:	93 e0       	ldi	r25, 0x03	; 3
     f10:	93 87       	std	Z+11, r25	; 0x0b
     f12:	82 87       	std	Z+10, r24	; 0x0a
     f14:	80 e8       	ldi	r24, 0x80	; 128
     f16:	93 e0       	ldi	r25, 0x03	; 3
     f18:	95 87       	std	Z+13, r25	; 0x0d
     f1a:	84 87       	std	Z+12, r24	; 0x0c
     f1c:	83 e8       	ldi	r24, 0x83	; 131
     f1e:	93 e0       	ldi	r25, 0x03	; 3
     f20:	97 87       	std	Z+15, r25	; 0x0f
     f22:	86 87       	std	Z+14, r24	; 0x0e
     f24:	86 e8       	ldi	r24, 0x86	; 134
     f26:	93 e0       	ldi	r25, 0x03	; 3
     f28:	91 8b       	std	Z+17, r25	; 0x11
     f2a:	80 8b       	std	Z+16, r24	; 0x10
     f2c:	89 e8       	ldi	r24, 0x89	; 137
     f2e:	93 e0       	ldi	r25, 0x03	; 3
     f30:	93 8b       	std	Z+19, r25	; 0x13
     f32:	82 8b       	std	Z+18, r24	; 0x12
     f34:	8a e7       	ldi	r24, 0x7A	; 122
     f36:	93 e0       	ldi	r25, 0x03	; 3
     f38:	95 8b       	std	Z+21, r25	; 0x15
     f3a:	84 8b       	std	Z+20, r24	; 0x14
     f3c:	8c e7       	ldi	r24, 0x7C	; 124
     f3e:	93 e0       	ldi	r25, 0x03	; 3
     f40:	97 8b       	std	Z+23, r25	; 0x17
     f42:	86 8b       	std	Z+22, r24	; 0x16
     f44:	8b e8       	ldi	r24, 0x8B	; 139
     f46:	93 e0       	ldi	r25, 0x03	; 3
     f48:	91 8f       	std	Z+25, r25	; 0x19
     f4a:	80 8f       	std	Z+24, r24	; 0x18
     f4c:	8c ea       	ldi	r24, 0xAC	; 172
     f4e:	93 e0       	ldi	r25, 0x03	; 3
     f50:	93 8f       	std	Z+27, r25	; 0x1b
     f52:	82 8f       	std	Z+26, r24	; 0x1a
     f54:	8a eb       	ldi	r24, 0xBA	; 186
     f56:	93 e0       	ldi	r25, 0x03	; 3
     f58:	95 8f       	std	Z+29, r25	; 0x1d
     f5a:	84 8f       	std	Z+28, r24	; 0x1c
     f5c:	8c ed       	ldi	r24, 0xDC	; 220
     f5e:	93 e0       	ldi	r25, 0x03	; 3
     f60:	97 8f       	std	Z+31, r25	; 0x1f
     f62:	86 8f       	std	Z+30, r24	; 0x1e
     f64:	8d e3       	ldi	r24, 0x3D	; 61
     f66:	96 e0       	ldi	r25, 0x06	; 6
     f68:	91 a3       	std	Z+33, r25	; 0x21
     f6a:	80 a3       	std	Z+32, r24	; 0x20
     f6c:	85 e7       	ldi	r24, 0x75	; 117
     f6e:	96 e0       	ldi	r25, 0x06	; 6
     f70:	93 a3       	std	Z+35, r25	; 0x23
     f72:	82 a3       	std	Z+34, r24	; 0x22
     f74:	83 ee       	ldi	r24, 0xE3	; 227
     f76:	95 e0       	ldi	r25, 0x05	; 5
     f78:	95 a3       	std	Z+37, r25	; 0x25
     f7a:	84 a3       	std	Z+36, r24	; 0x24
     f7c:	8b ea       	ldi	r24, 0xAB	; 171
     f7e:	95 e0       	ldi	r25, 0x05	; 5
     f80:	97 a3       	std	Z+39, r25	; 0x27
     f82:	86 a3       	std	Z+38, r24	; 0x26
     f84:	82 e8       	ldi	r24, 0x82	; 130
     f86:	94 e0       	ldi	r25, 0x04	; 4
     f88:	91 a7       	std	Z+41, r25	; 0x29
     f8a:	80 a7       	std	Z+40, r24	; 0x28
     f8c:	87 e8       	ldi	r24, 0x87	; 135
     f8e:	94 e0       	ldi	r25, 0x04	; 4
     f90:	93 a7       	std	Z+43, r25	; 0x2b
     f92:	82 a7       	std	Z+42, r24	; 0x2a
     f94:	86 e9       	ldi	r24, 0x96	; 150
     f96:	94 e0       	ldi	r25, 0x04	; 4
     f98:	95 a7       	std	Z+45, r25	; 0x2d
     f9a:	84 a7       	std	Z+44, r24	; 0x2c
     f9c:	8a eb       	ldi	r24, 0xBA	; 186
     f9e:	94 e0       	ldi	r25, 0x04	; 4
     fa0:	97 a7       	std	Z+47, r25	; 0x2f
     fa2:	86 a7       	std	Z+46, r24	; 0x2e
     fa4:	8c eb       	ldi	r24, 0xBC	; 188
     fa6:	94 e0       	ldi	r25, 0x04	; 4
     fa8:	91 ab       	std	Z+49, r25	; 0x31
     faa:	80 ab       	std	Z+48, r24	; 0x30
     fac:	86 ec       	ldi	r24, 0xC6	; 198
     fae:	94 e0       	ldi	r25, 0x04	; 4
     fb0:	93 ab       	std	Z+51, r25	; 0x33
     fb2:	82 ab       	std	Z+50, r24	; 0x32
     fb4:	83 ed       	ldi	r24, 0xD3	; 211
     fb6:	94 e0       	ldi	r25, 0x04	; 4
     fb8:	95 ab       	std	Z+53, r25	; 0x35
     fba:	84 ab       	std	Z+52, r24	; 0x34
     fbc:	8f ed       	ldi	r24, 0xDF	; 223
     fbe:	94 e0       	ldi	r25, 0x04	; 4
     fc0:	97 ab       	std	Z+55, r25	; 0x37
     fc2:	86 ab       	std	Z+54, r24	; 0x36
     fc4:	87 ef       	ldi	r24, 0xF7	; 247
     fc6:	94 e0       	ldi	r25, 0x04	; 4
     fc8:	91 af       	std	Z+57, r25	; 0x39
     fca:	80 af       	std	Z+56, r24	; 0x38
     fcc:	8a e0       	ldi	r24, 0x0A	; 10
     fce:	95 e0       	ldi	r25, 0x05	; 5
     fd0:	93 af       	std	Z+59, r25	; 0x3b
     fd2:	82 af       	std	Z+58, r24	; 0x3a
     fd4:	85 e1       	ldi	r24, 0x15	; 21
     fd6:	95 e0       	ldi	r25, 0x05	; 5
     fd8:	95 af       	std	Z+61, r25	; 0x3d
     fda:	84 af       	std	Z+60, r24	; 0x3c
     fdc:	82 e4       	ldi	r24, 0x42	; 66
     fde:	95 e0       	ldi	r25, 0x05	; 5
     fe0:	97 af       	std	Z+63, r25	; 0x3f
     fe2:	86 af       	std	Z+62, r24	; 0x3e
     fe4:	df 01       	movw	r26, r30
     fe6:	a0 5c       	subi	r26, 0xC0	; 192
     fe8:	bf 4f       	sbci	r27, 0xFF	; 255
     fea:	81 eb       	ldi	r24, 0xB1	; 177
     fec:	96 e0       	ldi	r25, 0x06	; 6
     fee:	11 96       	adiw	r26, 0x01	; 1
     ff0:	9c 93       	st	X, r25
     ff2:	8e 93       	st	-X, r24
     ff4:	12 96       	adiw	r26, 0x02	; 2
     ff6:	8c eb       	ldi	r24, 0xBC	; 188
     ff8:	96 e0       	ldi	r25, 0x06	; 6
     ffa:	11 96       	adiw	r26, 0x01	; 1
     ffc:	9c 93       	st	X, r25
     ffe:	8e 93       	st	-X, r24
    1000:	12 96       	adiw	r26, 0x02	; 2
    1002:	8c ed       	ldi	r24, 0xDC	; 220
    1004:	96 e0       	ldi	r25, 0x06	; 6
    1006:	11 96       	adiw	r26, 0x01	; 1
    1008:	9c 93       	st	X, r25
    100a:	8e 93       	st	-X, r24
    100c:	12 96       	adiw	r26, 0x02	; 2
    100e:	8b e2       	ldi	r24, 0x2B	; 43
    1010:	97 e0       	ldi	r25, 0x07	; 7
    1012:	11 96       	adiw	r26, 0x01	; 1
    1014:	9c 93       	st	X, r25
    1016:	8e 93       	st	-X, r24
    1018:	12 96       	adiw	r26, 0x02	; 2
    101a:	83 e3       	ldi	r24, 0x33	; 51
    101c:	97 e0       	ldi	r25, 0x07	; 7
    101e:	8d 93       	st	X+, r24
    1020:	9c 93       	st	X, r25
}
    1022:	cf 01       	movw	r24, r30
    1024:	08 95       	ret

00001026 <I2C_Init>:
 * Return value	: none
 * description :This function is used to initialize the I2C module
****************************************************************************************************/
void I2C_Init(uint8_t prescaler)
{
  I2C_DDR|=I2C_IO_MASK;
    1026:	91 b3       	in	r25, 0x11	; 17
    1028:	93 60       	ori	r25, 0x03	; 3
    102a:	91 bb       	out	0x11, r25	; 17
  I2C_PORT|=I2C_IO_MASK;
    102c:	92 b3       	in	r25, 0x12	; 18
    102e:	93 60       	ori	r25, 0x03	; 3
    1030:	92 bb       	out	0x12, r25	; 18
  switch(prescaler){
    1032:	84 30       	cpi	r24, 0x04	; 4
    1034:	79 f0       	breq	.+30     	; 0x1054 <I2C_Init+0x2e>
    1036:	18 f4       	brcc	.+6      	; 0x103e <I2C_Init+0x18>
    1038:	81 30       	cpi	r24, 0x01	; 1
    103a:	31 f0       	breq	.+12     	; 0x1048 <I2C_Init+0x22>
    103c:	1d c0       	rjmp	.+58     	; 0x1078 <I2C_Init+0x52>
    103e:	80 31       	cpi	r24, 0x10	; 16
    1040:	79 f0       	breq	.+30     	; 0x1060 <I2C_Init+0x3a>
    1042:	80 34       	cpi	r24, 0x40	; 64
    1044:	99 f0       	breq	.+38     	; 0x106c <I2C_Init+0x46>
    1046:	18 c0       	rjmp	.+48     	; 0x1078 <I2C_Init+0x52>
	case 1:
		TWI_STATUS_REGISTER &= ~TWI_PRESCALER_MASK;
    1048:	e1 e7       	ldi	r30, 0x71	; 113
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	90 81       	ld	r25, Z
    104e:	9c 7f       	andi	r25, 0xFC	; 252
    1050:	90 83       	st	Z, r25
		break;
    1052:	18 c0       	rjmp	.+48     	; 0x1084 <I2C_Init+0x5e>
	case 4:
		TWI_STATUS_REGISTER |= (1<<TWPS0);
    1054:	e1 e7       	ldi	r30, 0x71	; 113
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	90 81       	ld	r25, Z
    105a:	91 60       	ori	r25, 0x01	; 1
    105c:	90 83       	st	Z, r25
		break;
    105e:	12 c0       	rjmp	.+36     	; 0x1084 <I2C_Init+0x5e>
	case 16:
		TWI_STATUS_REGISTER |= (2<<TWPS0);
    1060:	e1 e7       	ldi	r30, 0x71	; 113
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	90 81       	ld	r25, Z
    1066:	92 60       	ori	r25, 0x02	; 2
    1068:	90 83       	st	Z, r25
		break;
    106a:	0c c0       	rjmp	.+24     	; 0x1084 <I2C_Init+0x5e>
	case 64:
		TWI_STATUS_REGISTER |= (3<<TWPS0);
    106c:	e1 e7       	ldi	r30, 0x71	; 113
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	90 81       	ld	r25, Z
    1072:	93 60       	ori	r25, 0x03	; 3
    1074:	90 83       	st	Z, r25
		break;
    1076:	06 c0       	rjmp	.+12     	; 0x1084 <I2C_Init+0x5e>
	default:
		prescaler=1;
		TWI_STATUS_REGISTER &= ~TWI_PRESCALER_MASK;
    1078:	e1 e7       	ldi	r30, 0x71	; 113
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	8c 7f       	andi	r24, 0xFC	; 252
    1080:	80 83       	st	Z, r24
		break;
	case 64:
		TWI_STATUS_REGISTER |= (3<<TWPS0);
		break;
	default:
		prescaler=1;
    1082:	81 e0       	ldi	r24, 0x01	; 1
		TWI_STATUS_REGISTER &= ~TWI_PRESCALER_MASK;
	break;
  }
  TWI_BIT_RATE_REGISTER = ((F_CPU/I2C_SCL_CLOCK)-16)/(2*prescaler);
    1084:	28 2f       	mov	r18, r24
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	22 0f       	add	r18, r18
    108a:	33 1f       	adc	r19, r19
    108c:	03 2e       	mov	r0, r19
    108e:	00 0c       	add	r0, r0
    1090:	44 0b       	sbc	r20, r20
    1092:	55 0b       	sbc	r21, r21
    1094:	60 e9       	ldi	r22, 0x90	; 144
    1096:	70 e0       	ldi	r23, 0x00	; 0
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	7d d4       	rcall	.+2298   	; 0x1998 <__udivmodsi4>
    109e:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    10a2:	08 95       	ret

000010a4 <I2C_Start>:
                      ____|         |____________

***************************************************************************************************/
void I2C_Start()
{
  TWI_CONTROL_REGISTER = ((1<<TWINT) | (1<<TWSTA) | (1<<TWEN));
    10a4:	e4 e7       	ldi	r30, 0x74	; 116
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	84 ea       	ldi	r24, 0xA4	; 164
    10aa:	80 83       	st	Z, r24
  for (ticks=Nticks; !(TWI_CONTROL_REGISTER & (1<<TWINT)) && ticks; ticks--);
    10ac:	8f ef       	ldi	r24, 0xFF	; 255
    10ae:	93 e0       	ldi	r25, 0x03	; 3
    10b0:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <ticks+0x1>
    10b4:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <ticks>
    10b8:	80 81       	ld	r24, Z
    10ba:	88 23       	and	r24, r24
    10bc:	5c f0       	brlt	.+22     	; 0x10d4 <I2C_Start+0x30>
    10be:	8e ef       	ldi	r24, 0xFE	; 254
    10c0:	93 e0       	ldi	r25, 0x03	; 3
    10c2:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <ticks+0x1>
    10c6:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <ticks>
    10ca:	20 81       	ld	r18, Z
    10cc:	22 23       	and	r18, r18
    10ce:	14 f0       	brlt	.+4      	; 0x10d4 <I2C_Start+0x30>
    10d0:	01 97       	sbiw	r24, 0x01	; 1
    10d2:	b8 f7       	brcc	.-18     	; 0x10c2 <I2C_Start+0x1e>
    10d4:	08 95       	ret

000010d6 <I2C_Stop>:
                      __________|

***************************************************************************************************/
void I2C_Stop(void)
{
  TWI_CONTROL_REGISTER = ((1<< TWINT) | (1<<TWEN) | (1<<TWSTO));
    10d6:	84 e9       	ldi	r24, 0x94	; 148
    10d8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10dc:	8f e8       	ldi	r24, 0x8F	; 143
    10de:	91 e0       	ldi	r25, 0x01	; 1
    10e0:	01 97       	sbiw	r24, 0x01	; 1
    10e2:	f1 f7       	brne	.-4      	; 0x10e0 <I2C_Stop+0xa>
    10e4:	00 c0       	rjmp	.+0      	; 0x10e6 <I2C_Stop+0x10>
    10e6:	00 00       	nop
    10e8:	08 95       	ret

000010ea <I2C_Write>:
 SDA:    D8       D7     D6      D5      D4       D3      D2      D1      D0     ACK

***************************************************************************************************/
void I2C_Write(uint8_t var_i2cData_u8)
{
  TWI_DATA_REGISTER = var_i2cData_u8 ;
    10ea:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
  TWI_CONTROL_REGISTER = ((1<< TWINT) | (1<<TWEN));
    10ee:	e4 e7       	ldi	r30, 0x74	; 116
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	84 e8       	ldi	r24, 0x84	; 132
    10f4:	80 83       	st	Z, r24
  for (ticks=Nticks; !(TWI_CONTROL_REGISTER & (1 <<TWINT)) && ticks; ticks--);
    10f6:	8f ef       	ldi	r24, 0xFF	; 255
    10f8:	93 e0       	ldi	r25, 0x03	; 3
    10fa:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <ticks+0x1>
    10fe:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <ticks>
    1102:	80 81       	ld	r24, Z
    1104:	88 23       	and	r24, r24
    1106:	5c f0       	brlt	.+22     	; 0x111e <__stack+0x1f>
    1108:	8e ef       	ldi	r24, 0xFE	; 254
    110a:	93 e0       	ldi	r25, 0x03	; 3
    110c:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <ticks+0x1>
    1110:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <ticks>
    1114:	20 81       	ld	r18, Z
    1116:	22 23       	and	r18, r18
    1118:	14 f0       	brlt	.+4      	; 0x111e <__stack+0x1f>
    111a:	01 97       	sbiw	r24, 0x01	; 1
    111c:	b8 f7       	brcc	.-18     	; 0x110c <__stack+0xd>
    111e:	08 95       	ret

00001120 <I2C_Read>:
 SDA:    D8       D7     D6      D5       D4     D3       D2      D1     D0      ACK

***************************************************************************************************/
uint8_t I2C_Read(uint8_t var_ackOption_u8)
{
 TWI_CONTROL_REGISTER = ((1<< TWINT) | (1<<TWEN) | (var_ackOption_u8<<TWEA));
    1120:	20 e4       	ldi	r18, 0x40	; 64
    1122:	82 9f       	mul	r24, r18
    1124:	c0 01       	movw	r24, r0
    1126:	11 24       	eor	r1, r1
    1128:	84 68       	ori	r24, 0x84	; 132
    112a:	e4 e7       	ldi	r30, 0x74	; 116
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 83       	st	Z, r24
   for (ticks=Nticks; !(TWI_CONTROL_REGISTER & (1 <<TWINT)) && ticks; ticks--);
    1130:	8f ef       	ldi	r24, 0xFF	; 255
    1132:	93 e0       	ldi	r25, 0x03	; 3
    1134:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <ticks+0x1>
    1138:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <ticks>
    113c:	80 81       	ld	r24, Z
    113e:	88 23       	and	r24, r24
    1140:	5c f0       	brlt	.+22     	; 0x1158 <I2C_Read+0x38>
    1142:	8e ef       	ldi	r24, 0xFE	; 254
    1144:	93 e0       	ldi	r25, 0x03	; 3
    1146:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <ticks+0x1>
    114a:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <ticks>
    114e:	20 81       	ld	r18, Z
    1150:	22 23       	and	r18, r18
    1152:	14 f0       	brlt	.+4      	; 0x1158 <I2C_Read+0x38>
    1154:	01 97       	sbiw	r24, 0x01	; 1
    1156:	b8 f7       	brcc	.-18     	; 0x1146 <I2C_Read+0x26>
   return TWI_DATA_REGISTER;
    1158:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
}
    115c:	08 95       	ret

0000115e <LCD0_write>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    115e:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <lcd0_PORT>
    1162:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <lcd0_PORT+0x1>
    1166:	90 81       	ld	r25, Z
    1168:	9d 7f       	andi	r25, 0xFD	; 253
    116a:	90 83       	st	Z, r25
    116c:	67 2b       	or	r22, r23
    116e:	41 f0       	breq	.+16     	; 0x1180 <LCD0_write+0x22>
    1170:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <lcd0_PORT>
    1174:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <lcd0_PORT+0x1>
    1178:	90 81       	ld	r25, Z
    117a:	91 60       	ori	r25, 0x01	; 1
    117c:	90 83       	st	Z, r25
    117e:	07 c0       	rjmp	.+14     	; 0x118e <LCD0_write+0x30>
    1180:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <lcd0_PORT>
    1184:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <lcd0_PORT+0x1>
    1188:	90 81       	ld	r25, Z
    118a:	9e 7f       	andi	r25, 0xFE	; 254
    118c:	90 83       	st	Z, r25
    118e:	e0 91 dd 01 	lds	r30, 0x01DD	; 0x8001dd <lcd0_DDR>
    1192:	f0 91 de 01 	lds	r31, 0x01DE	; 0x8001de <lcd0_DDR+0x1>
    1196:	90 81       	ld	r25, Z
    1198:	90 6f       	ori	r25, 0xF0	; 240
    119a:	90 83       	st	Z, r25
    119c:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <lcd0_PORT>
    11a0:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <lcd0_PORT+0x1>
    11a4:	90 81       	ld	r25, Z
    11a6:	94 60       	ori	r25, 0x04	; 4
    11a8:	90 83       	st	Z, r25
    11aa:	88 23       	and	r24, r24
    11ac:	44 f4       	brge	.+16     	; 0x11be <LCD0_write+0x60>
    11ae:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <lcd0_PORT>
    11b2:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <lcd0_PORT+0x1>
    11b6:	90 81       	ld	r25, Z
    11b8:	90 68       	ori	r25, 0x80	; 128
    11ba:	90 83       	st	Z, r25
    11bc:	07 c0       	rjmp	.+14     	; 0x11cc <LCD0_write+0x6e>
    11be:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <lcd0_PORT>
    11c2:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <lcd0_PORT+0x1>
    11c6:	90 81       	ld	r25, Z
    11c8:	9f 77       	andi	r25, 0x7F	; 127
    11ca:	90 83       	st	Z, r25
    11cc:	86 ff       	sbrs	r24, 6
    11ce:	08 c0       	rjmp	.+16     	; 0x11e0 <LCD0_write+0x82>
    11d0:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <lcd0_PORT>
    11d4:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <lcd0_PORT+0x1>
    11d8:	90 81       	ld	r25, Z
    11da:	90 64       	ori	r25, 0x40	; 64
    11dc:	90 83       	st	Z, r25
    11de:	07 c0       	rjmp	.+14     	; 0x11ee <LCD0_write+0x90>
    11e0:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <lcd0_PORT>
    11e4:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <lcd0_PORT+0x1>
    11e8:	90 81       	ld	r25, Z
    11ea:	9f 7b       	andi	r25, 0xBF	; 191
    11ec:	90 83       	st	Z, r25
    11ee:	85 ff       	sbrs	r24, 5
    11f0:	08 c0       	rjmp	.+16     	; 0x1202 <LCD0_write+0xa4>
    11f2:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <lcd0_PORT>
    11f6:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <lcd0_PORT+0x1>
    11fa:	90 81       	ld	r25, Z
    11fc:	90 62       	ori	r25, 0x20	; 32
    11fe:	90 83       	st	Z, r25
    1200:	07 c0       	rjmp	.+14     	; 0x1210 <LCD0_write+0xb2>
    1202:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <lcd0_PORT>
    1206:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <lcd0_PORT+0x1>
    120a:	90 81       	ld	r25, Z
    120c:	9f 7d       	andi	r25, 0xDF	; 223
    120e:	90 83       	st	Z, r25
    1210:	84 ff       	sbrs	r24, 4
    1212:	08 c0       	rjmp	.+16     	; 0x1224 <LCD0_write+0xc6>
    1214:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <lcd0_PORT>
    1218:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <lcd0_PORT+0x1>
    121c:	90 81       	ld	r25, Z
    121e:	90 61       	ori	r25, 0x10	; 16
    1220:	90 83       	st	Z, r25
    1222:	07 c0       	rjmp	.+14     	; 0x1232 <LCD0_write+0xd4>
    1224:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <lcd0_PORT>
    1228:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <lcd0_PORT+0x1>
    122c:	90 81       	ld	r25, Z
    122e:	9f 7e       	andi	r25, 0xEF	; 239
    1230:	90 83       	st	Z, r25
    1232:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <lcd0_PORT>
    1236:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <lcd0_PORT+0x1>
    123a:	90 81       	ld	r25, Z
    123c:	9b 7f       	andi	r25, 0xFB	; 251
    123e:	90 83       	st	Z, r25
    1240:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <lcd0_PORT>
    1244:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <lcd0_PORT+0x1>
    1248:	90 81       	ld	r25, Z
    124a:	94 60       	ori	r25, 0x04	; 4
    124c:	90 83       	st	Z, r25
    124e:	83 ff       	sbrs	r24, 3
    1250:	08 c0       	rjmp	.+16     	; 0x1262 <LCD0_write+0x104>
    1252:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <lcd0_PORT>
    1256:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <lcd0_PORT+0x1>
    125a:	90 81       	ld	r25, Z
    125c:	90 68       	ori	r25, 0x80	; 128
    125e:	90 83       	st	Z, r25
    1260:	07 c0       	rjmp	.+14     	; 0x1270 <LCD0_write+0x112>
    1262:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <lcd0_PORT>
    1266:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <lcd0_PORT+0x1>
    126a:	90 81       	ld	r25, Z
    126c:	9f 77       	andi	r25, 0x7F	; 127
    126e:	90 83       	st	Z, r25
    1270:	82 ff       	sbrs	r24, 2
    1272:	08 c0       	rjmp	.+16     	; 0x1284 <LCD0_write+0x126>
    1274:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <lcd0_PORT>
    1278:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <lcd0_PORT+0x1>
    127c:	90 81       	ld	r25, Z
    127e:	90 64       	ori	r25, 0x40	; 64
    1280:	90 83       	st	Z, r25
    1282:	07 c0       	rjmp	.+14     	; 0x1292 <LCD0_write+0x134>
    1284:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <lcd0_PORT>
    1288:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <lcd0_PORT+0x1>
    128c:	90 81       	ld	r25, Z
    128e:	9f 7b       	andi	r25, 0xBF	; 191
    1290:	90 83       	st	Z, r25
    1292:	81 ff       	sbrs	r24, 1
    1294:	08 c0       	rjmp	.+16     	; 0x12a6 <LCD0_write+0x148>
    1296:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <lcd0_PORT>
    129a:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <lcd0_PORT+0x1>
    129e:	90 81       	ld	r25, Z
    12a0:	90 62       	ori	r25, 0x20	; 32
    12a2:	90 83       	st	Z, r25
    12a4:	07 c0       	rjmp	.+14     	; 0x12b4 <LCD0_write+0x156>
    12a6:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <lcd0_PORT>
    12aa:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <lcd0_PORT+0x1>
    12ae:	90 81       	ld	r25, Z
    12b0:	9f 7d       	andi	r25, 0xDF	; 223
    12b2:	90 83       	st	Z, r25
    12b4:	80 ff       	sbrs	r24, 0
    12b6:	08 c0       	rjmp	.+16     	; 0x12c8 <LCD0_write+0x16a>
    12b8:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <lcd0_PORT>
    12bc:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <lcd0_PORT+0x1>
    12c0:	80 81       	ld	r24, Z
    12c2:	80 61       	ori	r24, 0x10	; 16
    12c4:	80 83       	st	Z, r24
    12c6:	07 c0       	rjmp	.+14     	; 0x12d6 <LCD0_write+0x178>
    12c8:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <lcd0_PORT>
    12cc:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <lcd0_PORT+0x1>
    12d0:	80 81       	ld	r24, Z
    12d2:	8f 7e       	andi	r24, 0xEF	; 239
    12d4:	80 83       	st	Z, r24
    12d6:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <lcd0_PORT>
    12da:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <lcd0_PORT+0x1>
    12de:	80 81       	ld	r24, Z
    12e0:	8b 7f       	andi	r24, 0xFB	; 251
    12e2:	80 83       	st	Z, r24
    12e4:	08 95       	ret

000012e6 <LCD0_read>:
    12e6:	e0 91 dd 01 	lds	r30, 0x01DD	; 0x8001dd <lcd0_DDR>
    12ea:	f0 91 de 01 	lds	r31, 0x01DE	; 0x8001de <lcd0_DDR+0x1>
    12ee:	20 81       	ld	r18, Z
    12f0:	2f 70       	andi	r18, 0x0F	; 15
    12f2:	20 83       	st	Z, r18
    12f4:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <lcd0_PORT>
    12f8:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <lcd0_PORT+0x1>
    12fc:	20 81       	ld	r18, Z
    12fe:	20 6f       	ori	r18, 0xF0	; 240
    1300:	20 83       	st	Z, r18
    1302:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <lcd0_PORT>
    1306:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <lcd0_PORT+0x1>
    130a:	20 81       	ld	r18, Z
    130c:	22 60       	ori	r18, 0x02	; 2
    130e:	20 83       	st	Z, r18
    1310:	89 2b       	or	r24, r25
    1312:	41 f0       	breq	.+16     	; 0x1324 <LCD0_read+0x3e>
    1314:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <lcd0_PORT>
    1318:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <lcd0_PORT+0x1>
    131c:	80 81       	ld	r24, Z
    131e:	81 60       	ori	r24, 0x01	; 1
    1320:	80 83       	st	Z, r24
    1322:	07 c0       	rjmp	.+14     	; 0x1332 <LCD0_read+0x4c>
    1324:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <lcd0_PORT>
    1328:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <lcd0_PORT+0x1>
    132c:	80 81       	ld	r24, Z
    132e:	8e 7f       	andi	r24, 0xFE	; 254
    1330:	80 83       	st	Z, r24
    1332:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <lcd0_PORT>
    1336:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <lcd0_PORT+0x1>
    133a:	80 81       	ld	r24, Z
    133c:	84 60       	ori	r24, 0x04	; 4
    133e:	80 83       	st	Z, r24
    1340:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <lcd0_PIN>
    1344:	f0 91 d7 01 	lds	r31, 0x01D7	; 0x8001d7 <lcd0_PIN+0x1>
    1348:	80 81       	ld	r24, Z
    134a:	88 23       	and	r24, r24
    134c:	14 f0       	brlt	.+4      	; 0x1352 <LCD0_read+0x6c>
    134e:	80 e0       	ldi	r24, 0x00	; 0
    1350:	01 c0       	rjmp	.+2      	; 0x1354 <LCD0_read+0x6e>
    1352:	80 e8       	ldi	r24, 0x80	; 128
    1354:	90 81       	ld	r25, Z
    1356:	96 ff       	sbrs	r25, 6
    1358:	02 c0       	rjmp	.+4      	; 0x135e <LCD0_read+0x78>
    135a:	80 64       	ori	r24, 0x40	; 64
    135c:	01 c0       	rjmp	.+2      	; 0x1360 <LCD0_read+0x7a>
    135e:	8f 7b       	andi	r24, 0xBF	; 191
    1360:	90 81       	ld	r25, Z
    1362:	95 ff       	sbrs	r25, 5
    1364:	02 c0       	rjmp	.+4      	; 0x136a <LCD0_read+0x84>
    1366:	80 62       	ori	r24, 0x20	; 32
    1368:	01 c0       	rjmp	.+2      	; 0x136c <LCD0_read+0x86>
    136a:	8f 7d       	andi	r24, 0xDF	; 223
    136c:	90 81       	ld	r25, Z
    136e:	94 ff       	sbrs	r25, 4
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <LCD0_read+0x90>
    1372:	80 61       	ori	r24, 0x10	; 16
    1374:	01 c0       	rjmp	.+2      	; 0x1378 <LCD0_read+0x92>
    1376:	8f 7e       	andi	r24, 0xEF	; 239
    1378:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <lcd0_PORT>
    137c:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <lcd0_PORT+0x1>
    1380:	90 81       	ld	r25, Z
    1382:	9b 7f       	andi	r25, 0xFB	; 251
    1384:	90 83       	st	Z, r25
    1386:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <lcd0_PORT>
    138a:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <lcd0_PORT+0x1>
    138e:	90 81       	ld	r25, Z
    1390:	94 60       	ori	r25, 0x04	; 4
    1392:	90 83       	st	Z, r25
    1394:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <lcd0_PIN>
    1398:	f0 91 d7 01 	lds	r31, 0x01D7	; 0x8001d7 <lcd0_PIN+0x1>
    139c:	90 81       	ld	r25, Z
    139e:	99 23       	and	r25, r25
    13a0:	14 f4       	brge	.+4      	; 0x13a6 <LCD0_read+0xc0>
    13a2:	88 60       	ori	r24, 0x08	; 8
    13a4:	01 c0       	rjmp	.+2      	; 0x13a8 <LCD0_read+0xc2>
    13a6:	87 7f       	andi	r24, 0xF7	; 247
    13a8:	90 81       	ld	r25, Z
    13aa:	96 ff       	sbrs	r25, 6
    13ac:	02 c0       	rjmp	.+4      	; 0x13b2 <LCD0_read+0xcc>
    13ae:	84 60       	ori	r24, 0x04	; 4
    13b0:	01 c0       	rjmp	.+2      	; 0x13b4 <LCD0_read+0xce>
    13b2:	8b 7f       	andi	r24, 0xFB	; 251
    13b4:	90 81       	ld	r25, Z
    13b6:	95 ff       	sbrs	r25, 5
    13b8:	02 c0       	rjmp	.+4      	; 0x13be <LCD0_read+0xd8>
    13ba:	82 60       	ori	r24, 0x02	; 2
    13bc:	01 c0       	rjmp	.+2      	; 0x13c0 <LCD0_read+0xda>
    13be:	8d 7f       	andi	r24, 0xFD	; 253
    13c0:	90 81       	ld	r25, Z
    13c2:	94 ff       	sbrs	r25, 4
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <LCD0_read+0xe4>
    13c6:	81 60       	ori	r24, 0x01	; 1
    13c8:	01 c0       	rjmp	.+2      	; 0x13cc <LCD0_read+0xe6>
    13ca:	8e 7f       	andi	r24, 0xFE	; 254
    13cc:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <lcd0_PORT>
    13d0:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <lcd0_PORT+0x1>
    13d4:	90 81       	ld	r25, Z
    13d6:	9b 7f       	andi	r25, 0xFB	; 251
    13d8:	90 83       	st	Z, r25
    13da:	08 95       	ret

000013dc <LCD0_BF>:
    13dc:	cf 93       	push	r28
    13de:	df 93       	push	r29
    13e0:	80 e0       	ldi	r24, 0x00	; 0
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	80 df       	rcall	.-256    	; 0x12e6 <LCD0_read>
    13e6:	cb e0       	ldi	r28, 0x0B	; 11
    13e8:	d0 e0       	ldi	r29, 0x00	; 0
    13ea:	05 c0       	rjmp	.+10     	; 0x13f6 <LCD0_BF+0x1a>
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	7a df       	rcall	.-268    	; 0x12e6 <LCD0_read>
    13f2:	21 97       	sbiw	r28, 0x01	; 1
    13f4:	11 f0       	breq	.+4      	; 0x13fa <LCD0_BF+0x1e>
    13f6:	88 23       	and	r24, r24
    13f8:	cc f3       	brlt	.-14     	; 0x13ec <LCD0_BF+0x10>
    13fa:	df 91       	pop	r29
    13fc:	cf 91       	pop	r28
    13fe:	08 95       	ret

00001400 <LCD0_putch>:
    1400:	61 e0       	ldi	r22, 0x01	; 1
    1402:	70 e0       	ldi	r23, 0x00	; 0
    1404:	ac de       	rcall	.-680    	; 0x115e <LCD0_write>
    1406:	ea cf       	rjmp	.-44     	; 0x13dc <LCD0_BF>
    1408:	08 95       	ret

0000140a <LCD0_getch>:
    140a:	cf 93       	push	r28
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	6a df       	rcall	.-300    	; 0x12e6 <LCD0_read>
    1412:	c8 2f       	mov	r28, r24
    1414:	e3 df       	rcall	.-58     	; 0x13dc <LCD0_BF>
    1416:	8c 2f       	mov	r24, r28
    1418:	cf 91       	pop	r28
    141a:	08 95       	ret

0000141c <LCD0_string>:
    141c:	cf 93       	push	r28
    141e:	df 93       	push	r29
    1420:	ec 01       	movw	r28, r24
    1422:	88 81       	ld	r24, Y
    1424:	88 23       	and	r24, r24
    1426:	41 f0       	breq	.+16     	; 0x1438 <LCD0_string+0x1c>
    1428:	21 96       	adiw	r28, 0x01	; 1
    142a:	61 e0       	ldi	r22, 0x01	; 1
    142c:	70 e0       	ldi	r23, 0x00	; 0
    142e:	97 de       	rcall	.-722    	; 0x115e <LCD0_write>
    1430:	d5 df       	rcall	.-86     	; 0x13dc <LCD0_BF>
    1432:	89 91       	ld	r24, Y+
    1434:	81 11       	cpse	r24, r1
    1436:	f9 cf       	rjmp	.-14     	; 0x142a <LCD0_string+0xe>
    1438:	df 91       	pop	r29
    143a:	cf 91       	pop	r28
    143c:	08 95       	ret

0000143e <LCD0_string_size>:
    143e:	0f 93       	push	r16
    1440:	1f 93       	push	r17
    1442:	cf 93       	push	r28
    1444:	df 93       	push	r29
    1446:	fc 01       	movw	r30, r24
    1448:	d6 2f       	mov	r29, r22
    144a:	80 81       	ld	r24, Z
    144c:	88 23       	and	r24, r24
    144e:	51 f0       	breq	.+20     	; 0x1464 <LCD0_string_size+0x26>
    1450:	8f 01       	movw	r16, r30
    1452:	0f 5f       	subi	r16, 0xFF	; 255
    1454:	1f 4f       	sbci	r17, 0xFF	; 255
    1456:	61 11       	cpse	r22, r1
    1458:	09 c0       	rjmp	.+18     	; 0x146c <LCD0_string_size+0x2e>
    145a:	1b c0       	rjmp	.+54     	; 0x1492 <LCD0_string_size+0x54>
    145c:	cf 5f       	subi	r28, 0xFF	; 255
    145e:	dc 17       	cp	r29, r28
    1460:	30 f4       	brcc	.+12     	; 0x146e <LCD0_string_size+0x30>
    1462:	01 c0       	rjmp	.+2      	; 0x1466 <LCD0_string_size+0x28>
    1464:	c0 e0       	ldi	r28, 0x00	; 0
    1466:	cd 17       	cp	r28, r29
    1468:	60 f0       	brcs	.+24     	; 0x1482 <LCD0_string_size+0x44>
    146a:	13 c0       	rjmp	.+38     	; 0x1492 <LCD0_string_size+0x54>
    146c:	c1 e0       	ldi	r28, 0x01	; 1
    146e:	61 e0       	ldi	r22, 0x01	; 1
    1470:	70 e0       	ldi	r23, 0x00	; 0
    1472:	75 de       	rcall	.-790    	; 0x115e <LCD0_write>
    1474:	b3 df       	rcall	.-154    	; 0x13dc <LCD0_BF>
    1476:	f8 01       	movw	r30, r16
    1478:	81 91       	ld	r24, Z+
    147a:	8f 01       	movw	r16, r30
    147c:	81 11       	cpse	r24, r1
    147e:	ee cf       	rjmp	.-36     	; 0x145c <LCD0_string_size+0x1e>
    1480:	f2 cf       	rjmp	.-28     	; 0x1466 <LCD0_string_size+0x28>
    1482:	cf 5f       	subi	r28, 0xFF	; 255
    1484:	61 e0       	ldi	r22, 0x01	; 1
    1486:	70 e0       	ldi	r23, 0x00	; 0
    1488:	80 e2       	ldi	r24, 0x20	; 32
    148a:	69 de       	rcall	.-814    	; 0x115e <LCD0_write>
    148c:	a7 df       	rcall	.-178    	; 0x13dc <LCD0_BF>
    148e:	cd 17       	cp	r28, r29
    1490:	c0 f3       	brcs	.-16     	; 0x1482 <LCD0_string_size+0x44>
    1492:	df 91       	pop	r29
    1494:	cf 91       	pop	r28
    1496:	1f 91       	pop	r17
    1498:	0f 91       	pop	r16
    149a:	08 95       	ret

0000149c <LCD0_hspace>:
    149c:	cf 93       	push	r28
    149e:	c8 2f       	mov	r28, r24
    14a0:	88 23       	and	r24, r24
    14a2:	39 f0       	breq	.+14     	; 0x14b2 <LCD0_hspace+0x16>
    14a4:	61 e0       	ldi	r22, 0x01	; 1
    14a6:	70 e0       	ldi	r23, 0x00	; 0
    14a8:	80 e2       	ldi	r24, 0x20	; 32
    14aa:	59 de       	rcall	.-846    	; 0x115e <LCD0_write>
    14ac:	97 df       	rcall	.-210    	; 0x13dc <LCD0_BF>
    14ae:	c1 50       	subi	r28, 0x01	; 1
    14b0:	c9 f7       	brne	.-14     	; 0x14a4 <LCD0_hspace+0x8>
    14b2:	cf 91       	pop	r28
    14b4:	08 95       	ret

000014b6 <LCD0_gotoxy>:
    14b6:	26 2f       	mov	r18, r22
    14b8:	81 30       	cpi	r24, 0x01	; 1
    14ba:	91 05       	cpc	r25, r1
    14bc:	71 f0       	breq	.+28     	; 0x14da <LCD0_gotoxy+0x24>
    14be:	30 f0       	brcs	.+12     	; 0x14cc <LCD0_gotoxy+0x16>
    14c0:	82 30       	cpi	r24, 0x02	; 2
    14c2:	91 05       	cpc	r25, r1
    14c4:	89 f0       	breq	.+34     	; 0x14e8 <LCD0_gotoxy+0x32>
    14c6:	03 97       	sbiw	r24, 0x03	; 3
    14c8:	b1 f0       	breq	.+44     	; 0x14f6 <LCD0_gotoxy+0x40>
    14ca:	08 95       	ret
    14cc:	60 e0       	ldi	r22, 0x00	; 0
    14ce:	70 e0       	ldi	r23, 0x00	; 0
    14d0:	80 e8       	ldi	r24, 0x80	; 128
    14d2:	82 0f       	add	r24, r18
    14d4:	44 de       	rcall	.-888    	; 0x115e <LCD0_write>
    14d6:	82 cf       	rjmp	.-252    	; 0x13dc <LCD0_BF>
    14d8:	08 95       	ret
    14da:	60 e0       	ldi	r22, 0x00	; 0
    14dc:	70 e0       	ldi	r23, 0x00	; 0
    14de:	80 ec       	ldi	r24, 0xC0	; 192
    14e0:	82 0f       	add	r24, r18
    14e2:	3d de       	rcall	.-902    	; 0x115e <LCD0_write>
    14e4:	7b cf       	rjmp	.-266    	; 0x13dc <LCD0_BF>
    14e6:	08 95       	ret
    14e8:	60 e0       	ldi	r22, 0x00	; 0
    14ea:	70 e0       	ldi	r23, 0x00	; 0
    14ec:	84 e9       	ldi	r24, 0x94	; 148
    14ee:	82 0f       	add	r24, r18
    14f0:	36 de       	rcall	.-916    	; 0x115e <LCD0_write>
    14f2:	74 cf       	rjmp	.-280    	; 0x13dc <LCD0_BF>
    14f4:	08 95       	ret
    14f6:	60 e0       	ldi	r22, 0x00	; 0
    14f8:	70 e0       	ldi	r23, 0x00	; 0
    14fa:	84 ed       	ldi	r24, 0xD4	; 212
    14fc:	82 0f       	add	r24, r18
    14fe:	2f de       	rcall	.-930    	; 0x115e <LCD0_write>
    1500:	6d cf       	rjmp	.-294    	; 0x13dc <LCD0_BF>
    1502:	08 95       	ret

00001504 <LCD0_clear>:
    1504:	60 e0       	ldi	r22, 0x00	; 0
    1506:	70 e0       	ldi	r23, 0x00	; 0
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	29 de       	rcall	.-942    	; 0x115e <LCD0_write>
    150c:	87 ee       	ldi	r24, 0xE7	; 231
    150e:	97 e1       	ldi	r25, 0x17	; 23
    1510:	01 97       	sbiw	r24, 0x01	; 1
    1512:	f1 f7       	brne	.-4      	; 0x1510 <LCD0_clear+0xc>
    1514:	00 c0       	rjmp	.+0      	; 0x1516 <LCD0_clear+0x12>
    1516:	00 00       	nop
    1518:	08 95       	ret

0000151a <LCD0_inic>:
	return lcd0;
}
void LCD0_inic(void)
{
	//LCD INIC
	*lcd0_DDR=(1<<RS)|(1<<RW)|(1<<EN)|(0<<NC);
    151a:	e0 91 dd 01 	lds	r30, 0x01DD	; 0x8001dd <lcd0_DDR>
    151e:	f0 91 de 01 	lds	r31, 0x01DE	; 0x8001de <lcd0_DDR+0x1>
    1522:	87 e0       	ldi	r24, 0x07	; 7
    1524:	80 83       	st	Z, r24
	*lcd0_PORT=(1<<NC);
    1526:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <lcd0_PORT>
    152a:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <lcd0_PORT+0x1>
    152e:	88 e0       	ldi	r24, 0x08	; 8
    1530:	80 83       	st	Z, r24
    1532:	2f ef       	ldi	r18, 0xFF	; 255
    1534:	83 ef       	ldi	r24, 0xF3	; 243
    1536:	91 e0       	ldi	r25, 0x01	; 1
    1538:	21 50       	subi	r18, 0x01	; 1
    153a:	80 40       	sbci	r24, 0x00	; 0
    153c:	90 40       	sbci	r25, 0x00	; 0
    153e:	e1 f7       	brne	.-8      	; 0x1538 <LCD0_inic+0x1e>
    1540:	00 c0       	rjmp	.+0      	; 0x1542 <LCD0_inic+0x28>
    1542:	00 00       	nop
	/***INICIALIZACAO LCD**datasheet*/
	_delay_ms(40);
	LCD0_write(0x33,INST); //function set
    1544:	60 e0       	ldi	r22, 0x00	; 0
    1546:	70 e0       	ldi	r23, 0x00	; 0
    1548:	83 e3       	ldi	r24, 0x33	; 51
    154a:	09 de       	rcall	.-1006   	; 0x115e <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    154c:	20 ed       	ldi	r18, 0xD0	; 208
    154e:	2a 95       	dec	r18
    1550:	f1 f7       	brne	.-4      	; 0x154e <LCD0_inic+0x34>
	_delay_us(39);
	LCD0_write(0x33,INST); //function set
    1552:	60 e0       	ldi	r22, 0x00	; 0
    1554:	70 e0       	ldi	r23, 0x00	; 0
    1556:	83 e3       	ldi	r24, 0x33	; 51
    1558:	02 de       	rcall	.-1020   	; 0x115e <LCD0_write>
    155a:	80 ed       	ldi	r24, 0xD0	; 208
    155c:	8a 95       	dec	r24
    155e:	f1 f7       	brne	.-4      	; 0x155c <LCD0_inic+0x42>
	_delay_us(39);
	LCD0_write(0x2B,INST); //function set
    1560:	60 e0       	ldi	r22, 0x00	; 0
    1562:	70 e0       	ldi	r23, 0x00	; 0
    1564:	8b e2       	ldi	r24, 0x2B	; 43
    1566:	fb dd       	rcall	.-1034   	; 0x115e <LCD0_write>
    1568:	95 ec       	ldi	r25, 0xC5	; 197
    156a:	9a 95       	dec	r25
    156c:	f1 f7       	brne	.-4      	; 0x156a <LCD0_inic+0x50>
    156e:	00 00       	nop
	_delay_us(37);
	LCD0_write(0x0C,INST);// display on/off control
    1570:	60 e0       	ldi	r22, 0x00	; 0
    1572:	70 e0       	ldi	r23, 0x00	; 0
    1574:	8c e0       	ldi	r24, 0x0C	; 12
    1576:	f3 dd       	rcall	.-1050   	; 0x115e <LCD0_write>
    1578:	25 ec       	ldi	r18, 0xC5	; 197
    157a:	2a 95       	dec	r18
    157c:	f1 f7       	brne	.-4      	; 0x157a <LCD0_inic+0x60>
	_delay_us(37);
	LCD0_write(0x01,INST);// clear display
    157e:	00 00       	nop
    1580:	60 e0       	ldi	r22, 0x00	; 0
    1582:	70 e0       	ldi	r23, 0x00	; 0
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	eb dd       	rcall	.-1066   	; 0x115e <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1588:	87 ee       	ldi	r24, 0xE7	; 231
    158a:	97 e1       	ldi	r25, 0x17	; 23
    158c:	01 97       	sbiw	r24, 0x01	; 1
    158e:	f1 f7       	brne	.-4      	; 0x158c <LCD0_inic+0x72>
    1590:	00 c0       	rjmp	.+0      	; 0x1592 <LCD0_inic+0x78>
	_delay_ms(1.53);
	LCD0_write(0x06,INST);// entry mode set (crazy settings)
    1592:	00 00       	nop
    1594:	60 e0       	ldi	r22, 0x00	; 0
    1596:	70 e0       	ldi	r23, 0x00	; 0
    1598:	86 e0       	ldi	r24, 0x06	; 6
    159a:	e1 dd       	rcall	.-1086   	; 0x115e <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    159c:	95 ec       	ldi	r25, 0xC5	; 197
    159e:	9a 95       	dec	r25
    15a0:	f1 f7       	brne	.-4      	; 0x159e <LCD0_inic+0x84>
    15a2:	00 00       	nop
    15a4:	08 95       	ret

000015a6 <LCD0enable>:
unsigned int LCD_ticks(unsigned int num);
/*
** procedure and function
*/
LCD0 LCD0enable(volatile uint8_t *ddr, volatile uint8_t *pin, volatile uint8_t *port)
{
    15a6:	1f 93       	push	r17
    15a8:	cf 93       	push	r28
    15aa:	df 93       	push	r29
    15ac:	ec 01       	movw	r28, r24
	//LOCAL VARIABLES
	uint8_t tSREG;
	tSREG=SREG;
    15ae:	1f b7       	in	r17, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    15b0:	8f b7       	in	r24, 0x3f	; 63
    15b2:	8f 77       	andi	r24, 0x7F	; 127
    15b4:	8f bf       	out	0x3f, r24	; 63
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	LCD0 lcd0;
	//import parametros
	lcd0_DDR=ddr;
    15b6:	70 93 de 01 	sts	0x01DE, r23	; 0x8001de <lcd0_DDR+0x1>
    15ba:	60 93 dd 01 	sts	0x01DD, r22	; 0x8001dd <lcd0_DDR>
	lcd0_PIN=pin;
    15be:	50 93 d7 01 	sts	0x01D7, r21	; 0x8001d7 <lcd0_PIN+0x1>
    15c2:	40 93 d6 01 	sts	0x01D6, r20	; 0x8001d6 <lcd0_PIN>
	lcd0_PORT=port;
    15c6:	30 93 e1 01 	sts	0x01E1, r19	; 0x8001e1 <lcd0_PORT+0x1>
    15ca:	20 93 e0 01 	sts	0x01E0, r18	; 0x8001e0 <lcd0_PORT>
	//inic variables
	*lcd0_DDR=0x00;
    15ce:	fb 01       	movw	r30, r22
    15d0:	10 82       	st	Z, r1
	*lcd0_PORT=0xFF;
    15d2:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <lcd0_PORT>
    15d6:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <lcd0_PORT+0x1>
    15da:	8f ef       	ldi	r24, 0xFF	; 255
    15dc:	80 83       	st	Z, r24
	lcd0_detect=*lcd0_PIN & (1<<NC);
    15de:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <lcd0_PIN>
    15e2:	f0 91 d7 01 	lds	r31, 0x01D7	; 0x8001d7 <lcd0_PIN+0x1>
    15e6:	80 81       	ld	r24, Z
    15e8:	88 70       	andi	r24, 0x08	; 8
    15ea:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <lcd0_detect>
	lcd0.hspace=LCD0_hspace;
	lcd0.clear=LCD0_clear;
	lcd0.gotoxy=LCD0_gotoxy;
	lcd0.reboot=LCD0_reboot;
	//LCD INIC
	LCD0_inic();
    15ee:	95 df       	rcall	.-214    	; 0x151a <LCD0_inic>
	SREG=tSREG;
    15f0:	1f bf       	out	0x3f, r17	; 63
	//
	return lcd0;
    15f2:	8f ea       	ldi	r24, 0xAF	; 175
    15f4:	98 e0       	ldi	r25, 0x08	; 8
    15f6:	99 83       	std	Y+1, r25	; 0x01
    15f8:	88 83       	st	Y, r24
    15fa:	83 e7       	ldi	r24, 0x73	; 115
    15fc:	99 e0       	ldi	r25, 0x09	; 9
    15fe:	9b 83       	std	Y+3, r25	; 0x03
    1600:	8a 83       	std	Y+2, r24	; 0x02
    1602:	8e ee       	ldi	r24, 0xEE	; 238
    1604:	99 e0       	ldi	r25, 0x09	; 9
    1606:	9d 83       	std	Y+5, r25	; 0x05
    1608:	8c 83       	std	Y+4, r24	; 0x04
    160a:	80 e0       	ldi	r24, 0x00	; 0
    160c:	9a e0       	ldi	r25, 0x0A	; 10
    160e:	9f 83       	std	Y+7, r25	; 0x07
    1610:	8e 83       	std	Y+6, r24	; 0x06
    1612:	85 e0       	ldi	r24, 0x05	; 5
    1614:	9a e0       	ldi	r25, 0x0A	; 10
    1616:	99 87       	std	Y+9, r25	; 0x09
    1618:	88 87       	std	Y+8, r24	; 0x08
    161a:	8e e0       	ldi	r24, 0x0E	; 14
    161c:	9a e0       	ldi	r25, 0x0A	; 10
    161e:	9b 87       	std	Y+11, r25	; 0x0b
    1620:	8a 87       	std	Y+10, r24	; 0x0a
    1622:	8f e1       	ldi	r24, 0x1F	; 31
    1624:	9a e0       	ldi	r25, 0x0A	; 10
    1626:	9d 87       	std	Y+13, r25	; 0x0d
    1628:	8c 87       	std	Y+12, r24	; 0x0c
    162a:	8e e4       	ldi	r24, 0x4E	; 78
    162c:	9a e0       	ldi	r25, 0x0A	; 10
    162e:	9f 87       	std	Y+15, r25	; 0x0f
    1630:	8e 87       	std	Y+14, r24	; 0x0e
    1632:	82 e8       	ldi	r24, 0x82	; 130
    1634:	9a e0       	ldi	r25, 0x0A	; 10
    1636:	99 8b       	std	Y+17, r25	; 0x11
    1638:	88 8b       	std	Y+16, r24	; 0x10
    163a:	8b e5       	ldi	r24, 0x5B	; 91
    163c:	9a e0       	ldi	r25, 0x0A	; 10
    163e:	9b 8b       	std	Y+19, r25	; 0x13
    1640:	8a 8b       	std	Y+18, r24	; 0x12
    1642:	8a e2       	ldi	r24, 0x2A	; 42
    1644:	9b e0       	ldi	r25, 0x0B	; 11
    1646:	9d 8b       	std	Y+21, r25	; 0x15
    1648:	8c 8b       	std	Y+20, r24	; 0x14
}
    164a:	ce 01       	movw	r24, r28
    164c:	df 91       	pop	r29
    164e:	cf 91       	pop	r28
    1650:	1f 91       	pop	r17
    1652:	08 95       	ret

00001654 <LCD0_reboot>:
	*lcd0_PORT|=(1<<EN);
	LCD_ticks(num);
	*lcd0_PORT&=~(1<<EN);
}
void LCD0_reboot(void)
{
    1654:	cf 93       	push	r28
	//low high detect pin NC
	uint8_t i;
	uint8_t tmp;
	tmp=*lcd0_PIN & (1<<NC);
    1656:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <lcd0_PIN>
    165a:	f0 91 d7 01 	lds	r31, 0x01D7	; 0x8001d7 <lcd0_PIN+0x1>
    165e:	c0 81       	ld	r28, Z
    1660:	c8 70       	andi	r28, 0x08	; 8
	i=tmp^lcd0_detect;
    1662:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <lcd0_detect>
    1666:	8c 27       	eor	r24, r28
	i&=tmp;
	if(i)
    1668:	8c 23       	and	r24, r28
    166a:	09 f0       	breq	.+2      	; 0x166e <LCD0_reboot+0x1a>
		LCD0_inic();
    166c:	56 df       	rcall	.-340    	; 0x151a <LCD0_inic>
	lcd0_detect=tmp;
    166e:	c0 93 df 01 	sts	0x01DF, r28	; 0x8001df <lcd0_detect>
}
    1672:	cf 91       	pop	r28
    1674:	08 95       	ret

00001676 <PCF8563RTC_Init>:
	I2C_Write(var_day_u8);			      // Write date on RAM address 04H
	I2C_Write(var_weekday_u8);
	I2C_Write(var_month_u8);			  // Write month on RAM address 05H
	I2C_Write(var_year_u8);			      // Write year on RAM address 06h
	I2C_Stop();				              // Stop I2C communication after Setting the Date
}
    1676:	d7 dc       	rcall	.-1618   	; 0x1026 <I2C_Init>
    1678:	15 dd       	rcall	.-1494   	; 0x10a4 <I2C_Start>
    167a:	82 ea       	ldi	r24, 0xA2	; 162
    167c:	36 dd       	rcall	.-1428   	; 0x10ea <I2C_Write>
    167e:	80 e0       	ldi	r24, 0x00	; 0
    1680:	34 dd       	rcall	.-1432   	; 0x10ea <I2C_Write>
    1682:	80 e0       	ldi	r24, 0x00	; 0
    1684:	32 dd       	rcall	.-1436   	; 0x10ea <I2C_Write>
    1686:	27 cd       	rjmp	.-1458   	; 0x10d6 <I2C_Stop>
    1688:	08 95       	ret

0000168a <PCF8563RTC_SetClkOut>:
    168a:	cf 93       	push	r28
    168c:	88 23       	and	r24, r24
    168e:	21 f0       	breq	.+8      	; 0x1698 <PCF8563RTC_SetClkOut+0xe>
    1690:	63 70       	andi	r22, 0x03	; 3
    1692:	c6 2f       	mov	r28, r22
    1694:	c0 68       	ori	r28, 0x80	; 128
    1696:	01 c0       	rjmp	.+2      	; 0x169a <PCF8563RTC_SetClkOut+0x10>
    1698:	c0 e0       	ldi	r28, 0x00	; 0
    169a:	04 dd       	rcall	.-1528   	; 0x10a4 <I2C_Start>
    169c:	82 ea       	ldi	r24, 0xA2	; 162
    169e:	25 dd       	rcall	.-1462   	; 0x10ea <I2C_Write>
    16a0:	8d e0       	ldi	r24, 0x0D	; 13
    16a2:	23 dd       	rcall	.-1466   	; 0x10ea <I2C_Write>
    16a4:	8c 2f       	mov	r24, r28
    16a6:	21 dd       	rcall	.-1470   	; 0x10ea <I2C_Write>
    16a8:	16 dd       	rcall	.-1492   	; 0x10d6 <I2C_Stop>
    16aa:	cf 91       	pop	r28
    16ac:	08 95       	ret

000016ae <PCF8563RTC_GetTime>:

	Note: The time read from PCF8563 will be of BCD format, 
	      like 0x12,0x39,0x26 for 12hr,39min and 26sec.	
***************************************************************************************************/
struct time PCF8563RTC_GetTime(void)
{
    16ae:	1f 93       	push	r17
    16b0:	cf 93       	push	r28
    16b2:	df 93       	push	r29
	struct time result;
	I2C_Start();							// Start I2C communication
    16b4:	f7 dc       	rcall	.-1554   	; 0x10a4 <I2C_Start>
	I2C_Write(PCF8563WriteMode_U8);			// connect to PCF8563 by sending its ID on I2c Bus
    16b6:	82 ea       	ldi	r24, 0xA2	; 162
    16b8:	18 dd       	rcall	.-1488   	; 0x10ea <I2C_Write>
	I2C_Write(PCF8563SecondRegAddress_U8);	// Request Sec RAM address at 00H
    16ba:	82 e0       	ldi	r24, 0x02	; 2
	I2C_Stop();								// Stop I2C communication after selecting Sec Register
    16bc:	16 dd       	rcall	.-1492   	; 0x10ea <I2C_Write>
	I2C_Start();							// Start I2C communication
    16be:	0b dd       	rcall	.-1514   	; 0x10d6 <I2C_Stop>
	I2C_Write(PCF8563ReadMode_U8);			// connect to PCF8563(Read mode) by sending its ID
    16c0:	f1 dc       	rcall	.-1566   	; 0x10a4 <I2C_Start>
    16c2:	83 ea       	ldi	r24, 0xA3	; 163
	result.VL_seconds = I2C_Read(1) & ~0x80;		// read second and return Positive ACK
    16c4:	12 dd       	rcall	.-1500   	; 0x10ea <I2C_Write>
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	2b dd       	rcall	.-1450   	; 0x1120 <I2C_Read>
	result.minutes = I2C_Read(1) & ~0x80;			// read minute and return Positive ACK
    16ca:	18 2f       	mov	r17, r24
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	28 dd       	rcall	.-1456   	; 0x1120 <I2C_Read>
    16d0:	c8 2f       	mov	r28, r24
	result.hours = I2C_Read(0) & ~0xC0;				// read hour and return Negative/No ACK
    16d2:	80 e0       	ldi	r24, 0x00	; 0
    16d4:	25 dd       	rcall	.-1462   	; 0x1120 <I2C_Read>
    16d6:	d8 2f       	mov	r29, r24
    16d8:	fe dc       	rcall	.-1540   	; 0x10d6 <I2C_Stop>
	//dump = I2C_Read(0);					// dump last to ensure prior ok
	I2C_Stop();								// Stop I2C communication after reading the Time
    16da:	6d 2f       	mov	r22, r29
    16dc:	6f 73       	andi	r22, 0x3F	; 63
	return result;
    16de:	7c 2f       	mov	r23, r28
    16e0:	7f 77       	andi	r23, 0x7F	; 127
    16e2:	81 2f       	mov	r24, r17
    16e4:	8f 77       	andi	r24, 0x7F	; 127
}
    16e6:	df 91       	pop	r29
    16e8:	cf 91       	pop	r28
    16ea:	1f 91       	pop	r17
    16ec:	08 95       	ret

000016ee <PCF8563RTC_GetDate>:
    16ee:	0f 93       	push	r16
    16f0:	1f 93       	push	r17

	Note: The date read from PCF8563 will be of BCD format, 
	      like 0x15,0x08,0x47 for 15th day,8th month and 47th year.  
***************************************************************************************************/
struct date PCF8563RTC_GetDate(void)
{
    16f2:	cf 93       	push	r28
    16f4:	df 93       	push	r29
	struct date result;
	I2C_Start();							// Start I2C communication
    16f6:	d6 dc       	rcall	.-1620   	; 0x10a4 <I2C_Start>
	I2C_Write(PCF8563WriteMode_U8);			// connect to PCF8563 by sending its ID on I2c Bus
    16f8:	82 ea       	ldi	r24, 0xA2	; 162
    16fa:	f7 dc       	rcall	.-1554   	; 0x10ea <I2C_Write>
	I2C_Write(PCF8563DateRegAddress_U8);	// Request DAY RAM address at 04H
    16fc:	85 e0       	ldi	r24, 0x05	; 5
	I2C_Stop();								// Stop I2C communication after selecting DAY Register
    16fe:	f5 dc       	rcall	.-1558   	; 0x10ea <I2C_Write>
	I2C_Start();							// Start I2C communication
    1700:	ea dc       	rcall	.-1580   	; 0x10d6 <I2C_Stop>
	I2C_Write(PCF8563ReadMode_U8);			// connect to PCF8563 (Read mode) by sending its ID
    1702:	d0 dc       	rcall	.-1632   	; 0x10a4 <I2C_Start>
    1704:	83 ea       	ldi	r24, 0xA3	; 163
	result.days = I2C_Read(1) & ~0xC0;				// read Day and return Positive ACK
    1706:	f1 dc       	rcall	.-1566   	; 0x10ea <I2C_Write>
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	0a dd       	rcall	.-1516   	; 0x1120 <I2C_Read>
	result.weekdays = I2C_Read(1) & ~0xF8;			// read Month and return Positive ACK
    170c:	d8 2f       	mov	r29, r24
    170e:	81 e0       	ldi	r24, 0x01	; 1
	result.century_months = I2C_Read(1) & ~0xE0;
    1710:	07 dd       	rcall	.-1522   	; 0x1120 <I2C_Read>
    1712:	18 2f       	mov	r17, r24
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	04 dd       	rcall	.-1528   	; 0x1120 <I2C_Read>
	result.years = I2C_Read(0);				// read Year and return Negative/No ACK
    1718:	c8 2f       	mov	r28, r24
    171a:	80 e0       	ldi	r24, 0x00	; 0
    171c:	01 dd       	rcall	.-1534   	; 0x1120 <I2C_Read>
    171e:	08 2f       	mov	r16, r24
	//dump = I2C_Read(0);
	I2C_Stop();								// Stop I2C communication after reading the Date
    1720:	da dc       	rcall	.-1612   	; 0x10d6 <I2C_Stop>
    1722:	7c 2f       	mov	r23, r28
	return result;
    1724:	7f 71       	andi	r23, 0x1F	; 31
    1726:	60 2f       	mov	r22, r16
}
    1728:	81 2f       	mov	r24, r17
    172a:	87 70       	andi	r24, 0x07	; 7
    172c:	9d 2f       	mov	r25, r29
    172e:	9f 73       	andi	r25, 0x3F	; 63
    1730:	df 91       	pop	r29
    1732:	cf 91       	pop	r28
    1734:	1f 91       	pop	r17
    1736:	0f 91       	pop	r16
    1738:	08 95       	ret

0000173a <PCF8563RTC_bcd2dec>:
    173a:	98 2f       	mov	r25, r24
 * Return value	: uint8_t
 * description  : bcd to dec
***************************************************************************************************/
uint8_t PCF8563RTC_bcd2dec(uint8_t num)
{
	return ((num/16 * 10) + (num % 16));
    173c:	92 95       	swap	r25
    173e:	9f 70       	andi	r25, 0x0F	; 15
    1740:	99 0f       	add	r25, r25
    1742:	29 2f       	mov	r18, r25
    1744:	22 0f       	add	r18, r18
    1746:	22 0f       	add	r18, r18
    1748:	92 0f       	add	r25, r18
    174a:	8f 70       	andi	r24, 0x0F	; 15
}
    174c:	89 0f       	add	r24, r25
    174e:	08 95       	ret

00001750 <main>:
/***Global Variable***/
struct time tmp;
struct date dt;
/***MAIN_MAIN***/
int main(void)
{
    1750:	cf 93       	push	r28
    1752:	df 93       	push	r29
    1754:	cd b7       	in	r28, 0x3d	; 61
    1756:	de b7       	in	r29, 0x3e	; 62
    1758:	c6 56       	subi	r28, 0x66	; 102
    175a:	d1 09       	sbc	r29, r1
    175c:	0f b6       	in	r0, 0x3f	; 63
    175e:	f8 94       	cli
    1760:	de bf       	out	0x3e, r29	; 62
    1762:	0f be       	out	0x3f, r0	; 63
    1764:	cd bf       	out	0x3d, r28	; 61
	//uint8_t i;
	LCD0 lcd = LCD0enable(&DDRA,&PINA,&PORTA);
    1766:	2b e3       	ldi	r18, 0x3B	; 59
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	49 e3       	ldi	r20, 0x39	; 57
    176c:	50 e0       	ldi	r21, 0x00	; 0
    176e:	6a e3       	ldi	r22, 0x3A	; 58
    1770:	70 e0       	ldi	r23, 0x00	; 0
    1772:	ce 01       	movw	r24, r28
    1774:	01 96       	adiw	r24, 0x01	; 1
    1776:	17 df       	rcall	.-466    	; 0x15a6 <LCD0enable>
    1778:	af 80       	ldd	r10, Y+7	; 0x07
    177a:	b8 84       	ldd	r11, Y+8	; 0x08
    177c:	ed 84       	ldd	r14, Y+13	; 0x0d
    177e:	fe 84       	ldd	r15, Y+14	; 0x0e
    1780:	8b 88       	ldd	r8, Y+19	; 0x13
    1782:	9c 88       	ldd	r9, Y+20	; 0x14
	FUNC func = FUNCenable();
    1784:	ce 01       	movw	r24, r28
    1786:	47 96       	adiw	r24, 0x17	; 23
    1788:	a7 db       	rcall	.-2226   	; 0xed8 <FUNCenable>
    178a:	c9 ac       	ldd	r12, Y+57	; 0x39
    178c:	da ac       	ldd	r13, Y+58	; 0x3a
	HC595 shift = HC595enable(&DDRG,&PORTG,2,0,1);
    178e:	01 e0       	ldi	r16, 0x01	; 1
    1790:	20 e0       	ldi	r18, 0x00	; 0
    1792:	42 e0       	ldi	r20, 0x02	; 2
    1794:	65 e6       	ldi	r22, 0x65	; 101
    1796:	70 e0       	ldi	r23, 0x00	; 0
    1798:	84 e6       	ldi	r24, 0x64	; 100
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <HC595enable>
    17a0:	a2 96       	adiw	r28, 0x22	; 34
    17a2:	2f af       	std	Y+63, r18	; 0x3f
    17a4:	a2 97       	sbiw	r28, 0x22	; 34
    17a6:	a3 96       	adiw	r28, 0x23	; 35
    17a8:	3f af       	std	Y+63, r19	; 0x3f
    17aa:	a3 97       	sbiw	r28, 0x23	; 35
    17ac:	a4 96       	adiw	r28, 0x24	; 36
    17ae:	4f af       	std	Y+63, r20	; 0x3f
    17b0:	a4 97       	sbiw	r28, 0x24	; 36
    17b2:	a5 96       	adiw	r28, 0x25	; 37
    17b4:	5f af       	std	Y+63, r21	; 0x3f
    17b6:	a5 97       	sbiw	r28, 0x25	; 37
    17b8:	a6 96       	adiw	r28, 0x26	; 38
    17ba:	6f af       	std	Y+63, r22	; 0x3f
    17bc:	a6 97       	sbiw	r28, 0x26	; 38
    17be:	a7 96       	adiw	r28, 0x27	; 39
    17c0:	7f af       	std	Y+63, r23	; 0x3f
    17c2:	a7 97       	sbiw	r28, 0x27	; 39
    17c4:	a3 96       	adiw	r28, 0x23	; 35
    17c6:	4e ac       	ldd	r4, Y+62	; 0x3e
    17c8:	5f ac       	ldd	r5, Y+63	; 0x3f
    17ca:	a3 97       	sbiw	r28, 0x23	; 35
    17cc:	a7 96       	adiw	r28, 0x27	; 39
    17ce:	2e ac       	ldd	r2, Y+62	; 0x3e
    17d0:	3f ac       	ldd	r3, Y+63	; 0x3f
    17d2:	a7 97       	sbiw	r28, 0x27	; 39
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    17d4:	2f ef       	ldi	r18, 0xFF	; 255
    17d6:	81 ee       	ldi	r24, 0xE1	; 225
    17d8:	94 e0       	ldi	r25, 0x04	; 4
    17da:	21 50       	subi	r18, 0x01	; 1
    17dc:	80 40       	sbci	r24, 0x00	; 0
    17de:	90 40       	sbci	r25, 0x00	; 0
    17e0:	e1 f7       	brne	.-8      	; 0x17da <main+0x8a>
    17e2:	00 c0       	rjmp	.+0      	; 0x17e4 <main+0x94>
	_delay_ms(100);
    PCF8563RTC_Init(64);
    17e4:	00 00       	nop
    17e6:	80 e4       	ldi	r24, 0x40	; 64
    //PCF8563RTC_SetTime(0x23,0x50,0x00);  //  23:59:20 am
    //PCF8563RTC_SetDate(0x10,0x00,0x10,0x19);
	PCF8563RTC_SetClkOut(1, 2);
    17e8:	46 df       	rcall	.-372    	; 0x1676 <PCF8563RTC_Init>
    17ea:	62 e0       	ldi	r22, 0x02	; 2
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	4d df       	rcall	.-358    	; 0x168a <PCF8563RTC_SetClkOut>
		lcd.string_size("start",5);
		
		/* Read the Time from RTC(PCF8563) */ 
		tmp=PCF8563RTC_GetTime();
		lcd.gotoxy(1,0);
		lcd.string_size(func.ui16toa(PCF8563RTC_bcd2dec(tmp.hours)),2);
    17f0:	04 ee       	ldi	r16, 0xE4	; 228
    17f2:	11 e0       	ldi	r17, 0x01	; 1
		lcd.hspace(7);
		lcd.string_size(func.ui16toa(tmp.VL_seconds),2);
		
		dt=PCF8563RTC_GetDate();
		lcd.gotoxy(2,0);
		lcd.string_size(func.ui16toa(PCF8563RTC_bcd2dec(dt.days)),2);
    17f4:	0f 2e       	mov	r0, r31
    17f6:	f7 ee       	ldi	r31, 0xE7	; 231
    17f8:	6f 2e       	mov	r6, r31
    17fa:	f1 e0       	ldi	r31, 0x01	; 1
    17fc:	7f 2e       	mov	r7, r31
    17fe:	f0 2d       	mov	r31, r0
    //PCF8563RTC_SetDate(0x10,0x00,0x10,0x19);
	PCF8563RTC_SetClkOut(1, 2);
	/* Replace with your application code */
	while (1)
    {
		lcd.reboot();
    1800:	ed 89       	ldd	r30, Y+21	; 0x15
    1802:	fe 89       	ldd	r31, Y+22	; 0x16
    1804:	09 95       	icall
		
		lcd.gotoxy(0,0);
    1806:	60 e0       	ldi	r22, 0x00	; 0
    1808:	70 e0       	ldi	r23, 0x00	; 0
    180a:	80 e0       	ldi	r24, 0x00	; 0
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	f4 01       	movw	r30, r8
    1810:	09 95       	icall
		lcd.string_size("start",5);
    1812:	65 e0       	ldi	r22, 0x05	; 5
    1814:	80 e0       	ldi	r24, 0x00	; 0
    1816:	91 e0       	ldi	r25, 0x01	; 1
    1818:	f7 01       	movw	r30, r14
		
		/* Read the Time from RTC(PCF8563) */ 
		tmp=PCF8563RTC_GetTime();
    181a:	09 95       	icall
    181c:	48 df       	rcall	.-368    	; 0x16ae <PCF8563RTC_GetTime>
    181e:	60 93 e4 01 	sts	0x01E4, r22	; 0x8001e4 <tmp>
    1822:	70 93 e5 01 	sts	0x01E5, r23	; 0x8001e5 <tmp+0x1>
    1826:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <tmp+0x2>
		lcd.gotoxy(1,0);
    182a:	60 e0       	ldi	r22, 0x00	; 0
    182c:	70 e0       	ldi	r23, 0x00	; 0
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	f4 01       	movw	r30, r8
		lcd.string_size(func.ui16toa(PCF8563RTC_bcd2dec(tmp.hours)),2);
    1834:	09 95       	icall
    1836:	f8 01       	movw	r30, r16
    1838:	80 81       	ld	r24, Z
    183a:	7f df       	rcall	.-258    	; 0x173a <PCF8563RTC_bcd2dec>
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	f6 01       	movw	r30, r12
    1840:	09 95       	icall
    1842:	62 e0       	ldi	r22, 0x02	; 2
    1844:	f7 01       	movw	r30, r14
		lcd.putch(':');
    1846:	09 95       	icall
    1848:	8a e3       	ldi	r24, 0x3A	; 58
    184a:	f5 01       	movw	r30, r10
		lcd.string_size(func.ui16toa(PCF8563RTC_bcd2dec(tmp.minutes)),2);
    184c:	09 95       	icall
    184e:	f8 01       	movw	r30, r16
    1850:	81 81       	ldd	r24, Z+1	; 0x01
    1852:	73 df       	rcall	.-282    	; 0x173a <PCF8563RTC_bcd2dec>
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	f6 01       	movw	r30, r12
    1858:	09 95       	icall
    185a:	62 e0       	ldi	r22, 0x02	; 2
    185c:	f7 01       	movw	r30, r14
		lcd.putch(':');
    185e:	09 95       	icall
    1860:	8a e3       	ldi	r24, 0x3A	; 58
    1862:	f5 01       	movw	r30, r10
		lcd.string_size(func.ui16toa(PCF8563RTC_bcd2dec(tmp.VL_seconds)),2);
    1864:	09 95       	icall
    1866:	f8 01       	movw	r30, r16
    1868:	82 81       	ldd	r24, Z+2	; 0x02
    186a:	67 df       	rcall	.-306    	; 0x173a <PCF8563RTC_bcd2dec>
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	f6 01       	movw	r30, r12
    1870:	09 95       	icall
    1872:	62 e0       	ldi	r22, 0x02	; 2
    1874:	f7 01       	movw	r30, r14
    1876:	09 95       	icall
		lcd.hspace(7);
    1878:	ef 85       	ldd	r30, Y+15	; 0x0f
    187a:	f8 89       	ldd	r31, Y+16	; 0x10
    187c:	87 e0       	ldi	r24, 0x07	; 7
    187e:	09 95       	icall
		lcd.string_size(func.ui16toa(tmp.VL_seconds),2);
    1880:	f8 01       	movw	r30, r16
    1882:	82 81       	ldd	r24, Z+2	; 0x02
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	f6 01       	movw	r30, r12
    1888:	09 95       	icall
    188a:	62 e0       	ldi	r22, 0x02	; 2
    188c:	f7 01       	movw	r30, r14
		
		dt=PCF8563RTC_GetDate();
    188e:	09 95       	icall
    1890:	2e df       	rcall	.-420    	; 0x16ee <PCF8563RTC_GetDate>
    1892:	60 93 e7 01 	sts	0x01E7, r22	; 0x8001e7 <dt>
    1896:	70 93 e8 01 	sts	0x01E8, r23	; 0x8001e8 <dt+0x1>
    189a:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <dt+0x2>
    189e:	90 93 ea 01 	sts	0x01EA, r25	; 0x8001ea <dt+0x3>
		lcd.gotoxy(2,0);
    18a2:	60 e0       	ldi	r22, 0x00	; 0
    18a4:	70 e0       	ldi	r23, 0x00	; 0
    18a6:	82 e0       	ldi	r24, 0x02	; 2
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	f4 01       	movw	r30, r8
		lcd.string_size(func.ui16toa(PCF8563RTC_bcd2dec(dt.days)),2);
    18ac:	09 95       	icall
    18ae:	f3 01       	movw	r30, r6
    18b0:	83 81       	ldd	r24, Z+3	; 0x03
    18b2:	43 df       	rcall	.-378    	; 0x173a <PCF8563RTC_bcd2dec>
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	f6 01       	movw	r30, r12
    18b8:	09 95       	icall
    18ba:	62 e0       	ldi	r22, 0x02	; 2
    18bc:	f7 01       	movw	r30, r14
		//lcd.putch(':');
		//lcd.string_size(func.ui16toa(PCF8563RTC_bcd2dec(dt.weekdays & ~0xF8)),2);
		lcd.putch(':');
    18be:	09 95       	icall
    18c0:	8a e3       	ldi	r24, 0x3A	; 58
    18c2:	f5 01       	movw	r30, r10
		lcd.string_size(func.ui16toa(PCF8563RTC_bcd2dec(dt.century_months & ~0xE0)),2);
    18c4:	09 95       	icall
    18c6:	f3 01       	movw	r30, r6
    18c8:	81 81       	ldd	r24, Z+1	; 0x01
    18ca:	8f 71       	andi	r24, 0x1F	; 31
    18cc:	36 df       	rcall	.-404    	; 0x173a <PCF8563RTC_bcd2dec>
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	f6 01       	movw	r30, r12
    18d2:	09 95       	icall
    18d4:	62 e0       	ldi	r22, 0x02	; 2
    18d6:	f7 01       	movw	r30, r14
		lcd.putch(':');
    18d8:	09 95       	icall
    18da:	8a e3       	ldi	r24, 0x3A	; 58
    18dc:	f5 01       	movw	r30, r10
		lcd.string_size(func.ui16toa(PCF8563RTC_bcd2dec(dt.years)),2);
    18de:	09 95       	icall
    18e0:	f3 01       	movw	r30, r6
    18e2:	80 81       	ld	r24, Z
    18e4:	2a df       	rcall	.-428    	; 0x173a <PCF8563RTC_bcd2dec>
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	f6 01       	movw	r30, r12
    18ea:	09 95       	icall
    18ec:	62 e0       	ldi	r22, 0x02	; 2
    18ee:	f7 01       	movw	r30, r14
    18f0:	09 95       	icall
		
			shift.bit(0);
    18f2:	80 e0       	ldi	r24, 0x00	; 0
    18f4:	f2 01       	movw	r30, r4
    18f6:	09 95       	icall
			shift.out();
    18f8:	f1 01       	movw	r30, r2
    18fa:	09 95       	icall
    18fc:	ff ef       	ldi	r31, 0xFF	; 255
    18fe:	20 e7       	ldi	r18, 0x70	; 112
    1900:	82 e0       	ldi	r24, 0x02	; 2
    1902:	f1 50       	subi	r31, 0x01	; 1
    1904:	20 40       	sbci	r18, 0x00	; 0
    1906:	80 40       	sbci	r24, 0x00	; 0
    1908:	e1 f7       	brne	.-8      	; 0x1902 <main+0x1b2>
    190a:	00 c0       	rjmp	.+0      	; 0x190c <main+0x1bc>
    190c:	00 00       	nop
			_delay_ms(50);
			shift.bit(1);
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	f2 01       	movw	r30, r4
    1912:	09 95       	icall
			shift.out();
    1914:	f1 01       	movw	r30, r2
    1916:	09 95       	icall
    1918:	ff ef       	ldi	r31, 0xFF	; 255
    191a:	20 e7       	ldi	r18, 0x70	; 112
    191c:	82 e0       	ldi	r24, 0x02	; 2
    191e:	f1 50       	subi	r31, 0x01	; 1
    1920:	20 40       	sbci	r18, 0x00	; 0
    1922:	80 40       	sbci	r24, 0x00	; 0
    1924:	e1 f7       	brne	.-8      	; 0x191e <main+0x1ce>
    1926:	00 c0       	rjmp	.+0      	; 0x1928 <main+0x1d8>
    1928:	00 00       	nop
    192a:	6a cf       	rjmp	.-300    	; 0x1800 <main+0xb0>

0000192c <__mulsi3>:
    192c:	db 01       	movw	r26, r22
    192e:	8f 93       	push	r24
    1930:	9f 93       	push	r25
    1932:	7f d0       	rcall	.+254    	; 0x1a32 <__muluhisi3>
    1934:	bf 91       	pop	r27
    1936:	af 91       	pop	r26
    1938:	a2 9f       	mul	r26, r18
    193a:	80 0d       	add	r24, r0
    193c:	91 1d       	adc	r25, r1
    193e:	a3 9f       	mul	r26, r19
    1940:	90 0d       	add	r25, r0
    1942:	b2 9f       	mul	r27, r18
    1944:	90 0d       	add	r25, r0
    1946:	11 24       	eor	r1, r1
    1948:	08 95       	ret

0000194a <__udivmodhi4>:
    194a:	aa 1b       	sub	r26, r26
    194c:	bb 1b       	sub	r27, r27
    194e:	51 e1       	ldi	r21, 0x11	; 17
    1950:	07 c0       	rjmp	.+14     	; 0x1960 <__udivmodhi4_ep>

00001952 <__udivmodhi4_loop>:
    1952:	aa 1f       	adc	r26, r26
    1954:	bb 1f       	adc	r27, r27
    1956:	a6 17       	cp	r26, r22
    1958:	b7 07       	cpc	r27, r23
    195a:	10 f0       	brcs	.+4      	; 0x1960 <__udivmodhi4_ep>
    195c:	a6 1b       	sub	r26, r22
    195e:	b7 0b       	sbc	r27, r23

00001960 <__udivmodhi4_ep>:
    1960:	88 1f       	adc	r24, r24
    1962:	99 1f       	adc	r25, r25
    1964:	5a 95       	dec	r21
    1966:	a9 f7       	brne	.-22     	; 0x1952 <__udivmodhi4_loop>
    1968:	80 95       	com	r24
    196a:	90 95       	com	r25
    196c:	bc 01       	movw	r22, r24
    196e:	cd 01       	movw	r24, r26
    1970:	08 95       	ret

00001972 <__divmodhi4>:
    1972:	97 fb       	bst	r25, 7
    1974:	07 2e       	mov	r0, r23
    1976:	16 f4       	brtc	.+4      	; 0x197c <__divmodhi4+0xa>
    1978:	00 94       	com	r0
    197a:	06 d0       	rcall	.+12     	; 0x1988 <__divmodhi4_neg1>
    197c:	77 fd       	sbrc	r23, 7
    197e:	08 d0       	rcall	.+16     	; 0x1990 <__divmodhi4_neg2>
    1980:	e4 df       	rcall	.-56     	; 0x194a <__udivmodhi4>
    1982:	07 fc       	sbrc	r0, 7
    1984:	05 d0       	rcall	.+10     	; 0x1990 <__divmodhi4_neg2>
    1986:	3e f4       	brtc	.+14     	; 0x1996 <__divmodhi4_exit>

00001988 <__divmodhi4_neg1>:
    1988:	90 95       	com	r25
    198a:	81 95       	neg	r24
    198c:	9f 4f       	sbci	r25, 0xFF	; 255
    198e:	08 95       	ret

00001990 <__divmodhi4_neg2>:
    1990:	70 95       	com	r23
    1992:	61 95       	neg	r22
    1994:	7f 4f       	sbci	r23, 0xFF	; 255

00001996 <__divmodhi4_exit>:
    1996:	08 95       	ret

00001998 <__udivmodsi4>:
    1998:	a1 e2       	ldi	r26, 0x21	; 33
    199a:	1a 2e       	mov	r1, r26
    199c:	aa 1b       	sub	r26, r26
    199e:	bb 1b       	sub	r27, r27
    19a0:	fd 01       	movw	r30, r26
    19a2:	0d c0       	rjmp	.+26     	; 0x19be <__udivmodsi4_ep>

000019a4 <__udivmodsi4_loop>:
    19a4:	aa 1f       	adc	r26, r26
    19a6:	bb 1f       	adc	r27, r27
    19a8:	ee 1f       	adc	r30, r30
    19aa:	ff 1f       	adc	r31, r31
    19ac:	a2 17       	cp	r26, r18
    19ae:	b3 07       	cpc	r27, r19
    19b0:	e4 07       	cpc	r30, r20
    19b2:	f5 07       	cpc	r31, r21
    19b4:	20 f0       	brcs	.+8      	; 0x19be <__udivmodsi4_ep>
    19b6:	a2 1b       	sub	r26, r18
    19b8:	b3 0b       	sbc	r27, r19
    19ba:	e4 0b       	sbc	r30, r20
    19bc:	f5 0b       	sbc	r31, r21

000019be <__udivmodsi4_ep>:
    19be:	66 1f       	adc	r22, r22
    19c0:	77 1f       	adc	r23, r23
    19c2:	88 1f       	adc	r24, r24
    19c4:	99 1f       	adc	r25, r25
    19c6:	1a 94       	dec	r1
    19c8:	69 f7       	brne	.-38     	; 0x19a4 <__udivmodsi4_loop>
    19ca:	60 95       	com	r22
    19cc:	70 95       	com	r23
    19ce:	80 95       	com	r24
    19d0:	90 95       	com	r25
    19d2:	9b 01       	movw	r18, r22
    19d4:	ac 01       	movw	r20, r24
    19d6:	bd 01       	movw	r22, r26
    19d8:	cf 01       	movw	r24, r30
    19da:	08 95       	ret

000019dc <__divmodsi4>:
    19dc:	05 2e       	mov	r0, r21
    19de:	97 fb       	bst	r25, 7
    19e0:	16 f4       	brtc	.+4      	; 0x19e6 <__divmodsi4+0xa>
    19e2:	00 94       	com	r0
    19e4:	0f d0       	rcall	.+30     	; 0x1a04 <__negsi2>
    19e6:	57 fd       	sbrc	r21, 7
    19e8:	05 d0       	rcall	.+10     	; 0x19f4 <__divmodsi4_neg2>
    19ea:	d6 df       	rcall	.-84     	; 0x1998 <__udivmodsi4>
    19ec:	07 fc       	sbrc	r0, 7
    19ee:	02 d0       	rcall	.+4      	; 0x19f4 <__divmodsi4_neg2>
    19f0:	46 f4       	brtc	.+16     	; 0x1a02 <__divmodsi4_exit>
    19f2:	08 c0       	rjmp	.+16     	; 0x1a04 <__negsi2>

000019f4 <__divmodsi4_neg2>:
    19f4:	50 95       	com	r21
    19f6:	40 95       	com	r20
    19f8:	30 95       	com	r19
    19fa:	21 95       	neg	r18
    19fc:	3f 4f       	sbci	r19, 0xFF	; 255
    19fe:	4f 4f       	sbci	r20, 0xFF	; 255
    1a00:	5f 4f       	sbci	r21, 0xFF	; 255

00001a02 <__divmodsi4_exit>:
    1a02:	08 95       	ret

00001a04 <__negsi2>:
    1a04:	90 95       	com	r25
    1a06:	80 95       	com	r24
    1a08:	70 95       	com	r23
    1a0a:	61 95       	neg	r22
    1a0c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a0e:	8f 4f       	sbci	r24, 0xFF	; 255
    1a10:	9f 4f       	sbci	r25, 0xFF	; 255
    1a12:	08 95       	ret

00001a14 <__umulhisi3>:
    1a14:	a2 9f       	mul	r26, r18
    1a16:	b0 01       	movw	r22, r0
    1a18:	b3 9f       	mul	r27, r19
    1a1a:	c0 01       	movw	r24, r0
    1a1c:	a3 9f       	mul	r26, r19
    1a1e:	70 0d       	add	r23, r0
    1a20:	81 1d       	adc	r24, r1
    1a22:	11 24       	eor	r1, r1
    1a24:	91 1d       	adc	r25, r1
    1a26:	b2 9f       	mul	r27, r18
    1a28:	70 0d       	add	r23, r0
    1a2a:	81 1d       	adc	r24, r1
    1a2c:	11 24       	eor	r1, r1
    1a2e:	91 1d       	adc	r25, r1
    1a30:	08 95       	ret

00001a32 <__muluhisi3>:
    1a32:	f0 df       	rcall	.-32     	; 0x1a14 <__umulhisi3>
    1a34:	a5 9f       	mul	r26, r21
    1a36:	90 0d       	add	r25, r0
    1a38:	b4 9f       	mul	r27, r20
    1a3a:	90 0d       	add	r25, r0
    1a3c:	a4 9f       	mul	r26, r20
    1a3e:	80 0d       	add	r24, r0
    1a40:	91 1d       	adc	r25, r1
    1a42:	11 24       	eor	r1, r1
    1a44:	08 95       	ret

00001a46 <_exit>:
    1a46:	f8 94       	cli

00001a48 <__stop_program>:
    1a48:	ff cf       	rjmp	.-2      	; 0x1a48 <__stop_program>
