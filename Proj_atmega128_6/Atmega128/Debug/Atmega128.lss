
Atmega128.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00001640  000016d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001640  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d5  00800106  00800106  000016da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000016da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000170c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000688  00000000  00000000  00001748  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000586f  00000000  00000000  00001dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a21  00000000  00000000  0000763f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003bbe  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000010f0  00000000  00000000  0000cc20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001406  00000000  00000000  0000dd10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000506c  00000000  00000000  0000f116  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000608  00000000  00000000  00014182  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	e8 c0       	rjmp	.+464    	; 0x1d6 <__vector_1>
       6:	00 00       	nop
       8:	f0 c0       	rjmp	.+480    	; 0x1ea <__vector_2>
       a:	00 00       	nop
       c:	f8 c0       	rjmp	.+496    	; 0x1fe <__vector_3>
       e:	00 00       	nop
      10:	00 c1       	rjmp	.+512    	; 0x212 <__vector_4>
      12:	00 00       	nop
      14:	08 c1       	rjmp	.+528    	; 0x226 <__vector_5>
      16:	00 00       	nop
      18:	10 c1       	rjmp	.+544    	; 0x23a <__vector_6>
      1a:	00 00       	nop
      1c:	18 c1       	rjmp	.+560    	; 0x24e <__vector_7>
      1e:	00 00       	nop
      20:	20 c1       	rjmp	.+576    	; 0x262 <__vector_8>
      22:	00 00       	nop
      24:	52 c0       	rjmp	.+164    	; 0xca <__bad_interrupt>
      26:	00 00       	nop
      28:	30 c1       	rjmp	.+608    	; 0x28a <__vector_10>
      2a:	00 00       	nop
      2c:	38 c1       	rjmp	.+624    	; 0x29e <__vector_11>
      2e:	00 00       	nop
      30:	40 c1       	rjmp	.+640    	; 0x2b2 <__vector_12>
      32:	00 00       	nop
      34:	48 c1       	rjmp	.+656    	; 0x2c6 <__vector_13>
      36:	00 00       	nop
      38:	50 c1       	rjmp	.+672    	; 0x2da <__vector_14>
      3a:	00 00       	nop
      3c:	58 c1       	rjmp	.+688    	; 0x2ee <__vector_15>
      3e:	00 00       	nop
      40:	60 c1       	rjmp	.+704    	; 0x302 <__vector_16>
      42:	00 00       	nop
      44:	18 c1       	rjmp	.+560    	; 0x276 <__vector_17>
      46:	00 00       	nop
      48:	ac c1       	rjmp	.+856    	; 0x3a2 <__vector_18>
      4a:	00 00       	nop
      4c:	e2 c1       	rjmp	.+964    	; 0x412 <__vector_19>
      4e:	00 00       	nop
      50:	3c c0       	rjmp	.+120    	; 0xca <__bad_interrupt>
      52:	00 00       	nop
      54:	3b c0       	rjmp	.+118    	; 0xcc <__vector_21>
      56:	00 00       	nop
      58:	38 c0       	rjmp	.+112    	; 0xca <__bad_interrupt>
      5a:	00 00       	nop
      5c:	36 c0       	rjmp	.+108    	; 0xca <__bad_interrupt>
      5e:	00 00       	nop
      60:	5a c1       	rjmp	.+692    	; 0x316 <__vector_24>
      62:	00 00       	nop
      64:	62 c1       	rjmp	.+708    	; 0x32a <__vector_25>
      66:	00 00       	nop
      68:	6a c1       	rjmp	.+724    	; 0x33e <__vector_26>
      6a:	00 00       	nop
      6c:	72 c1       	rjmp	.+740    	; 0x352 <__vector_27>
      6e:	00 00       	nop
      70:	7a c1       	rjmp	.+756    	; 0x366 <__vector_28>
      72:	00 00       	nop
      74:	82 c1       	rjmp	.+772    	; 0x37a <__vector_29>
      76:	00 00       	nop
      78:	f5 c1       	rjmp	.+1002   	; 0x464 <__vector_30>
      7a:	00 00       	nop
      7c:	2e c2       	rjmp	.+1116   	; 0x4da <__vector_31>
      7e:	00 00       	nop
      80:	24 c0       	rjmp	.+72     	; 0xca <__bad_interrupt>
      82:	00 00       	nop
      84:	84 c1       	rjmp	.+776    	; 0x38e <__vector_33>
      86:	00 00       	nop
      88:	20 c0       	rjmp	.+64     	; 0xca <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e0 e4       	ldi	r30, 0x40	; 64
      a0:	f6 e1       	ldi	r31, 0x16	; 22
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 30       	cpi	r26, 0x06	; 6
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	a6 e0       	ldi	r26, 0x06	; 6
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ab 3d       	cpi	r26, 0xDB	; 219
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 56 0a 	call	0x14ac	; 0x14ac <main>
      c6:	0c 94 1e 0b 	jmp	0x163c	; 0x163c <_exit>

000000ca <__bad_interrupt>:
      ca:	9a cf       	rjmp	.-204    	; 0x0 <__vectors>

000000cc <__vector_21>:
ISR(ANALOG_INTERRUPT)
/*************************************************************************
Function: ANALOG interrupt
Purpose:  Read Analog Input
**************************************************************************/
{
      cc:	1f 92       	push	r1
      ce:	0f 92       	push	r0
      d0:	0f b6       	in	r0, 0x3f	; 63
      d2:	0f 92       	push	r0
      d4:	11 24       	eor	r1, r1
      d6:	0b b6       	in	r0, 0x3b	; 59
      d8:	0f 92       	push	r0
      da:	2f 93       	push	r18
      dc:	3f 93       	push	r19
      de:	8f 93       	push	r24
      e0:	9f 93       	push	r25
      e2:	ef 93       	push	r30
      e4:	ff 93       	push	r31
	/******/
	adc_tmp=ADCL;
      e6:	84 b1       	in	r24, 0x04	; 4
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <adc_tmp+0x1>
      ee:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <adc_tmp>
	adc_tmp|=(ADCH<<8);
      f2:	25 b1       	in	r18, 0x05	; 5
      f4:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <adc_tmp>
      f8:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <adc_tmp+0x1>
      fc:	92 2b       	or	r25, r18
      fe:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <adc_tmp+0x1>
     102:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <adc_tmp>
	if(adc_n_sample < (1<<ADC_NUMBER_SAMPLE)){
     106:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
     10a:	84 30       	cpi	r24, 0x04	; 4
     10c:	a0 f4       	brcc	.+40     	; 0x136 <__vector_21+0x6a>
		adc_n_sample++;
     10e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
     112:	8f 5f       	subi	r24, 0xFF	; 255
     114:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
		adc_sample+=adc_tmp;
     118:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <adc_tmp>
     11c:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <adc_tmp+0x1>
     120:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <adc_sample>
     124:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <adc_sample+0x1>
     128:	82 0f       	add	r24, r18
     12a:	93 1f       	adc	r25, r19
     12c:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <adc_sample+0x1>
     130:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <adc_sample>
     134:	43 c0       	rjmp	.+134    	; 0x1bc <__vector_21+0xf0>
	}else{
		ADC_VALUE[ADC_SELECTOR]=adc_sample>>ADC_NUMBER_SAMPLE;
     136:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <ADC_SELECTOR>
     13a:	f0 91 0c 01 	lds	r31, 0x010C	; 0x80010c <ADC_SELECTOR+0x1>
     13e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <adc_sample>
     142:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <adc_sample+0x1>
     146:	95 95       	asr	r25
     148:	87 95       	ror	r24
     14a:	95 95       	asr	r25
     14c:	87 95       	ror	r24
     14e:	ee 0f       	add	r30, r30
     150:	ff 1f       	adc	r31, r31
     152:	e1 5e       	subi	r30, 0xE1	; 225
     154:	fe 4f       	sbci	r31, 0xFE	; 254
     156:	91 83       	std	Z+1, r25	; 0x01
     158:	80 83       	st	Z, r24
		adc_n_sample=adc_sample=0;
     15a:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <adc_sample+0x1>
     15e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <adc_sample>
     162:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
		/******/
		if(ADC_SELECTOR < ADC_N_CHANNEL)
     166:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <ADC_SELECTOR>
     16a:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <ADC_SELECTOR+0x1>
     16e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <ADC_N_CHANNEL>
     172:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <ADC_N_CHANNEL+0x1>
     176:	28 17       	cp	r18, r24
     178:	39 07       	cpc	r19, r25
     17a:	54 f4       	brge	.+20     	; 0x190 <__vector_21+0xc4>
			ADC_SELECTOR++;
     17c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <ADC_SELECTOR>
     180:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <ADC_SELECTOR+0x1>
     184:	01 96       	adiw	r24, 0x01	; 1
     186:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <ADC_SELECTOR+0x1>
     18a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <ADC_SELECTOR>
     18e:	04 c0       	rjmp	.+8      	; 0x198 <__vector_21+0xcc>
		else
			ADC_SELECTOR=0;
     190:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <ADC_SELECTOR+0x1>
     194:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <ADC_SELECTOR>
		ADC_SELECT &= ~MUX_MASK;
     198:	87 b1       	in	r24, 0x07	; 7
     19a:	80 7e       	andi	r24, 0xE0	; 224
     19c:	87 b9       	out	0x07, r24	; 7
		ADC_SELECT |= (ADC_CHANNEL_GAIN[ADC_SELECTOR] & MUX_MASK);
     19e:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <ADC_SELECTOR>
     1a2:	f0 91 0c 01 	lds	r31, 0x010C	; 0x80010c <ADC_SELECTOR+0x1>
     1a6:	ee 0f       	add	r30, r30
     1a8:	ff 1f       	adc	r31, r31
     1aa:	e1 5f       	subi	r30, 0xF1	; 241
     1ac:	fe 4f       	sbci	r31, 0xFE	; 254
     1ae:	80 81       	ld	r24, Z
     1b0:	91 81       	ldd	r25, Z+1	; 0x01
     1b2:	27 b1       	in	r18, 0x07	; 7
     1b4:	8f 71       	andi	r24, 0x1F	; 31
     1b6:	99 27       	eor	r25, r25
     1b8:	82 2b       	or	r24, r18
     1ba:	87 b9       	out	0x07, r24	; 7
	}		
}
     1bc:	ff 91       	pop	r31
     1be:	ef 91       	pop	r30
     1c0:	9f 91       	pop	r25
     1c2:	8f 91       	pop	r24
     1c4:	3f 91       	pop	r19
     1c6:	2f 91       	pop	r18
     1c8:	0f 90       	pop	r0
     1ca:	0b be       	out	0x3b, r0	; 59
     1cc:	0f 90       	pop	r0
     1ce:	0f be       	out	0x3f, r0	; 63
     1d0:	0f 90       	pop	r0
     1d2:	1f 90       	pop	r1
     1d4:	18 95       	reti

000001d6 <__vector_1>:

/*
** interrupt
*/
// cross out the ones being used and redefine in main
ISR(INT0_vect){ }
     1d6:	1f 92       	push	r1
     1d8:	0f 92       	push	r0
     1da:	0f b6       	in	r0, 0x3f	; 63
     1dc:	0f 92       	push	r0
     1de:	11 24       	eor	r1, r1
     1e0:	0f 90       	pop	r0
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	0f 90       	pop	r0
     1e6:	1f 90       	pop	r1
     1e8:	18 95       	reti

000001ea <__vector_2>:
ISR(INT1_vect){ }
     1ea:	1f 92       	push	r1
     1ec:	0f 92       	push	r0
     1ee:	0f b6       	in	r0, 0x3f	; 63
     1f0:	0f 92       	push	r0
     1f2:	11 24       	eor	r1, r1
     1f4:	0f 90       	pop	r0
     1f6:	0f be       	out	0x3f, r0	; 63
     1f8:	0f 90       	pop	r0
     1fa:	1f 90       	pop	r1
     1fc:	18 95       	reti

000001fe <__vector_3>:
ISR(INT2_vect){ }
     1fe:	1f 92       	push	r1
     200:	0f 92       	push	r0
     202:	0f b6       	in	r0, 0x3f	; 63
     204:	0f 92       	push	r0
     206:	11 24       	eor	r1, r1
     208:	0f 90       	pop	r0
     20a:	0f be       	out	0x3f, r0	; 63
     20c:	0f 90       	pop	r0
     20e:	1f 90       	pop	r1
     210:	18 95       	reti

00000212 <__vector_4>:
ISR(INT3_vect){ }
     212:	1f 92       	push	r1
     214:	0f 92       	push	r0
     216:	0f b6       	in	r0, 0x3f	; 63
     218:	0f 92       	push	r0
     21a:	11 24       	eor	r1, r1
     21c:	0f 90       	pop	r0
     21e:	0f be       	out	0x3f, r0	; 63
     220:	0f 90       	pop	r0
     222:	1f 90       	pop	r1
     224:	18 95       	reti

00000226 <__vector_5>:
ISR(INT4_vect){ }
     226:	1f 92       	push	r1
     228:	0f 92       	push	r0
     22a:	0f b6       	in	r0, 0x3f	; 63
     22c:	0f 92       	push	r0
     22e:	11 24       	eor	r1, r1
     230:	0f 90       	pop	r0
     232:	0f be       	out	0x3f, r0	; 63
     234:	0f 90       	pop	r0
     236:	1f 90       	pop	r1
     238:	18 95       	reti

0000023a <__vector_6>:
ISR(INT5_vect){ }
     23a:	1f 92       	push	r1
     23c:	0f 92       	push	r0
     23e:	0f b6       	in	r0, 0x3f	; 63
     240:	0f 92       	push	r0
     242:	11 24       	eor	r1, r1
     244:	0f 90       	pop	r0
     246:	0f be       	out	0x3f, r0	; 63
     248:	0f 90       	pop	r0
     24a:	1f 90       	pop	r1
     24c:	18 95       	reti

0000024e <__vector_7>:
ISR(INT6_vect){ }
     24e:	1f 92       	push	r1
     250:	0f 92       	push	r0
     252:	0f b6       	in	r0, 0x3f	; 63
     254:	0f 92       	push	r0
     256:	11 24       	eor	r1, r1
     258:	0f 90       	pop	r0
     25a:	0f be       	out	0x3f, r0	; 63
     25c:	0f 90       	pop	r0
     25e:	1f 90       	pop	r1
     260:	18 95       	reti

00000262 <__vector_8>:
ISR(INT7_vect){ }
     262:	1f 92       	push	r1
     264:	0f 92       	push	r0
     266:	0f b6       	in	r0, 0x3f	; 63
     268:	0f 92       	push	r0
     26a:	11 24       	eor	r1, r1
     26c:	0f 90       	pop	r0
     26e:	0f be       	out	0x3f, r0	; 63
     270:	0f 90       	pop	r0
     272:	1f 90       	pop	r1
     274:	18 95       	reti

00000276 <__vector_17>:
    return SPI_DATA_REGISTER;
}
/*
** interrupt
*/
ISR(SPI_STC_vect){ }
     276:	1f 92       	push	r1
     278:	0f 92       	push	r0
     27a:	0f b6       	in	r0, 0x3f	; 63
     27c:	0f 92       	push	r0
     27e:	11 24       	eor	r1, r1
     280:	0f 90       	pop	r0
     282:	0f be       	out	0x3f, r0	; 63
     284:	0f 90       	pop	r0
     286:	1f 90       	pop	r1
     288:	18 95       	reti

0000028a <__vector_10>:

/*
** interrupt
*/
// So that main will not freeze when not defined, but rather exclude.
ISR(TIMER2_OVF_vect){ }
     28a:	1f 92       	push	r1
     28c:	0f 92       	push	r0
     28e:	0f b6       	in	r0, 0x3f	; 63
     290:	0f 92       	push	r0
     292:	11 24       	eor	r1, r1
     294:	0f 90       	pop	r0
     296:	0f be       	out	0x3f, r0	; 63
     298:	0f 90       	pop	r0
     29a:	1f 90       	pop	r1
     29c:	18 95       	reti

0000029e <__vector_11>:
ISR(TIMER1_CAPT_vect){ }
     29e:	1f 92       	push	r1
     2a0:	0f 92       	push	r0
     2a2:	0f b6       	in	r0, 0x3f	; 63
     2a4:	0f 92       	push	r0
     2a6:	11 24       	eor	r1, r1
     2a8:	0f 90       	pop	r0
     2aa:	0f be       	out	0x3f, r0	; 63
     2ac:	0f 90       	pop	r0
     2ae:	1f 90       	pop	r1
     2b0:	18 95       	reti

000002b2 <__vector_12>:
ISR(TIMER1_COMPA_vect){ }
     2b2:	1f 92       	push	r1
     2b4:	0f 92       	push	r0
     2b6:	0f b6       	in	r0, 0x3f	; 63
     2b8:	0f 92       	push	r0
     2ba:	11 24       	eor	r1, r1
     2bc:	0f 90       	pop	r0
     2be:	0f be       	out	0x3f, r0	; 63
     2c0:	0f 90       	pop	r0
     2c2:	1f 90       	pop	r1
     2c4:	18 95       	reti

000002c6 <__vector_13>:
ISR(TIMER1_COMPB_vect){ }
     2c6:	1f 92       	push	r1
     2c8:	0f 92       	push	r0
     2ca:	0f b6       	in	r0, 0x3f	; 63
     2cc:	0f 92       	push	r0
     2ce:	11 24       	eor	r1, r1
     2d0:	0f 90       	pop	r0
     2d2:	0f be       	out	0x3f, r0	; 63
     2d4:	0f 90       	pop	r0
     2d6:	1f 90       	pop	r1
     2d8:	18 95       	reti

000002da <__vector_14>:
ISR(TIMER1_OVF_vect){ }
     2da:	1f 92       	push	r1
     2dc:	0f 92       	push	r0
     2de:	0f b6       	in	r0, 0x3f	; 63
     2e0:	0f 92       	push	r0
     2e2:	11 24       	eor	r1, r1
     2e4:	0f 90       	pop	r0
     2e6:	0f be       	out	0x3f, r0	; 63
     2e8:	0f 90       	pop	r0
     2ea:	1f 90       	pop	r1
     2ec:	18 95       	reti

000002ee <__vector_15>:
ISR(TIMER0_COMP_vect){ }
     2ee:	1f 92       	push	r1
     2f0:	0f 92       	push	r0
     2f2:	0f b6       	in	r0, 0x3f	; 63
     2f4:	0f 92       	push	r0
     2f6:	11 24       	eor	r1, r1
     2f8:	0f 90       	pop	r0
     2fa:	0f be       	out	0x3f, r0	; 63
     2fc:	0f 90       	pop	r0
     2fe:	1f 90       	pop	r1
     300:	18 95       	reti

00000302 <__vector_16>:
ISR(TIMER0_OVF_vect){ }
     302:	1f 92       	push	r1
     304:	0f 92       	push	r0
     306:	0f b6       	in	r0, 0x3f	; 63
     308:	0f 92       	push	r0
     30a:	11 24       	eor	r1, r1
     30c:	0f 90       	pop	r0
     30e:	0f be       	out	0x3f, r0	; 63
     310:	0f 90       	pop	r0
     312:	1f 90       	pop	r1
     314:	18 95       	reti

00000316 <__vector_24>:
ISR(TIMER1_COMPC_vect){ }
     316:	1f 92       	push	r1
     318:	0f 92       	push	r0
     31a:	0f b6       	in	r0, 0x3f	; 63
     31c:	0f 92       	push	r0
     31e:	11 24       	eor	r1, r1
     320:	0f 90       	pop	r0
     322:	0f be       	out	0x3f, r0	; 63
     324:	0f 90       	pop	r0
     326:	1f 90       	pop	r1
     328:	18 95       	reti

0000032a <__vector_25>:
ISR(TIMER3_CAPT_vect){ }
     32a:	1f 92       	push	r1
     32c:	0f 92       	push	r0
     32e:	0f b6       	in	r0, 0x3f	; 63
     330:	0f 92       	push	r0
     332:	11 24       	eor	r1, r1
     334:	0f 90       	pop	r0
     336:	0f be       	out	0x3f, r0	; 63
     338:	0f 90       	pop	r0
     33a:	1f 90       	pop	r1
     33c:	18 95       	reti

0000033e <__vector_26>:
ISR(TIMER3_COMPA_vect){ }
     33e:	1f 92       	push	r1
     340:	0f 92       	push	r0
     342:	0f b6       	in	r0, 0x3f	; 63
     344:	0f 92       	push	r0
     346:	11 24       	eor	r1, r1
     348:	0f 90       	pop	r0
     34a:	0f be       	out	0x3f, r0	; 63
     34c:	0f 90       	pop	r0
     34e:	1f 90       	pop	r1
     350:	18 95       	reti

00000352 <__vector_27>:
ISR(TIMER3_COMPB_vect){ }
     352:	1f 92       	push	r1
     354:	0f 92       	push	r0
     356:	0f b6       	in	r0, 0x3f	; 63
     358:	0f 92       	push	r0
     35a:	11 24       	eor	r1, r1
     35c:	0f 90       	pop	r0
     35e:	0f be       	out	0x3f, r0	; 63
     360:	0f 90       	pop	r0
     362:	1f 90       	pop	r1
     364:	18 95       	reti

00000366 <__vector_28>:
ISR(TIMER3_COMPC_vect){ }
     366:	1f 92       	push	r1
     368:	0f 92       	push	r0
     36a:	0f b6       	in	r0, 0x3f	; 63
     36c:	0f 92       	push	r0
     36e:	11 24       	eor	r1, r1
     370:	0f 90       	pop	r0
     372:	0f be       	out	0x3f, r0	; 63
     374:	0f 90       	pop	r0
     376:	1f 90       	pop	r1
     378:	18 95       	reti

0000037a <__vector_29>:
ISR(TIMER3_OVF_vect){ }
     37a:	1f 92       	push	r1
     37c:	0f 92       	push	r0
     37e:	0f b6       	in	r0, 0x3f	; 63
     380:	0f 92       	push	r0
     382:	11 24       	eor	r1, r1
     384:	0f 90       	pop	r0
     386:	0f be       	out	0x3f, r0	; 63
     388:	0f 90       	pop	r0
     38a:	1f 90       	pop	r1
     38c:	18 95       	reti

0000038e <__vector_33>:
	}
}
/*
** interrupt
*/
ISR(TWI_vect){ }
     38e:	1f 92       	push	r1
     390:	0f 92       	push	r0
     392:	0f b6       	in	r0, 0x3f	; 63
     394:	0f 92       	push	r0
     396:	11 24       	eor	r1, r1
     398:	0f 90       	pop	r0
     39a:	0f be       	out	0x3f, r0	; 63
     39c:	0f 90       	pop	r0
     39e:	1f 90       	pop	r1
     3a0:	18 95       	reti

000003a2 <__vector_18>:
void uart1_puts_p(const char *progmem_s )
{
    register char c;
    while ( (c = pgm_read_byte(progmem_s++)) ) 
      uart1_putc(c);
}/* uart1_puts_p */
     3a2:	1f 92       	push	r1
     3a4:	0f 92       	push	r0
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	0f 92       	push	r0
     3aa:	11 24       	eor	r1, r1
     3ac:	0b b6       	in	r0, 0x3b	; 59
     3ae:	0f 92       	push	r0
     3b0:	8f 93       	push	r24
     3b2:	9f 93       	push	r25
     3b4:	ef 93       	push	r30
     3b6:	ff 93       	push	r31
     3b8:	8b b1       	in	r24, 0x0b	; 11
     3ba:	9a b1       	in	r25, 0x0a	; 10
     3bc:	88 71       	andi	r24, 0x18	; 24
     3be:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <UART_LastRxError>
     3c2:	e0 91 76 01 	lds	r30, 0x0176	; 0x800176 <UART_RxHead>
     3c6:	ef 5f       	subi	r30, 0xFF	; 255
     3c8:	ef 71       	andi	r30, 0x1F	; 31
     3ca:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <UART_RxTail>
     3ce:	e8 13       	cpse	r30, r24
     3d0:	04 c0       	rjmp	.+8      	; 0x3da <__vector_18+0x38>
     3d2:	82 e0       	ldi	r24, 0x02	; 2
     3d4:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <UART_LastRxError>
     3d8:	11 c0       	rjmp	.+34     	; 0x3fc <__vector_18+0x5a>
     3da:	9c b1       	in	r25, 0x0c	; 12
     3dc:	e0 93 76 01 	sts	0x0176, r30	; 0x800176 <UART_RxHead>
     3e0:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <UART_LastRxError>
     3e4:	88 23       	and	r24, r24
     3e6:	31 f0       	breq	.+12     	; 0x3f4 <__vector_18+0x52>
     3e8:	f0 e0       	ldi	r31, 0x00	; 0
     3ea:	e7 58       	subi	r30, 0x87	; 135
     3ec:	fe 4f       	sbci	r31, 0xFE	; 254
     3ee:	88 e5       	ldi	r24, 0x58	; 88
     3f0:	80 83       	st	Z, r24
     3f2:	04 c0       	rjmp	.+8      	; 0x3fc <__vector_18+0x5a>
     3f4:	f0 e0       	ldi	r31, 0x00	; 0
     3f6:	e7 58       	subi	r30, 0x87	; 135
     3f8:	fe 4f       	sbci	r31, 0xFE	; 254
     3fa:	90 83       	st	Z, r25
     3fc:	ff 91       	pop	r31
     3fe:	ef 91       	pop	r30
     400:	9f 91       	pop	r25
     402:	8f 91       	pop	r24
     404:	0f 90       	pop	r0
     406:	0b be       	out	0x3b, r0	; 59
     408:	0f 90       	pop	r0
     40a:	0f be       	out	0x3f, r0	; 63
     40c:	0f 90       	pop	r0
     40e:	1f 90       	pop	r1
     410:	18 95       	reti

00000412 <__vector_19>:
     412:	1f 92       	push	r1
     414:	0f 92       	push	r0
     416:	0f b6       	in	r0, 0x3f	; 63
     418:	0f 92       	push	r0
     41a:	11 24       	eor	r1, r1
     41c:	0b b6       	in	r0, 0x3b	; 59
     41e:	0f 92       	push	r0
     420:	8f 93       	push	r24
     422:	9f 93       	push	r25
     424:	ef 93       	push	r30
     426:	ff 93       	push	r31
     428:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <UART_TxHead>
     42c:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <UART_TxTail>
     430:	98 13       	cpse	r25, r24
     432:	02 c0       	rjmp	.+4      	; 0x438 <__vector_19+0x26>
     434:	55 98       	cbi	0x0a, 5	; 10
     436:	0b c0       	rjmp	.+22     	; 0x44e <__vector_19+0x3c>
     438:	e0 91 77 01 	lds	r30, 0x0177	; 0x800177 <UART_TxTail>
     43c:	ef 5f       	subi	r30, 0xFF	; 255
     43e:	ef 71       	andi	r30, 0x1F	; 31
     440:	e0 93 77 01 	sts	0x0177, r30	; 0x800177 <UART_TxTail>
     444:	f0 e0       	ldi	r31, 0x00	; 0
     446:	e7 56       	subi	r30, 0x67	; 103
     448:	fe 4f       	sbci	r31, 0xFE	; 254
     44a:	80 81       	ld	r24, Z
     44c:	8c b9       	out	0x0c, r24	; 12
     44e:	ff 91       	pop	r31
     450:	ef 91       	pop	r30
     452:	9f 91       	pop	r25
     454:	8f 91       	pop	r24
     456:	0f 90       	pop	r0
     458:	0b be       	out	0x3b, r0	; 59
     45a:	0f 90       	pop	r0
     45c:	0f be       	out	0x3f, r0	; 63
     45e:	0f 90       	pop	r0
     460:	1f 90       	pop	r1
     462:	18 95       	reti

00000464 <__vector_30>:
SIGNAL(UART1_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART1 Receive Complete interrupt
Purpose:  called when the UART1 has received a character
**************************************************************************/
{
     464:	1f 92       	push	r1
     466:	0f 92       	push	r0
     468:	0f b6       	in	r0, 0x3f	; 63
     46a:	0f 92       	push	r0
     46c:	11 24       	eor	r1, r1
     46e:	0b b6       	in	r0, 0x3b	; 59
     470:	0f 92       	push	r0
     472:	8f 93       	push	r24
     474:	9f 93       	push	r25
     476:	ef 93       	push	r30
     478:	ff 93       	push	r31
    unsigned char tmphead;
	unsigned char data;
	unsigned char bit9;
    unsigned char usr;
    /* read UART status register and UART data register */
	usr  = UART1_STATUS;
     47a:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    bit9 = UART1_CONTROL;
     47e:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
    bit9 = 0x01 & (bit9>>1);
    /* */
    UART1_LastRxError = (usr & (_BV(FE1)|_BV(DOR1)));
     482:	88 71       	andi	r24, 0x18	; 24
     484:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <UART1_LastRxError>
	/* calculate buffer index */
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
     488:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <UART1_RxHead>
     48c:	ef 5f       	subi	r30, 0xFF	; 255
     48e:	ef 71       	andi	r30, 0x1F	; 31
    if ( tmphead == UART1_RxTail ) {	
     490:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <UART1_RxTail>
     494:	e8 13       	cpse	r30, r24
     496:	04 c0       	rjmp	.+8      	; 0x4a0 <__vector_30+0x3c>
        /* error: receive buffer overflow, caracter is lost*/
        UART1_LastRxError = UART_BUFFER_OVERFLOW >> 8; 
     498:	82 e0       	ldi	r24, 0x02	; 2
     49a:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <UART1_LastRxError>
     49e:	12 c0       	rjmp	.+36     	; 0x4c4 <__vector_30+0x60>
	}else{
		data = UART1_DATA;
     4a0:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
        /* store new index */
        UART1_RxHead = tmphead;
     4a4:	e0 93 31 01 	sts	0x0131, r30	; 0x800131 <UART1_RxHead>
		if(UART1_LastRxError){
     4a8:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <UART1_LastRxError>
     4ac:	88 23       	and	r24, r24
     4ae:	31 f0       	breq	.+12     	; 0x4bc <__vector_30+0x58>
			/* store indication data error in buffer */
			UART1_RxBuf[tmphead] = 'X';
     4b0:	f0 e0       	ldi	r31, 0x00	; 0
     4b2:	ec 5c       	subi	r30, 0xCC	; 204
     4b4:	fe 4f       	sbci	r31, 0xFE	; 254
     4b6:	88 e5       	ldi	r24, 0x58	; 88
     4b8:	80 83       	st	Z, r24
     4ba:	04 c0       	rjmp	.+8      	; 0x4c4 <__vector_30+0x60>
		}else{
			/* store received data in buffer */
			UART1_RxBuf[tmphead] = data;
     4bc:	f0 e0       	ldi	r31, 0x00	; 0
     4be:	ec 5c       	subi	r30, 0xCC	; 204
     4c0:	fe 4f       	sbci	r31, 0xFE	; 254
     4c2:	90 83       	st	Z, r25
		}
    }
}
     4c4:	ff 91       	pop	r31
     4c6:	ef 91       	pop	r30
     4c8:	9f 91       	pop	r25
     4ca:	8f 91       	pop	r24
     4cc:	0f 90       	pop	r0
     4ce:	0b be       	out	0x3b, r0	; 59
     4d0:	0f 90       	pop	r0
     4d2:	0f be       	out	0x3f, r0	; 63
     4d4:	0f 90       	pop	r0
     4d6:	1f 90       	pop	r1
     4d8:	18 95       	reti

000004da <__vector_31>:
SIGNAL(UART1_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART1 Data Register Empty interrupt
Purpose:  called when the UART1 is ready to transmit the next byte
**************************************************************************/
{
     4da:	1f 92       	push	r1
     4dc:	0f 92       	push	r0
     4de:	0f b6       	in	r0, 0x3f	; 63
     4e0:	0f 92       	push	r0
     4e2:	11 24       	eor	r1, r1
     4e4:	0b b6       	in	r0, 0x3b	; 59
     4e6:	0f 92       	push	r0
     4e8:	8f 93       	push	r24
     4ea:	9f 93       	push	r25
     4ec:	ef 93       	push	r30
     4ee:	ff 93       	push	r31
    if ( UART1_TxHead == UART1_TxTail ) {
     4f0:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <UART1_TxHead>
     4f4:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <UART1_TxTail>
     4f8:	98 13       	cpse	r25, r24
     4fa:	06 c0       	rjmp	.+12     	; 0x508 <__vector_31+0x2e>
        /* tx buffer empty, disable UDRE interrupt */
        UART1_CONTROL &= ~_BV(UART1_UDRIE);
     4fc:	ea e9       	ldi	r30, 0x9A	; 154
     4fe:	f0 e0       	ldi	r31, 0x00	; 0
     500:	80 81       	ld	r24, Z
     502:	8f 7d       	andi	r24, 0xDF	; 223
     504:	80 83       	st	Z, r24
     506:	0e c0       	rjmp	.+28     	; 0x524 <__vector_31+0x4a>
    }else{
		/* calculate and store new buffer index */
        UART1_TxTail = (UART1_TxTail + 1) & UART_TX_BUFFER_MASK;
     508:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <UART1_TxTail>
     50c:	8f 5f       	subi	r24, 0xFF	; 255
     50e:	8f 71       	andi	r24, 0x1F	; 31
     510:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <UART1_TxTail>
        /* get one byte from buffer and write it to UART */
		UART1_DATA = UART1_TxBuf[UART1_TxTail];  /* start transmission */
     514:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <UART1_TxTail>
     518:	f0 e0       	ldi	r31, 0x00	; 0
     51a:	ec 5a       	subi	r30, 0xAC	; 172
     51c:	fe 4f       	sbci	r31, 0xFE	; 254
     51e:	80 81       	ld	r24, Z
     520:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
	}
}
     524:	ff 91       	pop	r31
     526:	ef 91       	pop	r30
     528:	9f 91       	pop	r25
     52a:	8f 91       	pop	r24
     52c:	0f 90       	pop	r0
     52e:	0b be       	out	0x3b, r0	; 59
     530:	0f 90       	pop	r0
     532:	0f be       	out	0x3f, r0	; 63
     534:	0f 90       	pop	r0
     536:	1f 90       	pop	r1
     538:	18 95       	reti

0000053a <FUNCpinmatch>:
}
//pinmatch
uint8_t FUNCpinmatch(uint8_t match, uint8_t pin, uint8_t HL)
{
	uint8_t result;
	result=match&pin;
     53a:	68 23       	and	r22, r24
	if(HL){
     53c:	44 23       	and	r20, r20
     53e:	21 f0       	breq	.+8      	; 0x548 <FUNCpinmatch+0xe>
		if(result==match);
     540:	86 17       	cp	r24, r22
     542:	21 f0       	breq	.+8      	; 0x54c <FUNCpinmatch+0x12>
		else
			result=0;
     544:	80 e0       	ldi	r24, 0x00	; 0
     546:	08 95       	ret
	}else{
		if(result)
     548:	61 11       	cpse	r22, r1
			result=0;
     54a:	80 e0       	ldi	r24, 0x00	; 0
		else
			result=match;
	}
	return result;
}
     54c:	08 95       	ret

0000054e <FUNChmerge>:
// hmerge
uint8_t FUNChmerge(uint8_t X, uint8_t Y)
{
	return (X | Y);
}
     54e:	86 2b       	or	r24, r22
     550:	08 95       	ret

00000552 <FUNClmerge>:
// lmerge
uint8_t FUNClmerge(uint8_t X, uint8_t Y)
{
	return (X & Y);
}
     552:	86 23       	and	r24, r22
     554:	08 95       	ret

00000556 <FUNChh>:
uint8_t FUNChh(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi&xf;
	return i;
}
     556:	86 23       	and	r24, r22
     558:	08 95       	ret

0000055a <FUNCll>:
// ll
uint8_t FUNCll(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi|xf;
	return ~i;
     55a:	86 2b       	or	r24, r22
}
     55c:	80 95       	com	r24
     55e:	08 95       	ret

00000560 <FUNClh>:
// lh
uint8_t FUNClh(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi^xf;
     560:	86 27       	eor	r24, r22
	i&=xf;
	return i;
}
     562:	86 23       	and	r24, r22
     564:	08 95       	ret

00000566 <FUNChl>:
// hl
uint8_t FUNChl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xf^xi;
     566:	60 95       	com	r22
	i&=xi;
	return i;
}
     568:	86 23       	and	r24, r22
     56a:	08 95       	ret

0000056c <FUNCdiff>:
// diff
uint8_t FUNCdiff(uint8_t xi, uint8_t xf)
{
	return xf^xi;
}
     56c:	86 27       	eor	r24, r22
     56e:	08 95       	ret

00000570 <FUNCswap>:
// interchange *px and *py
void FUNCswap(long *px, long *py)
{
     570:	cf 92       	push	r12
     572:	df 92       	push	r13
     574:	ef 92       	push	r14
     576:	ff 92       	push	r15
     578:	0f 93       	push	r16
     57a:	1f 93       	push	r17
	long temp;
	temp = *px;
     57c:	fc 01       	movw	r30, r24
     57e:	00 81       	ld	r16, Z
     580:	11 81       	ldd	r17, Z+1	; 0x01
     582:	22 81       	ldd	r18, Z+2	; 0x02
     584:	33 81       	ldd	r19, Z+3	; 0x03
	*px = *py;
     586:	fb 01       	movw	r30, r22
     588:	c0 80       	ld	r12, Z
     58a:	d1 80       	ldd	r13, Z+1	; 0x01
     58c:	e2 80       	ldd	r14, Z+2	; 0x02
     58e:	f3 80       	ldd	r15, Z+3	; 0x03
     590:	fc 01       	movw	r30, r24
     592:	c0 82       	st	Z, r12
     594:	d1 82       	std	Z+1, r13	; 0x01
     596:	e2 82       	std	Z+2, r14	; 0x02
     598:	f3 82       	std	Z+3, r15	; 0x03
	*py = temp;
     59a:	fb 01       	movw	r30, r22
     59c:	00 83       	st	Z, r16
     59e:	11 83       	std	Z+1, r17	; 0x01
     5a0:	22 83       	std	Z+2, r18	; 0x02
     5a2:	33 83       	std	Z+3, r19	; 0x03
}
     5a4:	1f 91       	pop	r17
     5a6:	0f 91       	pop	r16
     5a8:	ff 90       	pop	r15
     5aa:	ef 90       	pop	r14
     5ac:	df 90       	pop	r13
     5ae:	cf 90       	pop	r12
     5b0:	08 95       	ret

000005b2 <FUNCcopy>:
// copy: copy 'from' into 'to'; assume to is big enough
void FUNCcopy(char to[], char from[])
{
	int i;
	i = 0;
	while ((to[i] = from[i]) != '\0')
     5b2:	fb 01       	movw	r30, r22
     5b4:	20 81       	ld	r18, Z
     5b6:	fc 01       	movw	r30, r24
     5b8:	20 83       	st	Z, r18
     5ba:	22 23       	and	r18, r18
     5bc:	39 f0       	breq	.+14     	; 0x5cc <FUNCcopy+0x1a>
     5be:	db 01       	movw	r26, r22
     5c0:	11 96       	adiw	r26, 0x01	; 1
     5c2:	31 96       	adiw	r30, 0x01	; 1
     5c4:	9d 91       	ld	r25, X+
     5c6:	91 93       	st	Z+, r25
     5c8:	91 11       	cpse	r25, r1
     5ca:	fc cf       	rjmp	.-8      	; 0x5c4 <FUNCcopy+0x12>
     5cc:	08 95       	ret

000005ce <FUNCsqueeze>:
		++i;
}
// squeeze: delete all c from s
void FUNCsqueeze(char s[], int c)
{
     5ce:	cf 93       	push	r28
     5d0:	df 93       	push	r29
     5d2:	ec 01       	movw	r28, r24
	int i, j;
	for (i = j = 0; s[i] != '\0'; i++)
     5d4:	98 81       	ld	r25, Y
     5d6:	99 23       	and	r25, r25
     5d8:	99 f0       	breq	.+38     	; 0x600 <FUNCsqueeze+0x32>
     5da:	fe 01       	movw	r30, r28
     5dc:	31 96       	adiw	r30, 0x01	; 1
     5de:	20 e0       	ldi	r18, 0x00	; 0
     5e0:	30 e0       	ldi	r19, 0x00	; 0
		if (s[i] != c)
     5e2:	49 2f       	mov	r20, r25
     5e4:	50 e0       	ldi	r21, 0x00	; 0
     5e6:	46 17       	cp	r20, r22
     5e8:	57 07       	cpc	r21, r23
     5ea:	31 f0       	breq	.+12     	; 0x5f8 <FUNCsqueeze+0x2a>
			s[j++] = s[i];
     5ec:	de 01       	movw	r26, r28
     5ee:	a2 0f       	add	r26, r18
     5f0:	b3 1f       	adc	r27, r19
     5f2:	9c 93       	st	X, r25
     5f4:	2f 5f       	subi	r18, 0xFF	; 255
     5f6:	3f 4f       	sbci	r19, 0xFF	; 255
}
// squeeze: delete all c from s
void FUNCsqueeze(char s[], int c)
{
	int i, j;
	for (i = j = 0; s[i] != '\0'; i++)
     5f8:	91 91       	ld	r25, Z+
     5fa:	91 11       	cpse	r25, r1
     5fc:	f2 cf       	rjmp	.-28     	; 0x5e2 <FUNCsqueeze+0x14>
     5fe:	02 c0       	rjmp	.+4      	; 0x604 <FUNCsqueeze+0x36>
     600:	20 e0       	ldi	r18, 0x00	; 0
     602:	30 e0       	ldi	r19, 0x00	; 0
		if (s[i] != c)
			s[j++] = s[i];
		s[j] = '\0';
     604:	fe 01       	movw	r30, r28
     606:	e2 0f       	add	r30, r18
     608:	f3 1f       	adc	r31, r19
     60a:	10 82       	st	Z, r1
}
     60c:	df 91       	pop	r29
     60e:	cf 91       	pop	r28
     610:	08 95       	ret

00000612 <FUNCshellsort>:
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
     612:	2f 92       	push	r2
     614:	3f 92       	push	r3
     616:	4f 92       	push	r4
     618:	5f 92       	push	r5
     61a:	6f 92       	push	r6
     61c:	7f 92       	push	r7
     61e:	8f 92       	push	r8
     620:	9f 92       	push	r9
     622:	af 92       	push	r10
     624:	bf 92       	push	r11
     626:	cf 92       	push	r12
     628:	df 92       	push	r13
     62a:	ef 92       	push	r14
     62c:	ff 92       	push	r15
     62e:	0f 93       	push	r16
     630:	1f 93       	push	r17
     632:	cf 93       	push	r28
     634:	df 93       	push	r29
     636:	00 d0       	rcall	.+0      	; 0x638 <FUNCshellsort+0x26>
     638:	00 d0       	rcall	.+0      	; 0x63a <FUNCshellsort+0x28>
     63a:	cd b7       	in	r28, 0x3d	; 61
     63c:	de b7       	in	r29, 0x3e	; 62
     63e:	2c 01       	movw	r4, r24
     640:	1b 01       	movw	r2, r22
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
     642:	4b 01       	movw	r8, r22
     644:	77 23       	and	r23, r23
     646:	1c f4       	brge	.+6      	; 0x64e <FUNCshellsort+0x3c>
     648:	2f ef       	ldi	r18, 0xFF	; 255
     64a:	82 1a       	sub	r8, r18
     64c:	92 0a       	sbc	r9, r18
     64e:	95 94       	asr	r9
     650:	87 94       	ror	r8
     652:	18 14       	cp	r1, r8
     654:	19 04       	cpc	r1, r9
     656:	0c f4       	brge	.+2      	; 0x65a <FUNCshellsort+0x48>
     658:	51 c0       	rjmp	.+162    	; 0x6fc <FUNCshellsort+0xea>
     65a:	6a c0       	rjmp	.+212    	; 0x730 <FUNCshellsort+0x11e>
		for (i = gap; i < n; i++)
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
     65c:	96 01       	movw	r18, r12
     65e:	dd 20       	and	r13, r13
     660:	9c f1       	brlt	.+102    	; 0x6c8 <FUNCshellsort+0xb6>
     662:	f5 01       	movw	r30, r10
     664:	40 81       	ld	r20, Z
     666:	51 81       	ldd	r21, Z+1	; 0x01
     668:	f4 01       	movw	r30, r8
     66a:	60 81       	ld	r22, Z
     66c:	71 81       	ldd	r23, Z+1	; 0x01
     66e:	64 17       	cp	r22, r20
     670:	75 07       	cpc	r23, r21
     672:	54 f5       	brge	.+84     	; 0x6c8 <FUNCshellsort+0xb6>
     674:	8c 01       	movw	r16, r24
     676:	0a 0d       	add	r16, r10
     678:	1b 1d       	adc	r17, r11
     67a:	d4 01       	movw	r26, r8
     67c:	bc 82       	std	Y+4, r11	; 0x04
     67e:	ab 82       	std	Y+3, r10	; 0x03
     680:	ba 82       	std	Y+2, r11	; 0x02
     682:	a9 82       	std	Y+1, r10	; 0x01
				temp = v[j];
				v[j] = v[j+gap];
     684:	eb 81       	ldd	r30, Y+3	; 0x03
     686:	fc 81       	ldd	r31, Y+4	; 0x04
     688:	71 83       	std	Z+1, r23	; 0x01
     68a:	60 83       	st	Z, r22
				v[j+gap] = temp;
     68c:	11 96       	adiw	r26, 0x01	; 1
     68e:	5c 93       	st	X, r21
     690:	4e 93       	st	-X, r20
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
		for (i = gap; i < n; i++)
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
     692:	2e 19       	sub	r18, r14
     694:	3f 09       	sbc	r19, r15
     696:	c2 f0       	brmi	.+48     	; 0x6c8 <FUNCshellsort+0xb6>
     698:	f8 01       	movw	r30, r16
     69a:	40 81       	ld	r20, Z
     69c:	51 81       	ldd	r21, Z+1	; 0x01
     69e:	e9 81       	ldd	r30, Y+1	; 0x01
     6a0:	fa 81       	ldd	r31, Y+2	; 0x02
     6a2:	60 81       	ld	r22, Z
     6a4:	71 81       	ldd	r23, Z+1	; 0x01
     6a6:	08 0f       	add	r16, r24
     6a8:	19 1f       	adc	r17, r25
     6aa:	e8 0f       	add	r30, r24
     6ac:	f9 1f       	adc	r31, r25
     6ae:	fa 83       	std	Y+2, r31	; 0x02
     6b0:	e9 83       	std	Y+1, r30	; 0x01
     6b2:	eb 81       	ldd	r30, Y+3	; 0x03
     6b4:	fc 81       	ldd	r31, Y+4	; 0x04
     6b6:	e8 0f       	add	r30, r24
     6b8:	f9 1f       	adc	r31, r25
     6ba:	fc 83       	std	Y+4, r31	; 0x04
     6bc:	eb 83       	std	Y+3, r30	; 0x03
     6be:	a8 0f       	add	r26, r24
     6c0:	b9 1f       	adc	r27, r25
     6c2:	64 17       	cp	r22, r20
     6c4:	75 07       	cpc	r23, r21
     6c6:	f4 f2       	brlt	.-68     	; 0x684 <FUNCshellsort+0x72>
     6c8:	ff ef       	ldi	r31, 0xFF	; 255
     6ca:	cf 1a       	sub	r12, r31
     6cc:	df 0a       	sbc	r13, r31
     6ce:	22 e0       	ldi	r18, 0x02	; 2
     6d0:	a2 0e       	add	r10, r18
     6d2:	b1 1c       	adc	r11, r1
     6d4:	e2 e0       	ldi	r30, 0x02	; 2
     6d6:	8e 0e       	add	r8, r30
     6d8:	91 1c       	adc	r9, r1
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
		for (i = gap; i < n; i++)
     6da:	c6 14       	cp	r12, r6
     6dc:	d7 04       	cpc	r13, r7
     6de:	09 f0       	breq	.+2      	; 0x6e2 <FUNCshellsort+0xd0>
     6e0:	bd cf       	rjmp	.-134    	; 0x65c <FUNCshellsort+0x4a>
}
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
     6e2:	47 01       	movw	r8, r14
     6e4:	ff 20       	and	r15, r15
     6e6:	1c f4       	brge	.+6      	; 0x6ee <FUNCshellsort+0xdc>
     6e8:	ff ef       	ldi	r31, 0xFF	; 255
     6ea:	8f 1a       	sub	r8, r31
     6ec:	9f 0a       	sbc	r9, r31
     6ee:	95 94       	asr	r9
     6f0:	87 94       	ror	r8
     6f2:	18 14       	cp	r1, r8
     6f4:	19 04       	cpc	r1, r9
     6f6:	e4 f4       	brge	.+56     	; 0x730 <FUNCshellsort+0x11e>
     6f8:	74 01       	movw	r14, r8
     6fa:	01 c0       	rjmp	.+2      	; 0x6fe <FUNCshellsort+0xec>
     6fc:	74 01       	movw	r14, r8
		for (i = gap; i < n; i++)
     6fe:	82 14       	cp	r8, r2
     700:	93 04       	cpc	r9, r3
     702:	7c f7       	brge	.-34     	; 0x6e2 <FUNCshellsort+0xd0>
     704:	64 01       	movw	r12, r8
     706:	ce 18       	sub	r12, r14
     708:	df 08       	sbc	r13, r15
     70a:	56 01       	movw	r10, r12
     70c:	aa 0c       	add	r10, r10
     70e:	bb 1c       	adc	r11, r11
     710:	a4 0c       	add	r10, r4
     712:	b5 1c       	adc	r11, r5
     714:	88 0c       	add	r8, r8
     716:	99 1c       	adc	r9, r9
     718:	84 0c       	add	r8, r4
     71a:	95 1c       	adc	r9, r5
     71c:	31 01       	movw	r6, r2
     71e:	6e 18       	sub	r6, r14
     720:	7f 08       	sbc	r7, r15
     722:	c7 01       	movw	r24, r14
     724:	88 0f       	add	r24, r24
     726:	99 1f       	adc	r25, r25
     728:	91 95       	neg	r25
     72a:	81 95       	neg	r24
     72c:	91 09       	sbc	r25, r1
     72e:	96 cf       	rjmp	.-212    	; 0x65c <FUNCshellsort+0x4a>
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
				temp = v[j];
				v[j] = v[j+gap];
				v[j+gap] = temp;
			}
}
     730:	0f 90       	pop	r0
     732:	0f 90       	pop	r0
     734:	0f 90       	pop	r0
     736:	0f 90       	pop	r0
     738:	df 91       	pop	r29
     73a:	cf 91       	pop	r28
     73c:	1f 91       	pop	r17
     73e:	0f 91       	pop	r16
     740:	ff 90       	pop	r15
     742:	ef 90       	pop	r14
     744:	df 90       	pop	r13
     746:	cf 90       	pop	r12
     748:	bf 90       	pop	r11
     74a:	af 90       	pop	r10
     74c:	9f 90       	pop	r9
     74e:	8f 90       	pop	r8
     750:	7f 90       	pop	r7
     752:	6f 90       	pop	r6
     754:	5f 90       	pop	r5
     756:	4f 90       	pop	r4
     758:	3f 90       	pop	r3
     75a:	2f 90       	pop	r2
     75c:	08 95       	ret

0000075e <FUNCpmax>:
	if(a1 > a2){
		biggest = a1;
	}else{
		biggest = a2;
	}
	return biggest;
     75e:	86 17       	cp	r24, r22
     760:	97 07       	cpc	r25, r23
     762:	0c f4       	brge	.+2      	; 0x766 <FUNCpmax+0x8>
     764:	cb 01       	movw	r24, r22
}
     766:	08 95       	ret

00000768 <FUNCgcd>:
// common divisor
int FUNCgcd (int u, int v)
{
     768:	9b 01       	movw	r18, r22
	int temp;
	while ( v != 0 ) {
     76a:	67 2b       	or	r22, r23
     76c:	11 f4       	brne	.+4      	; 0x772 <FUNCgcd+0xa>
     76e:	08 95       	ret
		temp = u % v;
		u = v;
		v = temp;
     770:	9a 01       	movw	r18, r20
// common divisor
int FUNCgcd (int u, int v)
{
	int temp;
	while ( v != 0 ) {
		temp = u % v;
     772:	b9 01       	movw	r22, r18
     774:	f9 d6       	rcall	.+3570   	; 0x1568 <__divmodhi4>
     776:	ac 01       	movw	r20, r24
     778:	82 2f       	mov	r24, r18
     77a:	93 2f       	mov	r25, r19
}
// common divisor
int FUNCgcd (int u, int v)
{
	int temp;
	while ( v != 0 ) {
     77c:	41 15       	cp	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	b9 f7       	brne	.-18     	; 0x770 <FUNCgcd+0x8>
		temp = u % v;
		u = v;
		v = temp;
	}
	return u;
}
     782:	08 95       	ret

00000784 <FUNCstrToInt>:
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
     784:	fc 01       	movw	r30, r24
	int i, intValue, result = 0;
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
     786:	90 81       	ld	r25, Z
     788:	80 ed       	ldi	r24, 0xD0	; 208
     78a:	89 0f       	add	r24, r25
     78c:	8a 30       	cpi	r24, 0x0A	; 10
     78e:	d0 f4       	brcc	.+52     	; 0x7c4 <FUNCstrToInt+0x40>
     790:	31 96       	adiw	r30, 0x01	; 1
     792:	20 e0       	ldi	r18, 0x00	; 0
     794:	30 e0       	ldi	r19, 0x00	; 0
		intValue = string[i] - '0';
		result = result * 10 + intValue;
     796:	a9 01       	movw	r20, r18
     798:	44 0f       	add	r20, r20
     79a:	55 1f       	adc	r21, r21
     79c:	22 0f       	add	r18, r18
     79e:	33 1f       	adc	r19, r19
     7a0:	22 0f       	add	r18, r18
     7a2:	33 1f       	adc	r19, r19
     7a4:	22 0f       	add	r18, r18
     7a6:	33 1f       	adc	r19, r19
     7a8:	42 0f       	add	r20, r18
     7aa:	53 1f       	adc	r21, r19
     7ac:	29 2f       	mov	r18, r25
     7ae:	30 e0       	ldi	r19, 0x00	; 0
     7b0:	20 53       	subi	r18, 0x30	; 48
     7b2:	31 09       	sbc	r19, r1
     7b4:	24 0f       	add	r18, r20
     7b6:	35 1f       	adc	r19, r21
}
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
	int i, intValue, result = 0;
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
     7b8:	91 91       	ld	r25, Z+
     7ba:	80 ed       	ldi	r24, 0xD0	; 208
     7bc:	89 0f       	add	r24, r25
     7be:	8a 30       	cpi	r24, 0x0A	; 10
     7c0:	50 f3       	brcs	.-44     	; 0x796 <FUNCstrToInt+0x12>
     7c2:	02 c0       	rjmp	.+4      	; 0x7c8 <FUNCstrToInt+0x44>
	return u;
}
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
	int i, intValue, result = 0;
     7c4:	20 e0       	ldi	r18, 0x00	; 0
     7c6:	30 e0       	ldi	r19, 0x00	; 0
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
		intValue = string[i] - '0';
		result = result * 10 + intValue;
	}
	return result;
}
     7c8:	c9 01       	movw	r24, r18
     7ca:	08 95       	ret

000007cc <FUNCfilter>:
uint8_t FUNCfilter(uint8_t mask, uint8_t data)
{
	uint8_t Z;
	Z=mask & data;
	return Z;
}
     7cc:	86 23       	and	r24, r22
     7ce:	08 95       	ret

000007d0 <FUNCticks>:
// ticks
unsigned int FUNCticks(unsigned int num)
{
	unsigned int count;
	for(count=0;count<num;count++)
     7d0:	00 97       	sbiw	r24, 0x00	; 0
     7d2:	39 f0       	breq	.+14     	; 0x7e2 <FUNCticks+0x12>
     7d4:	20 e0       	ldi	r18, 0x00	; 0
     7d6:	30 e0       	ldi	r19, 0x00	; 0
     7d8:	2f 5f       	subi	r18, 0xFF	; 255
     7da:	3f 4f       	sbci	r19, 0xFF	; 255
     7dc:	82 17       	cp	r24, r18
     7de:	93 07       	cpc	r25, r19
     7e0:	d9 f7       	brne	.-10     	; 0x7d8 <FUNCticks+0x8>
		;
	return count;
}
     7e2:	08 95       	ret

000007e4 <FUNCtwocomptoint8bit>:
// Two's Complement function
int FUNCtwocomptoint8bit(int twoscomp){
  
  //Let's see if the byte is negative
  if (twoscomp & 0B10000000){
     7e4:	87 ff       	sbrs	r24, 7
     7e6:	08 c0       	rjmp	.+16     	; 0x7f8 <FUNCtwocomptoint8bit+0x14>
    //Invert
    twoscomp = ~twoscomp + 1;
     7e8:	91 95       	neg	r25
     7ea:	81 95       	neg	r24
     7ec:	91 09       	sbc	r25, r1
	twoscomp = (twoscomp & 0B11111111);
    //Cast as int and multiply by negative one
    int value = (int)(twoscomp)*(-1);
     7ee:	99 27       	eor	r25, r25
     7f0:	91 95       	neg	r25
     7f2:	81 95       	neg	r24
     7f4:	91 09       	sbc	r25, r1
    return value;
     7f6:	08 95       	ret
    //Byte is non-negative, therefore convert to decimal and display
    //Make sure we are never over 1279
    twoscomp = (twoscomp & 0B01111111);
    //Cast as int and return
    int value = (int)(twoscomp);
    return value;
     7f8:	8f 77       	andi	r24, 0x7F	; 127
     7fa:	99 27       	eor	r25, r25
  }
}
     7fc:	08 95       	ret

000007fe <FUNCtwocomptoint10bit>:
// Two's Complement function, shifts 10 bit binary to signed integers (-512 to 512)
int FUNCtwocomptoint10bit(int twoscomp){
	
  //Let's see if the byte is negative
  if (twoscomp & 0x200){
     7fe:	91 ff       	sbrs	r25, 1
     800:	08 c0       	rjmp	.+16     	; 0x812 <FUNCtwocomptoint10bit+0x14>
    //Invert
    twoscomp = ~twoscomp + 1;
     802:	91 95       	neg	r25
     804:	81 95       	neg	r24
     806:	91 09       	sbc	r25, r1
    twoscomp = (twoscomp & 0x3FF);
    //Cast as int and multiply by negative one
    int value = (int)(twoscomp)*(-1);
     808:	93 70       	andi	r25, 0x03	; 3
     80a:	91 95       	neg	r25
     80c:	81 95       	neg	r24
     80e:	91 09       	sbc	r25, r1
    return value;
     810:	08 95       	ret
    //Byte is non-negative, therefore convert to decimal and display
    twoscomp = (twoscomp & 0x1FF);
    //Cast as int and return
    //Serial.println(twoscomp);
    int value = (int)(twoscomp);
    return value;
     812:	91 70       	andi	r25, 0x01	; 1
  }
}
     814:	08 95       	ret

00000816 <FUNCtwocomptointnbit>:
// Two's Complement function, nbits
int FUNCtwocomptointnbit(int twoscomp, uint8_t nbits){
  unsigned int signmask;
  unsigned int mask;
  signmask = (1<<(nbits-1));
     816:	61 50       	subi	r22, 0x01	; 1
     818:	21 e0       	ldi	r18, 0x01	; 1
     81a:	30 e0       	ldi	r19, 0x00	; 0
     81c:	02 c0       	rjmp	.+4      	; 0x822 <FUNCtwocomptointnbit+0xc>
     81e:	22 0f       	add	r18, r18
     820:	33 1f       	adc	r19, r19
     822:	6a 95       	dec	r22
     824:	e2 f7       	brpl	.-8      	; 0x81e <FUNCtwocomptointnbit+0x8>
  mask=signmask-1;
     826:	a9 01       	movw	r20, r18
     828:	41 50       	subi	r20, 0x01	; 1
     82a:	51 09       	sbc	r21, r1
  //Let's see if the number is negative
  if (twoscomp & signmask){
     82c:	b9 01       	movw	r22, r18
     82e:	68 23       	and	r22, r24
     830:	79 23       	and	r23, r25
     832:	67 2b       	or	r22, r23
     834:	29 f0       	breq	.+10     	; 0x840 <FUNCtwocomptointnbit+0x2a>
	twoscomp &= mask;
    twoscomp -= signmask;
     836:	84 23       	and	r24, r20
     838:	95 23       	and	r25, r21
     83a:	82 1b       	sub	r24, r18
     83c:	93 0b       	sbc	r25, r19
     83e:	08 95       	ret
  }else{
	  twoscomp &= mask;
     840:	84 23       	and	r24, r20
     842:	95 23       	and	r25, r21
  }
  return twoscomp;
}
     844:	08 95       	ret

00000846 <FUNCdec2bcd>:
// Convert Decimal to Binary Coded Decimal (BCD)
char FUNCdec2bcd(char num)
{
	return ((num/10 * 16) + (num % 10));
     846:	9d ec       	ldi	r25, 0xCD	; 205
     848:	89 9f       	mul	r24, r25
     84a:	91 2d       	mov	r25, r1
     84c:	11 24       	eor	r1, r1
     84e:	96 95       	lsr	r25
     850:	96 95       	lsr	r25
     852:	96 95       	lsr	r25
     854:	39 2f       	mov	r19, r25
     856:	33 0f       	add	r19, r19
     858:	23 2f       	mov	r18, r19
     85a:	22 0f       	add	r18, r18
     85c:	22 0f       	add	r18, r18
     85e:	23 0f       	add	r18, r19
     860:	82 1b       	sub	r24, r18
}
     862:	20 e1       	ldi	r18, 0x10	; 16
     864:	92 9f       	mul	r25, r18
     866:	80 0d       	add	r24, r0
     868:	11 24       	eor	r1, r1
     86a:	08 95       	ret

0000086c <FUNCbcd2dec>:
// Convert Binary Coded Decimal (BCD) to Decimal
char FUNCbcd2dec(char num)
{
	return ((num/16 * 10) + (num % 16));
     86c:	98 2f       	mov	r25, r24
     86e:	92 95       	swap	r25
     870:	9f 70       	andi	r25, 0x0F	; 15
     872:	99 0f       	add	r25, r25
     874:	29 2f       	mov	r18, r25
     876:	22 0f       	add	r18, r18
     878:	22 0f       	add	r18, r18
     87a:	92 0f       	add	r25, r18
     87c:	8f 70       	andi	r24, 0x0F	; 15
}
     87e:	89 0f       	add	r24, r25
     880:	08 95       	ret

00000882 <FUNCresizestr>:
char* FUNCresizestr(char *string, int size)
{
     882:	fc 01       	movw	r30, r24
	int i;
	FUNCstr[size]='\0';
     884:	db 01       	movw	r26, r22
     886:	a7 54       	subi	r26, 0x47	; 71
     888:	be 4f       	sbci	r27, 0xFE	; 254
     88a:	1c 92       	st	X, r1
	for(i=0;i<size;i++){
     88c:	16 16       	cp	r1, r22
     88e:	17 06       	cpc	r1, r23
     890:	14 f5       	brge	.+68     	; 0x8d6 <FUNCresizestr+0x54>
		if(*(string+i)=='\0'){
     892:	90 81       	ld	r25, Z
     894:	91 11       	cpse	r25, r1
     896:	0c c0       	rjmp	.+24     	; 0x8b0 <FUNCresizestr+0x2e>
     898:	17 c0       	rjmp	.+46     	; 0x8c8 <FUNCresizestr+0x46>
     89a:	91 91       	ld	r25, Z+
     89c:	91 11       	cpse	r25, r1
     89e:	0d c0       	rjmp	.+26     	; 0x8ba <FUNCresizestr+0x38>
     8a0:	15 c0       	rjmp	.+42     	; 0x8cc <FUNCresizestr+0x4a>
			for(;i<size;i++){
				FUNCstr[i]=' ';
     8a2:	81 93       	st	Z+, r24
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
		if(*(string+i)=='\0'){
			for(;i<size;i++){
     8a4:	2f 5f       	subi	r18, 0xFF	; 255
     8a6:	3f 4f       	sbci	r19, 0xFF	; 255
     8a8:	26 17       	cp	r18, r22
     8aa:	37 07       	cpc	r19, r23
     8ac:	d4 f3       	brlt	.-12     	; 0x8a2 <FUNCresizestr+0x20>
     8ae:	13 c0       	rjmp	.+38     	; 0x8d6 <FUNCresizestr+0x54>
     8b0:	a9 eb       	ldi	r26, 0xB9	; 185
     8b2:	b1 e0       	ldi	r27, 0x01	; 1
     8b4:	31 96       	adiw	r30, 0x01	; 1
char* FUNCresizestr(char *string, int size)
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
		if(*(string+i)=='\0'){
     8b6:	20 e0       	ldi	r18, 0x00	; 0
     8b8:	30 e0       	ldi	r19, 0x00	; 0
			for(;i<size;i++){
				FUNCstr[i]=' ';
			}
			break;
		}
		FUNCstr[i]=*(string+i);
     8ba:	9d 93       	st	X+, r25
}
char* FUNCresizestr(char *string, int size)
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
     8bc:	2f 5f       	subi	r18, 0xFF	; 255
     8be:	3f 4f       	sbci	r19, 0xFF	; 255
     8c0:	62 17       	cp	r22, r18
     8c2:	73 07       	cpc	r23, r19
     8c4:	51 f7       	brne	.-44     	; 0x89a <FUNCresizestr+0x18>
     8c6:	07 c0       	rjmp	.+14     	; 0x8d6 <FUNCresizestr+0x54>
     8c8:	20 e0       	ldi	r18, 0x00	; 0
     8ca:	30 e0       	ldi	r19, 0x00	; 0
     8cc:	f9 01       	movw	r30, r18
     8ce:	e7 54       	subi	r30, 0x47	; 71
     8d0:	fe 4f       	sbci	r31, 0xFE	; 254
		if(*(string+i)=='\0'){
			for(;i<size;i++){
				FUNCstr[i]=' ';
     8d2:	80 e2       	ldi	r24, 0x20	; 32
     8d4:	e6 cf       	rjmp	.-52     	; 0x8a2 <FUNCresizestr+0x20>
			break;
		}
		FUNCstr[i]=*(string+i);
	}
	return FUNCstr;
}
     8d6:	89 eb       	ldi	r24, 0xB9	; 185
     8d8:	91 e0       	ldi	r25, 0x01	; 1
     8da:	08 95       	ret

000008dc <FUNCtrimmer>:
long FUNCtrimmer(long x, long in_min, long in_max, long out_min, long out_max)
/*
	same as arduino map function.
*/
{
     8dc:	4f 92       	push	r4
     8de:	5f 92       	push	r5
     8e0:	6f 92       	push	r6
     8e2:	7f 92       	push	r7
     8e4:	af 92       	push	r10
     8e6:	bf 92       	push	r11
     8e8:	cf 92       	push	r12
     8ea:	df 92       	push	r13
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	cf 93       	push	r28
     8f6:	df 93       	push	r29
     8f8:	cd b7       	in	r28, 0x3d	; 61
     8fa:	de b7       	in	r29, 0x3e	; 62
     8fc:	29 01       	movw	r4, r18
     8fe:	3a 01       	movw	r6, r20
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     900:	9b 01       	movw	r18, r22
     902:	ac 01       	movw	r20, r24
     904:	24 19       	sub	r18, r4
     906:	35 09       	sbc	r19, r5
     908:	46 09       	sbc	r20, r6
     90a:	57 09       	sbc	r21, r7
     90c:	89 89       	ldd	r24, Y+17	; 0x11
     90e:	9a 89       	ldd	r25, Y+18	; 0x12
     910:	ab 89       	ldd	r26, Y+19	; 0x13
     912:	bc 89       	ldd	r27, Y+20	; 0x14
     914:	bc 01       	movw	r22, r24
     916:	cd 01       	movw	r24, r26
     918:	6a 19       	sub	r22, r10
     91a:	7b 09       	sbc	r23, r11
     91c:	8c 09       	sbc	r24, r12
     91e:	9d 09       	sbc	r25, r13
     920:	00 d6       	rcall	.+3072   	; 0x1522 <__mulsi3>
     922:	a8 01       	movw	r20, r16
     924:	97 01       	movw	r18, r14
     926:	24 19       	sub	r18, r4
     928:	35 09       	sbc	r19, r5
     92a:	46 09       	sbc	r20, r6
     92c:	57 09       	sbc	r21, r7
     92e:	51 d6       	rcall	.+3234   	; 0x15d2 <__divmodsi4>
     930:	ca 01       	movw	r24, r20
     932:	b9 01       	movw	r22, r18
     934:	6a 0d       	add	r22, r10
     936:	7b 1d       	adc	r23, r11
     938:	8c 1d       	adc	r24, r12
     93a:	9d 1d       	adc	r25, r13
}
     93c:	df 91       	pop	r29
     93e:	cf 91       	pop	r28
     940:	1f 91       	pop	r17
     942:	0f 91       	pop	r16
     944:	ff 90       	pop	r15
     946:	ef 90       	pop	r14
     948:	df 90       	pop	r13
     94a:	cf 90       	pop	r12
     94c:	bf 90       	pop	r11
     94e:	af 90       	pop	r10
     950:	7f 90       	pop	r7
     952:	6f 90       	pop	r6
     954:	5f 90       	pop	r5
     956:	4f 90       	pop	r4
     958:	08 95       	ret

0000095a <Pwr>:
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
     95a:	70 e0       	ldi	r23, 0x00	; 0
     95c:	61 15       	cp	r22, r1
     95e:	71 05       	cpc	r23, r1
     960:	99 f0       	breq	.+38     	; 0x988 <Pwr+0x2e>
     962:	41 e0       	ldi	r20, 0x01	; 1
     964:	50 e0       	ldi	r21, 0x00	; 0
     966:	21 e0       	ldi	r18, 0x01	; 1
     968:	30 e0       	ldi	r19, 0x00	; 0
        p = p * bs;
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	fa 01       	movw	r30, r20
     96e:	e8 9f       	mul	r30, r24
     970:	a0 01       	movw	r20, r0
     972:	e9 9f       	mul	r30, r25
     974:	50 0d       	add	r21, r0
     976:	f8 9f       	mul	r31, r24
     978:	50 0d       	add	r21, r0
     97a:	11 24       	eor	r1, r1
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
     97c:	2f 5f       	subi	r18, 0xFF	; 255
     97e:	3f 4f       	sbci	r19, 0xFF	; 255
     980:	62 17       	cp	r22, r18
     982:	73 07       	cpc	r23, r19
     984:	98 f7       	brcc	.-26     	; 0x96c <Pwr+0x12>
     986:	02 c0       	rjmp	.+4      	; 0x98c <Pwr+0x32>
}
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
     988:	41 e0       	ldi	r20, 0x01	; 1
     98a:	50 e0       	ldi	r21, 0x00	; 0
    for (i = 1; i <= n; ++i)
        p = p * bs;
    return p;
}
     98c:	ca 01       	movw	r24, r20
     98e:	08 95       	ret

00000990 <StringLength>:
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
	while ( string[count] != '\0' )
     990:	fc 01       	movw	r30, r24
     992:	20 81       	ld	r18, Z
     994:	22 23       	and	r18, r18
     996:	41 f0       	breq	.+16     	; 0x9a8 <StringLength+0x18>
     998:	31 96       	adiw	r30, 0x01	; 1
     99a:	80 e0       	ldi	r24, 0x00	; 0
     99c:	90 e0       	ldi	r25, 0x00	; 0
		++count;
     99e:	01 96       	adiw	r24, 0x01	; 1
}
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
	while ( string[count] != '\0' )
     9a0:	21 91       	ld	r18, Z+
     9a2:	21 11       	cpse	r18, r1
     9a4:	fc cf       	rjmp	.-8      	; 0x99e <StringLength+0xe>
     9a6:	08 95       	ret
    return p;
}
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	90 e0       	ldi	r25, 0x00	; 0
	while ( string[count] != '\0' )
		++count;
	return count;
}
     9ac:	08 95       	ret

000009ae <FUNCtrim>:
	Reverse(FUNCstr);
	return FUNCstr;
}
// trim: remove trailing blanks, tabs, newlines
int FUNCtrim(char s[])
{
     9ae:	cf 93       	push	r28
     9b0:	df 93       	push	r29
     9b2:	ec 01       	movw	r28, r24
	int n;
	for (n = StringLength(s)-1; n >= 0; n--)
     9b4:	ed df       	rcall	.-38     	; 0x990 <StringLength>
     9b6:	9c 01       	movw	r18, r24
     9b8:	21 50       	subi	r18, 0x01	; 1
     9ba:	31 09       	sbc	r19, r1
     9bc:	62 f0       	brmi	.+24     	; 0x9d6 <FUNCtrim+0x28>
     9be:	fe 01       	movw	r30, r28
     9c0:	e8 0f       	add	r30, r24
     9c2:	f9 1f       	adc	r31, r25
		if (s[n] != ' ' && s[n] != '\t' && s[n] != '\n')
     9c4:	92 91       	ld	r25, -Z
     9c6:	90 32       	cpi	r25, 0x20	; 32
     9c8:	19 f0       	breq	.+6      	; 0x9d0 <FUNCtrim+0x22>
     9ca:	99 50       	subi	r25, 0x09	; 9
     9cc:	92 30       	cpi	r25, 0x02	; 2
     9ce:	18 f4       	brcc	.+6      	; 0x9d6 <FUNCtrim+0x28>
}
// trim: remove trailing blanks, tabs, newlines
int FUNCtrim(char s[])
{
	int n;
	for (n = StringLength(s)-1; n >= 0; n--)
     9d0:	21 50       	subi	r18, 0x01	; 1
     9d2:	31 09       	sbc	r19, r1
     9d4:	b8 f7       	brcc	.-18     	; 0x9c4 <FUNCtrim+0x16>
		if (s[n] != ' ' && s[n] != '\t' && s[n] != '\n')
			break;
	s[n+1] = '\0';
     9d6:	c2 0f       	add	r28, r18
     9d8:	d3 1f       	adc	r29, r19
     9da:	19 82       	std	Y+1, r1	; 0x01
	return n;
}
     9dc:	c9 01       	movw	r24, r18
     9de:	df 91       	pop	r29
     9e0:	cf 91       	pop	r28
     9e2:	08 95       	ret

000009e4 <Reverse>:
		++count;
	return count;
}
// reverse: reverse string s in place
void Reverse(char s[])
{
     9e4:	cf 93       	push	r28
     9e6:	df 93       	push	r29
     9e8:	ec 01       	movw	r28, r24
	int c, i, j;
	for (i = 0, j = StringLength(s)-1; i < j; i++, j--){
     9ea:	d2 df       	rcall	.-92     	; 0x990 <StringLength>
     9ec:	9c 01       	movw	r18, r24
     9ee:	21 50       	subi	r18, 0x01	; 1
     9f0:	31 09       	sbc	r19, r1
     9f2:	12 16       	cp	r1, r18
     9f4:	13 06       	cpc	r1, r19
     9f6:	84 f4       	brge	.+32     	; 0xa18 <Reverse+0x34>
     9f8:	de 01       	movw	r26, r28
     9fa:	a8 0f       	add	r26, r24
     9fc:	b9 1f       	adc	r27, r25
     9fe:	fe 01       	movw	r30, r28
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	90 e0       	ldi	r25, 0x00	; 0
		c = s[i];
     a04:	40 81       	ld	r20, Z
		s[i] = s[j];
     a06:	5e 91       	ld	r21, -X
     a08:	51 93       	st	Z+, r21
		s[j] = c;
     a0a:	4c 93       	st	X, r20
}
// reverse: reverse string s in place
void Reverse(char s[])
{
	int c, i, j;
	for (i = 0, j = StringLength(s)-1; i < j; i++, j--){
     a0c:	01 96       	adiw	r24, 0x01	; 1
     a0e:	21 50       	subi	r18, 0x01	; 1
     a10:	31 09       	sbc	r19, r1
     a12:	82 17       	cp	r24, r18
     a14:	93 07       	cpc	r25, r19
     a16:	b4 f3       	brlt	.-20     	; 0xa04 <Reverse+0x20>
		c = s[i];
		s[i] = s[j];
		s[j] = c;
	}
}
     a18:	df 91       	pop	r29
     a1a:	cf 91       	pop	r28
     a1c:	08 95       	ret

00000a1e <FUNCi32toa>:
				v[j+gap] = temp;
			}
}
// i32toa: convert n to characters in s
char* FUNCi32toa(int32_t n)
{
     a1e:	8f 92       	push	r8
     a20:	9f 92       	push	r9
     a22:	af 92       	push	r10
     a24:	bf 92       	push	r11
     a26:	cf 92       	push	r12
     a28:	df 92       	push	r13
     a2a:	ef 92       	push	r14
     a2c:	ff 92       	push	r15
     a2e:	0f 93       	push	r16
     a30:	1f 93       	push	r17
     a32:	cf 93       	push	r28
     a34:	df 93       	push	r29
     a36:	6b 01       	movw	r12, r22
     a38:	7c 01       	movw	r14, r24
     a3a:	dc 01       	movw	r26, r24
     a3c:	cb 01       	movw	r24, r22
     a3e:	ff 20       	and	r15, r15
     a40:	3c f4       	brge	.+14     	; 0xa50 <FUNCi32toa+0x32>
     a42:	88 27       	eor	r24, r24
     a44:	99 27       	eor	r25, r25
     a46:	dc 01       	movw	r26, r24
     a48:	8c 19       	sub	r24, r12
     a4a:	9d 09       	sbc	r25, r13
     a4c:	ae 09       	sbc	r26, r14
     a4e:	bf 09       	sbc	r27, r15
     a50:	bc 01       	movw	r22, r24
     a52:	cd 01       	movw	r24, r26
     a54:	10 e0       	ldi	r17, 0x00	; 0
	int32_t sign;
	if ((sign = n) < 0) // record sign
	n = -n; // make n positive
	i = 0;
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
     a56:	0f 2e       	mov	r0, r31
     a58:	fa e0       	ldi	r31, 0x0A	; 10
     a5a:	8f 2e       	mov	r8, r31
     a5c:	91 2c       	mov	r9, r1
     a5e:	a1 2c       	mov	r10, r1
     a60:	b1 2c       	mov	r11, r1
     a62:	f0 2d       	mov	r31, r0
     a64:	01 c0       	rjmp	.+2      	; 0xa68 <FUNCi32toa+0x4a>
     a66:	10 2f       	mov	r17, r16
     a68:	01 e0       	ldi	r16, 0x01	; 1
     a6a:	01 0f       	add	r16, r17
     a6c:	c1 2f       	mov	r28, r17
     a6e:	d0 e0       	ldi	r29, 0x00	; 0
     a70:	c7 54       	subi	r28, 0x47	; 71
     a72:	de 4f       	sbci	r29, 0xFE	; 254
     a74:	a5 01       	movw	r20, r10
     a76:	94 01       	movw	r18, r8
     a78:	ac d5       	rcall	.+2904   	; 0x15d2 <__divmodsi4>
     a7a:	60 5d       	subi	r22, 0xD0	; 208
     a7c:	68 83       	st	Y, r22
	}while ((n /= 10) > 0); // delete it
     a7e:	62 2f       	mov	r22, r18
     a80:	73 2f       	mov	r23, r19
     a82:	84 2f       	mov	r24, r20
     a84:	95 2f       	mov	r25, r21
     a86:	16 16       	cp	r1, r22
     a88:	17 06       	cpc	r1, r23
     a8a:	18 06       	cpc	r1, r24
     a8c:	19 06       	cpc	r1, r25
     a8e:	5c f3       	brlt	.-42     	; 0xa66 <FUNCi32toa+0x48>
	if (sign < 0)
     a90:	ff 20       	and	r15, r15
     a92:	44 f4       	brge	.+16     	; 0xaa4 <FUNCi32toa+0x86>
	FUNCstr[i++] = '-';
     a94:	e0 2f       	mov	r30, r16
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	e7 54       	subi	r30, 0x47	; 71
     a9a:	fe 4f       	sbci	r31, 0xFE	; 254
     a9c:	8d e2       	ldi	r24, 0x2D	; 45
     a9e:	80 83       	st	Z, r24
     aa0:	02 e0       	ldi	r16, 0x02	; 2
     aa2:	01 0f       	add	r16, r17
	FUNCstr[i] = '\0';
     aa4:	e0 2f       	mov	r30, r16
     aa6:	f0 e0       	ldi	r31, 0x00	; 0
     aa8:	e7 54       	subi	r30, 0x47	; 71
     aaa:	fe 4f       	sbci	r31, 0xFE	; 254
     aac:	10 82       	st	Z, r1
	Reverse(FUNCstr);
     aae:	89 eb       	ldi	r24, 0xB9	; 185
     ab0:	91 e0       	ldi	r25, 0x01	; 1
     ab2:	98 df       	rcall	.-208    	; 0x9e4 <Reverse>
	return FUNCstr;
}
     ab4:	89 eb       	ldi	r24, 0xB9	; 185
     ab6:	91 e0       	ldi	r25, 0x01	; 1
     ab8:	df 91       	pop	r29
     aba:	cf 91       	pop	r28
     abc:	1f 91       	pop	r17
     abe:	0f 91       	pop	r16
     ac0:	ff 90       	pop	r15
     ac2:	ef 90       	pop	r14
     ac4:	df 90       	pop	r13
     ac6:	cf 90       	pop	r12
     ac8:	bf 90       	pop	r11
     aca:	af 90       	pop	r10
     acc:	9f 90       	pop	r9
     ace:	8f 90       	pop	r8
     ad0:	08 95       	ret

00000ad2 <FUNCi16toa>:
// i16toa: convert n to characters in s
char* FUNCi16toa(int16_t n)
{
     ad2:	0f 93       	push	r16
     ad4:	1f 93       	push	r17
     ad6:	cf 93       	push	r28
     ad8:	df 93       	push	r29
     ada:	ec 01       	movw	r28, r24
     adc:	99 23       	and	r25, r25
     ade:	24 f4       	brge	.+8      	; 0xae8 <FUNCi16toa+0x16>
     ae0:	88 27       	eor	r24, r24
     ae2:	99 27       	eor	r25, r25
     ae4:	8c 1b       	sub	r24, r28
     ae6:	9d 0b       	sbc	r25, r29
     ae8:	20 e0       	ldi	r18, 0x00	; 0
	int16_t sign;
	if ((sign = n) < 0) // record sign
		n = -n; // make n positive
	i = 0;
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
     aea:	0a e0       	ldi	r16, 0x0A	; 10
     aec:	10 e0       	ldi	r17, 0x00	; 0
     aee:	01 c0       	rjmp	.+2      	; 0xaf2 <FUNCi16toa+0x20>
     af0:	23 2f       	mov	r18, r19
     af2:	31 e0       	ldi	r19, 0x01	; 1
     af4:	32 0f       	add	r19, r18
     af6:	e2 2f       	mov	r30, r18
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	e7 54       	subi	r30, 0x47	; 71
     afc:	fe 4f       	sbci	r31, 0xFE	; 254
     afe:	b8 01       	movw	r22, r16
     b00:	33 d5       	rcall	.+2662   	; 0x1568 <__divmodhi4>
     b02:	80 5d       	subi	r24, 0xD0	; 208
     b04:	80 83       	st	Z, r24
	}while ((n /= 10) > 0); // delete it
     b06:	86 2f       	mov	r24, r22
     b08:	97 2f       	mov	r25, r23
     b0a:	18 16       	cp	r1, r24
     b0c:	19 06       	cpc	r1, r25
     b0e:	84 f3       	brlt	.-32     	; 0xaf0 <FUNCi16toa+0x1e>
	if (sign < 0)
     b10:	dd 23       	and	r29, r29
     b12:	44 f4       	brge	.+16     	; 0xb24 <FUNCi16toa+0x52>
		FUNCstr[i++] = '-';
     b14:	e3 2f       	mov	r30, r19
     b16:	f0 e0       	ldi	r31, 0x00	; 0
     b18:	e7 54       	subi	r30, 0x47	; 71
     b1a:	fe 4f       	sbci	r31, 0xFE	; 254
     b1c:	8d e2       	ldi	r24, 0x2D	; 45
     b1e:	80 83       	st	Z, r24
     b20:	32 e0       	ldi	r19, 0x02	; 2
     b22:	32 0f       	add	r19, r18
	FUNCstr[i] = '\0';
     b24:	e3 2f       	mov	r30, r19
     b26:	f0 e0       	ldi	r31, 0x00	; 0
     b28:	e7 54       	subi	r30, 0x47	; 71
     b2a:	fe 4f       	sbci	r31, 0xFE	; 254
     b2c:	10 82       	st	Z, r1
	Reverse(FUNCstr);
     b2e:	89 eb       	ldi	r24, 0xB9	; 185
     b30:	91 e0       	ldi	r25, 0x01	; 1
     b32:	58 df       	rcall	.-336    	; 0x9e4 <Reverse>
	return FUNCstr;
}
     b34:	89 eb       	ldi	r24, 0xB9	; 185
     b36:	91 e0       	ldi	r25, 0x01	; 1
     b38:	df 91       	pop	r29
     b3a:	cf 91       	pop	r28
     b3c:	1f 91       	pop	r17
     b3e:	0f 91       	pop	r16
     b40:	08 95       	ret

00000b42 <FUNCui16toa>:
// ui16toa: convert n to characters in s
char* FUNCui16toa(uint16_t n)
{
     b42:	cf 93       	push	r28
     b44:	ac 01       	movw	r20, r24
	uint8_t i;
	i = 0;
     b46:	e0 e0       	ldi	r30, 0x00	; 0
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
     b48:	c1 e0       	ldi	r28, 0x01	; 1
     b4a:	ce 0f       	add	r28, r30
     b4c:	f0 e0       	ldi	r31, 0x00	; 0
     b4e:	e7 54       	subi	r30, 0x47	; 71
     b50:	fe 4f       	sbci	r31, 0xFE	; 254
     b52:	9a 01       	movw	r18, r20
     b54:	ad ec       	ldi	r26, 0xCD	; 205
     b56:	bc ec       	ldi	r27, 0xCC	; 204
     b58:	58 d5       	rcall	.+2736   	; 0x160a <__umulhisi3>
     b5a:	96 95       	lsr	r25
     b5c:	87 95       	ror	r24
     b5e:	96 95       	lsr	r25
     b60:	87 95       	ror	r24
     b62:	96 95       	lsr	r25
     b64:	87 95       	ror	r24
     b66:	9c 01       	movw	r18, r24
     b68:	22 0f       	add	r18, r18
     b6a:	33 1f       	adc	r19, r19
     b6c:	88 0f       	add	r24, r24
     b6e:	99 1f       	adc	r25, r25
     b70:	88 0f       	add	r24, r24
     b72:	99 1f       	adc	r25, r25
     b74:	88 0f       	add	r24, r24
     b76:	99 1f       	adc	r25, r25
     b78:	82 0f       	add	r24, r18
     b7a:	93 1f       	adc	r25, r19
     b7c:	9a 01       	movw	r18, r20
     b7e:	28 1b       	sub	r18, r24
     b80:	39 0b       	sbc	r19, r25
     b82:	c9 01       	movw	r24, r18
     b84:	80 5d       	subi	r24, 0xD0	; 208
     b86:	80 83       	st	Z, r24
	}while ((n /= 10) > 0); // delete it
     b88:	9a 01       	movw	r18, r20
     b8a:	3f d5       	rcall	.+2686   	; 0x160a <__umulhisi3>
     b8c:	ac 01       	movw	r20, r24
     b8e:	56 95       	lsr	r21
     b90:	47 95       	ror	r20
     b92:	56 95       	lsr	r21
     b94:	47 95       	ror	r20
     b96:	56 95       	lsr	r21
     b98:	47 95       	ror	r20
char* FUNCui16toa(uint16_t n)
{
	uint8_t i;
	i = 0;
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
     b9a:	ec 2f       	mov	r30, r28
	}while ((n /= 10) > 0); // delete it
     b9c:	41 15       	cp	r20, r1
     b9e:	51 05       	cpc	r21, r1
     ba0:	99 f6       	brne	.-90     	; 0xb48 <FUNCui16toa+0x6>
	FUNCstr[i] = '\0';
     ba2:	ec 2f       	mov	r30, r28
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	e7 54       	subi	r30, 0x47	; 71
     ba8:	fe 4f       	sbci	r31, 0xFE	; 254
     baa:	10 82       	st	Z, r1
	Reverse(FUNCstr);
     bac:	89 eb       	ldi	r24, 0xB9	; 185
     bae:	91 e0       	ldi	r25, 0x01	; 1
     bb0:	19 df       	rcall	.-462    	; 0x9e4 <Reverse>
	return FUNCstr;
}
     bb2:	89 eb       	ldi	r24, 0xB9	; 185
     bb4:	91 e0       	ldi	r25, 0x01	; 1
     bb6:	cf 91       	pop	r28
     bb8:	08 95       	ret

00000bba <FUNCbcd2bin>:
		s[j] = c;
	}
}
unsigned char FUNCbcd2bin(unsigned char val)
{
	return (val & 0x0f) + (val >> 4) * 10;
     bba:	98 2f       	mov	r25, r24
     bbc:	92 95       	swap	r25
     bbe:	9f 70       	andi	r25, 0x0F	; 15
     bc0:	99 0f       	add	r25, r25
     bc2:	29 2f       	mov	r18, r25
     bc4:	22 0f       	add	r18, r18
     bc6:	22 0f       	add	r18, r18
     bc8:	92 0f       	add	r25, r18
     bca:	8f 70       	andi	r24, 0x0F	; 15
}
     bcc:	89 0f       	add	r24, r25
     bce:	08 95       	ret

00000bd0 <FUNCbin2bcd>:
unsigned char FUNCbin2bcd(unsigned val)
{
     bd0:	ac 01       	movw	r20, r24
	return ((val / 10) << 4) + val % 10;
     bd2:	9c 01       	movw	r18, r24
     bd4:	ad ec       	ldi	r26, 0xCD	; 205
     bd6:	bc ec       	ldi	r27, 0xCC	; 204
     bd8:	18 d5       	rcall	.+2608   	; 0x160a <__umulhisi3>
     bda:	96 95       	lsr	r25
     bdc:	87 95       	ror	r24
     bde:	96 95       	lsr	r25
     be0:	87 95       	ror	r24
     be2:	96 95       	lsr	r25
     be4:	87 95       	ror	r24
     be6:	bc 01       	movw	r22, r24
     be8:	66 0f       	add	r22, r22
     bea:	77 1f       	adc	r23, r23
     bec:	9c 01       	movw	r18, r24
     bee:	22 0f       	add	r18, r18
     bf0:	33 1f       	adc	r19, r19
     bf2:	22 0f       	add	r18, r18
     bf4:	33 1f       	adc	r19, r19
     bf6:	22 0f       	add	r18, r18
     bf8:	33 1f       	adc	r19, r19
     bfa:	26 0f       	add	r18, r22
     bfc:	37 1f       	adc	r19, r23
     bfe:	42 1b       	sub	r20, r18
     c00:	53 0b       	sbc	r21, r19
}
     c02:	34 2f       	mov	r19, r20
     c04:	20 e1       	ldi	r18, 0x10	; 16
     c06:	82 9f       	mul	r24, r18
     c08:	30 0d       	add	r19, r0
     c0a:	11 24       	eor	r1, r1
     c0c:	83 2f       	mov	r24, r19
     c0e:	08 95       	ret

00000c10 <FUNCgcd1>:
long FUNCgcd1(long a, long b)
{
     c10:	cf 92       	push	r12
     c12:	df 92       	push	r13
     c14:	ef 92       	push	r14
     c16:	ff 92       	push	r15
     c18:	cf 93       	push	r28
     c1a:	df 93       	push	r29
     c1c:	cd b7       	in	r28, 0x3d	; 61
     c1e:	de b7       	in	r29, 0x3e	; 62
     c20:	28 97       	sbiw	r28, 0x08	; 8
     c22:	0f b6       	in	r0, 0x3f	; 63
     c24:	f8 94       	cli
     c26:	de bf       	out	0x3e, r29	; 62
     c28:	0f be       	out	0x3f, r0	; 63
     c2a:	cd bf       	out	0x3d, r28	; 61
     c2c:	6b 01       	movw	r12, r22
     c2e:	7c 01       	movw	r14, r24
     c30:	69 83       	std	Y+1, r22	; 0x01
     c32:	7a 83       	std	Y+2, r23	; 0x02
     c34:	8b 83       	std	Y+3, r24	; 0x03
     c36:	9c 83       	std	Y+4, r25	; 0x04
     c38:	2d 83       	std	Y+5, r18	; 0x05
     c3a:	3e 83       	std	Y+6, r19	; 0x06
     c3c:	4f 83       	std	Y+7, r20	; 0x07
     c3e:	58 87       	std	Y+8, r21	; 0x08
	long r;
	if (a < b)
     c40:	c2 16       	cp	r12, r18
     c42:	d3 06       	cpc	r13, r19
     c44:	e4 06       	cpc	r14, r20
     c46:	f5 06       	cpc	r15, r21
     c48:	34 f4       	brge	.+12     	; 0xc56 <FUNCgcd1+0x46>
		FUNCswap(&a, &b);
     c4a:	be 01       	movw	r22, r28
     c4c:	6b 5f       	subi	r22, 0xFB	; 251
     c4e:	7f 4f       	sbci	r23, 0xFF	; 255
     c50:	ce 01       	movw	r24, r28
     c52:	01 96       	adiw	r24, 0x01	; 1
     c54:	8d dc       	rcall	.-1766   	; 0x570 <FUNCswap>
	if (!b){
     c56:	8d 81       	ldd	r24, Y+5	; 0x05
     c58:	9e 81       	ldd	r25, Y+6	; 0x06
     c5a:	af 81       	ldd	r26, Y+7	; 0x07
     c5c:	b8 85       	ldd	r27, Y+8	; 0x08
     c5e:	89 2b       	or	r24, r25
     c60:	8a 2b       	or	r24, r26
     c62:	8b 2b       	or	r24, r27
     c64:	69 f4       	brne	.+26     	; 0xc80 <FUNCgcd1+0x70>
		while ((r = a % b) != 0) {
     c66:	69 81       	ldd	r22, Y+1	; 0x01
     c68:	7a 81       	ldd	r23, Y+2	; 0x02
     c6a:	8b 81       	ldd	r24, Y+3	; 0x03
     c6c:	9c 81       	ldd	r25, Y+4	; 0x04
     c6e:	20 e0       	ldi	r18, 0x00	; 0
     c70:	30 e0       	ldi	r19, 0x00	; 0
     c72:	a9 01       	movw	r20, r18
     c74:	ae d4       	rcall	.+2396   	; 0x15d2 <__divmodsi4>
     c76:	61 15       	cp	r22, r1
     c78:	71 05       	cpc	r23, r1
     c7a:	81 05       	cpc	r24, r1
     c7c:	91 05       	cpc	r25, r1
     c7e:	29 f4       	brne	.+10     	; 0xc8a <FUNCgcd1+0x7a>
			a = b;
			b = r;
		}
	}	
	return b;
     c80:	6d 81       	ldd	r22, Y+5	; 0x05
     c82:	7e 81       	ldd	r23, Y+6	; 0x06
     c84:	8f 81       	ldd	r24, Y+7	; 0x07
     c86:	98 85       	ldd	r25, Y+8	; 0x08
     c88:	05 c0       	rjmp	.+10     	; 0xc94 <FUNCgcd1+0x84>
	if (a < b)
		FUNCswap(&a, &b);
	if (!b){
		while ((r = a % b) != 0) {
			a = b;
			b = r;
     c8a:	6d 83       	std	Y+5, r22	; 0x05
     c8c:	7e 83       	std	Y+6, r23	; 0x06
     c8e:	8f 83       	std	Y+7, r24	; 0x07
     c90:	98 87       	std	Y+8, r25	; 0x08
     c92:	f6 cf       	rjmp	.-20     	; 0xc80 <FUNCgcd1+0x70>
		}
	}	
	return b;
}
     c94:	28 96       	adiw	r28, 0x08	; 8
     c96:	0f b6       	in	r0, 0x3f	; 63
     c98:	f8 94       	cli
     c9a:	de bf       	out	0x3e, r29	; 62
     c9c:	0f be       	out	0x3f, r0	; 63
     c9e:	cd bf       	out	0x3d, r28	; 61
     ca0:	df 91       	pop	r29
     ca2:	cf 91       	pop	r28
     ca4:	ff 90       	pop	r15
     ca6:	ef 90       	pop	r14
     ca8:	df 90       	pop	r13
     caa:	cf 90       	pop	r12
     cac:	08 95       	ret

00000cae <FUNCpincheck>:
	uint8_t lh;
	if(port & (1<<pin))
		lh=1;
	else
		lh=0;
	return lh;
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	02 c0       	rjmp	.+4      	; 0xcb6 <FUNCpincheck+0x8>
     cb2:	95 95       	asr	r25
     cb4:	87 95       	ror	r24
     cb6:	6a 95       	dec	r22
     cb8:	e2 f7       	brpl	.-8      	; 0xcb2 <FUNCpincheck+0x4>
}
     cba:	81 70       	andi	r24, 0x01	; 1
     cbc:	08 95       	ret

00000cbe <FUNCprint_binary>:
char* FUNCprint_binary(uint8_t number)
{
     cbe:	e9 eb       	ldi	r30, 0xB9	; 185
     cc0:	f1 e0       	ldi	r31, 0x01	; 1
	uint8_t i,c;
    for(i=128,c=0;i;i>>=1,c++){
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	20 e8       	ldi	r18, 0x80	; 128
	(number & i) ? (FUNCstr[c]='1') : (FUNCstr[c]='0');
     cc6:	50 e3       	ldi	r21, 0x30	; 48
     cc8:	41 e3       	ldi	r20, 0x31	; 49
     cca:	38 2f       	mov	r19, r24
     ccc:	32 23       	and	r19, r18
     cce:	11 f0       	breq	.+4      	; 0xcd4 <FUNCprint_binary+0x16>
     cd0:	40 83       	st	Z, r20
     cd2:	01 c0       	rjmp	.+2      	; 0xcd6 <FUNCprint_binary+0x18>
     cd4:	50 83       	st	Z, r21
	return lh;
}
char* FUNCprint_binary(uint8_t number)
{
	uint8_t i,c;
    for(i=128,c=0;i;i>>=1,c++){
     cd6:	26 95       	lsr	r18
     cd8:	9f 5f       	subi	r25, 0xFF	; 255
     cda:	31 96       	adiw	r30, 0x01	; 1
     cdc:	98 30       	cpi	r25, 0x08	; 8
     cde:	a9 f7       	brne	.-22     	; 0xcca <FUNCprint_binary+0xc>
	(number & i) ? (FUNCstr[c]='1') : (FUNCstr[c]='0');
	}
	FUNCstr[c]='\0';
     ce0:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <FUNCstr+0x8>
	return FUNCstr;
}
     ce4:	89 eb       	ldi	r24, 0xB9	; 185
     ce6:	91 e0       	ldi	r25, 0x01	; 1
     ce8:	08 95       	ret

00000cea <FUNCmayia>:
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
     cea:	a4 2f       	mov	r26, r20
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	10 97       	sbiw	r26, 0x00	; 0
     cf0:	61 f0       	breq	.+24     	; 0xd0a <FUNCmayia+0x20>
     cf2:	21 e0       	ldi	r18, 0x01	; 1
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	e1 e0       	ldi	r30, 0x01	; 1
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
        p = p * bs;
     cfa:	ee 0f       	add	r30, r30
     cfc:	ff 1f       	adc	r31, r31
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
     cfe:	2f 5f       	subi	r18, 0xFF	; 255
     d00:	3f 4f       	sbci	r19, 0xFF	; 255
     d02:	a2 17       	cp	r26, r18
     d04:	b3 07       	cpc	r27, r19
     d06:	c8 f7       	brcc	.-14     	; 0xcfa <FUNCmayia+0x10>
     d08:	02 c0       	rjmp	.+4      	; 0xd0e <FUNCmayia+0x24>
}
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
     d0a:	e1 e0       	ldi	r30, 0x01	; 1
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
unsigned int FUNCmayia(unsigned int xi, unsigned int xf, uint8_t nbits)
{//magic formula
	unsigned int mask;
	unsigned int diff;
	unsigned int trans;
	mask=Pwr(2,nbits)-1;
     d0e:	31 97       	sbiw	r30, 0x01	; 1
	xi&=mask;
	xf&=mask;
     d10:	6e 23       	and	r22, r30
     d12:	7f 23       	and	r23, r31
	diff=xf^xi;
     d14:	8e 23       	and	r24, r30
     d16:	9f 23       	and	r25, r31
     d18:	86 27       	eor	r24, r22
     d1a:	97 27       	eor	r25, r23
	trans=diff&xf;
	return (trans<<nbits)|diff;
     d1c:	68 23       	and	r22, r24
     d1e:	79 23       	and	r23, r25
     d20:	02 c0       	rjmp	.+4      	; 0xd26 <FUNCmayia+0x3c>
     d22:	66 0f       	add	r22, r22
     d24:	77 1f       	adc	r23, r23
     d26:	4a 95       	dec	r20
     d28:	e2 f7       	brpl	.-8      	; 0xd22 <FUNCmayia+0x38>
}
     d2a:	86 2b       	or	r24, r22
     d2c:	97 2b       	or	r25, r23
     d2e:	08 95       	ret

00000d30 <FUNCenable>:
// uint8_t TRANupdate(struct TRAN *tr, uint8_t idata);
/*
** procedure and function
*/
FUNC FUNCenable( void )
{
     d30:	fc 01       	movw	r30, r24
	uint8_t tSREG;
	tSREG=SREG;
     d32:	9f b7       	in	r25, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
     d34:	8f b7       	in	r24, 0x3f	; 63
     d36:	8f 77       	andi	r24, 0x7F	; 127
     d38:	8f bf       	out	0x3f, r24	; 63
	func.putstr=FUNCputstr;
	func.getnum=FUNCgetnum;
	func.getnumv2=FUNCgetnumv2;
	func.readint=FUNCreadint;
	*/
	SREG=tSREG;
     d3a:	9f bf       	out	0x3f, r25	; 63
	/******/
	return func;
     d3c:	8d ea       	ldi	r24, 0xAD	; 173
     d3e:	94 e0       	ldi	r25, 0x04	; 4
     d40:	91 83       	std	Z+1, r25	; 0x01
     d42:	80 83       	st	Z, r24
     d44:	88 ec       	ldi	r24, 0xC8	; 200
     d46:	94 e0       	ldi	r25, 0x04	; 4
     d48:	93 83       	std	Z+3, r25	; 0x03
     d4a:	82 83       	std	Z+2, r24	; 0x02
     d4c:	82 ef       	ldi	r24, 0xF2	; 242
     d4e:	94 e0       	ldi	r25, 0x04	; 4
     d50:	95 83       	std	Z+5, r25	; 0x05
     d52:	84 83       	std	Z+4, r24	; 0x04
     d54:	85 e7       	ldi	r24, 0x75	; 117
     d56:	96 e0       	ldi	r25, 0x06	; 6
     d58:	97 83       	std	Z+7, r25	; 0x07
     d5a:	86 83       	std	Z+6, r24	; 0x06
     d5c:	8d e9       	ldi	r24, 0x9D	; 157
     d5e:	92 e0       	ldi	r25, 0x02	; 2
     d60:	91 87       	std	Z+9, r25	; 0x09
     d62:	80 87       	std	Z+8, r24	; 0x08
     d64:	8b ea       	ldi	r24, 0xAB	; 171
     d66:	92 e0       	ldi	r25, 0x02	; 2
     d68:	93 87       	std	Z+11, r25	; 0x0b
     d6a:	82 87       	std	Z+10, r24	; 0x0a
     d6c:	8d ea       	ldi	r24, 0xAD	; 173
     d6e:	92 e0       	ldi	r25, 0x02	; 2
     d70:	95 87       	std	Z+13, r25	; 0x0d
     d72:	84 87       	std	Z+12, r24	; 0x0c
     d74:	80 eb       	ldi	r24, 0xB0	; 176
     d76:	92 e0       	ldi	r25, 0x02	; 2
     d78:	97 87       	std	Z+15, r25	; 0x0f
     d7a:	86 87       	std	Z+14, r24	; 0x0e
     d7c:	83 eb       	ldi	r24, 0xB3	; 179
     d7e:	92 e0       	ldi	r25, 0x02	; 2
     d80:	91 8b       	std	Z+17, r25	; 0x11
     d82:	80 8b       	std	Z+16, r24	; 0x10
     d84:	86 eb       	ldi	r24, 0xB6	; 182
     d86:	92 e0       	ldi	r25, 0x02	; 2
     d88:	93 8b       	std	Z+19, r25	; 0x13
     d8a:	82 8b       	std	Z+18, r24	; 0x12
     d8c:	87 ea       	ldi	r24, 0xA7	; 167
     d8e:	92 e0       	ldi	r25, 0x02	; 2
     d90:	95 8b       	std	Z+21, r25	; 0x15
     d92:	84 8b       	std	Z+20, r24	; 0x14
     d94:	89 ea       	ldi	r24, 0xA9	; 169
     d96:	92 e0       	ldi	r25, 0x02	; 2
     d98:	97 8b       	std	Z+23, r25	; 0x17
     d9a:	86 8b       	std	Z+22, r24	; 0x16
     d9c:	88 eb       	ldi	r24, 0xB8	; 184
     d9e:	92 e0       	ldi	r25, 0x02	; 2
     da0:	91 8f       	std	Z+25, r25	; 0x19
     da2:	80 8f       	std	Z+24, r24	; 0x18
     da4:	89 ed       	ldi	r24, 0xD9	; 217
     da6:	92 e0       	ldi	r25, 0x02	; 2
     da8:	93 8f       	std	Z+27, r25	; 0x1b
     daa:	82 8f       	std	Z+26, r24	; 0x1a
     dac:	87 ee       	ldi	r24, 0xE7	; 231
     dae:	92 e0       	ldi	r25, 0x02	; 2
     db0:	95 8f       	std	Z+29, r25	; 0x1d
     db2:	84 8f       	std	Z+28, r24	; 0x1c
     db4:	89 e0       	ldi	r24, 0x09	; 9
     db6:	93 e0       	ldi	r25, 0x03	; 3
     db8:	97 8f       	std	Z+31, r25	; 0x1f
     dba:	86 8f       	std	Z+30, r24	; 0x1e
     dbc:	89 e6       	ldi	r24, 0x69	; 105
     dbe:	95 e0       	ldi	r25, 0x05	; 5
     dc0:	91 a3       	std	Z+33, r25	; 0x21
     dc2:	80 a3       	std	Z+32, r24	; 0x20
     dc4:	81 ea       	ldi	r24, 0xA1	; 161
     dc6:	95 e0       	ldi	r25, 0x05	; 5
     dc8:	93 a3       	std	Z+35, r25	; 0x23
     dca:	82 a3       	std	Z+34, r24	; 0x22
     dcc:	8f e0       	ldi	r24, 0x0F	; 15
     dce:	95 e0       	ldi	r25, 0x05	; 5
     dd0:	95 a3       	std	Z+37, r25	; 0x25
     dd2:	84 a3       	std	Z+36, r24	; 0x24
     dd4:	87 ed       	ldi	r24, 0xD7	; 215
     dd6:	94 e0       	ldi	r25, 0x04	; 4
     dd8:	97 a3       	std	Z+39, r25	; 0x27
     dda:	86 a3       	std	Z+38, r24	; 0x26
     ddc:	8f ea       	ldi	r24, 0xAF	; 175
     dde:	93 e0       	ldi	r25, 0x03	; 3
     de0:	91 a7       	std	Z+41, r25	; 0x29
     de2:	80 a7       	std	Z+40, r24	; 0x28
     de4:	84 eb       	ldi	r24, 0xB4	; 180
     de6:	93 e0       	ldi	r25, 0x03	; 3
     de8:	93 a7       	std	Z+43, r25	; 0x2b
     dea:	82 a7       	std	Z+42, r24	; 0x2a
     dec:	82 ec       	ldi	r24, 0xC2	; 194
     dee:	93 e0       	ldi	r25, 0x03	; 3
     df0:	95 a7       	std	Z+45, r25	; 0x2d
     df2:	84 a7       	std	Z+44, r24	; 0x2c
     df4:	86 ee       	ldi	r24, 0xE6	; 230
     df6:	93 e0       	ldi	r25, 0x03	; 3
     df8:	97 a7       	std	Z+47, r25	; 0x2f
     dfa:	86 a7       	std	Z+46, r24	; 0x2e
     dfc:	88 ee       	ldi	r24, 0xE8	; 232
     dfe:	93 e0       	ldi	r25, 0x03	; 3
     e00:	91 ab       	std	Z+49, r25	; 0x31
     e02:	80 ab       	std	Z+48, r24	; 0x30
     e04:	82 ef       	ldi	r24, 0xF2	; 242
     e06:	93 e0       	ldi	r25, 0x03	; 3
     e08:	93 ab       	std	Z+51, r25	; 0x33
     e0a:	82 ab       	std	Z+50, r24	; 0x32
     e0c:	8f ef       	ldi	r24, 0xFF	; 255
     e0e:	93 e0       	ldi	r25, 0x03	; 3
     e10:	95 ab       	std	Z+53, r25	; 0x35
     e12:	84 ab       	std	Z+52, r24	; 0x34
     e14:	8b e0       	ldi	r24, 0x0B	; 11
     e16:	94 e0       	ldi	r25, 0x04	; 4
     e18:	97 ab       	std	Z+55, r25	; 0x37
     e1a:	86 ab       	std	Z+54, r24	; 0x36
     e1c:	83 e2       	ldi	r24, 0x23	; 35
     e1e:	94 e0       	ldi	r25, 0x04	; 4
     e20:	91 af       	std	Z+57, r25	; 0x39
     e22:	80 af       	std	Z+56, r24	; 0x38
     e24:	86 e3       	ldi	r24, 0x36	; 54
     e26:	94 e0       	ldi	r25, 0x04	; 4
     e28:	93 af       	std	Z+59, r25	; 0x3b
     e2a:	82 af       	std	Z+58, r24	; 0x3a
     e2c:	81 e4       	ldi	r24, 0x41	; 65
     e2e:	94 e0       	ldi	r25, 0x04	; 4
     e30:	95 af       	std	Z+61, r25	; 0x3d
     e32:	84 af       	std	Z+60, r24	; 0x3c
     e34:	8e e6       	ldi	r24, 0x6E	; 110
     e36:	94 e0       	ldi	r25, 0x04	; 4
     e38:	97 af       	std	Z+63, r25	; 0x3f
     e3a:	86 af       	std	Z+62, r24	; 0x3e
     e3c:	df 01       	movw	r26, r30
     e3e:	a0 5c       	subi	r26, 0xC0	; 192
     e40:	bf 4f       	sbci	r27, 0xFF	; 255
     e42:	8d ed       	ldi	r24, 0xDD	; 221
     e44:	95 e0       	ldi	r25, 0x05	; 5
     e46:	11 96       	adiw	r26, 0x01	; 1
     e48:	9c 93       	st	X, r25
     e4a:	8e 93       	st	-X, r24
     e4c:	12 96       	adiw	r26, 0x02	; 2
     e4e:	88 ee       	ldi	r24, 0xE8	; 232
     e50:	95 e0       	ldi	r25, 0x05	; 5
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	9c 93       	st	X, r25
     e56:	8e 93       	st	-X, r24
     e58:	12 96       	adiw	r26, 0x02	; 2
     e5a:	88 e0       	ldi	r24, 0x08	; 8
     e5c:	96 e0       	ldi	r25, 0x06	; 6
     e5e:	11 96       	adiw	r26, 0x01	; 1
     e60:	9c 93       	st	X, r25
     e62:	8e 93       	st	-X, r24
     e64:	12 96       	adiw	r26, 0x02	; 2
     e66:	87 e5       	ldi	r24, 0x57	; 87
     e68:	96 e0       	ldi	r25, 0x06	; 6
     e6a:	11 96       	adiw	r26, 0x01	; 1
     e6c:	9c 93       	st	X, r25
     e6e:	8e 93       	st	-X, r24
     e70:	12 96       	adiw	r26, 0x02	; 2
     e72:	8f e5       	ldi	r24, 0x5F	; 95
     e74:	96 e0       	ldi	r25, 0x06	; 6
     e76:	8d 93       	st	X+, r24
     e78:	9c 93       	st	X, r25
}
     e7a:	cf 01       	movw	r24, r30
     e7c:	08 95       	ret

00000e7e <I2C_Init>:
 * Return value	: none
 * description :This function is used to initialize the I2C module
****************************************************************************************************/
void I2C_Init()
{
  TWSR=0x00; //set presca1er bits to zero
     e7e:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
  TWBR=0x46; //SCL frequency is 50K for 16Mhz
     e82:	86 e4       	ldi	r24, 0x46	; 70
     e84:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
  TWCR=0x04; //enab1e TWI module
     e88:	84 e0       	ldi	r24, 0x04	; 4
     e8a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     e8e:	08 95       	ret

00000e90 <I2C_Start>:
                      ____|         |____________

***************************************************************************************************/
void I2C_Start()
{
  TWCR = ((1<<TWINT) | (1<<TWSTA) | (1<<TWEN));
     e90:	84 ea       	ldi	r24, 0xA4	; 164
     e92:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  while (!(TWCR & (1<<TWINT)));
     e96:	e4 e7       	ldi	r30, 0x74	; 116
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	88 23       	and	r24, r24
     e9e:	ec f7       	brge	.-6      	; 0xe9a <I2C_Start+0xa>
}
     ea0:	08 95       	ret

00000ea2 <I2C_Stop>:
                      __________|

***************************************************************************************************/
void I2C_Stop(void)
{
  TWCR = ((1<< TWINT) | (1<<TWEN) | (1<<TWSTO));
     ea2:	84 e9       	ldi	r24, 0x94	; 148
     ea4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ea8:	8f e8       	ldi	r24, 0x8F	; 143
     eaa:	91 e0       	ldi	r25, 0x01	; 1
     eac:	01 97       	sbiw	r24, 0x01	; 1
     eae:	f1 f7       	brne	.-4      	; 0xeac <I2C_Stop+0xa>
     eb0:	00 c0       	rjmp	.+0      	; 0xeb2 <I2C_Stop+0x10>
     eb2:	00 00       	nop
     eb4:	08 95       	ret

00000eb6 <I2C_Write>:
 SDA:    D8       D7     D6      D5      D4       D3      D2      D1      D0     ACK

***************************************************************************************************/
void I2C_Write(uint8_t var_i2cData_u8)
{
  TWDR = var_i2cData_u8 ;
     eb6:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
  TWCR = ((1<< TWINT) | (1<<TWEN));
     eba:	84 e8       	ldi	r24, 0x84	; 132
     ebc:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  while (!(TWCR & (1 <<TWINT)));
     ec0:	e4 e7       	ldi	r30, 0x74	; 116
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	88 23       	and	r24, r24
     ec8:	ec f7       	brge	.-6      	; 0xec4 <I2C_Write+0xe>
}
     eca:	08 95       	ret

00000ecc <I2C_Read>:
 SDA:    D8       D7     D6      D5       D4     D3       D2      D1     D0      ACK

***************************************************************************************************/
uint8_t I2C_Read(uint8_t var_ackOption_u8)
{
 TWCR = ((1<< TWINT) | (1<<TWEN) | (var_ackOption_u8<<TWEA));
     ecc:	20 e4       	ldi	r18, 0x40	; 64
     ece:	82 9f       	mul	r24, r18
     ed0:	c0 01       	movw	r24, r0
     ed2:	11 24       	eor	r1, r1
     ed4:	84 68       	ori	r24, 0x84	; 132
     ed6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
   while ( !(TWCR & (1 <<TWINT)));
     eda:	e4 e7       	ldi	r30, 0x74	; 116
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	88 23       	and	r24, r24
     ee2:	ec f7       	brge	.-6      	; 0xede <I2C_Read+0x12>
   return TWDR;
     ee4:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
}
     ee8:	08 95       	ret

00000eea <LCD0_write>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     eea:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <lcd0_PORT>
     eee:	f0 91 d8 01 	lds	r31, 0x01D8	; 0x8001d8 <lcd0_PORT+0x1>
     ef2:	90 81       	ld	r25, Z
     ef4:	9d 7f       	andi	r25, 0xFD	; 253
     ef6:	90 83       	st	Z, r25
     ef8:	67 2b       	or	r22, r23
     efa:	41 f0       	breq	.+16     	; 0xf0c <LCD0_write+0x22>
     efc:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <lcd0_PORT>
     f00:	f0 91 d8 01 	lds	r31, 0x01D8	; 0x8001d8 <lcd0_PORT+0x1>
     f04:	90 81       	ld	r25, Z
     f06:	91 60       	ori	r25, 0x01	; 1
     f08:	90 83       	st	Z, r25
     f0a:	07 c0       	rjmp	.+14     	; 0xf1a <LCD0_write+0x30>
     f0c:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <lcd0_PORT>
     f10:	f0 91 d8 01 	lds	r31, 0x01D8	; 0x8001d8 <lcd0_PORT+0x1>
     f14:	90 81       	ld	r25, Z
     f16:	9e 7f       	andi	r25, 0xFE	; 254
     f18:	90 83       	st	Z, r25
     f1a:	e0 91 d4 01 	lds	r30, 0x01D4	; 0x8001d4 <lcd0_DDR>
     f1e:	f0 91 d5 01 	lds	r31, 0x01D5	; 0x8001d5 <lcd0_DDR+0x1>
     f22:	90 81       	ld	r25, Z
     f24:	90 6f       	ori	r25, 0xF0	; 240
     f26:	90 83       	st	Z, r25
     f28:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <lcd0_PORT>
     f2c:	f0 91 d8 01 	lds	r31, 0x01D8	; 0x8001d8 <lcd0_PORT+0x1>
     f30:	90 81       	ld	r25, Z
     f32:	94 60       	ori	r25, 0x04	; 4
     f34:	90 83       	st	Z, r25
     f36:	88 23       	and	r24, r24
     f38:	44 f4       	brge	.+16     	; 0xf4a <LCD0_write+0x60>
     f3a:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <lcd0_PORT>
     f3e:	f0 91 d8 01 	lds	r31, 0x01D8	; 0x8001d8 <lcd0_PORT+0x1>
     f42:	90 81       	ld	r25, Z
     f44:	90 68       	ori	r25, 0x80	; 128
     f46:	90 83       	st	Z, r25
     f48:	07 c0       	rjmp	.+14     	; 0xf58 <LCD0_write+0x6e>
     f4a:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <lcd0_PORT>
     f4e:	f0 91 d8 01 	lds	r31, 0x01D8	; 0x8001d8 <lcd0_PORT+0x1>
     f52:	90 81       	ld	r25, Z
     f54:	9f 77       	andi	r25, 0x7F	; 127
     f56:	90 83       	st	Z, r25
     f58:	86 ff       	sbrs	r24, 6
     f5a:	08 c0       	rjmp	.+16     	; 0xf6c <LCD0_write+0x82>
     f5c:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <lcd0_PORT>
     f60:	f0 91 d8 01 	lds	r31, 0x01D8	; 0x8001d8 <lcd0_PORT+0x1>
     f64:	90 81       	ld	r25, Z
     f66:	90 64       	ori	r25, 0x40	; 64
     f68:	90 83       	st	Z, r25
     f6a:	07 c0       	rjmp	.+14     	; 0xf7a <LCD0_write+0x90>
     f6c:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <lcd0_PORT>
     f70:	f0 91 d8 01 	lds	r31, 0x01D8	; 0x8001d8 <lcd0_PORT+0x1>
     f74:	90 81       	ld	r25, Z
     f76:	9f 7b       	andi	r25, 0xBF	; 191
     f78:	90 83       	st	Z, r25
     f7a:	85 ff       	sbrs	r24, 5
     f7c:	08 c0       	rjmp	.+16     	; 0xf8e <LCD0_write+0xa4>
     f7e:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <lcd0_PORT>
     f82:	f0 91 d8 01 	lds	r31, 0x01D8	; 0x8001d8 <lcd0_PORT+0x1>
     f86:	90 81       	ld	r25, Z
     f88:	90 62       	ori	r25, 0x20	; 32
     f8a:	90 83       	st	Z, r25
     f8c:	07 c0       	rjmp	.+14     	; 0xf9c <LCD0_write+0xb2>
     f8e:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <lcd0_PORT>
     f92:	f0 91 d8 01 	lds	r31, 0x01D8	; 0x8001d8 <lcd0_PORT+0x1>
     f96:	90 81       	ld	r25, Z
     f98:	9f 7d       	andi	r25, 0xDF	; 223
     f9a:	90 83       	st	Z, r25
     f9c:	84 ff       	sbrs	r24, 4
     f9e:	08 c0       	rjmp	.+16     	; 0xfb0 <LCD0_write+0xc6>
     fa0:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <lcd0_PORT>
     fa4:	f0 91 d8 01 	lds	r31, 0x01D8	; 0x8001d8 <lcd0_PORT+0x1>
     fa8:	90 81       	ld	r25, Z
     faa:	90 61       	ori	r25, 0x10	; 16
     fac:	90 83       	st	Z, r25
     fae:	07 c0       	rjmp	.+14     	; 0xfbe <LCD0_write+0xd4>
     fb0:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <lcd0_PORT>
     fb4:	f0 91 d8 01 	lds	r31, 0x01D8	; 0x8001d8 <lcd0_PORT+0x1>
     fb8:	90 81       	ld	r25, Z
     fba:	9f 7e       	andi	r25, 0xEF	; 239
     fbc:	90 83       	st	Z, r25
     fbe:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <lcd0_PORT>
     fc2:	f0 91 d8 01 	lds	r31, 0x01D8	; 0x8001d8 <lcd0_PORT+0x1>
     fc6:	90 81       	ld	r25, Z
     fc8:	9b 7f       	andi	r25, 0xFB	; 251
     fca:	90 83       	st	Z, r25
     fcc:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <lcd0_PORT>
     fd0:	f0 91 d8 01 	lds	r31, 0x01D8	; 0x8001d8 <lcd0_PORT+0x1>
     fd4:	90 81       	ld	r25, Z
     fd6:	94 60       	ori	r25, 0x04	; 4
     fd8:	90 83       	st	Z, r25
     fda:	83 ff       	sbrs	r24, 3
     fdc:	08 c0       	rjmp	.+16     	; 0xfee <LCD0_write+0x104>
     fde:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <lcd0_PORT>
     fe2:	f0 91 d8 01 	lds	r31, 0x01D8	; 0x8001d8 <lcd0_PORT+0x1>
     fe6:	90 81       	ld	r25, Z
     fe8:	90 68       	ori	r25, 0x80	; 128
     fea:	90 83       	st	Z, r25
     fec:	07 c0       	rjmp	.+14     	; 0xffc <LCD0_write+0x112>
     fee:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <lcd0_PORT>
     ff2:	f0 91 d8 01 	lds	r31, 0x01D8	; 0x8001d8 <lcd0_PORT+0x1>
     ff6:	90 81       	ld	r25, Z
     ff8:	9f 77       	andi	r25, 0x7F	; 127
     ffa:	90 83       	st	Z, r25
     ffc:	82 ff       	sbrs	r24, 2
     ffe:	08 c0       	rjmp	.+16     	; 0x1010 <LCD0_write+0x126>
    1000:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <lcd0_PORT>
    1004:	f0 91 d8 01 	lds	r31, 0x01D8	; 0x8001d8 <lcd0_PORT+0x1>
    1008:	90 81       	ld	r25, Z
    100a:	90 64       	ori	r25, 0x40	; 64
    100c:	90 83       	st	Z, r25
    100e:	07 c0       	rjmp	.+14     	; 0x101e <LCD0_write+0x134>
    1010:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <lcd0_PORT>
    1014:	f0 91 d8 01 	lds	r31, 0x01D8	; 0x8001d8 <lcd0_PORT+0x1>
    1018:	90 81       	ld	r25, Z
    101a:	9f 7b       	andi	r25, 0xBF	; 191
    101c:	90 83       	st	Z, r25
    101e:	81 ff       	sbrs	r24, 1
    1020:	08 c0       	rjmp	.+16     	; 0x1032 <LCD0_write+0x148>
    1022:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <lcd0_PORT>
    1026:	f0 91 d8 01 	lds	r31, 0x01D8	; 0x8001d8 <lcd0_PORT+0x1>
    102a:	90 81       	ld	r25, Z
    102c:	90 62       	ori	r25, 0x20	; 32
    102e:	90 83       	st	Z, r25
    1030:	07 c0       	rjmp	.+14     	; 0x1040 <LCD0_write+0x156>
    1032:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <lcd0_PORT>
    1036:	f0 91 d8 01 	lds	r31, 0x01D8	; 0x8001d8 <lcd0_PORT+0x1>
    103a:	90 81       	ld	r25, Z
    103c:	9f 7d       	andi	r25, 0xDF	; 223
    103e:	90 83       	st	Z, r25
    1040:	80 ff       	sbrs	r24, 0
    1042:	08 c0       	rjmp	.+16     	; 0x1054 <LCD0_write+0x16a>
    1044:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <lcd0_PORT>
    1048:	f0 91 d8 01 	lds	r31, 0x01D8	; 0x8001d8 <lcd0_PORT+0x1>
    104c:	80 81       	ld	r24, Z
    104e:	80 61       	ori	r24, 0x10	; 16
    1050:	80 83       	st	Z, r24
    1052:	07 c0       	rjmp	.+14     	; 0x1062 <LCD0_write+0x178>
    1054:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <lcd0_PORT>
    1058:	f0 91 d8 01 	lds	r31, 0x01D8	; 0x8001d8 <lcd0_PORT+0x1>
    105c:	80 81       	ld	r24, Z
    105e:	8f 7e       	andi	r24, 0xEF	; 239
    1060:	80 83       	st	Z, r24
    1062:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <lcd0_PORT>
    1066:	f0 91 d8 01 	lds	r31, 0x01D8	; 0x8001d8 <lcd0_PORT+0x1>
    106a:	80 81       	ld	r24, Z
    106c:	8b 7f       	andi	r24, 0xFB	; 251
    106e:	80 83       	st	Z, r24
    1070:	08 95       	ret

00001072 <LCD0_read>:
    1072:	e0 91 d4 01 	lds	r30, 0x01D4	; 0x8001d4 <lcd0_DDR>
    1076:	f0 91 d5 01 	lds	r31, 0x01D5	; 0x8001d5 <lcd0_DDR+0x1>
    107a:	20 81       	ld	r18, Z
    107c:	2f 70       	andi	r18, 0x0F	; 15
    107e:	20 83       	st	Z, r18
    1080:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <lcd0_PORT>
    1084:	f0 91 d8 01 	lds	r31, 0x01D8	; 0x8001d8 <lcd0_PORT+0x1>
    1088:	20 81       	ld	r18, Z
    108a:	20 6f       	ori	r18, 0xF0	; 240
    108c:	20 83       	st	Z, r18
    108e:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <lcd0_PORT>
    1092:	f0 91 d8 01 	lds	r31, 0x01D8	; 0x8001d8 <lcd0_PORT+0x1>
    1096:	20 81       	ld	r18, Z
    1098:	22 60       	ori	r18, 0x02	; 2
    109a:	20 83       	st	Z, r18
    109c:	89 2b       	or	r24, r25
    109e:	41 f0       	breq	.+16     	; 0x10b0 <LCD0_read+0x3e>
    10a0:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <lcd0_PORT>
    10a4:	f0 91 d8 01 	lds	r31, 0x01D8	; 0x8001d8 <lcd0_PORT+0x1>
    10a8:	80 81       	ld	r24, Z
    10aa:	81 60       	ori	r24, 0x01	; 1
    10ac:	80 83       	st	Z, r24
    10ae:	07 c0       	rjmp	.+14     	; 0x10be <LCD0_read+0x4c>
    10b0:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <lcd0_PORT>
    10b4:	f0 91 d8 01 	lds	r31, 0x01D8	; 0x8001d8 <lcd0_PORT+0x1>
    10b8:	80 81       	ld	r24, Z
    10ba:	8e 7f       	andi	r24, 0xFE	; 254
    10bc:	80 83       	st	Z, r24
    10be:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <lcd0_PORT>
    10c2:	f0 91 d8 01 	lds	r31, 0x01D8	; 0x8001d8 <lcd0_PORT+0x1>
    10c6:	80 81       	ld	r24, Z
    10c8:	84 60       	ori	r24, 0x04	; 4
    10ca:	80 83       	st	Z, r24
    10cc:	e0 91 cd 01 	lds	r30, 0x01CD	; 0x8001cd <lcd0_PIN>
    10d0:	f0 91 ce 01 	lds	r31, 0x01CE	; 0x8001ce <lcd0_PIN+0x1>
    10d4:	80 81       	ld	r24, Z
    10d6:	88 23       	and	r24, r24
    10d8:	14 f0       	brlt	.+4      	; 0x10de <LCD0_read+0x6c>
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	01 c0       	rjmp	.+2      	; 0x10e0 <LCD0_read+0x6e>
    10de:	80 e8       	ldi	r24, 0x80	; 128
    10e0:	90 81       	ld	r25, Z
    10e2:	96 ff       	sbrs	r25, 6
    10e4:	02 c0       	rjmp	.+4      	; 0x10ea <LCD0_read+0x78>
    10e6:	80 64       	ori	r24, 0x40	; 64
    10e8:	01 c0       	rjmp	.+2      	; 0x10ec <LCD0_read+0x7a>
    10ea:	8f 7b       	andi	r24, 0xBF	; 191
    10ec:	90 81       	ld	r25, Z
    10ee:	95 ff       	sbrs	r25, 5
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <LCD0_read+0x84>
    10f2:	80 62       	ori	r24, 0x20	; 32
    10f4:	01 c0       	rjmp	.+2      	; 0x10f8 <LCD0_read+0x86>
    10f6:	8f 7d       	andi	r24, 0xDF	; 223
    10f8:	90 81       	ld	r25, Z
    10fa:	94 ff       	sbrs	r25, 4
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <__stack+0x3>
    10fe:	80 61       	ori	r24, 0x10	; 16
    1100:	01 c0       	rjmp	.+2      	; 0x1104 <__stack+0x5>
    1102:	8f 7e       	andi	r24, 0xEF	; 239
    1104:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <lcd0_PORT>
    1108:	f0 91 d8 01 	lds	r31, 0x01D8	; 0x8001d8 <lcd0_PORT+0x1>
    110c:	90 81       	ld	r25, Z
    110e:	9b 7f       	andi	r25, 0xFB	; 251
    1110:	90 83       	st	Z, r25
    1112:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <lcd0_PORT>
    1116:	f0 91 d8 01 	lds	r31, 0x01D8	; 0x8001d8 <lcd0_PORT+0x1>
    111a:	90 81       	ld	r25, Z
    111c:	94 60       	ori	r25, 0x04	; 4
    111e:	90 83       	st	Z, r25
    1120:	e0 91 cd 01 	lds	r30, 0x01CD	; 0x8001cd <lcd0_PIN>
    1124:	f0 91 ce 01 	lds	r31, 0x01CE	; 0x8001ce <lcd0_PIN+0x1>
    1128:	90 81       	ld	r25, Z
    112a:	99 23       	and	r25, r25
    112c:	14 f4       	brge	.+4      	; 0x1132 <__stack+0x33>
    112e:	88 60       	ori	r24, 0x08	; 8
    1130:	01 c0       	rjmp	.+2      	; 0x1134 <__stack+0x35>
    1132:	87 7f       	andi	r24, 0xF7	; 247
    1134:	90 81       	ld	r25, Z
    1136:	96 ff       	sbrs	r25, 6
    1138:	02 c0       	rjmp	.+4      	; 0x113e <__stack+0x3f>
    113a:	84 60       	ori	r24, 0x04	; 4
    113c:	01 c0       	rjmp	.+2      	; 0x1140 <__stack+0x41>
    113e:	8b 7f       	andi	r24, 0xFB	; 251
    1140:	90 81       	ld	r25, Z
    1142:	95 ff       	sbrs	r25, 5
    1144:	02 c0       	rjmp	.+4      	; 0x114a <__stack+0x4b>
    1146:	82 60       	ori	r24, 0x02	; 2
    1148:	01 c0       	rjmp	.+2      	; 0x114c <__stack+0x4d>
    114a:	8d 7f       	andi	r24, 0xFD	; 253
    114c:	90 81       	ld	r25, Z
    114e:	94 ff       	sbrs	r25, 4
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <__stack+0x57>
    1152:	81 60       	ori	r24, 0x01	; 1
    1154:	01 c0       	rjmp	.+2      	; 0x1158 <__stack+0x59>
    1156:	8e 7f       	andi	r24, 0xFE	; 254
    1158:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <lcd0_PORT>
    115c:	f0 91 d8 01 	lds	r31, 0x01D8	; 0x8001d8 <lcd0_PORT+0x1>
    1160:	90 81       	ld	r25, Z
    1162:	9b 7f       	andi	r25, 0xFB	; 251
    1164:	90 83       	st	Z, r25
    1166:	08 95       	ret

00001168 <LCD0_BF>:
    1168:	cf 93       	push	r28
    116a:	df 93       	push	r29
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	80 df       	rcall	.-256    	; 0x1072 <LCD0_read>
    1172:	cb e0       	ldi	r28, 0x0B	; 11
    1174:	d0 e0       	ldi	r29, 0x00	; 0
    1176:	05 c0       	rjmp	.+10     	; 0x1182 <LCD0_BF+0x1a>
    1178:	80 e0       	ldi	r24, 0x00	; 0
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	7a df       	rcall	.-268    	; 0x1072 <LCD0_read>
    117e:	21 97       	sbiw	r28, 0x01	; 1
    1180:	11 f0       	breq	.+4      	; 0x1186 <LCD0_BF+0x1e>
    1182:	88 23       	and	r24, r24
    1184:	cc f3       	brlt	.-14     	; 0x1178 <LCD0_BF+0x10>
    1186:	df 91       	pop	r29
    1188:	cf 91       	pop	r28
    118a:	08 95       	ret

0000118c <LCD0_putch>:
    118c:	61 e0       	ldi	r22, 0x01	; 1
    118e:	70 e0       	ldi	r23, 0x00	; 0
    1190:	ac de       	rcall	.-680    	; 0xeea <LCD0_write>
    1192:	ea cf       	rjmp	.-44     	; 0x1168 <LCD0_BF>
    1194:	08 95       	ret

00001196 <LCD0_getch>:
    1196:	cf 93       	push	r28
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	6a df       	rcall	.-300    	; 0x1072 <LCD0_read>
    119e:	c8 2f       	mov	r28, r24
    11a0:	e3 df       	rcall	.-58     	; 0x1168 <LCD0_BF>
    11a2:	8c 2f       	mov	r24, r28
    11a4:	cf 91       	pop	r28
    11a6:	08 95       	ret

000011a8 <LCD0_string>:
    11a8:	cf 93       	push	r28
    11aa:	df 93       	push	r29
    11ac:	ec 01       	movw	r28, r24
    11ae:	88 81       	ld	r24, Y
    11b0:	88 23       	and	r24, r24
    11b2:	41 f0       	breq	.+16     	; 0x11c4 <LCD0_string+0x1c>
    11b4:	21 96       	adiw	r28, 0x01	; 1
    11b6:	61 e0       	ldi	r22, 0x01	; 1
    11b8:	70 e0       	ldi	r23, 0x00	; 0
    11ba:	97 de       	rcall	.-722    	; 0xeea <LCD0_write>
    11bc:	d5 df       	rcall	.-86     	; 0x1168 <LCD0_BF>
    11be:	89 91       	ld	r24, Y+
    11c0:	81 11       	cpse	r24, r1
    11c2:	f9 cf       	rjmp	.-14     	; 0x11b6 <LCD0_string+0xe>
    11c4:	df 91       	pop	r29
    11c6:	cf 91       	pop	r28
    11c8:	08 95       	ret

000011ca <LCD0_string_size>:
    11ca:	0f 93       	push	r16
    11cc:	1f 93       	push	r17
    11ce:	cf 93       	push	r28
    11d0:	df 93       	push	r29
    11d2:	fc 01       	movw	r30, r24
    11d4:	d6 2f       	mov	r29, r22
    11d6:	80 81       	ld	r24, Z
    11d8:	88 23       	and	r24, r24
    11da:	51 f0       	breq	.+20     	; 0x11f0 <LCD0_string_size+0x26>
    11dc:	8f 01       	movw	r16, r30
    11de:	0f 5f       	subi	r16, 0xFF	; 255
    11e0:	1f 4f       	sbci	r17, 0xFF	; 255
    11e2:	61 11       	cpse	r22, r1
    11e4:	09 c0       	rjmp	.+18     	; 0x11f8 <LCD0_string_size+0x2e>
    11e6:	1b c0       	rjmp	.+54     	; 0x121e <LCD0_string_size+0x54>
    11e8:	cf 5f       	subi	r28, 0xFF	; 255
    11ea:	dc 17       	cp	r29, r28
    11ec:	30 f4       	brcc	.+12     	; 0x11fa <LCD0_string_size+0x30>
    11ee:	01 c0       	rjmp	.+2      	; 0x11f2 <LCD0_string_size+0x28>
    11f0:	c0 e0       	ldi	r28, 0x00	; 0
    11f2:	cd 17       	cp	r28, r29
    11f4:	60 f0       	brcs	.+24     	; 0x120e <LCD0_string_size+0x44>
    11f6:	13 c0       	rjmp	.+38     	; 0x121e <LCD0_string_size+0x54>
    11f8:	c1 e0       	ldi	r28, 0x01	; 1
    11fa:	61 e0       	ldi	r22, 0x01	; 1
    11fc:	70 e0       	ldi	r23, 0x00	; 0
    11fe:	75 de       	rcall	.-790    	; 0xeea <LCD0_write>
    1200:	b3 df       	rcall	.-154    	; 0x1168 <LCD0_BF>
    1202:	f8 01       	movw	r30, r16
    1204:	81 91       	ld	r24, Z+
    1206:	8f 01       	movw	r16, r30
    1208:	81 11       	cpse	r24, r1
    120a:	ee cf       	rjmp	.-36     	; 0x11e8 <LCD0_string_size+0x1e>
    120c:	f2 cf       	rjmp	.-28     	; 0x11f2 <LCD0_string_size+0x28>
    120e:	cf 5f       	subi	r28, 0xFF	; 255
    1210:	61 e0       	ldi	r22, 0x01	; 1
    1212:	70 e0       	ldi	r23, 0x00	; 0
    1214:	80 e2       	ldi	r24, 0x20	; 32
    1216:	69 de       	rcall	.-814    	; 0xeea <LCD0_write>
    1218:	a7 df       	rcall	.-178    	; 0x1168 <LCD0_BF>
    121a:	cd 17       	cp	r28, r29
    121c:	c0 f3       	brcs	.-16     	; 0x120e <LCD0_string_size+0x44>
    121e:	df 91       	pop	r29
    1220:	cf 91       	pop	r28
    1222:	1f 91       	pop	r17
    1224:	0f 91       	pop	r16
    1226:	08 95       	ret

00001228 <LCD0_hspace>:
    1228:	cf 93       	push	r28
    122a:	c8 2f       	mov	r28, r24
    122c:	88 23       	and	r24, r24
    122e:	39 f0       	breq	.+14     	; 0x123e <LCD0_hspace+0x16>
    1230:	61 e0       	ldi	r22, 0x01	; 1
    1232:	70 e0       	ldi	r23, 0x00	; 0
    1234:	80 e2       	ldi	r24, 0x20	; 32
    1236:	59 de       	rcall	.-846    	; 0xeea <LCD0_write>
    1238:	97 df       	rcall	.-210    	; 0x1168 <LCD0_BF>
    123a:	c1 50       	subi	r28, 0x01	; 1
    123c:	c9 f7       	brne	.-14     	; 0x1230 <LCD0_hspace+0x8>
    123e:	cf 91       	pop	r28
    1240:	08 95       	ret

00001242 <LCD0_gotoxy>:
    1242:	26 2f       	mov	r18, r22
    1244:	81 30       	cpi	r24, 0x01	; 1
    1246:	91 05       	cpc	r25, r1
    1248:	71 f0       	breq	.+28     	; 0x1266 <LCD0_gotoxy+0x24>
    124a:	30 f0       	brcs	.+12     	; 0x1258 <LCD0_gotoxy+0x16>
    124c:	82 30       	cpi	r24, 0x02	; 2
    124e:	91 05       	cpc	r25, r1
    1250:	89 f0       	breq	.+34     	; 0x1274 <LCD0_gotoxy+0x32>
    1252:	03 97       	sbiw	r24, 0x03	; 3
    1254:	b1 f0       	breq	.+44     	; 0x1282 <LCD0_gotoxy+0x40>
    1256:	08 95       	ret
    1258:	60 e0       	ldi	r22, 0x00	; 0
    125a:	70 e0       	ldi	r23, 0x00	; 0
    125c:	80 e8       	ldi	r24, 0x80	; 128
    125e:	82 0f       	add	r24, r18
    1260:	44 de       	rcall	.-888    	; 0xeea <LCD0_write>
    1262:	82 cf       	rjmp	.-252    	; 0x1168 <LCD0_BF>
    1264:	08 95       	ret
    1266:	60 e0       	ldi	r22, 0x00	; 0
    1268:	70 e0       	ldi	r23, 0x00	; 0
    126a:	80 ec       	ldi	r24, 0xC0	; 192
    126c:	82 0f       	add	r24, r18
    126e:	3d de       	rcall	.-902    	; 0xeea <LCD0_write>
    1270:	7b cf       	rjmp	.-266    	; 0x1168 <LCD0_BF>
    1272:	08 95       	ret
    1274:	60 e0       	ldi	r22, 0x00	; 0
    1276:	70 e0       	ldi	r23, 0x00	; 0
    1278:	84 e9       	ldi	r24, 0x94	; 148
    127a:	82 0f       	add	r24, r18
    127c:	36 de       	rcall	.-916    	; 0xeea <LCD0_write>
    127e:	74 cf       	rjmp	.-280    	; 0x1168 <LCD0_BF>
    1280:	08 95       	ret
    1282:	60 e0       	ldi	r22, 0x00	; 0
    1284:	70 e0       	ldi	r23, 0x00	; 0
    1286:	84 ed       	ldi	r24, 0xD4	; 212
    1288:	82 0f       	add	r24, r18
    128a:	2f de       	rcall	.-930    	; 0xeea <LCD0_write>
    128c:	6d cf       	rjmp	.-294    	; 0x1168 <LCD0_BF>
    128e:	08 95       	ret

00001290 <LCD0_clear>:
    1290:	60 e0       	ldi	r22, 0x00	; 0
    1292:	70 e0       	ldi	r23, 0x00	; 0
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	29 de       	rcall	.-942    	; 0xeea <LCD0_write>
    1298:	87 ee       	ldi	r24, 0xE7	; 231
    129a:	97 e1       	ldi	r25, 0x17	; 23
    129c:	01 97       	sbiw	r24, 0x01	; 1
    129e:	f1 f7       	brne	.-4      	; 0x129c <LCD0_clear+0xc>
    12a0:	00 c0       	rjmp	.+0      	; 0x12a2 <LCD0_clear+0x12>
    12a2:	00 00       	nop
    12a4:	08 95       	ret

000012a6 <LCD0_inic>:
	return lcd0;
}
void LCD0_inic(void)
{
	//LCD INIC
	*lcd0_DDR=(1<<RS)|(1<<RW)|(1<<EN)|(0<<NC);
    12a6:	e0 91 d4 01 	lds	r30, 0x01D4	; 0x8001d4 <lcd0_DDR>
    12aa:	f0 91 d5 01 	lds	r31, 0x01D5	; 0x8001d5 <lcd0_DDR+0x1>
    12ae:	87 e0       	ldi	r24, 0x07	; 7
    12b0:	80 83       	st	Z, r24
	*lcd0_PORT=(1<<NC);
    12b2:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <lcd0_PORT>
    12b6:	f0 91 d8 01 	lds	r31, 0x01D8	; 0x8001d8 <lcd0_PORT+0x1>
    12ba:	88 e0       	ldi	r24, 0x08	; 8
    12bc:	80 83       	st	Z, r24
    12be:	2f ef       	ldi	r18, 0xFF	; 255
    12c0:	83 ef       	ldi	r24, 0xF3	; 243
    12c2:	91 e0       	ldi	r25, 0x01	; 1
    12c4:	21 50       	subi	r18, 0x01	; 1
    12c6:	80 40       	sbci	r24, 0x00	; 0
    12c8:	90 40       	sbci	r25, 0x00	; 0
    12ca:	e1 f7       	brne	.-8      	; 0x12c4 <LCD0_inic+0x1e>
    12cc:	00 c0       	rjmp	.+0      	; 0x12ce <LCD0_inic+0x28>
    12ce:	00 00       	nop
	/***INICIALIZACAO LCD**datasheet*/
	_delay_ms(40);
	LCD0_write(0x33,INST); //function set
    12d0:	60 e0       	ldi	r22, 0x00	; 0
    12d2:	70 e0       	ldi	r23, 0x00	; 0
    12d4:	83 e3       	ldi	r24, 0x33	; 51
    12d6:	09 de       	rcall	.-1006   	; 0xeea <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12d8:	20 ed       	ldi	r18, 0xD0	; 208
    12da:	2a 95       	dec	r18
    12dc:	f1 f7       	brne	.-4      	; 0x12da <LCD0_inic+0x34>
	_delay_us(39);
	LCD0_write(0x33,INST); //function set
    12de:	60 e0       	ldi	r22, 0x00	; 0
    12e0:	70 e0       	ldi	r23, 0x00	; 0
    12e2:	83 e3       	ldi	r24, 0x33	; 51
    12e4:	02 de       	rcall	.-1020   	; 0xeea <LCD0_write>
    12e6:	80 ed       	ldi	r24, 0xD0	; 208
    12e8:	8a 95       	dec	r24
    12ea:	f1 f7       	brne	.-4      	; 0x12e8 <LCD0_inic+0x42>
	_delay_us(39);
	LCD0_write(0x2B,INST); //function set
    12ec:	60 e0       	ldi	r22, 0x00	; 0
    12ee:	70 e0       	ldi	r23, 0x00	; 0
    12f0:	8b e2       	ldi	r24, 0x2B	; 43
    12f2:	fb dd       	rcall	.-1034   	; 0xeea <LCD0_write>
    12f4:	95 ec       	ldi	r25, 0xC5	; 197
    12f6:	9a 95       	dec	r25
    12f8:	f1 f7       	brne	.-4      	; 0x12f6 <LCD0_inic+0x50>
    12fa:	00 00       	nop
	_delay_us(37);
	LCD0_write(0x0C,INST);// display on/off control
    12fc:	60 e0       	ldi	r22, 0x00	; 0
    12fe:	70 e0       	ldi	r23, 0x00	; 0
    1300:	8c e0       	ldi	r24, 0x0C	; 12
    1302:	f3 dd       	rcall	.-1050   	; 0xeea <LCD0_write>
    1304:	25 ec       	ldi	r18, 0xC5	; 197
    1306:	2a 95       	dec	r18
    1308:	f1 f7       	brne	.-4      	; 0x1306 <LCD0_inic+0x60>
	_delay_us(37);
	LCD0_write(0x01,INST);// clear display
    130a:	00 00       	nop
    130c:	60 e0       	ldi	r22, 0x00	; 0
    130e:	70 e0       	ldi	r23, 0x00	; 0
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	eb dd       	rcall	.-1066   	; 0xeea <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1314:	87 ee       	ldi	r24, 0xE7	; 231
    1316:	97 e1       	ldi	r25, 0x17	; 23
    1318:	01 97       	sbiw	r24, 0x01	; 1
    131a:	f1 f7       	brne	.-4      	; 0x1318 <LCD0_inic+0x72>
    131c:	00 c0       	rjmp	.+0      	; 0x131e <LCD0_inic+0x78>
	_delay_ms(1.53);
	LCD0_write(0x06,INST);// entry mode set (crazy settings)
    131e:	00 00       	nop
    1320:	60 e0       	ldi	r22, 0x00	; 0
    1322:	70 e0       	ldi	r23, 0x00	; 0
    1324:	86 e0       	ldi	r24, 0x06	; 6
    1326:	e1 dd       	rcall	.-1086   	; 0xeea <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1328:	95 ec       	ldi	r25, 0xC5	; 197
    132a:	9a 95       	dec	r25
    132c:	f1 f7       	brne	.-4      	; 0x132a <LCD0_inic+0x84>
    132e:	00 00       	nop
    1330:	08 95       	ret

00001332 <LCD0enable>:
unsigned int LCD_ticks(unsigned int num);
/*
** procedure and function
*/
LCD0 LCD0enable(volatile uint8_t *ddr, volatile uint8_t *pin, volatile uint8_t *port)
{
    1332:	1f 93       	push	r17
    1334:	cf 93       	push	r28
    1336:	df 93       	push	r29
    1338:	ec 01       	movw	r28, r24
	//LOCAL VARIABLES
	uint8_t tSREG;
	tSREG=SREG;
    133a:	1f b7       	in	r17, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    133c:	8f b7       	in	r24, 0x3f	; 63
    133e:	8f 77       	andi	r24, 0x7F	; 127
    1340:	8f bf       	out	0x3f, r24	; 63
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	LCD0 lcd0;
	//import parametros
	lcd0_DDR=ddr;
    1342:	70 93 d5 01 	sts	0x01D5, r23	; 0x8001d5 <lcd0_DDR+0x1>
    1346:	60 93 d4 01 	sts	0x01D4, r22	; 0x8001d4 <lcd0_DDR>
	lcd0_PIN=pin;
    134a:	50 93 ce 01 	sts	0x01CE, r21	; 0x8001ce <lcd0_PIN+0x1>
    134e:	40 93 cd 01 	sts	0x01CD, r20	; 0x8001cd <lcd0_PIN>
	lcd0_PORT=port;
    1352:	30 93 d8 01 	sts	0x01D8, r19	; 0x8001d8 <lcd0_PORT+0x1>
    1356:	20 93 d7 01 	sts	0x01D7, r18	; 0x8001d7 <lcd0_PORT>
	//inic variables
	*lcd0_DDR=0x00;
    135a:	fb 01       	movw	r30, r22
    135c:	10 82       	st	Z, r1
	*lcd0_PORT=0xFF;
    135e:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <lcd0_PORT>
    1362:	f0 91 d8 01 	lds	r31, 0x01D8	; 0x8001d8 <lcd0_PORT+0x1>
    1366:	8f ef       	ldi	r24, 0xFF	; 255
    1368:	80 83       	st	Z, r24
	lcd0_detect=*lcd0_PIN & (1<<NC);
    136a:	e0 91 cd 01 	lds	r30, 0x01CD	; 0x8001cd <lcd0_PIN>
    136e:	f0 91 ce 01 	lds	r31, 0x01CE	; 0x8001ce <lcd0_PIN+0x1>
    1372:	80 81       	ld	r24, Z
    1374:	88 70       	andi	r24, 0x08	; 8
    1376:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <lcd0_detect>
	lcd0.hspace=LCD0_hspace;
	lcd0.clear=LCD0_clear;
	lcd0.gotoxy=LCD0_gotoxy;
	lcd0.reboot=LCD0_reboot;
	//LCD INIC
	LCD0_inic();
    137a:	95 df       	rcall	.-214    	; 0x12a6 <LCD0_inic>
	SREG=tSREG;
    137c:	1f bf       	out	0x3f, r17	; 63
	//
	return lcd0;
    137e:	85 e7       	ldi	r24, 0x75	; 117
    1380:	97 e0       	ldi	r25, 0x07	; 7
    1382:	99 83       	std	Y+1, r25	; 0x01
    1384:	88 83       	st	Y, r24
    1386:	89 e3       	ldi	r24, 0x39	; 57
    1388:	98 e0       	ldi	r25, 0x08	; 8
    138a:	9b 83       	std	Y+3, r25	; 0x03
    138c:	8a 83       	std	Y+2, r24	; 0x02
    138e:	84 eb       	ldi	r24, 0xB4	; 180
    1390:	98 e0       	ldi	r25, 0x08	; 8
    1392:	9d 83       	std	Y+5, r25	; 0x05
    1394:	8c 83       	std	Y+4, r24	; 0x04
    1396:	86 ec       	ldi	r24, 0xC6	; 198
    1398:	98 e0       	ldi	r25, 0x08	; 8
    139a:	9f 83       	std	Y+7, r25	; 0x07
    139c:	8e 83       	std	Y+6, r24	; 0x06
    139e:	8b ec       	ldi	r24, 0xCB	; 203
    13a0:	98 e0       	ldi	r25, 0x08	; 8
    13a2:	99 87       	std	Y+9, r25	; 0x09
    13a4:	88 87       	std	Y+8, r24	; 0x08
    13a6:	84 ed       	ldi	r24, 0xD4	; 212
    13a8:	98 e0       	ldi	r25, 0x08	; 8
    13aa:	9b 87       	std	Y+11, r25	; 0x0b
    13ac:	8a 87       	std	Y+10, r24	; 0x0a
    13ae:	85 ee       	ldi	r24, 0xE5	; 229
    13b0:	98 e0       	ldi	r25, 0x08	; 8
    13b2:	9d 87       	std	Y+13, r25	; 0x0d
    13b4:	8c 87       	std	Y+12, r24	; 0x0c
    13b6:	84 e1       	ldi	r24, 0x14	; 20
    13b8:	99 e0       	ldi	r25, 0x09	; 9
    13ba:	9f 87       	std	Y+15, r25	; 0x0f
    13bc:	8e 87       	std	Y+14, r24	; 0x0e
    13be:	88 e4       	ldi	r24, 0x48	; 72
    13c0:	99 e0       	ldi	r25, 0x09	; 9
    13c2:	99 8b       	std	Y+17, r25	; 0x11
    13c4:	88 8b       	std	Y+16, r24	; 0x10
    13c6:	81 e2       	ldi	r24, 0x21	; 33
    13c8:	99 e0       	ldi	r25, 0x09	; 9
    13ca:	9b 8b       	std	Y+19, r25	; 0x13
    13cc:	8a 8b       	std	Y+18, r24	; 0x12
    13ce:	80 ef       	ldi	r24, 0xF0	; 240
    13d0:	99 e0       	ldi	r25, 0x09	; 9
    13d2:	9d 8b       	std	Y+21, r25	; 0x15
    13d4:	8c 8b       	std	Y+20, r24	; 0x14
}
    13d6:	ce 01       	movw	r24, r28
    13d8:	df 91       	pop	r29
    13da:	cf 91       	pop	r28
    13dc:	1f 91       	pop	r17
    13de:	08 95       	ret

000013e0 <LCD0_reboot>:
	*lcd0_PORT|=(1<<EN);
	LCD_ticks(num);
	*lcd0_PORT&=~(1<<EN);
}
void LCD0_reboot(void)
{
    13e0:	cf 93       	push	r28
	//low high detect pin NC
	uint8_t i;
	uint8_t tmp;
	tmp=*lcd0_PIN & (1<<NC);
    13e2:	e0 91 cd 01 	lds	r30, 0x01CD	; 0x8001cd <lcd0_PIN>
    13e6:	f0 91 ce 01 	lds	r31, 0x01CE	; 0x8001ce <lcd0_PIN+0x1>
    13ea:	c0 81       	ld	r28, Z
    13ec:	c8 70       	andi	r28, 0x08	; 8
	i=tmp^lcd0_detect;
    13ee:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <lcd0_detect>
    13f2:	8c 27       	eor	r24, r28
	i&=tmp;
	if(i)
    13f4:	8c 23       	and	r24, r28
    13f6:	09 f0       	breq	.+2      	; 0x13fa <LCD0_reboot+0x1a>
		LCD0_inic();
    13f8:	56 df       	rcall	.-340    	; 0x12a6 <LCD0_inic>
	lcd0_detect=tmp;
    13fa:	c0 93 d6 01 	sts	0x01D6, r28	; 0x8001d6 <lcd0_detect>
}
    13fe:	cf 91       	pop	r28
    1400:	08 95       	ret

00001402 <PCF8563RTC_Init>:
	I2C_Write(PCF8563DateRegAddress_U8); // Request DAY RAM address at 04H
	I2C_Write(var_day_u8);			      // Write date on RAM address 04H
	I2C_Write(var_month_u8);			  // Write month on RAM address 05H
	I2C_Write(var_year_u8);			      // Write year on RAM address 06h
	I2C_Stop();				              // Stop I2C communication after Setting the Date
}
    1402:	3d dd       	rcall	.-1414   	; 0xe7e <I2C_Init>
    1404:	45 dd       	rcall	.-1398   	; 0xe90 <I2C_Start>
    1406:	82 ea       	ldi	r24, 0xA2	; 162
    1408:	56 dd       	rcall	.-1364   	; 0xeb6 <I2C_Write>
    140a:	8e e0       	ldi	r24, 0x0E	; 14
    140c:	54 dd       	rcall	.-1368   	; 0xeb6 <I2C_Write>
    140e:	80 e0       	ldi	r24, 0x00	; 0
    1410:	52 dd       	rcall	.-1372   	; 0xeb6 <I2C_Write>
    1412:	47 cd       	rjmp	.-1394   	; 0xea2 <I2C_Stop>
    1414:	08 95       	ret

00001416 <PCF8563RTC_GetTime>:

	Note: The time read from PCF8563 will be of BCD format, 
	      like 0x12,0x39,0x26 for 12hr,39min and 26sec.	
***************************************************************************************************/
struct time PCF8563RTC_GetTime(void)
{
    1416:	1f 93       	push	r17
    1418:	cf 93       	push	r28
    141a:	df 93       	push	r29
	struct time result;
	I2C_Start();							// Start I2C communication
    141c:	39 dd       	rcall	.-1422   	; 0xe90 <I2C_Start>
	I2C_Write(PCF8563WriteMode_U8);			// connect to PCF8563 by sending its ID on I2c Bus
    141e:	82 ea       	ldi	r24, 0xA2	; 162
    1420:	4a dd       	rcall	.-1388   	; 0xeb6 <I2C_Write>
	I2C_Write(PCF8563SecondRegAddress_U8);	// Request Sec RAM address at 00H
    1422:	82 e0       	ldi	r24, 0x02	; 2
	I2C_Stop();								// Stop I2C communication after selecting Sec Register
    1424:	48 dd       	rcall	.-1392   	; 0xeb6 <I2C_Write>
	I2C_Start();							// Start I2C communication
    1426:	3d dd       	rcall	.-1414   	; 0xea2 <I2C_Stop>
	I2C_Write(PCF8563ReadMode_U8);			// connect to PCF8563(Read mode) by sending its ID
    1428:	33 dd       	rcall	.-1434   	; 0xe90 <I2C_Start>
    142a:	83 ea       	ldi	r24, 0xA3	; 163
	result.VL_seconds = I2C_Read(1);			// read second and return Positive ACK
    142c:	44 dd       	rcall	.-1400   	; 0xeb6 <I2C_Write>
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	4d dd       	rcall	.-1382   	; 0xecc <I2C_Read>
	result.minutes = I2C_Read(1);			// read minute and return Positive ACK
    1432:	c8 2f       	mov	r28, r24
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	4a dd       	rcall	.-1388   	; 0xecc <I2C_Read>
    1438:	d8 2f       	mov	r29, r24
	result.hours = I2C_Read(0);				// read hour and return Negative/No ACK
    143a:	80 e0       	ldi	r24, 0x00	; 0
    143c:	47 dd       	rcall	.-1394   	; 0xecc <I2C_Read>
    143e:	18 2f       	mov	r17, r24
    1440:	30 dd       	rcall	.-1440   	; 0xea2 <I2C_Stop>
	I2C_Stop();								// Stop I2C communication after reading the Time
    1442:	61 2f       	mov	r22, r17
    1444:	7d 2f       	mov	r23, r29
	return result;
}
    1446:	8c 2f       	mov	r24, r28
    1448:	df 91       	pop	r29
    144a:	cf 91       	pop	r28
    144c:	1f 91       	pop	r17
    144e:	08 95       	ret

00001450 <PCF8563RTC_GetDate>:
    1450:	0f 93       	push	r16
    1452:	1f 93       	push	r17

	Note: The date read from PCF8563 will be of BCD format, 
	      like 0x15,0x08,0x47 for 15th day,8th month and 47th year.  
***************************************************************************************************/
struct date PCF8563RTC_GetDate(void)
{
    1454:	cf 93       	push	r28
    1456:	df 93       	push	r29
	struct date result;
	I2C_Start();							// Start I2C communication
    1458:	1b dd       	rcall	.-1482   	; 0xe90 <I2C_Start>
	I2C_Write(PCF8563WriteMode_U8);			// connect to PCF8563 by sending its ID on I2c Bus
    145a:	82 ea       	ldi	r24, 0xA2	; 162
    145c:	2c dd       	rcall	.-1448   	; 0xeb6 <I2C_Write>
	I2C_Write(PCF8563DateRegAddress_U8);	// Request DAY RAM address at 04H
    145e:	86 e0       	ldi	r24, 0x06	; 6
	I2C_Stop();								// Stop I2C communication after selecting DAY Register
    1460:	2a dd       	rcall	.-1452   	; 0xeb6 <I2C_Write>
	I2C_Start();							// Start I2C communication
    1462:	1f dd       	rcall	.-1474   	; 0xea2 <I2C_Stop>
	I2C_Write(PCF8563ReadMode_U8);			// connect to PCF8563 (Read mode) by sending its ID
    1464:	15 dd       	rcall	.-1494   	; 0xe90 <I2C_Start>
    1466:	83 ea       	ldi	r24, 0xA3	; 163
	result.days = I2C_Read(1);				// read Day and return Positive ACK
    1468:	26 dd       	rcall	.-1460   	; 0xeb6 <I2C_Write>
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	2f dd       	rcall	.-1442   	; 0xecc <I2C_Read>
	result.weekdays = I2C_Read(1);			// read Month and return Positive ACK
    146e:	c8 2f       	mov	r28, r24
    1470:	81 e0       	ldi	r24, 0x01	; 1
	result.century_months = I2C_Read(1);
    1472:	2c dd       	rcall	.-1448   	; 0xecc <I2C_Read>
    1474:	d8 2f       	mov	r29, r24
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	29 dd       	rcall	.-1454   	; 0xecc <I2C_Read>
	result.years = I2C_Read(0);				// read Year and return Negative/No ACK
    147a:	18 2f       	mov	r17, r24
    147c:	80 e0       	ldi	r24, 0x00	; 0
    147e:	26 dd       	rcall	.-1460   	; 0xecc <I2C_Read>
    1480:	08 2f       	mov	r16, r24
	I2C_Stop();								// Stop I2C communication after reading the Date
    1482:	0f dd       	rcall	.-1506   	; 0xea2 <I2C_Stop>
    1484:	60 2f       	mov	r22, r16
	return result;
}
    1486:	71 2f       	mov	r23, r17
    1488:	8d 2f       	mov	r24, r29
    148a:	9c 2f       	mov	r25, r28
    148c:	df 91       	pop	r29
    148e:	cf 91       	pop	r28
    1490:	1f 91       	pop	r17
    1492:	0f 91       	pop	r16
    1494:	08 95       	ret

00001496 <PCF8563RTC_bcd2dec>:
    1496:	98 2f       	mov	r25, r24
 * Return value	: uint8_t
 * description  : bcd to dec
***************************************************************************************************/
uint8_t PCF8563RTC_bcd2dec(uint8_t num)
{
	return ((num/16 * 10) + (num % 16));
    1498:	92 95       	swap	r25
    149a:	9f 70       	andi	r25, 0x0F	; 15
    149c:	99 0f       	add	r25, r25
    149e:	29 2f       	mov	r18, r25
    14a0:	22 0f       	add	r18, r18
    14a2:	22 0f       	add	r18, r18
    14a4:	92 0f       	add	r25, r18
    14a6:	8f 70       	andi	r24, 0x0F	; 15
}
    14a8:	89 0f       	add	r24, r25
    14aa:	08 95       	ret

000014ac <main>:
#include "pcf8563rtc.h"
#include "function.h"
/***Define and Macros***/
/***MAIN_MAIN***/
int main(void)
{
    14ac:	cf 93       	push	r28
    14ae:	df 93       	push	r29
    14b0:	cd b7       	in	r28, 0x3d	; 61
    14b2:	de b7       	in	r29, 0x3e	; 62
    14b4:	c0 56       	subi	r28, 0x60	; 96
    14b6:	d1 09       	sbc	r29, r1
    14b8:	0f b6       	in	r0, 0x3f	; 63
    14ba:	f8 94       	cli
    14bc:	de bf       	out	0x3e, r29	; 62
    14be:	0f be       	out	0x3f, r0	; 63
    14c0:	cd bf       	out	0x3d, r28	; 61
	uint8_t sec;
	LCD0 lcd = LCD0enable(&DDRA,&PINA,&PORTA);
    14c2:	2b e3       	ldi	r18, 0x3B	; 59
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	49 e3       	ldi	r20, 0x39	; 57
    14c8:	50 e0       	ldi	r21, 0x00	; 0
    14ca:	6a e3       	ldi	r22, 0x3A	; 58
    14cc:	70 e0       	ldi	r23, 0x00	; 0
    14ce:	ce 01       	movw	r24, r28
    14d0:	01 96       	adiw	r24, 0x01	; 1
    14d2:	2f df       	rcall	.-418    	; 0x1332 <LCD0enable>
    14d4:	ed 84       	ldd	r14, Y+13	; 0x0d
    14d6:	fe 84       	ldd	r15, Y+14	; 0x0e
    14d8:	0b 89       	ldd	r16, Y+19	; 0x13
    14da:	1c 89       	ldd	r17, Y+20	; 0x14
	FUNC func = FUNCenable();
    14dc:	ce 01       	movw	r24, r28
    14de:	47 96       	adiw	r24, 0x17	; 23
    PCF8563RTC_Init();
    14e0:	27 dc       	rcall	.-1970   	; 0xd30 <FUNCenable>
    14e2:	8f df       	rcall	.-226    	; 0x1402 <PCF8563RTC_Init>
    //PCF8563RTC_SetDate(0x01,0x01,0x15);  //  1st Jan 2015
	/* Replace with your application code */
	while (1)
    {
		
		lcd.gotoxy(0,0);
    14e4:	60 e0       	ldi	r22, 0x00	; 0
    14e6:	70 e0       	ldi	r23, 0x00	; 0
    14e8:	80 e0       	ldi	r24, 0x00	; 0
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	f8 01       	movw	r30, r16
    14ee:	09 95       	icall
		lcd.string_size("start",5);
    14f0:	65 e0       	ldi	r22, 0x05	; 5
    14f2:	80 e0       	ldi	r24, 0x00	; 0
    14f4:	91 e0       	ldi	r25, 0x01	; 1
    14f6:	f7 01       	movw	r30, r14
		
		/* Read the Time from RTC(PCF8563) */ 
		sec=PCF8563RTC_GetTime().VL_seconds;
    14f8:	09 95       	icall
    14fa:	8d df       	rcall	.-230    	; 0x1416 <PCF8563RTC_GetTime>
    14fc:	b8 2e       	mov	r11, r24
		
		/* Read the Date from RTC(PCF8563) */
		PCF8563RTC_GetDate();
    14fe:	a8 df       	rcall	.-176    	; 0x1450 <PCF8563RTC_GetDate>
    1500:	60 e0       	ldi	r22, 0x00	; 0
		
		lcd.gotoxy(2,0);
    1502:	70 e0       	ldi	r23, 0x00	; 0
    1504:	82 e0       	ldi	r24, 0x02	; 2
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	f8 01       	movw	r30, r16
    150a:	09 95       	icall
		lcd.string_size(func.ui16toa(PCF8563RTC_bcd2dec(sec)),2);
    150c:	c9 ac       	ldd	r12, Y+57	; 0x39
    150e:	da ac       	ldd	r13, Y+58	; 0x3a
    1510:	8b 2d       	mov	r24, r11
    1512:	c1 df       	rcall	.-126    	; 0x1496 <PCF8563RTC_bcd2dec>
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	f6 01       	movw	r30, r12
    1518:	09 95       	icall
    151a:	62 e0       	ldi	r22, 0x02	; 2
    151c:	f7 01       	movw	r30, r14
    151e:	09 95       	icall
    1520:	e1 cf       	rjmp	.-62     	; 0x14e4 <main+0x38>

00001522 <__mulsi3>:
    1522:	db 01       	movw	r26, r22
    1524:	8f 93       	push	r24
    1526:	9f 93       	push	r25
    1528:	7f d0       	rcall	.+254    	; 0x1628 <__muluhisi3>
    152a:	bf 91       	pop	r27
    152c:	af 91       	pop	r26
    152e:	a2 9f       	mul	r26, r18
    1530:	80 0d       	add	r24, r0
    1532:	91 1d       	adc	r25, r1
    1534:	a3 9f       	mul	r26, r19
    1536:	90 0d       	add	r25, r0
    1538:	b2 9f       	mul	r27, r18
    153a:	90 0d       	add	r25, r0
    153c:	11 24       	eor	r1, r1
    153e:	08 95       	ret

00001540 <__udivmodhi4>:
    1540:	aa 1b       	sub	r26, r26
    1542:	bb 1b       	sub	r27, r27
    1544:	51 e1       	ldi	r21, 0x11	; 17
    1546:	07 c0       	rjmp	.+14     	; 0x1556 <__udivmodhi4_ep>

00001548 <__udivmodhi4_loop>:
    1548:	aa 1f       	adc	r26, r26
    154a:	bb 1f       	adc	r27, r27
    154c:	a6 17       	cp	r26, r22
    154e:	b7 07       	cpc	r27, r23
    1550:	10 f0       	brcs	.+4      	; 0x1556 <__udivmodhi4_ep>
    1552:	a6 1b       	sub	r26, r22
    1554:	b7 0b       	sbc	r27, r23

00001556 <__udivmodhi4_ep>:
    1556:	88 1f       	adc	r24, r24
    1558:	99 1f       	adc	r25, r25
    155a:	5a 95       	dec	r21
    155c:	a9 f7       	brne	.-22     	; 0x1548 <__udivmodhi4_loop>
    155e:	80 95       	com	r24
    1560:	90 95       	com	r25
    1562:	bc 01       	movw	r22, r24
    1564:	cd 01       	movw	r24, r26
    1566:	08 95       	ret

00001568 <__divmodhi4>:
    1568:	97 fb       	bst	r25, 7
    156a:	07 2e       	mov	r0, r23
    156c:	16 f4       	brtc	.+4      	; 0x1572 <__divmodhi4+0xa>
    156e:	00 94       	com	r0
    1570:	06 d0       	rcall	.+12     	; 0x157e <__divmodhi4_neg1>
    1572:	77 fd       	sbrc	r23, 7
    1574:	08 d0       	rcall	.+16     	; 0x1586 <__divmodhi4_neg2>
    1576:	e4 df       	rcall	.-56     	; 0x1540 <__udivmodhi4>
    1578:	07 fc       	sbrc	r0, 7
    157a:	05 d0       	rcall	.+10     	; 0x1586 <__divmodhi4_neg2>
    157c:	3e f4       	brtc	.+14     	; 0x158c <__divmodhi4_exit>

0000157e <__divmodhi4_neg1>:
    157e:	90 95       	com	r25
    1580:	81 95       	neg	r24
    1582:	9f 4f       	sbci	r25, 0xFF	; 255
    1584:	08 95       	ret

00001586 <__divmodhi4_neg2>:
    1586:	70 95       	com	r23
    1588:	61 95       	neg	r22
    158a:	7f 4f       	sbci	r23, 0xFF	; 255

0000158c <__divmodhi4_exit>:
    158c:	08 95       	ret

0000158e <__udivmodsi4>:
    158e:	a1 e2       	ldi	r26, 0x21	; 33
    1590:	1a 2e       	mov	r1, r26
    1592:	aa 1b       	sub	r26, r26
    1594:	bb 1b       	sub	r27, r27
    1596:	fd 01       	movw	r30, r26
    1598:	0d c0       	rjmp	.+26     	; 0x15b4 <__udivmodsi4_ep>

0000159a <__udivmodsi4_loop>:
    159a:	aa 1f       	adc	r26, r26
    159c:	bb 1f       	adc	r27, r27
    159e:	ee 1f       	adc	r30, r30
    15a0:	ff 1f       	adc	r31, r31
    15a2:	a2 17       	cp	r26, r18
    15a4:	b3 07       	cpc	r27, r19
    15a6:	e4 07       	cpc	r30, r20
    15a8:	f5 07       	cpc	r31, r21
    15aa:	20 f0       	brcs	.+8      	; 0x15b4 <__udivmodsi4_ep>
    15ac:	a2 1b       	sub	r26, r18
    15ae:	b3 0b       	sbc	r27, r19
    15b0:	e4 0b       	sbc	r30, r20
    15b2:	f5 0b       	sbc	r31, r21

000015b4 <__udivmodsi4_ep>:
    15b4:	66 1f       	adc	r22, r22
    15b6:	77 1f       	adc	r23, r23
    15b8:	88 1f       	adc	r24, r24
    15ba:	99 1f       	adc	r25, r25
    15bc:	1a 94       	dec	r1
    15be:	69 f7       	brne	.-38     	; 0x159a <__udivmodsi4_loop>
    15c0:	60 95       	com	r22
    15c2:	70 95       	com	r23
    15c4:	80 95       	com	r24
    15c6:	90 95       	com	r25
    15c8:	9b 01       	movw	r18, r22
    15ca:	ac 01       	movw	r20, r24
    15cc:	bd 01       	movw	r22, r26
    15ce:	cf 01       	movw	r24, r30
    15d0:	08 95       	ret

000015d2 <__divmodsi4>:
    15d2:	05 2e       	mov	r0, r21
    15d4:	97 fb       	bst	r25, 7
    15d6:	16 f4       	brtc	.+4      	; 0x15dc <__divmodsi4+0xa>
    15d8:	00 94       	com	r0
    15da:	0f d0       	rcall	.+30     	; 0x15fa <__negsi2>
    15dc:	57 fd       	sbrc	r21, 7
    15de:	05 d0       	rcall	.+10     	; 0x15ea <__divmodsi4_neg2>
    15e0:	d6 df       	rcall	.-84     	; 0x158e <__udivmodsi4>
    15e2:	07 fc       	sbrc	r0, 7
    15e4:	02 d0       	rcall	.+4      	; 0x15ea <__divmodsi4_neg2>
    15e6:	46 f4       	brtc	.+16     	; 0x15f8 <__divmodsi4_exit>
    15e8:	08 c0       	rjmp	.+16     	; 0x15fa <__negsi2>

000015ea <__divmodsi4_neg2>:
    15ea:	50 95       	com	r21
    15ec:	40 95       	com	r20
    15ee:	30 95       	com	r19
    15f0:	21 95       	neg	r18
    15f2:	3f 4f       	sbci	r19, 0xFF	; 255
    15f4:	4f 4f       	sbci	r20, 0xFF	; 255
    15f6:	5f 4f       	sbci	r21, 0xFF	; 255

000015f8 <__divmodsi4_exit>:
    15f8:	08 95       	ret

000015fa <__negsi2>:
    15fa:	90 95       	com	r25
    15fc:	80 95       	com	r24
    15fe:	70 95       	com	r23
    1600:	61 95       	neg	r22
    1602:	7f 4f       	sbci	r23, 0xFF	; 255
    1604:	8f 4f       	sbci	r24, 0xFF	; 255
    1606:	9f 4f       	sbci	r25, 0xFF	; 255
    1608:	08 95       	ret

0000160a <__umulhisi3>:
    160a:	a2 9f       	mul	r26, r18
    160c:	b0 01       	movw	r22, r0
    160e:	b3 9f       	mul	r27, r19
    1610:	c0 01       	movw	r24, r0
    1612:	a3 9f       	mul	r26, r19
    1614:	70 0d       	add	r23, r0
    1616:	81 1d       	adc	r24, r1
    1618:	11 24       	eor	r1, r1
    161a:	91 1d       	adc	r25, r1
    161c:	b2 9f       	mul	r27, r18
    161e:	70 0d       	add	r23, r0
    1620:	81 1d       	adc	r24, r1
    1622:	11 24       	eor	r1, r1
    1624:	91 1d       	adc	r25, r1
    1626:	08 95       	ret

00001628 <__muluhisi3>:
    1628:	f0 df       	rcall	.-32     	; 0x160a <__umulhisi3>
    162a:	a5 9f       	mul	r26, r21
    162c:	90 0d       	add	r25, r0
    162e:	b4 9f       	mul	r27, r20
    1630:	90 0d       	add	r25, r0
    1632:	a4 9f       	mul	r26, r20
    1634:	80 0d       	add	r24, r0
    1636:	91 1d       	adc	r25, r1
    1638:	11 24       	eor	r1, r1
    163a:	08 95       	ret

0000163c <_exit>:
    163c:	f8 94       	cli

0000163e <__stop_program>:
    163e:	ff cf       	rjmp	.-2      	; 0x163e <__stop_program>
