
Atmega128.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00001a3e  00001ad2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a3e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001e8  00800106  00800106  00001ad8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001ad8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001b08  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000668  00000000  00000000  00001b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000059f8  00000000  00000000  000021ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001aad  00000000  00000000  00007ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003c61  00000000  00000000  00009651  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000010a0  00000000  00000000  0000d2b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001406  00000000  00000000  0000e354  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000502d  00000000  00000000  0000f75a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005b8  00000000  00000000  00014787  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	c5 c1       	rjmp	.+906    	; 0x390 <__vector_1>
       6:	00 00       	nop
       8:	cd c1       	rjmp	.+922    	; 0x3a4 <__vector_2>
       a:	00 00       	nop
       c:	d5 c1       	rjmp	.+938    	; 0x3b8 <__vector_3>
       e:	00 00       	nop
      10:	dd c1       	rjmp	.+954    	; 0x3cc <__vector_4>
      12:	00 00       	nop
      14:	e5 c1       	rjmp	.+970    	; 0x3e0 <__vector_5>
      16:	00 00       	nop
      18:	ed c1       	rjmp	.+986    	; 0x3f4 <__vector_6>
      1a:	00 00       	nop
      1c:	f5 c1       	rjmp	.+1002   	; 0x408 <__vector_7>
      1e:	00 00       	nop
      20:	fd c1       	rjmp	.+1018   	; 0x41c <__vector_8>
      22:	00 00       	nop
      24:	52 c0       	rjmp	.+164    	; 0xca <__bad_interrupt>
      26:	00 00       	nop
      28:	0d c2       	rjmp	.+1050   	; 0x444 <__vector_10>
      2a:	00 00       	nop
      2c:	15 c2       	rjmp	.+1066   	; 0x458 <__vector_11>
      2e:	00 00       	nop
      30:	1d c2       	rjmp	.+1082   	; 0x46c <__vector_12>
      32:	00 00       	nop
      34:	25 c2       	rjmp	.+1098   	; 0x480 <__vector_13>
      36:	00 00       	nop
      38:	2d c2       	rjmp	.+1114   	; 0x494 <__vector_14>
      3a:	00 00       	nop
      3c:	35 c2       	rjmp	.+1130   	; 0x4a8 <__vector_15>
      3e:	00 00       	nop
      40:	3d c2       	rjmp	.+1146   	; 0x4bc <__vector_16>
      42:	00 00       	nop
      44:	f5 c1       	rjmp	.+1002   	; 0x430 <__vector_17>
      46:	00 00       	nop
      48:	7f c2       	rjmp	.+1278   	; 0x548 <__vector_18>
      4a:	00 00       	nop
      4c:	b3 c2       	rjmp	.+1382   	; 0x5b4 <__vector_19>
      4e:	00 00       	nop
      50:	3c c0       	rjmp	.+120    	; 0xca <__bad_interrupt>
      52:	00 00       	nop
      54:	18 c1       	rjmp	.+560    	; 0x286 <__vector_21>
      56:	00 00       	nop
      58:	38 c0       	rjmp	.+112    	; 0xca <__bad_interrupt>
      5a:	00 00       	nop
      5c:	36 c0       	rjmp	.+108    	; 0xca <__bad_interrupt>
      5e:	00 00       	nop
      60:	37 c2       	rjmp	.+1134   	; 0x4d0 <__vector_24>
      62:	00 00       	nop
      64:	3f c2       	rjmp	.+1150   	; 0x4e4 <__vector_25>
      66:	00 00       	nop
      68:	47 c2       	rjmp	.+1166   	; 0x4f8 <__vector_26>
      6a:	00 00       	nop
      6c:	4f c2       	rjmp	.+1182   	; 0x50c <__vector_27>
      6e:	00 00       	nop
      70:	57 c2       	rjmp	.+1198   	; 0x520 <__vector_28>
      72:	00 00       	nop
      74:	5f c2       	rjmp	.+1214   	; 0x534 <__vector_29>
      76:	00 00       	nop
      78:	c6 c2       	rjmp	.+1420   	; 0x606 <__vector_30>
      7a:	00 00       	nop
      7c:	fd c2       	rjmp	.+1530   	; 0x678 <__vector_31>
      7e:	00 00       	nop
      80:	24 c0       	rjmp	.+72     	; 0xca <__bad_interrupt>
      82:	00 00       	nop
      84:	22 c0       	rjmp	.+68     	; 0xca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c0       	rjmp	.+64     	; 0xca <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ee e3       	ldi	r30, 0x3E	; 62
      a0:	fa e1       	ldi	r31, 0x1A	; 26
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 30       	cpi	r26, 0x06	; 6
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	22 e0       	ldi	r18, 0x02	; 2
      b4:	a6 e0       	ldi	r26, 0x06	; 6
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ae 3e       	cpi	r26, 0xEE	; 238
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 a2 0b 	call	0x1744	; 0x1744 <main>
      c6:	0c 94 1d 0d 	jmp	0x1a3a	; 0x1a3a <_exit>

000000ca <__bad_interrupt>:
      ca:	9a cf       	rjmp	.-204    	; 0x0 <__vectors>

000000cc <HC595_shift_bit>:
	//
	return hc595;
}
void HC595_shift_bit(uint8_t bool)
{
	if (bool)
      cc:	88 23       	and	r24, r24
      ce:	89 f0       	breq	.+34     	; 0xf2 <HC595_shift_bit+0x26>
		*hc595_PORT |= (1<<HC595_datapin); //Data bit HIGH
      d0:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <hc595_PORT>
      d4:	f0 91 32 01 	lds	r31, 0x0132	; 0x800132 <hc595_PORT+0x1>
      d8:	20 81       	ld	r18, Z
      da:	81 e0       	ldi	r24, 0x01	; 1
      dc:	90 e0       	ldi	r25, 0x00	; 0
      de:	00 90 33 01 	lds	r0, 0x0133	; 0x800133 <HC595_datapin>
      e2:	02 c0       	rjmp	.+4      	; 0xe8 <HC595_shift_bit+0x1c>
      e4:	88 0f       	add	r24, r24
      e6:	99 1f       	adc	r25, r25
      e8:	0a 94       	dec	r0
      ea:	e2 f7       	brpl	.-8      	; 0xe4 <HC595_shift_bit+0x18>
      ec:	82 2b       	or	r24, r18
      ee:	80 83       	st	Z, r24
      f0:	11 c0       	rjmp	.+34     	; 0x114 <HC595_shift_bit+0x48>
	else
		*hc595_PORT &= ~(1<<HC595_datapin); //Data bit LOW
      f2:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <hc595_PORT>
      f6:	f0 91 32 01 	lds	r31, 0x0132	; 0x800132 <hc595_PORT+0x1>
      fa:	20 81       	ld	r18, Z
      fc:	81 e0       	ldi	r24, 0x01	; 1
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	00 90 33 01 	lds	r0, 0x0133	; 0x800133 <HC595_datapin>
     104:	02 c0       	rjmp	.+4      	; 0x10a <HC595_shift_bit+0x3e>
     106:	88 0f       	add	r24, r24
     108:	99 1f       	adc	r25, r25
     10a:	0a 94       	dec	r0
     10c:	e2 f7       	brpl	.-8      	; 0x106 <HC595_shift_bit+0x3a>
     10e:	80 95       	com	r24
     110:	82 23       	and	r24, r18
     112:	80 83       	st	Z, r24
	*hc595_PORT |= (1<<HC595_clkpin); // Shift bit
     114:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <hc595_PORT>
     118:	f0 91 32 01 	lds	r31, 0x0132	; 0x800132 <hc595_PORT+0x1>
     11c:	40 81       	ld	r20, Z
     11e:	81 e0       	ldi	r24, 0x01	; 1
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	9c 01       	movw	r18, r24
     124:	00 90 35 01 	lds	r0, 0x0135	; 0x800135 <HC595_clkpin>
     128:	02 c0       	rjmp	.+4      	; 0x12e <HC595_shift_bit+0x62>
     12a:	22 0f       	add	r18, r18
     12c:	33 1f       	adc	r19, r19
     12e:	0a 94       	dec	r0
     130:	e2 f7       	brpl	.-8      	; 0x12a <HC595_shift_bit+0x5e>
     132:	24 2b       	or	r18, r20
     134:	20 83       	st	Z, r18
	*hc595_PORT &= ~(1<<HC595_clkpin); //Shift disable
     136:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <hc595_PORT>
     13a:	f0 91 32 01 	lds	r31, 0x0132	; 0x800132 <hc595_PORT+0x1>
     13e:	20 81       	ld	r18, Z
     140:	00 90 35 01 	lds	r0, 0x0135	; 0x800135 <HC595_clkpin>
     144:	02 c0       	rjmp	.+4      	; 0x14a <HC595_shift_bit+0x7e>
     146:	88 0f       	add	r24, r24
     148:	99 1f       	adc	r25, r25
     14a:	0a 94       	dec	r0
     14c:	e2 f7       	brpl	.-8      	; 0x146 <HC595_shift_bit+0x7a>
     14e:	80 95       	com	r24
     150:	82 23       	and	r24, r18
     152:	80 83       	st	Z, r24
     154:	08 95       	ret

00000156 <HC595_shift_out>:
		HC595_shift_bit(byte & (1<<i));
	HC595_shift_out();
}
void HC595_shift_out(void)
{
	*hc595_PORT |= (1<<HC595_outpin); //Output enable
     156:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <hc595_PORT>
     15a:	f0 91 32 01 	lds	r31, 0x0132	; 0x800132 <hc595_PORT+0x1>
     15e:	40 81       	ld	r20, Z
     160:	81 e0       	ldi	r24, 0x01	; 1
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	9c 01       	movw	r18, r24
     166:	00 90 34 01 	lds	r0, 0x0134	; 0x800134 <HC595_outpin>
     16a:	02 c0       	rjmp	.+4      	; 0x170 <HC595_shift_out+0x1a>
     16c:	22 0f       	add	r18, r18
     16e:	33 1f       	adc	r19, r19
     170:	0a 94       	dec	r0
     172:	e2 f7       	brpl	.-8      	; 0x16c <HC595_shift_out+0x16>
     174:	24 2b       	or	r18, r20
     176:	20 83       	st	Z, r18
	*hc595_PORT &= ~(1<<HC595_outpin); //Output disable
     178:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <hc595_PORT>
     17c:	f0 91 32 01 	lds	r31, 0x0132	; 0x800132 <hc595_PORT+0x1>
     180:	20 81       	ld	r18, Z
     182:	00 90 34 01 	lds	r0, 0x0134	; 0x800134 <HC595_outpin>
     186:	02 c0       	rjmp	.+4      	; 0x18c <HC595_shift_out+0x36>
     188:	88 0f       	add	r24, r24
     18a:	99 1f       	adc	r25, r25
     18c:	0a 94       	dec	r0
     18e:	e2 f7       	brpl	.-8      	; 0x188 <HC595_shift_out+0x32>
     190:	80 95       	com	r24
     192:	82 23       	and	r24, r18
     194:	80 83       	st	Z, r24
     196:	08 95       	ret

00000198 <HC595_shift_byte>:
		*hc595_PORT &= ~(1<<HC595_datapin); //Data bit LOW
	*hc595_PORT |= (1<<HC595_clkpin); // Shift bit
	*hc595_PORT &= ~(1<<HC595_clkpin); //Shift disable
}
void HC595_shift_byte(uint8_t byte)
{
     198:	ff 92       	push	r15
     19a:	0f 93       	push	r16
     19c:	1f 93       	push	r17
     19e:	cf 93       	push	r28
     1a0:	df 93       	push	r29
     1a2:	f8 2e       	mov	r15, r24
     1a4:	c0 e0       	ldi	r28, 0x00	; 0
     1a6:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i;
	for(i=0;i<8;i++)
		HC595_shift_bit(byte & (1<<i));
     1a8:	01 e0       	ldi	r16, 0x01	; 1
     1aa:	10 e0       	ldi	r17, 0x00	; 0
     1ac:	c8 01       	movw	r24, r16
     1ae:	0c 2e       	mov	r0, r28
     1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <HC595_shift_byte+0x1e>
     1b2:	88 0f       	add	r24, r24
     1b4:	99 1f       	adc	r25, r25
     1b6:	0a 94       	dec	r0
     1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <HC595_shift_byte+0x1a>
     1ba:	8f 21       	and	r24, r15
     1bc:	87 df       	rcall	.-242    	; 0xcc <HC595_shift_bit>
     1be:	21 96       	adiw	r28, 0x01	; 1
	*hc595_PORT &= ~(1<<HC595_clkpin); //Shift disable
}
void HC595_shift_byte(uint8_t byte)
{
	uint8_t i;
	for(i=0;i<8;i++)
     1c0:	c8 30       	cpi	r28, 0x08	; 8
     1c2:	d1 05       	cpc	r29, r1
		HC595_shift_bit(byte & (1<<i));
	HC595_shift_out();
     1c4:	99 f7       	brne	.-26     	; 0x1ac <HC595_shift_byte+0x14>
     1c6:	c7 df       	rcall	.-114    	; 0x156 <HC595_shift_out>
}
     1c8:	df 91       	pop	r29
     1ca:	cf 91       	pop	r28
     1cc:	1f 91       	pop	r17
     1ce:	0f 91       	pop	r16
     1d0:	ff 90       	pop	r15
     1d2:	08 95       	ret

000001d4 <HC595enable>:
void HC595_shift_out(void);
/*
** procedure and function
*/
HC595 HC595enable(volatile uint8_t *ddr, volatile uint8_t *port, uint8_t datapin, uint8_t clkpin, uint8_t outpin)
{
     1d4:	0f 93       	push	r16
     1d6:	cf 93       	push	r28
     1d8:	df 93       	push	r29
     1da:	00 d0       	rcall	.+0      	; 0x1dc <HC595enable+0x8>
     1dc:	00 d0       	rcall	.+0      	; 0x1de <HC595enable+0xa>
     1de:	00 d0       	rcall	.+0      	; 0x1e0 <HC595enable+0xc>
     1e0:	cd b7       	in	r28, 0x3d	; 61
     1e2:	de b7       	in	r29, 0x3e	; 62
	//LOCAL VARIABLES
	uint8_t tSREG;
	tSREG=SREG;
     1e4:	5f b7       	in	r21, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
     1e6:	3f b7       	in	r19, 0x3f	; 63
     1e8:	3f 77       	andi	r19, 0x7F	; 127
     1ea:	3f bf       	out	0x3f, r19	; 63
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	HC595 hc595;
	//import parametros
	hc595_DDR=ddr;
     1ec:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <hc595_DDR+0x1>
     1f0:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <hc595_DDR>
	hc595_PORT=port;
     1f4:	70 93 32 01 	sts	0x0132, r23	; 0x800132 <hc595_PORT+0x1>
     1f8:	60 93 31 01 	sts	0x0131, r22	; 0x800131 <hc595_PORT>
	HC595_datapin=datapin; 
     1fc:	40 93 33 01 	sts	0x0133, r20	; 0x800133 <HC595_datapin>
	HC595_clkpin=clkpin; 
     200:	20 93 35 01 	sts	0x0135, r18	; 0x800135 <HC595_clkpin>
	HC595_outpin=outpin;
     204:	00 93 34 01 	sts	0x0134, r16	; 0x800134 <HC595_outpin>
	//inic variables
    *hc595_DDR |= (1<<datapin) | (1<<clkpin) | (1<<outpin);
     208:	fc 01       	movw	r30, r24
     20a:	30 81       	ld	r19, Z
     20c:	61 e0       	ldi	r22, 0x01	; 1
     20e:	70 e0       	ldi	r23, 0x00	; 0
     210:	db 01       	movw	r26, r22
     212:	02 c0       	rjmp	.+4      	; 0x218 <HC595enable+0x44>
     214:	aa 0f       	add	r26, r26
     216:	bb 1f       	adc	r27, r27
     218:	2a 95       	dec	r18
     21a:	e2 f7       	brpl	.-8      	; 0x214 <HC595enable+0x40>
     21c:	fb 01       	movw	r30, r22
     21e:	02 c0       	rjmp	.+4      	; 0x224 <HC595enable+0x50>
     220:	ee 0f       	add	r30, r30
     222:	ff 1f       	adc	r31, r31
     224:	0a 95       	dec	r16
     226:	e2 f7       	brpl	.-8      	; 0x220 <HC595enable+0x4c>
     228:	ea 2b       	or	r30, r26
     22a:	02 c0       	rjmp	.+4      	; 0x230 <HC595enable+0x5c>
     22c:	66 0f       	add	r22, r22
     22e:	77 1f       	adc	r23, r23
     230:	4a 95       	dec	r20
     232:	e2 f7       	brpl	.-8      	; 0x22c <HC595enable+0x58>
     234:	6e 2b       	or	r22, r30
     236:	23 2f       	mov	r18, r19
     238:	26 2b       	or	r18, r22
     23a:	fc 01       	movw	r30, r24
     23c:	20 83       	st	Z, r18
	*hc595_PORT &= ~((1<<datapin) | (1<<clkpin) | (1<<outpin));
     23e:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <hc595_PORT>
     242:	f0 91 32 01 	lds	r31, 0x0132	; 0x800132 <hc595_PORT+0x1>
     246:	80 81       	ld	r24, Z
     248:	60 95       	com	r22
     24a:	68 23       	and	r22, r24
     24c:	60 83       	st	Z, r22
	//Direccionar apontadores para PROTOTIPOS
	hc595.bit=HC595_shift_bit;
	hc595.byte=HC595_shift_byte;
	hc595.out=HC595_shift_out;
	SREG=tSREG;
     24e:	5f bf       	out	0x3f, r21	; 63
	//
	return hc595;
     250:	26 e6       	ldi	r18, 0x66	; 102
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	3a 83       	std	Y+2, r19	; 0x02
     256:	29 83       	std	Y+1, r18	; 0x01
     258:	4c ec       	ldi	r20, 0xCC	; 204
     25a:	50 e0       	ldi	r21, 0x00	; 0
     25c:	5c 83       	std	Y+4, r21	; 0x04
     25e:	4b 83       	std	Y+3, r20	; 0x03
     260:	6b ea       	ldi	r22, 0xAB	; 171
     262:	70 e0       	ldi	r23, 0x00	; 0
     264:	7e 83       	std	Y+6, r23	; 0x06
     266:	6d 83       	std	Y+5, r22	; 0x05
     268:	3a 81       	ldd	r19, Y+2	; 0x02
     26a:	5c 81       	ldd	r21, Y+4	; 0x04
     26c:	7e 81       	ldd	r23, Y+6	; 0x06
}
     26e:	80 e0       	ldi	r24, 0x00	; 0
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	26 96       	adiw	r28, 0x06	; 6
     274:	0f b6       	in	r0, 0x3f	; 63
     276:	f8 94       	cli
     278:	de bf       	out	0x3e, r29	; 62
     27a:	0f be       	out	0x3f, r0	; 63
     27c:	cd bf       	out	0x3d, r28	; 61
     27e:	df 91       	pop	r29
     280:	cf 91       	pop	r28
     282:	0f 91       	pop	r16
     284:	08 95       	ret

00000286 <__vector_21>:
ISR(ANALOG_INTERRUPT)
/*************************************************************************
Function: ANALOG interrupt
Purpose:  Read Analog Input
**************************************************************************/
{
     286:	1f 92       	push	r1
     288:	0f 92       	push	r0
     28a:	0f b6       	in	r0, 0x3f	; 63
     28c:	0f 92       	push	r0
     28e:	11 24       	eor	r1, r1
     290:	0b b6       	in	r0, 0x3b	; 59
     292:	0f 92       	push	r0
     294:	2f 93       	push	r18
     296:	3f 93       	push	r19
     298:	8f 93       	push	r24
     29a:	9f 93       	push	r25
     29c:	ef 93       	push	r30
     29e:	ff 93       	push	r31
	/******/
	adc_tmp=ADCL;
     2a0:	84 b1       	in	r24, 0x04	; 4
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <adc_tmp+0x1>
     2a8:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <adc_tmp>
	adc_tmp|=(ADCH<<8);
     2ac:	25 b1       	in	r18, 0x05	; 5
     2ae:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <adc_tmp>
     2b2:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <adc_tmp+0x1>
     2b6:	92 2b       	or	r25, r18
     2b8:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <adc_tmp+0x1>
     2bc:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <adc_tmp>
	if(adc_n_sample < (1<<ADC_NUMBER_SAMPLE)){
     2c0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
     2c4:	84 30       	cpi	r24, 0x04	; 4
     2c6:	a0 f4       	brcc	.+40     	; 0x2f0 <__vector_21+0x6a>
		adc_n_sample++;
     2c8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
     2cc:	8f 5f       	subi	r24, 0xFF	; 255
     2ce:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
		adc_sample+=adc_tmp;
     2d2:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <adc_tmp>
     2d6:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <adc_tmp+0x1>
     2da:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <adc_sample>
     2de:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <adc_sample+0x1>
     2e2:	82 0f       	add	r24, r18
     2e4:	93 1f       	adc	r25, r19
     2e6:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <adc_sample+0x1>
     2ea:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <adc_sample>
     2ee:	43 c0       	rjmp	.+134    	; 0x376 <__vector_21+0xf0>
	}else{
		ADC_VALUE[ADC_SELECTOR]=adc_sample>>ADC_NUMBER_SAMPLE;
     2f0:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <ADC_SELECTOR>
     2f4:	f0 91 0c 01 	lds	r31, 0x010C	; 0x80010c <ADC_SELECTOR+0x1>
     2f8:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <adc_sample>
     2fc:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <adc_sample+0x1>
     300:	95 95       	asr	r25
     302:	87 95       	ror	r24
     304:	95 95       	asr	r25
     306:	87 95       	ror	r24
     308:	ee 0f       	add	r30, r30
     30a:	ff 1f       	adc	r31, r31
     30c:	e1 5e       	subi	r30, 0xE1	; 225
     30e:	fe 4f       	sbci	r31, 0xFE	; 254
     310:	91 83       	std	Z+1, r25	; 0x01
     312:	80 83       	st	Z, r24
		adc_n_sample=adc_sample=0;
     314:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <adc_sample+0x1>
     318:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <adc_sample>
     31c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
		/******/
		if(ADC_SELECTOR < ADC_N_CHANNEL)
     320:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <ADC_SELECTOR>
     324:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <ADC_SELECTOR+0x1>
     328:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <ADC_N_CHANNEL>
     32c:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <ADC_N_CHANNEL+0x1>
     330:	28 17       	cp	r18, r24
     332:	39 07       	cpc	r19, r25
     334:	54 f4       	brge	.+20     	; 0x34a <__vector_21+0xc4>
			ADC_SELECTOR++;
     336:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <ADC_SELECTOR>
     33a:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <ADC_SELECTOR+0x1>
     33e:	01 96       	adiw	r24, 0x01	; 1
     340:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <ADC_SELECTOR+0x1>
     344:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <ADC_SELECTOR>
     348:	04 c0       	rjmp	.+8      	; 0x352 <__vector_21+0xcc>
		else
			ADC_SELECTOR=0;
     34a:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <ADC_SELECTOR+0x1>
     34e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <ADC_SELECTOR>
		ADC_SELECT &= ~MUX_MASK;
     352:	87 b1       	in	r24, 0x07	; 7
     354:	80 7e       	andi	r24, 0xE0	; 224
     356:	87 b9       	out	0x07, r24	; 7
		ADC_SELECT |= (ADC_CHANNEL_GAIN[ADC_SELECTOR] & MUX_MASK);
     358:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <ADC_SELECTOR>
     35c:	f0 91 0c 01 	lds	r31, 0x010C	; 0x80010c <ADC_SELECTOR+0x1>
     360:	ee 0f       	add	r30, r30
     362:	ff 1f       	adc	r31, r31
     364:	e1 5f       	subi	r30, 0xF1	; 241
     366:	fe 4f       	sbci	r31, 0xFE	; 254
     368:	80 81       	ld	r24, Z
     36a:	91 81       	ldd	r25, Z+1	; 0x01
     36c:	27 b1       	in	r18, 0x07	; 7
     36e:	8f 71       	andi	r24, 0x1F	; 31
     370:	99 27       	eor	r25, r25
     372:	82 2b       	or	r24, r18
     374:	87 b9       	out	0x07, r24	; 7
	}		
}
     376:	ff 91       	pop	r31
     378:	ef 91       	pop	r30
     37a:	9f 91       	pop	r25
     37c:	8f 91       	pop	r24
     37e:	3f 91       	pop	r19
     380:	2f 91       	pop	r18
     382:	0f 90       	pop	r0
     384:	0b be       	out	0x3b, r0	; 59
     386:	0f 90       	pop	r0
     388:	0f be       	out	0x3f, r0	; 63
     38a:	0f 90       	pop	r0
     38c:	1f 90       	pop	r1
     38e:	18 95       	reti

00000390 <__vector_1>:

/*
** interrupt
*/
// cross out the ones being used and redefine in main
ISR(INT0_vect){ }
     390:	1f 92       	push	r1
     392:	0f 92       	push	r0
     394:	0f b6       	in	r0, 0x3f	; 63
     396:	0f 92       	push	r0
     398:	11 24       	eor	r1, r1
     39a:	0f 90       	pop	r0
     39c:	0f be       	out	0x3f, r0	; 63
     39e:	0f 90       	pop	r0
     3a0:	1f 90       	pop	r1
     3a2:	18 95       	reti

000003a4 <__vector_2>:
ISR(INT1_vect){ }
     3a4:	1f 92       	push	r1
     3a6:	0f 92       	push	r0
     3a8:	0f b6       	in	r0, 0x3f	; 63
     3aa:	0f 92       	push	r0
     3ac:	11 24       	eor	r1, r1
     3ae:	0f 90       	pop	r0
     3b0:	0f be       	out	0x3f, r0	; 63
     3b2:	0f 90       	pop	r0
     3b4:	1f 90       	pop	r1
     3b6:	18 95       	reti

000003b8 <__vector_3>:
ISR(INT2_vect){ }
     3b8:	1f 92       	push	r1
     3ba:	0f 92       	push	r0
     3bc:	0f b6       	in	r0, 0x3f	; 63
     3be:	0f 92       	push	r0
     3c0:	11 24       	eor	r1, r1
     3c2:	0f 90       	pop	r0
     3c4:	0f be       	out	0x3f, r0	; 63
     3c6:	0f 90       	pop	r0
     3c8:	1f 90       	pop	r1
     3ca:	18 95       	reti

000003cc <__vector_4>:
ISR(INT3_vect){ }
     3cc:	1f 92       	push	r1
     3ce:	0f 92       	push	r0
     3d0:	0f b6       	in	r0, 0x3f	; 63
     3d2:	0f 92       	push	r0
     3d4:	11 24       	eor	r1, r1
     3d6:	0f 90       	pop	r0
     3d8:	0f be       	out	0x3f, r0	; 63
     3da:	0f 90       	pop	r0
     3dc:	1f 90       	pop	r1
     3de:	18 95       	reti

000003e0 <__vector_5>:
ISR(INT4_vect){ }
     3e0:	1f 92       	push	r1
     3e2:	0f 92       	push	r0
     3e4:	0f b6       	in	r0, 0x3f	; 63
     3e6:	0f 92       	push	r0
     3e8:	11 24       	eor	r1, r1
     3ea:	0f 90       	pop	r0
     3ec:	0f be       	out	0x3f, r0	; 63
     3ee:	0f 90       	pop	r0
     3f0:	1f 90       	pop	r1
     3f2:	18 95       	reti

000003f4 <__vector_6>:
ISR(INT5_vect){ }
     3f4:	1f 92       	push	r1
     3f6:	0f 92       	push	r0
     3f8:	0f b6       	in	r0, 0x3f	; 63
     3fa:	0f 92       	push	r0
     3fc:	11 24       	eor	r1, r1
     3fe:	0f 90       	pop	r0
     400:	0f be       	out	0x3f, r0	; 63
     402:	0f 90       	pop	r0
     404:	1f 90       	pop	r1
     406:	18 95       	reti

00000408 <__vector_7>:
ISR(INT6_vect){ }
     408:	1f 92       	push	r1
     40a:	0f 92       	push	r0
     40c:	0f b6       	in	r0, 0x3f	; 63
     40e:	0f 92       	push	r0
     410:	11 24       	eor	r1, r1
     412:	0f 90       	pop	r0
     414:	0f be       	out	0x3f, r0	; 63
     416:	0f 90       	pop	r0
     418:	1f 90       	pop	r1
     41a:	18 95       	reti

0000041c <__vector_8>:
ISR(INT7_vect){ }
     41c:	1f 92       	push	r1
     41e:	0f 92       	push	r0
     420:	0f b6       	in	r0, 0x3f	; 63
     422:	0f 92       	push	r0
     424:	11 24       	eor	r1, r1
     426:	0f 90       	pop	r0
     428:	0f be       	out	0x3f, r0	; 63
     42a:	0f 90       	pop	r0
     42c:	1f 90       	pop	r1
     42e:	18 95       	reti

00000430 <__vector_17>:
    return SPI_DATA_REGISTER;
}
/*
** interrupt
*/
ISR(SPI_STC_vect){ }
     430:	1f 92       	push	r1
     432:	0f 92       	push	r0
     434:	0f b6       	in	r0, 0x3f	; 63
     436:	0f 92       	push	r0
     438:	11 24       	eor	r1, r1
     43a:	0f 90       	pop	r0
     43c:	0f be       	out	0x3f, r0	; 63
     43e:	0f 90       	pop	r0
     440:	1f 90       	pop	r1
     442:	18 95       	reti

00000444 <__vector_10>:

/*
** interrupt
*/
// So that main will not freeze when not defined, but rather exclude.
ISR(TIMER2_OVF_vect){ }
     444:	1f 92       	push	r1
     446:	0f 92       	push	r0
     448:	0f b6       	in	r0, 0x3f	; 63
     44a:	0f 92       	push	r0
     44c:	11 24       	eor	r1, r1
     44e:	0f 90       	pop	r0
     450:	0f be       	out	0x3f, r0	; 63
     452:	0f 90       	pop	r0
     454:	1f 90       	pop	r1
     456:	18 95       	reti

00000458 <__vector_11>:
ISR(TIMER1_CAPT_vect){ }
     458:	1f 92       	push	r1
     45a:	0f 92       	push	r0
     45c:	0f b6       	in	r0, 0x3f	; 63
     45e:	0f 92       	push	r0
     460:	11 24       	eor	r1, r1
     462:	0f 90       	pop	r0
     464:	0f be       	out	0x3f, r0	; 63
     466:	0f 90       	pop	r0
     468:	1f 90       	pop	r1
     46a:	18 95       	reti

0000046c <__vector_12>:
ISR(TIMER1_COMPA_vect){ }
     46c:	1f 92       	push	r1
     46e:	0f 92       	push	r0
     470:	0f b6       	in	r0, 0x3f	; 63
     472:	0f 92       	push	r0
     474:	11 24       	eor	r1, r1
     476:	0f 90       	pop	r0
     478:	0f be       	out	0x3f, r0	; 63
     47a:	0f 90       	pop	r0
     47c:	1f 90       	pop	r1
     47e:	18 95       	reti

00000480 <__vector_13>:
ISR(TIMER1_COMPB_vect){ }
     480:	1f 92       	push	r1
     482:	0f 92       	push	r0
     484:	0f b6       	in	r0, 0x3f	; 63
     486:	0f 92       	push	r0
     488:	11 24       	eor	r1, r1
     48a:	0f 90       	pop	r0
     48c:	0f be       	out	0x3f, r0	; 63
     48e:	0f 90       	pop	r0
     490:	1f 90       	pop	r1
     492:	18 95       	reti

00000494 <__vector_14>:
ISR(TIMER1_OVF_vect){ }
     494:	1f 92       	push	r1
     496:	0f 92       	push	r0
     498:	0f b6       	in	r0, 0x3f	; 63
     49a:	0f 92       	push	r0
     49c:	11 24       	eor	r1, r1
     49e:	0f 90       	pop	r0
     4a0:	0f be       	out	0x3f, r0	; 63
     4a2:	0f 90       	pop	r0
     4a4:	1f 90       	pop	r1
     4a6:	18 95       	reti

000004a8 <__vector_15>:
ISR(TIMER0_COMP_vect){ }
     4a8:	1f 92       	push	r1
     4aa:	0f 92       	push	r0
     4ac:	0f b6       	in	r0, 0x3f	; 63
     4ae:	0f 92       	push	r0
     4b0:	11 24       	eor	r1, r1
     4b2:	0f 90       	pop	r0
     4b4:	0f be       	out	0x3f, r0	; 63
     4b6:	0f 90       	pop	r0
     4b8:	1f 90       	pop	r1
     4ba:	18 95       	reti

000004bc <__vector_16>:
ISR(TIMER0_OVF_vect){ }
     4bc:	1f 92       	push	r1
     4be:	0f 92       	push	r0
     4c0:	0f b6       	in	r0, 0x3f	; 63
     4c2:	0f 92       	push	r0
     4c4:	11 24       	eor	r1, r1
     4c6:	0f 90       	pop	r0
     4c8:	0f be       	out	0x3f, r0	; 63
     4ca:	0f 90       	pop	r0
     4cc:	1f 90       	pop	r1
     4ce:	18 95       	reti

000004d0 <__vector_24>:
ISR(TIMER1_COMPC_vect){ }
     4d0:	1f 92       	push	r1
     4d2:	0f 92       	push	r0
     4d4:	0f b6       	in	r0, 0x3f	; 63
     4d6:	0f 92       	push	r0
     4d8:	11 24       	eor	r1, r1
     4da:	0f 90       	pop	r0
     4dc:	0f be       	out	0x3f, r0	; 63
     4de:	0f 90       	pop	r0
     4e0:	1f 90       	pop	r1
     4e2:	18 95       	reti

000004e4 <__vector_25>:
ISR(TIMER3_CAPT_vect){ }
     4e4:	1f 92       	push	r1
     4e6:	0f 92       	push	r0
     4e8:	0f b6       	in	r0, 0x3f	; 63
     4ea:	0f 92       	push	r0
     4ec:	11 24       	eor	r1, r1
     4ee:	0f 90       	pop	r0
     4f0:	0f be       	out	0x3f, r0	; 63
     4f2:	0f 90       	pop	r0
     4f4:	1f 90       	pop	r1
     4f6:	18 95       	reti

000004f8 <__vector_26>:
ISR(TIMER3_COMPA_vect){ }
     4f8:	1f 92       	push	r1
     4fa:	0f 92       	push	r0
     4fc:	0f b6       	in	r0, 0x3f	; 63
     4fe:	0f 92       	push	r0
     500:	11 24       	eor	r1, r1
     502:	0f 90       	pop	r0
     504:	0f be       	out	0x3f, r0	; 63
     506:	0f 90       	pop	r0
     508:	1f 90       	pop	r1
     50a:	18 95       	reti

0000050c <__vector_27>:
ISR(TIMER3_COMPB_vect){ }
     50c:	1f 92       	push	r1
     50e:	0f 92       	push	r0
     510:	0f b6       	in	r0, 0x3f	; 63
     512:	0f 92       	push	r0
     514:	11 24       	eor	r1, r1
     516:	0f 90       	pop	r0
     518:	0f be       	out	0x3f, r0	; 63
     51a:	0f 90       	pop	r0
     51c:	1f 90       	pop	r1
     51e:	18 95       	reti

00000520 <__vector_28>:
ISR(TIMER3_COMPC_vect){ }
     520:	1f 92       	push	r1
     522:	0f 92       	push	r0
     524:	0f b6       	in	r0, 0x3f	; 63
     526:	0f 92       	push	r0
     528:	11 24       	eor	r1, r1
     52a:	0f 90       	pop	r0
     52c:	0f be       	out	0x3f, r0	; 63
     52e:	0f 90       	pop	r0
     530:	1f 90       	pop	r1
     532:	18 95       	reti

00000534 <__vector_29>:
ISR(TIMER3_OVF_vect){ }
     534:	1f 92       	push	r1
     536:	0f 92       	push	r0
     538:	0f b6       	in	r0, 0x3f	; 63
     53a:	0f 92       	push	r0
     53c:	11 24       	eor	r1, r1
     53e:	0f 90       	pop	r0
     540:	0f be       	out	0x3f, r0	; 63
     542:	0f 90       	pop	r0
     544:	1f 90       	pop	r1
     546:	18 95       	reti

00000548 <__vector_18>:
	}else{
		uart1_index=0;
		ret=uart1_msg;
	}
	return ret;
}
     548:	1f 92       	push	r1
     54a:	0f 92       	push	r0
     54c:	0f b6       	in	r0, 0x3f	; 63
     54e:	0f 92       	push	r0
     550:	11 24       	eor	r1, r1
     552:	0b b6       	in	r0, 0x3b	; 59
     554:	0f 92       	push	r0
     556:	8f 93       	push	r24
     558:	9f 93       	push	r25
     55a:	ef 93       	push	r30
     55c:	ff 93       	push	r31
     55e:	8b b1       	in	r24, 0x0b	; 11
     560:	9a b1       	in	r25, 0x0a	; 10
     562:	88 71       	andi	r24, 0x18	; 24
     564:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <UART_LastRxError>
     568:	e0 91 80 02 	lds	r30, 0x0280	; 0x800280 <UART_RxHead>
     56c:	ef 5f       	subi	r30, 0xFF	; 255
     56e:	ef 73       	andi	r30, 0x3F	; 63
     570:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <UART_RxTail>
     574:	e9 13       	cpse	r30, r25
     576:	04 c0       	rjmp	.+8      	; 0x580 <__vector_18+0x38>
     578:	82 e0       	ldi	r24, 0x02	; 2
     57a:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <UART_LastRxError>
     57e:	0f c0       	rjmp	.+30     	; 0x59e <__vector_18+0x56>
     580:	9c b1       	in	r25, 0x0c	; 12
     582:	e0 93 80 02 	sts	0x0280, r30	; 0x800280 <UART_RxHead>
     586:	88 23       	and	r24, r24
     588:	31 f0       	breq	.+12     	; 0x596 <__vector_18+0x4e>
     58a:	f0 e0       	ldi	r31, 0x00	; 0
     58c:	ed 57       	subi	r30, 0x7D	; 125
     58e:	fd 4f       	sbci	r31, 0xFD	; 253
     590:	88 e5       	ldi	r24, 0x58	; 88
     592:	80 83       	st	Z, r24
     594:	04 c0       	rjmp	.+8      	; 0x59e <__vector_18+0x56>
     596:	f0 e0       	ldi	r31, 0x00	; 0
     598:	ed 57       	subi	r30, 0x7D	; 125
     59a:	fd 4f       	sbci	r31, 0xFD	; 253
     59c:	90 83       	st	Z, r25
     59e:	ff 91       	pop	r31
     5a0:	ef 91       	pop	r30
     5a2:	9f 91       	pop	r25
     5a4:	8f 91       	pop	r24
     5a6:	0f 90       	pop	r0
     5a8:	0b be       	out	0x3b, r0	; 59
     5aa:	0f 90       	pop	r0
     5ac:	0f be       	out	0x3f, r0	; 63
     5ae:	0f 90       	pop	r0
     5b0:	1f 90       	pop	r1
     5b2:	18 95       	reti

000005b4 <__vector_19>:
     5b4:	1f 92       	push	r1
     5b6:	0f 92       	push	r0
     5b8:	0f b6       	in	r0, 0x3f	; 63
     5ba:	0f 92       	push	r0
     5bc:	11 24       	eor	r1, r1
     5be:	0b b6       	in	r0, 0x3b	; 59
     5c0:	0f 92       	push	r0
     5c2:	8f 93       	push	r24
     5c4:	9f 93       	push	r25
     5c6:	ef 93       	push	r30
     5c8:	ff 93       	push	r31
     5ca:	e0 91 bb 01 	lds	r30, 0x01BB	; 0x8001bb <UART_TxTail>
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	8e 0f       	add	r24, r30
     5d2:	8f 73       	andi	r24, 0x3F	; 63
     5d4:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <UART_TxTail>
     5d8:	f0 e0       	ldi	r31, 0x00	; 0
     5da:	e0 5c       	subi	r30, 0xC0	; 192
     5dc:	fd 4f       	sbci	r31, 0xFD	; 253
     5de:	80 81       	ld	r24, Z
     5e0:	8c b9       	out	0x0c, r24	; 12
     5e2:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <UART_TxTail>
     5e6:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <UART_TxHead>
     5ea:	98 13       	cpse	r25, r24
     5ec:	01 c0       	rjmp	.+2      	; 0x5f0 <__vector_19+0x3c>
     5ee:	55 98       	cbi	0x0a, 5	; 10
     5f0:	ff 91       	pop	r31
     5f2:	ef 91       	pop	r30
     5f4:	9f 91       	pop	r25
     5f6:	8f 91       	pop	r24
     5f8:	0f 90       	pop	r0
     5fa:	0b be       	out	0x3b, r0	; 59
     5fc:	0f 90       	pop	r0
     5fe:	0f be       	out	0x3f, r0	; 63
     600:	0f 90       	pop	r0
     602:	1f 90       	pop	r1
     604:	18 95       	reti

00000606 <__vector_30>:
/*
** interrupt
*/
/***SIGNAL(UART1_RECEIVE_INTERRUPT)***/
SIGNAL(UART1_RECEIVE_INTERRUPT)
{
     606:	1f 92       	push	r1
     608:	0f 92       	push	r0
     60a:	0f b6       	in	r0, 0x3f	; 63
     60c:	0f 92       	push	r0
     60e:	11 24       	eor	r1, r1
     610:	0b b6       	in	r0, 0x3b	; 59
     612:	0f 92       	push	r0
     614:	8f 93       	push	r24
     616:	9f 93       	push	r25
     618:	ef 93       	push	r30
     61a:	ff 93       	push	r31
    unsigned char tmphead;
	unsigned char data;
	unsigned char bit9;
    unsigned char usr;
    /* read UART status register and UART data register */
	usr  = UART1_STATUS;
     61c:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    bit9 = UART1_CONTROL;
     620:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
    bit9 = 0x01 & (bit9>>1);
    /* */
    UART1_LastRxError = (usr & (_BV(FE1)|_BV(DOR1)));
     624:	88 71       	andi	r24, 0x18	; 24
     626:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <UART1_LastRxError>
	/* calculate buffer index */
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
     62a:	e0 91 bc 01 	lds	r30, 0x01BC	; 0x8001bc <UART1_RxHead>
     62e:	ef 5f       	subi	r30, 0xFF	; 255
     630:	ef 73       	andi	r30, 0x3F	; 63
    if ( tmphead == UART1_RxTail ) {	
     632:	90 91 82 02 	lds	r25, 0x0282	; 0x800282 <UART1_RxTail>
     636:	e9 13       	cpse	r30, r25
     638:	04 c0       	rjmp	.+8      	; 0x642 <__vector_30+0x3c>
        /* error: receive buffer overflow, caracter is lost*/
        UART1_LastRxError = UART_BUFFER_OVERFLOW >> 8; 
     63a:	82 e0       	ldi	r24, 0x02	; 2
     63c:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <UART1_LastRxError>
     640:	10 c0       	rjmp	.+32     	; 0x662 <__vector_30+0x5c>
	}else{
		data = UART1_DATA;
     642:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
        /* store new index */
        UART1_RxHead = tmphead;
     646:	e0 93 bc 01 	sts	0x01BC, r30	; 0x8001bc <UART1_RxHead>
		if(UART1_LastRxError){
     64a:	88 23       	and	r24, r24
     64c:	31 f0       	breq	.+12     	; 0x65a <__vector_30+0x54>
			/* store indication data error in buffer */
			UART1_RxBuf[tmphead] = 'X';
     64e:	f0 e0       	ldi	r31, 0x00	; 0
     650:	e7 58       	subi	r30, 0x87	; 135
     652:	fe 4f       	sbci	r31, 0xFE	; 254
     654:	88 e5       	ldi	r24, 0x58	; 88
     656:	80 83       	st	Z, r24
     658:	04 c0       	rjmp	.+8      	; 0x662 <__vector_30+0x5c>
		}else{
			/* store received data in buffer */
			UART1_RxBuf[tmphead] = data;
     65a:	f0 e0       	ldi	r31, 0x00	; 0
     65c:	e7 58       	subi	r30, 0x87	; 135
     65e:	fe 4f       	sbci	r31, 0xFE	; 254
     660:	90 83       	st	Z, r25
		}
    }
}
     662:	ff 91       	pop	r31
     664:	ef 91       	pop	r30
     666:	9f 91       	pop	r25
     668:	8f 91       	pop	r24
     66a:	0f 90       	pop	r0
     66c:	0b be       	out	0x3b, r0	; 59
     66e:	0f 90       	pop	r0
     670:	0f be       	out	0x3f, r0	; 63
     672:	0f 90       	pop	r0
     674:	1f 90       	pop	r1
     676:	18 95       	reti

00000678 <__vector_31>:
/***SIGNAL(UART1_TRANSMIT_INTERRUPT)***/
SIGNAL(UART1_TRANSMIT_INTERRUPT)
{
     678:	1f 92       	push	r1
     67a:	0f 92       	push	r0
     67c:	0f b6       	in	r0, 0x3f	; 63
     67e:	0f 92       	push	r0
     680:	11 24       	eor	r1, r1
     682:	0b b6       	in	r0, 0x3b	; 59
     684:	0f 92       	push	r0
     686:	8f 93       	push	r24
     688:	9f 93       	push	r25
     68a:	ef 93       	push	r30
     68c:	ff 93       	push	r31
	uint8_t tail = UART1_TxTail;
	UART1_DATA = UART1_TxBuf[tail];
     68e:	e0 91 78 01 	lds	r30, 0x0178	; 0x800178 <UART1_TxTail>
     692:	f0 e0       	ldi	r31, 0x00	; 0
     694:	e0 50       	subi	r30, 0x00	; 0
     696:	fe 4f       	sbci	r31, 0xFE	; 254
     698:	80 81       	ld	r24, Z
     69a:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
	UART1_TxBuf[tail]='\0';
     69e:	10 82       	st	Z, r1
	UART1_TxTail = (UART1_TxTail + 1) & UART_TX_BUFFER_MASK;
     6a0:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <UART1_TxTail>
     6a4:	8f 5f       	subi	r24, 0xFF	; 255
     6a6:	8f 73       	andi	r24, 0x3F	; 63
     6a8:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <UART1_TxTail>
	if ( UART1_TxTail != UART1_TxHead )
     6ac:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <UART1_TxHead>
     6b0:	89 13       	cpse	r24, r25
     6b2:	05 c0       	rjmp	.+10     	; 0x6be <__vector_31+0x46>
        ;
    else
		UART1_CONTROL &= ~_BV(UART1_UDRIE);
     6b4:	ea e9       	ldi	r30, 0x9A	; 154
     6b6:	f0 e0       	ldi	r31, 0x00	; 0
     6b8:	80 81       	ld	r24, Z
     6ba:	8f 7d       	andi	r24, 0xDF	; 223
     6bc:	80 83       	st	Z, r24
}
     6be:	ff 91       	pop	r31
     6c0:	ef 91       	pop	r30
     6c2:	9f 91       	pop	r25
     6c4:	8f 91       	pop	r24
     6c6:	0f 90       	pop	r0
     6c8:	0b be       	out	0x3b, r0	; 59
     6ca:	0f 90       	pop	r0
     6cc:	0f be       	out	0x3f, r0	; 63
     6ce:	0f 90       	pop	r0
     6d0:	1f 90       	pop	r1
     6d2:	18 95       	reti

000006d4 <FUNCpinmatch>:
}
//pinmatch
uint8_t FUNCpinmatch(uint8_t match, uint8_t pin, uint8_t HL)
{
	uint8_t result;
	result=match&pin;
     6d4:	68 23       	and	r22, r24
	if(HL){
     6d6:	44 23       	and	r20, r20
     6d8:	21 f0       	breq	.+8      	; 0x6e2 <FUNCpinmatch+0xe>
		if(result==match);
     6da:	86 17       	cp	r24, r22
     6dc:	21 f0       	breq	.+8      	; 0x6e6 <FUNCpinmatch+0x12>
		else
			result=0;
     6de:	80 e0       	ldi	r24, 0x00	; 0
     6e0:	08 95       	ret
	}else{
		if(result)
     6e2:	61 11       	cpse	r22, r1
			result=0;
     6e4:	80 e0       	ldi	r24, 0x00	; 0
		else
			result=match;
	}
	return result;
}
     6e6:	08 95       	ret

000006e8 <FUNChmerge>:
// hmerge
uint8_t FUNChmerge(uint8_t X, uint8_t Y)
{
	return (X | Y);
}
     6e8:	86 2b       	or	r24, r22
     6ea:	08 95       	ret

000006ec <FUNClmerge>:
// lmerge
uint8_t FUNClmerge(uint8_t X, uint8_t Y)
{
	return (X & Y);
}
     6ec:	86 23       	and	r24, r22
     6ee:	08 95       	ret

000006f0 <FUNChh>:
uint8_t FUNChh(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi&xf;
	return i;
}
     6f0:	86 23       	and	r24, r22
     6f2:	08 95       	ret

000006f4 <FUNCll>:
// ll
uint8_t FUNCll(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi|xf;
	return ~i;
     6f4:	86 2b       	or	r24, r22
}
     6f6:	80 95       	com	r24
     6f8:	08 95       	ret

000006fa <FUNClh>:
// lh
uint8_t FUNClh(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi^xf;
     6fa:	86 27       	eor	r24, r22
	i&=xf;
	return i;
}
     6fc:	86 23       	and	r24, r22
     6fe:	08 95       	ret

00000700 <FUNChl>:
// hl
uint8_t FUNChl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xf^xi;
     700:	60 95       	com	r22
	i&=xi;
	return i;
}
     702:	86 23       	and	r24, r22
     704:	08 95       	ret

00000706 <FUNCdiff>:
// diff
uint8_t FUNCdiff(uint8_t xi, uint8_t xf)
{
	return xf^xi;
}
     706:	86 27       	eor	r24, r22
     708:	08 95       	ret

0000070a <FUNCswap>:
// interchange *px and *py
void FUNCswap(long *px, long *py)
{
     70a:	cf 92       	push	r12
     70c:	df 92       	push	r13
     70e:	ef 92       	push	r14
     710:	ff 92       	push	r15
     712:	0f 93       	push	r16
     714:	1f 93       	push	r17
	long temp;
	temp = *px;
     716:	fc 01       	movw	r30, r24
     718:	00 81       	ld	r16, Z
     71a:	11 81       	ldd	r17, Z+1	; 0x01
     71c:	22 81       	ldd	r18, Z+2	; 0x02
     71e:	33 81       	ldd	r19, Z+3	; 0x03
	*px = *py;
     720:	fb 01       	movw	r30, r22
     722:	c0 80       	ld	r12, Z
     724:	d1 80       	ldd	r13, Z+1	; 0x01
     726:	e2 80       	ldd	r14, Z+2	; 0x02
     728:	f3 80       	ldd	r15, Z+3	; 0x03
     72a:	fc 01       	movw	r30, r24
     72c:	c0 82       	st	Z, r12
     72e:	d1 82       	std	Z+1, r13	; 0x01
     730:	e2 82       	std	Z+2, r14	; 0x02
     732:	f3 82       	std	Z+3, r15	; 0x03
	*py = temp;
     734:	fb 01       	movw	r30, r22
     736:	00 83       	st	Z, r16
     738:	11 83       	std	Z+1, r17	; 0x01
     73a:	22 83       	std	Z+2, r18	; 0x02
     73c:	33 83       	std	Z+3, r19	; 0x03
}
     73e:	1f 91       	pop	r17
     740:	0f 91       	pop	r16
     742:	ff 90       	pop	r15
     744:	ef 90       	pop	r14
     746:	df 90       	pop	r13
     748:	cf 90       	pop	r12
     74a:	08 95       	ret

0000074c <FUNCcopy>:
// copy: copy 'from' into 'to'; assume to is big enough
void FUNCcopy(char to[], char from[])
{
	int i;
	i = 0;
	while ((to[i] = from[i]) != '\0')
     74c:	fb 01       	movw	r30, r22
     74e:	20 81       	ld	r18, Z
     750:	fc 01       	movw	r30, r24
     752:	20 83       	st	Z, r18
     754:	22 23       	and	r18, r18
     756:	39 f0       	breq	.+14     	; 0x766 <FUNCcopy+0x1a>
     758:	db 01       	movw	r26, r22
     75a:	11 96       	adiw	r26, 0x01	; 1
     75c:	31 96       	adiw	r30, 0x01	; 1
     75e:	9d 91       	ld	r25, X+
     760:	91 93       	st	Z+, r25
     762:	91 11       	cpse	r25, r1
     764:	fc cf       	rjmp	.-8      	; 0x75e <FUNCcopy+0x12>
     766:	08 95       	ret

00000768 <FUNCsqueeze>:
		++i;
}
// squeeze: delete all c from s
void FUNCsqueeze(char s[], int c)
{
     768:	cf 93       	push	r28
     76a:	df 93       	push	r29
     76c:	ec 01       	movw	r28, r24
	int i, j;
	for (i = j = 0; s[i] != '\0'; i++)
     76e:	98 81       	ld	r25, Y
     770:	99 23       	and	r25, r25
     772:	99 f0       	breq	.+38     	; 0x79a <FUNCsqueeze+0x32>
     774:	fe 01       	movw	r30, r28
     776:	31 96       	adiw	r30, 0x01	; 1
     778:	20 e0       	ldi	r18, 0x00	; 0
     77a:	30 e0       	ldi	r19, 0x00	; 0
		if (s[i] != c)
     77c:	49 2f       	mov	r20, r25
     77e:	50 e0       	ldi	r21, 0x00	; 0
     780:	46 17       	cp	r20, r22
     782:	57 07       	cpc	r21, r23
     784:	31 f0       	breq	.+12     	; 0x792 <FUNCsqueeze+0x2a>
			s[j++] = s[i];
     786:	de 01       	movw	r26, r28
     788:	a2 0f       	add	r26, r18
     78a:	b3 1f       	adc	r27, r19
     78c:	9c 93       	st	X, r25
     78e:	2f 5f       	subi	r18, 0xFF	; 255
     790:	3f 4f       	sbci	r19, 0xFF	; 255
}
// squeeze: delete all c from s
void FUNCsqueeze(char s[], int c)
{
	int i, j;
	for (i = j = 0; s[i] != '\0'; i++)
     792:	91 91       	ld	r25, Z+
     794:	91 11       	cpse	r25, r1
     796:	f2 cf       	rjmp	.-28     	; 0x77c <FUNCsqueeze+0x14>
     798:	02 c0       	rjmp	.+4      	; 0x79e <FUNCsqueeze+0x36>
     79a:	20 e0       	ldi	r18, 0x00	; 0
     79c:	30 e0       	ldi	r19, 0x00	; 0
		if (s[i] != c)
			s[j++] = s[i];
		s[j] = '\0';
     79e:	fe 01       	movw	r30, r28
     7a0:	e2 0f       	add	r30, r18
     7a2:	f3 1f       	adc	r31, r19
     7a4:	10 82       	st	Z, r1
}
     7a6:	df 91       	pop	r29
     7a8:	cf 91       	pop	r28
     7aa:	08 95       	ret

000007ac <FUNCshellsort>:
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
     7ac:	2f 92       	push	r2
     7ae:	3f 92       	push	r3
     7b0:	4f 92       	push	r4
     7b2:	5f 92       	push	r5
     7b4:	6f 92       	push	r6
     7b6:	7f 92       	push	r7
     7b8:	8f 92       	push	r8
     7ba:	9f 92       	push	r9
     7bc:	af 92       	push	r10
     7be:	bf 92       	push	r11
     7c0:	cf 92       	push	r12
     7c2:	df 92       	push	r13
     7c4:	ef 92       	push	r14
     7c6:	ff 92       	push	r15
     7c8:	0f 93       	push	r16
     7ca:	1f 93       	push	r17
     7cc:	cf 93       	push	r28
     7ce:	df 93       	push	r29
     7d0:	00 d0       	rcall	.+0      	; 0x7d2 <FUNCshellsort+0x26>
     7d2:	00 d0       	rcall	.+0      	; 0x7d4 <FUNCshellsort+0x28>
     7d4:	cd b7       	in	r28, 0x3d	; 61
     7d6:	de b7       	in	r29, 0x3e	; 62
     7d8:	2c 01       	movw	r4, r24
     7da:	1b 01       	movw	r2, r22
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
     7dc:	4b 01       	movw	r8, r22
     7de:	77 23       	and	r23, r23
     7e0:	1c f4       	brge	.+6      	; 0x7e8 <FUNCshellsort+0x3c>
     7e2:	2f ef       	ldi	r18, 0xFF	; 255
     7e4:	82 1a       	sub	r8, r18
     7e6:	92 0a       	sbc	r9, r18
     7e8:	95 94       	asr	r9
     7ea:	87 94       	ror	r8
     7ec:	18 14       	cp	r1, r8
     7ee:	19 04       	cpc	r1, r9
     7f0:	0c f4       	brge	.+2      	; 0x7f4 <FUNCshellsort+0x48>
     7f2:	51 c0       	rjmp	.+162    	; 0x896 <FUNCshellsort+0xea>
     7f4:	6a c0       	rjmp	.+212    	; 0x8ca <FUNCshellsort+0x11e>
		for (i = gap; i < n; i++)
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
     7f6:	96 01       	movw	r18, r12
     7f8:	dd 20       	and	r13, r13
     7fa:	9c f1       	brlt	.+102    	; 0x862 <FUNCshellsort+0xb6>
     7fc:	f5 01       	movw	r30, r10
     7fe:	40 81       	ld	r20, Z
     800:	51 81       	ldd	r21, Z+1	; 0x01
     802:	f4 01       	movw	r30, r8
     804:	60 81       	ld	r22, Z
     806:	71 81       	ldd	r23, Z+1	; 0x01
     808:	64 17       	cp	r22, r20
     80a:	75 07       	cpc	r23, r21
     80c:	54 f5       	brge	.+84     	; 0x862 <FUNCshellsort+0xb6>
     80e:	8c 01       	movw	r16, r24
     810:	0a 0d       	add	r16, r10
     812:	1b 1d       	adc	r17, r11
     814:	d4 01       	movw	r26, r8
     816:	bc 82       	std	Y+4, r11	; 0x04
     818:	ab 82       	std	Y+3, r10	; 0x03
     81a:	ba 82       	std	Y+2, r11	; 0x02
     81c:	a9 82       	std	Y+1, r10	; 0x01
				temp = v[j];
				v[j] = v[j+gap];
     81e:	eb 81       	ldd	r30, Y+3	; 0x03
     820:	fc 81       	ldd	r31, Y+4	; 0x04
     822:	71 83       	std	Z+1, r23	; 0x01
     824:	60 83       	st	Z, r22
				v[j+gap] = temp;
     826:	11 96       	adiw	r26, 0x01	; 1
     828:	5c 93       	st	X, r21
     82a:	4e 93       	st	-X, r20
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
		for (i = gap; i < n; i++)
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
     82c:	2e 19       	sub	r18, r14
     82e:	3f 09       	sbc	r19, r15
     830:	c2 f0       	brmi	.+48     	; 0x862 <FUNCshellsort+0xb6>
     832:	f8 01       	movw	r30, r16
     834:	40 81       	ld	r20, Z
     836:	51 81       	ldd	r21, Z+1	; 0x01
     838:	e9 81       	ldd	r30, Y+1	; 0x01
     83a:	fa 81       	ldd	r31, Y+2	; 0x02
     83c:	60 81       	ld	r22, Z
     83e:	71 81       	ldd	r23, Z+1	; 0x01
     840:	08 0f       	add	r16, r24
     842:	19 1f       	adc	r17, r25
     844:	e8 0f       	add	r30, r24
     846:	f9 1f       	adc	r31, r25
     848:	fa 83       	std	Y+2, r31	; 0x02
     84a:	e9 83       	std	Y+1, r30	; 0x01
     84c:	eb 81       	ldd	r30, Y+3	; 0x03
     84e:	fc 81       	ldd	r31, Y+4	; 0x04
     850:	e8 0f       	add	r30, r24
     852:	f9 1f       	adc	r31, r25
     854:	fc 83       	std	Y+4, r31	; 0x04
     856:	eb 83       	std	Y+3, r30	; 0x03
     858:	a8 0f       	add	r26, r24
     85a:	b9 1f       	adc	r27, r25
     85c:	64 17       	cp	r22, r20
     85e:	75 07       	cpc	r23, r21
     860:	f4 f2       	brlt	.-68     	; 0x81e <FUNCshellsort+0x72>
     862:	ff ef       	ldi	r31, 0xFF	; 255
     864:	cf 1a       	sub	r12, r31
     866:	df 0a       	sbc	r13, r31
     868:	22 e0       	ldi	r18, 0x02	; 2
     86a:	a2 0e       	add	r10, r18
     86c:	b1 1c       	adc	r11, r1
     86e:	e2 e0       	ldi	r30, 0x02	; 2
     870:	8e 0e       	add	r8, r30
     872:	91 1c       	adc	r9, r1
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
		for (i = gap; i < n; i++)
     874:	c6 14       	cp	r12, r6
     876:	d7 04       	cpc	r13, r7
     878:	09 f0       	breq	.+2      	; 0x87c <FUNCshellsort+0xd0>
     87a:	bd cf       	rjmp	.-134    	; 0x7f6 <FUNCshellsort+0x4a>
}
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
     87c:	47 01       	movw	r8, r14
     87e:	ff 20       	and	r15, r15
     880:	1c f4       	brge	.+6      	; 0x888 <FUNCshellsort+0xdc>
     882:	ff ef       	ldi	r31, 0xFF	; 255
     884:	8f 1a       	sub	r8, r31
     886:	9f 0a       	sbc	r9, r31
     888:	95 94       	asr	r9
     88a:	87 94       	ror	r8
     88c:	18 14       	cp	r1, r8
     88e:	19 04       	cpc	r1, r9
     890:	e4 f4       	brge	.+56     	; 0x8ca <FUNCshellsort+0x11e>
     892:	74 01       	movw	r14, r8
     894:	01 c0       	rjmp	.+2      	; 0x898 <FUNCshellsort+0xec>
     896:	74 01       	movw	r14, r8
		for (i = gap; i < n; i++)
     898:	82 14       	cp	r8, r2
     89a:	93 04       	cpc	r9, r3
     89c:	7c f7       	brge	.-34     	; 0x87c <FUNCshellsort+0xd0>
     89e:	64 01       	movw	r12, r8
     8a0:	ce 18       	sub	r12, r14
     8a2:	df 08       	sbc	r13, r15
     8a4:	56 01       	movw	r10, r12
     8a6:	aa 0c       	add	r10, r10
     8a8:	bb 1c       	adc	r11, r11
     8aa:	a4 0c       	add	r10, r4
     8ac:	b5 1c       	adc	r11, r5
     8ae:	88 0c       	add	r8, r8
     8b0:	99 1c       	adc	r9, r9
     8b2:	84 0c       	add	r8, r4
     8b4:	95 1c       	adc	r9, r5
     8b6:	31 01       	movw	r6, r2
     8b8:	6e 18       	sub	r6, r14
     8ba:	7f 08       	sbc	r7, r15
     8bc:	c7 01       	movw	r24, r14
     8be:	88 0f       	add	r24, r24
     8c0:	99 1f       	adc	r25, r25
     8c2:	91 95       	neg	r25
     8c4:	81 95       	neg	r24
     8c6:	91 09       	sbc	r25, r1
     8c8:	96 cf       	rjmp	.-212    	; 0x7f6 <FUNCshellsort+0x4a>
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
				temp = v[j];
				v[j] = v[j+gap];
				v[j+gap] = temp;
			}
}
     8ca:	0f 90       	pop	r0
     8cc:	0f 90       	pop	r0
     8ce:	0f 90       	pop	r0
     8d0:	0f 90       	pop	r0
     8d2:	df 91       	pop	r29
     8d4:	cf 91       	pop	r28
     8d6:	1f 91       	pop	r17
     8d8:	0f 91       	pop	r16
     8da:	ff 90       	pop	r15
     8dc:	ef 90       	pop	r14
     8de:	df 90       	pop	r13
     8e0:	cf 90       	pop	r12
     8e2:	bf 90       	pop	r11
     8e4:	af 90       	pop	r10
     8e6:	9f 90       	pop	r9
     8e8:	8f 90       	pop	r8
     8ea:	7f 90       	pop	r7
     8ec:	6f 90       	pop	r6
     8ee:	5f 90       	pop	r5
     8f0:	4f 90       	pop	r4
     8f2:	3f 90       	pop	r3
     8f4:	2f 90       	pop	r2
     8f6:	08 95       	ret

000008f8 <FUNCpmax>:
	if(a1 > a2){
		biggest = a1;
	}else{
		biggest = a2;
	}
	return biggest;
     8f8:	86 17       	cp	r24, r22
     8fa:	97 07       	cpc	r25, r23
     8fc:	0c f4       	brge	.+2      	; 0x900 <FUNCpmax+0x8>
     8fe:	cb 01       	movw	r24, r22
}
     900:	08 95       	ret

00000902 <FUNCgcd>:
// common divisor
int FUNCgcd (int u, int v)
{
     902:	9b 01       	movw	r18, r22
	int temp;
	while ( v != 0 ) {
     904:	67 2b       	or	r22, r23
     906:	11 f4       	brne	.+4      	; 0x90c <FUNCgcd+0xa>
     908:	08 95       	ret
		temp = u % v;
		u = v;
		v = temp;
     90a:	9a 01       	movw	r18, r20
// common divisor
int FUNCgcd (int u, int v)
{
	int temp;
	while ( v != 0 ) {
		temp = u % v;
     90c:	b9 01       	movw	r22, r18
     90e:	0e 94 b3 0c 	call	0x1966	; 0x1966 <__divmodhi4>
     912:	ac 01       	movw	r20, r24
     914:	82 2f       	mov	r24, r18
     916:	93 2f       	mov	r25, r19
}
// common divisor
int FUNCgcd (int u, int v)
{
	int temp;
	while ( v != 0 ) {
     918:	41 15       	cp	r20, r1
     91a:	51 05       	cpc	r21, r1
     91c:	b1 f7       	brne	.-20     	; 0x90a <FUNCgcd+0x8>
		temp = u % v;
		u = v;
		v = temp;
	}
	return u;
}
     91e:	08 95       	ret

00000920 <FUNCstrToInt>:
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
     920:	fc 01       	movw	r30, r24
	int i, intValue, result = 0;
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
     922:	90 81       	ld	r25, Z
     924:	80 ed       	ldi	r24, 0xD0	; 208
     926:	89 0f       	add	r24, r25
     928:	8a 30       	cpi	r24, 0x0A	; 10
     92a:	d0 f4       	brcc	.+52     	; 0x960 <FUNCstrToInt+0x40>
     92c:	31 96       	adiw	r30, 0x01	; 1
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
		intValue = string[i] - '0';
		result = result * 10 + intValue;
     932:	a9 01       	movw	r20, r18
     934:	44 0f       	add	r20, r20
     936:	55 1f       	adc	r21, r21
     938:	22 0f       	add	r18, r18
     93a:	33 1f       	adc	r19, r19
     93c:	22 0f       	add	r18, r18
     93e:	33 1f       	adc	r19, r19
     940:	22 0f       	add	r18, r18
     942:	33 1f       	adc	r19, r19
     944:	42 0f       	add	r20, r18
     946:	53 1f       	adc	r21, r19
     948:	29 2f       	mov	r18, r25
     94a:	30 e0       	ldi	r19, 0x00	; 0
     94c:	20 53       	subi	r18, 0x30	; 48
     94e:	31 09       	sbc	r19, r1
     950:	24 0f       	add	r18, r20
     952:	35 1f       	adc	r19, r21
}
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
	int i, intValue, result = 0;
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
     954:	91 91       	ld	r25, Z+
     956:	80 ed       	ldi	r24, 0xD0	; 208
     958:	89 0f       	add	r24, r25
     95a:	8a 30       	cpi	r24, 0x0A	; 10
     95c:	50 f3       	brcs	.-44     	; 0x932 <FUNCstrToInt+0x12>
     95e:	02 c0       	rjmp	.+4      	; 0x964 <FUNCstrToInt+0x44>
	return u;
}
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
	int i, intValue, result = 0;
     960:	20 e0       	ldi	r18, 0x00	; 0
     962:	30 e0       	ldi	r19, 0x00	; 0
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
		intValue = string[i] - '0';
		result = result * 10 + intValue;
	}
	return result;
}
     964:	c9 01       	movw	r24, r18
     966:	08 95       	ret

00000968 <FUNCfilter>:
uint8_t FUNCfilter(uint8_t mask, uint8_t data)
{
	uint8_t Z;
	Z=mask & data;
	return Z;
}
     968:	86 23       	and	r24, r22
     96a:	08 95       	ret

0000096c <FUNCticks>:
// ticks
unsigned int FUNCticks(unsigned int num)
{
	unsigned int count;
	for(count=0;count<num;count++)
     96c:	00 97       	sbiw	r24, 0x00	; 0
     96e:	39 f0       	breq	.+14     	; 0x97e <FUNCticks+0x12>
     970:	20 e0       	ldi	r18, 0x00	; 0
     972:	30 e0       	ldi	r19, 0x00	; 0
     974:	2f 5f       	subi	r18, 0xFF	; 255
     976:	3f 4f       	sbci	r19, 0xFF	; 255
     978:	82 17       	cp	r24, r18
     97a:	93 07       	cpc	r25, r19
     97c:	d9 f7       	brne	.-10     	; 0x974 <FUNCticks+0x8>
		;
	return count;
}
     97e:	08 95       	ret

00000980 <FUNCtwocomptoint8bit>:
// Two's Complement function
int FUNCtwocomptoint8bit(int twoscomp){
  
  //Let's see if the byte is negative
  if (twoscomp & 0B10000000){
     980:	87 ff       	sbrs	r24, 7
     982:	08 c0       	rjmp	.+16     	; 0x994 <FUNCtwocomptoint8bit+0x14>
    //Invert
    twoscomp = ~twoscomp + 1;
     984:	91 95       	neg	r25
     986:	81 95       	neg	r24
     988:	91 09       	sbc	r25, r1
	twoscomp = (twoscomp & 0B11111111);
    //Cast as int and multiply by negative one
    int value = (int)(twoscomp)*(-1);
     98a:	99 27       	eor	r25, r25
     98c:	91 95       	neg	r25
     98e:	81 95       	neg	r24
     990:	91 09       	sbc	r25, r1
    return value;
     992:	08 95       	ret
    //Byte is non-negative, therefore convert to decimal and display
    //Make sure we are never over 1279
    twoscomp = (twoscomp & 0B01111111);
    //Cast as int and return
    int value = (int)(twoscomp);
    return value;
     994:	8f 77       	andi	r24, 0x7F	; 127
     996:	99 27       	eor	r25, r25
  }
}
     998:	08 95       	ret

0000099a <FUNCtwocomptoint10bit>:
// Two's Complement function, shifts 10 bit binary to signed integers (-512 to 512)
int FUNCtwocomptoint10bit(int twoscomp){
	
  //Let's see if the byte is negative
  if (twoscomp & 0x200){
     99a:	91 ff       	sbrs	r25, 1
     99c:	08 c0       	rjmp	.+16     	; 0x9ae <FUNCtwocomptoint10bit+0x14>
    //Invert
    twoscomp = ~twoscomp + 1;
     99e:	91 95       	neg	r25
     9a0:	81 95       	neg	r24
     9a2:	91 09       	sbc	r25, r1
    twoscomp = (twoscomp & 0x3FF);
    //Cast as int and multiply by negative one
    int value = (int)(twoscomp)*(-1);
     9a4:	93 70       	andi	r25, 0x03	; 3
     9a6:	91 95       	neg	r25
     9a8:	81 95       	neg	r24
     9aa:	91 09       	sbc	r25, r1
    return value;
     9ac:	08 95       	ret
    //Byte is non-negative, therefore convert to decimal and display
    twoscomp = (twoscomp & 0x1FF);
    //Cast as int and return
    //Serial.println(twoscomp);
    int value = (int)(twoscomp);
    return value;
     9ae:	91 70       	andi	r25, 0x01	; 1
  }
}
     9b0:	08 95       	ret

000009b2 <FUNCtwocomptointnbit>:
// Two's Complement function, nbits
int FUNCtwocomptointnbit(int twoscomp, uint8_t nbits){
  unsigned int signmask;
  unsigned int mask;
  signmask = (1<<(nbits-1));
     9b2:	61 50       	subi	r22, 0x01	; 1
     9b4:	21 e0       	ldi	r18, 0x01	; 1
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	02 c0       	rjmp	.+4      	; 0x9be <FUNCtwocomptointnbit+0xc>
     9ba:	22 0f       	add	r18, r18
     9bc:	33 1f       	adc	r19, r19
     9be:	6a 95       	dec	r22
     9c0:	e2 f7       	brpl	.-8      	; 0x9ba <FUNCtwocomptointnbit+0x8>
  mask=signmask-1;
     9c2:	a9 01       	movw	r20, r18
     9c4:	41 50       	subi	r20, 0x01	; 1
     9c6:	51 09       	sbc	r21, r1
  //Let's see if the number is negative
  if (twoscomp & signmask){
     9c8:	b9 01       	movw	r22, r18
     9ca:	68 23       	and	r22, r24
     9cc:	79 23       	and	r23, r25
     9ce:	67 2b       	or	r22, r23
     9d0:	29 f0       	breq	.+10     	; 0x9dc <FUNCtwocomptointnbit+0x2a>
	twoscomp &= mask;
    twoscomp -= signmask;
     9d2:	84 23       	and	r24, r20
     9d4:	95 23       	and	r25, r21
     9d6:	82 1b       	sub	r24, r18
     9d8:	93 0b       	sbc	r25, r19
     9da:	08 95       	ret
  }else{
	  twoscomp &= mask;
     9dc:	84 23       	and	r24, r20
     9de:	95 23       	and	r25, r21
  }
  return twoscomp;
}
     9e0:	08 95       	ret

000009e2 <FUNCdec2bcd>:
// Convert Decimal to Binary Coded Decimal (BCD)
char FUNCdec2bcd(char num)
{
	return ((num/10 * 16) + (num % 10));
     9e2:	9d ec       	ldi	r25, 0xCD	; 205
     9e4:	89 9f       	mul	r24, r25
     9e6:	91 2d       	mov	r25, r1
     9e8:	11 24       	eor	r1, r1
     9ea:	96 95       	lsr	r25
     9ec:	96 95       	lsr	r25
     9ee:	96 95       	lsr	r25
     9f0:	39 2f       	mov	r19, r25
     9f2:	33 0f       	add	r19, r19
     9f4:	23 2f       	mov	r18, r19
     9f6:	22 0f       	add	r18, r18
     9f8:	22 0f       	add	r18, r18
     9fa:	23 0f       	add	r18, r19
     9fc:	82 1b       	sub	r24, r18
}
     9fe:	20 e1       	ldi	r18, 0x10	; 16
     a00:	92 9f       	mul	r25, r18
     a02:	80 0d       	add	r24, r0
     a04:	11 24       	eor	r1, r1
     a06:	08 95       	ret

00000a08 <FUNCbcd2dec>:
// Convert Binary Coded Decimal (BCD) to Decimal
char FUNCbcd2dec(char num)
{
	return ((num/16 * 10) + (num % 16));
     a08:	98 2f       	mov	r25, r24
     a0a:	92 95       	swap	r25
     a0c:	9f 70       	andi	r25, 0x0F	; 15
     a0e:	99 0f       	add	r25, r25
     a10:	29 2f       	mov	r18, r25
     a12:	22 0f       	add	r18, r18
     a14:	22 0f       	add	r18, r18
     a16:	92 0f       	add	r25, r18
     a18:	8f 70       	andi	r24, 0x0F	; 15
}
     a1a:	89 0f       	add	r24, r25
     a1c:	08 95       	ret

00000a1e <FUNCresizestr>:
char* FUNCresizestr(char *string, int size)
{
     a1e:	fc 01       	movw	r30, r24
	int i;
	FUNCstr[size]='\0';
     a20:	db 01       	movw	r26, r22
     a22:	ad 53       	subi	r26, 0x3D	; 61
     a24:	bd 4f       	sbci	r27, 0xFD	; 253
     a26:	1c 92       	st	X, r1
	for(i=0;i<size;i++){
     a28:	16 16       	cp	r1, r22
     a2a:	17 06       	cpc	r1, r23
     a2c:	14 f5       	brge	.+68     	; 0xa72 <FUNCresizestr+0x54>
		if(*(string+i)=='\0'){
     a2e:	90 81       	ld	r25, Z
     a30:	91 11       	cpse	r25, r1
     a32:	0c c0       	rjmp	.+24     	; 0xa4c <FUNCresizestr+0x2e>
     a34:	17 c0       	rjmp	.+46     	; 0xa64 <FUNCresizestr+0x46>
     a36:	91 91       	ld	r25, Z+
     a38:	91 11       	cpse	r25, r1
     a3a:	0d c0       	rjmp	.+26     	; 0xa56 <FUNCresizestr+0x38>
     a3c:	15 c0       	rjmp	.+42     	; 0xa68 <FUNCresizestr+0x4a>
			for(;i<size;i++){
				FUNCstr[i]=' ';
     a3e:	81 93       	st	Z+, r24
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
		if(*(string+i)=='\0'){
			for(;i<size;i++){
     a40:	2f 5f       	subi	r18, 0xFF	; 255
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	26 17       	cp	r18, r22
     a46:	37 07       	cpc	r19, r23
     a48:	d4 f3       	brlt	.-12     	; 0xa3e <FUNCresizestr+0x20>
     a4a:	13 c0       	rjmp	.+38     	; 0xa72 <FUNCresizestr+0x54>
     a4c:	a3 ec       	ldi	r26, 0xC3	; 195
     a4e:	b2 e0       	ldi	r27, 0x02	; 2
     a50:	31 96       	adiw	r30, 0x01	; 1
char* FUNCresizestr(char *string, int size)
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
		if(*(string+i)=='\0'){
     a52:	20 e0       	ldi	r18, 0x00	; 0
     a54:	30 e0       	ldi	r19, 0x00	; 0
			for(;i<size;i++){
				FUNCstr[i]=' ';
			}
			break;
		}
		FUNCstr[i]=*(string+i);
     a56:	9d 93       	st	X+, r25
}
char* FUNCresizestr(char *string, int size)
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
     a58:	2f 5f       	subi	r18, 0xFF	; 255
     a5a:	3f 4f       	sbci	r19, 0xFF	; 255
     a5c:	62 17       	cp	r22, r18
     a5e:	73 07       	cpc	r23, r19
     a60:	51 f7       	brne	.-44     	; 0xa36 <FUNCresizestr+0x18>
     a62:	07 c0       	rjmp	.+14     	; 0xa72 <FUNCresizestr+0x54>
     a64:	20 e0       	ldi	r18, 0x00	; 0
     a66:	30 e0       	ldi	r19, 0x00	; 0
     a68:	f9 01       	movw	r30, r18
     a6a:	ed 53       	subi	r30, 0x3D	; 61
     a6c:	fd 4f       	sbci	r31, 0xFD	; 253
		if(*(string+i)=='\0'){
			for(;i<size;i++){
				FUNCstr[i]=' ';
     a6e:	80 e2       	ldi	r24, 0x20	; 32
     a70:	e6 cf       	rjmp	.-52     	; 0xa3e <FUNCresizestr+0x20>
			break;
		}
		FUNCstr[i]=*(string+i);
	}
	return FUNCstr;
}
     a72:	83 ec       	ldi	r24, 0xC3	; 195
     a74:	92 e0       	ldi	r25, 0x02	; 2
     a76:	08 95       	ret

00000a78 <FUNCtrimmer>:
long FUNCtrimmer(long x, long in_min, long in_max, long out_min, long out_max)
/*
	same as arduino map function.
*/
{
     a78:	4f 92       	push	r4
     a7a:	5f 92       	push	r5
     a7c:	6f 92       	push	r6
     a7e:	7f 92       	push	r7
     a80:	af 92       	push	r10
     a82:	bf 92       	push	r11
     a84:	cf 92       	push	r12
     a86:	df 92       	push	r13
     a88:	ef 92       	push	r14
     a8a:	ff 92       	push	r15
     a8c:	0f 93       	push	r16
     a8e:	1f 93       	push	r17
     a90:	cf 93       	push	r28
     a92:	df 93       	push	r29
     a94:	cd b7       	in	r28, 0x3d	; 61
     a96:	de b7       	in	r29, 0x3e	; 62
     a98:	29 01       	movw	r4, r18
     a9a:	3a 01       	movw	r6, r20
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     a9c:	9b 01       	movw	r18, r22
     a9e:	ac 01       	movw	r20, r24
     aa0:	24 19       	sub	r18, r4
     aa2:	35 09       	sbc	r19, r5
     aa4:	46 09       	sbc	r20, r6
     aa6:	57 09       	sbc	r21, r7
     aa8:	89 89       	ldd	r24, Y+17	; 0x11
     aaa:	9a 89       	ldd	r25, Y+18	; 0x12
     aac:	ab 89       	ldd	r26, Y+19	; 0x13
     aae:	bc 89       	ldd	r27, Y+20	; 0x14
     ab0:	bc 01       	movw	r22, r24
     ab2:	cd 01       	movw	r24, r26
     ab4:	6a 19       	sub	r22, r10
     ab6:	7b 09       	sbc	r23, r11
     ab8:	8c 09       	sbc	r24, r12
     aba:	9d 09       	sbc	r25, r13
     abc:	31 d7       	rcall	.+3682   	; 0x1920 <__mulsi3>
     abe:	a8 01       	movw	r20, r16
     ac0:	97 01       	movw	r18, r14
     ac2:	24 19       	sub	r18, r4
     ac4:	35 09       	sbc	r19, r5
     ac6:	46 09       	sbc	r20, r6
     ac8:	57 09       	sbc	r21, r7
     aca:	82 d7       	rcall	.+3844   	; 0x19d0 <__divmodsi4>
     acc:	ca 01       	movw	r24, r20
     ace:	b9 01       	movw	r22, r18
     ad0:	6a 0d       	add	r22, r10
     ad2:	7b 1d       	adc	r23, r11
     ad4:	8c 1d       	adc	r24, r12
     ad6:	9d 1d       	adc	r25, r13
}
     ad8:	df 91       	pop	r29
     ada:	cf 91       	pop	r28
     adc:	1f 91       	pop	r17
     ade:	0f 91       	pop	r16
     ae0:	ff 90       	pop	r15
     ae2:	ef 90       	pop	r14
     ae4:	df 90       	pop	r13
     ae6:	cf 90       	pop	r12
     ae8:	bf 90       	pop	r11
     aea:	af 90       	pop	r10
     aec:	7f 90       	pop	r7
     aee:	6f 90       	pop	r6
     af0:	5f 90       	pop	r5
     af2:	4f 90       	pop	r4
     af4:	08 95       	ret

00000af6 <Pwr>:
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
     af6:	70 e0       	ldi	r23, 0x00	; 0
     af8:	61 15       	cp	r22, r1
     afa:	71 05       	cpc	r23, r1
     afc:	99 f0       	breq	.+38     	; 0xb24 <Pwr+0x2e>
     afe:	41 e0       	ldi	r20, 0x01	; 1
     b00:	50 e0       	ldi	r21, 0x00	; 0
     b02:	21 e0       	ldi	r18, 0x01	; 1
     b04:	30 e0       	ldi	r19, 0x00	; 0
        p = p * bs;
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	fa 01       	movw	r30, r20
     b0a:	e8 9f       	mul	r30, r24
     b0c:	a0 01       	movw	r20, r0
     b0e:	e9 9f       	mul	r30, r25
     b10:	50 0d       	add	r21, r0
     b12:	f8 9f       	mul	r31, r24
     b14:	50 0d       	add	r21, r0
     b16:	11 24       	eor	r1, r1
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
     b18:	2f 5f       	subi	r18, 0xFF	; 255
     b1a:	3f 4f       	sbci	r19, 0xFF	; 255
     b1c:	62 17       	cp	r22, r18
     b1e:	73 07       	cpc	r23, r19
     b20:	98 f7       	brcc	.-26     	; 0xb08 <Pwr+0x12>
     b22:	02 c0       	rjmp	.+4      	; 0xb28 <Pwr+0x32>
}
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
     b24:	41 e0       	ldi	r20, 0x01	; 1
     b26:	50 e0       	ldi	r21, 0x00	; 0
    for (i = 1; i <= n; ++i)
        p = p * bs;
    return p;
}
     b28:	ca 01       	movw	r24, r20
     b2a:	08 95       	ret

00000b2c <StringLength>:
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
	while ( string[count] != '\0' )
     b2c:	fc 01       	movw	r30, r24
     b2e:	20 81       	ld	r18, Z
     b30:	22 23       	and	r18, r18
     b32:	41 f0       	breq	.+16     	; 0xb44 <StringLength+0x18>
     b34:	31 96       	adiw	r30, 0x01	; 1
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
		++count;
     b3a:	01 96       	adiw	r24, 0x01	; 1
}
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
	while ( string[count] != '\0' )
     b3c:	21 91       	ld	r18, Z+
     b3e:	21 11       	cpse	r18, r1
     b40:	fc cf       	rjmp	.-8      	; 0xb3a <StringLength+0xe>
     b42:	08 95       	ret
    return p;
}
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	90 e0       	ldi	r25, 0x00	; 0
	while ( string[count] != '\0' )
		++count;
	return count;
}
     b48:	08 95       	ret

00000b4a <FUNCtrim>:
	Reverse(FUNCstr);
	return FUNCstr;
}
// trim: remove trailing blanks, tabs, newlines
int FUNCtrim(char s[])
{
     b4a:	cf 93       	push	r28
     b4c:	df 93       	push	r29
     b4e:	ec 01       	movw	r28, r24
	int n;
	for (n = StringLength(s)-1; n >= 0; n--)
     b50:	ed df       	rcall	.-38     	; 0xb2c <StringLength>
     b52:	9c 01       	movw	r18, r24
     b54:	21 50       	subi	r18, 0x01	; 1
     b56:	31 09       	sbc	r19, r1
     b58:	62 f0       	brmi	.+24     	; 0xb72 <FUNCtrim+0x28>
     b5a:	fe 01       	movw	r30, r28
     b5c:	e8 0f       	add	r30, r24
     b5e:	f9 1f       	adc	r31, r25
		if (s[n] != ' ' && s[n] != '\t' && s[n] != '\n')
     b60:	92 91       	ld	r25, -Z
     b62:	90 32       	cpi	r25, 0x20	; 32
     b64:	19 f0       	breq	.+6      	; 0xb6c <FUNCtrim+0x22>
     b66:	99 50       	subi	r25, 0x09	; 9
     b68:	92 30       	cpi	r25, 0x02	; 2
     b6a:	18 f4       	brcc	.+6      	; 0xb72 <FUNCtrim+0x28>
}
// trim: remove trailing blanks, tabs, newlines
int FUNCtrim(char s[])
{
	int n;
	for (n = StringLength(s)-1; n >= 0; n--)
     b6c:	21 50       	subi	r18, 0x01	; 1
     b6e:	31 09       	sbc	r19, r1
     b70:	b8 f7       	brcc	.-18     	; 0xb60 <FUNCtrim+0x16>
		if (s[n] != ' ' && s[n] != '\t' && s[n] != '\n')
			break;
	s[n+1] = '\0';
     b72:	c2 0f       	add	r28, r18
     b74:	d3 1f       	adc	r29, r19
     b76:	19 82       	std	Y+1, r1	; 0x01
	return n;
}
     b78:	c9 01       	movw	r24, r18
     b7a:	df 91       	pop	r29
     b7c:	cf 91       	pop	r28
     b7e:	08 95       	ret

00000b80 <Reverse>:
		++count;
	return count;
}
// reverse: reverse string s in place
void Reverse(char s[])
{
     b80:	cf 93       	push	r28
     b82:	df 93       	push	r29
     b84:	ec 01       	movw	r28, r24
	int c, i, j;
	for (i = 0, j = StringLength(s)-1; i < j; i++, j--){
     b86:	d2 df       	rcall	.-92     	; 0xb2c <StringLength>
     b88:	9c 01       	movw	r18, r24
     b8a:	21 50       	subi	r18, 0x01	; 1
     b8c:	31 09       	sbc	r19, r1
     b8e:	12 16       	cp	r1, r18
     b90:	13 06       	cpc	r1, r19
     b92:	84 f4       	brge	.+32     	; 0xbb4 <Reverse+0x34>
     b94:	de 01       	movw	r26, r28
     b96:	a8 0f       	add	r26, r24
     b98:	b9 1f       	adc	r27, r25
     b9a:	fe 01       	movw	r30, r28
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	90 e0       	ldi	r25, 0x00	; 0
		c = s[i];
     ba0:	40 81       	ld	r20, Z
		s[i] = s[j];
     ba2:	5e 91       	ld	r21, -X
     ba4:	51 93       	st	Z+, r21
		s[j] = c;
     ba6:	4c 93       	st	X, r20
}
// reverse: reverse string s in place
void Reverse(char s[])
{
	int c, i, j;
	for (i = 0, j = StringLength(s)-1; i < j; i++, j--){
     ba8:	01 96       	adiw	r24, 0x01	; 1
     baa:	21 50       	subi	r18, 0x01	; 1
     bac:	31 09       	sbc	r19, r1
     bae:	82 17       	cp	r24, r18
     bb0:	93 07       	cpc	r25, r19
     bb2:	b4 f3       	brlt	.-20     	; 0xba0 <Reverse+0x20>
		c = s[i];
		s[i] = s[j];
		s[j] = c;
	}
}
     bb4:	df 91       	pop	r29
     bb6:	cf 91       	pop	r28
     bb8:	08 95       	ret

00000bba <FUNCi32toa>:
				v[j+gap] = temp;
			}
}
// i32toa: convert n to characters in s
char* FUNCi32toa(int32_t n)
{
     bba:	8f 92       	push	r8
     bbc:	9f 92       	push	r9
     bbe:	af 92       	push	r10
     bc0:	bf 92       	push	r11
     bc2:	cf 92       	push	r12
     bc4:	df 92       	push	r13
     bc6:	ef 92       	push	r14
     bc8:	ff 92       	push	r15
     bca:	0f 93       	push	r16
     bcc:	1f 93       	push	r17
     bce:	cf 93       	push	r28
     bd0:	df 93       	push	r29
     bd2:	6b 01       	movw	r12, r22
     bd4:	7c 01       	movw	r14, r24
     bd6:	dc 01       	movw	r26, r24
     bd8:	cb 01       	movw	r24, r22
     bda:	ff 20       	and	r15, r15
     bdc:	3c f4       	brge	.+14     	; 0xbec <FUNCi32toa+0x32>
     bde:	88 27       	eor	r24, r24
     be0:	99 27       	eor	r25, r25
     be2:	dc 01       	movw	r26, r24
     be4:	8c 19       	sub	r24, r12
     be6:	9d 09       	sbc	r25, r13
     be8:	ae 09       	sbc	r26, r14
     bea:	bf 09       	sbc	r27, r15
     bec:	bc 01       	movw	r22, r24
     bee:	cd 01       	movw	r24, r26
     bf0:	10 e0       	ldi	r17, 0x00	; 0
	int32_t sign;
	if ((sign = n) < 0) // record sign
	n = -n; // make n positive
	i = 0;
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
     bf2:	0f 2e       	mov	r0, r31
     bf4:	fa e0       	ldi	r31, 0x0A	; 10
     bf6:	8f 2e       	mov	r8, r31
     bf8:	91 2c       	mov	r9, r1
     bfa:	a1 2c       	mov	r10, r1
     bfc:	b1 2c       	mov	r11, r1
     bfe:	f0 2d       	mov	r31, r0
     c00:	01 c0       	rjmp	.+2      	; 0xc04 <FUNCi32toa+0x4a>
     c02:	10 2f       	mov	r17, r16
     c04:	01 e0       	ldi	r16, 0x01	; 1
     c06:	01 0f       	add	r16, r17
     c08:	c1 2f       	mov	r28, r17
     c0a:	d0 e0       	ldi	r29, 0x00	; 0
     c0c:	cd 53       	subi	r28, 0x3D	; 61
     c0e:	dd 4f       	sbci	r29, 0xFD	; 253
     c10:	a5 01       	movw	r20, r10
     c12:	94 01       	movw	r18, r8
     c14:	dd d6       	rcall	.+3514   	; 0x19d0 <__divmodsi4>
     c16:	60 5d       	subi	r22, 0xD0	; 208
     c18:	68 83       	st	Y, r22
	}while ((n /= 10) > 0); // delete it
     c1a:	62 2f       	mov	r22, r18
     c1c:	73 2f       	mov	r23, r19
     c1e:	84 2f       	mov	r24, r20
     c20:	95 2f       	mov	r25, r21
     c22:	16 16       	cp	r1, r22
     c24:	17 06       	cpc	r1, r23
     c26:	18 06       	cpc	r1, r24
     c28:	19 06       	cpc	r1, r25
     c2a:	5c f3       	brlt	.-42     	; 0xc02 <FUNCi32toa+0x48>
	if (sign < 0)
     c2c:	ff 20       	and	r15, r15
     c2e:	44 f4       	brge	.+16     	; 0xc40 <FUNCi32toa+0x86>
	FUNCstr[i++] = '-';
     c30:	e0 2f       	mov	r30, r16
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	ed 53       	subi	r30, 0x3D	; 61
     c36:	fd 4f       	sbci	r31, 0xFD	; 253
     c38:	8d e2       	ldi	r24, 0x2D	; 45
     c3a:	80 83       	st	Z, r24
     c3c:	02 e0       	ldi	r16, 0x02	; 2
     c3e:	01 0f       	add	r16, r17
	FUNCstr[i] = '\0';
     c40:	e0 2f       	mov	r30, r16
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	ed 53       	subi	r30, 0x3D	; 61
     c46:	fd 4f       	sbci	r31, 0xFD	; 253
     c48:	10 82       	st	Z, r1
	Reverse(FUNCstr);
     c4a:	83 ec       	ldi	r24, 0xC3	; 195
     c4c:	92 e0       	ldi	r25, 0x02	; 2
     c4e:	98 df       	rcall	.-208    	; 0xb80 <Reverse>
	return FUNCstr;
}
     c50:	83 ec       	ldi	r24, 0xC3	; 195
     c52:	92 e0       	ldi	r25, 0x02	; 2
     c54:	df 91       	pop	r29
     c56:	cf 91       	pop	r28
     c58:	1f 91       	pop	r17
     c5a:	0f 91       	pop	r16
     c5c:	ff 90       	pop	r15
     c5e:	ef 90       	pop	r14
     c60:	df 90       	pop	r13
     c62:	cf 90       	pop	r12
     c64:	bf 90       	pop	r11
     c66:	af 90       	pop	r10
     c68:	9f 90       	pop	r9
     c6a:	8f 90       	pop	r8
     c6c:	08 95       	ret

00000c6e <FUNCi16toa>:
// i16toa: convert n to characters in s
char* FUNCi16toa(int16_t n)
{
     c6e:	0f 93       	push	r16
     c70:	1f 93       	push	r17
     c72:	cf 93       	push	r28
     c74:	df 93       	push	r29
     c76:	ec 01       	movw	r28, r24
     c78:	99 23       	and	r25, r25
     c7a:	24 f4       	brge	.+8      	; 0xc84 <FUNCi16toa+0x16>
     c7c:	88 27       	eor	r24, r24
     c7e:	99 27       	eor	r25, r25
     c80:	8c 1b       	sub	r24, r28
     c82:	9d 0b       	sbc	r25, r29
     c84:	20 e0       	ldi	r18, 0x00	; 0
	int16_t sign;
	if ((sign = n) < 0) // record sign
		n = -n; // make n positive
	i = 0;
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
     c86:	0a e0       	ldi	r16, 0x0A	; 10
     c88:	10 e0       	ldi	r17, 0x00	; 0
     c8a:	01 c0       	rjmp	.+2      	; 0xc8e <FUNCi16toa+0x20>
     c8c:	23 2f       	mov	r18, r19
     c8e:	31 e0       	ldi	r19, 0x01	; 1
     c90:	32 0f       	add	r19, r18
     c92:	e2 2f       	mov	r30, r18
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	ed 53       	subi	r30, 0x3D	; 61
     c98:	fd 4f       	sbci	r31, 0xFD	; 253
     c9a:	b8 01       	movw	r22, r16
     c9c:	64 d6       	rcall	.+3272   	; 0x1966 <__divmodhi4>
     c9e:	80 5d       	subi	r24, 0xD0	; 208
     ca0:	80 83       	st	Z, r24
	}while ((n /= 10) > 0); // delete it
     ca2:	86 2f       	mov	r24, r22
     ca4:	97 2f       	mov	r25, r23
     ca6:	18 16       	cp	r1, r24
     ca8:	19 06       	cpc	r1, r25
     caa:	84 f3       	brlt	.-32     	; 0xc8c <FUNCi16toa+0x1e>
	if (sign < 0)
     cac:	dd 23       	and	r29, r29
     cae:	44 f4       	brge	.+16     	; 0xcc0 <FUNCi16toa+0x52>
		FUNCstr[i++] = '-';
     cb0:	e3 2f       	mov	r30, r19
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	ed 53       	subi	r30, 0x3D	; 61
     cb6:	fd 4f       	sbci	r31, 0xFD	; 253
     cb8:	8d e2       	ldi	r24, 0x2D	; 45
     cba:	80 83       	st	Z, r24
     cbc:	32 e0       	ldi	r19, 0x02	; 2
     cbe:	32 0f       	add	r19, r18
	FUNCstr[i] = '\0';
     cc0:	e3 2f       	mov	r30, r19
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	ed 53       	subi	r30, 0x3D	; 61
     cc6:	fd 4f       	sbci	r31, 0xFD	; 253
     cc8:	10 82       	st	Z, r1
	Reverse(FUNCstr);
     cca:	83 ec       	ldi	r24, 0xC3	; 195
     ccc:	92 e0       	ldi	r25, 0x02	; 2
     cce:	58 df       	rcall	.-336    	; 0xb80 <Reverse>
	return FUNCstr;
}
     cd0:	83 ec       	ldi	r24, 0xC3	; 195
     cd2:	92 e0       	ldi	r25, 0x02	; 2
     cd4:	df 91       	pop	r29
     cd6:	cf 91       	pop	r28
     cd8:	1f 91       	pop	r17
     cda:	0f 91       	pop	r16
     cdc:	08 95       	ret

00000cde <FUNCui16toa>:
// ui16toa: convert n to characters in s
char* FUNCui16toa(uint16_t n)
{
     cde:	cf 93       	push	r28
     ce0:	ac 01       	movw	r20, r24
	uint8_t i;
	i = 0;
     ce2:	e0 e0       	ldi	r30, 0x00	; 0
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
     ce4:	c1 e0       	ldi	r28, 0x01	; 1
     ce6:	ce 0f       	add	r28, r30
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	ed 53       	subi	r30, 0x3D	; 61
     cec:	fd 4f       	sbci	r31, 0xFD	; 253
     cee:	9a 01       	movw	r18, r20
     cf0:	ad ec       	ldi	r26, 0xCD	; 205
     cf2:	bc ec       	ldi	r27, 0xCC	; 204
     cf4:	89 d6       	rcall	.+3346   	; 0x1a08 <__umulhisi3>
     cf6:	96 95       	lsr	r25
     cf8:	87 95       	ror	r24
     cfa:	96 95       	lsr	r25
     cfc:	87 95       	ror	r24
     cfe:	96 95       	lsr	r25
     d00:	87 95       	ror	r24
     d02:	9c 01       	movw	r18, r24
     d04:	22 0f       	add	r18, r18
     d06:	33 1f       	adc	r19, r19
     d08:	88 0f       	add	r24, r24
     d0a:	99 1f       	adc	r25, r25
     d0c:	88 0f       	add	r24, r24
     d0e:	99 1f       	adc	r25, r25
     d10:	88 0f       	add	r24, r24
     d12:	99 1f       	adc	r25, r25
     d14:	82 0f       	add	r24, r18
     d16:	93 1f       	adc	r25, r19
     d18:	9a 01       	movw	r18, r20
     d1a:	28 1b       	sub	r18, r24
     d1c:	39 0b       	sbc	r19, r25
     d1e:	c9 01       	movw	r24, r18
     d20:	80 5d       	subi	r24, 0xD0	; 208
     d22:	80 83       	st	Z, r24
	}while ((n /= 10) > 0); // delete it
     d24:	9a 01       	movw	r18, r20
     d26:	70 d6       	rcall	.+3296   	; 0x1a08 <__umulhisi3>
     d28:	ac 01       	movw	r20, r24
     d2a:	56 95       	lsr	r21
     d2c:	47 95       	ror	r20
     d2e:	56 95       	lsr	r21
     d30:	47 95       	ror	r20
     d32:	56 95       	lsr	r21
     d34:	47 95       	ror	r20
char* FUNCui16toa(uint16_t n)
{
	uint8_t i;
	i = 0;
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
     d36:	ec 2f       	mov	r30, r28
	}while ((n /= 10) > 0); // delete it
     d38:	41 15       	cp	r20, r1
     d3a:	51 05       	cpc	r21, r1
     d3c:	99 f6       	brne	.-90     	; 0xce4 <FUNCui16toa+0x6>
	FUNCstr[i] = '\0';
     d3e:	ec 2f       	mov	r30, r28
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	ed 53       	subi	r30, 0x3D	; 61
     d44:	fd 4f       	sbci	r31, 0xFD	; 253
     d46:	10 82       	st	Z, r1
	Reverse(FUNCstr);
     d48:	83 ec       	ldi	r24, 0xC3	; 195
     d4a:	92 e0       	ldi	r25, 0x02	; 2
     d4c:	19 df       	rcall	.-462    	; 0xb80 <Reverse>
	return FUNCstr;
}
     d4e:	83 ec       	ldi	r24, 0xC3	; 195
     d50:	92 e0       	ldi	r25, 0x02	; 2
     d52:	cf 91       	pop	r28
     d54:	08 95       	ret

00000d56 <FUNCbcd2bin>:
		s[j] = c;
	}
}
unsigned char FUNCbcd2bin(unsigned char val)
{
	return (val & 0x0f) + (val >> 4) * 10;
     d56:	98 2f       	mov	r25, r24
     d58:	92 95       	swap	r25
     d5a:	9f 70       	andi	r25, 0x0F	; 15
     d5c:	99 0f       	add	r25, r25
     d5e:	29 2f       	mov	r18, r25
     d60:	22 0f       	add	r18, r18
     d62:	22 0f       	add	r18, r18
     d64:	92 0f       	add	r25, r18
     d66:	8f 70       	andi	r24, 0x0F	; 15
}
     d68:	89 0f       	add	r24, r25
     d6a:	08 95       	ret

00000d6c <FUNCbin2bcd>:
unsigned char FUNCbin2bcd(unsigned val)
{
     d6c:	ac 01       	movw	r20, r24
	return ((val / 10) << 4) + val % 10;
     d6e:	9c 01       	movw	r18, r24
     d70:	ad ec       	ldi	r26, 0xCD	; 205
     d72:	bc ec       	ldi	r27, 0xCC	; 204
     d74:	49 d6       	rcall	.+3218   	; 0x1a08 <__umulhisi3>
     d76:	96 95       	lsr	r25
     d78:	87 95       	ror	r24
     d7a:	96 95       	lsr	r25
     d7c:	87 95       	ror	r24
     d7e:	96 95       	lsr	r25
     d80:	87 95       	ror	r24
     d82:	bc 01       	movw	r22, r24
     d84:	66 0f       	add	r22, r22
     d86:	77 1f       	adc	r23, r23
     d88:	9c 01       	movw	r18, r24
     d8a:	22 0f       	add	r18, r18
     d8c:	33 1f       	adc	r19, r19
     d8e:	22 0f       	add	r18, r18
     d90:	33 1f       	adc	r19, r19
     d92:	22 0f       	add	r18, r18
     d94:	33 1f       	adc	r19, r19
     d96:	26 0f       	add	r18, r22
     d98:	37 1f       	adc	r19, r23
     d9a:	42 1b       	sub	r20, r18
     d9c:	53 0b       	sbc	r21, r19
}
     d9e:	34 2f       	mov	r19, r20
     da0:	20 e1       	ldi	r18, 0x10	; 16
     da2:	82 9f       	mul	r24, r18
     da4:	30 0d       	add	r19, r0
     da6:	11 24       	eor	r1, r1
     da8:	83 2f       	mov	r24, r19
     daa:	08 95       	ret

00000dac <FUNCgcd1>:
long FUNCgcd1(long a, long b)
{
     dac:	cf 92       	push	r12
     dae:	df 92       	push	r13
     db0:	ef 92       	push	r14
     db2:	ff 92       	push	r15
     db4:	cf 93       	push	r28
     db6:	df 93       	push	r29
     db8:	cd b7       	in	r28, 0x3d	; 61
     dba:	de b7       	in	r29, 0x3e	; 62
     dbc:	28 97       	sbiw	r28, 0x08	; 8
     dbe:	0f b6       	in	r0, 0x3f	; 63
     dc0:	f8 94       	cli
     dc2:	de bf       	out	0x3e, r29	; 62
     dc4:	0f be       	out	0x3f, r0	; 63
     dc6:	cd bf       	out	0x3d, r28	; 61
     dc8:	6b 01       	movw	r12, r22
     dca:	7c 01       	movw	r14, r24
     dcc:	69 83       	std	Y+1, r22	; 0x01
     dce:	7a 83       	std	Y+2, r23	; 0x02
     dd0:	8b 83       	std	Y+3, r24	; 0x03
     dd2:	9c 83       	std	Y+4, r25	; 0x04
     dd4:	2d 83       	std	Y+5, r18	; 0x05
     dd6:	3e 83       	std	Y+6, r19	; 0x06
     dd8:	4f 83       	std	Y+7, r20	; 0x07
     dda:	58 87       	std	Y+8, r21	; 0x08
	long r;
	if (a < b)
     ddc:	c2 16       	cp	r12, r18
     dde:	d3 06       	cpc	r13, r19
     de0:	e4 06       	cpc	r14, r20
     de2:	f5 06       	cpc	r15, r21
     de4:	34 f4       	brge	.+12     	; 0xdf2 <FUNCgcd1+0x46>
		FUNCswap(&a, &b);
     de6:	be 01       	movw	r22, r28
     de8:	6b 5f       	subi	r22, 0xFB	; 251
     dea:	7f 4f       	sbci	r23, 0xFF	; 255
     dec:	ce 01       	movw	r24, r28
     dee:	01 96       	adiw	r24, 0x01	; 1
     df0:	8c dc       	rcall	.-1768   	; 0x70a <FUNCswap>
	if (!b){
     df2:	8d 81       	ldd	r24, Y+5	; 0x05
     df4:	9e 81       	ldd	r25, Y+6	; 0x06
     df6:	af 81       	ldd	r26, Y+7	; 0x07
     df8:	b8 85       	ldd	r27, Y+8	; 0x08
     dfa:	89 2b       	or	r24, r25
     dfc:	8a 2b       	or	r24, r26
     dfe:	8b 2b       	or	r24, r27
     e00:	69 f4       	brne	.+26     	; 0xe1c <FUNCgcd1+0x70>
		while ((r = a % b) != 0) {
     e02:	69 81       	ldd	r22, Y+1	; 0x01
     e04:	7a 81       	ldd	r23, Y+2	; 0x02
     e06:	8b 81       	ldd	r24, Y+3	; 0x03
     e08:	9c 81       	ldd	r25, Y+4	; 0x04
     e0a:	20 e0       	ldi	r18, 0x00	; 0
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	a9 01       	movw	r20, r18
     e10:	df d5       	rcall	.+3006   	; 0x19d0 <__divmodsi4>
     e12:	61 15       	cp	r22, r1
     e14:	71 05       	cpc	r23, r1
     e16:	81 05       	cpc	r24, r1
     e18:	91 05       	cpc	r25, r1
     e1a:	29 f4       	brne	.+10     	; 0xe26 <FUNCgcd1+0x7a>
			a = b;
			b = r;
		}
	}	
	return b;
     e1c:	6d 81       	ldd	r22, Y+5	; 0x05
     e1e:	7e 81       	ldd	r23, Y+6	; 0x06
     e20:	8f 81       	ldd	r24, Y+7	; 0x07
     e22:	98 85       	ldd	r25, Y+8	; 0x08
     e24:	05 c0       	rjmp	.+10     	; 0xe30 <FUNCgcd1+0x84>
	if (a < b)
		FUNCswap(&a, &b);
	if (!b){
		while ((r = a % b) != 0) {
			a = b;
			b = r;
     e26:	6d 83       	std	Y+5, r22	; 0x05
     e28:	7e 83       	std	Y+6, r23	; 0x06
     e2a:	8f 83       	std	Y+7, r24	; 0x07
     e2c:	98 87       	std	Y+8, r25	; 0x08
     e2e:	f6 cf       	rjmp	.-20     	; 0xe1c <FUNCgcd1+0x70>
		}
	}	
	return b;
}
     e30:	28 96       	adiw	r28, 0x08	; 8
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	f8 94       	cli
     e36:	de bf       	out	0x3e, r29	; 62
     e38:	0f be       	out	0x3f, r0	; 63
     e3a:	cd bf       	out	0x3d, r28	; 61
     e3c:	df 91       	pop	r29
     e3e:	cf 91       	pop	r28
     e40:	ff 90       	pop	r15
     e42:	ef 90       	pop	r14
     e44:	df 90       	pop	r13
     e46:	cf 90       	pop	r12
     e48:	08 95       	ret

00000e4a <FUNCpincheck>:
	uint8_t lh;
	if(port & (1<<pin))
		lh=1;
	else
		lh=0;
	return lh;
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <FUNCpincheck+0x8>
     e4e:	95 95       	asr	r25
     e50:	87 95       	ror	r24
     e52:	6a 95       	dec	r22
     e54:	e2 f7       	brpl	.-8      	; 0xe4e <FUNCpincheck+0x4>
}
     e56:	81 70       	andi	r24, 0x01	; 1
     e58:	08 95       	ret

00000e5a <FUNCprint_binary>:
char* FUNCprint_binary(uint8_t number)
{
     e5a:	e3 ec       	ldi	r30, 0xC3	; 195
     e5c:	f2 e0       	ldi	r31, 0x02	; 2
	uint8_t i,c;
    for(i=128,c=0;i;i>>=1,c++){
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	20 e8       	ldi	r18, 0x80	; 128
	(number & i) ? (FUNCstr[c]='1') : (FUNCstr[c]='0');
     e62:	50 e3       	ldi	r21, 0x30	; 48
     e64:	41 e3       	ldi	r20, 0x31	; 49
     e66:	38 2f       	mov	r19, r24
     e68:	32 23       	and	r19, r18
     e6a:	11 f0       	breq	.+4      	; 0xe70 <FUNCprint_binary+0x16>
     e6c:	40 83       	st	Z, r20
     e6e:	01 c0       	rjmp	.+2      	; 0xe72 <FUNCprint_binary+0x18>
     e70:	50 83       	st	Z, r21
	return lh;
}
char* FUNCprint_binary(uint8_t number)
{
	uint8_t i,c;
    for(i=128,c=0;i;i>>=1,c++){
     e72:	26 95       	lsr	r18
     e74:	9f 5f       	subi	r25, 0xFF	; 255
     e76:	31 96       	adiw	r30, 0x01	; 1
     e78:	98 30       	cpi	r25, 0x08	; 8
     e7a:	a9 f7       	brne	.-22     	; 0xe66 <FUNCprint_binary+0xc>
	(number & i) ? (FUNCstr[c]='1') : (FUNCstr[c]='0');
	}
	FUNCstr[c]='\0';
     e7c:	10 92 cb 02 	sts	0x02CB, r1	; 0x8002cb <FUNCstr+0x8>
	return FUNCstr;
}
     e80:	83 ec       	ldi	r24, 0xC3	; 195
     e82:	92 e0       	ldi	r25, 0x02	; 2
     e84:	08 95       	ret

00000e86 <FUNCmayia>:
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
     e86:	a4 2f       	mov	r26, r20
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	10 97       	sbiw	r26, 0x00	; 0
     e8c:	61 f0       	breq	.+24     	; 0xea6 <FUNCmayia+0x20>
     e8e:	21 e0       	ldi	r18, 0x01	; 1
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	e1 e0       	ldi	r30, 0x01	; 1
     e94:	f0 e0       	ldi	r31, 0x00	; 0
        p = p * bs;
     e96:	ee 0f       	add	r30, r30
     e98:	ff 1f       	adc	r31, r31
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
     e9a:	2f 5f       	subi	r18, 0xFF	; 255
     e9c:	3f 4f       	sbci	r19, 0xFF	; 255
     e9e:	a2 17       	cp	r26, r18
     ea0:	b3 07       	cpc	r27, r19
     ea2:	c8 f7       	brcc	.-14     	; 0xe96 <FUNCmayia+0x10>
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <FUNCmayia+0x24>
}
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
     ea6:	e1 e0       	ldi	r30, 0x01	; 1
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
unsigned int FUNCmayia(unsigned int xi, unsigned int xf, uint8_t nbits)
{//magic formula
	unsigned int mask;
	unsigned int diff;
	unsigned int trans;
	mask=Pwr(2,nbits)-1;
     eaa:	31 97       	sbiw	r30, 0x01	; 1
	xi&=mask;
	xf&=mask;
     eac:	6e 23       	and	r22, r30
     eae:	7f 23       	and	r23, r31
	diff=xf^xi;
     eb0:	8e 23       	and	r24, r30
     eb2:	9f 23       	and	r25, r31
     eb4:	86 27       	eor	r24, r22
     eb6:	97 27       	eor	r25, r23
	trans=diff&xf;
	return (trans<<nbits)|diff;
     eb8:	68 23       	and	r22, r24
     eba:	79 23       	and	r23, r25
     ebc:	02 c0       	rjmp	.+4      	; 0xec2 <FUNCmayia+0x3c>
     ebe:	66 0f       	add	r22, r22
     ec0:	77 1f       	adc	r23, r23
     ec2:	4a 95       	dec	r20
     ec4:	e2 f7       	brpl	.-8      	; 0xebe <FUNCmayia+0x38>
}
     ec6:	86 2b       	or	r24, r22
     ec8:	97 2b       	or	r25, r23
     eca:	08 95       	ret

00000ecc <FUNCenable>:
// uint8_t TRANupdate(struct TRAN *tr, uint8_t idata);
/*
** procedure and function
*/
FUNC FUNCenable( void )
{
     ecc:	fc 01       	movw	r30, r24
	uint8_t tSREG;
	tSREG=SREG;
     ece:	9f b7       	in	r25, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
     ed0:	8f b7       	in	r24, 0x3f	; 63
     ed2:	8f 77       	andi	r24, 0x7F	; 127
     ed4:	8f bf       	out	0x3f, r24	; 63
	func.putstr=FUNCputstr;
	func.getnum=FUNCgetnum;
	func.getnumv2=FUNCgetnumv2;
	func.readint=FUNCreadint;
	*/
	SREG=tSREG;
     ed6:	9f bf       	out	0x3f, r25	; 63
	/******/
	return func;
     ed8:	8b e7       	ldi	r24, 0x7B	; 123
     eda:	95 e0       	ldi	r25, 0x05	; 5
     edc:	91 83       	std	Z+1, r25	; 0x01
     ede:	80 83       	st	Z, r24
     ee0:	86 e9       	ldi	r24, 0x96	; 150
     ee2:	95 e0       	ldi	r25, 0x05	; 5
     ee4:	93 83       	std	Z+3, r25	; 0x03
     ee6:	82 83       	std	Z+2, r24	; 0x02
     ee8:	80 ec       	ldi	r24, 0xC0	; 192
     eea:	95 e0       	ldi	r25, 0x05	; 5
     eec:	95 83       	std	Z+5, r25	; 0x05
     eee:	84 83       	std	Z+4, r24	; 0x04
     ef0:	83 e4       	ldi	r24, 0x43	; 67
     ef2:	97 e0       	ldi	r25, 0x07	; 7
     ef4:	97 83       	std	Z+7, r25	; 0x07
     ef6:	86 83       	std	Z+6, r24	; 0x06
     ef8:	8a e6       	ldi	r24, 0x6A	; 106
     efa:	93 e0       	ldi	r25, 0x03	; 3
     efc:	91 87       	std	Z+9, r25	; 0x09
     efe:	80 87       	std	Z+8, r24	; 0x08
     f00:	88 e7       	ldi	r24, 0x78	; 120
     f02:	93 e0       	ldi	r25, 0x03	; 3
     f04:	93 87       	std	Z+11, r25	; 0x0b
     f06:	82 87       	std	Z+10, r24	; 0x0a
     f08:	8a e7       	ldi	r24, 0x7A	; 122
     f0a:	93 e0       	ldi	r25, 0x03	; 3
     f0c:	95 87       	std	Z+13, r25	; 0x0d
     f0e:	84 87       	std	Z+12, r24	; 0x0c
     f10:	8d e7       	ldi	r24, 0x7D	; 125
     f12:	93 e0       	ldi	r25, 0x03	; 3
     f14:	97 87       	std	Z+15, r25	; 0x0f
     f16:	86 87       	std	Z+14, r24	; 0x0e
     f18:	80 e8       	ldi	r24, 0x80	; 128
     f1a:	93 e0       	ldi	r25, 0x03	; 3
     f1c:	91 8b       	std	Z+17, r25	; 0x11
     f1e:	80 8b       	std	Z+16, r24	; 0x10
     f20:	83 e8       	ldi	r24, 0x83	; 131
     f22:	93 e0       	ldi	r25, 0x03	; 3
     f24:	93 8b       	std	Z+19, r25	; 0x13
     f26:	82 8b       	std	Z+18, r24	; 0x12
     f28:	84 e7       	ldi	r24, 0x74	; 116
     f2a:	93 e0       	ldi	r25, 0x03	; 3
     f2c:	95 8b       	std	Z+21, r25	; 0x15
     f2e:	84 8b       	std	Z+20, r24	; 0x14
     f30:	86 e7       	ldi	r24, 0x76	; 118
     f32:	93 e0       	ldi	r25, 0x03	; 3
     f34:	97 8b       	std	Z+23, r25	; 0x17
     f36:	86 8b       	std	Z+22, r24	; 0x16
     f38:	85 e8       	ldi	r24, 0x85	; 133
     f3a:	93 e0       	ldi	r25, 0x03	; 3
     f3c:	91 8f       	std	Z+25, r25	; 0x19
     f3e:	80 8f       	std	Z+24, r24	; 0x18
     f40:	86 ea       	ldi	r24, 0xA6	; 166
     f42:	93 e0       	ldi	r25, 0x03	; 3
     f44:	93 8f       	std	Z+27, r25	; 0x1b
     f46:	82 8f       	std	Z+26, r24	; 0x1a
     f48:	84 eb       	ldi	r24, 0xB4	; 180
     f4a:	93 e0       	ldi	r25, 0x03	; 3
     f4c:	95 8f       	std	Z+29, r25	; 0x1d
     f4e:	84 8f       	std	Z+28, r24	; 0x1c
     f50:	86 ed       	ldi	r24, 0xD6	; 214
     f52:	93 e0       	ldi	r25, 0x03	; 3
     f54:	97 8f       	std	Z+31, r25	; 0x1f
     f56:	86 8f       	std	Z+30, r24	; 0x1e
     f58:	87 e3       	ldi	r24, 0x37	; 55
     f5a:	96 e0       	ldi	r25, 0x06	; 6
     f5c:	91 a3       	std	Z+33, r25	; 0x21
     f5e:	80 a3       	std	Z+32, r24	; 0x20
     f60:	8f e6       	ldi	r24, 0x6F	; 111
     f62:	96 e0       	ldi	r25, 0x06	; 6
     f64:	93 a3       	std	Z+35, r25	; 0x23
     f66:	82 a3       	std	Z+34, r24	; 0x22
     f68:	8d ed       	ldi	r24, 0xDD	; 221
     f6a:	95 e0       	ldi	r25, 0x05	; 5
     f6c:	95 a3       	std	Z+37, r25	; 0x25
     f6e:	84 a3       	std	Z+36, r24	; 0x24
     f70:	85 ea       	ldi	r24, 0xA5	; 165
     f72:	95 e0       	ldi	r25, 0x05	; 5
     f74:	97 a3       	std	Z+39, r25	; 0x27
     f76:	86 a3       	std	Z+38, r24	; 0x26
     f78:	8c e7       	ldi	r24, 0x7C	; 124
     f7a:	94 e0       	ldi	r25, 0x04	; 4
     f7c:	91 a7       	std	Z+41, r25	; 0x29
     f7e:	80 a7       	std	Z+40, r24	; 0x28
     f80:	81 e8       	ldi	r24, 0x81	; 129
     f82:	94 e0       	ldi	r25, 0x04	; 4
     f84:	93 a7       	std	Z+43, r25	; 0x2b
     f86:	82 a7       	std	Z+42, r24	; 0x2a
     f88:	80 e9       	ldi	r24, 0x90	; 144
     f8a:	94 e0       	ldi	r25, 0x04	; 4
     f8c:	95 a7       	std	Z+45, r25	; 0x2d
     f8e:	84 a7       	std	Z+44, r24	; 0x2c
     f90:	84 eb       	ldi	r24, 0xB4	; 180
     f92:	94 e0       	ldi	r25, 0x04	; 4
     f94:	97 a7       	std	Z+47, r25	; 0x2f
     f96:	86 a7       	std	Z+46, r24	; 0x2e
     f98:	86 eb       	ldi	r24, 0xB6	; 182
     f9a:	94 e0       	ldi	r25, 0x04	; 4
     f9c:	91 ab       	std	Z+49, r25	; 0x31
     f9e:	80 ab       	std	Z+48, r24	; 0x30
     fa0:	80 ec       	ldi	r24, 0xC0	; 192
     fa2:	94 e0       	ldi	r25, 0x04	; 4
     fa4:	93 ab       	std	Z+51, r25	; 0x33
     fa6:	82 ab       	std	Z+50, r24	; 0x32
     fa8:	8d ec       	ldi	r24, 0xCD	; 205
     faa:	94 e0       	ldi	r25, 0x04	; 4
     fac:	95 ab       	std	Z+53, r25	; 0x35
     fae:	84 ab       	std	Z+52, r24	; 0x34
     fb0:	89 ed       	ldi	r24, 0xD9	; 217
     fb2:	94 e0       	ldi	r25, 0x04	; 4
     fb4:	97 ab       	std	Z+55, r25	; 0x37
     fb6:	86 ab       	std	Z+54, r24	; 0x36
     fb8:	81 ef       	ldi	r24, 0xF1	; 241
     fba:	94 e0       	ldi	r25, 0x04	; 4
     fbc:	91 af       	std	Z+57, r25	; 0x39
     fbe:	80 af       	std	Z+56, r24	; 0x38
     fc0:	84 e0       	ldi	r24, 0x04	; 4
     fc2:	95 e0       	ldi	r25, 0x05	; 5
     fc4:	93 af       	std	Z+59, r25	; 0x3b
     fc6:	82 af       	std	Z+58, r24	; 0x3a
     fc8:	8f e0       	ldi	r24, 0x0F	; 15
     fca:	95 e0       	ldi	r25, 0x05	; 5
     fcc:	95 af       	std	Z+61, r25	; 0x3d
     fce:	84 af       	std	Z+60, r24	; 0x3c
     fd0:	8c e3       	ldi	r24, 0x3C	; 60
     fd2:	95 e0       	ldi	r25, 0x05	; 5
     fd4:	97 af       	std	Z+63, r25	; 0x3f
     fd6:	86 af       	std	Z+62, r24	; 0x3e
     fd8:	df 01       	movw	r26, r30
     fda:	a0 5c       	subi	r26, 0xC0	; 192
     fdc:	bf 4f       	sbci	r27, 0xFF	; 255
     fde:	8b ea       	ldi	r24, 0xAB	; 171
     fe0:	96 e0       	ldi	r25, 0x06	; 6
     fe2:	11 96       	adiw	r26, 0x01	; 1
     fe4:	9c 93       	st	X, r25
     fe6:	8e 93       	st	-X, r24
     fe8:	12 96       	adiw	r26, 0x02	; 2
     fea:	86 eb       	ldi	r24, 0xB6	; 182
     fec:	96 e0       	ldi	r25, 0x06	; 6
     fee:	11 96       	adiw	r26, 0x01	; 1
     ff0:	9c 93       	st	X, r25
     ff2:	8e 93       	st	-X, r24
     ff4:	12 96       	adiw	r26, 0x02	; 2
     ff6:	86 ed       	ldi	r24, 0xD6	; 214
     ff8:	96 e0       	ldi	r25, 0x06	; 6
     ffa:	11 96       	adiw	r26, 0x01	; 1
     ffc:	9c 93       	st	X, r25
     ffe:	8e 93       	st	-X, r24
    1000:	12 96       	adiw	r26, 0x02	; 2
    1002:	85 e2       	ldi	r24, 0x25	; 37
    1004:	97 e0       	ldi	r25, 0x07	; 7
    1006:	11 96       	adiw	r26, 0x01	; 1
    1008:	9c 93       	st	X, r25
    100a:	8e 93       	st	-X, r24
    100c:	12 96       	adiw	r26, 0x02	; 2
    100e:	8d e2       	ldi	r24, 0x2D	; 45
    1010:	97 e0       	ldi	r25, 0x07	; 7
    1012:	8d 93       	st	X+, r24
    1014:	9c 93       	st	X, r25
}
    1016:	cf 01       	movw	r24, r30
    1018:	08 95       	ret

0000101a <I2C_Init>:
 * Return value	: none
 * description :This function is used to initialize the I2C module
****************************************************************************************************/
void I2C_Init(uint8_t prescaler)
{
  I2C_DDR|=I2C_IO_MASK;
    101a:	91 b3       	in	r25, 0x11	; 17
    101c:	93 60       	ori	r25, 0x03	; 3
    101e:	91 bb       	out	0x11, r25	; 17
  I2C_PORT|=I2C_IO_MASK;
    1020:	92 b3       	in	r25, 0x12	; 18
    1022:	93 60       	ori	r25, 0x03	; 3
    1024:	92 bb       	out	0x12, r25	; 18
  switch(prescaler){
    1026:	84 30       	cpi	r24, 0x04	; 4
    1028:	79 f0       	breq	.+30     	; 0x1048 <I2C_Init+0x2e>
    102a:	18 f4       	brcc	.+6      	; 0x1032 <I2C_Init+0x18>
    102c:	81 30       	cpi	r24, 0x01	; 1
    102e:	31 f0       	breq	.+12     	; 0x103c <I2C_Init+0x22>
    1030:	1d c0       	rjmp	.+58     	; 0x106c <I2C_Init+0x52>
    1032:	80 31       	cpi	r24, 0x10	; 16
    1034:	79 f0       	breq	.+30     	; 0x1054 <I2C_Init+0x3a>
    1036:	80 34       	cpi	r24, 0x40	; 64
    1038:	99 f0       	breq	.+38     	; 0x1060 <I2C_Init+0x46>
    103a:	18 c0       	rjmp	.+48     	; 0x106c <I2C_Init+0x52>
	case 1:
		TWI_STATUS_REGISTER &= ~TWI_PRESCALER_MASK;
    103c:	e1 e7       	ldi	r30, 0x71	; 113
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	90 81       	ld	r25, Z
    1042:	9c 7f       	andi	r25, 0xFC	; 252
    1044:	90 83       	st	Z, r25
		break;
    1046:	18 c0       	rjmp	.+48     	; 0x1078 <I2C_Init+0x5e>
	case 4:
		TWI_STATUS_REGISTER |= (1<<TWPS0);
    1048:	e1 e7       	ldi	r30, 0x71	; 113
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	90 81       	ld	r25, Z
    104e:	91 60       	ori	r25, 0x01	; 1
    1050:	90 83       	st	Z, r25
		break;
    1052:	12 c0       	rjmp	.+36     	; 0x1078 <I2C_Init+0x5e>
	case 16:
		TWI_STATUS_REGISTER |= (2<<TWPS0);
    1054:	e1 e7       	ldi	r30, 0x71	; 113
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	90 81       	ld	r25, Z
    105a:	92 60       	ori	r25, 0x02	; 2
    105c:	90 83       	st	Z, r25
		break;
    105e:	0c c0       	rjmp	.+24     	; 0x1078 <I2C_Init+0x5e>
	case 64:
		TWI_STATUS_REGISTER |= (3<<TWPS0);
    1060:	e1 e7       	ldi	r30, 0x71	; 113
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	90 81       	ld	r25, Z
    1066:	93 60       	ori	r25, 0x03	; 3
    1068:	90 83       	st	Z, r25
		break;
    106a:	06 c0       	rjmp	.+12     	; 0x1078 <I2C_Init+0x5e>
	default:
		prescaler=1;
		TWI_STATUS_REGISTER &= ~TWI_PRESCALER_MASK;
    106c:	e1 e7       	ldi	r30, 0x71	; 113
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	8c 7f       	andi	r24, 0xFC	; 252
    1074:	80 83       	st	Z, r24
		break;
	case 64:
		TWI_STATUS_REGISTER |= (3<<TWPS0);
		break;
	default:
		prescaler=1;
    1076:	81 e0       	ldi	r24, 0x01	; 1
		TWI_STATUS_REGISTER &= ~TWI_PRESCALER_MASK;
	break;
  }
  TWI_BIT_RATE_REGISTER = ((F_CPU/I2C_SCL_CLOCK)-16)/(2*prescaler);
    1078:	28 2f       	mov	r18, r24
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	22 0f       	add	r18, r18
    107e:	33 1f       	adc	r19, r19
    1080:	03 2e       	mov	r0, r19
    1082:	00 0c       	add	r0, r0
    1084:	44 0b       	sbc	r20, r20
    1086:	55 0b       	sbc	r21, r21
    1088:	60 e9       	ldi	r22, 0x90	; 144
    108a:	70 e0       	ldi	r23, 0x00	; 0
    108c:	80 e0       	ldi	r24, 0x00	; 0
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	7d d4       	rcall	.+2298   	; 0x198c <__udivmodsi4>
    1092:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    1096:	08 95       	ret

00001098 <I2C_Start>:
                      ____|         |____________

***************************************************************************************************/
void I2C_Start()
{
  TWI_CONTROL_REGISTER = ((1<<TWINT) | (1<<TWSTA) | (1<<TWEN));
    1098:	e4 e7       	ldi	r30, 0x74	; 116
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	84 ea       	ldi	r24, 0xA4	; 164
    109e:	80 83       	st	Z, r24
  for (ticks=Nticks; !(TWI_CONTROL_REGISTER & (1<<TWINT)) && ticks; ticks--);
    10a0:	8f ef       	ldi	r24, 0xFF	; 255
    10a2:	93 e0       	ldi	r25, 0x03	; 3
    10a4:	90 93 d8 02 	sts	0x02D8, r25	; 0x8002d8 <ticks+0x1>
    10a8:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <ticks>
    10ac:	80 81       	ld	r24, Z
    10ae:	88 23       	and	r24, r24
    10b0:	5c f0       	brlt	.+22     	; 0x10c8 <I2C_Start+0x30>
    10b2:	8e ef       	ldi	r24, 0xFE	; 254
    10b4:	93 e0       	ldi	r25, 0x03	; 3
    10b6:	90 93 d8 02 	sts	0x02D8, r25	; 0x8002d8 <ticks+0x1>
    10ba:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <ticks>
    10be:	20 81       	ld	r18, Z
    10c0:	22 23       	and	r18, r18
    10c2:	14 f0       	brlt	.+4      	; 0x10c8 <I2C_Start+0x30>
    10c4:	01 97       	sbiw	r24, 0x01	; 1
    10c6:	b8 f7       	brcc	.-18     	; 0x10b6 <I2C_Start+0x1e>
    10c8:	08 95       	ret

000010ca <I2C_Stop>:
                      __________|

***************************************************************************************************/
void I2C_Stop(void)
{
  TWI_CONTROL_REGISTER = ((1<< TWINT) | (1<<TWEN) | (1<<TWSTO));
    10ca:	84 e9       	ldi	r24, 0x94	; 148
    10cc:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10d0:	8f e8       	ldi	r24, 0x8F	; 143
    10d2:	91 e0       	ldi	r25, 0x01	; 1
    10d4:	01 97       	sbiw	r24, 0x01	; 1
    10d6:	f1 f7       	brne	.-4      	; 0x10d4 <I2C_Stop+0xa>
    10d8:	00 c0       	rjmp	.+0      	; 0x10da <I2C_Stop+0x10>
    10da:	00 00       	nop
    10dc:	08 95       	ret

000010de <I2C_Write>:
 SDA:    D8       D7     D6      D5      D4       D3      D2      D1      D0     ACK

***************************************************************************************************/
void I2C_Write(uint8_t var_i2cData_u8)
{
  TWI_DATA_REGISTER = var_i2cData_u8 ;
    10de:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
  TWI_CONTROL_REGISTER = ((1<< TWINT) | (1<<TWEN));
    10e2:	e4 e7       	ldi	r30, 0x74	; 116
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	84 e8       	ldi	r24, 0x84	; 132
    10e8:	80 83       	st	Z, r24
  for (ticks=Nticks; !(TWI_CONTROL_REGISTER & (1 <<TWINT)) && ticks; ticks--);
    10ea:	8f ef       	ldi	r24, 0xFF	; 255
    10ec:	93 e0       	ldi	r25, 0x03	; 3
    10ee:	90 93 d8 02 	sts	0x02D8, r25	; 0x8002d8 <ticks+0x1>
    10f2:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <ticks>
    10f6:	80 81       	ld	r24, Z
    10f8:	88 23       	and	r24, r24
    10fa:	5c f0       	brlt	.+22     	; 0x1112 <__stack+0x13>
    10fc:	8e ef       	ldi	r24, 0xFE	; 254
    10fe:	93 e0       	ldi	r25, 0x03	; 3
    1100:	90 93 d8 02 	sts	0x02D8, r25	; 0x8002d8 <ticks+0x1>
    1104:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <ticks>
    1108:	20 81       	ld	r18, Z
    110a:	22 23       	and	r18, r18
    110c:	14 f0       	brlt	.+4      	; 0x1112 <__stack+0x13>
    110e:	01 97       	sbiw	r24, 0x01	; 1
    1110:	b8 f7       	brcc	.-18     	; 0x1100 <__stack+0x1>
    1112:	08 95       	ret

00001114 <I2C_Read>:
 SDA:    D8       D7     D6      D5       D4     D3       D2      D1     D0      ACK

***************************************************************************************************/
uint8_t I2C_Read(uint8_t var_ackOption_u8)
{
 TWI_CONTROL_REGISTER = ((1<< TWINT) | (1<<TWEN) | (var_ackOption_u8<<TWEA));
    1114:	20 e4       	ldi	r18, 0x40	; 64
    1116:	82 9f       	mul	r24, r18
    1118:	c0 01       	movw	r24, r0
    111a:	11 24       	eor	r1, r1
    111c:	84 68       	ori	r24, 0x84	; 132
    111e:	e4 e7       	ldi	r30, 0x74	; 116
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 83       	st	Z, r24
   for (ticks=Nticks; !(TWI_CONTROL_REGISTER & (1 <<TWINT)) && ticks; ticks--);
    1124:	8f ef       	ldi	r24, 0xFF	; 255
    1126:	93 e0       	ldi	r25, 0x03	; 3
    1128:	90 93 d8 02 	sts	0x02D8, r25	; 0x8002d8 <ticks+0x1>
    112c:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <ticks>
    1130:	80 81       	ld	r24, Z
    1132:	88 23       	and	r24, r24
    1134:	5c f0       	brlt	.+22     	; 0x114c <I2C_Read+0x38>
    1136:	8e ef       	ldi	r24, 0xFE	; 254
    1138:	93 e0       	ldi	r25, 0x03	; 3
    113a:	90 93 d8 02 	sts	0x02D8, r25	; 0x8002d8 <ticks+0x1>
    113e:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <ticks>
    1142:	20 81       	ld	r18, Z
    1144:	22 23       	and	r18, r18
    1146:	14 f0       	brlt	.+4      	; 0x114c <I2C_Read+0x38>
    1148:	01 97       	sbiw	r24, 0x01	; 1
    114a:	b8 f7       	brcc	.-18     	; 0x113a <I2C_Read+0x26>
   return TWI_DATA_REGISTER;
    114c:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
}
    1150:	08 95       	ret

00001152 <LCD0_write>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1152:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <lcd0_PORT>
    1156:	f0 91 e4 02 	lds	r31, 0x02E4	; 0x8002e4 <lcd0_PORT+0x1>
    115a:	90 81       	ld	r25, Z
    115c:	9d 7f       	andi	r25, 0xFD	; 253
    115e:	90 83       	st	Z, r25
    1160:	67 2b       	or	r22, r23
    1162:	41 f0       	breq	.+16     	; 0x1174 <LCD0_write+0x22>
    1164:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <lcd0_PORT>
    1168:	f0 91 e4 02 	lds	r31, 0x02E4	; 0x8002e4 <lcd0_PORT+0x1>
    116c:	90 81       	ld	r25, Z
    116e:	91 60       	ori	r25, 0x01	; 1
    1170:	90 83       	st	Z, r25
    1172:	07 c0       	rjmp	.+14     	; 0x1182 <LCD0_write+0x30>
    1174:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <lcd0_PORT>
    1178:	f0 91 e4 02 	lds	r31, 0x02E4	; 0x8002e4 <lcd0_PORT+0x1>
    117c:	90 81       	ld	r25, Z
    117e:	9e 7f       	andi	r25, 0xFE	; 254
    1180:	90 83       	st	Z, r25
    1182:	e0 91 e0 02 	lds	r30, 0x02E0	; 0x8002e0 <lcd0_DDR>
    1186:	f0 91 e1 02 	lds	r31, 0x02E1	; 0x8002e1 <lcd0_DDR+0x1>
    118a:	90 81       	ld	r25, Z
    118c:	90 6f       	ori	r25, 0xF0	; 240
    118e:	90 83       	st	Z, r25
    1190:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <lcd0_PORT>
    1194:	f0 91 e4 02 	lds	r31, 0x02E4	; 0x8002e4 <lcd0_PORT+0x1>
    1198:	90 81       	ld	r25, Z
    119a:	94 60       	ori	r25, 0x04	; 4
    119c:	90 83       	st	Z, r25
    119e:	88 23       	and	r24, r24
    11a0:	44 f4       	brge	.+16     	; 0x11b2 <LCD0_write+0x60>
    11a2:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <lcd0_PORT>
    11a6:	f0 91 e4 02 	lds	r31, 0x02E4	; 0x8002e4 <lcd0_PORT+0x1>
    11aa:	90 81       	ld	r25, Z
    11ac:	90 68       	ori	r25, 0x80	; 128
    11ae:	90 83       	st	Z, r25
    11b0:	07 c0       	rjmp	.+14     	; 0x11c0 <LCD0_write+0x6e>
    11b2:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <lcd0_PORT>
    11b6:	f0 91 e4 02 	lds	r31, 0x02E4	; 0x8002e4 <lcd0_PORT+0x1>
    11ba:	90 81       	ld	r25, Z
    11bc:	9f 77       	andi	r25, 0x7F	; 127
    11be:	90 83       	st	Z, r25
    11c0:	86 ff       	sbrs	r24, 6
    11c2:	08 c0       	rjmp	.+16     	; 0x11d4 <LCD0_write+0x82>
    11c4:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <lcd0_PORT>
    11c8:	f0 91 e4 02 	lds	r31, 0x02E4	; 0x8002e4 <lcd0_PORT+0x1>
    11cc:	90 81       	ld	r25, Z
    11ce:	90 64       	ori	r25, 0x40	; 64
    11d0:	90 83       	st	Z, r25
    11d2:	07 c0       	rjmp	.+14     	; 0x11e2 <LCD0_write+0x90>
    11d4:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <lcd0_PORT>
    11d8:	f0 91 e4 02 	lds	r31, 0x02E4	; 0x8002e4 <lcd0_PORT+0x1>
    11dc:	90 81       	ld	r25, Z
    11de:	9f 7b       	andi	r25, 0xBF	; 191
    11e0:	90 83       	st	Z, r25
    11e2:	85 ff       	sbrs	r24, 5
    11e4:	08 c0       	rjmp	.+16     	; 0x11f6 <LCD0_write+0xa4>
    11e6:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <lcd0_PORT>
    11ea:	f0 91 e4 02 	lds	r31, 0x02E4	; 0x8002e4 <lcd0_PORT+0x1>
    11ee:	90 81       	ld	r25, Z
    11f0:	90 62       	ori	r25, 0x20	; 32
    11f2:	90 83       	st	Z, r25
    11f4:	07 c0       	rjmp	.+14     	; 0x1204 <LCD0_write+0xb2>
    11f6:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <lcd0_PORT>
    11fa:	f0 91 e4 02 	lds	r31, 0x02E4	; 0x8002e4 <lcd0_PORT+0x1>
    11fe:	90 81       	ld	r25, Z
    1200:	9f 7d       	andi	r25, 0xDF	; 223
    1202:	90 83       	st	Z, r25
    1204:	84 ff       	sbrs	r24, 4
    1206:	08 c0       	rjmp	.+16     	; 0x1218 <LCD0_write+0xc6>
    1208:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <lcd0_PORT>
    120c:	f0 91 e4 02 	lds	r31, 0x02E4	; 0x8002e4 <lcd0_PORT+0x1>
    1210:	90 81       	ld	r25, Z
    1212:	90 61       	ori	r25, 0x10	; 16
    1214:	90 83       	st	Z, r25
    1216:	07 c0       	rjmp	.+14     	; 0x1226 <LCD0_write+0xd4>
    1218:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <lcd0_PORT>
    121c:	f0 91 e4 02 	lds	r31, 0x02E4	; 0x8002e4 <lcd0_PORT+0x1>
    1220:	90 81       	ld	r25, Z
    1222:	9f 7e       	andi	r25, 0xEF	; 239
    1224:	90 83       	st	Z, r25
    1226:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <lcd0_PORT>
    122a:	f0 91 e4 02 	lds	r31, 0x02E4	; 0x8002e4 <lcd0_PORT+0x1>
    122e:	90 81       	ld	r25, Z
    1230:	9b 7f       	andi	r25, 0xFB	; 251
    1232:	90 83       	st	Z, r25
    1234:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <lcd0_PORT>
    1238:	f0 91 e4 02 	lds	r31, 0x02E4	; 0x8002e4 <lcd0_PORT+0x1>
    123c:	90 81       	ld	r25, Z
    123e:	94 60       	ori	r25, 0x04	; 4
    1240:	90 83       	st	Z, r25
    1242:	83 ff       	sbrs	r24, 3
    1244:	08 c0       	rjmp	.+16     	; 0x1256 <LCD0_write+0x104>
    1246:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <lcd0_PORT>
    124a:	f0 91 e4 02 	lds	r31, 0x02E4	; 0x8002e4 <lcd0_PORT+0x1>
    124e:	90 81       	ld	r25, Z
    1250:	90 68       	ori	r25, 0x80	; 128
    1252:	90 83       	st	Z, r25
    1254:	07 c0       	rjmp	.+14     	; 0x1264 <LCD0_write+0x112>
    1256:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <lcd0_PORT>
    125a:	f0 91 e4 02 	lds	r31, 0x02E4	; 0x8002e4 <lcd0_PORT+0x1>
    125e:	90 81       	ld	r25, Z
    1260:	9f 77       	andi	r25, 0x7F	; 127
    1262:	90 83       	st	Z, r25
    1264:	82 ff       	sbrs	r24, 2
    1266:	08 c0       	rjmp	.+16     	; 0x1278 <LCD0_write+0x126>
    1268:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <lcd0_PORT>
    126c:	f0 91 e4 02 	lds	r31, 0x02E4	; 0x8002e4 <lcd0_PORT+0x1>
    1270:	90 81       	ld	r25, Z
    1272:	90 64       	ori	r25, 0x40	; 64
    1274:	90 83       	st	Z, r25
    1276:	07 c0       	rjmp	.+14     	; 0x1286 <LCD0_write+0x134>
    1278:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <lcd0_PORT>
    127c:	f0 91 e4 02 	lds	r31, 0x02E4	; 0x8002e4 <lcd0_PORT+0x1>
    1280:	90 81       	ld	r25, Z
    1282:	9f 7b       	andi	r25, 0xBF	; 191
    1284:	90 83       	st	Z, r25
    1286:	81 ff       	sbrs	r24, 1
    1288:	08 c0       	rjmp	.+16     	; 0x129a <LCD0_write+0x148>
    128a:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <lcd0_PORT>
    128e:	f0 91 e4 02 	lds	r31, 0x02E4	; 0x8002e4 <lcd0_PORT+0x1>
    1292:	90 81       	ld	r25, Z
    1294:	90 62       	ori	r25, 0x20	; 32
    1296:	90 83       	st	Z, r25
    1298:	07 c0       	rjmp	.+14     	; 0x12a8 <LCD0_write+0x156>
    129a:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <lcd0_PORT>
    129e:	f0 91 e4 02 	lds	r31, 0x02E4	; 0x8002e4 <lcd0_PORT+0x1>
    12a2:	90 81       	ld	r25, Z
    12a4:	9f 7d       	andi	r25, 0xDF	; 223
    12a6:	90 83       	st	Z, r25
    12a8:	80 ff       	sbrs	r24, 0
    12aa:	08 c0       	rjmp	.+16     	; 0x12bc <LCD0_write+0x16a>
    12ac:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <lcd0_PORT>
    12b0:	f0 91 e4 02 	lds	r31, 0x02E4	; 0x8002e4 <lcd0_PORT+0x1>
    12b4:	80 81       	ld	r24, Z
    12b6:	80 61       	ori	r24, 0x10	; 16
    12b8:	80 83       	st	Z, r24
    12ba:	07 c0       	rjmp	.+14     	; 0x12ca <LCD0_write+0x178>
    12bc:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <lcd0_PORT>
    12c0:	f0 91 e4 02 	lds	r31, 0x02E4	; 0x8002e4 <lcd0_PORT+0x1>
    12c4:	80 81       	ld	r24, Z
    12c6:	8f 7e       	andi	r24, 0xEF	; 239
    12c8:	80 83       	st	Z, r24
    12ca:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <lcd0_PORT>
    12ce:	f0 91 e4 02 	lds	r31, 0x02E4	; 0x8002e4 <lcd0_PORT+0x1>
    12d2:	80 81       	ld	r24, Z
    12d4:	8b 7f       	andi	r24, 0xFB	; 251
    12d6:	80 83       	st	Z, r24
    12d8:	08 95       	ret

000012da <LCD0_read>:
    12da:	e0 91 e0 02 	lds	r30, 0x02E0	; 0x8002e0 <lcd0_DDR>
    12de:	f0 91 e1 02 	lds	r31, 0x02E1	; 0x8002e1 <lcd0_DDR+0x1>
    12e2:	20 81       	ld	r18, Z
    12e4:	2f 70       	andi	r18, 0x0F	; 15
    12e6:	20 83       	st	Z, r18
    12e8:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <lcd0_PORT>
    12ec:	f0 91 e4 02 	lds	r31, 0x02E4	; 0x8002e4 <lcd0_PORT+0x1>
    12f0:	20 81       	ld	r18, Z
    12f2:	20 6f       	ori	r18, 0xF0	; 240
    12f4:	20 83       	st	Z, r18
    12f6:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <lcd0_PORT>
    12fa:	f0 91 e4 02 	lds	r31, 0x02E4	; 0x8002e4 <lcd0_PORT+0x1>
    12fe:	20 81       	ld	r18, Z
    1300:	22 60       	ori	r18, 0x02	; 2
    1302:	20 83       	st	Z, r18
    1304:	89 2b       	or	r24, r25
    1306:	41 f0       	breq	.+16     	; 0x1318 <LCD0_read+0x3e>
    1308:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <lcd0_PORT>
    130c:	f0 91 e4 02 	lds	r31, 0x02E4	; 0x8002e4 <lcd0_PORT+0x1>
    1310:	80 81       	ld	r24, Z
    1312:	81 60       	ori	r24, 0x01	; 1
    1314:	80 83       	st	Z, r24
    1316:	07 c0       	rjmp	.+14     	; 0x1326 <LCD0_read+0x4c>
    1318:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <lcd0_PORT>
    131c:	f0 91 e4 02 	lds	r31, 0x02E4	; 0x8002e4 <lcd0_PORT+0x1>
    1320:	80 81       	ld	r24, Z
    1322:	8e 7f       	andi	r24, 0xFE	; 254
    1324:	80 83       	st	Z, r24
    1326:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <lcd0_PORT>
    132a:	f0 91 e4 02 	lds	r31, 0x02E4	; 0x8002e4 <lcd0_PORT+0x1>
    132e:	80 81       	ld	r24, Z
    1330:	84 60       	ori	r24, 0x04	; 4
    1332:	80 83       	st	Z, r24
    1334:	e0 91 d9 02 	lds	r30, 0x02D9	; 0x8002d9 <lcd0_PIN>
    1338:	f0 91 da 02 	lds	r31, 0x02DA	; 0x8002da <lcd0_PIN+0x1>
    133c:	80 81       	ld	r24, Z
    133e:	88 23       	and	r24, r24
    1340:	14 f0       	brlt	.+4      	; 0x1346 <LCD0_read+0x6c>
    1342:	80 e0       	ldi	r24, 0x00	; 0
    1344:	01 c0       	rjmp	.+2      	; 0x1348 <LCD0_read+0x6e>
    1346:	80 e8       	ldi	r24, 0x80	; 128
    1348:	90 81       	ld	r25, Z
    134a:	96 ff       	sbrs	r25, 6
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <LCD0_read+0x78>
    134e:	80 64       	ori	r24, 0x40	; 64
    1350:	01 c0       	rjmp	.+2      	; 0x1354 <LCD0_read+0x7a>
    1352:	8f 7b       	andi	r24, 0xBF	; 191
    1354:	90 81       	ld	r25, Z
    1356:	95 ff       	sbrs	r25, 5
    1358:	02 c0       	rjmp	.+4      	; 0x135e <LCD0_read+0x84>
    135a:	80 62       	ori	r24, 0x20	; 32
    135c:	01 c0       	rjmp	.+2      	; 0x1360 <LCD0_read+0x86>
    135e:	8f 7d       	andi	r24, 0xDF	; 223
    1360:	90 81       	ld	r25, Z
    1362:	94 ff       	sbrs	r25, 4
    1364:	02 c0       	rjmp	.+4      	; 0x136a <LCD0_read+0x90>
    1366:	80 61       	ori	r24, 0x10	; 16
    1368:	01 c0       	rjmp	.+2      	; 0x136c <LCD0_read+0x92>
    136a:	8f 7e       	andi	r24, 0xEF	; 239
    136c:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <lcd0_PORT>
    1370:	f0 91 e4 02 	lds	r31, 0x02E4	; 0x8002e4 <lcd0_PORT+0x1>
    1374:	90 81       	ld	r25, Z
    1376:	9b 7f       	andi	r25, 0xFB	; 251
    1378:	90 83       	st	Z, r25
    137a:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <lcd0_PORT>
    137e:	f0 91 e4 02 	lds	r31, 0x02E4	; 0x8002e4 <lcd0_PORT+0x1>
    1382:	90 81       	ld	r25, Z
    1384:	94 60       	ori	r25, 0x04	; 4
    1386:	90 83       	st	Z, r25
    1388:	e0 91 d9 02 	lds	r30, 0x02D9	; 0x8002d9 <lcd0_PIN>
    138c:	f0 91 da 02 	lds	r31, 0x02DA	; 0x8002da <lcd0_PIN+0x1>
    1390:	90 81       	ld	r25, Z
    1392:	99 23       	and	r25, r25
    1394:	14 f4       	brge	.+4      	; 0x139a <LCD0_read+0xc0>
    1396:	88 60       	ori	r24, 0x08	; 8
    1398:	01 c0       	rjmp	.+2      	; 0x139c <LCD0_read+0xc2>
    139a:	87 7f       	andi	r24, 0xF7	; 247
    139c:	90 81       	ld	r25, Z
    139e:	96 ff       	sbrs	r25, 6
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <LCD0_read+0xcc>
    13a2:	84 60       	ori	r24, 0x04	; 4
    13a4:	01 c0       	rjmp	.+2      	; 0x13a8 <LCD0_read+0xce>
    13a6:	8b 7f       	andi	r24, 0xFB	; 251
    13a8:	90 81       	ld	r25, Z
    13aa:	95 ff       	sbrs	r25, 5
    13ac:	02 c0       	rjmp	.+4      	; 0x13b2 <LCD0_read+0xd8>
    13ae:	82 60       	ori	r24, 0x02	; 2
    13b0:	01 c0       	rjmp	.+2      	; 0x13b4 <LCD0_read+0xda>
    13b2:	8d 7f       	andi	r24, 0xFD	; 253
    13b4:	90 81       	ld	r25, Z
    13b6:	94 ff       	sbrs	r25, 4
    13b8:	02 c0       	rjmp	.+4      	; 0x13be <LCD0_read+0xe4>
    13ba:	81 60       	ori	r24, 0x01	; 1
    13bc:	01 c0       	rjmp	.+2      	; 0x13c0 <LCD0_read+0xe6>
    13be:	8e 7f       	andi	r24, 0xFE	; 254
    13c0:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <lcd0_PORT>
    13c4:	f0 91 e4 02 	lds	r31, 0x02E4	; 0x8002e4 <lcd0_PORT+0x1>
    13c8:	90 81       	ld	r25, Z
    13ca:	9b 7f       	andi	r25, 0xFB	; 251
    13cc:	90 83       	st	Z, r25
    13ce:	08 95       	ret

000013d0 <LCD0_BF>:
    13d0:	cf 93       	push	r28
    13d2:	df 93       	push	r29
    13d4:	80 e0       	ldi	r24, 0x00	; 0
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	80 df       	rcall	.-256    	; 0x12da <LCD0_read>
    13da:	cb e0       	ldi	r28, 0x0B	; 11
    13dc:	d0 e0       	ldi	r29, 0x00	; 0
    13de:	05 c0       	rjmp	.+10     	; 0x13ea <LCD0_BF+0x1a>
    13e0:	80 e0       	ldi	r24, 0x00	; 0
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	7a df       	rcall	.-268    	; 0x12da <LCD0_read>
    13e6:	21 97       	sbiw	r28, 0x01	; 1
    13e8:	11 f0       	breq	.+4      	; 0x13ee <LCD0_BF+0x1e>
    13ea:	88 23       	and	r24, r24
    13ec:	cc f3       	brlt	.-14     	; 0x13e0 <LCD0_BF+0x10>
    13ee:	df 91       	pop	r29
    13f0:	cf 91       	pop	r28
    13f2:	08 95       	ret

000013f4 <LCD0_putch>:
    13f4:	61 e0       	ldi	r22, 0x01	; 1
    13f6:	70 e0       	ldi	r23, 0x00	; 0
    13f8:	ac de       	rcall	.-680    	; 0x1152 <LCD0_write>
    13fa:	ea cf       	rjmp	.-44     	; 0x13d0 <LCD0_BF>
    13fc:	08 95       	ret

000013fe <LCD0_getch>:
    13fe:	cf 93       	push	r28
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	6a df       	rcall	.-300    	; 0x12da <LCD0_read>
    1406:	c8 2f       	mov	r28, r24
    1408:	e3 df       	rcall	.-58     	; 0x13d0 <LCD0_BF>
    140a:	8c 2f       	mov	r24, r28
    140c:	cf 91       	pop	r28
    140e:	08 95       	ret

00001410 <LCD0_string>:
    1410:	cf 93       	push	r28
    1412:	df 93       	push	r29
    1414:	ec 01       	movw	r28, r24
    1416:	88 81       	ld	r24, Y
    1418:	88 23       	and	r24, r24
    141a:	41 f0       	breq	.+16     	; 0x142c <LCD0_string+0x1c>
    141c:	21 96       	adiw	r28, 0x01	; 1
    141e:	61 e0       	ldi	r22, 0x01	; 1
    1420:	70 e0       	ldi	r23, 0x00	; 0
    1422:	97 de       	rcall	.-722    	; 0x1152 <LCD0_write>
    1424:	d5 df       	rcall	.-86     	; 0x13d0 <LCD0_BF>
    1426:	89 91       	ld	r24, Y+
    1428:	81 11       	cpse	r24, r1
    142a:	f9 cf       	rjmp	.-14     	; 0x141e <LCD0_string+0xe>
    142c:	df 91       	pop	r29
    142e:	cf 91       	pop	r28
    1430:	08 95       	ret

00001432 <LCD0_string_size>:
    1432:	0f 93       	push	r16
    1434:	1f 93       	push	r17
    1436:	cf 93       	push	r28
    1438:	df 93       	push	r29
    143a:	fc 01       	movw	r30, r24
    143c:	d6 2f       	mov	r29, r22
    143e:	80 81       	ld	r24, Z
    1440:	88 23       	and	r24, r24
    1442:	51 f0       	breq	.+20     	; 0x1458 <LCD0_string_size+0x26>
    1444:	8f 01       	movw	r16, r30
    1446:	0f 5f       	subi	r16, 0xFF	; 255
    1448:	1f 4f       	sbci	r17, 0xFF	; 255
    144a:	61 11       	cpse	r22, r1
    144c:	09 c0       	rjmp	.+18     	; 0x1460 <LCD0_string_size+0x2e>
    144e:	1b c0       	rjmp	.+54     	; 0x1486 <LCD0_string_size+0x54>
    1450:	cf 5f       	subi	r28, 0xFF	; 255
    1452:	dc 17       	cp	r29, r28
    1454:	30 f4       	brcc	.+12     	; 0x1462 <LCD0_string_size+0x30>
    1456:	01 c0       	rjmp	.+2      	; 0x145a <LCD0_string_size+0x28>
    1458:	c0 e0       	ldi	r28, 0x00	; 0
    145a:	cd 17       	cp	r28, r29
    145c:	60 f0       	brcs	.+24     	; 0x1476 <LCD0_string_size+0x44>
    145e:	13 c0       	rjmp	.+38     	; 0x1486 <LCD0_string_size+0x54>
    1460:	c1 e0       	ldi	r28, 0x01	; 1
    1462:	61 e0       	ldi	r22, 0x01	; 1
    1464:	70 e0       	ldi	r23, 0x00	; 0
    1466:	75 de       	rcall	.-790    	; 0x1152 <LCD0_write>
    1468:	b3 df       	rcall	.-154    	; 0x13d0 <LCD0_BF>
    146a:	f8 01       	movw	r30, r16
    146c:	81 91       	ld	r24, Z+
    146e:	8f 01       	movw	r16, r30
    1470:	81 11       	cpse	r24, r1
    1472:	ee cf       	rjmp	.-36     	; 0x1450 <LCD0_string_size+0x1e>
    1474:	f2 cf       	rjmp	.-28     	; 0x145a <LCD0_string_size+0x28>
    1476:	cf 5f       	subi	r28, 0xFF	; 255
    1478:	61 e0       	ldi	r22, 0x01	; 1
    147a:	70 e0       	ldi	r23, 0x00	; 0
    147c:	80 e2       	ldi	r24, 0x20	; 32
    147e:	69 de       	rcall	.-814    	; 0x1152 <LCD0_write>
    1480:	a7 df       	rcall	.-178    	; 0x13d0 <LCD0_BF>
    1482:	cd 17       	cp	r28, r29
    1484:	c0 f3       	brcs	.-16     	; 0x1476 <LCD0_string_size+0x44>
    1486:	df 91       	pop	r29
    1488:	cf 91       	pop	r28
    148a:	1f 91       	pop	r17
    148c:	0f 91       	pop	r16
    148e:	08 95       	ret

00001490 <LCD0_hspace>:
    1490:	cf 93       	push	r28
    1492:	c8 2f       	mov	r28, r24
    1494:	88 23       	and	r24, r24
    1496:	39 f0       	breq	.+14     	; 0x14a6 <LCD0_hspace+0x16>
    1498:	61 e0       	ldi	r22, 0x01	; 1
    149a:	70 e0       	ldi	r23, 0x00	; 0
    149c:	80 e2       	ldi	r24, 0x20	; 32
    149e:	59 de       	rcall	.-846    	; 0x1152 <LCD0_write>
    14a0:	97 df       	rcall	.-210    	; 0x13d0 <LCD0_BF>
    14a2:	c1 50       	subi	r28, 0x01	; 1
    14a4:	c9 f7       	brne	.-14     	; 0x1498 <LCD0_hspace+0x8>
    14a6:	cf 91       	pop	r28
    14a8:	08 95       	ret

000014aa <LCD0_gotoxy>:
    14aa:	26 2f       	mov	r18, r22
    14ac:	81 30       	cpi	r24, 0x01	; 1
    14ae:	91 05       	cpc	r25, r1
    14b0:	71 f0       	breq	.+28     	; 0x14ce <LCD0_gotoxy+0x24>
    14b2:	30 f0       	brcs	.+12     	; 0x14c0 <LCD0_gotoxy+0x16>
    14b4:	82 30       	cpi	r24, 0x02	; 2
    14b6:	91 05       	cpc	r25, r1
    14b8:	89 f0       	breq	.+34     	; 0x14dc <LCD0_gotoxy+0x32>
    14ba:	03 97       	sbiw	r24, 0x03	; 3
    14bc:	b1 f0       	breq	.+44     	; 0x14ea <LCD0_gotoxy+0x40>
    14be:	08 95       	ret
    14c0:	60 e0       	ldi	r22, 0x00	; 0
    14c2:	70 e0       	ldi	r23, 0x00	; 0
    14c4:	80 e8       	ldi	r24, 0x80	; 128
    14c6:	82 0f       	add	r24, r18
    14c8:	44 de       	rcall	.-888    	; 0x1152 <LCD0_write>
    14ca:	82 cf       	rjmp	.-252    	; 0x13d0 <LCD0_BF>
    14cc:	08 95       	ret
    14ce:	60 e0       	ldi	r22, 0x00	; 0
    14d0:	70 e0       	ldi	r23, 0x00	; 0
    14d2:	80 ec       	ldi	r24, 0xC0	; 192
    14d4:	82 0f       	add	r24, r18
    14d6:	3d de       	rcall	.-902    	; 0x1152 <LCD0_write>
    14d8:	7b cf       	rjmp	.-266    	; 0x13d0 <LCD0_BF>
    14da:	08 95       	ret
    14dc:	60 e0       	ldi	r22, 0x00	; 0
    14de:	70 e0       	ldi	r23, 0x00	; 0
    14e0:	84 e9       	ldi	r24, 0x94	; 148
    14e2:	82 0f       	add	r24, r18
    14e4:	36 de       	rcall	.-916    	; 0x1152 <LCD0_write>
    14e6:	74 cf       	rjmp	.-280    	; 0x13d0 <LCD0_BF>
    14e8:	08 95       	ret
    14ea:	60 e0       	ldi	r22, 0x00	; 0
    14ec:	70 e0       	ldi	r23, 0x00	; 0
    14ee:	84 ed       	ldi	r24, 0xD4	; 212
    14f0:	82 0f       	add	r24, r18
    14f2:	2f de       	rcall	.-930    	; 0x1152 <LCD0_write>
    14f4:	6d cf       	rjmp	.-294    	; 0x13d0 <LCD0_BF>
    14f6:	08 95       	ret

000014f8 <LCD0_clear>:
    14f8:	60 e0       	ldi	r22, 0x00	; 0
    14fa:	70 e0       	ldi	r23, 0x00	; 0
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	29 de       	rcall	.-942    	; 0x1152 <LCD0_write>
    1500:	87 ee       	ldi	r24, 0xE7	; 231
    1502:	97 e1       	ldi	r25, 0x17	; 23
    1504:	01 97       	sbiw	r24, 0x01	; 1
    1506:	f1 f7       	brne	.-4      	; 0x1504 <LCD0_clear+0xc>
    1508:	00 c0       	rjmp	.+0      	; 0x150a <LCD0_clear+0x12>
    150a:	00 00       	nop
    150c:	08 95       	ret

0000150e <LCD0_inic>:
	return lcd0;
}
void LCD0_inic(void)
{
	//LCD INIC
	*lcd0_DDR=(1<<RS)|(1<<RW)|(1<<EN)|(0<<NC);
    150e:	e0 91 e0 02 	lds	r30, 0x02E0	; 0x8002e0 <lcd0_DDR>
    1512:	f0 91 e1 02 	lds	r31, 0x02E1	; 0x8002e1 <lcd0_DDR+0x1>
    1516:	87 e0       	ldi	r24, 0x07	; 7
    1518:	80 83       	st	Z, r24
	*lcd0_PORT=(1<<NC);
    151a:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <lcd0_PORT>
    151e:	f0 91 e4 02 	lds	r31, 0x02E4	; 0x8002e4 <lcd0_PORT+0x1>
    1522:	88 e0       	ldi	r24, 0x08	; 8
    1524:	80 83       	st	Z, r24
    1526:	2f ef       	ldi	r18, 0xFF	; 255
    1528:	83 ef       	ldi	r24, 0xF3	; 243
    152a:	91 e0       	ldi	r25, 0x01	; 1
    152c:	21 50       	subi	r18, 0x01	; 1
    152e:	80 40       	sbci	r24, 0x00	; 0
    1530:	90 40       	sbci	r25, 0x00	; 0
    1532:	e1 f7       	brne	.-8      	; 0x152c <LCD0_inic+0x1e>
    1534:	00 c0       	rjmp	.+0      	; 0x1536 <LCD0_inic+0x28>
    1536:	00 00       	nop
	/***INICIALIZACAO LCD**datasheet*/
	_delay_ms(40);
	LCD0_write(0x33,INST); //function set
    1538:	60 e0       	ldi	r22, 0x00	; 0
    153a:	70 e0       	ldi	r23, 0x00	; 0
    153c:	83 e3       	ldi	r24, 0x33	; 51
    153e:	09 de       	rcall	.-1006   	; 0x1152 <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1540:	20 ed       	ldi	r18, 0xD0	; 208
    1542:	2a 95       	dec	r18
    1544:	f1 f7       	brne	.-4      	; 0x1542 <LCD0_inic+0x34>
	_delay_us(39);
	LCD0_write(0x33,INST); //function set
    1546:	60 e0       	ldi	r22, 0x00	; 0
    1548:	70 e0       	ldi	r23, 0x00	; 0
    154a:	83 e3       	ldi	r24, 0x33	; 51
    154c:	02 de       	rcall	.-1020   	; 0x1152 <LCD0_write>
    154e:	80 ed       	ldi	r24, 0xD0	; 208
    1550:	8a 95       	dec	r24
    1552:	f1 f7       	brne	.-4      	; 0x1550 <LCD0_inic+0x42>
	_delay_us(39);
	LCD0_write(0x2B,INST); //function set
    1554:	60 e0       	ldi	r22, 0x00	; 0
    1556:	70 e0       	ldi	r23, 0x00	; 0
    1558:	8b e2       	ldi	r24, 0x2B	; 43
    155a:	fb dd       	rcall	.-1034   	; 0x1152 <LCD0_write>
    155c:	95 ec       	ldi	r25, 0xC5	; 197
    155e:	9a 95       	dec	r25
    1560:	f1 f7       	brne	.-4      	; 0x155e <LCD0_inic+0x50>
    1562:	00 00       	nop
	_delay_us(37);
	LCD0_write(0x0C,INST);// display on/off control
    1564:	60 e0       	ldi	r22, 0x00	; 0
    1566:	70 e0       	ldi	r23, 0x00	; 0
    1568:	8c e0       	ldi	r24, 0x0C	; 12
    156a:	f3 dd       	rcall	.-1050   	; 0x1152 <LCD0_write>
    156c:	25 ec       	ldi	r18, 0xC5	; 197
    156e:	2a 95       	dec	r18
    1570:	f1 f7       	brne	.-4      	; 0x156e <LCD0_inic+0x60>
	_delay_us(37);
	LCD0_write(0x01,INST);// clear display
    1572:	00 00       	nop
    1574:	60 e0       	ldi	r22, 0x00	; 0
    1576:	70 e0       	ldi	r23, 0x00	; 0
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	eb dd       	rcall	.-1066   	; 0x1152 <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    157c:	87 ee       	ldi	r24, 0xE7	; 231
    157e:	97 e1       	ldi	r25, 0x17	; 23
    1580:	01 97       	sbiw	r24, 0x01	; 1
    1582:	f1 f7       	brne	.-4      	; 0x1580 <LCD0_inic+0x72>
    1584:	00 c0       	rjmp	.+0      	; 0x1586 <LCD0_inic+0x78>
	_delay_ms(1.53);
	LCD0_write(0x06,INST);// entry mode set (crazy settings)
    1586:	00 00       	nop
    1588:	60 e0       	ldi	r22, 0x00	; 0
    158a:	70 e0       	ldi	r23, 0x00	; 0
    158c:	86 e0       	ldi	r24, 0x06	; 6
    158e:	e1 dd       	rcall	.-1086   	; 0x1152 <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1590:	95 ec       	ldi	r25, 0xC5	; 197
    1592:	9a 95       	dec	r25
    1594:	f1 f7       	brne	.-4      	; 0x1592 <LCD0_inic+0x84>
    1596:	00 00       	nop
    1598:	08 95       	ret

0000159a <LCD0enable>:
unsigned int LCD_ticks(unsigned int num);
/*
** procedure and function
*/
LCD0 LCD0enable(volatile uint8_t *ddr, volatile uint8_t *pin, volatile uint8_t *port)
{
    159a:	1f 93       	push	r17
    159c:	cf 93       	push	r28
    159e:	df 93       	push	r29
    15a0:	ec 01       	movw	r28, r24
	//LOCAL VARIABLES
	uint8_t tSREG;
	tSREG=SREG;
    15a2:	1f b7       	in	r17, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    15a4:	8f b7       	in	r24, 0x3f	; 63
    15a6:	8f 77       	andi	r24, 0x7F	; 127
    15a8:	8f bf       	out	0x3f, r24	; 63
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	LCD0 lcd0;
	//import parametros
	lcd0_DDR=ddr;
    15aa:	70 93 e1 02 	sts	0x02E1, r23	; 0x8002e1 <lcd0_DDR+0x1>
    15ae:	60 93 e0 02 	sts	0x02E0, r22	; 0x8002e0 <lcd0_DDR>
	lcd0_PIN=pin;
    15b2:	50 93 da 02 	sts	0x02DA, r21	; 0x8002da <lcd0_PIN+0x1>
    15b6:	40 93 d9 02 	sts	0x02D9, r20	; 0x8002d9 <lcd0_PIN>
	lcd0_PORT=port;
    15ba:	30 93 e4 02 	sts	0x02E4, r19	; 0x8002e4 <lcd0_PORT+0x1>
    15be:	20 93 e3 02 	sts	0x02E3, r18	; 0x8002e3 <lcd0_PORT>
	//inic variables
	*lcd0_DDR=0x00;
    15c2:	fb 01       	movw	r30, r22
    15c4:	10 82       	st	Z, r1
	*lcd0_PORT=0xFF;
    15c6:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <lcd0_PORT>
    15ca:	f0 91 e4 02 	lds	r31, 0x02E4	; 0x8002e4 <lcd0_PORT+0x1>
    15ce:	8f ef       	ldi	r24, 0xFF	; 255
    15d0:	80 83       	st	Z, r24
	lcd0_detect=*lcd0_PIN & (1<<NC);
    15d2:	e0 91 d9 02 	lds	r30, 0x02D9	; 0x8002d9 <lcd0_PIN>
    15d6:	f0 91 da 02 	lds	r31, 0x02DA	; 0x8002da <lcd0_PIN+0x1>
    15da:	80 81       	ld	r24, Z
    15dc:	88 70       	andi	r24, 0x08	; 8
    15de:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <lcd0_detect>
	lcd0.hspace=LCD0_hspace;
	lcd0.clear=LCD0_clear;
	lcd0.gotoxy=LCD0_gotoxy;
	lcd0.reboot=LCD0_reboot;
	//LCD INIC
	LCD0_inic();
    15e2:	95 df       	rcall	.-214    	; 0x150e <LCD0_inic>
	SREG=tSREG;
    15e4:	1f bf       	out	0x3f, r17	; 63
	//
	return lcd0;
    15e6:	89 ea       	ldi	r24, 0xA9	; 169
    15e8:	98 e0       	ldi	r25, 0x08	; 8
    15ea:	99 83       	std	Y+1, r25	; 0x01
    15ec:	88 83       	st	Y, r24
    15ee:	8d e6       	ldi	r24, 0x6D	; 109
    15f0:	99 e0       	ldi	r25, 0x09	; 9
    15f2:	9b 83       	std	Y+3, r25	; 0x03
    15f4:	8a 83       	std	Y+2, r24	; 0x02
    15f6:	88 ee       	ldi	r24, 0xE8	; 232
    15f8:	99 e0       	ldi	r25, 0x09	; 9
    15fa:	9d 83       	std	Y+5, r25	; 0x05
    15fc:	8c 83       	std	Y+4, r24	; 0x04
    15fe:	8a ef       	ldi	r24, 0xFA	; 250
    1600:	99 e0       	ldi	r25, 0x09	; 9
    1602:	9f 83       	std	Y+7, r25	; 0x07
    1604:	8e 83       	std	Y+6, r24	; 0x06
    1606:	8f ef       	ldi	r24, 0xFF	; 255
    1608:	99 e0       	ldi	r25, 0x09	; 9
    160a:	99 87       	std	Y+9, r25	; 0x09
    160c:	88 87       	std	Y+8, r24	; 0x08
    160e:	88 e0       	ldi	r24, 0x08	; 8
    1610:	9a e0       	ldi	r25, 0x0A	; 10
    1612:	9b 87       	std	Y+11, r25	; 0x0b
    1614:	8a 87       	std	Y+10, r24	; 0x0a
    1616:	89 e1       	ldi	r24, 0x19	; 25
    1618:	9a e0       	ldi	r25, 0x0A	; 10
    161a:	9d 87       	std	Y+13, r25	; 0x0d
    161c:	8c 87       	std	Y+12, r24	; 0x0c
    161e:	88 e4       	ldi	r24, 0x48	; 72
    1620:	9a e0       	ldi	r25, 0x0A	; 10
    1622:	9f 87       	std	Y+15, r25	; 0x0f
    1624:	8e 87       	std	Y+14, r24	; 0x0e
    1626:	8c e7       	ldi	r24, 0x7C	; 124
    1628:	9a e0       	ldi	r25, 0x0A	; 10
    162a:	99 8b       	std	Y+17, r25	; 0x11
    162c:	88 8b       	std	Y+16, r24	; 0x10
    162e:	85 e5       	ldi	r24, 0x55	; 85
    1630:	9a e0       	ldi	r25, 0x0A	; 10
    1632:	9b 8b       	std	Y+19, r25	; 0x13
    1634:	8a 8b       	std	Y+18, r24	; 0x12
    1636:	84 e2       	ldi	r24, 0x24	; 36
    1638:	9b e0       	ldi	r25, 0x0B	; 11
    163a:	9d 8b       	std	Y+21, r25	; 0x15
    163c:	8c 8b       	std	Y+20, r24	; 0x14
}
    163e:	ce 01       	movw	r24, r28
    1640:	df 91       	pop	r29
    1642:	cf 91       	pop	r28
    1644:	1f 91       	pop	r17
    1646:	08 95       	ret

00001648 <LCD0_reboot>:
	*lcd0_PORT|=(1<<EN);
	LCD_ticks(num);
	*lcd0_PORT&=~(1<<EN);
}
void LCD0_reboot(void)
{
    1648:	cf 93       	push	r28
	//low high detect pin NC
	uint8_t i;
	uint8_t tmp;
	tmp=*lcd0_PIN & (1<<NC);
    164a:	e0 91 d9 02 	lds	r30, 0x02D9	; 0x8002d9 <lcd0_PIN>
    164e:	f0 91 da 02 	lds	r31, 0x02DA	; 0x8002da <lcd0_PIN+0x1>
    1652:	c0 81       	ld	r28, Z
    1654:	c8 70       	andi	r28, 0x08	; 8
	i=tmp^lcd0_detect;
    1656:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <lcd0_detect>
    165a:	8c 27       	eor	r24, r28
	i&=tmp;
	if(i)
    165c:	8c 23       	and	r24, r28
    165e:	09 f0       	breq	.+2      	; 0x1662 <LCD0_reboot+0x1a>
		LCD0_inic();
    1660:	56 df       	rcall	.-340    	; 0x150e <LCD0_inic>
	lcd0_detect=tmp;
    1662:	c0 93 e2 02 	sts	0x02E2, r28	; 0x8002e2 <lcd0_detect>
}
    1666:	cf 91       	pop	r28
    1668:	08 95       	ret

0000166a <PCF8563RTC_Init>:
	I2C_Write(var_day_u8);			      // Write date on RAM address 04H
	I2C_Write(var_weekday_u8);
	I2C_Write(var_month_u8);			  // Write month on RAM address 05H
	I2C_Write(var_year_u8);			      // Write year on RAM address 06h
	I2C_Stop();				              // Stop I2C communication after Setting the Date
}
    166a:	d7 dc       	rcall	.-1618   	; 0x101a <I2C_Init>
    166c:	15 dd       	rcall	.-1494   	; 0x1098 <I2C_Start>
    166e:	82 ea       	ldi	r24, 0xA2	; 162
    1670:	36 dd       	rcall	.-1428   	; 0x10de <I2C_Write>
    1672:	80 e0       	ldi	r24, 0x00	; 0
    1674:	34 dd       	rcall	.-1432   	; 0x10de <I2C_Write>
    1676:	80 e0       	ldi	r24, 0x00	; 0
    1678:	32 dd       	rcall	.-1436   	; 0x10de <I2C_Write>
    167a:	27 cd       	rjmp	.-1458   	; 0x10ca <I2C_Stop>
    167c:	08 95       	ret

0000167e <PCF8563RTC_SetClkOut>:
    167e:	cf 93       	push	r28
    1680:	88 23       	and	r24, r24
    1682:	21 f0       	breq	.+8      	; 0x168c <PCF8563RTC_SetClkOut+0xe>
    1684:	63 70       	andi	r22, 0x03	; 3
    1686:	c6 2f       	mov	r28, r22
    1688:	c0 68       	ori	r28, 0x80	; 128
    168a:	01 c0       	rjmp	.+2      	; 0x168e <PCF8563RTC_SetClkOut+0x10>
    168c:	c0 e0       	ldi	r28, 0x00	; 0
    168e:	04 dd       	rcall	.-1528   	; 0x1098 <I2C_Start>
    1690:	82 ea       	ldi	r24, 0xA2	; 162
    1692:	25 dd       	rcall	.-1462   	; 0x10de <I2C_Write>
    1694:	8d e0       	ldi	r24, 0x0D	; 13
    1696:	23 dd       	rcall	.-1466   	; 0x10de <I2C_Write>
    1698:	8c 2f       	mov	r24, r28
    169a:	21 dd       	rcall	.-1470   	; 0x10de <I2C_Write>
    169c:	16 dd       	rcall	.-1492   	; 0x10ca <I2C_Stop>
    169e:	cf 91       	pop	r28
    16a0:	08 95       	ret

000016a2 <PCF8563RTC_GetTime>:

	Note: The time read from PCF8563 will be of BCD format, 
	      like 0x12,0x39,0x26 for 12hr,39min and 26sec.	
***************************************************************************************************/
struct time PCF8563RTC_GetTime(void)
{
    16a2:	1f 93       	push	r17
    16a4:	cf 93       	push	r28
    16a6:	df 93       	push	r29
	struct time result;
	I2C_Start();							// Start I2C communication
    16a8:	f7 dc       	rcall	.-1554   	; 0x1098 <I2C_Start>
	I2C_Write(PCF8563WriteMode_U8);			// connect to PCF8563 by sending its ID on I2c Bus
    16aa:	82 ea       	ldi	r24, 0xA2	; 162
    16ac:	18 dd       	rcall	.-1488   	; 0x10de <I2C_Write>
	I2C_Write(PCF8563SecondRegAddress_U8);	// Request Sec RAM address at 00H
    16ae:	82 e0       	ldi	r24, 0x02	; 2
	I2C_Stop();								// Stop I2C communication after selecting Sec Register
    16b0:	16 dd       	rcall	.-1492   	; 0x10de <I2C_Write>
	I2C_Start();							// Start I2C communication
    16b2:	0b dd       	rcall	.-1514   	; 0x10ca <I2C_Stop>
	I2C_Write(PCF8563ReadMode_U8);			// connect to PCF8563(Read mode) by sending its ID
    16b4:	f1 dc       	rcall	.-1566   	; 0x1098 <I2C_Start>
    16b6:	83 ea       	ldi	r24, 0xA3	; 163
	result.VL_seconds = I2C_Read(1) & ~0x80;		// read second and return Positive ACK
    16b8:	12 dd       	rcall	.-1500   	; 0x10de <I2C_Write>
    16ba:	81 e0       	ldi	r24, 0x01	; 1
    16bc:	2b dd       	rcall	.-1450   	; 0x1114 <I2C_Read>
	result.minutes = I2C_Read(1) & ~0x80;			// read minute and return Positive ACK
    16be:	18 2f       	mov	r17, r24
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	28 dd       	rcall	.-1456   	; 0x1114 <I2C_Read>
    16c4:	c8 2f       	mov	r28, r24
	result.hours = I2C_Read(0) & ~0xC0;				// read hour and return Negative/No ACK
    16c6:	80 e0       	ldi	r24, 0x00	; 0
    16c8:	25 dd       	rcall	.-1462   	; 0x1114 <I2C_Read>
    16ca:	d8 2f       	mov	r29, r24
    16cc:	fe dc       	rcall	.-1540   	; 0x10ca <I2C_Stop>
	//dump = I2C_Read(0);					// dump last to ensure prior ok
	I2C_Stop();								// Stop I2C communication after reading the Time
    16ce:	6d 2f       	mov	r22, r29
    16d0:	6f 73       	andi	r22, 0x3F	; 63
	return result;
    16d2:	7c 2f       	mov	r23, r28
    16d4:	7f 77       	andi	r23, 0x7F	; 127
    16d6:	81 2f       	mov	r24, r17
    16d8:	8f 77       	andi	r24, 0x7F	; 127
}
    16da:	df 91       	pop	r29
    16dc:	cf 91       	pop	r28
    16de:	1f 91       	pop	r17
    16e0:	08 95       	ret

000016e2 <PCF8563RTC_GetDate>:
    16e2:	0f 93       	push	r16
    16e4:	1f 93       	push	r17

	Note: The date read from PCF8563 will be of BCD format, 
	      like 0x15,0x08,0x47 for 15th day,8th month and 47th year.  
***************************************************************************************************/
struct date PCF8563RTC_GetDate(void)
{
    16e6:	cf 93       	push	r28
    16e8:	df 93       	push	r29
	struct date result;
	I2C_Start();							// Start I2C communication
    16ea:	d6 dc       	rcall	.-1620   	; 0x1098 <I2C_Start>
	I2C_Write(PCF8563WriteMode_U8);			// connect to PCF8563 by sending its ID on I2c Bus
    16ec:	82 ea       	ldi	r24, 0xA2	; 162
    16ee:	f7 dc       	rcall	.-1554   	; 0x10de <I2C_Write>
	I2C_Write(PCF8563DateRegAddress_U8);	// Request DAY RAM address at 04H
    16f0:	85 e0       	ldi	r24, 0x05	; 5
	I2C_Stop();								// Stop I2C communication after selecting DAY Register
    16f2:	f5 dc       	rcall	.-1558   	; 0x10de <I2C_Write>
	I2C_Start();							// Start I2C communication
    16f4:	ea dc       	rcall	.-1580   	; 0x10ca <I2C_Stop>
	I2C_Write(PCF8563ReadMode_U8);			// connect to PCF8563 (Read mode) by sending its ID
    16f6:	d0 dc       	rcall	.-1632   	; 0x1098 <I2C_Start>
    16f8:	83 ea       	ldi	r24, 0xA3	; 163
	result.days = I2C_Read(1) & ~0xC0;				// read Day and return Positive ACK
    16fa:	f1 dc       	rcall	.-1566   	; 0x10de <I2C_Write>
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	0a dd       	rcall	.-1516   	; 0x1114 <I2C_Read>
	result.weekdays = I2C_Read(1) & ~0xF8;			// read Month and return Positive ACK
    1700:	d8 2f       	mov	r29, r24
    1702:	81 e0       	ldi	r24, 0x01	; 1
	result.century_months = I2C_Read(1) & ~0xE0;
    1704:	07 dd       	rcall	.-1522   	; 0x1114 <I2C_Read>
    1706:	18 2f       	mov	r17, r24
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	04 dd       	rcall	.-1528   	; 0x1114 <I2C_Read>
	result.years = I2C_Read(0);				// read Year and return Negative/No ACK
    170c:	c8 2f       	mov	r28, r24
    170e:	80 e0       	ldi	r24, 0x00	; 0
    1710:	01 dd       	rcall	.-1534   	; 0x1114 <I2C_Read>
    1712:	08 2f       	mov	r16, r24
	//dump = I2C_Read(0);
	I2C_Stop();								// Stop I2C communication after reading the Date
    1714:	da dc       	rcall	.-1612   	; 0x10ca <I2C_Stop>
    1716:	7c 2f       	mov	r23, r28
	return result;
    1718:	7f 71       	andi	r23, 0x1F	; 31
    171a:	60 2f       	mov	r22, r16
}
    171c:	81 2f       	mov	r24, r17
    171e:	87 70       	andi	r24, 0x07	; 7
    1720:	9d 2f       	mov	r25, r29
    1722:	9f 73       	andi	r25, 0x3F	; 63
    1724:	df 91       	pop	r29
    1726:	cf 91       	pop	r28
    1728:	1f 91       	pop	r17
    172a:	0f 91       	pop	r16
    172c:	08 95       	ret

0000172e <PCF8563RTC_bcd2dec>:
    172e:	98 2f       	mov	r25, r24
 * Return value	: uint8_t
 * description  : bcd to dec
***************************************************************************************************/
uint8_t PCF8563RTC_bcd2dec(uint8_t num)
{
	return ((num/16 * 10) + (num % 16));
    1730:	92 95       	swap	r25
    1732:	9f 70       	andi	r25, 0x0F	; 15
    1734:	99 0f       	add	r25, r25
    1736:	29 2f       	mov	r18, r25
    1738:	22 0f       	add	r18, r18
    173a:	22 0f       	add	r18, r18
    173c:	92 0f       	add	r25, r18
    173e:	8f 70       	andi	r24, 0x0F	; 15
}
    1740:	89 0f       	add	r24, r25
    1742:	08 95       	ret

00001744 <main>:
/***Global Variable***/
struct time tmp;
struct date dt;
/***MAIN_MAIN***/
int main(void)
{
    1744:	cf 93       	push	r28
    1746:	df 93       	push	r29
    1748:	cd b7       	in	r28, 0x3d	; 61
    174a:	de b7       	in	r29, 0x3e	; 62
    174c:	c6 56       	subi	r28, 0x66	; 102
    174e:	d1 09       	sbc	r29, r1
    1750:	0f b6       	in	r0, 0x3f	; 63
    1752:	f8 94       	cli
    1754:	de bf       	out	0x3e, r29	; 62
    1756:	0f be       	out	0x3f, r0	; 63
    1758:	cd bf       	out	0x3d, r28	; 61
	//uint8_t i;
	LCD0 lcd = LCD0enable(&DDRA,&PINA,&PORTA);
    175a:	2b e3       	ldi	r18, 0x3B	; 59
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	49 e3       	ldi	r20, 0x39	; 57
    1760:	50 e0       	ldi	r21, 0x00	; 0
    1762:	6a e3       	ldi	r22, 0x3A	; 58
    1764:	70 e0       	ldi	r23, 0x00	; 0
    1766:	ce 01       	movw	r24, r28
    1768:	01 96       	adiw	r24, 0x01	; 1
    176a:	17 df       	rcall	.-466    	; 0x159a <LCD0enable>
    176c:	af 80       	ldd	r10, Y+7	; 0x07
    176e:	b8 84       	ldd	r11, Y+8	; 0x08
    1770:	ed 84       	ldd	r14, Y+13	; 0x0d
    1772:	fe 84       	ldd	r15, Y+14	; 0x0e
    1774:	8b 88       	ldd	r8, Y+19	; 0x13
    1776:	9c 88       	ldd	r9, Y+20	; 0x14
	FUNC func = FUNCenable();
    1778:	ce 01       	movw	r24, r28
    177a:	47 96       	adiw	r24, 0x17	; 23
    177c:	a7 db       	rcall	.-2226   	; 0xecc <FUNCenable>
    177e:	c9 ac       	ldd	r12, Y+57	; 0x39
    1780:	da ac       	ldd	r13, Y+58	; 0x3a
	HC595 shift = HC595enable(&DDRG,&PORTG,2,0,1);
    1782:	01 e0       	ldi	r16, 0x01	; 1
    1784:	20 e0       	ldi	r18, 0x00	; 0
    1786:	42 e0       	ldi	r20, 0x02	; 2
    1788:	65 e6       	ldi	r22, 0x65	; 101
    178a:	70 e0       	ldi	r23, 0x00	; 0
    178c:	84 e6       	ldi	r24, 0x64	; 100
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <HC595enable>
    1794:	a2 96       	adiw	r28, 0x22	; 34
    1796:	2f af       	std	Y+63, r18	; 0x3f
    1798:	a2 97       	sbiw	r28, 0x22	; 34
    179a:	a3 96       	adiw	r28, 0x23	; 35
    179c:	3f af       	std	Y+63, r19	; 0x3f
    179e:	a3 97       	sbiw	r28, 0x23	; 35
    17a0:	a4 96       	adiw	r28, 0x24	; 36
    17a2:	4f af       	std	Y+63, r20	; 0x3f
    17a4:	a4 97       	sbiw	r28, 0x24	; 36
    17a6:	a5 96       	adiw	r28, 0x25	; 37
    17a8:	5f af       	std	Y+63, r21	; 0x3f
    17aa:	a5 97       	sbiw	r28, 0x25	; 37
    17ac:	a6 96       	adiw	r28, 0x26	; 38
    17ae:	6f af       	std	Y+63, r22	; 0x3f
    17b0:	a6 97       	sbiw	r28, 0x26	; 38
    17b2:	a7 96       	adiw	r28, 0x27	; 39
    17b4:	7f af       	std	Y+63, r23	; 0x3f
    17b6:	a7 97       	sbiw	r28, 0x27	; 39
    17b8:	a3 96       	adiw	r28, 0x23	; 35
    17ba:	4e ac       	ldd	r4, Y+62	; 0x3e
    17bc:	5f ac       	ldd	r5, Y+63	; 0x3f
    17be:	a3 97       	sbiw	r28, 0x23	; 35
    17c0:	a7 96       	adiw	r28, 0x27	; 39
    17c2:	2e ac       	ldd	r2, Y+62	; 0x3e
    17c4:	3f ac       	ldd	r3, Y+63	; 0x3f
    17c6:	a7 97       	sbiw	r28, 0x27	; 39
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    17c8:	2f ef       	ldi	r18, 0xFF	; 255
    17ca:	81 ee       	ldi	r24, 0xE1	; 225
    17cc:	94 e0       	ldi	r25, 0x04	; 4
    17ce:	21 50       	subi	r18, 0x01	; 1
    17d0:	80 40       	sbci	r24, 0x00	; 0
    17d2:	90 40       	sbci	r25, 0x00	; 0
    17d4:	e1 f7       	brne	.-8      	; 0x17ce <main+0x8a>
    17d6:	00 c0       	rjmp	.+0      	; 0x17d8 <main+0x94>
	_delay_ms(100);
    PCF8563RTC_Init(64);
    17d8:	00 00       	nop
    17da:	80 e4       	ldi	r24, 0x40	; 64
    //PCF8563RTC_SetTime(0x23,0x50,0x00);  //  23:59:20 am
    //PCF8563RTC_SetDate(0x10,0x00,0x10,0x19);
	PCF8563RTC_SetClkOut(1, 2);
    17dc:	46 df       	rcall	.-372    	; 0x166a <PCF8563RTC_Init>
    17de:	62 e0       	ldi	r22, 0x02	; 2
    17e0:	81 e0       	ldi	r24, 0x01	; 1
    17e2:	4d df       	rcall	.-358    	; 0x167e <PCF8563RTC_SetClkOut>
		lcd.string_size("start",5);
		
		/* Read the Time from RTC(PCF8563) */ 
		tmp=PCF8563RTC_GetTime();
		lcd.gotoxy(1,0);
		lcd.string_size(func.ui16toa(PCF8563RTC_bcd2dec(tmp.hours)),2);
    17e4:	07 ee       	ldi	r16, 0xE7	; 231
    17e6:	12 e0       	ldi	r17, 0x02	; 2
		lcd.hspace(7);
		lcd.string_size(func.ui16toa(tmp.VL_seconds),2);
		
		dt=PCF8563RTC_GetDate();
		lcd.gotoxy(2,0);
		lcd.string_size(func.ui16toa(PCF8563RTC_bcd2dec(dt.days)),2);
    17e8:	0f 2e       	mov	r0, r31
    17ea:	fa ee       	ldi	r31, 0xEA	; 234
    17ec:	6f 2e       	mov	r6, r31
    17ee:	f2 e0       	ldi	r31, 0x02	; 2
    17f0:	7f 2e       	mov	r7, r31
    17f2:	f0 2d       	mov	r31, r0
    //PCF8563RTC_SetDate(0x10,0x00,0x10,0x19);
	PCF8563RTC_SetClkOut(1, 2);
	/* Replace with your application code */
	while (1)
    {
		lcd.reboot();
    17f4:	ed 89       	ldd	r30, Y+21	; 0x15
    17f6:	fe 89       	ldd	r31, Y+22	; 0x16
    17f8:	09 95       	icall
		
		lcd.gotoxy(0,0);
    17fa:	60 e0       	ldi	r22, 0x00	; 0
    17fc:	70 e0       	ldi	r23, 0x00	; 0
    17fe:	80 e0       	ldi	r24, 0x00	; 0
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	f4 01       	movw	r30, r8
    1804:	09 95       	icall
		lcd.string_size("start",5);
    1806:	65 e0       	ldi	r22, 0x05	; 5
    1808:	80 e0       	ldi	r24, 0x00	; 0
    180a:	91 e0       	ldi	r25, 0x01	; 1
    180c:	f7 01       	movw	r30, r14
		
		/* Read the Time from RTC(PCF8563) */ 
		tmp=PCF8563RTC_GetTime();
    180e:	09 95       	icall
    1810:	48 df       	rcall	.-368    	; 0x16a2 <PCF8563RTC_GetTime>
    1812:	60 93 e7 02 	sts	0x02E7, r22	; 0x8002e7 <tmp>
    1816:	70 93 e8 02 	sts	0x02E8, r23	; 0x8002e8 <tmp+0x1>
    181a:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <tmp+0x2>
		lcd.gotoxy(1,0);
    181e:	60 e0       	ldi	r22, 0x00	; 0
    1820:	70 e0       	ldi	r23, 0x00	; 0
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	f4 01       	movw	r30, r8
		lcd.string_size(func.ui16toa(PCF8563RTC_bcd2dec(tmp.hours)),2);
    1828:	09 95       	icall
    182a:	f8 01       	movw	r30, r16
    182c:	80 81       	ld	r24, Z
    182e:	7f df       	rcall	.-258    	; 0x172e <PCF8563RTC_bcd2dec>
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	f6 01       	movw	r30, r12
    1834:	09 95       	icall
    1836:	62 e0       	ldi	r22, 0x02	; 2
    1838:	f7 01       	movw	r30, r14
		lcd.putch(':');
    183a:	09 95       	icall
    183c:	8a e3       	ldi	r24, 0x3A	; 58
    183e:	f5 01       	movw	r30, r10
		lcd.string_size(func.ui16toa(PCF8563RTC_bcd2dec(tmp.minutes)),2);
    1840:	09 95       	icall
    1842:	f8 01       	movw	r30, r16
    1844:	81 81       	ldd	r24, Z+1	; 0x01
    1846:	73 df       	rcall	.-282    	; 0x172e <PCF8563RTC_bcd2dec>
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	f6 01       	movw	r30, r12
    184c:	09 95       	icall
    184e:	62 e0       	ldi	r22, 0x02	; 2
    1850:	f7 01       	movw	r30, r14
		lcd.putch(':');
    1852:	09 95       	icall
    1854:	8a e3       	ldi	r24, 0x3A	; 58
    1856:	f5 01       	movw	r30, r10
		lcd.string_size(func.ui16toa(PCF8563RTC_bcd2dec(tmp.VL_seconds)),2);
    1858:	09 95       	icall
    185a:	f8 01       	movw	r30, r16
    185c:	82 81       	ldd	r24, Z+2	; 0x02
    185e:	67 df       	rcall	.-306    	; 0x172e <PCF8563RTC_bcd2dec>
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	f6 01       	movw	r30, r12
    1864:	09 95       	icall
    1866:	62 e0       	ldi	r22, 0x02	; 2
    1868:	f7 01       	movw	r30, r14
    186a:	09 95       	icall
		lcd.hspace(7);
    186c:	ef 85       	ldd	r30, Y+15	; 0x0f
    186e:	f8 89       	ldd	r31, Y+16	; 0x10
    1870:	87 e0       	ldi	r24, 0x07	; 7
    1872:	09 95       	icall
		lcd.string_size(func.ui16toa(tmp.VL_seconds),2);
    1874:	f8 01       	movw	r30, r16
    1876:	82 81       	ldd	r24, Z+2	; 0x02
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	f6 01       	movw	r30, r12
    187c:	09 95       	icall
    187e:	62 e0       	ldi	r22, 0x02	; 2
    1880:	f7 01       	movw	r30, r14
		
		dt=PCF8563RTC_GetDate();
    1882:	09 95       	icall
    1884:	2e df       	rcall	.-420    	; 0x16e2 <PCF8563RTC_GetDate>
    1886:	60 93 ea 02 	sts	0x02EA, r22	; 0x8002ea <dt>
    188a:	70 93 eb 02 	sts	0x02EB, r23	; 0x8002eb <dt+0x1>
    188e:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <dt+0x2>
    1892:	90 93 ed 02 	sts	0x02ED, r25	; 0x8002ed <dt+0x3>
		lcd.gotoxy(2,0);
    1896:	60 e0       	ldi	r22, 0x00	; 0
    1898:	70 e0       	ldi	r23, 0x00	; 0
    189a:	82 e0       	ldi	r24, 0x02	; 2
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	f4 01       	movw	r30, r8
		lcd.string_size(func.ui16toa(PCF8563RTC_bcd2dec(dt.days)),2);
    18a0:	09 95       	icall
    18a2:	f3 01       	movw	r30, r6
    18a4:	83 81       	ldd	r24, Z+3	; 0x03
    18a6:	43 df       	rcall	.-378    	; 0x172e <PCF8563RTC_bcd2dec>
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	f6 01       	movw	r30, r12
    18ac:	09 95       	icall
    18ae:	62 e0       	ldi	r22, 0x02	; 2
    18b0:	f7 01       	movw	r30, r14
		//lcd.putch(':');
		//lcd.string_size(func.ui16toa(PCF8563RTC_bcd2dec(dt.weekdays & ~0xF8)),2);
		lcd.putch(':');
    18b2:	09 95       	icall
    18b4:	8a e3       	ldi	r24, 0x3A	; 58
    18b6:	f5 01       	movw	r30, r10
		lcd.string_size(func.ui16toa(PCF8563RTC_bcd2dec(dt.century_months & ~0xE0)),2);
    18b8:	09 95       	icall
    18ba:	f3 01       	movw	r30, r6
    18bc:	81 81       	ldd	r24, Z+1	; 0x01
    18be:	8f 71       	andi	r24, 0x1F	; 31
    18c0:	36 df       	rcall	.-404    	; 0x172e <PCF8563RTC_bcd2dec>
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	f6 01       	movw	r30, r12
    18c6:	09 95       	icall
    18c8:	62 e0       	ldi	r22, 0x02	; 2
    18ca:	f7 01       	movw	r30, r14
		lcd.putch(':');
    18cc:	09 95       	icall
    18ce:	8a e3       	ldi	r24, 0x3A	; 58
    18d0:	f5 01       	movw	r30, r10
		lcd.string_size(func.ui16toa(PCF8563RTC_bcd2dec(dt.years)),2);
    18d2:	09 95       	icall
    18d4:	f3 01       	movw	r30, r6
    18d6:	80 81       	ld	r24, Z
    18d8:	2a df       	rcall	.-428    	; 0x172e <PCF8563RTC_bcd2dec>
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	f6 01       	movw	r30, r12
    18de:	09 95       	icall
    18e0:	62 e0       	ldi	r22, 0x02	; 2
    18e2:	f7 01       	movw	r30, r14
    18e4:	09 95       	icall
		
			shift.bit(0);
    18e6:	80 e0       	ldi	r24, 0x00	; 0
    18e8:	f2 01       	movw	r30, r4
    18ea:	09 95       	icall
			shift.out();
    18ec:	f1 01       	movw	r30, r2
    18ee:	09 95       	icall
    18f0:	ff ef       	ldi	r31, 0xFF	; 255
    18f2:	20 e7       	ldi	r18, 0x70	; 112
    18f4:	82 e0       	ldi	r24, 0x02	; 2
    18f6:	f1 50       	subi	r31, 0x01	; 1
    18f8:	20 40       	sbci	r18, 0x00	; 0
    18fa:	80 40       	sbci	r24, 0x00	; 0
    18fc:	e1 f7       	brne	.-8      	; 0x18f6 <main+0x1b2>
    18fe:	00 c0       	rjmp	.+0      	; 0x1900 <main+0x1bc>
    1900:	00 00       	nop
			_delay_ms(50);
			shift.bit(1);
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	f2 01       	movw	r30, r4
    1906:	09 95       	icall
			shift.out();
    1908:	f1 01       	movw	r30, r2
    190a:	09 95       	icall
    190c:	ff ef       	ldi	r31, 0xFF	; 255
    190e:	20 e7       	ldi	r18, 0x70	; 112
    1910:	82 e0       	ldi	r24, 0x02	; 2
    1912:	f1 50       	subi	r31, 0x01	; 1
    1914:	20 40       	sbci	r18, 0x00	; 0
    1916:	80 40       	sbci	r24, 0x00	; 0
    1918:	e1 f7       	brne	.-8      	; 0x1912 <main+0x1ce>
    191a:	00 c0       	rjmp	.+0      	; 0x191c <main+0x1d8>
    191c:	00 00       	nop
    191e:	6a cf       	rjmp	.-300    	; 0x17f4 <main+0xb0>

00001920 <__mulsi3>:
    1920:	db 01       	movw	r26, r22
    1922:	8f 93       	push	r24
    1924:	9f 93       	push	r25
    1926:	7f d0       	rcall	.+254    	; 0x1a26 <__muluhisi3>
    1928:	bf 91       	pop	r27
    192a:	af 91       	pop	r26
    192c:	a2 9f       	mul	r26, r18
    192e:	80 0d       	add	r24, r0
    1930:	91 1d       	adc	r25, r1
    1932:	a3 9f       	mul	r26, r19
    1934:	90 0d       	add	r25, r0
    1936:	b2 9f       	mul	r27, r18
    1938:	90 0d       	add	r25, r0
    193a:	11 24       	eor	r1, r1
    193c:	08 95       	ret

0000193e <__udivmodhi4>:
    193e:	aa 1b       	sub	r26, r26
    1940:	bb 1b       	sub	r27, r27
    1942:	51 e1       	ldi	r21, 0x11	; 17
    1944:	07 c0       	rjmp	.+14     	; 0x1954 <__udivmodhi4_ep>

00001946 <__udivmodhi4_loop>:
    1946:	aa 1f       	adc	r26, r26
    1948:	bb 1f       	adc	r27, r27
    194a:	a6 17       	cp	r26, r22
    194c:	b7 07       	cpc	r27, r23
    194e:	10 f0       	brcs	.+4      	; 0x1954 <__udivmodhi4_ep>
    1950:	a6 1b       	sub	r26, r22
    1952:	b7 0b       	sbc	r27, r23

00001954 <__udivmodhi4_ep>:
    1954:	88 1f       	adc	r24, r24
    1956:	99 1f       	adc	r25, r25
    1958:	5a 95       	dec	r21
    195a:	a9 f7       	brne	.-22     	; 0x1946 <__udivmodhi4_loop>
    195c:	80 95       	com	r24
    195e:	90 95       	com	r25
    1960:	bc 01       	movw	r22, r24
    1962:	cd 01       	movw	r24, r26
    1964:	08 95       	ret

00001966 <__divmodhi4>:
    1966:	97 fb       	bst	r25, 7
    1968:	07 2e       	mov	r0, r23
    196a:	16 f4       	brtc	.+4      	; 0x1970 <__divmodhi4+0xa>
    196c:	00 94       	com	r0
    196e:	06 d0       	rcall	.+12     	; 0x197c <__divmodhi4_neg1>
    1970:	77 fd       	sbrc	r23, 7
    1972:	08 d0       	rcall	.+16     	; 0x1984 <__divmodhi4_neg2>
    1974:	e4 df       	rcall	.-56     	; 0x193e <__udivmodhi4>
    1976:	07 fc       	sbrc	r0, 7
    1978:	05 d0       	rcall	.+10     	; 0x1984 <__divmodhi4_neg2>
    197a:	3e f4       	brtc	.+14     	; 0x198a <__divmodhi4_exit>

0000197c <__divmodhi4_neg1>:
    197c:	90 95       	com	r25
    197e:	81 95       	neg	r24
    1980:	9f 4f       	sbci	r25, 0xFF	; 255
    1982:	08 95       	ret

00001984 <__divmodhi4_neg2>:
    1984:	70 95       	com	r23
    1986:	61 95       	neg	r22
    1988:	7f 4f       	sbci	r23, 0xFF	; 255

0000198a <__divmodhi4_exit>:
    198a:	08 95       	ret

0000198c <__udivmodsi4>:
    198c:	a1 e2       	ldi	r26, 0x21	; 33
    198e:	1a 2e       	mov	r1, r26
    1990:	aa 1b       	sub	r26, r26
    1992:	bb 1b       	sub	r27, r27
    1994:	fd 01       	movw	r30, r26
    1996:	0d c0       	rjmp	.+26     	; 0x19b2 <__udivmodsi4_ep>

00001998 <__udivmodsi4_loop>:
    1998:	aa 1f       	adc	r26, r26
    199a:	bb 1f       	adc	r27, r27
    199c:	ee 1f       	adc	r30, r30
    199e:	ff 1f       	adc	r31, r31
    19a0:	a2 17       	cp	r26, r18
    19a2:	b3 07       	cpc	r27, r19
    19a4:	e4 07       	cpc	r30, r20
    19a6:	f5 07       	cpc	r31, r21
    19a8:	20 f0       	brcs	.+8      	; 0x19b2 <__udivmodsi4_ep>
    19aa:	a2 1b       	sub	r26, r18
    19ac:	b3 0b       	sbc	r27, r19
    19ae:	e4 0b       	sbc	r30, r20
    19b0:	f5 0b       	sbc	r31, r21

000019b2 <__udivmodsi4_ep>:
    19b2:	66 1f       	adc	r22, r22
    19b4:	77 1f       	adc	r23, r23
    19b6:	88 1f       	adc	r24, r24
    19b8:	99 1f       	adc	r25, r25
    19ba:	1a 94       	dec	r1
    19bc:	69 f7       	brne	.-38     	; 0x1998 <__udivmodsi4_loop>
    19be:	60 95       	com	r22
    19c0:	70 95       	com	r23
    19c2:	80 95       	com	r24
    19c4:	90 95       	com	r25
    19c6:	9b 01       	movw	r18, r22
    19c8:	ac 01       	movw	r20, r24
    19ca:	bd 01       	movw	r22, r26
    19cc:	cf 01       	movw	r24, r30
    19ce:	08 95       	ret

000019d0 <__divmodsi4>:
    19d0:	05 2e       	mov	r0, r21
    19d2:	97 fb       	bst	r25, 7
    19d4:	16 f4       	brtc	.+4      	; 0x19da <__divmodsi4+0xa>
    19d6:	00 94       	com	r0
    19d8:	0f d0       	rcall	.+30     	; 0x19f8 <__negsi2>
    19da:	57 fd       	sbrc	r21, 7
    19dc:	05 d0       	rcall	.+10     	; 0x19e8 <__divmodsi4_neg2>
    19de:	d6 df       	rcall	.-84     	; 0x198c <__udivmodsi4>
    19e0:	07 fc       	sbrc	r0, 7
    19e2:	02 d0       	rcall	.+4      	; 0x19e8 <__divmodsi4_neg2>
    19e4:	46 f4       	brtc	.+16     	; 0x19f6 <__divmodsi4_exit>
    19e6:	08 c0       	rjmp	.+16     	; 0x19f8 <__negsi2>

000019e8 <__divmodsi4_neg2>:
    19e8:	50 95       	com	r21
    19ea:	40 95       	com	r20
    19ec:	30 95       	com	r19
    19ee:	21 95       	neg	r18
    19f0:	3f 4f       	sbci	r19, 0xFF	; 255
    19f2:	4f 4f       	sbci	r20, 0xFF	; 255
    19f4:	5f 4f       	sbci	r21, 0xFF	; 255

000019f6 <__divmodsi4_exit>:
    19f6:	08 95       	ret

000019f8 <__negsi2>:
    19f8:	90 95       	com	r25
    19fa:	80 95       	com	r24
    19fc:	70 95       	com	r23
    19fe:	61 95       	neg	r22
    1a00:	7f 4f       	sbci	r23, 0xFF	; 255
    1a02:	8f 4f       	sbci	r24, 0xFF	; 255
    1a04:	9f 4f       	sbci	r25, 0xFF	; 255
    1a06:	08 95       	ret

00001a08 <__umulhisi3>:
    1a08:	a2 9f       	mul	r26, r18
    1a0a:	b0 01       	movw	r22, r0
    1a0c:	b3 9f       	mul	r27, r19
    1a0e:	c0 01       	movw	r24, r0
    1a10:	a3 9f       	mul	r26, r19
    1a12:	70 0d       	add	r23, r0
    1a14:	81 1d       	adc	r24, r1
    1a16:	11 24       	eor	r1, r1
    1a18:	91 1d       	adc	r25, r1
    1a1a:	b2 9f       	mul	r27, r18
    1a1c:	70 0d       	add	r23, r0
    1a1e:	81 1d       	adc	r24, r1
    1a20:	11 24       	eor	r1, r1
    1a22:	91 1d       	adc	r25, r1
    1a24:	08 95       	ret

00001a26 <__muluhisi3>:
    1a26:	f0 df       	rcall	.-32     	; 0x1a08 <__umulhisi3>
    1a28:	a5 9f       	mul	r26, r21
    1a2a:	90 0d       	add	r25, r0
    1a2c:	b4 9f       	mul	r27, r20
    1a2e:	90 0d       	add	r25, r0
    1a30:	a4 9f       	mul	r26, r20
    1a32:	80 0d       	add	r24, r0
    1a34:	91 1d       	adc	r25, r1
    1a36:	11 24       	eor	r1, r1
    1a38:	08 95       	ret

00001a3a <_exit>:
    1a3a:	f8 94       	cli

00001a3c <__stop_program>:
    1a3c:	ff cf       	rjmp	.-2      	; 0x1a3c <__stop_program>
