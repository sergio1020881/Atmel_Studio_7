
Atmega128.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ca  00800100  00002b08  00002b9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002b08  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000112  008001ca  008001ca  00002c66  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002c66  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002c98  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000858  00000000  00000000  00002cd8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000080b5  00000000  00000000  00003530  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ea9  00000000  00000000  0000b5e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004ddc  00000000  00000000  0000d48e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001320  00000000  00000000  0001226c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000015b1  00000000  00000000  0001358c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000067f6  00000000  00000000  00014b3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000668  00000000  00000000  0001b333  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7a c0       	rjmp	.+244    	; 0xf6 <__ctors_end>
       2:	00 00       	nop
       4:	1d c1       	rjmp	.+570    	; 0x240 <__vector_1>
       6:	00 00       	nop
       8:	25 c1       	rjmp	.+586    	; 0x254 <__vector_2>
       a:	00 00       	nop
       c:	2d c1       	rjmp	.+602    	; 0x268 <__vector_3>
       e:	00 00       	nop
      10:	35 c1       	rjmp	.+618    	; 0x27c <__vector_4>
      12:	00 00       	nop
      14:	3d c1       	rjmp	.+634    	; 0x290 <__vector_5>
      16:	00 00       	nop
      18:	45 c1       	rjmp	.+650    	; 0x2a4 <__vector_6>
      1a:	00 00       	nop
      1c:	4d c1       	rjmp	.+666    	; 0x2b8 <__vector_7>
      1e:	00 00       	nop
      20:	55 c1       	rjmp	.+682    	; 0x2cc <__vector_8>
      22:	00 00       	nop
      24:	87 c0       	rjmp	.+270    	; 0x134 <__bad_interrupt>
      26:	00 00       	nop
      28:	65 c1       	rjmp	.+714    	; 0x2f4 <__vector_10>
      2a:	00 00       	nop
      2c:	6d c1       	rjmp	.+730    	; 0x308 <__vector_11>
      2e:	00 00       	nop
      30:	75 c1       	rjmp	.+746    	; 0x31c <__vector_12>
      32:	00 00       	nop
      34:	7d c1       	rjmp	.+762    	; 0x330 <__vector_13>
      36:	00 00       	nop
      38:	85 c1       	rjmp	.+778    	; 0x344 <__vector_14>
      3a:	00 00       	nop
      3c:	8d c1       	rjmp	.+794    	; 0x358 <__vector_15>
      3e:	00 00       	nop
      40:	95 c1       	rjmp	.+810    	; 0x36c <__vector_16>
      42:	00 00       	nop
      44:	4d c1       	rjmp	.+666    	; 0x2e0 <__vector_17>
      46:	00 00       	nop
      48:	e1 c1       	rjmp	.+962    	; 0x40c <__vector_18>
      4a:	00 00       	nop
      4c:	17 c2       	rjmp	.+1070   	; 0x47c <__vector_19>
      4e:	00 00       	nop
      50:	71 c0       	rjmp	.+226    	; 0x134 <__bad_interrupt>
      52:	00 00       	nop
      54:	70 c0       	rjmp	.+224    	; 0x136 <__vector_21>
      56:	00 00       	nop
      58:	6d c0       	rjmp	.+218    	; 0x134 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	6b c0       	rjmp	.+214    	; 0x134 <__bad_interrupt>
      5e:	00 00       	nop
      60:	8f c1       	rjmp	.+798    	; 0x380 <__vector_24>
      62:	00 00       	nop
      64:	97 c1       	rjmp	.+814    	; 0x394 <__vector_25>
      66:	00 00       	nop
      68:	9f c1       	rjmp	.+830    	; 0x3a8 <__vector_26>
      6a:	00 00       	nop
      6c:	a7 c1       	rjmp	.+846    	; 0x3bc <__vector_27>
      6e:	00 00       	nop
      70:	af c1       	rjmp	.+862    	; 0x3d0 <__vector_28>
      72:	00 00       	nop
      74:	b7 c1       	rjmp	.+878    	; 0x3e4 <__vector_29>
      76:	00 00       	nop
      78:	2a c2       	rjmp	.+1108   	; 0x4ce <__vector_30>
      7a:	00 00       	nop
      7c:	63 c2       	rjmp	.+1222   	; 0x544 <__vector_31>
      7e:	00 00       	nop
      80:	59 c0       	rjmp	.+178    	; 0x134 <__bad_interrupt>
      82:	00 00       	nop
      84:	b9 c1       	rjmp	.+882    	; 0x3f8 <__vector_33>
      86:	00 00       	nop
      88:	55 c0       	rjmp	.+170    	; 0x134 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6b 11       	cpse	r22, r11
      8e:	bc 11       	cpse	r27, r12
      90:	d6 11       	cpse	r29, r6
      92:	0f 12       	cpse	r0, r31
      94:	4c 12       	cpse	r4, r28
      96:	89 12       	cpse	r8, r25
      98:	1f 13       	cpse	r17, r31
      9a:	3a 13       	cpse	r19, r26
      9c:	a0 13       	cpse	r26, r16
      9e:	bb 13       	cpse	r27, r27
      a0:	fb 13       	cpse	r31, r27
      a2:	07 14       	cp	r0, r7
      a4:	13 14       	cp	r1, r3
      a6:	1f 14       	cp	r1, r15
      a8:	2b 14       	cp	r2, r11
      aa:	4e 14       	cp	r4, r14
      ac:	4e 14       	cp	r4, r14
      ae:	4e 14       	cp	r4, r14
      b0:	4e 14       	cp	r4, r14
      b2:	4e 14       	cp	r4, r14
      b4:	4e 14       	cp	r4, r14
      b6:	4e 14       	cp	r4, r14
      b8:	4e 14       	cp	r4, r14
      ba:	4e 14       	cp	r4, r14
      bc:	4e 14       	cp	r4, r14
      be:	4e 14       	cp	r4, r14
      c0:	4e 14       	cp	r4, r14
      c2:	4e 14       	cp	r4, r14
      c4:	4e 14       	cp	r4, r14
      c6:	4e 14       	cp	r4, r14
      c8:	4e 14       	cp	r4, r14
      ca:	4e 14       	cp	r4, r14
      cc:	4e 14       	cp	r4, r14
      ce:	4e 14       	cp	r4, r14
      d0:	4e 14       	cp	r4, r14
      d2:	4e 14       	cp	r4, r14
      d4:	4e 14       	cp	r4, r14
      d6:	4e 14       	cp	r4, r14
      d8:	4e 14       	cp	r4, r14
      da:	4e 14       	cp	r4, r14
      dc:	4e 14       	cp	r4, r14
      de:	4e 14       	cp	r4, r14
      e0:	4e 14       	cp	r4, r14
      e2:	4e 14       	cp	r4, r14
      e4:	4e 14       	cp	r4, r14
      e6:	4e 14       	cp	r4, r14
      e8:	4e 14       	cp	r4, r14
      ea:	4e 14       	cp	r4, r14
      ec:	4e 14       	cp	r4, r14
      ee:	4e 14       	cp	r4, r14
      f0:	4e 14       	cp	r4, r14
      f2:	37 14       	cp	r3, r7
      f4:	43 14       	cp	r4, r3

000000f6 <__ctors_end>:
      f6:	11 24       	eor	r1, r1
      f8:	1f be       	out	0x3f, r1	; 63
      fa:	cf ef       	ldi	r28, 0xFF	; 255
      fc:	d0 e1       	ldi	r29, 0x10	; 16
      fe:	de bf       	out	0x3e, r29	; 62
     100:	cd bf       	out	0x3d, r28	; 61

00000102 <__do_copy_data>:
     102:	11 e0       	ldi	r17, 0x01	; 1
     104:	a0 e0       	ldi	r26, 0x00	; 0
     106:	b1 e0       	ldi	r27, 0x01	; 1
     108:	e8 e0       	ldi	r30, 0x08	; 8
     10a:	fb e2       	ldi	r31, 0x2B	; 43
     10c:	00 e0       	ldi	r16, 0x00	; 0
     10e:	0b bf       	out	0x3b, r16	; 59
     110:	02 c0       	rjmp	.+4      	; 0x116 <__do_copy_data+0x14>
     112:	07 90       	elpm	r0, Z+
     114:	0d 92       	st	X+, r0
     116:	aa 3c       	cpi	r26, 0xCA	; 202
     118:	b1 07       	cpc	r27, r17
     11a:	d9 f7       	brne	.-10     	; 0x112 <__do_copy_data+0x10>

0000011c <__do_clear_bss>:
     11c:	22 e0       	ldi	r18, 0x02	; 2
     11e:	aa ec       	ldi	r26, 0xCA	; 202
     120:	b1 e0       	ldi	r27, 0x01	; 1
     122:	01 c0       	rjmp	.+2      	; 0x126 <.do_clear_bss_start>

00000124 <.do_clear_bss_loop>:
     124:	1d 92       	st	X+, r1

00000126 <.do_clear_bss_start>:
     126:	ac 3d       	cpi	r26, 0xDC	; 220
     128:	b2 07       	cpc	r27, r18
     12a:	e1 f7       	brne	.-8      	; 0x124 <.do_clear_bss_loop>
     12c:	0e 94 c8 10 	call	0x2190	; 0x2190 <main>
     130:	0c 94 82 15 	jmp	0x2b04	; 0x2b04 <_exit>

00000134 <__bad_interrupt>:
     134:	65 cf       	rjmp	.-310    	; 0x0 <__vectors>

00000136 <__vector_21>:
ISR(ANALOG_INTERRUPT)
/*************************************************************************
Function: ANALOG interrupt
Purpose:  Read Analog Input
**************************************************************************/
{
     136:	1f 92       	push	r1
     138:	0f 92       	push	r0
     13a:	0f b6       	in	r0, 0x3f	; 63
     13c:	0f 92       	push	r0
     13e:	11 24       	eor	r1, r1
     140:	0b b6       	in	r0, 0x3b	; 59
     142:	0f 92       	push	r0
     144:	2f 93       	push	r18
     146:	3f 93       	push	r19
     148:	8f 93       	push	r24
     14a:	9f 93       	push	r25
     14c:	ef 93       	push	r30
     14e:	ff 93       	push	r31
	/******/
	adc_tmp=ADCL;
     150:	84 b1       	in	r24, 0x04	; 4
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	90 93 cc 01 	sts	0x01CC, r25	; 0x8001cc <adc_tmp+0x1>
     158:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <adc_tmp>
	adc_tmp|=(ADCH<<8);
     15c:	25 b1       	in	r18, 0x05	; 5
     15e:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <adc_tmp>
     162:	90 91 cc 01 	lds	r25, 0x01CC	; 0x8001cc <adc_tmp+0x1>
     166:	92 2b       	or	r25, r18
     168:	90 93 cc 01 	sts	0x01CC, r25	; 0x8001cc <adc_tmp+0x1>
     16c:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <adc_tmp>
	if(adc_n_sample < (1<<ADC_NUMBER_SAMPLE)){
     170:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <__data_end>
     174:	84 30       	cpi	r24, 0x04	; 4
     176:	a0 f4       	brcc	.+40     	; 0x1a0 <__vector_21+0x6a>
		adc_n_sample++;
     178:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <__data_end>
     17c:	8f 5f       	subi	r24, 0xFF	; 255
     17e:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__data_end>
		adc_sample+=adc_tmp;
     182:	20 91 cb 01 	lds	r18, 0x01CB	; 0x8001cb <adc_tmp>
     186:	30 91 cc 01 	lds	r19, 0x01CC	; 0x8001cc <adc_tmp+0x1>
     18a:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <adc_sample>
     18e:	90 91 ce 01 	lds	r25, 0x01CE	; 0x8001ce <adc_sample+0x1>
     192:	82 0f       	add	r24, r18
     194:	93 1f       	adc	r25, r19
     196:	90 93 ce 01 	sts	0x01CE, r25	; 0x8001ce <adc_sample+0x1>
     19a:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <adc_sample>
     19e:	43 c0       	rjmp	.+134    	; 0x226 <__vector_21+0xf0>
	}else{
		ADC_VALUE[ADC_SELECTOR]=adc_sample>>ADC_NUMBER_SAMPLE;
     1a0:	e0 91 cf 01 	lds	r30, 0x01CF	; 0x8001cf <ADC_SELECTOR>
     1a4:	f0 91 d0 01 	lds	r31, 0x01D0	; 0x8001d0 <ADC_SELECTOR+0x1>
     1a8:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <adc_sample>
     1ac:	90 91 ce 01 	lds	r25, 0x01CE	; 0x8001ce <adc_sample+0x1>
     1b0:	95 95       	asr	r25
     1b2:	87 95       	ror	r24
     1b4:	95 95       	asr	r25
     1b6:	87 95       	ror	r24
     1b8:	ee 0f       	add	r30, r30
     1ba:	ff 1f       	adc	r31, r31
     1bc:	ed 51       	subi	r30, 0x1D	; 29
     1be:	fe 4f       	sbci	r31, 0xFE	; 254
     1c0:	91 83       	std	Z+1, r25	; 0x01
     1c2:	80 83       	st	Z, r24
		adc_n_sample=adc_sample=0;
     1c4:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <adc_sample+0x1>
     1c8:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <adc_sample>
     1cc:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <__data_end>
		/******/
		if(ADC_SELECTOR < ADC_N_CHANNEL)
     1d0:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <ADC_SELECTOR>
     1d4:	30 91 d0 01 	lds	r19, 0x01D0	; 0x8001d0 <ADC_SELECTOR+0x1>
     1d8:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <ADC_N_CHANNEL>
     1dc:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <ADC_N_CHANNEL+0x1>
     1e0:	28 17       	cp	r18, r24
     1e2:	39 07       	cpc	r19, r25
     1e4:	54 f4       	brge	.+20     	; 0x1fa <__vector_21+0xc4>
			ADC_SELECTOR++;
     1e6:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <ADC_SELECTOR>
     1ea:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <ADC_SELECTOR+0x1>
     1ee:	01 96       	adiw	r24, 0x01	; 1
     1f0:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <ADC_SELECTOR+0x1>
     1f4:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <ADC_SELECTOR>
     1f8:	04 c0       	rjmp	.+8      	; 0x202 <__vector_21+0xcc>
		else
			ADC_SELECTOR=0;
     1fa:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <ADC_SELECTOR+0x1>
     1fe:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <ADC_SELECTOR>
		ADC_SELECT &= ~MUX_MASK;
     202:	87 b1       	in	r24, 0x07	; 7
     204:	80 7e       	andi	r24, 0xE0	; 224
     206:	87 b9       	out	0x07, r24	; 7
		ADC_SELECT |= (ADC_CHANNEL_GAIN[ADC_SELECTOR] & MUX_MASK);
     208:	e0 91 cf 01 	lds	r30, 0x01CF	; 0x8001cf <ADC_SELECTOR>
     20c:	f0 91 d0 01 	lds	r31, 0x01D0	; 0x8001d0 <ADC_SELECTOR+0x1>
     210:	ee 0f       	add	r30, r30
     212:	ff 1f       	adc	r31, r31
     214:	ed 52       	subi	r30, 0x2D	; 45
     216:	fe 4f       	sbci	r31, 0xFE	; 254
     218:	80 81       	ld	r24, Z
     21a:	91 81       	ldd	r25, Z+1	; 0x01
     21c:	27 b1       	in	r18, 0x07	; 7
     21e:	8f 71       	andi	r24, 0x1F	; 31
     220:	99 27       	eor	r25, r25
     222:	82 2b       	or	r24, r18
     224:	87 b9       	out	0x07, r24	; 7
	}		
}
     226:	ff 91       	pop	r31
     228:	ef 91       	pop	r30
     22a:	9f 91       	pop	r25
     22c:	8f 91       	pop	r24
     22e:	3f 91       	pop	r19
     230:	2f 91       	pop	r18
     232:	0f 90       	pop	r0
     234:	0b be       	out	0x3b, r0	; 59
     236:	0f 90       	pop	r0
     238:	0f be       	out	0x3f, r0	; 63
     23a:	0f 90       	pop	r0
     23c:	1f 90       	pop	r1
     23e:	18 95       	reti

00000240 <__vector_1>:

/*
** interrupt
*/
// cross out the ones being used and redefine in main
ISR(INT0_vect){ }
     240:	1f 92       	push	r1
     242:	0f 92       	push	r0
     244:	0f b6       	in	r0, 0x3f	; 63
     246:	0f 92       	push	r0
     248:	11 24       	eor	r1, r1
     24a:	0f 90       	pop	r0
     24c:	0f be       	out	0x3f, r0	; 63
     24e:	0f 90       	pop	r0
     250:	1f 90       	pop	r1
     252:	18 95       	reti

00000254 <__vector_2>:
ISR(INT1_vect){ }
     254:	1f 92       	push	r1
     256:	0f 92       	push	r0
     258:	0f b6       	in	r0, 0x3f	; 63
     25a:	0f 92       	push	r0
     25c:	11 24       	eor	r1, r1
     25e:	0f 90       	pop	r0
     260:	0f be       	out	0x3f, r0	; 63
     262:	0f 90       	pop	r0
     264:	1f 90       	pop	r1
     266:	18 95       	reti

00000268 <__vector_3>:
ISR(INT2_vect){ }
     268:	1f 92       	push	r1
     26a:	0f 92       	push	r0
     26c:	0f b6       	in	r0, 0x3f	; 63
     26e:	0f 92       	push	r0
     270:	11 24       	eor	r1, r1
     272:	0f 90       	pop	r0
     274:	0f be       	out	0x3f, r0	; 63
     276:	0f 90       	pop	r0
     278:	1f 90       	pop	r1
     27a:	18 95       	reti

0000027c <__vector_4>:
ISR(INT3_vect){ }
     27c:	1f 92       	push	r1
     27e:	0f 92       	push	r0
     280:	0f b6       	in	r0, 0x3f	; 63
     282:	0f 92       	push	r0
     284:	11 24       	eor	r1, r1
     286:	0f 90       	pop	r0
     288:	0f be       	out	0x3f, r0	; 63
     28a:	0f 90       	pop	r0
     28c:	1f 90       	pop	r1
     28e:	18 95       	reti

00000290 <__vector_5>:
ISR(INT4_vect){ }
     290:	1f 92       	push	r1
     292:	0f 92       	push	r0
     294:	0f b6       	in	r0, 0x3f	; 63
     296:	0f 92       	push	r0
     298:	11 24       	eor	r1, r1
     29a:	0f 90       	pop	r0
     29c:	0f be       	out	0x3f, r0	; 63
     29e:	0f 90       	pop	r0
     2a0:	1f 90       	pop	r1
     2a2:	18 95       	reti

000002a4 <__vector_6>:
ISR(INT5_vect){ }
     2a4:	1f 92       	push	r1
     2a6:	0f 92       	push	r0
     2a8:	0f b6       	in	r0, 0x3f	; 63
     2aa:	0f 92       	push	r0
     2ac:	11 24       	eor	r1, r1
     2ae:	0f 90       	pop	r0
     2b0:	0f be       	out	0x3f, r0	; 63
     2b2:	0f 90       	pop	r0
     2b4:	1f 90       	pop	r1
     2b6:	18 95       	reti

000002b8 <__vector_7>:
ISR(INT6_vect){ }
     2b8:	1f 92       	push	r1
     2ba:	0f 92       	push	r0
     2bc:	0f b6       	in	r0, 0x3f	; 63
     2be:	0f 92       	push	r0
     2c0:	11 24       	eor	r1, r1
     2c2:	0f 90       	pop	r0
     2c4:	0f be       	out	0x3f, r0	; 63
     2c6:	0f 90       	pop	r0
     2c8:	1f 90       	pop	r1
     2ca:	18 95       	reti

000002cc <__vector_8>:
ISR(INT7_vect){ }
     2cc:	1f 92       	push	r1
     2ce:	0f 92       	push	r0
     2d0:	0f b6       	in	r0, 0x3f	; 63
     2d2:	0f 92       	push	r0
     2d4:	11 24       	eor	r1, r1
     2d6:	0f 90       	pop	r0
     2d8:	0f be       	out	0x3f, r0	; 63
     2da:	0f 90       	pop	r0
     2dc:	1f 90       	pop	r1
     2de:	18 95       	reti

000002e0 <__vector_17>:
    return SPI_DATA_REGISTER;
}
/*
** interrupt
*/
ISR(SPI_STC_vect){ }
     2e0:	1f 92       	push	r1
     2e2:	0f 92       	push	r0
     2e4:	0f b6       	in	r0, 0x3f	; 63
     2e6:	0f 92       	push	r0
     2e8:	11 24       	eor	r1, r1
     2ea:	0f 90       	pop	r0
     2ec:	0f be       	out	0x3f, r0	; 63
     2ee:	0f 90       	pop	r0
     2f0:	1f 90       	pop	r1
     2f2:	18 95       	reti

000002f4 <__vector_10>:

/*
** interrupt
*/
// So that main will not freeze when not defined, but rather exclude.
ISR(TIMER2_OVF_vect){ }
     2f4:	1f 92       	push	r1
     2f6:	0f 92       	push	r0
     2f8:	0f b6       	in	r0, 0x3f	; 63
     2fa:	0f 92       	push	r0
     2fc:	11 24       	eor	r1, r1
     2fe:	0f 90       	pop	r0
     300:	0f be       	out	0x3f, r0	; 63
     302:	0f 90       	pop	r0
     304:	1f 90       	pop	r1
     306:	18 95       	reti

00000308 <__vector_11>:
ISR(TIMER1_CAPT_vect){ }
     308:	1f 92       	push	r1
     30a:	0f 92       	push	r0
     30c:	0f b6       	in	r0, 0x3f	; 63
     30e:	0f 92       	push	r0
     310:	11 24       	eor	r1, r1
     312:	0f 90       	pop	r0
     314:	0f be       	out	0x3f, r0	; 63
     316:	0f 90       	pop	r0
     318:	1f 90       	pop	r1
     31a:	18 95       	reti

0000031c <__vector_12>:
ISR(TIMER1_COMPA_vect){ }
     31c:	1f 92       	push	r1
     31e:	0f 92       	push	r0
     320:	0f b6       	in	r0, 0x3f	; 63
     322:	0f 92       	push	r0
     324:	11 24       	eor	r1, r1
     326:	0f 90       	pop	r0
     328:	0f be       	out	0x3f, r0	; 63
     32a:	0f 90       	pop	r0
     32c:	1f 90       	pop	r1
     32e:	18 95       	reti

00000330 <__vector_13>:
ISR(TIMER1_COMPB_vect){ }
     330:	1f 92       	push	r1
     332:	0f 92       	push	r0
     334:	0f b6       	in	r0, 0x3f	; 63
     336:	0f 92       	push	r0
     338:	11 24       	eor	r1, r1
     33a:	0f 90       	pop	r0
     33c:	0f be       	out	0x3f, r0	; 63
     33e:	0f 90       	pop	r0
     340:	1f 90       	pop	r1
     342:	18 95       	reti

00000344 <__vector_14>:
ISR(TIMER1_OVF_vect){ }
     344:	1f 92       	push	r1
     346:	0f 92       	push	r0
     348:	0f b6       	in	r0, 0x3f	; 63
     34a:	0f 92       	push	r0
     34c:	11 24       	eor	r1, r1
     34e:	0f 90       	pop	r0
     350:	0f be       	out	0x3f, r0	; 63
     352:	0f 90       	pop	r0
     354:	1f 90       	pop	r1
     356:	18 95       	reti

00000358 <__vector_15>:
ISR(TIMER0_COMP_vect){ }
     358:	1f 92       	push	r1
     35a:	0f 92       	push	r0
     35c:	0f b6       	in	r0, 0x3f	; 63
     35e:	0f 92       	push	r0
     360:	11 24       	eor	r1, r1
     362:	0f 90       	pop	r0
     364:	0f be       	out	0x3f, r0	; 63
     366:	0f 90       	pop	r0
     368:	1f 90       	pop	r1
     36a:	18 95       	reti

0000036c <__vector_16>:
ISR(TIMER0_OVF_vect){ }
     36c:	1f 92       	push	r1
     36e:	0f 92       	push	r0
     370:	0f b6       	in	r0, 0x3f	; 63
     372:	0f 92       	push	r0
     374:	11 24       	eor	r1, r1
     376:	0f 90       	pop	r0
     378:	0f be       	out	0x3f, r0	; 63
     37a:	0f 90       	pop	r0
     37c:	1f 90       	pop	r1
     37e:	18 95       	reti

00000380 <__vector_24>:
ISR(TIMER1_COMPC_vect){ }
     380:	1f 92       	push	r1
     382:	0f 92       	push	r0
     384:	0f b6       	in	r0, 0x3f	; 63
     386:	0f 92       	push	r0
     388:	11 24       	eor	r1, r1
     38a:	0f 90       	pop	r0
     38c:	0f be       	out	0x3f, r0	; 63
     38e:	0f 90       	pop	r0
     390:	1f 90       	pop	r1
     392:	18 95       	reti

00000394 <__vector_25>:
ISR(TIMER3_CAPT_vect){ }
     394:	1f 92       	push	r1
     396:	0f 92       	push	r0
     398:	0f b6       	in	r0, 0x3f	; 63
     39a:	0f 92       	push	r0
     39c:	11 24       	eor	r1, r1
     39e:	0f 90       	pop	r0
     3a0:	0f be       	out	0x3f, r0	; 63
     3a2:	0f 90       	pop	r0
     3a4:	1f 90       	pop	r1
     3a6:	18 95       	reti

000003a8 <__vector_26>:
ISR(TIMER3_COMPA_vect){ }
     3a8:	1f 92       	push	r1
     3aa:	0f 92       	push	r0
     3ac:	0f b6       	in	r0, 0x3f	; 63
     3ae:	0f 92       	push	r0
     3b0:	11 24       	eor	r1, r1
     3b2:	0f 90       	pop	r0
     3b4:	0f be       	out	0x3f, r0	; 63
     3b6:	0f 90       	pop	r0
     3b8:	1f 90       	pop	r1
     3ba:	18 95       	reti

000003bc <__vector_27>:
ISR(TIMER3_COMPB_vect){ }
     3bc:	1f 92       	push	r1
     3be:	0f 92       	push	r0
     3c0:	0f b6       	in	r0, 0x3f	; 63
     3c2:	0f 92       	push	r0
     3c4:	11 24       	eor	r1, r1
     3c6:	0f 90       	pop	r0
     3c8:	0f be       	out	0x3f, r0	; 63
     3ca:	0f 90       	pop	r0
     3cc:	1f 90       	pop	r1
     3ce:	18 95       	reti

000003d0 <__vector_28>:
ISR(TIMER3_COMPC_vect){ }
     3d0:	1f 92       	push	r1
     3d2:	0f 92       	push	r0
     3d4:	0f b6       	in	r0, 0x3f	; 63
     3d6:	0f 92       	push	r0
     3d8:	11 24       	eor	r1, r1
     3da:	0f 90       	pop	r0
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	0f 90       	pop	r0
     3e0:	1f 90       	pop	r1
     3e2:	18 95       	reti

000003e4 <__vector_29>:
ISR(TIMER3_OVF_vect){ }
     3e4:	1f 92       	push	r1
     3e6:	0f 92       	push	r0
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	0f 92       	push	r0
     3ec:	11 24       	eor	r1, r1
     3ee:	0f 90       	pop	r0
     3f0:	0f be       	out	0x3f, r0	; 63
     3f2:	0f 90       	pop	r0
     3f4:	1f 90       	pop	r1
     3f6:	18 95       	reti

000003f8 <__vector_33>:
	}
}
/*
** interrupt
*/
ISR(TWI_vect){ }
     3f8:	1f 92       	push	r1
     3fa:	0f 92       	push	r0
     3fc:	0f b6       	in	r0, 0x3f	; 63
     3fe:	0f 92       	push	r0
     400:	11 24       	eor	r1, r1
     402:	0f 90       	pop	r0
     404:	0f be       	out	0x3f, r0	; 63
     406:	0f 90       	pop	r0
     408:	1f 90       	pop	r1
     40a:	18 95       	reti

0000040c <__vector_18>:
void uart1_puts_p(const char *progmem_s )
{
    register char c;
    while ( (c = pgm_read_byte(progmem_s++)) ) 
      uart1_putc(c);
}/* uart1_puts_p */
     40c:	1f 92       	push	r1
     40e:	0f 92       	push	r0
     410:	0f b6       	in	r0, 0x3f	; 63
     412:	0f 92       	push	r0
     414:	11 24       	eor	r1, r1
     416:	0b b6       	in	r0, 0x3b	; 59
     418:	0f 92       	push	r0
     41a:	8f 93       	push	r24
     41c:	9f 93       	push	r25
     41e:	ef 93       	push	r30
     420:	ff 93       	push	r31
     422:	8b b1       	in	r24, 0x0b	; 11
     424:	9a b1       	in	r25, 0x0a	; 10
     426:	88 71       	andi	r24, 0x18	; 24
     428:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <UART_LastRxError>
     42c:	e0 91 3a 02 	lds	r30, 0x023A	; 0x80023a <UART_RxHead>
     430:	ef 5f       	subi	r30, 0xFF	; 255
     432:	ef 71       	andi	r30, 0x1F	; 31
     434:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <UART_RxTail>
     438:	e8 13       	cpse	r30, r24
     43a:	04 c0       	rjmp	.+8      	; 0x444 <__vector_18+0x38>
     43c:	82 e0       	ldi	r24, 0x02	; 2
     43e:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <UART_LastRxError>
     442:	11 c0       	rjmp	.+34     	; 0x466 <__vector_18+0x5a>
     444:	9c b1       	in	r25, 0x0c	; 12
     446:	e0 93 3a 02 	sts	0x023A, r30	; 0x80023a <UART_RxHead>
     44a:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <UART_LastRxError>
     44e:	88 23       	and	r24, r24
     450:	31 f0       	breq	.+12     	; 0x45e <__vector_18+0x52>
     452:	f0 e0       	ldi	r31, 0x00	; 0
     454:	e3 5c       	subi	r30, 0xC3	; 195
     456:	fd 4f       	sbci	r31, 0xFD	; 253
     458:	88 e5       	ldi	r24, 0x58	; 88
     45a:	80 83       	st	Z, r24
     45c:	04 c0       	rjmp	.+8      	; 0x466 <__vector_18+0x5a>
     45e:	f0 e0       	ldi	r31, 0x00	; 0
     460:	e3 5c       	subi	r30, 0xC3	; 195
     462:	fd 4f       	sbci	r31, 0xFD	; 253
     464:	90 83       	st	Z, r25
     466:	ff 91       	pop	r31
     468:	ef 91       	pop	r30
     46a:	9f 91       	pop	r25
     46c:	8f 91       	pop	r24
     46e:	0f 90       	pop	r0
     470:	0b be       	out	0x3b, r0	; 59
     472:	0f 90       	pop	r0
     474:	0f be       	out	0x3f, r0	; 63
     476:	0f 90       	pop	r0
     478:	1f 90       	pop	r1
     47a:	18 95       	reti

0000047c <__vector_19>:
     47c:	1f 92       	push	r1
     47e:	0f 92       	push	r0
     480:	0f b6       	in	r0, 0x3f	; 63
     482:	0f 92       	push	r0
     484:	11 24       	eor	r1, r1
     486:	0b b6       	in	r0, 0x3b	; 59
     488:	0f 92       	push	r0
     48a:	8f 93       	push	r24
     48c:	9f 93       	push	r25
     48e:	ef 93       	push	r30
     490:	ff 93       	push	r31
     492:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <UART_TxHead>
     496:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <UART_TxTail>
     49a:	98 13       	cpse	r25, r24
     49c:	02 c0       	rjmp	.+4      	; 0x4a2 <__vector_19+0x26>
     49e:	55 98       	cbi	0x0a, 5	; 10
     4a0:	0b c0       	rjmp	.+22     	; 0x4b8 <__vector_19+0x3c>
     4a2:	e0 91 3b 02 	lds	r30, 0x023B	; 0x80023b <UART_TxTail>
     4a6:	ef 5f       	subi	r30, 0xFF	; 255
     4a8:	ef 71       	andi	r30, 0x1F	; 31
     4aa:	e0 93 3b 02 	sts	0x023B, r30	; 0x80023b <UART_TxTail>
     4ae:	f0 e0       	ldi	r31, 0x00	; 0
     4b0:	e3 5a       	subi	r30, 0xA3	; 163
     4b2:	fd 4f       	sbci	r31, 0xFD	; 253
     4b4:	80 81       	ld	r24, Z
     4b6:	8c b9       	out	0x0c, r24	; 12
     4b8:	ff 91       	pop	r31
     4ba:	ef 91       	pop	r30
     4bc:	9f 91       	pop	r25
     4be:	8f 91       	pop	r24
     4c0:	0f 90       	pop	r0
     4c2:	0b be       	out	0x3b, r0	; 59
     4c4:	0f 90       	pop	r0
     4c6:	0f be       	out	0x3f, r0	; 63
     4c8:	0f 90       	pop	r0
     4ca:	1f 90       	pop	r1
     4cc:	18 95       	reti

000004ce <__vector_30>:
SIGNAL(UART1_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART1 Receive Complete interrupt
Purpose:  called when the UART1 has received a character
**************************************************************************/
{
     4ce:	1f 92       	push	r1
     4d0:	0f 92       	push	r0
     4d2:	0f b6       	in	r0, 0x3f	; 63
     4d4:	0f 92       	push	r0
     4d6:	11 24       	eor	r1, r1
     4d8:	0b b6       	in	r0, 0x3b	; 59
     4da:	0f 92       	push	r0
     4dc:	8f 93       	push	r24
     4de:	9f 93       	push	r25
     4e0:	ef 93       	push	r30
     4e2:	ff 93       	push	r31
    unsigned char tmphead;
	unsigned char data;
	unsigned char bit9;
    unsigned char usr;
    /* read UART status register and UART data register */
	usr  = UART1_STATUS;
     4e4:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    bit9 = UART1_CONTROL;
     4e8:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
    bit9 = 0x01 & (bit9>>1);
    /* */
    UART1_LastRxError = (usr & (_BV(FE1)|_BV(DOR1)));
     4ec:	88 71       	andi	r24, 0x18	; 24
     4ee:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <UART1_LastRxError>
	/* calculate buffer index */
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
     4f2:	e0 91 f5 01 	lds	r30, 0x01F5	; 0x8001f5 <UART1_RxHead>
     4f6:	ef 5f       	subi	r30, 0xFF	; 255
     4f8:	ef 71       	andi	r30, 0x1F	; 31
    if ( tmphead == UART1_RxTail ) {	
     4fa:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <UART1_RxTail>
     4fe:	e8 13       	cpse	r30, r24
     500:	04 c0       	rjmp	.+8      	; 0x50a <__vector_30+0x3c>
        /* error: receive buffer overflow, caracter is lost*/
        UART1_LastRxError = UART_BUFFER_OVERFLOW >> 8; 
     502:	82 e0       	ldi	r24, 0x02	; 2
     504:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <UART1_LastRxError>
     508:	12 c0       	rjmp	.+36     	; 0x52e <__vector_30+0x60>
	}else{
		data = UART1_DATA;
     50a:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
        /* store new index */
        UART1_RxHead = tmphead;
     50e:	e0 93 f5 01 	sts	0x01F5, r30	; 0x8001f5 <UART1_RxHead>
		if(UART1_LastRxError){
     512:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <UART1_LastRxError>
     516:	88 23       	and	r24, r24
     518:	31 f0       	breq	.+12     	; 0x526 <__vector_30+0x58>
			/* store indication data error in buffer */
			UART1_RxBuf[tmphead] = 'X';
     51a:	f0 e0       	ldi	r31, 0x00	; 0
     51c:	e8 50       	subi	r30, 0x08	; 8
     51e:	fe 4f       	sbci	r31, 0xFE	; 254
     520:	88 e5       	ldi	r24, 0x58	; 88
     522:	80 83       	st	Z, r24
     524:	04 c0       	rjmp	.+8      	; 0x52e <__vector_30+0x60>
		}else{
			/* store received data in buffer */
			UART1_RxBuf[tmphead] = data;
     526:	f0 e0       	ldi	r31, 0x00	; 0
     528:	e8 50       	subi	r30, 0x08	; 8
     52a:	fe 4f       	sbci	r31, 0xFE	; 254
     52c:	90 83       	st	Z, r25
		}
    }
}
     52e:	ff 91       	pop	r31
     530:	ef 91       	pop	r30
     532:	9f 91       	pop	r25
     534:	8f 91       	pop	r24
     536:	0f 90       	pop	r0
     538:	0b be       	out	0x3b, r0	; 59
     53a:	0f 90       	pop	r0
     53c:	0f be       	out	0x3f, r0	; 63
     53e:	0f 90       	pop	r0
     540:	1f 90       	pop	r1
     542:	18 95       	reti

00000544 <__vector_31>:
SIGNAL(UART1_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART1 Data Register Empty interrupt
Purpose:  called when the UART1 is ready to transmit the next byte
**************************************************************************/
{
     544:	1f 92       	push	r1
     546:	0f 92       	push	r0
     548:	0f b6       	in	r0, 0x3f	; 63
     54a:	0f 92       	push	r0
     54c:	11 24       	eor	r1, r1
     54e:	0b b6       	in	r0, 0x3b	; 59
     550:	0f 92       	push	r0
     552:	8f 93       	push	r24
     554:	9f 93       	push	r25
     556:	ef 93       	push	r30
     558:	ff 93       	push	r31
    if ( UART1_TxHead == UART1_TxTail ) {
     55a:	90 91 f7 01 	lds	r25, 0x01F7	; 0x8001f7 <UART1_TxHead>
     55e:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <UART1_TxTail>
     562:	98 13       	cpse	r25, r24
     564:	06 c0       	rjmp	.+12     	; 0x572 <__vector_31+0x2e>
        /* tx buffer empty, disable UDRE interrupt */
        UART1_CONTROL &= ~_BV(UART1_UDRIE);
     566:	ea e9       	ldi	r30, 0x9A	; 154
     568:	f0 e0       	ldi	r31, 0x00	; 0
     56a:	80 81       	ld	r24, Z
     56c:	8f 7d       	andi	r24, 0xDF	; 223
     56e:	80 83       	st	Z, r24
     570:	0e c0       	rjmp	.+28     	; 0x58e <__vector_31+0x4a>
    }else{
		/* calculate and store new buffer index */
        UART1_TxTail = (UART1_TxTail + 1) & UART_TX_BUFFER_MASK;
     572:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <UART1_TxTail>
     576:	8f 5f       	subi	r24, 0xFF	; 255
     578:	8f 71       	andi	r24, 0x1F	; 31
     57a:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <UART1_TxTail>
        /* get one byte from buffer and write it to UART */
		UART1_DATA = UART1_TxBuf[UART1_TxTail];  /* start transmission */
     57e:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <UART1_TxTail>
     582:	f0 e0       	ldi	r31, 0x00	; 0
     584:	e8 5e       	subi	r30, 0xE8	; 232
     586:	fd 4f       	sbci	r31, 0xFD	; 253
     588:	80 81       	ld	r24, Z
     58a:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
	}
}
     58e:	ff 91       	pop	r31
     590:	ef 91       	pop	r30
     592:	9f 91       	pop	r25
     594:	8f 91       	pop	r24
     596:	0f 90       	pop	r0
     598:	0b be       	out	0x3b, r0	; 59
     59a:	0f 90       	pop	r0
     59c:	0f be       	out	0x3f, r0	; 63
     59e:	0f 90       	pop	r0
     5a0:	1f 90       	pop	r1
     5a2:	18 95       	reti

000005a4 <EEPROMenable>:
** procedure and function header
*/
/*
** procedure and function
*/
EEPROM EEPROMenable(void){
     5a4:	fc 01       	movw	r30, r24
	eprom.write_float=eeprom_write_float;
	eprom.update_float=eeprom_update_float;
	eprom.read_block=eeprom_read_block;
	eprom.write_block=eeprom_write_block;
	eprom.update_block=eeprom_update_block;
	return eprom;
     5a6:	8b e2       	ldi	r24, 0x2B	; 43
     5a8:	95 e1       	ldi	r25, 0x15	; 21
     5aa:	91 83       	std	Z+1, r25	; 0x01
     5ac:	80 83       	st	Z, r24
     5ae:	8d e6       	ldi	r24, 0x6D	; 109
     5b0:	95 e1       	ldi	r25, 0x15	; 21
     5b2:	93 83       	std	Z+3, r25	; 0x03
     5b4:	82 83       	std	Z+2, r24	; 0x02
     5b6:	87 e4       	ldi	r24, 0x47	; 71
     5b8:	95 e1       	ldi	r25, 0x15	; 21
     5ba:	95 83       	std	Z+5, r25	; 0x05
     5bc:	84 83       	std	Z+4, r24	; 0x04
     5be:	83 e3       	ldi	r24, 0x33	; 51
     5c0:	95 e1       	ldi	r25, 0x15	; 21
     5c2:	97 83       	std	Z+7, r25	; 0x07
     5c4:	86 83       	std	Z+6, r24	; 0x06
     5c6:	8f e7       	ldi	r24, 0x7F	; 127
     5c8:	95 e1       	ldi	r25, 0x15	; 21
     5ca:	91 87       	std	Z+9, r25	; 0x09
     5cc:	80 87       	std	Z+8, r24	; 0x08
     5ce:	80 e6       	ldi	r24, 0x60	; 96
     5d0:	95 e1       	ldi	r25, 0x15	; 21
     5d2:	93 87       	std	Z+11, r25	; 0x0b
     5d4:	82 87       	std	Z+10, r24	; 0x0a
     5d6:	8a e7       	ldi	r24, 0x7A	; 122
     5d8:	95 e1       	ldi	r25, 0x15	; 21
     5da:	97 87       	std	Z+15, r25	; 0x0f
     5dc:	86 87       	std	Z+14, r24	; 0x0e
     5de:	8a e7       	ldi	r24, 0x7A	; 122
     5e0:	95 e1       	ldi	r25, 0x15	; 21
     5e2:	95 8b       	std	Z+21, r25	; 0x15
     5e4:	84 8b       	std	Z+20, r24	; 0x14
     5e6:	88 e5       	ldi	r24, 0x58	; 88
     5e8:	95 e1       	ldi	r25, 0x15	; 21
     5ea:	97 8b       	std	Z+23, r25	; 0x17
     5ec:	86 8b       	std	Z+22, r24	; 0x16
     5ee:	8b e1       	ldi	r24, 0x1B	; 27
     5f0:	95 e1       	ldi	r25, 0x15	; 21
     5f2:	91 8f       	std	Z+25, r25	; 0x19
     5f4:	80 8f       	std	Z+24, r24	; 0x18
     5f6:	84 e6       	ldi	r24, 0x64	; 100
     5f8:	95 e1       	ldi	r25, 0x15	; 21
     5fa:	93 8f       	std	Z+27, r25	; 0x1b
     5fc:	82 8f       	std	Z+26, r24	; 0x1a
     5fe:	88 e3       	ldi	r24, 0x38	; 56
     600:	95 e1       	ldi	r25, 0x15	; 21
     602:	95 8f       	std	Z+29, r25	; 0x1d
     604:	84 8f       	std	Z+28, r24	; 0x1c
}
     606:	cf 01       	movw	r24, r30
     608:	08 95       	ret

0000060a <FUNCpinmatch>:
}
//pinmatch
uint8_t FUNCpinmatch(uint8_t match, uint8_t pin, uint8_t HL)
{
	uint8_t result;
	result=match&pin;
     60a:	68 23       	and	r22, r24
	if(HL){
     60c:	44 23       	and	r20, r20
     60e:	21 f0       	breq	.+8      	; 0x618 <FUNCpinmatch+0xe>
		if(result==match);
     610:	86 17       	cp	r24, r22
     612:	21 f0       	breq	.+8      	; 0x61c <FUNCpinmatch+0x12>
		else
			result=0;
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	08 95       	ret
	}else{
		if(result)
     618:	61 11       	cpse	r22, r1
			result=0;
     61a:	80 e0       	ldi	r24, 0x00	; 0
		else
			result=match;
	}
	return result;
}
     61c:	08 95       	ret

0000061e <FUNChmerge>:
// hmerge
uint8_t FUNChmerge(uint8_t X, uint8_t Y)
{
	return (X | Y);
}
     61e:	86 2b       	or	r24, r22
     620:	08 95       	ret

00000622 <FUNClmerge>:
// lmerge
uint8_t FUNClmerge(uint8_t X, uint8_t Y)
{
	return (X & Y);
}
     622:	86 23       	and	r24, r22
     624:	08 95       	ret

00000626 <FUNChh>:
uint8_t FUNChh(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi&xf;
	return i;
}
     626:	86 23       	and	r24, r22
     628:	08 95       	ret

0000062a <FUNCll>:
// ll
uint8_t FUNCll(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi|xf;
	return ~i;
     62a:	86 2b       	or	r24, r22
}
     62c:	80 95       	com	r24
     62e:	08 95       	ret

00000630 <FUNClh>:
// lh
uint8_t FUNClh(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi^xf;
     630:	86 27       	eor	r24, r22
	i&=xf;
	return i;
}
     632:	86 23       	and	r24, r22
     634:	08 95       	ret

00000636 <FUNChl>:
// hl
uint8_t FUNChl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xf^xi;
     636:	60 95       	com	r22
	i&=xi;
	return i;
}
     638:	86 23       	and	r24, r22
     63a:	08 95       	ret

0000063c <FUNCdiff>:
// diff
uint8_t FUNCdiff(uint8_t xi, uint8_t xf)
{
	return xf^xi;
}
     63c:	86 27       	eor	r24, r22
     63e:	08 95       	ret

00000640 <FUNCswap>:
// interchange *px and *py
void FUNCswap(long *px, long *py)
{
     640:	cf 92       	push	r12
     642:	df 92       	push	r13
     644:	ef 92       	push	r14
     646:	ff 92       	push	r15
     648:	0f 93       	push	r16
     64a:	1f 93       	push	r17
	long temp;
	temp = *px;
     64c:	fc 01       	movw	r30, r24
     64e:	00 81       	ld	r16, Z
     650:	11 81       	ldd	r17, Z+1	; 0x01
     652:	22 81       	ldd	r18, Z+2	; 0x02
     654:	33 81       	ldd	r19, Z+3	; 0x03
	*px = *py;
     656:	fb 01       	movw	r30, r22
     658:	c0 80       	ld	r12, Z
     65a:	d1 80       	ldd	r13, Z+1	; 0x01
     65c:	e2 80       	ldd	r14, Z+2	; 0x02
     65e:	f3 80       	ldd	r15, Z+3	; 0x03
     660:	fc 01       	movw	r30, r24
     662:	c0 82       	st	Z, r12
     664:	d1 82       	std	Z+1, r13	; 0x01
     666:	e2 82       	std	Z+2, r14	; 0x02
     668:	f3 82       	std	Z+3, r15	; 0x03
	*py = temp;
     66a:	fb 01       	movw	r30, r22
     66c:	00 83       	st	Z, r16
     66e:	11 83       	std	Z+1, r17	; 0x01
     670:	22 83       	std	Z+2, r18	; 0x02
     672:	33 83       	std	Z+3, r19	; 0x03
}
     674:	1f 91       	pop	r17
     676:	0f 91       	pop	r16
     678:	ff 90       	pop	r15
     67a:	ef 90       	pop	r14
     67c:	df 90       	pop	r13
     67e:	cf 90       	pop	r12
     680:	08 95       	ret

00000682 <FUNCcopy>:
// copy: copy 'from' into 'to'; assume to is big enough
void FUNCcopy(char to[], char from[])
{
	int i;
	i = 0;
	while ((to[i] = from[i]) != '\0')
     682:	fb 01       	movw	r30, r22
     684:	20 81       	ld	r18, Z
     686:	fc 01       	movw	r30, r24
     688:	20 83       	st	Z, r18
     68a:	22 23       	and	r18, r18
     68c:	39 f0       	breq	.+14     	; 0x69c <FUNCcopy+0x1a>
     68e:	db 01       	movw	r26, r22
     690:	11 96       	adiw	r26, 0x01	; 1
     692:	31 96       	adiw	r30, 0x01	; 1
     694:	9d 91       	ld	r25, X+
     696:	91 93       	st	Z+, r25
     698:	91 11       	cpse	r25, r1
     69a:	fc cf       	rjmp	.-8      	; 0x694 <FUNCcopy+0x12>
     69c:	08 95       	ret

0000069e <FUNCsqueeze>:
		++i;
}
// squeeze: delete all c from s
void FUNCsqueeze(char s[], int c)
{
     69e:	cf 93       	push	r28
     6a0:	df 93       	push	r29
     6a2:	ec 01       	movw	r28, r24
	int i, j;
	for (i = j = 0; s[i] != '\0'; i++)
     6a4:	98 81       	ld	r25, Y
     6a6:	99 23       	and	r25, r25
     6a8:	99 f0       	breq	.+38     	; 0x6d0 <FUNCsqueeze+0x32>
     6aa:	fe 01       	movw	r30, r28
     6ac:	31 96       	adiw	r30, 0x01	; 1
     6ae:	20 e0       	ldi	r18, 0x00	; 0
     6b0:	30 e0       	ldi	r19, 0x00	; 0
		if (s[i] != c)
     6b2:	49 2f       	mov	r20, r25
     6b4:	50 e0       	ldi	r21, 0x00	; 0
     6b6:	46 17       	cp	r20, r22
     6b8:	57 07       	cpc	r21, r23
     6ba:	31 f0       	breq	.+12     	; 0x6c8 <FUNCsqueeze+0x2a>
			s[j++] = s[i];
     6bc:	de 01       	movw	r26, r28
     6be:	a2 0f       	add	r26, r18
     6c0:	b3 1f       	adc	r27, r19
     6c2:	9c 93       	st	X, r25
     6c4:	2f 5f       	subi	r18, 0xFF	; 255
     6c6:	3f 4f       	sbci	r19, 0xFF	; 255
}
// squeeze: delete all c from s
void FUNCsqueeze(char s[], int c)
{
	int i, j;
	for (i = j = 0; s[i] != '\0'; i++)
     6c8:	91 91       	ld	r25, Z+
     6ca:	91 11       	cpse	r25, r1
     6cc:	f2 cf       	rjmp	.-28     	; 0x6b2 <FUNCsqueeze+0x14>
     6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <FUNCsqueeze+0x36>
     6d0:	20 e0       	ldi	r18, 0x00	; 0
     6d2:	30 e0       	ldi	r19, 0x00	; 0
		if (s[i] != c)
			s[j++] = s[i];
		s[j] = '\0';
     6d4:	fe 01       	movw	r30, r28
     6d6:	e2 0f       	add	r30, r18
     6d8:	f3 1f       	adc	r31, r19
     6da:	10 82       	st	Z, r1
}
     6dc:	df 91       	pop	r29
     6de:	cf 91       	pop	r28
     6e0:	08 95       	ret

000006e2 <FUNCshellsort>:
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
     6e2:	2f 92       	push	r2
     6e4:	3f 92       	push	r3
     6e6:	4f 92       	push	r4
     6e8:	5f 92       	push	r5
     6ea:	6f 92       	push	r6
     6ec:	7f 92       	push	r7
     6ee:	8f 92       	push	r8
     6f0:	9f 92       	push	r9
     6f2:	af 92       	push	r10
     6f4:	bf 92       	push	r11
     6f6:	cf 92       	push	r12
     6f8:	df 92       	push	r13
     6fa:	ef 92       	push	r14
     6fc:	ff 92       	push	r15
     6fe:	0f 93       	push	r16
     700:	1f 93       	push	r17
     702:	cf 93       	push	r28
     704:	df 93       	push	r29
     706:	00 d0       	rcall	.+0      	; 0x708 <FUNCshellsort+0x26>
     708:	00 d0       	rcall	.+0      	; 0x70a <FUNCshellsort+0x28>
     70a:	cd b7       	in	r28, 0x3d	; 61
     70c:	de b7       	in	r29, 0x3e	; 62
     70e:	2c 01       	movw	r4, r24
     710:	1b 01       	movw	r2, r22
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
     712:	4b 01       	movw	r8, r22
     714:	77 23       	and	r23, r23
     716:	1c f4       	brge	.+6      	; 0x71e <FUNCshellsort+0x3c>
     718:	2f ef       	ldi	r18, 0xFF	; 255
     71a:	82 1a       	sub	r8, r18
     71c:	92 0a       	sbc	r9, r18
     71e:	95 94       	asr	r9
     720:	87 94       	ror	r8
     722:	18 14       	cp	r1, r8
     724:	19 04       	cpc	r1, r9
     726:	0c f4       	brge	.+2      	; 0x72a <FUNCshellsort+0x48>
     728:	51 c0       	rjmp	.+162    	; 0x7cc <FUNCshellsort+0xea>
     72a:	6a c0       	rjmp	.+212    	; 0x800 <FUNCshellsort+0x11e>
		for (i = gap; i < n; i++)
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
     72c:	96 01       	movw	r18, r12
     72e:	dd 20       	and	r13, r13
     730:	9c f1       	brlt	.+102    	; 0x798 <FUNCshellsort+0xb6>
     732:	f5 01       	movw	r30, r10
     734:	40 81       	ld	r20, Z
     736:	51 81       	ldd	r21, Z+1	; 0x01
     738:	f4 01       	movw	r30, r8
     73a:	60 81       	ld	r22, Z
     73c:	71 81       	ldd	r23, Z+1	; 0x01
     73e:	64 17       	cp	r22, r20
     740:	75 07       	cpc	r23, r21
     742:	54 f5       	brge	.+84     	; 0x798 <FUNCshellsort+0xb6>
     744:	8c 01       	movw	r16, r24
     746:	0a 0d       	add	r16, r10
     748:	1b 1d       	adc	r17, r11
     74a:	d4 01       	movw	r26, r8
     74c:	bc 82       	std	Y+4, r11	; 0x04
     74e:	ab 82       	std	Y+3, r10	; 0x03
     750:	ba 82       	std	Y+2, r11	; 0x02
     752:	a9 82       	std	Y+1, r10	; 0x01
				temp = v[j];
				v[j] = v[j+gap];
     754:	eb 81       	ldd	r30, Y+3	; 0x03
     756:	fc 81       	ldd	r31, Y+4	; 0x04
     758:	71 83       	std	Z+1, r23	; 0x01
     75a:	60 83       	st	Z, r22
				v[j+gap] = temp;
     75c:	11 96       	adiw	r26, 0x01	; 1
     75e:	5c 93       	st	X, r21
     760:	4e 93       	st	-X, r20
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
		for (i = gap; i < n; i++)
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
     762:	2e 19       	sub	r18, r14
     764:	3f 09       	sbc	r19, r15
     766:	c2 f0       	brmi	.+48     	; 0x798 <FUNCshellsort+0xb6>
     768:	f8 01       	movw	r30, r16
     76a:	40 81       	ld	r20, Z
     76c:	51 81       	ldd	r21, Z+1	; 0x01
     76e:	e9 81       	ldd	r30, Y+1	; 0x01
     770:	fa 81       	ldd	r31, Y+2	; 0x02
     772:	60 81       	ld	r22, Z
     774:	71 81       	ldd	r23, Z+1	; 0x01
     776:	08 0f       	add	r16, r24
     778:	19 1f       	adc	r17, r25
     77a:	e8 0f       	add	r30, r24
     77c:	f9 1f       	adc	r31, r25
     77e:	fa 83       	std	Y+2, r31	; 0x02
     780:	e9 83       	std	Y+1, r30	; 0x01
     782:	eb 81       	ldd	r30, Y+3	; 0x03
     784:	fc 81       	ldd	r31, Y+4	; 0x04
     786:	e8 0f       	add	r30, r24
     788:	f9 1f       	adc	r31, r25
     78a:	fc 83       	std	Y+4, r31	; 0x04
     78c:	eb 83       	std	Y+3, r30	; 0x03
     78e:	a8 0f       	add	r26, r24
     790:	b9 1f       	adc	r27, r25
     792:	64 17       	cp	r22, r20
     794:	75 07       	cpc	r23, r21
     796:	f4 f2       	brlt	.-68     	; 0x754 <FUNCshellsort+0x72>
     798:	ff ef       	ldi	r31, 0xFF	; 255
     79a:	cf 1a       	sub	r12, r31
     79c:	df 0a       	sbc	r13, r31
     79e:	22 e0       	ldi	r18, 0x02	; 2
     7a0:	a2 0e       	add	r10, r18
     7a2:	b1 1c       	adc	r11, r1
     7a4:	e2 e0       	ldi	r30, 0x02	; 2
     7a6:	8e 0e       	add	r8, r30
     7a8:	91 1c       	adc	r9, r1
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
		for (i = gap; i < n; i++)
     7aa:	c6 14       	cp	r12, r6
     7ac:	d7 04       	cpc	r13, r7
     7ae:	09 f0       	breq	.+2      	; 0x7b2 <FUNCshellsort+0xd0>
     7b0:	bd cf       	rjmp	.-134    	; 0x72c <FUNCshellsort+0x4a>
}
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
     7b2:	47 01       	movw	r8, r14
     7b4:	ff 20       	and	r15, r15
     7b6:	1c f4       	brge	.+6      	; 0x7be <FUNCshellsort+0xdc>
     7b8:	ff ef       	ldi	r31, 0xFF	; 255
     7ba:	8f 1a       	sub	r8, r31
     7bc:	9f 0a       	sbc	r9, r31
     7be:	95 94       	asr	r9
     7c0:	87 94       	ror	r8
     7c2:	18 14       	cp	r1, r8
     7c4:	19 04       	cpc	r1, r9
     7c6:	e4 f4       	brge	.+56     	; 0x800 <FUNCshellsort+0x11e>
     7c8:	74 01       	movw	r14, r8
     7ca:	01 c0       	rjmp	.+2      	; 0x7ce <FUNCshellsort+0xec>
     7cc:	74 01       	movw	r14, r8
		for (i = gap; i < n; i++)
     7ce:	82 14       	cp	r8, r2
     7d0:	93 04       	cpc	r9, r3
     7d2:	7c f7       	brge	.-34     	; 0x7b2 <FUNCshellsort+0xd0>
     7d4:	64 01       	movw	r12, r8
     7d6:	ce 18       	sub	r12, r14
     7d8:	df 08       	sbc	r13, r15
     7da:	56 01       	movw	r10, r12
     7dc:	aa 0c       	add	r10, r10
     7de:	bb 1c       	adc	r11, r11
     7e0:	a4 0c       	add	r10, r4
     7e2:	b5 1c       	adc	r11, r5
     7e4:	88 0c       	add	r8, r8
     7e6:	99 1c       	adc	r9, r9
     7e8:	84 0c       	add	r8, r4
     7ea:	95 1c       	adc	r9, r5
     7ec:	31 01       	movw	r6, r2
     7ee:	6e 18       	sub	r6, r14
     7f0:	7f 08       	sbc	r7, r15
     7f2:	c7 01       	movw	r24, r14
     7f4:	88 0f       	add	r24, r24
     7f6:	99 1f       	adc	r25, r25
     7f8:	91 95       	neg	r25
     7fa:	81 95       	neg	r24
     7fc:	91 09       	sbc	r25, r1
     7fe:	96 cf       	rjmp	.-212    	; 0x72c <FUNCshellsort+0x4a>
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
				temp = v[j];
				v[j] = v[j+gap];
				v[j+gap] = temp;
			}
}
     800:	0f 90       	pop	r0
     802:	0f 90       	pop	r0
     804:	0f 90       	pop	r0
     806:	0f 90       	pop	r0
     808:	df 91       	pop	r29
     80a:	cf 91       	pop	r28
     80c:	1f 91       	pop	r17
     80e:	0f 91       	pop	r16
     810:	ff 90       	pop	r15
     812:	ef 90       	pop	r14
     814:	df 90       	pop	r13
     816:	cf 90       	pop	r12
     818:	bf 90       	pop	r11
     81a:	af 90       	pop	r10
     81c:	9f 90       	pop	r9
     81e:	8f 90       	pop	r8
     820:	7f 90       	pop	r7
     822:	6f 90       	pop	r6
     824:	5f 90       	pop	r5
     826:	4f 90       	pop	r4
     828:	3f 90       	pop	r3
     82a:	2f 90       	pop	r2
     82c:	08 95       	ret

0000082e <FUNCpmax>:
	if(a1 > a2){
		biggest = a1;
	}else{
		biggest = a2;
	}
	return biggest;
     82e:	86 17       	cp	r24, r22
     830:	97 07       	cpc	r25, r23
     832:	0c f4       	brge	.+2      	; 0x836 <FUNCpmax+0x8>
     834:	cb 01       	movw	r24, r22
}
     836:	08 95       	ret

00000838 <FUNCgcd>:
// common divisor
int FUNCgcd (int u, int v)
{
     838:	9b 01       	movw	r18, r22
	int temp;
	while ( v != 0 ) {
     83a:	67 2b       	or	r22, r23
     83c:	11 f4       	brne	.+4      	; 0x842 <FUNCgcd+0xa>
     83e:	08 95       	ret
		temp = u % v;
		u = v;
		v = temp;
     840:	9a 01       	movw	r18, r20
// common divisor
int FUNCgcd (int u, int v)
{
	int temp;
	while ( v != 0 ) {
		temp = u % v;
     842:	b9 01       	movw	r22, r18
     844:	0e 94 a8 14 	call	0x2950	; 0x2950 <__divmodhi4>
     848:	ac 01       	movw	r20, r24
     84a:	82 2f       	mov	r24, r18
     84c:	93 2f       	mov	r25, r19
}
// common divisor
int FUNCgcd (int u, int v)
{
	int temp;
	while ( v != 0 ) {
     84e:	41 15       	cp	r20, r1
     850:	51 05       	cpc	r21, r1
     852:	b1 f7       	brne	.-20     	; 0x840 <FUNCgcd+0x8>
		temp = u % v;
		u = v;
		v = temp;
	}
	return u;
}
     854:	08 95       	ret

00000856 <FUNCstrToInt>:
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
     856:	fc 01       	movw	r30, r24
	int i, intValue, result = 0;
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
     858:	90 81       	ld	r25, Z
     85a:	80 ed       	ldi	r24, 0xD0	; 208
     85c:	89 0f       	add	r24, r25
     85e:	8a 30       	cpi	r24, 0x0A	; 10
     860:	d0 f4       	brcc	.+52     	; 0x896 <FUNCstrToInt+0x40>
     862:	31 96       	adiw	r30, 0x01	; 1
     864:	20 e0       	ldi	r18, 0x00	; 0
     866:	30 e0       	ldi	r19, 0x00	; 0
		intValue = string[i] - '0';
		result = result * 10 + intValue;
     868:	a9 01       	movw	r20, r18
     86a:	44 0f       	add	r20, r20
     86c:	55 1f       	adc	r21, r21
     86e:	22 0f       	add	r18, r18
     870:	33 1f       	adc	r19, r19
     872:	22 0f       	add	r18, r18
     874:	33 1f       	adc	r19, r19
     876:	22 0f       	add	r18, r18
     878:	33 1f       	adc	r19, r19
     87a:	42 0f       	add	r20, r18
     87c:	53 1f       	adc	r21, r19
     87e:	29 2f       	mov	r18, r25
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	20 53       	subi	r18, 0x30	; 48
     884:	31 09       	sbc	r19, r1
     886:	24 0f       	add	r18, r20
     888:	35 1f       	adc	r19, r21
}
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
	int i, intValue, result = 0;
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
     88a:	91 91       	ld	r25, Z+
     88c:	80 ed       	ldi	r24, 0xD0	; 208
     88e:	89 0f       	add	r24, r25
     890:	8a 30       	cpi	r24, 0x0A	; 10
     892:	50 f3       	brcs	.-44     	; 0x868 <FUNCstrToInt+0x12>
     894:	02 c0       	rjmp	.+4      	; 0x89a <FUNCstrToInt+0x44>
	return u;
}
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
	int i, intValue, result = 0;
     896:	20 e0       	ldi	r18, 0x00	; 0
     898:	30 e0       	ldi	r19, 0x00	; 0
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
		intValue = string[i] - '0';
		result = result * 10 + intValue;
	}
	return result;
}
     89a:	c9 01       	movw	r24, r18
     89c:	08 95       	ret

0000089e <FUNCfilter>:
uint8_t FUNCfilter(uint8_t mask, uint8_t data)
{
	uint8_t Z;
	Z=mask & data;
	return Z;
}
     89e:	86 23       	and	r24, r22
     8a0:	08 95       	ret

000008a2 <FUNCticks>:
// ticks
unsigned int FUNCticks(unsigned int num)
{
	unsigned int count;
	for(count=0;count<num;count++)
     8a2:	00 97       	sbiw	r24, 0x00	; 0
     8a4:	39 f0       	breq	.+14     	; 0x8b4 <FUNCticks+0x12>
     8a6:	20 e0       	ldi	r18, 0x00	; 0
     8a8:	30 e0       	ldi	r19, 0x00	; 0
     8aa:	2f 5f       	subi	r18, 0xFF	; 255
     8ac:	3f 4f       	sbci	r19, 0xFF	; 255
     8ae:	82 17       	cp	r24, r18
     8b0:	93 07       	cpc	r25, r19
     8b2:	d9 f7       	brne	.-10     	; 0x8aa <FUNCticks+0x8>
		;
	return count;
}
     8b4:	08 95       	ret

000008b6 <FUNCtwocomptoint8bit>:
// Two's Complement function
int FUNCtwocomptoint8bit(int twoscomp){
  
  //Let's see if the byte is negative
  if (twoscomp & 0B10000000){
     8b6:	87 ff       	sbrs	r24, 7
     8b8:	08 c0       	rjmp	.+16     	; 0x8ca <FUNCtwocomptoint8bit+0x14>
    //Invert
    twoscomp = ~twoscomp + 1;
     8ba:	91 95       	neg	r25
     8bc:	81 95       	neg	r24
     8be:	91 09       	sbc	r25, r1
	twoscomp = (twoscomp & 0B11111111);
    //Cast as int and multiply by negative one
    int value = (int)(twoscomp)*(-1);
     8c0:	99 27       	eor	r25, r25
     8c2:	91 95       	neg	r25
     8c4:	81 95       	neg	r24
     8c6:	91 09       	sbc	r25, r1
    return value;
     8c8:	08 95       	ret
    //Byte is non-negative, therefore convert to decimal and display
    //Make sure we are never over 1279
    twoscomp = (twoscomp & 0B01111111);
    //Cast as int and return
    int value = (int)(twoscomp);
    return value;
     8ca:	8f 77       	andi	r24, 0x7F	; 127
     8cc:	99 27       	eor	r25, r25
  }
}
     8ce:	08 95       	ret

000008d0 <FUNCtwocomptoint10bit>:
// Two's Complement function, shifts 10 bit binary to signed integers (-512 to 512)
int FUNCtwocomptoint10bit(int twoscomp){
	
  //Let's see if the byte is negative
  if (twoscomp & 0x200){
     8d0:	91 ff       	sbrs	r25, 1
     8d2:	08 c0       	rjmp	.+16     	; 0x8e4 <FUNCtwocomptoint10bit+0x14>
    //Invert
    twoscomp = ~twoscomp + 1;
     8d4:	91 95       	neg	r25
     8d6:	81 95       	neg	r24
     8d8:	91 09       	sbc	r25, r1
    twoscomp = (twoscomp & 0x3FF);
    //Cast as int and multiply by negative one
    int value = (int)(twoscomp)*(-1);
     8da:	93 70       	andi	r25, 0x03	; 3
     8dc:	91 95       	neg	r25
     8de:	81 95       	neg	r24
     8e0:	91 09       	sbc	r25, r1
    return value;
     8e2:	08 95       	ret
    //Byte is non-negative, therefore convert to decimal and display
    twoscomp = (twoscomp & 0x1FF);
    //Cast as int and return
    //Serial.println(twoscomp);
    int value = (int)(twoscomp);
    return value;
     8e4:	91 70       	andi	r25, 0x01	; 1
  }
}
     8e6:	08 95       	ret

000008e8 <FUNCtwocomptointnbit>:
// Two's Complement function, nbits
int FUNCtwocomptointnbit(int twoscomp, uint8_t nbits){
  unsigned int signmask;
  unsigned int mask;
  signmask = (1<<(nbits-1));
     8e8:	61 50       	subi	r22, 0x01	; 1
     8ea:	21 e0       	ldi	r18, 0x01	; 1
     8ec:	30 e0       	ldi	r19, 0x00	; 0
     8ee:	02 c0       	rjmp	.+4      	; 0x8f4 <FUNCtwocomptointnbit+0xc>
     8f0:	22 0f       	add	r18, r18
     8f2:	33 1f       	adc	r19, r19
     8f4:	6a 95       	dec	r22
     8f6:	e2 f7       	brpl	.-8      	; 0x8f0 <FUNCtwocomptointnbit+0x8>
  mask=signmask-1;
     8f8:	a9 01       	movw	r20, r18
     8fa:	41 50       	subi	r20, 0x01	; 1
     8fc:	51 09       	sbc	r21, r1
  //Let's see if the number is negative
  if (twoscomp & signmask){
     8fe:	b9 01       	movw	r22, r18
     900:	68 23       	and	r22, r24
     902:	79 23       	and	r23, r25
     904:	67 2b       	or	r22, r23
     906:	29 f0       	breq	.+10     	; 0x912 <FUNCtwocomptointnbit+0x2a>
	twoscomp &= mask;
    twoscomp -= signmask;
     908:	84 23       	and	r24, r20
     90a:	95 23       	and	r25, r21
     90c:	82 1b       	sub	r24, r18
     90e:	93 0b       	sbc	r25, r19
     910:	08 95       	ret
  }else{
	  twoscomp &= mask;
     912:	84 23       	and	r24, r20
     914:	95 23       	and	r25, r21
  }
  return twoscomp;
}
     916:	08 95       	ret

00000918 <FUNCdec2bcd>:
// Convert Decimal to Binary Coded Decimal (BCD)
char FUNCdec2bcd(char num)
{
	return ((num/10 * 16) + (num % 10));
     918:	9d ec       	ldi	r25, 0xCD	; 205
     91a:	89 9f       	mul	r24, r25
     91c:	91 2d       	mov	r25, r1
     91e:	11 24       	eor	r1, r1
     920:	96 95       	lsr	r25
     922:	96 95       	lsr	r25
     924:	96 95       	lsr	r25
     926:	39 2f       	mov	r19, r25
     928:	33 0f       	add	r19, r19
     92a:	23 2f       	mov	r18, r19
     92c:	22 0f       	add	r18, r18
     92e:	22 0f       	add	r18, r18
     930:	23 0f       	add	r18, r19
     932:	82 1b       	sub	r24, r18
}
     934:	20 e1       	ldi	r18, 0x10	; 16
     936:	92 9f       	mul	r25, r18
     938:	80 0d       	add	r24, r0
     93a:	11 24       	eor	r1, r1
     93c:	08 95       	ret

0000093e <FUNCbcd2dec>:
// Convert Binary Coded Decimal (BCD) to Decimal
char FUNCbcd2dec(char num)
{
	return ((num/16 * 10) + (num % 16));
     93e:	98 2f       	mov	r25, r24
     940:	92 95       	swap	r25
     942:	9f 70       	andi	r25, 0x0F	; 15
     944:	99 0f       	add	r25, r25
     946:	29 2f       	mov	r18, r25
     948:	22 0f       	add	r18, r18
     94a:	22 0f       	add	r18, r18
     94c:	92 0f       	add	r25, r18
     94e:	8f 70       	andi	r24, 0x0F	; 15
}
     950:	89 0f       	add	r24, r25
     952:	08 95       	ret

00000954 <FUNCresizestr>:
char* FUNCresizestr(char *string, int size)
{
     954:	fc 01       	movw	r30, r24
	int i;
	FUNCstr[size]='\0';
     956:	db 01       	movw	r26, r22
     958:	a1 58       	subi	r26, 0x81	; 129
     95a:	bd 4f       	sbci	r27, 0xFD	; 253
     95c:	1c 92       	st	X, r1
	for(i=0;i<size;i++){
     95e:	16 16       	cp	r1, r22
     960:	17 06       	cpc	r1, r23
     962:	14 f5       	brge	.+68     	; 0x9a8 <FUNCresizestr+0x54>
		if(*(string+i)=='\0'){
     964:	90 81       	ld	r25, Z
     966:	91 11       	cpse	r25, r1
     968:	0c c0       	rjmp	.+24     	; 0x982 <FUNCresizestr+0x2e>
     96a:	17 c0       	rjmp	.+46     	; 0x99a <FUNCresizestr+0x46>
     96c:	91 91       	ld	r25, Z+
     96e:	91 11       	cpse	r25, r1
     970:	0d c0       	rjmp	.+26     	; 0x98c <FUNCresizestr+0x38>
     972:	15 c0       	rjmp	.+42     	; 0x99e <FUNCresizestr+0x4a>
			for(;i<size;i++){
				FUNCstr[i]=' ';
     974:	81 93       	st	Z+, r24
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
		if(*(string+i)=='\0'){
			for(;i<size;i++){
     976:	2f 5f       	subi	r18, 0xFF	; 255
     978:	3f 4f       	sbci	r19, 0xFF	; 255
     97a:	26 17       	cp	r18, r22
     97c:	37 07       	cpc	r19, r23
     97e:	d4 f3       	brlt	.-12     	; 0x974 <FUNCresizestr+0x20>
     980:	13 c0       	rjmp	.+38     	; 0x9a8 <FUNCresizestr+0x54>
     982:	af e7       	ldi	r26, 0x7F	; 127
     984:	b2 e0       	ldi	r27, 0x02	; 2
     986:	31 96       	adiw	r30, 0x01	; 1
char* FUNCresizestr(char *string, int size)
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
		if(*(string+i)=='\0'){
     988:	20 e0       	ldi	r18, 0x00	; 0
     98a:	30 e0       	ldi	r19, 0x00	; 0
			for(;i<size;i++){
				FUNCstr[i]=' ';
			}
			break;
		}
		FUNCstr[i]=*(string+i);
     98c:	9d 93       	st	X+, r25
}
char* FUNCresizestr(char *string, int size)
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
     98e:	2f 5f       	subi	r18, 0xFF	; 255
     990:	3f 4f       	sbci	r19, 0xFF	; 255
     992:	62 17       	cp	r22, r18
     994:	73 07       	cpc	r23, r19
     996:	51 f7       	brne	.-44     	; 0x96c <FUNCresizestr+0x18>
     998:	07 c0       	rjmp	.+14     	; 0x9a8 <FUNCresizestr+0x54>
     99a:	20 e0       	ldi	r18, 0x00	; 0
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	f9 01       	movw	r30, r18
     9a0:	e1 58       	subi	r30, 0x81	; 129
     9a2:	fd 4f       	sbci	r31, 0xFD	; 253
		if(*(string+i)=='\0'){
			for(;i<size;i++){
				FUNCstr[i]=' ';
     9a4:	80 e2       	ldi	r24, 0x20	; 32
     9a6:	e6 cf       	rjmp	.-52     	; 0x974 <FUNCresizestr+0x20>
			break;
		}
		FUNCstr[i]=*(string+i);
	}
	return FUNCstr;
}
     9a8:	8f e7       	ldi	r24, 0x7F	; 127
     9aa:	92 e0       	ldi	r25, 0x02	; 2
     9ac:	08 95       	ret

000009ae <FUNCtrimmer>:
long FUNCtrimmer(long x, long in_min, long in_max, long out_min, long out_max)
/*
	same as arduino map function.
*/
{
     9ae:	4f 92       	push	r4
     9b0:	5f 92       	push	r5
     9b2:	6f 92       	push	r6
     9b4:	7f 92       	push	r7
     9b6:	af 92       	push	r10
     9b8:	bf 92       	push	r11
     9ba:	cf 92       	push	r12
     9bc:	df 92       	push	r13
     9be:	ef 92       	push	r14
     9c0:	ff 92       	push	r15
     9c2:	0f 93       	push	r16
     9c4:	1f 93       	push	r17
     9c6:	cf 93       	push	r28
     9c8:	df 93       	push	r29
     9ca:	cd b7       	in	r28, 0x3d	; 61
     9cc:	de b7       	in	r29, 0x3e	; 62
     9ce:	29 01       	movw	r4, r18
     9d0:	3a 01       	movw	r6, r20
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     9d2:	9b 01       	movw	r18, r22
     9d4:	ac 01       	movw	r20, r24
     9d6:	24 19       	sub	r18, r4
     9d8:	35 09       	sbc	r19, r5
     9da:	46 09       	sbc	r20, r6
     9dc:	57 09       	sbc	r21, r7
     9de:	89 89       	ldd	r24, Y+17	; 0x11
     9e0:	9a 89       	ldd	r25, Y+18	; 0x12
     9e2:	ab 89       	ldd	r26, Y+19	; 0x13
     9e4:	bc 89       	ldd	r27, Y+20	; 0x14
     9e6:	bc 01       	movw	r22, r24
     9e8:	cd 01       	movw	r24, r26
     9ea:	6a 19       	sub	r22, r10
     9ec:	7b 09       	sbc	r23, r11
     9ee:	8c 09       	sbc	r24, r12
     9f0:	9d 09       	sbc	r25, r13
     9f2:	0e 94 85 14 	call	0x290a	; 0x290a <__mulsi3>
     9f6:	a8 01       	movw	r20, r16
     9f8:	97 01       	movw	r18, r14
     9fa:	24 19       	sub	r18, r4
     9fc:	35 09       	sbc	r19, r5
     9fe:	46 09       	sbc	r20, r6
     a00:	57 09       	sbc	r21, r7
     a02:	0e 94 dd 14 	call	0x29ba	; 0x29ba <__divmodsi4>
     a06:	ca 01       	movw	r24, r20
     a08:	b9 01       	movw	r22, r18
     a0a:	6a 0d       	add	r22, r10
     a0c:	7b 1d       	adc	r23, r11
     a0e:	8c 1d       	adc	r24, r12
     a10:	9d 1d       	adc	r25, r13
}
     a12:	df 91       	pop	r29
     a14:	cf 91       	pop	r28
     a16:	1f 91       	pop	r17
     a18:	0f 91       	pop	r16
     a1a:	ff 90       	pop	r15
     a1c:	ef 90       	pop	r14
     a1e:	df 90       	pop	r13
     a20:	cf 90       	pop	r12
     a22:	bf 90       	pop	r11
     a24:	af 90       	pop	r10
     a26:	7f 90       	pop	r7
     a28:	6f 90       	pop	r6
     a2a:	5f 90       	pop	r5
     a2c:	4f 90       	pop	r4
     a2e:	08 95       	ret

00000a30 <Pwr>:
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
     a30:	70 e0       	ldi	r23, 0x00	; 0
     a32:	61 15       	cp	r22, r1
     a34:	71 05       	cpc	r23, r1
     a36:	99 f0       	breq	.+38     	; 0xa5e <Pwr+0x2e>
     a38:	41 e0       	ldi	r20, 0x01	; 1
     a3a:	50 e0       	ldi	r21, 0x00	; 0
     a3c:	21 e0       	ldi	r18, 0x01	; 1
     a3e:	30 e0       	ldi	r19, 0x00	; 0
        p = p * bs;
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	fa 01       	movw	r30, r20
     a44:	e8 9f       	mul	r30, r24
     a46:	a0 01       	movw	r20, r0
     a48:	e9 9f       	mul	r30, r25
     a4a:	50 0d       	add	r21, r0
     a4c:	f8 9f       	mul	r31, r24
     a4e:	50 0d       	add	r21, r0
     a50:	11 24       	eor	r1, r1
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
     a52:	2f 5f       	subi	r18, 0xFF	; 255
     a54:	3f 4f       	sbci	r19, 0xFF	; 255
     a56:	62 17       	cp	r22, r18
     a58:	73 07       	cpc	r23, r19
     a5a:	98 f7       	brcc	.-26     	; 0xa42 <Pwr+0x12>
     a5c:	02 c0       	rjmp	.+4      	; 0xa62 <Pwr+0x32>
}
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
     a5e:	41 e0       	ldi	r20, 0x01	; 1
     a60:	50 e0       	ldi	r21, 0x00	; 0
    for (i = 1; i <= n; ++i)
        p = p * bs;
    return p;
}
     a62:	ca 01       	movw	r24, r20
     a64:	08 95       	ret

00000a66 <StringLength>:
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
	while ( string[count] != '\0' )
     a66:	fc 01       	movw	r30, r24
     a68:	20 81       	ld	r18, Z
     a6a:	22 23       	and	r18, r18
     a6c:	41 f0       	breq	.+16     	; 0xa7e <StringLength+0x18>
     a6e:	31 96       	adiw	r30, 0x01	; 1
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	90 e0       	ldi	r25, 0x00	; 0
		++count;
     a74:	01 96       	adiw	r24, 0x01	; 1
}
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
	while ( string[count] != '\0' )
     a76:	21 91       	ld	r18, Z+
     a78:	21 11       	cpse	r18, r1
     a7a:	fc cf       	rjmp	.-8      	; 0xa74 <StringLength+0xe>
     a7c:	08 95       	ret
    return p;
}
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	90 e0       	ldi	r25, 0x00	; 0
	while ( string[count] != '\0' )
		++count;
	return count;
}
     a82:	08 95       	ret

00000a84 <FUNCtrim>:
	Reverse(FUNCstr);
	return FUNCstr;
}
// trim: remove trailing blanks, tabs, newlines
int FUNCtrim(char s[])
{
     a84:	cf 93       	push	r28
     a86:	df 93       	push	r29
     a88:	ec 01       	movw	r28, r24
	int n;
	for (n = StringLength(s)-1; n >= 0; n--)
     a8a:	ed df       	rcall	.-38     	; 0xa66 <StringLength>
     a8c:	9c 01       	movw	r18, r24
     a8e:	21 50       	subi	r18, 0x01	; 1
     a90:	31 09       	sbc	r19, r1
     a92:	62 f0       	brmi	.+24     	; 0xaac <FUNCtrim+0x28>
     a94:	fe 01       	movw	r30, r28
     a96:	e8 0f       	add	r30, r24
     a98:	f9 1f       	adc	r31, r25
		if (s[n] != ' ' && s[n] != '\t' && s[n] != '\n')
     a9a:	92 91       	ld	r25, -Z
     a9c:	90 32       	cpi	r25, 0x20	; 32
     a9e:	19 f0       	breq	.+6      	; 0xaa6 <FUNCtrim+0x22>
     aa0:	99 50       	subi	r25, 0x09	; 9
     aa2:	92 30       	cpi	r25, 0x02	; 2
     aa4:	18 f4       	brcc	.+6      	; 0xaac <FUNCtrim+0x28>
}
// trim: remove trailing blanks, tabs, newlines
int FUNCtrim(char s[])
{
	int n;
	for (n = StringLength(s)-1; n >= 0; n--)
     aa6:	21 50       	subi	r18, 0x01	; 1
     aa8:	31 09       	sbc	r19, r1
     aaa:	b8 f7       	brcc	.-18     	; 0xa9a <FUNCtrim+0x16>
		if (s[n] != ' ' && s[n] != '\t' && s[n] != '\n')
			break;
	s[n+1] = '\0';
     aac:	c2 0f       	add	r28, r18
     aae:	d3 1f       	adc	r29, r19
     ab0:	19 82       	std	Y+1, r1	; 0x01
	return n;
}
     ab2:	c9 01       	movw	r24, r18
     ab4:	df 91       	pop	r29
     ab6:	cf 91       	pop	r28
     ab8:	08 95       	ret

00000aba <Reverse>:
		++count;
	return count;
}
// reverse: reverse string s in place
void Reverse(char s[])
{
     aba:	cf 93       	push	r28
     abc:	df 93       	push	r29
     abe:	ec 01       	movw	r28, r24
	int c, i, j;
	for (i = 0, j = StringLength(s)-1; i < j; i++, j--){
     ac0:	d2 df       	rcall	.-92     	; 0xa66 <StringLength>
     ac2:	9c 01       	movw	r18, r24
     ac4:	21 50       	subi	r18, 0x01	; 1
     ac6:	31 09       	sbc	r19, r1
     ac8:	12 16       	cp	r1, r18
     aca:	13 06       	cpc	r1, r19
     acc:	84 f4       	brge	.+32     	; 0xaee <Reverse+0x34>
     ace:	de 01       	movw	r26, r28
     ad0:	a8 0f       	add	r26, r24
     ad2:	b9 1f       	adc	r27, r25
     ad4:	fe 01       	movw	r30, r28
     ad6:	80 e0       	ldi	r24, 0x00	; 0
     ad8:	90 e0       	ldi	r25, 0x00	; 0
		c = s[i];
     ada:	40 81       	ld	r20, Z
		s[i] = s[j];
     adc:	5e 91       	ld	r21, -X
     ade:	51 93       	st	Z+, r21
		s[j] = c;
     ae0:	4c 93       	st	X, r20
}
// reverse: reverse string s in place
void Reverse(char s[])
{
	int c, i, j;
	for (i = 0, j = StringLength(s)-1; i < j; i++, j--){
     ae2:	01 96       	adiw	r24, 0x01	; 1
     ae4:	21 50       	subi	r18, 0x01	; 1
     ae6:	31 09       	sbc	r19, r1
     ae8:	82 17       	cp	r24, r18
     aea:	93 07       	cpc	r25, r19
     aec:	b4 f3       	brlt	.-20     	; 0xada <Reverse+0x20>
		c = s[i];
		s[i] = s[j];
		s[j] = c;
	}
}
     aee:	df 91       	pop	r29
     af0:	cf 91       	pop	r28
     af2:	08 95       	ret

00000af4 <FUNCi32toa>:
				v[j+gap] = temp;
			}
}
// i32toa: convert n to characters in s
char* FUNCi32toa(int32_t n)
{
     af4:	8f 92       	push	r8
     af6:	9f 92       	push	r9
     af8:	af 92       	push	r10
     afa:	bf 92       	push	r11
     afc:	cf 92       	push	r12
     afe:	df 92       	push	r13
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	cf 93       	push	r28
     b0a:	df 93       	push	r29
     b0c:	6b 01       	movw	r12, r22
     b0e:	7c 01       	movw	r14, r24
     b10:	dc 01       	movw	r26, r24
     b12:	cb 01       	movw	r24, r22
     b14:	ff 20       	and	r15, r15
     b16:	3c f4       	brge	.+14     	; 0xb26 <FUNCi32toa+0x32>
     b18:	88 27       	eor	r24, r24
     b1a:	99 27       	eor	r25, r25
     b1c:	dc 01       	movw	r26, r24
     b1e:	8c 19       	sub	r24, r12
     b20:	9d 09       	sbc	r25, r13
     b22:	ae 09       	sbc	r26, r14
     b24:	bf 09       	sbc	r27, r15
     b26:	bc 01       	movw	r22, r24
     b28:	cd 01       	movw	r24, r26
     b2a:	10 e0       	ldi	r17, 0x00	; 0
	int32_t sign;
	if ((sign = n) < 0) // record sign
	n = -n; // make n positive
	i = 0;
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
     b2c:	0f 2e       	mov	r0, r31
     b2e:	fa e0       	ldi	r31, 0x0A	; 10
     b30:	8f 2e       	mov	r8, r31
     b32:	91 2c       	mov	r9, r1
     b34:	a1 2c       	mov	r10, r1
     b36:	b1 2c       	mov	r11, r1
     b38:	f0 2d       	mov	r31, r0
     b3a:	01 c0       	rjmp	.+2      	; 0xb3e <FUNCi32toa+0x4a>
     b3c:	10 2f       	mov	r17, r16
     b3e:	01 e0       	ldi	r16, 0x01	; 1
     b40:	01 0f       	add	r16, r17
     b42:	c1 2f       	mov	r28, r17
     b44:	d0 e0       	ldi	r29, 0x00	; 0
     b46:	c1 58       	subi	r28, 0x81	; 129
     b48:	dd 4f       	sbci	r29, 0xFD	; 253
     b4a:	a5 01       	movw	r20, r10
     b4c:	94 01       	movw	r18, r8
     b4e:	0e 94 dd 14 	call	0x29ba	; 0x29ba <__divmodsi4>
     b52:	60 5d       	subi	r22, 0xD0	; 208
     b54:	68 83       	st	Y, r22
	}while ((n /= 10) > 0); // delete it
     b56:	62 2f       	mov	r22, r18
     b58:	73 2f       	mov	r23, r19
     b5a:	84 2f       	mov	r24, r20
     b5c:	95 2f       	mov	r25, r21
     b5e:	16 16       	cp	r1, r22
     b60:	17 06       	cpc	r1, r23
     b62:	18 06       	cpc	r1, r24
     b64:	19 06       	cpc	r1, r25
     b66:	54 f3       	brlt	.-44     	; 0xb3c <FUNCi32toa+0x48>
	if (sign < 0)
     b68:	ff 20       	and	r15, r15
     b6a:	44 f4       	brge	.+16     	; 0xb7c <FUNCi32toa+0x88>
	FUNCstr[i++] = '-';
     b6c:	e0 2f       	mov	r30, r16
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	e1 58       	subi	r30, 0x81	; 129
     b72:	fd 4f       	sbci	r31, 0xFD	; 253
     b74:	8d e2       	ldi	r24, 0x2D	; 45
     b76:	80 83       	st	Z, r24
     b78:	02 e0       	ldi	r16, 0x02	; 2
     b7a:	01 0f       	add	r16, r17
	FUNCstr[i] = '\0';
     b7c:	e0 2f       	mov	r30, r16
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	e1 58       	subi	r30, 0x81	; 129
     b82:	fd 4f       	sbci	r31, 0xFD	; 253
     b84:	10 82       	st	Z, r1
	Reverse(FUNCstr);
     b86:	8f e7       	ldi	r24, 0x7F	; 127
     b88:	92 e0       	ldi	r25, 0x02	; 2
     b8a:	97 df       	rcall	.-210    	; 0xaba <Reverse>
	return FUNCstr;
}
     b8c:	8f e7       	ldi	r24, 0x7F	; 127
     b8e:	92 e0       	ldi	r25, 0x02	; 2
     b90:	df 91       	pop	r29
     b92:	cf 91       	pop	r28
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	df 90       	pop	r13
     b9e:	cf 90       	pop	r12
     ba0:	bf 90       	pop	r11
     ba2:	af 90       	pop	r10
     ba4:	9f 90       	pop	r9
     ba6:	8f 90       	pop	r8
     ba8:	08 95       	ret

00000baa <FUNCi16toa>:
// i16toa: convert n to characters in s
char* FUNCi16toa(int16_t n)
{
     baa:	0f 93       	push	r16
     bac:	1f 93       	push	r17
     bae:	cf 93       	push	r28
     bb0:	df 93       	push	r29
     bb2:	ec 01       	movw	r28, r24
     bb4:	99 23       	and	r25, r25
     bb6:	24 f4       	brge	.+8      	; 0xbc0 <FUNCi16toa+0x16>
     bb8:	88 27       	eor	r24, r24
     bba:	99 27       	eor	r25, r25
     bbc:	8c 1b       	sub	r24, r28
     bbe:	9d 0b       	sbc	r25, r29
     bc0:	20 e0       	ldi	r18, 0x00	; 0
	int16_t sign;
	if ((sign = n) < 0) // record sign
		n = -n; // make n positive
	i = 0;
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
     bc2:	0a e0       	ldi	r16, 0x0A	; 10
     bc4:	10 e0       	ldi	r17, 0x00	; 0
     bc6:	01 c0       	rjmp	.+2      	; 0xbca <FUNCi16toa+0x20>
     bc8:	23 2f       	mov	r18, r19
     bca:	31 e0       	ldi	r19, 0x01	; 1
     bcc:	32 0f       	add	r19, r18
     bce:	e2 2f       	mov	r30, r18
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	e1 58       	subi	r30, 0x81	; 129
     bd4:	fd 4f       	sbci	r31, 0xFD	; 253
     bd6:	b8 01       	movw	r22, r16
     bd8:	0e 94 a8 14 	call	0x2950	; 0x2950 <__divmodhi4>
     bdc:	80 5d       	subi	r24, 0xD0	; 208
     bde:	80 83       	st	Z, r24
	}while ((n /= 10) > 0); // delete it
     be0:	86 2f       	mov	r24, r22
     be2:	97 2f       	mov	r25, r23
     be4:	18 16       	cp	r1, r24
     be6:	19 06       	cpc	r1, r25
     be8:	7c f3       	brlt	.-34     	; 0xbc8 <FUNCi16toa+0x1e>
	if (sign < 0)
     bea:	dd 23       	and	r29, r29
     bec:	44 f4       	brge	.+16     	; 0xbfe <FUNCi16toa+0x54>
		FUNCstr[i++] = '-';
     bee:	e3 2f       	mov	r30, r19
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	e1 58       	subi	r30, 0x81	; 129
     bf4:	fd 4f       	sbci	r31, 0xFD	; 253
     bf6:	8d e2       	ldi	r24, 0x2D	; 45
     bf8:	80 83       	st	Z, r24
     bfa:	32 e0       	ldi	r19, 0x02	; 2
     bfc:	32 0f       	add	r19, r18
	FUNCstr[i] = '\0';
     bfe:	e3 2f       	mov	r30, r19
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	e1 58       	subi	r30, 0x81	; 129
     c04:	fd 4f       	sbci	r31, 0xFD	; 253
     c06:	10 82       	st	Z, r1
	Reverse(FUNCstr);
     c08:	8f e7       	ldi	r24, 0x7F	; 127
     c0a:	92 e0       	ldi	r25, 0x02	; 2
     c0c:	56 df       	rcall	.-340    	; 0xaba <Reverse>
	return FUNCstr;
}
     c0e:	8f e7       	ldi	r24, 0x7F	; 127
     c10:	92 e0       	ldi	r25, 0x02	; 2
     c12:	df 91       	pop	r29
     c14:	cf 91       	pop	r28
     c16:	1f 91       	pop	r17
     c18:	0f 91       	pop	r16
     c1a:	08 95       	ret

00000c1c <FUNCui16toa>:
// ui16toa: convert n to characters in s
char* FUNCui16toa(uint16_t n)
{
     c1c:	cf 93       	push	r28
     c1e:	ac 01       	movw	r20, r24
	uint8_t i;
	i = 0;
     c20:	e0 e0       	ldi	r30, 0x00	; 0
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
     c22:	c1 e0       	ldi	r28, 0x01	; 1
     c24:	ce 0f       	add	r28, r30
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	e1 58       	subi	r30, 0x81	; 129
     c2a:	fd 4f       	sbci	r31, 0xFD	; 253
     c2c:	9a 01       	movw	r18, r20
     c2e:	ad ec       	ldi	r26, 0xCD	; 205
     c30:	bc ec       	ldi	r27, 0xCC	; 204
     c32:	0e 94 02 15 	call	0x2a04	; 0x2a04 <__umulhisi3>
     c36:	96 95       	lsr	r25
     c38:	87 95       	ror	r24
     c3a:	96 95       	lsr	r25
     c3c:	87 95       	ror	r24
     c3e:	96 95       	lsr	r25
     c40:	87 95       	ror	r24
     c42:	9c 01       	movw	r18, r24
     c44:	22 0f       	add	r18, r18
     c46:	33 1f       	adc	r19, r19
     c48:	88 0f       	add	r24, r24
     c4a:	99 1f       	adc	r25, r25
     c4c:	88 0f       	add	r24, r24
     c4e:	99 1f       	adc	r25, r25
     c50:	88 0f       	add	r24, r24
     c52:	99 1f       	adc	r25, r25
     c54:	82 0f       	add	r24, r18
     c56:	93 1f       	adc	r25, r19
     c58:	9a 01       	movw	r18, r20
     c5a:	28 1b       	sub	r18, r24
     c5c:	39 0b       	sbc	r19, r25
     c5e:	c9 01       	movw	r24, r18
     c60:	80 5d       	subi	r24, 0xD0	; 208
     c62:	80 83       	st	Z, r24
	}while ((n /= 10) > 0); // delete it
     c64:	9a 01       	movw	r18, r20
     c66:	0e 94 02 15 	call	0x2a04	; 0x2a04 <__umulhisi3>
     c6a:	ac 01       	movw	r20, r24
     c6c:	56 95       	lsr	r21
     c6e:	47 95       	ror	r20
     c70:	56 95       	lsr	r21
     c72:	47 95       	ror	r20
     c74:	56 95       	lsr	r21
     c76:	47 95       	ror	r20
char* FUNCui16toa(uint16_t n)
{
	uint8_t i;
	i = 0;
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
     c78:	ec 2f       	mov	r30, r28
	}while ((n /= 10) > 0); // delete it
     c7a:	41 15       	cp	r20, r1
     c7c:	51 05       	cpc	r21, r1
     c7e:	89 f6       	brne	.-94     	; 0xc22 <FUNCui16toa+0x6>
	FUNCstr[i] = '\0';
     c80:	ec 2f       	mov	r30, r28
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	e1 58       	subi	r30, 0x81	; 129
     c86:	fd 4f       	sbci	r31, 0xFD	; 253
     c88:	10 82       	st	Z, r1
	Reverse(FUNCstr);
     c8a:	8f e7       	ldi	r24, 0x7F	; 127
     c8c:	92 e0       	ldi	r25, 0x02	; 2
     c8e:	15 df       	rcall	.-470    	; 0xaba <Reverse>
	return FUNCstr;
}
     c90:	8f e7       	ldi	r24, 0x7F	; 127
     c92:	92 e0       	ldi	r25, 0x02	; 2
     c94:	cf 91       	pop	r28
     c96:	08 95       	ret

00000c98 <FUNCbcd2bin>:
		s[j] = c;
	}
}
unsigned char FUNCbcd2bin(unsigned char val)
{
	return (val & 0x0f) + (val >> 4) * 10;
     c98:	98 2f       	mov	r25, r24
     c9a:	92 95       	swap	r25
     c9c:	9f 70       	andi	r25, 0x0F	; 15
     c9e:	99 0f       	add	r25, r25
     ca0:	29 2f       	mov	r18, r25
     ca2:	22 0f       	add	r18, r18
     ca4:	22 0f       	add	r18, r18
     ca6:	92 0f       	add	r25, r18
     ca8:	8f 70       	andi	r24, 0x0F	; 15
}
     caa:	89 0f       	add	r24, r25
     cac:	08 95       	ret

00000cae <FUNCbin2bcd>:
unsigned char FUNCbin2bcd(unsigned val)
{
     cae:	ac 01       	movw	r20, r24
	return ((val / 10) << 4) + val % 10;
     cb0:	9c 01       	movw	r18, r24
     cb2:	ad ec       	ldi	r26, 0xCD	; 205
     cb4:	bc ec       	ldi	r27, 0xCC	; 204
     cb6:	0e 94 02 15 	call	0x2a04	; 0x2a04 <__umulhisi3>
     cba:	96 95       	lsr	r25
     cbc:	87 95       	ror	r24
     cbe:	96 95       	lsr	r25
     cc0:	87 95       	ror	r24
     cc2:	96 95       	lsr	r25
     cc4:	87 95       	ror	r24
     cc6:	bc 01       	movw	r22, r24
     cc8:	66 0f       	add	r22, r22
     cca:	77 1f       	adc	r23, r23
     ccc:	9c 01       	movw	r18, r24
     cce:	22 0f       	add	r18, r18
     cd0:	33 1f       	adc	r19, r19
     cd2:	22 0f       	add	r18, r18
     cd4:	33 1f       	adc	r19, r19
     cd6:	22 0f       	add	r18, r18
     cd8:	33 1f       	adc	r19, r19
     cda:	26 0f       	add	r18, r22
     cdc:	37 1f       	adc	r19, r23
     cde:	42 1b       	sub	r20, r18
     ce0:	53 0b       	sbc	r21, r19
}
     ce2:	34 2f       	mov	r19, r20
     ce4:	20 e1       	ldi	r18, 0x10	; 16
     ce6:	82 9f       	mul	r24, r18
     ce8:	30 0d       	add	r19, r0
     cea:	11 24       	eor	r1, r1
     cec:	83 2f       	mov	r24, r19
     cee:	08 95       	ret

00000cf0 <FUNCgcd1>:
long FUNCgcd1(long a, long b)
{
     cf0:	cf 92       	push	r12
     cf2:	df 92       	push	r13
     cf4:	ef 92       	push	r14
     cf6:	ff 92       	push	r15
     cf8:	cf 93       	push	r28
     cfa:	df 93       	push	r29
     cfc:	cd b7       	in	r28, 0x3d	; 61
     cfe:	de b7       	in	r29, 0x3e	; 62
     d00:	28 97       	sbiw	r28, 0x08	; 8
     d02:	0f b6       	in	r0, 0x3f	; 63
     d04:	f8 94       	cli
     d06:	de bf       	out	0x3e, r29	; 62
     d08:	0f be       	out	0x3f, r0	; 63
     d0a:	cd bf       	out	0x3d, r28	; 61
     d0c:	6b 01       	movw	r12, r22
     d0e:	7c 01       	movw	r14, r24
     d10:	69 83       	std	Y+1, r22	; 0x01
     d12:	7a 83       	std	Y+2, r23	; 0x02
     d14:	8b 83       	std	Y+3, r24	; 0x03
     d16:	9c 83       	std	Y+4, r25	; 0x04
     d18:	2d 83       	std	Y+5, r18	; 0x05
     d1a:	3e 83       	std	Y+6, r19	; 0x06
     d1c:	4f 83       	std	Y+7, r20	; 0x07
     d1e:	58 87       	std	Y+8, r21	; 0x08
	long r;
	if (a < b)
     d20:	c2 16       	cp	r12, r18
     d22:	d3 06       	cpc	r13, r19
     d24:	e4 06       	cpc	r14, r20
     d26:	f5 06       	cpc	r15, r21
     d28:	34 f4       	brge	.+12     	; 0xd36 <FUNCgcd1+0x46>
		FUNCswap(&a, &b);
     d2a:	be 01       	movw	r22, r28
     d2c:	6b 5f       	subi	r22, 0xFB	; 251
     d2e:	7f 4f       	sbci	r23, 0xFF	; 255
     d30:	ce 01       	movw	r24, r28
     d32:	01 96       	adiw	r24, 0x01	; 1
     d34:	85 dc       	rcall	.-1782   	; 0x640 <FUNCswap>
	if (!b){
     d36:	8d 81       	ldd	r24, Y+5	; 0x05
     d38:	9e 81       	ldd	r25, Y+6	; 0x06
     d3a:	af 81       	ldd	r26, Y+7	; 0x07
     d3c:	b8 85       	ldd	r27, Y+8	; 0x08
     d3e:	89 2b       	or	r24, r25
     d40:	8a 2b       	or	r24, r26
     d42:	8b 2b       	or	r24, r27
     d44:	71 f4       	brne	.+28     	; 0xd62 <FUNCgcd1+0x72>
		while ((r = a % b) != 0) {
     d46:	69 81       	ldd	r22, Y+1	; 0x01
     d48:	7a 81       	ldd	r23, Y+2	; 0x02
     d4a:	8b 81       	ldd	r24, Y+3	; 0x03
     d4c:	9c 81       	ldd	r25, Y+4	; 0x04
     d4e:	20 e0       	ldi	r18, 0x00	; 0
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	a9 01       	movw	r20, r18
     d54:	0e 94 dd 14 	call	0x29ba	; 0x29ba <__divmodsi4>
     d58:	61 15       	cp	r22, r1
     d5a:	71 05       	cpc	r23, r1
     d5c:	81 05       	cpc	r24, r1
     d5e:	91 05       	cpc	r25, r1
     d60:	29 f4       	brne	.+10     	; 0xd6c <FUNCgcd1+0x7c>
			a = b;
			b = r;
		}
	}	
	return b;
     d62:	6d 81       	ldd	r22, Y+5	; 0x05
     d64:	7e 81       	ldd	r23, Y+6	; 0x06
     d66:	8f 81       	ldd	r24, Y+7	; 0x07
     d68:	98 85       	ldd	r25, Y+8	; 0x08
     d6a:	05 c0       	rjmp	.+10     	; 0xd76 <FUNCgcd1+0x86>
	if (a < b)
		FUNCswap(&a, &b);
	if (!b){
		while ((r = a % b) != 0) {
			a = b;
			b = r;
     d6c:	6d 83       	std	Y+5, r22	; 0x05
     d6e:	7e 83       	std	Y+6, r23	; 0x06
     d70:	8f 83       	std	Y+7, r24	; 0x07
     d72:	98 87       	std	Y+8, r25	; 0x08
     d74:	f6 cf       	rjmp	.-20     	; 0xd62 <FUNCgcd1+0x72>
		}
	}	
	return b;
}
     d76:	28 96       	adiw	r28, 0x08	; 8
     d78:	0f b6       	in	r0, 0x3f	; 63
     d7a:	f8 94       	cli
     d7c:	de bf       	out	0x3e, r29	; 62
     d7e:	0f be       	out	0x3f, r0	; 63
     d80:	cd bf       	out	0x3d, r28	; 61
     d82:	df 91       	pop	r29
     d84:	cf 91       	pop	r28
     d86:	ff 90       	pop	r15
     d88:	ef 90       	pop	r14
     d8a:	df 90       	pop	r13
     d8c:	cf 90       	pop	r12
     d8e:	08 95       	ret

00000d90 <FUNCpincheck>:
	uint8_t lh;
	if(port & (1<<pin))
		lh=1;
	else
		lh=0;
	return lh;
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <FUNCpincheck+0x8>
     d94:	95 95       	asr	r25
     d96:	87 95       	ror	r24
     d98:	6a 95       	dec	r22
     d9a:	e2 f7       	brpl	.-8      	; 0xd94 <FUNCpincheck+0x4>
}
     d9c:	81 70       	andi	r24, 0x01	; 1
     d9e:	08 95       	ret

00000da0 <FUNCprint_binary>:
char* FUNCprint_binary(uint8_t number)
{
     da0:	ef e7       	ldi	r30, 0x7F	; 127
     da2:	f2 e0       	ldi	r31, 0x02	; 2
	uint8_t i,c;
    for(i=128,c=0;i;i>>=1,c++){
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	20 e8       	ldi	r18, 0x80	; 128
	(number & i) ? (FUNCstr[c]='1') : (FUNCstr[c]='0');
     da8:	50 e3       	ldi	r21, 0x30	; 48
     daa:	41 e3       	ldi	r20, 0x31	; 49
     dac:	38 2f       	mov	r19, r24
     dae:	32 23       	and	r19, r18
     db0:	11 f0       	breq	.+4      	; 0xdb6 <FUNCprint_binary+0x16>
     db2:	40 83       	st	Z, r20
     db4:	01 c0       	rjmp	.+2      	; 0xdb8 <FUNCprint_binary+0x18>
     db6:	50 83       	st	Z, r21
	return lh;
}
char* FUNCprint_binary(uint8_t number)
{
	uint8_t i,c;
    for(i=128,c=0;i;i>>=1,c++){
     db8:	26 95       	lsr	r18
     dba:	9f 5f       	subi	r25, 0xFF	; 255
     dbc:	31 96       	adiw	r30, 0x01	; 1
     dbe:	98 30       	cpi	r25, 0x08	; 8
     dc0:	a9 f7       	brne	.-22     	; 0xdac <FUNCprint_binary+0xc>
	(number & i) ? (FUNCstr[c]='1') : (FUNCstr[c]='0');
	}
	FUNCstr[c]='\0';
     dc2:	10 92 87 02 	sts	0x0287, r1	; 0x800287 <FUNCstr+0x8>
	return FUNCstr;
}
     dc6:	8f e7       	ldi	r24, 0x7F	; 127
     dc8:	92 e0       	ldi	r25, 0x02	; 2
     dca:	08 95       	ret

00000dcc <FUNCmayia>:
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
     dcc:	a4 2f       	mov	r26, r20
     dce:	b0 e0       	ldi	r27, 0x00	; 0
     dd0:	10 97       	sbiw	r26, 0x00	; 0
     dd2:	61 f0       	breq	.+24     	; 0xdec <FUNCmayia+0x20>
     dd4:	21 e0       	ldi	r18, 0x01	; 1
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	e1 e0       	ldi	r30, 0x01	; 1
     dda:	f0 e0       	ldi	r31, 0x00	; 0
        p = p * bs;
     ddc:	ee 0f       	add	r30, r30
     dde:	ff 1f       	adc	r31, r31
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
     de0:	2f 5f       	subi	r18, 0xFF	; 255
     de2:	3f 4f       	sbci	r19, 0xFF	; 255
     de4:	a2 17       	cp	r26, r18
     de6:	b3 07       	cpc	r27, r19
     de8:	c8 f7       	brcc	.-14     	; 0xddc <FUNCmayia+0x10>
     dea:	02 c0       	rjmp	.+4      	; 0xdf0 <FUNCmayia+0x24>
}
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
     dec:	e1 e0       	ldi	r30, 0x01	; 1
     dee:	f0 e0       	ldi	r31, 0x00	; 0
unsigned int FUNCmayia(unsigned int xi, unsigned int xf, uint8_t nbits)
{//magic formula
	unsigned int mask;
	unsigned int diff;
	unsigned int trans;
	mask=Pwr(2,nbits)-1;
     df0:	31 97       	sbiw	r30, 0x01	; 1
	xi&=mask;
	xf&=mask;
     df2:	6e 23       	and	r22, r30
     df4:	7f 23       	and	r23, r31
	diff=xf^xi;
     df6:	8e 23       	and	r24, r30
     df8:	9f 23       	and	r25, r31
     dfa:	86 27       	eor	r24, r22
     dfc:	97 27       	eor	r25, r23
	trans=diff&xf;
	return (trans<<nbits)|diff;
     dfe:	68 23       	and	r22, r24
     e00:	79 23       	and	r23, r25
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <FUNCmayia+0x3c>
     e04:	66 0f       	add	r22, r22
     e06:	77 1f       	adc	r23, r23
     e08:	4a 95       	dec	r20
     e0a:	e2 f7       	brpl	.-8      	; 0xe04 <FUNCmayia+0x38>
}
     e0c:	86 2b       	or	r24, r22
     e0e:	97 2b       	or	r25, r23
     e10:	08 95       	ret

00000e12 <FUNCenable>:
// uint8_t TRANupdate(struct TRAN *tr, uint8_t idata);
/*
** procedure and function
*/
FUNC FUNCenable( void )
{
     e12:	fc 01       	movw	r30, r24
	uint8_t tSREG;
	tSREG=SREG;
     e14:	9f b7       	in	r25, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
     e16:	8f b7       	in	r24, 0x3f	; 63
     e18:	8f 77       	andi	r24, 0x7F	; 127
     e1a:	8f bf       	out	0x3f, r24	; 63
	func.putstr=FUNCputstr;
	func.getnum=FUNCgetnum;
	func.getnumv2=FUNCgetnumv2;
	func.readint=FUNCreadint;
	*/
	SREG=tSREG;
     e1c:	9f bf       	out	0x3f, r25	; 63
	/******/
	return func;
     e1e:	88 e1       	ldi	r24, 0x18	; 24
     e20:	95 e0       	ldi	r25, 0x05	; 5
     e22:	91 83       	std	Z+1, r25	; 0x01
     e24:	80 83       	st	Z, r24
     e26:	83 e3       	ldi	r24, 0x33	; 51
     e28:	95 e0       	ldi	r25, 0x05	; 5
     e2a:	93 83       	std	Z+3, r25	; 0x03
     e2c:	82 83       	std	Z+2, r24	; 0x02
     e2e:	8d e5       	ldi	r24, 0x5D	; 93
     e30:	95 e0       	ldi	r25, 0x05	; 5
     e32:	95 83       	std	Z+5, r25	; 0x05
     e34:	84 83       	std	Z+4, r24	; 0x04
     e36:	86 ee       	ldi	r24, 0xE6	; 230
     e38:	96 e0       	ldi	r25, 0x06	; 6
     e3a:	97 83       	std	Z+7, r25	; 0x07
     e3c:	86 83       	std	Z+6, r24	; 0x06
     e3e:	85 e0       	ldi	r24, 0x05	; 5
     e40:	93 e0       	ldi	r25, 0x03	; 3
     e42:	91 87       	std	Z+9, r25	; 0x09
     e44:	80 87       	std	Z+8, r24	; 0x08
     e46:	83 e1       	ldi	r24, 0x13	; 19
     e48:	93 e0       	ldi	r25, 0x03	; 3
     e4a:	93 87       	std	Z+11, r25	; 0x0b
     e4c:	82 87       	std	Z+10, r24	; 0x0a
     e4e:	85 e1       	ldi	r24, 0x15	; 21
     e50:	93 e0       	ldi	r25, 0x03	; 3
     e52:	95 87       	std	Z+13, r25	; 0x0d
     e54:	84 87       	std	Z+12, r24	; 0x0c
     e56:	88 e1       	ldi	r24, 0x18	; 24
     e58:	93 e0       	ldi	r25, 0x03	; 3
     e5a:	97 87       	std	Z+15, r25	; 0x0f
     e5c:	86 87       	std	Z+14, r24	; 0x0e
     e5e:	8b e1       	ldi	r24, 0x1B	; 27
     e60:	93 e0       	ldi	r25, 0x03	; 3
     e62:	91 8b       	std	Z+17, r25	; 0x11
     e64:	80 8b       	std	Z+16, r24	; 0x10
     e66:	8e e1       	ldi	r24, 0x1E	; 30
     e68:	93 e0       	ldi	r25, 0x03	; 3
     e6a:	93 8b       	std	Z+19, r25	; 0x13
     e6c:	82 8b       	std	Z+18, r24	; 0x12
     e6e:	8f e0       	ldi	r24, 0x0F	; 15
     e70:	93 e0       	ldi	r25, 0x03	; 3
     e72:	95 8b       	std	Z+21, r25	; 0x15
     e74:	84 8b       	std	Z+20, r24	; 0x14
     e76:	81 e1       	ldi	r24, 0x11	; 17
     e78:	93 e0       	ldi	r25, 0x03	; 3
     e7a:	97 8b       	std	Z+23, r25	; 0x17
     e7c:	86 8b       	std	Z+22, r24	; 0x16
     e7e:	80 e2       	ldi	r24, 0x20	; 32
     e80:	93 e0       	ldi	r25, 0x03	; 3
     e82:	91 8f       	std	Z+25, r25	; 0x19
     e84:	80 8f       	std	Z+24, r24	; 0x18
     e86:	81 e4       	ldi	r24, 0x41	; 65
     e88:	93 e0       	ldi	r25, 0x03	; 3
     e8a:	93 8f       	std	Z+27, r25	; 0x1b
     e8c:	82 8f       	std	Z+26, r24	; 0x1a
     e8e:	8f e4       	ldi	r24, 0x4F	; 79
     e90:	93 e0       	ldi	r25, 0x03	; 3
     e92:	95 8f       	std	Z+29, r25	; 0x1d
     e94:	84 8f       	std	Z+28, r24	; 0x1c
     e96:	81 e7       	ldi	r24, 0x71	; 113
     e98:	93 e0       	ldi	r25, 0x03	; 3
     e9a:	97 8f       	std	Z+31, r25	; 0x1f
     e9c:	86 8f       	std	Z+30, r24	; 0x1e
     e9e:	85 ed       	ldi	r24, 0xD5	; 213
     ea0:	95 e0       	ldi	r25, 0x05	; 5
     ea2:	91 a3       	std	Z+33, r25	; 0x21
     ea4:	80 a3       	std	Z+32, r24	; 0x20
     ea6:	8e e0       	ldi	r24, 0x0E	; 14
     ea8:	96 e0       	ldi	r25, 0x06	; 6
     eaa:	93 a3       	std	Z+35, r25	; 0x23
     eac:	82 a3       	std	Z+34, r24	; 0x22
     eae:	8a e7       	ldi	r24, 0x7A	; 122
     eb0:	95 e0       	ldi	r25, 0x05	; 5
     eb2:	95 a3       	std	Z+37, r25	; 0x25
     eb4:	84 a3       	std	Z+36, r24	; 0x24
     eb6:	82 e4       	ldi	r24, 0x42	; 66
     eb8:	95 e0       	ldi	r25, 0x05	; 5
     eba:	97 a3       	std	Z+39, r25	; 0x27
     ebc:	86 a3       	std	Z+38, r24	; 0x26
     ebe:	87 e1       	ldi	r24, 0x17	; 23
     ec0:	94 e0       	ldi	r25, 0x04	; 4
     ec2:	91 a7       	std	Z+41, r25	; 0x29
     ec4:	80 a7       	std	Z+40, r24	; 0x28
     ec6:	8c e1       	ldi	r24, 0x1C	; 28
     ec8:	94 e0       	ldi	r25, 0x04	; 4
     eca:	93 a7       	std	Z+43, r25	; 0x2b
     ecc:	82 a7       	std	Z+42, r24	; 0x2a
     ece:	8b e2       	ldi	r24, 0x2B	; 43
     ed0:	94 e0       	ldi	r25, 0x04	; 4
     ed2:	95 a7       	std	Z+45, r25	; 0x2d
     ed4:	84 a7       	std	Z+44, r24	; 0x2c
     ed6:	8f e4       	ldi	r24, 0x4F	; 79
     ed8:	94 e0       	ldi	r25, 0x04	; 4
     eda:	97 a7       	std	Z+47, r25	; 0x2f
     edc:	86 a7       	std	Z+46, r24	; 0x2e
     ede:	81 e5       	ldi	r24, 0x51	; 81
     ee0:	94 e0       	ldi	r25, 0x04	; 4
     ee2:	91 ab       	std	Z+49, r25	; 0x31
     ee4:	80 ab       	std	Z+48, r24	; 0x30
     ee6:	8b e5       	ldi	r24, 0x5B	; 91
     ee8:	94 e0       	ldi	r25, 0x04	; 4
     eea:	93 ab       	std	Z+51, r25	; 0x33
     eec:	82 ab       	std	Z+50, r24	; 0x32
     eee:	88 e6       	ldi	r24, 0x68	; 104
     ef0:	94 e0       	ldi	r25, 0x04	; 4
     ef2:	95 ab       	std	Z+53, r25	; 0x35
     ef4:	84 ab       	std	Z+52, r24	; 0x34
     ef6:	84 e7       	ldi	r24, 0x74	; 116
     ef8:	94 e0       	ldi	r25, 0x04	; 4
     efa:	97 ab       	std	Z+55, r25	; 0x37
     efc:	86 ab       	std	Z+54, r24	; 0x36
     efe:	8c e8       	ldi	r24, 0x8C	; 140
     f00:	94 e0       	ldi	r25, 0x04	; 4
     f02:	91 af       	std	Z+57, r25	; 0x39
     f04:	80 af       	std	Z+56, r24	; 0x38
     f06:	8f e9       	ldi	r24, 0x9F	; 159
     f08:	94 e0       	ldi	r25, 0x04	; 4
     f0a:	93 af       	std	Z+59, r25	; 0x3b
     f0c:	82 af       	std	Z+58, r24	; 0x3a
     f0e:	8a ea       	ldi	r24, 0xAA	; 170
     f10:	94 e0       	ldi	r25, 0x04	; 4
     f12:	95 af       	std	Z+61, r25	; 0x3d
     f14:	84 af       	std	Z+60, r24	; 0x3c
     f16:	87 ed       	ldi	r24, 0xD7	; 215
     f18:	94 e0       	ldi	r25, 0x04	; 4
     f1a:	97 af       	std	Z+63, r25	; 0x3f
     f1c:	86 af       	std	Z+62, r24	; 0x3e
     f1e:	df 01       	movw	r26, r30
     f20:	a0 5c       	subi	r26, 0xC0	; 192
     f22:	bf 4f       	sbci	r27, 0xFF	; 255
     f24:	8c e4       	ldi	r24, 0x4C	; 76
     f26:	96 e0       	ldi	r25, 0x06	; 6
     f28:	11 96       	adiw	r26, 0x01	; 1
     f2a:	9c 93       	st	X, r25
     f2c:	8e 93       	st	-X, r24
     f2e:	12 96       	adiw	r26, 0x02	; 2
     f30:	87 e5       	ldi	r24, 0x57	; 87
     f32:	96 e0       	ldi	r25, 0x06	; 6
     f34:	11 96       	adiw	r26, 0x01	; 1
     f36:	9c 93       	st	X, r25
     f38:	8e 93       	st	-X, r24
     f3a:	12 96       	adiw	r26, 0x02	; 2
     f3c:	88 e7       	ldi	r24, 0x78	; 120
     f3e:	96 e0       	ldi	r25, 0x06	; 6
     f40:	11 96       	adiw	r26, 0x01	; 1
     f42:	9c 93       	st	X, r25
     f44:	8e 93       	st	-X, r24
     f46:	12 96       	adiw	r26, 0x02	; 2
     f48:	88 ec       	ldi	r24, 0xC8	; 200
     f4a:	96 e0       	ldi	r25, 0x06	; 6
     f4c:	11 96       	adiw	r26, 0x01	; 1
     f4e:	9c 93       	st	X, r25
     f50:	8e 93       	st	-X, r24
     f52:	12 96       	adiw	r26, 0x02	; 2
     f54:	80 ed       	ldi	r24, 0xD0	; 208
     f56:	96 e0       	ldi	r25, 0x06	; 6
     f58:	8d 93       	st	X+, r24
     f5a:	9c 93       	st	X, r25
}
     f5c:	cf 01       	movw	r24, r30
     f5e:	08 95       	ret

00000f60 <KEYPAD_flush>:
}
/***flush***/
void KEYPAD_flush(void)
{
	uint8_t i;
	data.character=' ';
     f60:	80 e2       	ldi	r24, 0x20	; 32
     f62:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <data>
	KEYPADSTRINGINDEX=0;
     f66:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <KEYPADSTRINGINDEX>
     f6a:	e1 ea       	ldi	r30, 0xA1	; 161
     f6c:	f2 e0       	ldi	r31, 0x02	; 2
     f6e:	86 eb       	ldi	r24, 0xB6	; 182
     f70:	92 e0       	ldi	r25, 0x02	; 2
	for(i=0;i<KEYPADSTRINGSIZE+1;i++)
        data.string[i]='\0';
     f72:	11 92       	st	Z+, r1
void KEYPAD_flush(void)
{
	uint8_t i;
	data.character=' ';
	KEYPADSTRINGINDEX=0;
	for(i=0;i<KEYPADSTRINGSIZE+1;i++)
     f74:	e8 17       	cp	r30, r24
     f76:	f9 07       	cpc	r31, r25
     f78:	e1 f7       	brne	.-8      	; 0xf72 <KEYPAD_flush+0x12>
        data.string[i]='\0';
}
     f7a:	08 95       	ret

00000f7c <KEYPAD_getkey>:
	*keypad_PORT|=(1<<KEYPADLINE_1) | (1<<KEYPADLINE_2) | (1<<KEYPADLINE_3) | (1<<KEYPADLINE_4);
	//Going to use pull down method.
	return keypad;
}
char KEYPAD_getkey(void)
{
     f7c:	cf 93       	push	r28
     f7e:	df 93       	push	r29
     f80:	21 e0       	ldi	r18, 0x01	; 1
	uint8_t HL;
	char c='\0';
     f82:	80 e0       	ldi	r24, 0x00	; 0
				*keypad_PORT|=(1<<KEYPADLINE_1);
				break;
			case 1: //line 2 index 1
				*keypad_DDR|=(1<<KEYPADLINE_2);
				*keypad_PORT&=~(1<<KEYPADLINE_2);
				keypad_dataf.line_2=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
     f84:	a5 e9       	ldi	r26, 0x95	; 149
     f86:	b2 e0       	ldi	r27, 0x02	; 2
				HL=KEYPADhl(keypad_datai.line_2,keypad_dataf.line_2);
     f88:	e9 e9       	ldi	r30, 0x99	; 153
     f8a:	f2 e0       	ldi	r31, 0x02	; 2
					if(HL == (1<<KEYPADDATA_2))
						c=keypadvalue[1][1];
					if(HL == (1<<KEYPADDATA_3))
						c=keypadvalue[1][2];
					if(HL == (1<<KEYPADDATA_4))
						c=keypadvalue[1][3];
     f8c:	60 e0       	ldi	r22, 0x00	; 0
     f8e:	71 e0       	ldi	r23, 0x01	; 1
     f90:	01 c0       	rjmp	.+2      	; 0xf94 <KEYPAD_getkey+0x18>
     f92:	2f 5f       	subi	r18, 0xFF	; 255
{
	uint8_t HL;
	char c='\0';
	uint8_t keypad_option;
	for(keypad_option=0;keypad_option<KEYPADLINES;keypad_option++){
		switch (keypad_option)
     f94:	9f ef       	ldi	r25, 0xFF	; 255
     f96:	92 0f       	add	r25, r18
     f98:	91 30       	cpi	r25, 0x01	; 1
     f9a:	09 f4       	brne	.+2      	; 0xf9e <KEYPAD_getkey+0x22>
     f9c:	4b c0       	rjmp	.+150    	; 0x1034 <KEYPAD_getkey+0xb8>
     f9e:	38 f0       	brcs	.+14     	; 0xfae <KEYPAD_getkey+0x32>
     fa0:	92 30       	cpi	r25, 0x02	; 2
     fa2:	09 f4       	brne	.+2      	; 0xfa6 <KEYPAD_getkey+0x2a>
     fa4:	8c c0       	rjmp	.+280    	; 0x10be <KEYPAD_getkey+0x142>
     fa6:	93 30       	cpi	r25, 0x03	; 3
     fa8:	09 f4       	brne	.+2      	; 0xfac <KEYPAD_getkey+0x30>
     faa:	ce c0       	rjmp	.+412    	; 0x1148 <__stack+0x49>
     fac:	0e c1       	rjmp	.+540    	; 0x11ca <__stack+0xcb>
		{
			case 0: //line 1 index 0
				*keypad_DDR|=(1<<KEYPADLINE_1);
     fae:	40 91 b6 02 	lds	r20, 0x02B6	; 0x8002b6 <keypad_DDR>
     fb2:	50 91 b7 02 	lds	r21, 0x02B7	; 0x8002b7 <keypad_DDR+0x1>
     fb6:	ea 01       	movw	r28, r20
     fb8:	98 81       	ld	r25, Y
     fba:	90 68       	ori	r25, 0x80	; 128
     fbc:	98 83       	st	Y, r25
				*keypad_PORT&=~(1<<KEYPADLINE_1);
     fbe:	40 91 93 02 	lds	r20, 0x0293	; 0x800293 <keypad_PORT>
     fc2:	50 91 94 02 	lds	r21, 0x0294	; 0x800294 <keypad_PORT+0x1>
     fc6:	ea 01       	movw	r28, r20
     fc8:	98 81       	ld	r25, Y
     fca:	9f 77       	andi	r25, 0x7F	; 127
     fcc:	98 83       	st	Y, r25
				keypad_dataf.line_1=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
     fce:	40 91 9e 02 	lds	r20, 0x029E	; 0x80029e <keypad_PIN>
     fd2:	50 91 9f 02 	lds	r21, 0x029F	; 0x80029f <keypad_PIN+0x1>
     fd6:	ea 01       	movw	r28, r20
     fd8:	38 81       	ld	r19, Y
     fda:	34 77       	andi	r19, 0x74	; 116
     fdc:	3c 93       	st	X, r19
				HL=KEYPADhl(keypad_datai.line_1,keypad_dataf.line_1);
     fde:	90 81       	ld	r25, Z
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
     fe0:	43 2f       	mov	r20, r19
     fe2:	49 27       	eor	r20, r25
     fe4:	94 23       	and	r25, r20
			case 0: //line 1 index 0
				*keypad_DDR|=(1<<KEYPADLINE_1);
				*keypad_PORT&=~(1<<KEYPADLINE_1);
				keypad_dataf.line_1=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_1,keypad_dataf.line_1);
				keypad_datai.line_1=keypad_dataf.line_1;
     fe6:	30 83       	st	Z, r19
				if(HL){
     fe8:	99 23       	and	r25, r25
     fea:	99 f0       	breq	.+38     	; 0x1012 <KEYPAD_getkey+0x96>
					//decode index line one column what ?
					if(HL == (1<<KEYPADDATA_1))
     fec:	94 30       	cpi	r25, 0x04	; 4
     fee:	19 f4       	brne	.+6      	; 0xff6 <KEYPAD_getkey+0x7a>
						c=keypadvalue[0][0];
     ff0:	eb 01       	movw	r28, r22
     ff2:	88 81       	ld	r24, Y
     ff4:	0a c0       	rjmp	.+20     	; 0x100a <KEYPAD_getkey+0x8e>
					if(HL == (1<<KEYPADDATA_2))
     ff6:	90 31       	cpi	r25, 0x10	; 16
     ff8:	19 f4       	brne	.+6      	; 0x1000 <KEYPAD_getkey+0x84>
						c=keypadvalue[0][1];
     ffa:	eb 01       	movw	r28, r22
     ffc:	89 81       	ldd	r24, Y+1	; 0x01
     ffe:	09 c0       	rjmp	.+18     	; 0x1012 <KEYPAD_getkey+0x96>
					if(HL == (1<<KEYPADDATA_3))
    1000:	90 32       	cpi	r25, 0x20	; 32
    1002:	19 f4       	brne	.+6      	; 0x100a <KEYPAD_getkey+0x8e>
						c=keypadvalue[0][2];
    1004:	eb 01       	movw	r28, r22
    1006:	8a 81       	ldd	r24, Y+2	; 0x02
    1008:	04 c0       	rjmp	.+8      	; 0x1012 <KEYPAD_getkey+0x96>
					if(HL == (1<<KEYPADDATA_4))
    100a:	90 34       	cpi	r25, 0x40	; 64
    100c:	11 f4       	brne	.+4      	; 0x1012 <KEYPAD_getkey+0x96>
						c=keypadvalue[0][3];
    100e:	eb 01       	movw	r28, r22
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
				}
				*keypad_DDR&=~(1<<KEYPADLINE_1);
    1012:	40 91 b6 02 	lds	r20, 0x02B6	; 0x8002b6 <keypad_DDR>
    1016:	50 91 b7 02 	lds	r21, 0x02B7	; 0x8002b7 <keypad_DDR+0x1>
    101a:	ea 01       	movw	r28, r20
    101c:	98 81       	ld	r25, Y
    101e:	9f 77       	andi	r25, 0x7F	; 127
    1020:	98 83       	st	Y, r25
				*keypad_PORT|=(1<<KEYPADLINE_1);
    1022:	40 91 93 02 	lds	r20, 0x0293	; 0x800293 <keypad_PORT>
    1026:	50 91 94 02 	lds	r21, 0x0294	; 0x800294 <keypad_PORT+0x1>
    102a:	ea 01       	movw	r28, r20
    102c:	98 81       	ld	r25, Y
    102e:	90 68       	ori	r25, 0x80	; 128
    1030:	98 83       	st	Y, r25
				break;
    1032:	af cf       	rjmp	.-162    	; 0xf92 <KEYPAD_getkey+0x16>
			case 1: //line 2 index 1
				*keypad_DDR|=(1<<KEYPADLINE_2);
    1034:	40 91 b6 02 	lds	r20, 0x02B6	; 0x8002b6 <keypad_DDR>
    1038:	50 91 b7 02 	lds	r21, 0x02B7	; 0x8002b7 <keypad_DDR+0x1>
    103c:	ea 01       	movw	r28, r20
    103e:	98 81       	ld	r25, Y
    1040:	91 60       	ori	r25, 0x01	; 1
    1042:	98 83       	st	Y, r25
				*keypad_PORT&=~(1<<KEYPADLINE_2);
    1044:	40 91 93 02 	lds	r20, 0x0293	; 0x800293 <keypad_PORT>
    1048:	50 91 94 02 	lds	r21, 0x0294	; 0x800294 <keypad_PORT+0x1>
    104c:	ea 01       	movw	r28, r20
    104e:	98 81       	ld	r25, Y
    1050:	9e 7f       	andi	r25, 0xFE	; 254
    1052:	98 83       	st	Y, r25
				keypad_dataf.line_2=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    1054:	40 91 9e 02 	lds	r20, 0x029E	; 0x80029e <keypad_PIN>
    1058:	50 91 9f 02 	lds	r21, 0x029F	; 0x80029f <keypad_PIN+0x1>
    105c:	ea 01       	movw	r28, r20
    105e:	38 81       	ld	r19, Y
    1060:	34 77       	andi	r19, 0x74	; 116
    1062:	11 96       	adiw	r26, 0x01	; 1
    1064:	3c 93       	st	X, r19
    1066:	11 97       	sbiw	r26, 0x01	; 1
				HL=KEYPADhl(keypad_datai.line_2,keypad_dataf.line_2);
    1068:	91 81       	ldd	r25, Z+1	; 0x01
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
    106a:	43 2f       	mov	r20, r19
    106c:	49 27       	eor	r20, r25
    106e:	94 23       	and	r25, r20
			case 1: //line 2 index 1
				*keypad_DDR|=(1<<KEYPADLINE_2);
				*keypad_PORT&=~(1<<KEYPADLINE_2);
				keypad_dataf.line_2=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_2,keypad_dataf.line_2);
				keypad_datai.line_2=keypad_dataf.line_2;
    1070:	31 83       	std	Z+1, r19	; 0x01
				if(HL){
    1072:	99 23       	and	r25, r25
    1074:	99 f0       	breq	.+38     	; 0x109c <KEYPAD_getkey+0x120>
					//decode index line two column what ?
					if(HL == (1<<KEYPADDATA_1))
    1076:	94 30       	cpi	r25, 0x04	; 4
    1078:	19 f4       	brne	.+6      	; 0x1080 <KEYPAD_getkey+0x104>
						c=keypadvalue[1][0];
    107a:	eb 01       	movw	r28, r22
    107c:	8c 81       	ldd	r24, Y+4	; 0x04
    107e:	0a c0       	rjmp	.+20     	; 0x1094 <KEYPAD_getkey+0x118>
					if(HL == (1<<KEYPADDATA_2))
    1080:	90 31       	cpi	r25, 0x10	; 16
    1082:	19 f4       	brne	.+6      	; 0x108a <KEYPAD_getkey+0x10e>
						c=keypadvalue[1][1];
    1084:	eb 01       	movw	r28, r22
    1086:	8d 81       	ldd	r24, Y+5	; 0x05
    1088:	09 c0       	rjmp	.+18     	; 0x109c <KEYPAD_getkey+0x120>
					if(HL == (1<<KEYPADDATA_3))
    108a:	90 32       	cpi	r25, 0x20	; 32
    108c:	19 f4       	brne	.+6      	; 0x1094 <KEYPAD_getkey+0x118>
						c=keypadvalue[1][2];
    108e:	eb 01       	movw	r28, r22
    1090:	8e 81       	ldd	r24, Y+6	; 0x06
    1092:	04 c0       	rjmp	.+8      	; 0x109c <KEYPAD_getkey+0x120>
					if(HL == (1<<KEYPADDATA_4))
    1094:	90 34       	cpi	r25, 0x40	; 64
    1096:	11 f4       	brne	.+4      	; 0x109c <KEYPAD_getkey+0x120>
						c=keypadvalue[1][3];
    1098:	eb 01       	movw	r28, r22
    109a:	8f 81       	ldd	r24, Y+7	; 0x07
				}
				*keypad_DDR&=~(1<<KEYPADLINE_2);
    109c:	40 91 b6 02 	lds	r20, 0x02B6	; 0x8002b6 <keypad_DDR>
    10a0:	50 91 b7 02 	lds	r21, 0x02B7	; 0x8002b7 <keypad_DDR+0x1>
    10a4:	ea 01       	movw	r28, r20
    10a6:	98 81       	ld	r25, Y
    10a8:	9e 7f       	andi	r25, 0xFE	; 254
    10aa:	98 83       	st	Y, r25
				*keypad_PORT|=(1<<KEYPADLINE_2);
    10ac:	40 91 93 02 	lds	r20, 0x0293	; 0x800293 <keypad_PORT>
    10b0:	50 91 94 02 	lds	r21, 0x0294	; 0x800294 <keypad_PORT+0x1>
    10b4:	ea 01       	movw	r28, r20
    10b6:	98 81       	ld	r25, Y
    10b8:	91 60       	ori	r25, 0x01	; 1
    10ba:	98 83       	st	Y, r25
				break;
    10bc:	6a cf       	rjmp	.-300    	; 0xf92 <KEYPAD_getkey+0x16>
			case 2: //line 3 index 2
				*keypad_DDR|=(1<<KEYPADLINE_3);
    10be:	40 91 b6 02 	lds	r20, 0x02B6	; 0x8002b6 <keypad_DDR>
    10c2:	50 91 b7 02 	lds	r21, 0x02B7	; 0x8002b7 <keypad_DDR+0x1>
    10c6:	ea 01       	movw	r28, r20
    10c8:	98 81       	ld	r25, Y
    10ca:	92 60       	ori	r25, 0x02	; 2
    10cc:	98 83       	st	Y, r25
				*keypad_PORT&=~(1<<KEYPADLINE_3);
    10ce:	40 91 93 02 	lds	r20, 0x0293	; 0x800293 <keypad_PORT>
    10d2:	50 91 94 02 	lds	r21, 0x0294	; 0x800294 <keypad_PORT+0x1>
    10d6:	ea 01       	movw	r28, r20
    10d8:	98 81       	ld	r25, Y
    10da:	9d 7f       	andi	r25, 0xFD	; 253
    10dc:	98 83       	st	Y, r25
				keypad_dataf.line_3=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    10de:	40 91 9e 02 	lds	r20, 0x029E	; 0x80029e <keypad_PIN>
    10e2:	50 91 9f 02 	lds	r21, 0x029F	; 0x80029f <keypad_PIN+0x1>
    10e6:	ea 01       	movw	r28, r20
    10e8:	38 81       	ld	r19, Y
    10ea:	34 77       	andi	r19, 0x74	; 116
    10ec:	12 96       	adiw	r26, 0x02	; 2
    10ee:	3c 93       	st	X, r19
    10f0:	12 97       	sbiw	r26, 0x02	; 2
				HL=KEYPADhl(keypad_datai.line_3,keypad_dataf.line_3);
    10f2:	92 81       	ldd	r25, Z+2	; 0x02
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
    10f4:	43 2f       	mov	r20, r19
    10f6:	49 27       	eor	r20, r25
    10f8:	94 23       	and	r25, r20
			case 2: //line 3 index 2
				*keypad_DDR|=(1<<KEYPADLINE_3);
				*keypad_PORT&=~(1<<KEYPADLINE_3);
				keypad_dataf.line_3=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_3,keypad_dataf.line_3);
				keypad_datai.line_3=keypad_dataf.line_3;
    10fa:	32 83       	std	Z+2, r19	; 0x02
				if(HL){
    10fc:	99 23       	and	r25, r25
    10fe:	99 f0       	breq	.+38     	; 0x1126 <__stack+0x27>
					//decode index line three column what ?
					if(HL == (1<<KEYPADDATA_1))
    1100:	94 30       	cpi	r25, 0x04	; 4
    1102:	19 f4       	brne	.+6      	; 0x110a <__stack+0xb>
						c=keypadvalue[2][0];
    1104:	eb 01       	movw	r28, r22
    1106:	88 85       	ldd	r24, Y+8	; 0x08
    1108:	0a c0       	rjmp	.+20     	; 0x111e <__stack+0x1f>
					if(HL == (1<<KEYPADDATA_2))
    110a:	90 31       	cpi	r25, 0x10	; 16
    110c:	19 f4       	brne	.+6      	; 0x1114 <__stack+0x15>
						c=keypadvalue[2][1];
    110e:	eb 01       	movw	r28, r22
    1110:	89 85       	ldd	r24, Y+9	; 0x09
    1112:	09 c0       	rjmp	.+18     	; 0x1126 <__stack+0x27>
					if(HL == (1<<KEYPADDATA_3))
    1114:	90 32       	cpi	r25, 0x20	; 32
    1116:	19 f4       	brne	.+6      	; 0x111e <__stack+0x1f>
						c=keypadvalue[2][2];
    1118:	eb 01       	movw	r28, r22
    111a:	8a 85       	ldd	r24, Y+10	; 0x0a
    111c:	04 c0       	rjmp	.+8      	; 0x1126 <__stack+0x27>
					if(HL == (1<<KEYPADDATA_4))
    111e:	90 34       	cpi	r25, 0x40	; 64
    1120:	11 f4       	brne	.+4      	; 0x1126 <__stack+0x27>
						c=keypadvalue[2][3];
    1122:	eb 01       	movw	r28, r22
    1124:	8b 85       	ldd	r24, Y+11	; 0x0b
				}
				*keypad_DDR&=~(1<<KEYPADLINE_3);
    1126:	40 91 b6 02 	lds	r20, 0x02B6	; 0x8002b6 <keypad_DDR>
    112a:	50 91 b7 02 	lds	r21, 0x02B7	; 0x8002b7 <keypad_DDR+0x1>
    112e:	ea 01       	movw	r28, r20
    1130:	98 81       	ld	r25, Y
    1132:	9d 7f       	andi	r25, 0xFD	; 253
    1134:	98 83       	st	Y, r25
				*keypad_PORT|=(1<<KEYPADLINE_3);
    1136:	40 91 93 02 	lds	r20, 0x0293	; 0x800293 <keypad_PORT>
    113a:	50 91 94 02 	lds	r21, 0x0294	; 0x800294 <keypad_PORT+0x1>
    113e:	ea 01       	movw	r28, r20
    1140:	98 81       	ld	r25, Y
    1142:	92 60       	ori	r25, 0x02	; 2
    1144:	98 83       	st	Y, r25
				break;
    1146:	25 cf       	rjmp	.-438    	; 0xf92 <KEYPAD_getkey+0x16>
			case 3: //line 4 index 3
				*keypad_DDR|=(1<<KEYPADLINE_4);
    1148:	e0 91 b6 02 	lds	r30, 0x02B6	; 0x8002b6 <keypad_DDR>
    114c:	f0 91 b7 02 	lds	r31, 0x02B7	; 0x8002b7 <keypad_DDR+0x1>
    1150:	90 81       	ld	r25, Z
    1152:	98 60       	ori	r25, 0x08	; 8
    1154:	90 83       	st	Z, r25
				*keypad_PORT&=~(1<<KEYPADLINE_4);
    1156:	e0 91 93 02 	lds	r30, 0x0293	; 0x800293 <keypad_PORT>
    115a:	f0 91 94 02 	lds	r31, 0x0294	; 0x800294 <keypad_PORT+0x1>
    115e:	90 81       	ld	r25, Z
    1160:	97 7f       	andi	r25, 0xF7	; 247
    1162:	90 83       	st	Z, r25
				keypad_dataf.line_4=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    1164:	e0 91 9e 02 	lds	r30, 0x029E	; 0x80029e <keypad_PIN>
    1168:	f0 91 9f 02 	lds	r31, 0x029F	; 0x80029f <keypad_PIN+0x1>
    116c:	20 81       	ld	r18, Z
    116e:	24 77       	andi	r18, 0x74	; 116
    1170:	20 93 98 02 	sts	0x0298, r18	; 0x800298 <keypad_dataf+0x3>
				HL=KEYPADhl(keypad_datai.line_4,keypad_dataf.line_4);
    1174:	e9 e9       	ldi	r30, 0x99	; 153
    1176:	f2 e0       	ldi	r31, 0x02	; 2
    1178:	93 81       	ldd	r25, Z+3	; 0x03
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
    117a:	32 2f       	mov	r19, r18
    117c:	39 27       	eor	r19, r25
    117e:	93 23       	and	r25, r19
			case 3: //line 4 index 3
				*keypad_DDR|=(1<<KEYPADLINE_4);
				*keypad_PORT&=~(1<<KEYPADLINE_4);
				keypad_dataf.line_4=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_4,keypad_dataf.line_4);
				keypad_datai.line_4=keypad_dataf.line_4;
    1180:	23 83       	std	Z+3, r18	; 0x03
				if(HL){
    1182:	99 23       	and	r25, r25
    1184:	99 f0       	breq	.+38     	; 0x11ac <__stack+0xad>
					//decode index line four column what ?
					if(HL == (1<<KEYPADDATA_1))
    1186:	94 30       	cpi	r25, 0x04	; 4
    1188:	19 f4       	brne	.+6      	; 0x1190 <__stack+0x91>
						c=keypadvalue[3][0];
    118a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__DATA_REGION_ORIGIN__+0xc>
    118e:	0a c0       	rjmp	.+20     	; 0x11a4 <__stack+0xa5>
					if(HL == (1<<KEYPADDATA_2))
    1190:	90 31       	cpi	r25, 0x10	; 16
    1192:	19 f4       	brne	.+6      	; 0x119a <__stack+0x9b>
						c=keypadvalue[3][1];
    1194:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <__DATA_REGION_ORIGIN__+0xd>
    1198:	09 c0       	rjmp	.+18     	; 0x11ac <__stack+0xad>
					if(HL == (1<<KEYPADDATA_3))
    119a:	90 32       	cpi	r25, 0x20	; 32
    119c:	19 f4       	brne	.+6      	; 0x11a4 <__stack+0xa5>
						c=keypadvalue[3][2];
    119e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__DATA_REGION_ORIGIN__+0xe>
    11a2:	04 c0       	rjmp	.+8      	; 0x11ac <__stack+0xad>
					if(HL == (1<<KEYPADDATA_4))
    11a4:	90 34       	cpi	r25, 0x40	; 64
    11a6:	11 f4       	brne	.+4      	; 0x11ac <__stack+0xad>
						c=keypadvalue[3][3];
    11a8:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <__DATA_REGION_ORIGIN__+0xf>
				}
				*keypad_DDR&=~(1<<KEYPADLINE_4);
    11ac:	e0 91 b6 02 	lds	r30, 0x02B6	; 0x8002b6 <keypad_DDR>
    11b0:	f0 91 b7 02 	lds	r31, 0x02B7	; 0x8002b7 <keypad_DDR+0x1>
    11b4:	90 81       	ld	r25, Z
    11b6:	97 7f       	andi	r25, 0xF7	; 247
    11b8:	90 83       	st	Z, r25
				*keypad_PORT|=(1<<KEYPADLINE_4);
    11ba:	e0 91 93 02 	lds	r30, 0x0293	; 0x800293 <keypad_PORT>
    11be:	f0 91 94 02 	lds	r31, 0x0294	; 0x800294 <keypad_PORT+0x1>
    11c2:	90 81       	ld	r25, Z
    11c4:	98 60       	ori	r25, 0x08	; 8
    11c6:	90 83       	st	Z, r25
    11c8:	03 c0       	rjmp	.+6      	; 0x11d0 <__stack+0xd1>
char KEYPAD_getkey(void)
{
	uint8_t HL;
	char c='\0';
	uint8_t keypad_option;
	for(keypad_option=0;keypad_option<KEYPADLINES;keypad_option++){
    11ca:	24 30       	cpi	r18, 0x04	; 4
    11cc:	08 f4       	brcc	.+2      	; 0x11d0 <__stack+0xd1>
    11ce:	e1 ce       	rjmp	.-574    	; 0xf92 <KEYPAD_getkey+0x16>
			default:
				break;
		}//endswitch
	}//endfor
	return c;
}
    11d0:	df 91       	pop	r29
    11d2:	cf 91       	pop	r28
    11d4:	08 95       	ret

000011d6 <KEYPAD_get>:
/***get***/
struct keypadata KEYPAD_get(void)
{
    11d6:	cf 93       	push	r28
    11d8:	df 93       	push	r29
    11da:	ec 01       	movw	r28, r24
	char c;
	c=KEYPAD_getkey();
    11dc:	cf de       	rcall	.-610    	; 0xf7c <KEYPAD_getkey>
	if(c){
    11de:	88 23       	and	r24, r24
    11e0:	89 f0       	breq	.+34     	; 0x1204 <KEYPAD_get+0x2e>
		data.character=c;
    11e2:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <data>
		if(KEYPADSTRINGINDEX<(KEYPADSTRINGSIZE)){
    11e6:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <KEYPADSTRINGINDEX>
    11ea:	94 31       	cpi	r25, 0x14	; 20
    11ec:	58 f4       	brcc	.+22     	; 0x1204 <KEYPAD_get+0x2e>
			data.string[KEYPADSTRINGINDEX]=c;
    11ee:	e0 91 9d 02 	lds	r30, 0x029D	; 0x80029d <KEYPADSTRINGINDEX>
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	e0 56       	subi	r30, 0x60	; 96
    11f6:	fd 4f       	sbci	r31, 0xFD	; 253
    11f8:	81 83       	std	Z+1, r24	; 0x01
			KEYPADSTRINGINDEX++;
    11fa:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <KEYPADSTRINGINDEX>
    11fe:	8f 5f       	subi	r24, 0xFF	; 255
    1200:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <KEYPADSTRINGINDEX>
		}
	}
	return data;
    1204:	86 e1       	ldi	r24, 0x16	; 22
    1206:	e0 ea       	ldi	r30, 0xA0	; 160
    1208:	f2 e0       	ldi	r31, 0x02	; 2
    120a:	de 01       	movw	r26, r28
    120c:	01 90       	ld	r0, Z+
    120e:	0d 92       	st	X+, r0
    1210:	8a 95       	dec	r24
    1212:	e1 f7       	brne	.-8      	; 0x120c <KEYPAD_get+0x36>
}
    1214:	ce 01       	movw	r24, r28
    1216:	df 91       	pop	r29
    1218:	cf 91       	pop	r28
    121a:	08 95       	ret

0000121c <KEYPADenable>:
uint8_t KEYPADhl(uint8_t xi, uint8_t xf);
/*
** procedure and function
*/
KEYPAD KEYPADenable(volatile uint8_t *ddr, volatile uint8_t *pin, volatile uint8_t *port)
{
    121c:	cf 93       	push	r28
    121e:	df 93       	push	r29
    1220:	00 d0       	rcall	.+0      	; 0x1222 <KEYPADenable+0x6>
    1222:	00 d0       	rcall	.+0      	; 0x1224 <KEYPADenable+0x8>
    1224:	00 d0       	rcall	.+0      	; 0x1226 <KEYPADenable+0xa>
    1226:	cd b7       	in	r28, 0x3d	; 61
    1228:	de b7       	in	r29, 0x3e	; 62
    122a:	fc 01       	movw	r30, r24
	//LOCAL VARIABLES
	uint8_t tSREG;
	tSREG=SREG;
    122c:	2f b7       	in	r18, 0x3f	; 63
	data.character=' ';
    122e:	80 e2       	ldi	r24, 0x20	; 32
    1230:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <data>
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    1234:	9f b7       	in	r25, 0x3f	; 63
    1236:	9f 77       	andi	r25, 0x7F	; 127
    1238:	9f bf       	out	0x3f, r25	; 63
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	KEYPAD keypad;
	//import parametros
	keypad_DDR=ddr;
    123a:	f0 93 b7 02 	sts	0x02B7, r31	; 0x8002b7 <keypad_DDR+0x1>
    123e:	e0 93 b6 02 	sts	0x02B6, r30	; 0x8002b6 <keypad_DDR>
	keypad_PIN=pin;
    1242:	70 93 9f 02 	sts	0x029F, r23	; 0x80029f <keypad_PIN+0x1>
    1246:	60 93 9e 02 	sts	0x029E, r22	; 0x80029e <keypad_PIN>
	keypad_PORT=port;
    124a:	50 93 94 02 	sts	0x0294, r21	; 0x800294 <keypad_PORT+0x1>
    124e:	40 93 93 02 	sts	0x0293, r20	; 0x800293 <keypad_PORT>
	//inic variables
	*keypad_DDR=(1<<KEYPADLINE_1) | (1<<KEYPADLINE_2) | (1<<KEYPADLINE_3) | (1<<KEYPADLINE_4);
    1252:	8b e8       	ldi	r24, 0x8B	; 139
    1254:	80 83       	st	Z, r24
	*keypad_PORT=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    1256:	e0 91 93 02 	lds	r30, 0x0293	; 0x800293 <keypad_PORT>
    125a:	f0 91 94 02 	lds	r31, 0x0294	; 0x800294 <keypad_PORT+0x1>
    125e:	84 e7       	ldi	r24, 0x74	; 116
    1260:	80 83       	st	Z, r24
	keypad_datai.line_1=keypad_dataf.line_1=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    1262:	a5 e9       	ldi	r26, 0x95	; 149
    1264:	b2 e0       	ldi	r27, 0x02	; 2
    1266:	8c 93       	st	X, r24
    1268:	e9 e9       	ldi	r30, 0x99	; 153
    126a:	f2 e0       	ldi	r31, 0x02	; 2
    126c:	80 83       	st	Z, r24
	keypad_datai.line_2=keypad_dataf.line_2=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    126e:	11 96       	adiw	r26, 0x01	; 1
    1270:	8c 93       	st	X, r24
    1272:	11 97       	sbiw	r26, 0x01	; 1
    1274:	81 83       	std	Z+1, r24	; 0x01
	keypad_datai.line_3=keypad_dataf.line_3=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    1276:	12 96       	adiw	r26, 0x02	; 2
    1278:	8c 93       	st	X, r24
    127a:	12 97       	sbiw	r26, 0x02	; 2
    127c:	82 83       	std	Z+2, r24	; 0x02
	keypad_datai.line_4=keypad_dataf.line_4=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    127e:	13 96       	adiw	r26, 0x03	; 3
    1280:	8c 93       	st	X, r24
    1282:	83 83       	std	Z+3, r24	; 0x03
	KEYPADSTRINGINDEX=0;
    1284:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <KEYPADSTRINGINDEX>
	//Direccionar apontadores para PROTOTIPOS
	keypad.getkey=KEYPAD_getkey;
	keypad.get=KEYPAD_get;
	keypad.flush=KEYPAD_flush;
	SREG=tSREG;
    1288:	2f bf       	out	0x3f, r18	; 63
	//
	*keypad_PORT|=(1<<KEYPADLINE_1) | (1<<KEYPADLINE_2) | (1<<KEYPADLINE_3) | (1<<KEYPADLINE_4);
    128a:	e0 91 93 02 	lds	r30, 0x0293	; 0x800293 <keypad_PORT>
    128e:	f0 91 94 02 	lds	r31, 0x0294	; 0x800294 <keypad_PORT+0x1>
    1292:	80 81       	ld	r24, Z
    1294:	8b 68       	ori	r24, 0x8B	; 139
    1296:	80 83       	st	Z, r24
	//Going to use pull down method.
	return keypad;
    1298:	2e eb       	ldi	r18, 0xBE	; 190
    129a:	37 e0       	ldi	r19, 0x07	; 7
    129c:	3a 83       	std	Y+2, r19	; 0x02
    129e:	29 83       	std	Y+1, r18	; 0x01
    12a0:	4b ee       	ldi	r20, 0xEB	; 235
    12a2:	58 e0       	ldi	r21, 0x08	; 8
    12a4:	5c 83       	std	Y+4, r21	; 0x04
    12a6:	4b 83       	std	Y+3, r20	; 0x03
    12a8:	60 eb       	ldi	r22, 0xB0	; 176
    12aa:	77 e0       	ldi	r23, 0x07	; 7
    12ac:	7e 83       	std	Y+6, r23	; 0x06
    12ae:	6d 83       	std	Y+5, r22	; 0x05
    12b0:	3a 81       	ldd	r19, Y+2	; 0x02
    12b2:	5c 81       	ldd	r21, Y+4	; 0x04
    12b4:	7e 81       	ldd	r23, Y+6	; 0x06
}
    12b6:	80 e0       	ldi	r24, 0x00	; 0
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	26 96       	adiw	r28, 0x06	; 6
    12bc:	0f b6       	in	r0, 0x3f	; 63
    12be:	f8 94       	cli
    12c0:	de bf       	out	0x3e, r29	; 62
    12c2:	0f be       	out	0x3f, r0	; 63
    12c4:	cd bf       	out	0x3d, r28	; 61
    12c6:	df 91       	pop	r29
    12c8:	cf 91       	pop	r28
    12ca:	08 95       	ret

000012cc <LCD0_write>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12cc:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    12d0:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    12d4:	90 81       	ld	r25, Z
    12d6:	9d 7f       	andi	r25, 0xFD	; 253
    12d8:	90 83       	st	Z, r25
    12da:	67 2b       	or	r22, r23
    12dc:	41 f0       	breq	.+16     	; 0x12ee <LCD0_write+0x22>
    12de:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    12e2:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    12e6:	90 81       	ld	r25, Z
    12e8:	91 60       	ori	r25, 0x01	; 1
    12ea:	90 83       	st	Z, r25
    12ec:	07 c0       	rjmp	.+14     	; 0x12fc <LCD0_write+0x30>
    12ee:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    12f2:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    12f6:	90 81       	ld	r25, Z
    12f8:	9e 7f       	andi	r25, 0xFE	; 254
    12fa:	90 83       	st	Z, r25
    12fc:	e0 91 bf 02 	lds	r30, 0x02BF	; 0x8002bf <lcd0_DDR>
    1300:	f0 91 c0 02 	lds	r31, 0x02C0	; 0x8002c0 <lcd0_DDR+0x1>
    1304:	90 81       	ld	r25, Z
    1306:	90 6f       	ori	r25, 0xF0	; 240
    1308:	90 83       	st	Z, r25
    130a:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    130e:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    1312:	90 81       	ld	r25, Z
    1314:	94 60       	ori	r25, 0x04	; 4
    1316:	90 83       	st	Z, r25
    1318:	88 23       	and	r24, r24
    131a:	44 f4       	brge	.+16     	; 0x132c <LCD0_write+0x60>
    131c:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    1320:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    1324:	90 81       	ld	r25, Z
    1326:	90 68       	ori	r25, 0x80	; 128
    1328:	90 83       	st	Z, r25
    132a:	07 c0       	rjmp	.+14     	; 0x133a <LCD0_write+0x6e>
    132c:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    1330:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    1334:	90 81       	ld	r25, Z
    1336:	9f 77       	andi	r25, 0x7F	; 127
    1338:	90 83       	st	Z, r25
    133a:	86 ff       	sbrs	r24, 6
    133c:	08 c0       	rjmp	.+16     	; 0x134e <LCD0_write+0x82>
    133e:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    1342:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    1346:	90 81       	ld	r25, Z
    1348:	90 64       	ori	r25, 0x40	; 64
    134a:	90 83       	st	Z, r25
    134c:	07 c0       	rjmp	.+14     	; 0x135c <LCD0_write+0x90>
    134e:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    1352:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    1356:	90 81       	ld	r25, Z
    1358:	9f 7b       	andi	r25, 0xBF	; 191
    135a:	90 83       	st	Z, r25
    135c:	85 ff       	sbrs	r24, 5
    135e:	08 c0       	rjmp	.+16     	; 0x1370 <LCD0_write+0xa4>
    1360:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    1364:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    1368:	90 81       	ld	r25, Z
    136a:	90 62       	ori	r25, 0x20	; 32
    136c:	90 83       	st	Z, r25
    136e:	07 c0       	rjmp	.+14     	; 0x137e <LCD0_write+0xb2>
    1370:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    1374:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    1378:	90 81       	ld	r25, Z
    137a:	9f 7d       	andi	r25, 0xDF	; 223
    137c:	90 83       	st	Z, r25
    137e:	84 ff       	sbrs	r24, 4
    1380:	08 c0       	rjmp	.+16     	; 0x1392 <LCD0_write+0xc6>
    1382:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    1386:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    138a:	90 81       	ld	r25, Z
    138c:	90 61       	ori	r25, 0x10	; 16
    138e:	90 83       	st	Z, r25
    1390:	07 c0       	rjmp	.+14     	; 0x13a0 <LCD0_write+0xd4>
    1392:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    1396:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    139a:	90 81       	ld	r25, Z
    139c:	9f 7e       	andi	r25, 0xEF	; 239
    139e:	90 83       	st	Z, r25
    13a0:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    13a4:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    13a8:	90 81       	ld	r25, Z
    13aa:	9b 7f       	andi	r25, 0xFB	; 251
    13ac:	90 83       	st	Z, r25
    13ae:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    13b2:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    13b6:	90 81       	ld	r25, Z
    13b8:	94 60       	ori	r25, 0x04	; 4
    13ba:	90 83       	st	Z, r25
    13bc:	83 ff       	sbrs	r24, 3
    13be:	08 c0       	rjmp	.+16     	; 0x13d0 <LCD0_write+0x104>
    13c0:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    13c4:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    13c8:	90 81       	ld	r25, Z
    13ca:	90 68       	ori	r25, 0x80	; 128
    13cc:	90 83       	st	Z, r25
    13ce:	07 c0       	rjmp	.+14     	; 0x13de <LCD0_write+0x112>
    13d0:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    13d4:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    13d8:	90 81       	ld	r25, Z
    13da:	9f 77       	andi	r25, 0x7F	; 127
    13dc:	90 83       	st	Z, r25
    13de:	82 ff       	sbrs	r24, 2
    13e0:	08 c0       	rjmp	.+16     	; 0x13f2 <LCD0_write+0x126>
    13e2:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    13e6:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    13ea:	90 81       	ld	r25, Z
    13ec:	90 64       	ori	r25, 0x40	; 64
    13ee:	90 83       	st	Z, r25
    13f0:	07 c0       	rjmp	.+14     	; 0x1400 <LCD0_write+0x134>
    13f2:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    13f6:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    13fa:	90 81       	ld	r25, Z
    13fc:	9f 7b       	andi	r25, 0xBF	; 191
    13fe:	90 83       	st	Z, r25
    1400:	81 ff       	sbrs	r24, 1
    1402:	08 c0       	rjmp	.+16     	; 0x1414 <LCD0_write+0x148>
    1404:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    1408:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    140c:	90 81       	ld	r25, Z
    140e:	90 62       	ori	r25, 0x20	; 32
    1410:	90 83       	st	Z, r25
    1412:	07 c0       	rjmp	.+14     	; 0x1422 <LCD0_write+0x156>
    1414:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    1418:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    141c:	90 81       	ld	r25, Z
    141e:	9f 7d       	andi	r25, 0xDF	; 223
    1420:	90 83       	st	Z, r25
    1422:	80 ff       	sbrs	r24, 0
    1424:	08 c0       	rjmp	.+16     	; 0x1436 <LCD0_write+0x16a>
    1426:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    142a:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    142e:	80 81       	ld	r24, Z
    1430:	80 61       	ori	r24, 0x10	; 16
    1432:	80 83       	st	Z, r24
    1434:	07 c0       	rjmp	.+14     	; 0x1444 <LCD0_write+0x178>
    1436:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    143a:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    143e:	80 81       	ld	r24, Z
    1440:	8f 7e       	andi	r24, 0xEF	; 239
    1442:	80 83       	st	Z, r24
    1444:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    1448:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    144c:	80 81       	ld	r24, Z
    144e:	8b 7f       	andi	r24, 0xFB	; 251
    1450:	80 83       	st	Z, r24
    1452:	08 95       	ret

00001454 <LCD0_read>:
    1454:	e0 91 bf 02 	lds	r30, 0x02BF	; 0x8002bf <lcd0_DDR>
    1458:	f0 91 c0 02 	lds	r31, 0x02C0	; 0x8002c0 <lcd0_DDR+0x1>
    145c:	20 81       	ld	r18, Z
    145e:	2f 70       	andi	r18, 0x0F	; 15
    1460:	20 83       	st	Z, r18
    1462:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    1466:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    146a:	20 81       	ld	r18, Z
    146c:	20 6f       	ori	r18, 0xF0	; 240
    146e:	20 83       	st	Z, r18
    1470:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    1474:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    1478:	20 81       	ld	r18, Z
    147a:	22 60       	ori	r18, 0x02	; 2
    147c:	20 83       	st	Z, r18
    147e:	89 2b       	or	r24, r25
    1480:	41 f0       	breq	.+16     	; 0x1492 <LCD0_read+0x3e>
    1482:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    1486:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    148a:	80 81       	ld	r24, Z
    148c:	81 60       	ori	r24, 0x01	; 1
    148e:	80 83       	st	Z, r24
    1490:	07 c0       	rjmp	.+14     	; 0x14a0 <LCD0_read+0x4c>
    1492:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    1496:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    149a:	80 81       	ld	r24, Z
    149c:	8e 7f       	andi	r24, 0xFE	; 254
    149e:	80 83       	st	Z, r24
    14a0:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    14a4:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    14a8:	80 81       	ld	r24, Z
    14aa:	84 60       	ori	r24, 0x04	; 4
    14ac:	80 83       	st	Z, r24
    14ae:	e0 91 b8 02 	lds	r30, 0x02B8	; 0x8002b8 <lcd0_PIN>
    14b2:	f0 91 b9 02 	lds	r31, 0x02B9	; 0x8002b9 <lcd0_PIN+0x1>
    14b6:	80 81       	ld	r24, Z
    14b8:	88 23       	and	r24, r24
    14ba:	14 f0       	brlt	.+4      	; 0x14c0 <LCD0_read+0x6c>
    14bc:	80 e0       	ldi	r24, 0x00	; 0
    14be:	01 c0       	rjmp	.+2      	; 0x14c2 <LCD0_read+0x6e>
    14c0:	80 e8       	ldi	r24, 0x80	; 128
    14c2:	90 81       	ld	r25, Z
    14c4:	96 ff       	sbrs	r25, 6
    14c6:	02 c0       	rjmp	.+4      	; 0x14cc <LCD0_read+0x78>
    14c8:	80 64       	ori	r24, 0x40	; 64
    14ca:	01 c0       	rjmp	.+2      	; 0x14ce <LCD0_read+0x7a>
    14cc:	8f 7b       	andi	r24, 0xBF	; 191
    14ce:	90 81       	ld	r25, Z
    14d0:	95 ff       	sbrs	r25, 5
    14d2:	02 c0       	rjmp	.+4      	; 0x14d8 <LCD0_read+0x84>
    14d4:	80 62       	ori	r24, 0x20	; 32
    14d6:	01 c0       	rjmp	.+2      	; 0x14da <LCD0_read+0x86>
    14d8:	8f 7d       	andi	r24, 0xDF	; 223
    14da:	90 81       	ld	r25, Z
    14dc:	94 ff       	sbrs	r25, 4
    14de:	02 c0       	rjmp	.+4      	; 0x14e4 <LCD0_read+0x90>
    14e0:	80 61       	ori	r24, 0x10	; 16
    14e2:	01 c0       	rjmp	.+2      	; 0x14e6 <LCD0_read+0x92>
    14e4:	8f 7e       	andi	r24, 0xEF	; 239
    14e6:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    14ea:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    14ee:	90 81       	ld	r25, Z
    14f0:	9b 7f       	andi	r25, 0xFB	; 251
    14f2:	90 83       	st	Z, r25
    14f4:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    14f8:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    14fc:	90 81       	ld	r25, Z
    14fe:	94 60       	ori	r25, 0x04	; 4
    1500:	90 83       	st	Z, r25
    1502:	e0 91 b8 02 	lds	r30, 0x02B8	; 0x8002b8 <lcd0_PIN>
    1506:	f0 91 b9 02 	lds	r31, 0x02B9	; 0x8002b9 <lcd0_PIN+0x1>
    150a:	90 81       	ld	r25, Z
    150c:	99 23       	and	r25, r25
    150e:	14 f4       	brge	.+4      	; 0x1514 <LCD0_read+0xc0>
    1510:	88 60       	ori	r24, 0x08	; 8
    1512:	01 c0       	rjmp	.+2      	; 0x1516 <LCD0_read+0xc2>
    1514:	87 7f       	andi	r24, 0xF7	; 247
    1516:	90 81       	ld	r25, Z
    1518:	96 ff       	sbrs	r25, 6
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <LCD0_read+0xcc>
    151c:	84 60       	ori	r24, 0x04	; 4
    151e:	01 c0       	rjmp	.+2      	; 0x1522 <LCD0_read+0xce>
    1520:	8b 7f       	andi	r24, 0xFB	; 251
    1522:	90 81       	ld	r25, Z
    1524:	95 ff       	sbrs	r25, 5
    1526:	02 c0       	rjmp	.+4      	; 0x152c <LCD0_read+0xd8>
    1528:	82 60       	ori	r24, 0x02	; 2
    152a:	01 c0       	rjmp	.+2      	; 0x152e <LCD0_read+0xda>
    152c:	8d 7f       	andi	r24, 0xFD	; 253
    152e:	90 81       	ld	r25, Z
    1530:	94 ff       	sbrs	r25, 4
    1532:	02 c0       	rjmp	.+4      	; 0x1538 <LCD0_read+0xe4>
    1534:	81 60       	ori	r24, 0x01	; 1
    1536:	01 c0       	rjmp	.+2      	; 0x153a <LCD0_read+0xe6>
    1538:	8e 7f       	andi	r24, 0xFE	; 254
    153a:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    153e:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    1542:	90 81       	ld	r25, Z
    1544:	9b 7f       	andi	r25, 0xFB	; 251
    1546:	90 83       	st	Z, r25
    1548:	08 95       	ret

0000154a <LCD0_BF>:
    154a:	cf 93       	push	r28
    154c:	df 93       	push	r29
    154e:	80 e0       	ldi	r24, 0x00	; 0
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	80 df       	rcall	.-256    	; 0x1454 <LCD0_read>
    1554:	cb e0       	ldi	r28, 0x0B	; 11
    1556:	d0 e0       	ldi	r29, 0x00	; 0
    1558:	05 c0       	rjmp	.+10     	; 0x1564 <LCD0_BF+0x1a>
    155a:	80 e0       	ldi	r24, 0x00	; 0
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	7a df       	rcall	.-268    	; 0x1454 <LCD0_read>
    1560:	21 97       	sbiw	r28, 0x01	; 1
    1562:	11 f0       	breq	.+4      	; 0x1568 <LCD0_BF+0x1e>
    1564:	88 23       	and	r24, r24
    1566:	cc f3       	brlt	.-14     	; 0x155a <LCD0_BF+0x10>
    1568:	df 91       	pop	r29
    156a:	cf 91       	pop	r28
    156c:	08 95       	ret

0000156e <LCD0_putch>:
    156e:	61 e0       	ldi	r22, 0x01	; 1
    1570:	70 e0       	ldi	r23, 0x00	; 0
    1572:	ac de       	rcall	.-680    	; 0x12cc <LCD0_write>
    1574:	ea cf       	rjmp	.-44     	; 0x154a <LCD0_BF>
    1576:	08 95       	ret

00001578 <LCD0_getch>:
    1578:	cf 93       	push	r28
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	6a df       	rcall	.-300    	; 0x1454 <LCD0_read>
    1580:	c8 2f       	mov	r28, r24
    1582:	e3 df       	rcall	.-58     	; 0x154a <LCD0_BF>
    1584:	8c 2f       	mov	r24, r28
    1586:	cf 91       	pop	r28
    1588:	08 95       	ret

0000158a <LCD0_string>:
    158a:	cf 93       	push	r28
    158c:	df 93       	push	r29
    158e:	ec 01       	movw	r28, r24
    1590:	88 81       	ld	r24, Y
    1592:	88 23       	and	r24, r24
    1594:	41 f0       	breq	.+16     	; 0x15a6 <LCD0_string+0x1c>
    1596:	21 96       	adiw	r28, 0x01	; 1
    1598:	61 e0       	ldi	r22, 0x01	; 1
    159a:	70 e0       	ldi	r23, 0x00	; 0
    159c:	97 de       	rcall	.-722    	; 0x12cc <LCD0_write>
    159e:	d5 df       	rcall	.-86     	; 0x154a <LCD0_BF>
    15a0:	89 91       	ld	r24, Y+
    15a2:	81 11       	cpse	r24, r1
    15a4:	f9 cf       	rjmp	.-14     	; 0x1598 <LCD0_string+0xe>
    15a6:	df 91       	pop	r29
    15a8:	cf 91       	pop	r28
    15aa:	08 95       	ret

000015ac <LCD0_string_size>:
    15ac:	0f 93       	push	r16
    15ae:	1f 93       	push	r17
    15b0:	cf 93       	push	r28
    15b2:	df 93       	push	r29
    15b4:	fc 01       	movw	r30, r24
    15b6:	d6 2f       	mov	r29, r22
    15b8:	80 81       	ld	r24, Z
    15ba:	88 23       	and	r24, r24
    15bc:	51 f0       	breq	.+20     	; 0x15d2 <LCD0_string_size+0x26>
    15be:	8f 01       	movw	r16, r30
    15c0:	0f 5f       	subi	r16, 0xFF	; 255
    15c2:	1f 4f       	sbci	r17, 0xFF	; 255
    15c4:	61 11       	cpse	r22, r1
    15c6:	09 c0       	rjmp	.+18     	; 0x15da <LCD0_string_size+0x2e>
    15c8:	1b c0       	rjmp	.+54     	; 0x1600 <LCD0_string_size+0x54>
    15ca:	cf 5f       	subi	r28, 0xFF	; 255
    15cc:	dc 17       	cp	r29, r28
    15ce:	30 f4       	brcc	.+12     	; 0x15dc <LCD0_string_size+0x30>
    15d0:	01 c0       	rjmp	.+2      	; 0x15d4 <LCD0_string_size+0x28>
    15d2:	c0 e0       	ldi	r28, 0x00	; 0
    15d4:	cd 17       	cp	r28, r29
    15d6:	60 f0       	brcs	.+24     	; 0x15f0 <LCD0_string_size+0x44>
    15d8:	13 c0       	rjmp	.+38     	; 0x1600 <LCD0_string_size+0x54>
    15da:	c1 e0       	ldi	r28, 0x01	; 1
    15dc:	61 e0       	ldi	r22, 0x01	; 1
    15de:	70 e0       	ldi	r23, 0x00	; 0
    15e0:	75 de       	rcall	.-790    	; 0x12cc <LCD0_write>
    15e2:	b3 df       	rcall	.-154    	; 0x154a <LCD0_BF>
    15e4:	f8 01       	movw	r30, r16
    15e6:	81 91       	ld	r24, Z+
    15e8:	8f 01       	movw	r16, r30
    15ea:	81 11       	cpse	r24, r1
    15ec:	ee cf       	rjmp	.-36     	; 0x15ca <LCD0_string_size+0x1e>
    15ee:	f2 cf       	rjmp	.-28     	; 0x15d4 <LCD0_string_size+0x28>
    15f0:	cf 5f       	subi	r28, 0xFF	; 255
    15f2:	61 e0       	ldi	r22, 0x01	; 1
    15f4:	70 e0       	ldi	r23, 0x00	; 0
    15f6:	80 e2       	ldi	r24, 0x20	; 32
    15f8:	69 de       	rcall	.-814    	; 0x12cc <LCD0_write>
    15fa:	a7 df       	rcall	.-178    	; 0x154a <LCD0_BF>
    15fc:	cd 17       	cp	r28, r29
    15fe:	c0 f3       	brcs	.-16     	; 0x15f0 <LCD0_string_size+0x44>
    1600:	df 91       	pop	r29
    1602:	cf 91       	pop	r28
    1604:	1f 91       	pop	r17
    1606:	0f 91       	pop	r16
    1608:	08 95       	ret

0000160a <LCD0_hspace>:
    160a:	cf 93       	push	r28
    160c:	c8 2f       	mov	r28, r24
    160e:	88 23       	and	r24, r24
    1610:	39 f0       	breq	.+14     	; 0x1620 <LCD0_hspace+0x16>
    1612:	61 e0       	ldi	r22, 0x01	; 1
    1614:	70 e0       	ldi	r23, 0x00	; 0
    1616:	80 e2       	ldi	r24, 0x20	; 32
    1618:	59 de       	rcall	.-846    	; 0x12cc <LCD0_write>
    161a:	97 df       	rcall	.-210    	; 0x154a <LCD0_BF>
    161c:	c1 50       	subi	r28, 0x01	; 1
    161e:	c9 f7       	brne	.-14     	; 0x1612 <LCD0_hspace+0x8>
    1620:	cf 91       	pop	r28
    1622:	08 95       	ret

00001624 <LCD0_gotoxy>:
    1624:	26 2f       	mov	r18, r22
    1626:	81 30       	cpi	r24, 0x01	; 1
    1628:	91 05       	cpc	r25, r1
    162a:	71 f0       	breq	.+28     	; 0x1648 <LCD0_gotoxy+0x24>
    162c:	30 f0       	brcs	.+12     	; 0x163a <LCD0_gotoxy+0x16>
    162e:	82 30       	cpi	r24, 0x02	; 2
    1630:	91 05       	cpc	r25, r1
    1632:	89 f0       	breq	.+34     	; 0x1656 <LCD0_gotoxy+0x32>
    1634:	03 97       	sbiw	r24, 0x03	; 3
    1636:	b1 f0       	breq	.+44     	; 0x1664 <LCD0_gotoxy+0x40>
    1638:	08 95       	ret
    163a:	60 e0       	ldi	r22, 0x00	; 0
    163c:	70 e0       	ldi	r23, 0x00	; 0
    163e:	80 e8       	ldi	r24, 0x80	; 128
    1640:	82 0f       	add	r24, r18
    1642:	44 de       	rcall	.-888    	; 0x12cc <LCD0_write>
    1644:	82 cf       	rjmp	.-252    	; 0x154a <LCD0_BF>
    1646:	08 95       	ret
    1648:	60 e0       	ldi	r22, 0x00	; 0
    164a:	70 e0       	ldi	r23, 0x00	; 0
    164c:	80 ec       	ldi	r24, 0xC0	; 192
    164e:	82 0f       	add	r24, r18
    1650:	3d de       	rcall	.-902    	; 0x12cc <LCD0_write>
    1652:	7b cf       	rjmp	.-266    	; 0x154a <LCD0_BF>
    1654:	08 95       	ret
    1656:	60 e0       	ldi	r22, 0x00	; 0
    1658:	70 e0       	ldi	r23, 0x00	; 0
    165a:	84 e9       	ldi	r24, 0x94	; 148
    165c:	82 0f       	add	r24, r18
    165e:	36 de       	rcall	.-916    	; 0x12cc <LCD0_write>
    1660:	74 cf       	rjmp	.-280    	; 0x154a <LCD0_BF>
    1662:	08 95       	ret
    1664:	60 e0       	ldi	r22, 0x00	; 0
    1666:	70 e0       	ldi	r23, 0x00	; 0
    1668:	84 ed       	ldi	r24, 0xD4	; 212
    166a:	82 0f       	add	r24, r18
    166c:	2f de       	rcall	.-930    	; 0x12cc <LCD0_write>
    166e:	6d cf       	rjmp	.-294    	; 0x154a <LCD0_BF>
    1670:	08 95       	ret

00001672 <LCD0_clear>:
    1672:	60 e0       	ldi	r22, 0x00	; 0
    1674:	70 e0       	ldi	r23, 0x00	; 0
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	29 de       	rcall	.-942    	; 0x12cc <LCD0_write>
    167a:	87 ee       	ldi	r24, 0xE7	; 231
    167c:	97 e1       	ldi	r25, 0x17	; 23
    167e:	01 97       	sbiw	r24, 0x01	; 1
    1680:	f1 f7       	brne	.-4      	; 0x167e <LCD0_clear+0xc>
    1682:	00 c0       	rjmp	.+0      	; 0x1684 <LCD0_clear+0x12>
    1684:	00 00       	nop
    1686:	08 95       	ret

00001688 <LCD0_inic>:
	return lcd0;
}
void LCD0_inic(void)
{
	//LCD INIC
	*lcd0_DDR=(1<<RS)|(1<<RW)|(1<<EN)|(0<<NC);
    1688:	e0 91 bf 02 	lds	r30, 0x02BF	; 0x8002bf <lcd0_DDR>
    168c:	f0 91 c0 02 	lds	r31, 0x02C0	; 0x8002c0 <lcd0_DDR+0x1>
    1690:	87 e0       	ldi	r24, 0x07	; 7
    1692:	80 83       	st	Z, r24
	*lcd0_PORT=(1<<NC);
    1694:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    1698:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    169c:	88 e0       	ldi	r24, 0x08	; 8
    169e:	80 83       	st	Z, r24
    16a0:	2f ef       	ldi	r18, 0xFF	; 255
    16a2:	83 ef       	ldi	r24, 0xF3	; 243
    16a4:	91 e0       	ldi	r25, 0x01	; 1
    16a6:	21 50       	subi	r18, 0x01	; 1
    16a8:	80 40       	sbci	r24, 0x00	; 0
    16aa:	90 40       	sbci	r25, 0x00	; 0
    16ac:	e1 f7       	brne	.-8      	; 0x16a6 <LCD0_inic+0x1e>
    16ae:	00 c0       	rjmp	.+0      	; 0x16b0 <LCD0_inic+0x28>
    16b0:	00 00       	nop
	/***INICIALIZACAO LCD**datasheet*/
	_delay_ms(40);
	LCD0_write(0x33,INST); //function set
    16b2:	60 e0       	ldi	r22, 0x00	; 0
    16b4:	70 e0       	ldi	r23, 0x00	; 0
    16b6:	83 e3       	ldi	r24, 0x33	; 51
    16b8:	09 de       	rcall	.-1006   	; 0x12cc <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    16ba:	20 ed       	ldi	r18, 0xD0	; 208
    16bc:	2a 95       	dec	r18
    16be:	f1 f7       	brne	.-4      	; 0x16bc <LCD0_inic+0x34>
	_delay_us(39);
	LCD0_write(0x33,INST); //function set
    16c0:	60 e0       	ldi	r22, 0x00	; 0
    16c2:	70 e0       	ldi	r23, 0x00	; 0
    16c4:	83 e3       	ldi	r24, 0x33	; 51
    16c6:	02 de       	rcall	.-1020   	; 0x12cc <LCD0_write>
    16c8:	80 ed       	ldi	r24, 0xD0	; 208
    16ca:	8a 95       	dec	r24
    16cc:	f1 f7       	brne	.-4      	; 0x16ca <LCD0_inic+0x42>
	_delay_us(39);
	LCD0_write(0x2B,INST); //function set
    16ce:	60 e0       	ldi	r22, 0x00	; 0
    16d0:	70 e0       	ldi	r23, 0x00	; 0
    16d2:	8b e2       	ldi	r24, 0x2B	; 43
    16d4:	fb dd       	rcall	.-1034   	; 0x12cc <LCD0_write>
    16d6:	95 ec       	ldi	r25, 0xC5	; 197
    16d8:	9a 95       	dec	r25
    16da:	f1 f7       	brne	.-4      	; 0x16d8 <LCD0_inic+0x50>
    16dc:	00 00       	nop
	_delay_us(37);
	LCD0_write(0x0C,INST);// display on/off control
    16de:	60 e0       	ldi	r22, 0x00	; 0
    16e0:	70 e0       	ldi	r23, 0x00	; 0
    16e2:	8c e0       	ldi	r24, 0x0C	; 12
    16e4:	f3 dd       	rcall	.-1050   	; 0x12cc <LCD0_write>
    16e6:	25 ec       	ldi	r18, 0xC5	; 197
    16e8:	2a 95       	dec	r18
    16ea:	f1 f7       	brne	.-4      	; 0x16e8 <LCD0_inic+0x60>
	_delay_us(37);
	LCD0_write(0x01,INST);// clear display
    16ec:	00 00       	nop
    16ee:	60 e0       	ldi	r22, 0x00	; 0
    16f0:	70 e0       	ldi	r23, 0x00	; 0
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	eb dd       	rcall	.-1066   	; 0x12cc <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    16f6:	87 ee       	ldi	r24, 0xE7	; 231
    16f8:	97 e1       	ldi	r25, 0x17	; 23
    16fa:	01 97       	sbiw	r24, 0x01	; 1
    16fc:	f1 f7       	brne	.-4      	; 0x16fa <LCD0_inic+0x72>
    16fe:	00 c0       	rjmp	.+0      	; 0x1700 <LCD0_inic+0x78>
	_delay_ms(1.53);
	LCD0_write(0x06,INST);// entry mode set (crazy settings)
    1700:	00 00       	nop
    1702:	60 e0       	ldi	r22, 0x00	; 0
    1704:	70 e0       	ldi	r23, 0x00	; 0
    1706:	86 e0       	ldi	r24, 0x06	; 6
    1708:	e1 dd       	rcall	.-1086   	; 0x12cc <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    170a:	95 ec       	ldi	r25, 0xC5	; 197
    170c:	9a 95       	dec	r25
    170e:	f1 f7       	brne	.-4      	; 0x170c <LCD0_inic+0x84>
    1710:	00 00       	nop
    1712:	08 95       	ret

00001714 <LCD0enable>:
unsigned int LCD_ticks(unsigned int num);
/*
** procedure and function
*/
LCD0 LCD0enable(volatile uint8_t *ddr, volatile uint8_t *pin, volatile uint8_t *port)
{
    1714:	1f 93       	push	r17
    1716:	cf 93       	push	r28
    1718:	df 93       	push	r29
    171a:	ec 01       	movw	r28, r24
	//LOCAL VARIABLES
	uint8_t tSREG;
	tSREG=SREG;
    171c:	1f b7       	in	r17, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    171e:	8f b7       	in	r24, 0x3f	; 63
    1720:	8f 77       	andi	r24, 0x7F	; 127
    1722:	8f bf       	out	0x3f, r24	; 63
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	LCD0 lcd0;
	//import parametros
	lcd0_DDR=ddr;
    1724:	70 93 c0 02 	sts	0x02C0, r23	; 0x8002c0 <lcd0_DDR+0x1>
    1728:	60 93 bf 02 	sts	0x02BF, r22	; 0x8002bf <lcd0_DDR>
	lcd0_PIN=pin;
    172c:	50 93 b9 02 	sts	0x02B9, r21	; 0x8002b9 <lcd0_PIN+0x1>
    1730:	40 93 b8 02 	sts	0x02B8, r20	; 0x8002b8 <lcd0_PIN>
	lcd0_PORT=port;
    1734:	30 93 c3 02 	sts	0x02C3, r19	; 0x8002c3 <lcd0_PORT+0x1>
    1738:	20 93 c2 02 	sts	0x02C2, r18	; 0x8002c2 <lcd0_PORT>
	//inic variables
	*lcd0_DDR=0x00;
    173c:	fb 01       	movw	r30, r22
    173e:	10 82       	st	Z, r1
	*lcd0_PORT=0xFF;
    1740:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <lcd0_PORT>
    1744:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <lcd0_PORT+0x1>
    1748:	8f ef       	ldi	r24, 0xFF	; 255
    174a:	80 83       	st	Z, r24
	lcd0_detect=*lcd0_PIN & (1<<NC);
    174c:	e0 91 b8 02 	lds	r30, 0x02B8	; 0x8002b8 <lcd0_PIN>
    1750:	f0 91 b9 02 	lds	r31, 0x02B9	; 0x8002b9 <lcd0_PIN+0x1>
    1754:	80 81       	ld	r24, Z
    1756:	88 70       	andi	r24, 0x08	; 8
    1758:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <lcd0_detect>
	lcd0.hspace=LCD0_hspace;
	lcd0.clear=LCD0_clear;
	lcd0.gotoxy=LCD0_gotoxy;
	lcd0.reboot=LCD0_reboot;
	//LCD INIC
	LCD0_inic();
    175c:	95 df       	rcall	.-214    	; 0x1688 <LCD0_inic>
	SREG=tSREG;
    175e:	1f bf       	out	0x3f, r17	; 63
	//
	return lcd0;
    1760:	86 e6       	ldi	r24, 0x66	; 102
    1762:	99 e0       	ldi	r25, 0x09	; 9
    1764:	99 83       	std	Y+1, r25	; 0x01
    1766:	88 83       	st	Y, r24
    1768:	8a e2       	ldi	r24, 0x2A	; 42
    176a:	9a e0       	ldi	r25, 0x0A	; 10
    176c:	9b 83       	std	Y+3, r25	; 0x03
    176e:	8a 83       	std	Y+2, r24	; 0x02
    1770:	85 ea       	ldi	r24, 0xA5	; 165
    1772:	9a e0       	ldi	r25, 0x0A	; 10
    1774:	9d 83       	std	Y+5, r25	; 0x05
    1776:	8c 83       	std	Y+4, r24	; 0x04
    1778:	87 eb       	ldi	r24, 0xB7	; 183
    177a:	9a e0       	ldi	r25, 0x0A	; 10
    177c:	9f 83       	std	Y+7, r25	; 0x07
    177e:	8e 83       	std	Y+6, r24	; 0x06
    1780:	8c eb       	ldi	r24, 0xBC	; 188
    1782:	9a e0       	ldi	r25, 0x0A	; 10
    1784:	99 87       	std	Y+9, r25	; 0x09
    1786:	88 87       	std	Y+8, r24	; 0x08
    1788:	85 ec       	ldi	r24, 0xC5	; 197
    178a:	9a e0       	ldi	r25, 0x0A	; 10
    178c:	9b 87       	std	Y+11, r25	; 0x0b
    178e:	8a 87       	std	Y+10, r24	; 0x0a
    1790:	86 ed       	ldi	r24, 0xD6	; 214
    1792:	9a e0       	ldi	r25, 0x0A	; 10
    1794:	9d 87       	std	Y+13, r25	; 0x0d
    1796:	8c 87       	std	Y+12, r24	; 0x0c
    1798:	85 e0       	ldi	r24, 0x05	; 5
    179a:	9b e0       	ldi	r25, 0x0B	; 11
    179c:	9f 87       	std	Y+15, r25	; 0x0f
    179e:	8e 87       	std	Y+14, r24	; 0x0e
    17a0:	89 e3       	ldi	r24, 0x39	; 57
    17a2:	9b e0       	ldi	r25, 0x0B	; 11
    17a4:	99 8b       	std	Y+17, r25	; 0x11
    17a6:	88 8b       	std	Y+16, r24	; 0x10
    17a8:	82 e1       	ldi	r24, 0x12	; 18
    17aa:	9b e0       	ldi	r25, 0x0B	; 11
    17ac:	9b 8b       	std	Y+19, r25	; 0x13
    17ae:	8a 8b       	std	Y+18, r24	; 0x12
    17b0:	81 ee       	ldi	r24, 0xE1	; 225
    17b2:	9b e0       	ldi	r25, 0x0B	; 11
    17b4:	9d 8b       	std	Y+21, r25	; 0x15
    17b6:	8c 8b       	std	Y+20, r24	; 0x14
}
    17b8:	ce 01       	movw	r24, r28
    17ba:	df 91       	pop	r29
    17bc:	cf 91       	pop	r28
    17be:	1f 91       	pop	r17
    17c0:	08 95       	ret

000017c2 <LCD0_reboot>:
	*lcd0_PORT|=(1<<EN);
	LCD_ticks(num);
	*lcd0_PORT&=~(1<<EN);
}
void LCD0_reboot(void)
{
    17c2:	cf 93       	push	r28
	//low high detect pin NC
	uint8_t i;
	uint8_t tmp;
	tmp=*lcd0_PIN & (1<<NC);
    17c4:	e0 91 b8 02 	lds	r30, 0x02B8	; 0x8002b8 <lcd0_PIN>
    17c8:	f0 91 b9 02 	lds	r31, 0x02B9	; 0x8002b9 <lcd0_PIN+0x1>
    17cc:	c0 81       	ld	r28, Z
    17ce:	c8 70       	andi	r28, 0x08	; 8
	i=tmp^lcd0_detect;
    17d0:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <lcd0_detect>
    17d4:	8c 27       	eor	r24, r28
	i&=tmp;
	if(i)
    17d6:	8c 23       	and	r24, r28
    17d8:	09 f0       	breq	.+2      	; 0x17dc <LCD0_reboot+0x1a>
		LCD0_inic();
    17da:	56 df       	rcall	.-340    	; 0x1688 <LCD0_inic>
	lcd0_detect=tmp;
    17dc:	c0 93 c1 02 	sts	0x02C1, r28	; 0x8002c1 <lcd0_detect>
}
    17e0:	cf 91       	pop	r28
    17e2:	08 95       	ret

000017e4 <LFSMquant>:
	}//End switch
	return status;
}
/***quant***/
uint16_t LFSMquant(struct lfsm *r)
{
    17e4:	af 92       	push	r10
    17e6:	bf 92       	push	r11
    17e8:	cf 92       	push	r12
    17ea:	df 92       	push	r13
    17ec:	ef 92       	push	r14
    17ee:	ff 92       	push	r15
    17f0:	0f 93       	push	r16
    17f2:	1f 93       	push	r17
    17f4:	cf 93       	push	r28
    17f6:	df 93       	push	r29
	uint16_t i1;
	uint8_t sizeblock=r->sizeblock;
    17f8:	dc 01       	movw	r26, r24
    17fa:	14 96       	adiw	r26, 0x04	; 4
    17fc:	cc 90       	ld	r12, X
    17fe:	14 97       	sbiw	r26, 0x04	; 4
	struct lfsmdata* pdata=&data;
	uint16_t programmed;
	for(i1=ZERO,programmed=ZERO;i1<r->sizeeeprom;i1++){
    1800:	12 96       	adiw	r26, 0x02	; 2
    1802:	2d 91       	ld	r18, X+
    1804:	3c 91       	ld	r19, X
    1806:	13 97       	sbiw	r26, 0x03	; 3
    1808:	23 2b       	or	r18, r19
    180a:	21 f1       	breq	.+72     	; 0x1854 <LFSMquant+0x70>
    180c:	7c 01       	movw	r14, r24
    180e:	d1 2c       	mov	r13, r1
    1810:	00 e0       	ldi	r16, 0x00	; 0
    1812:	10 e0       	ldi	r17, 0x00	; 0
    1814:	a1 2c       	mov	r10, r1
    1816:	b1 2c       	mov	r11, r1
    1818:	c0 e0       	ldi	r28, 0x00	; 0
    181a:	d0 e0       	ldi	r29, 0x00	; 0
		r->eprom->read_block(pdata, (const void*) (i1*sizeblock), sizeblock);
    181c:	d7 01       	movw	r26, r14
    181e:	ed 91       	ld	r30, X+
    1820:	fc 91       	ld	r31, X
    1822:	00 8c       	ldd	r0, Z+24	; 0x18
    1824:	f1 8d       	ldd	r31, Z+25	; 0x19
    1826:	e0 2d       	mov	r30, r0
    1828:	a6 01       	movw	r20, r12
    182a:	b8 01       	movw	r22, r16
    182c:	80 ea       	ldi	r24, 0xA0	; 160
    182e:	92 e0       	ldi	r25, 0x02	; 2
    1830:	09 95       	icall
		if(pdata->page!=EMPTY){ //Count memory used
    1832:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <data>
    1836:	88 23       	and	r24, r24
    1838:	19 f0       	breq	.+6      	; 0x1840 <LFSMquant+0x5c>
			programmed++;
    183a:	bf ef       	ldi	r27, 0xFF	; 255
    183c:	ab 1a       	sub	r10, r27
    183e:	bb 0a       	sbc	r11, r27
{
	uint16_t i1;
	uint8_t sizeblock=r->sizeblock;
	struct lfsmdata* pdata=&data;
	uint16_t programmed;
	for(i1=ZERO,programmed=ZERO;i1<r->sizeeeprom;i1++){
    1840:	21 96       	adiw	r28, 0x01	; 1
    1842:	0c 0d       	add	r16, r12
    1844:	1d 1d       	adc	r17, r13
    1846:	f7 01       	movw	r30, r14
    1848:	82 81       	ldd	r24, Z+2	; 0x02
    184a:	93 81       	ldd	r25, Z+3	; 0x03
    184c:	c8 17       	cp	r28, r24
    184e:	d9 07       	cpc	r29, r25
    1850:	28 f3       	brcs	.-54     	; 0x181c <LFSMquant+0x38>
    1852:	02 c0       	rjmp	.+4      	; 0x1858 <LFSMquant+0x74>
    1854:	a1 2c       	mov	r10, r1
    1856:	b1 2c       	mov	r11, r1
		if(pdata->page!=EMPTY){ //Count memory used
			programmed++;
		}
	}
	return programmed;
}
    1858:	c5 01       	movw	r24, r10
    185a:	df 91       	pop	r29
    185c:	cf 91       	pop	r28
    185e:	1f 91       	pop	r17
    1860:	0f 91       	pop	r16
    1862:	ff 90       	pop	r15
    1864:	ef 90       	pop	r14
    1866:	df 90       	pop	r13
    1868:	cf 90       	pop	r12
    186a:	bf 90       	pop	r11
    186c:	af 90       	pop	r10
    186e:	08 95       	ret

00001870 <LFSMdeleteall>:
	}//End switch
	return status;
}//End main
/***deleteall***/
uint8_t LFSMdeleteall(struct lfsm *r)
{
    1870:	af 92       	push	r10
    1872:	bf 92       	push	r11
    1874:	cf 92       	push	r12
    1876:	df 92       	push	r13
    1878:	ef 92       	push	r14
    187a:	ff 92       	push	r15
    187c:	0f 93       	push	r16
    187e:	1f 93       	push	r17
    1880:	cf 93       	push	r28
    1882:	df 93       	push	r29
    1884:	7c 01       	movw	r14, r24
	uint16_t i1;
	uint8_t status=ZERO;
	uint8_t sizeblock=r->sizeblock;
    1886:	dc 01       	movw	r26, r24
    1888:	14 96       	adiw	r26, 0x04	; 4
    188a:	cc 90       	ld	r12, X
    188c:	14 97       	sbiw	r26, 0x04	; 4
	struct lfsmdata* pdata=&data;
	for(i1=ZERO;i1<r->sizeeeprom;i1++){
    188e:	12 96       	adiw	r26, 0x02	; 2
    1890:	8d 91       	ld	r24, X+
    1892:	9c 91       	ld	r25, X
    1894:	13 97       	sbiw	r26, 0x03	; 3
    1896:	89 2b       	or	r24, r25
    1898:	81 f1       	breq	.+96     	; 0x18fa <LFSMdeleteall+0x8a>
    189a:	d1 2c       	mov	r13, r1
    189c:	c0 e0       	ldi	r28, 0x00	; 0
    189e:	d0 e0       	ldi	r29, 0x00	; 0
    18a0:	a1 2c       	mov	r10, r1
    18a2:	00 e0       	ldi	r16, 0x00	; 0
    18a4:	10 e0       	ldi	r17, 0x00	; 0
		r->eprom->read_block(pdata, (const void*) (i1*sizeblock), sizeblock);
		if(pdata->page){
			pdata->page=EMPTY;
			r->eprom->update_block(pdata, (void*) (i1*sizeblock), sizeblock);
			status=1; //All deleted
    18a6:	bb 24       	eor	r11, r11
    18a8:	b3 94       	inc	r11
	uint16_t i1;
	uint8_t status=ZERO;
	uint8_t sizeblock=r->sizeblock;
	struct lfsmdata* pdata=&data;
	for(i1=ZERO;i1<r->sizeeeprom;i1++){
		r->eprom->read_block(pdata, (const void*) (i1*sizeblock), sizeblock);
    18aa:	d7 01       	movw	r26, r14
    18ac:	ed 91       	ld	r30, X+
    18ae:	fc 91       	ld	r31, X
    18b0:	00 8c       	ldd	r0, Z+24	; 0x18
    18b2:	f1 8d       	ldd	r31, Z+25	; 0x19
    18b4:	e0 2d       	mov	r30, r0
    18b6:	a6 01       	movw	r20, r12
    18b8:	be 01       	movw	r22, r28
    18ba:	80 ea       	ldi	r24, 0xA0	; 160
    18bc:	92 e0       	ldi	r25, 0x02	; 2
    18be:	09 95       	icall
		if(pdata->page){
    18c0:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <data>
    18c4:	88 23       	and	r24, r24
    18c6:	71 f0       	breq	.+28     	; 0x18e4 <LFSMdeleteall+0x74>
			pdata->page=EMPTY;
    18c8:	10 92 a0 02 	sts	0x02A0, r1	; 0x8002a0 <data>
			r->eprom->update_block(pdata, (void*) (i1*sizeblock), sizeblock);
    18cc:	d7 01       	movw	r26, r14
    18ce:	ed 91       	ld	r30, X+
    18d0:	fc 91       	ld	r31, X
    18d2:	04 8c       	ldd	r0, Z+28	; 0x1c
    18d4:	f5 8d       	ldd	r31, Z+29	; 0x1d
    18d6:	e0 2d       	mov	r30, r0
    18d8:	a6 01       	movw	r20, r12
    18da:	be 01       	movw	r22, r28
    18dc:	80 ea       	ldi	r24, 0xA0	; 160
    18de:	92 e0       	ldi	r25, 0x02	; 2
    18e0:	09 95       	icall
			status=1; //All deleted
    18e2:	ab 2c       	mov	r10, r11
{
	uint16_t i1;
	uint8_t status=ZERO;
	uint8_t sizeblock=r->sizeblock;
	struct lfsmdata* pdata=&data;
	for(i1=ZERO;i1<r->sizeeeprom;i1++){
    18e4:	0f 5f       	subi	r16, 0xFF	; 255
    18e6:	1f 4f       	sbci	r17, 0xFF	; 255
    18e8:	cc 0d       	add	r28, r12
    18ea:	dd 1d       	adc	r29, r13
    18ec:	f7 01       	movw	r30, r14
    18ee:	82 81       	ldd	r24, Z+2	; 0x02
    18f0:	93 81       	ldd	r25, Z+3	; 0x03
    18f2:	08 17       	cp	r16, r24
    18f4:	19 07       	cpc	r17, r25
    18f6:	c8 f2       	brcs	.-78     	; 0x18aa <LFSMdeleteall+0x3a>
    18f8:	01 c0       	rjmp	.+2      	; 0x18fc <LFSMdeleteall+0x8c>
}//End main
/***deleteall***/
uint8_t LFSMdeleteall(struct lfsm *r)
{
	uint16_t i1;
	uint8_t status=ZERO;
    18fa:	a1 2c       	mov	r10, r1
			pdata->page=EMPTY;
			r->eprom->update_block(pdata, (void*) (i1*sizeblock), sizeblock);
			status=1; //All deleted
		}
	}
	r->output=ZERO;
    18fc:	d7 01       	movw	r26, r14
    18fe:	18 96       	adiw	r26, 0x08	; 8
    1900:	1c 92       	st	X, r1
    1902:	1e 92       	st	-X, r1
    1904:	17 97       	sbiw	r26, 0x07	; 7
	r->status=ZERO;
    1906:	19 96       	adiw	r26, 0x09	; 9
    1908:	1c 92       	st	X, r1
	return status;
}
    190a:	8a 2d       	mov	r24, r10
    190c:	df 91       	pop	r29
    190e:	cf 91       	pop	r28
    1910:	1f 91       	pop	r17
    1912:	0f 91       	pop	r16
    1914:	ff 90       	pop	r15
    1916:	ef 90       	pop	r14
    1918:	df 90       	pop	r13
    191a:	cf 90       	pop	r12
    191c:	bf 90       	pop	r11
    191e:	af 90       	pop	r10
    1920:	08 95       	ret

00001922 <LFSMgetoutput>:
/***get***/
uint16_t LFSMgetoutput(struct lfsm *r)
{
	return r->output;
}
    1922:	fc 01       	movw	r30, r24
    1924:	87 81       	ldd	r24, Z+7	; 0x07
    1926:	90 85       	ldd	r25, Z+8	; 0x08
    1928:	08 95       	ret

0000192a <LFSMgetstatus>:
/***get***/
uint8_t LFSMgetstatus(struct lfsm *r)
{
	return r->status;
}
    192a:	fc 01       	movw	r30, r24
    192c:	81 85       	ldd	r24, Z+9	; 0x09
    192e:	08 95       	ret

00001930 <LFSMsetoutput>:
/***set***/
void LFSMsetoutput(struct lfsm *r, uint16_t output)
{
	r->output=output;
    1930:	fc 01       	movw	r30, r24
    1932:	70 87       	std	Z+8, r23	; 0x08
    1934:	67 83       	std	Z+7, r22	; 0x07
	r->status=ZERO;
    1936:	11 86       	std	Z+9, r1	; 0x09
    1938:	08 95       	ret

0000193a <LFSMgetpage>:
}
/***get***/
uint8_t LFSMgetpage(struct lfsm *r)
{
	return r->page;
}
    193a:	fc 01       	movw	r30, r24
    193c:	85 81       	ldd	r24, Z+5	; 0x05
    193e:	08 95       	ret

00001940 <LFSMsetpage>:
/***set***/
void LFSMsetpage(struct lfsm *r, uint8_t page)
{
	r->page=page;
    1940:	fc 01       	movw	r30, r24
    1942:	65 83       	std	Z+5, r22	; 0x05
    1944:	08 95       	ret

00001946 <LFSMread>:
/*
** procedure and function
*/
/***read***/
uint8_t LFSMread(struct lfsm *r, uint8_t input)
{
    1946:	2f 92       	push	r2
    1948:	3f 92       	push	r3
    194a:	4f 92       	push	r4
    194c:	5f 92       	push	r5
    194e:	6f 92       	push	r6
    1950:	7f 92       	push	r7
    1952:	8f 92       	push	r8
    1954:	9f 92       	push	r9
    1956:	af 92       	push	r10
    1958:	bf 92       	push	r11
    195a:	cf 92       	push	r12
    195c:	df 92       	push	r13
    195e:	ef 92       	push	r14
    1960:	ff 92       	push	r15
    1962:	0f 93       	push	r16
    1964:	1f 93       	push	r17
    1966:	cf 93       	push	r28
    1968:	df 93       	push	r29
    196a:	8c 01       	movw	r16, r24
    196c:	76 2e       	mov	r7, r22
	struct lfsmdata* pdata=&data;
	int16_t n=ZERO;
	uint8_t n1=NPAGES,n2=NPAGES;
	uint8_t page=r->page;
	uint16_t HL,LH;
	HL=LFSMhl(r->input,input);
    196e:	dc 01       	movw	r26, r24
    1970:	16 96       	adiw	r26, 0x06	; 6
    1972:	cc 90       	ld	r12, X
    1974:	a6 2e       	mov	r10, r22
    1976:	ac 24       	eor	r10, r12
/***hl***/
uint16_t LFSMhl(uint16_t xi, uint16_t xf)
{
	uint16_t i;
	i=xf^xi;
	i&=xi;
    1978:	ca 20       	and	r12, r10
    197a:	d1 2c       	mov	r13, r1
/***lh***/
uint16_t LFSMlh(uint16_t xi, uint16_t xf)
{
	uint16_t i;
	i=xf^xi;
	i&=xf;
    197c:	a6 22       	and	r10, r22
    197e:	b1 2c       	mov	r11, r1
	uint8_t n1=NPAGES,n2=NPAGES;
	uint8_t page=r->page;
	uint16_t HL,LH;
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(HL || LH){ //To not waste time
    1980:	c1 14       	cp	r12, r1
    1982:	d1 04       	cpc	r13, r1
    1984:	31 f0       	breq	.+12     	; 0x1992 <LFSMread+0x4c>
		status=1; //New entry
		for(i1=ZERO;i1<r->sizeeeprom;i1++){
    1986:	f8 01       	movw	r30, r16
    1988:	82 81       	ldd	r24, Z+2	; 0x02
    198a:	93 81       	ldd	r25, Z+3	; 0x03
    198c:	89 2b       	or	r24, r25
    198e:	29 f4       	brne	.+10     	; 0x199a <LFSMread+0x54>
    1990:	b3 c0       	rjmp	.+358    	; 0x1af8 <LFSMread+0x1b2>
	uint8_t n1=NPAGES,n2=NPAGES;
	uint8_t page=r->page;
	uint16_t HL,LH;
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(HL || LH){ //To not waste time
    1992:	a1 14       	cp	r10, r1
    1994:	b1 04       	cpc	r11, r1
    1996:	b9 f7       	brne	.-18     	; 0x1986 <LFSMread+0x40>
    1998:	4a c1       	rjmp	.+660    	; 0x1c2e <LFSMread+0x2e8>
/***read***/
uint8_t LFSMread(struct lfsm *r, uint8_t input)
{
	uint16_t i1;
	uint8_t status=ZERO;
	uint8_t sizeblock=r->sizeblock;
    199a:	e4 80       	ldd	r14, Z+4	; 0x04
	struct lfsmdata* pdata=&data;
	int16_t n=ZERO;
	uint8_t n1=NPAGES,n2=NPAGES;
	uint8_t page=r->page;
    199c:	55 80       	ldd	r5, Z+5	; 0x05
    199e:	33 24       	eor	r3, r3
    19a0:	3a 94       	dec	r3
    19a2:	44 24       	eor	r4, r4
    19a4:	4a 94       	dec	r4
    19a6:	66 24       	eor	r6, r6
    19a8:	63 94       	inc	r6
    19aa:	c0 e0       	ldi	r28, 0x00	; 0
    19ac:	d0 e0       	ldi	r29, 0x00	; 0
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(HL || LH){ //To not waste time
		status=1; //New entry
		for(i1=ZERO;i1<r->sizeeeprom;i1++){
			r->eprom->read_block(pdata, (const void*) (i1*sizeblock), sizeblock);
    19ae:	f1 2c       	mov	r15, r1
							status=2; //Global logic exist
					}
					break;
				default: //Local logic
					if( (pdata->feedback & pdata->mask)==(r->output & pdata->mask) && pdata->inhl==HL && pdata->inlh==LH ){
						n=pdata->page - page;	
    19b0:	85 2c       	mov	r8, r5
    19b2:	91 2c       	mov	r9, r1
					//Do nothing, continue search in status=1.
					break;
				case 1: //Global logic
					if( pdata->inhl==HL && pdata->inlh==LH ){
							i1=r->sizeeeprom;
							status=2; //Global logic exist
    19b4:	68 94       	set
    19b6:	22 24       	eor	r2, r2
    19b8:	21 f8       	bld	r2, 1
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(HL || LH){ //To not waste time
		status=1; //New entry
		for(i1=ZERO;i1<r->sizeeeprom;i1++){
			r->eprom->read_block(pdata, (const void*) (i1*sizeblock), sizeblock);
    19ba:	ec 9e       	mul	r14, r28
    19bc:	b0 01       	movw	r22, r0
    19be:	ed 9e       	mul	r14, r29
    19c0:	70 0d       	add	r23, r0
    19c2:	fc 9e       	mul	r15, r28
    19c4:	70 0d       	add	r23, r0
    19c6:	11 24       	eor	r1, r1
    19c8:	d8 01       	movw	r26, r16
    19ca:	ed 91       	ld	r30, X+
    19cc:	fc 91       	ld	r31, X
    19ce:	00 8c       	ldd	r0, Z+24	; 0x18
    19d0:	f1 8d       	ldd	r31, Z+25	; 0x19
    19d2:	e0 2d       	mov	r30, r0
    19d4:	a7 01       	movw	r20, r14
    19d6:	80 ea       	ldi	r24, 0xA0	; 160
    19d8:	92 e0       	ldi	r25, 0x02	; 2
    19da:	09 95       	icall
			switch(pdata->page){
    19dc:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <data>
    19e0:	88 23       	and	r24, r24
    19e2:	09 f4       	brne	.+2      	; 0x19e6 <LFSMread+0xa0>
    19e4:	70 c0       	rjmp	.+224    	; 0x1ac6 <LFSMread+0x180>
    19e6:	81 30       	cpi	r24, 0x01	; 1
    19e8:	99 f4       	brne	.+38     	; 0x1a10 <LFSMread+0xca>
				case ZERO:
					//Do nothing, continue search in status=1.
					break;
				case 1: //Global logic
					if( pdata->inhl==HL && pdata->inlh==LH ){
    19ea:	20 91 a3 02 	lds	r18, 0x02A3	; 0x8002a3 <data+0x3>
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	2c 15       	cp	r18, r12
    19f2:	3d 05       	cpc	r19, r13
    19f4:	09 f0       	breq	.+2      	; 0x19f8 <LFSMread+0xb2>
    19f6:	67 c0       	rjmp	.+206    	; 0x1ac6 <LFSMread+0x180>
    19f8:	20 91 a4 02 	lds	r18, 0x02A4	; 0x8002a4 <data+0x4>
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	2a 15       	cp	r18, r10
    1a00:	3b 05       	cpc	r19, r11
    1a02:	09 f0       	breq	.+2      	; 0x1a06 <LFSMread+0xc0>
    1a04:	60 c0       	rjmp	.+192    	; 0x1ac6 <LFSMread+0x180>
							i1=r->sizeeeprom;
    1a06:	f8 01       	movw	r30, r16
    1a08:	c2 81       	ldd	r28, Z+2	; 0x02
    1a0a:	d3 81       	ldd	r29, Z+3	; 0x03
							status=2; //Global logic exist
    1a0c:	62 2c       	mov	r6, r2
    1a0e:	5b c0       	rjmp	.+182    	; 0x1ac6 <LFSMread+0x180>
					}
					break;
				default: //Local logic
					if( (pdata->feedback & pdata->mask)==(r->output & pdata->mask) && pdata->inhl==HL && pdata->inlh==LH ){
    1a10:	e0 ea       	ldi	r30, 0xA0	; 160
    1a12:	f2 e0       	ldi	r31, 0x02	; 2
    1a14:	41 81       	ldd	r20, Z+1	; 0x01
    1a16:	52 81       	ldd	r21, Z+2	; 0x02
    1a18:	d8 01       	movw	r26, r16
    1a1a:	17 96       	adiw	r26, 0x07	; 7
    1a1c:	2d 91       	ld	r18, X+
    1a1e:	3c 91       	ld	r19, X
    1a20:	18 97       	sbiw	r26, 0x08	; 8
    1a22:	24 27       	eor	r18, r20
    1a24:	35 27       	eor	r19, r21
    1a26:	45 81       	ldd	r20, Z+5	; 0x05
    1a28:	56 81       	ldd	r21, Z+6	; 0x06
    1a2a:	24 23       	and	r18, r20
    1a2c:	35 23       	and	r19, r21
    1a2e:	23 2b       	or	r18, r19
    1a30:	09 f0       	breq	.+2      	; 0x1a34 <LFSMread+0xee>
    1a32:	49 c0       	rjmp	.+146    	; 0x1ac6 <LFSMread+0x180>
    1a34:	20 91 a3 02 	lds	r18, 0x02A3	; 0x8002a3 <data+0x3>
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	2c 15       	cp	r18, r12
    1a3c:	3d 05       	cpc	r19, r13
    1a3e:	09 f0       	breq	.+2      	; 0x1a42 <LFSMread+0xfc>
    1a40:	42 c0       	rjmp	.+132    	; 0x1ac6 <LFSMread+0x180>
    1a42:	20 91 a4 02 	lds	r18, 0x02A4	; 0x8002a4 <data+0x4>
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	2a 15       	cp	r18, r10
    1a4a:	3b 05       	cpc	r19, r11
    1a4c:	e1 f5       	brne	.+120    	; 0x1ac6 <LFSMread+0x180>
						n=pdata->page - page;	
    1a4e:	28 2f       	mov	r18, r24
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	28 19       	sub	r18, r8
    1a54:	39 09       	sbc	r19, r9
						if(!n){
    1a56:	49 f4       	brne	.+18     	; 0x1a6a <LFSMread+0x124>
							i1=r->sizeeeprom;
    1a58:	12 96       	adiw	r26, 0x02	; 2
    1a5a:	cd 91       	ld	r28, X+
    1a5c:	dc 91       	ld	r29, X
    1a5e:	13 97       	sbiw	r26, 0x03	; 3
							status=3; //Local logic exist in present page
    1a60:	0f 2e       	mov	r0, r31
    1a62:	f3 e0       	ldi	r31, 0x03	; 3
    1a64:	6f 2e       	mov	r6, r31
    1a66:	f0 2d       	mov	r31, r0
							break;
    1a68:	2e c0       	rjmp	.+92     	; 0x1ac6 <LFSMread+0x180>
						}
						if(n>ZERO){
    1a6a:	12 16       	cp	r1, r18
    1a6c:	13 06       	cpc	r1, r19
    1a6e:	9c f4       	brge	.+38     	; 0x1a96 <LFSMread+0x150>
							if(n < n1){
    1a70:	44 2d       	mov	r20, r4
    1a72:	50 e0       	ldi	r21, 0x00	; 0
    1a74:	24 17       	cp	r18, r20
    1a76:	35 07       	cpc	r19, r21
    1a78:	74 f4       	brge	.+28     	; 0x1a96 <LFSMread+0x150>
								tmp1=*pdata;
    1a7a:	9b e0       	ldi	r25, 0x0B	; 11
    1a7c:	e0 ea       	ldi	r30, 0xA0	; 160
    1a7e:	f2 e0       	ldi	r31, 0x02	; 2
    1a80:	a1 ed       	ldi	r26, 0xD1	; 209
    1a82:	b2 e0       	ldi	r27, 0x02	; 2
    1a84:	01 90       	ld	r0, Z+
    1a86:	0d 92       	st	X+, r0
    1a88:	9a 95       	dec	r25
    1a8a:	e1 f7       	brne	.-8      	; 0x1a84 <LFSMread+0x13e>
    1a8c:	48 2e       	mov	r4, r24
    1a8e:	45 18       	sub	r4, r5
								n1=n;
								status=4; //Local logic exist in page above
    1a90:	68 94       	set
    1a92:	66 24       	eor	r6, r6
    1a94:	62 f8       	bld	r6, 2
							}
						}
						if(n<ZERO){
    1a96:	33 23       	and	r19, r19
    1a98:	b4 f4       	brge	.+44     	; 0x1ac6 <LFSMread+0x180>
							if(n > -n2){
    1a9a:	43 2d       	mov	r20, r3
    1a9c:	50 e0       	ldi	r21, 0x00	; 0
    1a9e:	51 95       	neg	r21
    1aa0:	41 95       	neg	r20
    1aa2:	51 09       	sbc	r21, r1
    1aa4:	42 17       	cp	r20, r18
    1aa6:	53 07       	cpc	r21, r19
    1aa8:	74 f4       	brge	.+28     	; 0x1ac6 <LFSMread+0x180>
								tmp2=*pdata;
    1aaa:	9b e0       	ldi	r25, 0x0B	; 11
    1aac:	e0 ea       	ldi	r30, 0xA0	; 160
    1aae:	f2 e0       	ldi	r31, 0x02	; 2
    1ab0:	a6 ec       	ldi	r26, 0xC6	; 198
    1ab2:	b2 e0       	ldi	r27, 0x02	; 2
    1ab4:	01 90       	ld	r0, Z+
    1ab6:	0d 92       	st	X+, r0
    1ab8:	9a 95       	dec	r25
    1aba:	e1 f7       	brne	.-8      	; 0x1ab4 <LFSMread+0x16e>
								n2=-n;
    1abc:	35 2c       	mov	r3, r5
    1abe:	38 1a       	sub	r3, r24
								status=4; //Local logic exist in page bellow
    1ac0:	68 94       	set
    1ac2:	66 24       	eor	r6, r6
    1ac4:	62 f8       	bld	r6, 2
	uint16_t HL,LH;
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(HL || LH){ //To not waste time
		status=1; //New entry
		for(i1=ZERO;i1<r->sizeeeprom;i1++){
    1ac6:	21 96       	adiw	r28, 0x01	; 1
    1ac8:	f8 01       	movw	r30, r16
    1aca:	22 81       	ldd	r18, Z+2	; 0x02
    1acc:	33 81       	ldd	r19, Z+3	; 0x03
    1ace:	c2 17       	cp	r28, r18
    1ad0:	d3 07       	cpc	r29, r19
    1ad2:	08 f4       	brcc	.+2      	; 0x1ad6 <LFSMread+0x190>
    1ad4:	72 cf       	rjmp	.-284    	; 0x19ba <LFSMread+0x74>
					break;
			}//End switch
		}
	}
/***status confirmation***/
	switch (status){
    1ad6:	f2 e0       	ldi	r31, 0x02	; 2
    1ad8:	6f 16       	cp	r6, r31
    1ada:	89 f0       	breq	.+34     	; 0x1afe <LFSMread+0x1b8>
    1adc:	f6 15       	cp	r31, r6
    1ade:	20 f0       	brcs	.+8      	; 0x1ae8 <LFSMread+0x1a2>
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	68 16       	cp	r6, r24
    1ae4:	49 f0       	breq	.+18     	; 0x1af8 <LFSMread+0x1b2>
    1ae6:	a3 c0       	rjmp	.+326    	; 0x1c2e <LFSMread+0x2e8>
    1ae8:	93 e0       	ldi	r25, 0x03	; 3
    1aea:	69 16       	cp	r6, r25
    1aec:	69 f1       	breq	.+90     	; 0x1b48 <LFSMread+0x202>
    1aee:	a4 e0       	ldi	r26, 0x04	; 4
    1af0:	6a 16       	cp	r6, r26
    1af2:	09 f4       	brne	.+2      	; 0x1af6 <LFSMread+0x1b0>
    1af4:	4b c0       	rjmp	.+150    	; 0x1b8c <LFSMread+0x246>
    1af6:	9b c0       	rjmp	.+310    	; 0x1c2e <LFSMread+0x2e8>
		case ZERO: //No entry
			break;
		case 1: //New entry
			//Give warning and pause waiting for decision (very important).
			//Serves has flag to main function.
			r->input=input; //Update
    1af8:	f8 01       	movw	r30, r16
    1afa:	76 82       	std	Z+6, r7	; 0x06
			break;
    1afc:	98 c0       	rjmp	.+304    	; 0x1c2e <LFSMread+0x2e8>
		case 2: //Global logic exist
			r->page=pdata->page;
    1afe:	d8 01       	movw	r26, r16
    1b00:	15 96       	adiw	r26, 0x05	; 5
    1b02:	8c 93       	st	X, r24
    1b04:	15 97       	sbiw	r26, 0x05	; 5
			r->input=input; //Update
    1b06:	16 96       	adiw	r26, 0x06	; 6
    1b08:	7c 92       	st	X, r7
    1b0a:	16 97       	sbiw	r26, 0x06	; 6
			r->output=LFSMoutputcalc(r->output,pdata->outhl,pdata->outlh,pdata->mask);
    1b0c:	e0 ea       	ldi	r30, 0xA0	; 160
    1b0e:	f2 e0       	ldi	r31, 0x02	; 2
    1b10:	65 81       	ldd	r22, Z+5	; 0x05
    1b12:	76 81       	ldd	r23, Z+6	; 0x06
}
*/
/***output***/
uint16_t LFSMoutputcalc(uint16_t feedback, uint16_t hl, uint16_t lh, uint16_t mask)
{
	feedback|=(lh & mask);
    1b14:	21 85       	ldd	r18, Z+9	; 0x09
    1b16:	32 85       	ldd	r19, Z+10	; 0x0a
    1b18:	26 23       	and	r18, r22
    1b1a:	37 23       	and	r19, r23
    1b1c:	17 96       	adiw	r26, 0x07	; 7
    1b1e:	4d 91       	ld	r20, X+
    1b20:	5c 91       	ld	r21, X
    1b22:	18 97       	sbiw	r26, 0x08	; 8
    1b24:	24 2b       	or	r18, r20
    1b26:	35 2b       	or	r19, r21
			r->input=input; //Update
			break;
		case 2: //Global logic exist
			r->page=pdata->page;
			r->input=input; //Update
			r->output=LFSMoutputcalc(r->output,pdata->outhl,pdata->outlh,pdata->mask);
    1b28:	87 81       	ldd	r24, Z+7	; 0x07
    1b2a:	90 85       	ldd	r25, Z+8	; 0x08
    1b2c:	86 23       	and	r24, r22
    1b2e:	97 23       	and	r25, r23
    1b30:	80 95       	com	r24
    1b32:	90 95       	com	r25
    1b34:	82 23       	and	r24, r18
    1b36:	93 23       	and	r25, r19
    1b38:	18 96       	adiw	r26, 0x08	; 8
    1b3a:	9c 93       	st	X, r25
    1b3c:	8e 93       	st	-X, r24
    1b3e:	17 97       	sbiw	r26, 0x07	; 7
			r->status=2;
    1b40:	82 e0       	ldi	r24, 0x02	; 2
    1b42:	19 96       	adiw	r26, 0x09	; 9
    1b44:	8c 93       	st	X, r24
			break;
    1b46:	73 c0       	rjmp	.+230    	; 0x1c2e <LFSMread+0x2e8>
		case 3: //Local logic exist in present page
			r->page=pdata->page;
    1b48:	f8 01       	movw	r30, r16
    1b4a:	85 83       	std	Z+5, r24	; 0x05
			r->input=input; //Update
    1b4c:	76 82       	std	Z+6, r7	; 0x06
			r->output=LFSMoutputcalc(r->output,pdata->outhl,pdata->outlh,pdata->mask);
    1b4e:	e0 ea       	ldi	r30, 0xA0	; 160
    1b50:	f2 e0       	ldi	r31, 0x02	; 2
    1b52:	65 81       	ldd	r22, Z+5	; 0x05
    1b54:	76 81       	ldd	r23, Z+6	; 0x06
}
*/
/***output***/
uint16_t LFSMoutputcalc(uint16_t feedback, uint16_t hl, uint16_t lh, uint16_t mask)
{
	feedback|=(lh & mask);
    1b56:	21 85       	ldd	r18, Z+9	; 0x09
    1b58:	32 85       	ldd	r19, Z+10	; 0x0a
    1b5a:	26 23       	and	r18, r22
    1b5c:	37 23       	and	r19, r23
    1b5e:	d8 01       	movw	r26, r16
    1b60:	17 96       	adiw	r26, 0x07	; 7
    1b62:	4d 91       	ld	r20, X+
    1b64:	5c 91       	ld	r21, X
    1b66:	18 97       	sbiw	r26, 0x08	; 8
    1b68:	24 2b       	or	r18, r20
    1b6a:	35 2b       	or	r19, r21
			r->status=2;
			break;
		case 3: //Local logic exist in present page
			r->page=pdata->page;
			r->input=input; //Update
			r->output=LFSMoutputcalc(r->output,pdata->outhl,pdata->outlh,pdata->mask);
    1b6c:	87 81       	ldd	r24, Z+7	; 0x07
    1b6e:	90 85       	ldd	r25, Z+8	; 0x08
    1b70:	86 23       	and	r24, r22
    1b72:	97 23       	and	r25, r23
    1b74:	80 95       	com	r24
    1b76:	90 95       	com	r25
    1b78:	82 23       	and	r24, r18
    1b7a:	93 23       	and	r25, r19
    1b7c:	18 96       	adiw	r26, 0x08	; 8
    1b7e:	9c 93       	st	X, r25
    1b80:	8e 93       	st	-X, r24
    1b82:	17 97       	sbiw	r26, 0x07	; 7
			r->status=3;
    1b84:	83 e0       	ldi	r24, 0x03	; 3
    1b86:	19 96       	adiw	r26, 0x09	; 9
    1b88:	8c 93       	st	X, r24
			break;
    1b8a:	51 c0       	rjmp	.+162    	; 0x1c2e <LFSMread+0x2e8>
		case 4: //Local logic exist in page above versus local logic exist in page bellow
			//Choose closest page above otherwise closest bellow.
			r->input=input; //update
    1b8c:	f8 01       	movw	r30, r16
    1b8e:	76 82       	std	Z+6, r7	; 0x06
			if(n1>ZERO && n1<NPAGES){
    1b90:	8f ef       	ldi	r24, 0xFF	; 255
    1b92:	84 0d       	add	r24, r4
    1b94:	8e 3f       	cpi	r24, 0xFE	; 254
    1b96:	20 f5       	brcc	.+72     	; 0x1be0 <LFSMread+0x29a>
				r->page = tmp1.page;
    1b98:	e1 ed       	ldi	r30, 0xD1	; 209
    1b9a:	f2 e0       	ldi	r31, 0x02	; 2
    1b9c:	80 81       	ld	r24, Z
    1b9e:	d8 01       	movw	r26, r16
    1ba0:	15 96       	adiw	r26, 0x05	; 5
    1ba2:	8c 93       	st	X, r24
    1ba4:	15 97       	sbiw	r26, 0x05	; 5
				r->output=LFSMoutputcalc(r->output,tmp1.outhl,tmp1.outlh,tmp1.mask);
    1ba6:	65 81       	ldd	r22, Z+5	; 0x05
    1ba8:	76 81       	ldd	r23, Z+6	; 0x06
}
*/
/***output***/
uint16_t LFSMoutputcalc(uint16_t feedback, uint16_t hl, uint16_t lh, uint16_t mask)
{
	feedback|=(lh & mask);
    1baa:	21 85       	ldd	r18, Z+9	; 0x09
    1bac:	32 85       	ldd	r19, Z+10	; 0x0a
    1bae:	ab 01       	movw	r20, r22
    1bb0:	42 23       	and	r20, r18
    1bb2:	53 23       	and	r21, r19
    1bb4:	17 96       	adiw	r26, 0x07	; 7
    1bb6:	2d 91       	ld	r18, X+
    1bb8:	3c 91       	ld	r19, X
    1bba:	18 97       	sbiw	r26, 0x08	; 8
    1bbc:	24 2b       	or	r18, r20
    1bbe:	35 2b       	or	r19, r21
		case 4: //Local logic exist in page above versus local logic exist in page bellow
			//Choose closest page above otherwise closest bellow.
			r->input=input; //update
			if(n1>ZERO && n1<NPAGES){
				r->page = tmp1.page;
				r->output=LFSMoutputcalc(r->output,tmp1.outhl,tmp1.outlh,tmp1.mask);
    1bc0:	87 81       	ldd	r24, Z+7	; 0x07
    1bc2:	90 85       	ldd	r25, Z+8	; 0x08
    1bc4:	86 23       	and	r24, r22
    1bc6:	97 23       	and	r25, r23
    1bc8:	80 95       	com	r24
    1bca:	90 95       	com	r25
    1bcc:	82 23       	and	r24, r18
    1bce:	93 23       	and	r25, r19
    1bd0:	18 96       	adiw	r26, 0x08	; 8
    1bd2:	9c 93       	st	X, r25
    1bd4:	8e 93       	st	-X, r24
    1bd6:	17 97       	sbiw	r26, 0x07	; 7
				r->status=41;
    1bd8:	89 e2       	ldi	r24, 0x29	; 41
    1bda:	19 96       	adiw	r26, 0x09	; 9
    1bdc:	8c 93       	st	X, r24
    1bde:	27 c0       	rjmp	.+78     	; 0x1c2e <LFSMread+0x2e8>
			}
			else if(n2>ZERO && n2<NPAGES){
    1be0:	8f ef       	ldi	r24, 0xFF	; 255
    1be2:	83 0d       	add	r24, r3
    1be4:	8e 3f       	cpi	r24, 0xFE	; 254
    1be6:	18 f5       	brcc	.+70     	; 0x1c2e <LFSMread+0x2e8>
				r->page=tmp2.page;
    1be8:	e6 ec       	ldi	r30, 0xC6	; 198
    1bea:	f2 e0       	ldi	r31, 0x02	; 2
    1bec:	80 81       	ld	r24, Z
    1bee:	d8 01       	movw	r26, r16
    1bf0:	15 96       	adiw	r26, 0x05	; 5
    1bf2:	8c 93       	st	X, r24
    1bf4:	15 97       	sbiw	r26, 0x05	; 5
				r->output=LFSMoutputcalc(r->output,tmp2.outhl,tmp2.outlh,tmp2.mask);
    1bf6:	65 81       	ldd	r22, Z+5	; 0x05
    1bf8:	76 81       	ldd	r23, Z+6	; 0x06
}
*/
/***output***/
uint16_t LFSMoutputcalc(uint16_t feedback, uint16_t hl, uint16_t lh, uint16_t mask)
{
	feedback|=(lh & mask);
    1bfa:	21 85       	ldd	r18, Z+9	; 0x09
    1bfc:	32 85       	ldd	r19, Z+10	; 0x0a
    1bfe:	ab 01       	movw	r20, r22
    1c00:	42 23       	and	r20, r18
    1c02:	53 23       	and	r21, r19
    1c04:	17 96       	adiw	r26, 0x07	; 7
    1c06:	2d 91       	ld	r18, X+
    1c08:	3c 91       	ld	r19, X
    1c0a:	18 97       	sbiw	r26, 0x08	; 8
    1c0c:	24 2b       	or	r18, r20
    1c0e:	35 2b       	or	r19, r21
				r->output=LFSMoutputcalc(r->output,tmp1.outhl,tmp1.outlh,tmp1.mask);
				r->status=41;
			}
			else if(n2>ZERO && n2<NPAGES){
				r->page=tmp2.page;
				r->output=LFSMoutputcalc(r->output,tmp2.outhl,tmp2.outlh,tmp2.mask);
    1c10:	87 81       	ldd	r24, Z+7	; 0x07
    1c12:	90 85       	ldd	r25, Z+8	; 0x08
    1c14:	86 23       	and	r24, r22
    1c16:	97 23       	and	r25, r23
    1c18:	80 95       	com	r24
    1c1a:	90 95       	com	r25
    1c1c:	82 23       	and	r24, r18
    1c1e:	93 23       	and	r25, r19
    1c20:	18 96       	adiw	r26, 0x08	; 8
    1c22:	9c 93       	st	X, r25
    1c24:	8e 93       	st	-X, r24
    1c26:	17 97       	sbiw	r26, 0x07	; 7
				r->status=42;
    1c28:	8a e2       	ldi	r24, 0x2A	; 42
    1c2a:	19 96       	adiw	r26, 0x09	; 9
    1c2c:	8c 93       	st	X, r24
			break;
		default:
			break;
	}//End switch
	return r->status;
}
    1c2e:	f8 01       	movw	r30, r16
    1c30:	81 85       	ldd	r24, Z+9	; 0x09
    1c32:	df 91       	pop	r29
    1c34:	cf 91       	pop	r28
    1c36:	1f 91       	pop	r17
    1c38:	0f 91       	pop	r16
    1c3a:	ff 90       	pop	r15
    1c3c:	ef 90       	pop	r14
    1c3e:	df 90       	pop	r13
    1c40:	cf 90       	pop	r12
    1c42:	bf 90       	pop	r11
    1c44:	af 90       	pop	r10
    1c46:	9f 90       	pop	r9
    1c48:	8f 90       	pop	r8
    1c4a:	7f 90       	pop	r7
    1c4c:	6f 90       	pop	r6
    1c4e:	5f 90       	pop	r5
    1c50:	4f 90       	pop	r4
    1c52:	3f 90       	pop	r3
    1c54:	2f 90       	pop	r2
    1c56:	08 95       	ret

00001c58 <LFSMremove>:
	}
	return programmed;
}
/***remove***/
uint8_t LFSMremove(struct lfsm *r, uint8_t input)
{
    1c58:	2f 92       	push	r2
    1c5a:	3f 92       	push	r3
    1c5c:	4f 92       	push	r4
    1c5e:	5f 92       	push	r5
    1c60:	6f 92       	push	r6
    1c62:	7f 92       	push	r7
    1c64:	8f 92       	push	r8
    1c66:	9f 92       	push	r9
    1c68:	af 92       	push	r10
    1c6a:	bf 92       	push	r11
    1c6c:	cf 92       	push	r12
    1c6e:	df 92       	push	r13
    1c70:	ef 92       	push	r14
    1c72:	ff 92       	push	r15
    1c74:	0f 93       	push	r16
    1c76:	1f 93       	push	r17
    1c78:	cf 93       	push	r28
    1c7a:	df 93       	push	r29
    1c7c:	cd b7       	in	r28, 0x3d	; 61
    1c7e:	de b7       	in	r29, 0x3e	; 62
    1c80:	29 97       	sbiw	r28, 0x09	; 9
    1c82:	0f b6       	in	r0, 0x3f	; 63
    1c84:	f8 94       	cli
    1c86:	de bf       	out	0x3e, r29	; 62
    1c88:	0f be       	out	0x3f, r0	; 63
    1c8a:	cd bf       	out	0x3d, r28	; 61
    1c8c:	fc 01       	movw	r30, r24
	uint16_t k,k1,k2,i1;
	k=k1=k2=ZERO;
	uint8_t status=ZERO;
	uint8_t sizeblock=r->sizeblock;
    1c8e:	84 81       	ldd	r24, Z+4	; 0x04
    1c90:	8f 83       	std	Y+7, r24	; 0x07
	struct lfsmdata* pdata=&data;
	struct lfsmdata* ptmp1=&tmp1;
	ptmp1->page=ZERO;
    1c92:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <tmp1>
	int16_t n=ZERO;
	uint8_t n1=NPAGES,n2=NPAGES;
	uint8_t page=r->page;
	uint16_t HL,LH;
	HL=LFSMhl(r->input,input);
    1c96:	e6 80       	ldd	r14, Z+6	; 0x06
    1c98:	96 2f       	mov	r25, r22
    1c9a:	9e 25       	eor	r25, r14
/***hl***/
uint16_t LFSMhl(uint16_t xi, uint16_t xf)
{
	uint16_t i;
	i=xf^xi;
	i&=xi;
    1c9c:	e9 22       	and	r14, r25
    1c9e:	f1 2c       	mov	r15, r1
/***lh***/
uint16_t LFSMlh(uint16_t xi, uint16_t xf)
{
	uint16_t i;
	i=xf^xi;
	i&=xf;
    1ca0:	96 23       	and	r25, r22
    1ca2:	a9 2e       	mov	r10, r25
    1ca4:	b1 2c       	mov	r11, r1
	uint8_t n1=NPAGES,n2=NPAGES;
	uint8_t page=r->page;
	uint16_t HL,LH;
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(HL || LH){ //To not waste time
    1ca6:	e1 14       	cp	r14, r1
    1ca8:	f1 04       	cpc	r15, r1
    1caa:	39 f0       	breq	.+14     	; 0x1cba <LFSMremove+0x62>
		status=1; //New entry
		for(i1=ZERO;i1<r->sizeeeprom;i1++){
    1cac:	82 81       	ldd	r24, Z+2	; 0x02
    1cae:	93 81       	ldd	r25, Z+3	; 0x03
    1cb0:	89 2b       	or	r24, r25
    1cb2:	41 f4       	brne	.+16     	; 0x1cc4 <LFSMremove+0x6c>
    1cb4:	91 e0       	ldi	r25, 0x01	; 1
    1cb6:	99 83       	std	Y+1, r25	; 0x01
    1cb8:	fe c0       	rjmp	.+508    	; 0x1eb6 <LFSMremove+0x25e>
	uint8_t n1=NPAGES,n2=NPAGES;
	uint8_t page=r->page;
	uint16_t HL,LH;
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(HL || LH){ //To not waste time
    1cba:	a1 14       	cp	r10, r1
    1cbc:	b1 04       	cpc	r11, r1
    1cbe:	b1 f7       	brne	.-20     	; 0x1cac <LFSMremove+0x54>
/***remove***/
uint8_t LFSMremove(struct lfsm *r, uint8_t input)
{
	uint16_t k,k1,k2,i1;
	k=k1=k2=ZERO;
	uint8_t status=ZERO;
    1cc0:	19 82       	std	Y+1, r1	; 0x01
    1cc2:	f9 c0       	rjmp	.+498    	; 0x1eb6 <LFSMremove+0x25e>
    1cc4:	8f 01       	movw	r16, r30
	struct lfsmdata* pdata=&data;
	struct lfsmdata* ptmp1=&tmp1;
	ptmp1->page=ZERO;
	int16_t n=ZERO;
	uint8_t n1=NPAGES,n2=NPAGES;
	uint8_t page=r->page;
    1cc6:	55 80       	ldd	r5, Z+5	; 0x05
    1cc8:	44 24       	eor	r4, r4
    1cca:	4a 94       	dec	r4
    1ccc:	af ef       	ldi	r26, 0xFF	; 255
    1cce:	aa 83       	std	Y+2, r26	; 0x02
    1cd0:	b1 e0       	ldi	r27, 0x01	; 1
    1cd2:	b9 83       	std	Y+1, r27	; 0x01
    1cd4:	81 2c       	mov	r8, r1
    1cd6:	91 2c       	mov	r9, r1
    1cd8:	1e 82       	std	Y+6, r1	; 0x06
    1cda:	1d 82       	std	Y+5, r1	; 0x05
    1cdc:	1c 82       	std	Y+4, r1	; 0x04
    1cde:	1b 82       	std	Y+3, r1	; 0x03
    1ce0:	21 2c       	mov	r2, r1
    1ce2:	31 2c       	mov	r3, r1
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(HL || LH){ //To not waste time
		status=1; //New entry
		for(i1=ZERO;i1<r->sizeeeprom;i1++){
			r->eprom->read_block(pdata, (const void*) (i1*sizeblock), sizeblock);
    1ce4:	ff 81       	ldd	r31, Y+7	; 0x07
    1ce6:	ef 2f       	mov	r30, r31
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
						status=2; //Global logic exist
					}
					break;
				default: //Local logic
					if( (pdata->feedback & pdata->mask)==(r->output & pdata->mask) && pdata->inhl==HL && pdata->inlh==LH ){
						n=pdata->page - page;
    1cea:	65 2c       	mov	r6, r5
    1cec:	71 2c       	mov	r7, r1
					break;
				case 1: //Global logic
					if( pdata->inhl==HL && pdata->inlh==LH ){
						k=i1;
						i1=r->sizeeeprom;
						status=2; //Global logic exist
    1cee:	f9 87       	std	Y+9, r31	; 0x09
    1cf0:	e8 87       	std	Y+8, r30	; 0x08
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(HL || LH){ //To not waste time
		status=1; //New entry
		for(i1=ZERO;i1<r->sizeeeprom;i1++){
			r->eprom->read_block(pdata, (const void*) (i1*sizeblock), sizeblock);
    1cf2:	c8 84       	ldd	r12, Y+8	; 0x08
    1cf4:	d9 84       	ldd	r13, Y+9	; 0x09
    1cf6:	c8 9c       	mul	r12, r8
    1cf8:	b0 01       	movw	r22, r0
    1cfa:	c9 9c       	mul	r12, r9
    1cfc:	70 0d       	add	r23, r0
    1cfe:	d8 9c       	mul	r13, r8
    1d00:	70 0d       	add	r23, r0
    1d02:	11 24       	eor	r1, r1
    1d04:	d8 01       	movw	r26, r16
    1d06:	ed 91       	ld	r30, X+
    1d08:	fc 91       	ld	r31, X
    1d0a:	00 8c       	ldd	r0, Z+24	; 0x18
    1d0c:	f1 8d       	ldd	r31, Z+25	; 0x19
    1d0e:	e0 2d       	mov	r30, r0
    1d10:	a6 01       	movw	r20, r12
    1d12:	80 ea       	ldi	r24, 0xA0	; 160
    1d14:	92 e0       	ldi	r25, 0x02	; 2
    1d16:	09 95       	icall
			switch(pdata->page){
    1d18:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <data>
    1d1c:	88 23       	and	r24, r24
    1d1e:	09 f4       	brne	.+2      	; 0x1d22 <LFSMremove+0xca>
    1d20:	61 c0       	rjmp	.+194    	; 0x1de4 <LFSMremove+0x18c>
    1d22:	81 30       	cpi	r24, 0x01	; 1
    1d24:	a9 f4       	brne	.+42     	; 0x1d50 <LFSMremove+0xf8>
				case 0:
					//Do nothing, continue search in status=1.
					break;
				case 1: //Global logic
					if( pdata->inhl==HL && pdata->inlh==LH ){
    1d26:	80 91 a3 02 	lds	r24, 0x02A3	; 0x8002a3 <data+0x3>
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	8e 15       	cp	r24, r14
    1d2e:	9f 05       	cpc	r25, r15
    1d30:	09 f0       	breq	.+2      	; 0x1d34 <LFSMremove+0xdc>
    1d32:	58 c0       	rjmp	.+176    	; 0x1de4 <LFSMremove+0x18c>
    1d34:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <data+0x4>
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	8a 15       	cp	r24, r10
    1d3c:	9b 05       	cpc	r25, r11
    1d3e:	09 f0       	breq	.+2      	; 0x1d42 <LFSMremove+0xea>
    1d40:	51 c0       	rjmp	.+162    	; 0x1de4 <LFSMremove+0x18c>
						k=i1;
						i1=r->sizeeeprom;
    1d42:	14 01       	movw	r2, r8
    1d44:	f8 01       	movw	r30, r16
    1d46:	82 80       	ldd	r8, Z+2	; 0x02
    1d48:	93 80       	ldd	r9, Z+3	; 0x03
						status=2; //Global logic exist
    1d4a:	f2 e0       	ldi	r31, 0x02	; 2
    1d4c:	f9 83       	std	Y+1, r31	; 0x01
    1d4e:	4a c0       	rjmp	.+148    	; 0x1de4 <LFSMremove+0x18c>
					}
					break;
				default: //Local logic
					if( (pdata->feedback & pdata->mask)==(r->output & pdata->mask) && pdata->inhl==HL && pdata->inlh==LH ){
    1d50:	e0 ea       	ldi	r30, 0xA0	; 160
    1d52:	f2 e0       	ldi	r31, 0x02	; 2
    1d54:	41 81       	ldd	r20, Z+1	; 0x01
    1d56:	52 81       	ldd	r21, Z+2	; 0x02
    1d58:	d8 01       	movw	r26, r16
    1d5a:	17 96       	adiw	r26, 0x07	; 7
    1d5c:	2d 91       	ld	r18, X+
    1d5e:	3c 91       	ld	r19, X
    1d60:	18 97       	sbiw	r26, 0x08	; 8
    1d62:	24 27       	eor	r18, r20
    1d64:	35 27       	eor	r19, r21
    1d66:	45 81       	ldd	r20, Z+5	; 0x05
    1d68:	56 81       	ldd	r21, Z+6	; 0x06
    1d6a:	24 23       	and	r18, r20
    1d6c:	35 23       	and	r19, r21
    1d6e:	23 2b       	or	r18, r19
    1d70:	c9 f5       	brne	.+114    	; 0x1de4 <LFSMremove+0x18c>
    1d72:	20 91 a3 02 	lds	r18, 0x02A3	; 0x8002a3 <data+0x3>
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	2e 15       	cp	r18, r14
    1d7a:	3f 05       	cpc	r19, r15
    1d7c:	99 f5       	brne	.+102    	; 0x1de4 <LFSMremove+0x18c>
    1d7e:	20 91 a4 02 	lds	r18, 0x02A4	; 0x8002a4 <data+0x4>
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	2a 15       	cp	r18, r10
    1d86:	3b 05       	cpc	r19, r11
    1d88:	69 f5       	brne	.+90     	; 0x1de4 <LFSMremove+0x18c>
						n=pdata->page - page;
    1d8a:	28 2f       	mov	r18, r24
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	26 19       	sub	r18, r6
    1d90:	37 09       	sbc	r19, r7
						if(!n){
    1d92:	41 f4       	brne	.+16     	; 0x1da4 <LFSMremove+0x14c>
							k=i1;
							i1=r->sizeeeprom;
							status=3; //Local logic exist in present page
							break;
    1d94:	14 01       	movw	r2, r8
				default: //Local logic
					if( (pdata->feedback & pdata->mask)==(r->output & pdata->mask) && pdata->inhl==HL && pdata->inlh==LH ){
						n=pdata->page - page;
						if(!n){
							k=i1;
							i1=r->sizeeeprom;
    1d96:	12 96       	adiw	r26, 0x02	; 2
    1d98:	8d 90       	ld	r8, X+
    1d9a:	9c 90       	ld	r9, X
    1d9c:	13 97       	sbiw	r26, 0x03	; 3
							status=3; //Local logic exist in present page
    1d9e:	b3 e0       	ldi	r27, 0x03	; 3
    1da0:	b9 83       	std	Y+1, r27	; 0x01
							break;
    1da2:	20 c0       	rjmp	.+64     	; 0x1de4 <LFSMremove+0x18c>
						}
						if(n>ZERO){
    1da4:	12 16       	cp	r1, r18
    1da6:	13 06       	cpc	r1, r19
    1da8:	6c f4       	brge	.+26     	; 0x1dc4 <LFSMremove+0x16c>
							if(n < n1){
    1daa:	ea 81       	ldd	r30, Y+2	; 0x02
    1dac:	4e 2f       	mov	r20, r30
    1dae:	50 e0       	ldi	r21, 0x00	; 0
    1db0:	24 17       	cp	r18, r20
    1db2:	35 07       	cpc	r19, r21
    1db4:	3c f4       	brge	.+14     	; 0x1dc4 <LFSMremove+0x16c>
    1db6:	f8 2f       	mov	r31, r24
    1db8:	f5 19       	sub	r31, r5
    1dba:	fa 83       	std	Y+2, r31	; 0x02
    1dbc:	9c 82       	std	Y+4, r9	; 0x04
    1dbe:	8b 82       	std	Y+3, r8	; 0x03
								k1=i1;
								n1=n;
								status=4; //Local logic exist in page above
    1dc0:	94 e0       	ldi	r25, 0x04	; 4
    1dc2:	99 83       	std	Y+1, r25	; 0x01
							}
						}
						if(n<ZERO){
    1dc4:	33 23       	and	r19, r19
    1dc6:	74 f4       	brge	.+28     	; 0x1de4 <LFSMremove+0x18c>
							if(n > -n2){
    1dc8:	44 2d       	mov	r20, r4
    1dca:	50 e0       	ldi	r21, 0x00	; 0
    1dcc:	51 95       	neg	r21
    1dce:	41 95       	neg	r20
    1dd0:	51 09       	sbc	r21, r1
    1dd2:	42 17       	cp	r20, r18
    1dd4:	53 07       	cpc	r21, r19
    1dd6:	34 f4       	brge	.+12     	; 0x1de4 <LFSMremove+0x18c>
								k2=i1;
								n2=-n;
    1dd8:	45 2c       	mov	r4, r5
    1dda:	48 1a       	sub	r4, r24
    1ddc:	9e 82       	std	Y+6, r9	; 0x06
    1dde:	8d 82       	std	Y+5, r8	; 0x05
								status=4; //Local logic exist in page bellow
    1de0:	a4 e0       	ldi	r26, 0x04	; 4
    1de2:	a9 83       	std	Y+1, r26	; 0x01
	uint16_t HL,LH;
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(HL || LH){ //To not waste time
		status=1; //New entry
		for(i1=ZERO;i1<r->sizeeeprom;i1++){
    1de4:	bf ef       	ldi	r27, 0xFF	; 255
    1de6:	8b 1a       	sub	r8, r27
    1de8:	9b 0a       	sbc	r9, r27
    1dea:	f8 01       	movw	r30, r16
    1dec:	82 81       	ldd	r24, Z+2	; 0x02
    1dee:	93 81       	ldd	r25, Z+3	; 0x03
    1df0:	88 16       	cp	r8, r24
    1df2:	99 06       	cpc	r9, r25
    1df4:	08 f4       	brcc	.+2      	; 0x1df8 <LFSMremove+0x1a0>
    1df6:	7d cf       	rjmp	.-262    	; 0x1cf2 <LFSMremove+0x9a>
				break;
			}//End switch
		}//End for
	}//End if
	/***status confirmation***/
	switch (status){
    1df8:	f9 81       	ldd	r31, Y+1	; 0x01
    1dfa:	f3 30       	cpi	r31, 0x03	; 3
    1dfc:	b9 f0       	breq	.+46     	; 0x1e2c <LFSMremove+0x1d4>
    1dfe:	f4 30       	cpi	r31, 0x04	; 4
    1e00:	39 f1       	breq	.+78     	; 0x1e50 <LFSMremove+0x1f8>
    1e02:	f2 30       	cpi	r31, 0x02	; 2
    1e04:	09 f0       	breq	.+2      	; 0x1e08 <LFSMremove+0x1b0>
    1e06:	57 c0       	rjmp	.+174    	; 0x1eb6 <LFSMremove+0x25e>
		case ZERO: //No entry
			break;
		case 1: //New entry
			break;
		case 2: //Global logic exist
			r->eprom->update_block(ptmp1, (void*) (k*sizeblock), sizeblock);
    1e08:	2c 9c       	mul	r2, r12
    1e0a:	b0 01       	movw	r22, r0
    1e0c:	2d 9c       	mul	r2, r13
    1e0e:	70 0d       	add	r23, r0
    1e10:	3c 9c       	mul	r3, r12
    1e12:	70 0d       	add	r23, r0
    1e14:	11 24       	eor	r1, r1
    1e16:	d8 01       	movw	r26, r16
    1e18:	ed 91       	ld	r30, X+
    1e1a:	fc 91       	ld	r31, X
    1e1c:	04 8c       	ldd	r0, Z+28	; 0x1c
    1e1e:	f5 8d       	ldd	r31, Z+29	; 0x1d
    1e20:	e0 2d       	mov	r30, r0
    1e22:	a6 01       	movw	r20, r12
    1e24:	81 ed       	ldi	r24, 0xD1	; 209
    1e26:	92 e0       	ldi	r25, 0x02	; 2
    1e28:	09 95       	icall
			break;
    1e2a:	45 c0       	rjmp	.+138    	; 0x1eb6 <LFSMremove+0x25e>
		case 3: //Local logic exist in present page
			r->eprom->update_block(ptmp1, (void*) (k*sizeblock), sizeblock);
    1e2c:	2c 9c       	mul	r2, r12
    1e2e:	b0 01       	movw	r22, r0
    1e30:	2d 9c       	mul	r2, r13
    1e32:	70 0d       	add	r23, r0
    1e34:	3c 9c       	mul	r3, r12
    1e36:	70 0d       	add	r23, r0
    1e38:	11 24       	eor	r1, r1
    1e3a:	d8 01       	movw	r26, r16
    1e3c:	ed 91       	ld	r30, X+
    1e3e:	fc 91       	ld	r31, X
    1e40:	04 8c       	ldd	r0, Z+28	; 0x1c
    1e42:	f5 8d       	ldd	r31, Z+29	; 0x1d
    1e44:	e0 2d       	mov	r30, r0
    1e46:	a6 01       	movw	r20, r12
    1e48:	81 ed       	ldi	r24, 0xD1	; 209
    1e4a:	92 e0       	ldi	r25, 0x02	; 2
    1e4c:	09 95       	icall
			break;
    1e4e:	33 c0       	rjmp	.+102    	; 0x1eb6 <LFSMremove+0x25e>
		case 4: //Local logic exist in page above versus local logic exist in page bellow
			//choose closest page above otherwise closest bellow.
			if(n1>ZERO && n1<NPAGES){
    1e50:	8a 81       	ldd	r24, Y+2	; 0x02
    1e52:	81 50       	subi	r24, 0x01	; 1
    1e54:	8e 3f       	cpi	r24, 0xFE	; 254
    1e56:	b0 f4       	brcc	.+44     	; 0x1e84 <LFSMremove+0x22c>
				r->eprom->update_block(ptmp1, (void*) (k1*sizeblock), sizeblock);
    1e58:	eb 81       	ldd	r30, Y+3	; 0x03
    1e5a:	fc 81       	ldd	r31, Y+4	; 0x04
    1e5c:	ec 9d       	mul	r30, r12
    1e5e:	b0 01       	movw	r22, r0
    1e60:	ed 9d       	mul	r30, r13
    1e62:	70 0d       	add	r23, r0
    1e64:	fc 9d       	mul	r31, r12
    1e66:	70 0d       	add	r23, r0
    1e68:	11 24       	eor	r1, r1
    1e6a:	d8 01       	movw	r26, r16
    1e6c:	ed 91       	ld	r30, X+
    1e6e:	fc 91       	ld	r31, X
    1e70:	04 8c       	ldd	r0, Z+28	; 0x1c
    1e72:	f5 8d       	ldd	r31, Z+29	; 0x1d
    1e74:	e0 2d       	mov	r30, r0
    1e76:	a6 01       	movw	r20, r12
    1e78:	81 ed       	ldi	r24, 0xD1	; 209
    1e7a:	92 e0       	ldi	r25, 0x02	; 2
    1e7c:	09 95       	icall
				status=41;
    1e7e:	b9 e2       	ldi	r27, 0x29	; 41
    1e80:	b9 83       	std	Y+1, r27	; 0x01
    1e82:	19 c0       	rjmp	.+50     	; 0x1eb6 <LFSMremove+0x25e>
			}
			else if(n2>ZERO && n2<NPAGES){
    1e84:	8f ef       	ldi	r24, 0xFF	; 255
    1e86:	84 0d       	add	r24, r4
    1e88:	8e 3f       	cpi	r24, 0xFE	; 254
    1e8a:	a8 f4       	brcc	.+42     	; 0x1eb6 <LFSMremove+0x25e>
				r->eprom->update_block(ptmp1, (void*) (k2*sizeblock), sizeblock);
    1e8c:	ed 81       	ldd	r30, Y+5	; 0x05
    1e8e:	fe 81       	ldd	r31, Y+6	; 0x06
    1e90:	ec 9d       	mul	r30, r12
    1e92:	b0 01       	movw	r22, r0
    1e94:	ed 9d       	mul	r30, r13
    1e96:	70 0d       	add	r23, r0
    1e98:	fc 9d       	mul	r31, r12
    1e9a:	70 0d       	add	r23, r0
    1e9c:	11 24       	eor	r1, r1
    1e9e:	d8 01       	movw	r26, r16
    1ea0:	ed 91       	ld	r30, X+
    1ea2:	fc 91       	ld	r31, X
    1ea4:	04 8c       	ldd	r0, Z+28	; 0x1c
    1ea6:	f5 8d       	ldd	r31, Z+29	; 0x1d
    1ea8:	e0 2d       	mov	r30, r0
    1eaa:	a6 01       	movw	r20, r12
    1eac:	81 ed       	ldi	r24, 0xD1	; 209
    1eae:	92 e0       	ldi	r25, 0x02	; 2
    1eb0:	09 95       	icall
				status=42;
    1eb2:	ba e2       	ldi	r27, 0x2A	; 42
    1eb4:	b9 83       	std	Y+1, r27	; 0x01
			break;
		default:
			break;
	}//End switch
	return status;
}//End main
    1eb6:	89 81       	ldd	r24, Y+1	; 0x01
    1eb8:	29 96       	adiw	r28, 0x09	; 9
    1eba:	0f b6       	in	r0, 0x3f	; 63
    1ebc:	f8 94       	cli
    1ebe:	de bf       	out	0x3e, r29	; 62
    1ec0:	0f be       	out	0x3f, r0	; 63
    1ec2:	cd bf       	out	0x3d, r28	; 61
    1ec4:	df 91       	pop	r29
    1ec6:	cf 91       	pop	r28
    1ec8:	1f 91       	pop	r17
    1eca:	0f 91       	pop	r16
    1ecc:	ff 90       	pop	r15
    1ece:	ef 90       	pop	r14
    1ed0:	df 90       	pop	r13
    1ed2:	cf 90       	pop	r12
    1ed4:	bf 90       	pop	r11
    1ed6:	af 90       	pop	r10
    1ed8:	9f 90       	pop	r9
    1eda:	8f 90       	pop	r8
    1edc:	7f 90       	pop	r7
    1ede:	6f 90       	pop	r6
    1ee0:	5f 90       	pop	r5
    1ee2:	4f 90       	pop	r4
    1ee4:	3f 90       	pop	r3
    1ee6:	2f 90       	pop	r2
    1ee8:	08 95       	ret

00001eea <LFSMlearn>:
	}//End switch
	return r->status;
}
/***learn***/
uint8_t LFSMlearn(struct lfsm *r, const uint8_t input, const uint16_t next, const uint16_t mask, const uint8_t page)
{
    1eea:	2f 92       	push	r2
    1eec:	3f 92       	push	r3
    1eee:	4f 92       	push	r4
    1ef0:	5f 92       	push	r5
    1ef2:	6f 92       	push	r6
    1ef4:	7f 92       	push	r7
    1ef6:	8f 92       	push	r8
    1ef8:	9f 92       	push	r9
    1efa:	af 92       	push	r10
    1efc:	bf 92       	push	r11
    1efe:	cf 92       	push	r12
    1f00:	df 92       	push	r13
    1f02:	ef 92       	push	r14
    1f04:	ff 92       	push	r15
    1f06:	0f 93       	push	r16
    1f08:	1f 93       	push	r17
    1f0a:	cf 93       	push	r28
    1f0c:	df 93       	push	r29
    1f0e:	00 d0       	rcall	.+0      	; 0x1f10 <LFSMlearn+0x26>
    1f10:	00 d0       	rcall	.+0      	; 0x1f12 <LFSMlearn+0x28>
    1f12:	1f 92       	push	r1
    1f14:	cd b7       	in	r28, 0x3d	; 61
    1f16:	de b7       	in	r29, 0x3e	; 62
    1f18:	49 01       	movw	r8, r18
	struct lfsmdata* pdata=&data;
	struct lfsmdata* ptmp1=&tmp1;
	uint16_t HL,LH;
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(page>ZERO){ //Enable
    1f1a:	00 23       	and	r16, r16
    1f1c:	09 f4       	brne	.+2      	; 0x1f20 <LFSMlearn+0x36>
    1f1e:	e2 c0       	rjmp	.+452    	; 0x20e4 <LFSMlearn+0x1fa>
	uint8_t status=ZERO;
	uint8_t sizeblock=r->sizeblock;
	struct lfsmdata* pdata=&data;
	struct lfsmdata* ptmp1=&tmp1;
	uint16_t HL,LH;
	HL=LFSMhl(r->input,input);
    1f20:	dc 01       	movw	r26, r24
    1f22:	16 96       	adiw	r26, 0x06	; 6
    1f24:	2c 90       	ld	r2, X
    1f26:	36 2f       	mov	r19, r22
    1f28:	32 25       	eor	r19, r2
    1f2a:	23 22       	and	r2, r19
/***hl***/
uint16_t LFSMhl(uint16_t xi, uint16_t xf)
{
	uint16_t i;
	i=xf^xi;
	i&=xi;
    1f2c:	62 2c       	mov	r6, r2
    1f2e:	71 2c       	mov	r7, r1
    1f30:	63 23       	and	r22, r19
    1f32:	69 83       	std	Y+1, r22	; 0x01
/***lh***/
uint16_t LFSMlh(uint16_t xi, uint16_t xf)
{
	uint16_t i;
	i=xf^xi;
	i&=xf;
    1f34:	e6 2f       	mov	r30, r22
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	fb 83       	std	Y+3, r31	; 0x03
    1f3a:	ea 83       	std	Y+2, r30	; 0x02
	struct lfsmdata* ptmp1=&tmp1;
	uint16_t HL,LH;
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(page>ZERO){ //Enable
		if(HL || LH){ //There is a change ?
    1f3c:	61 14       	cp	r6, r1
    1f3e:	71 04       	cpc	r7, r1
    1f40:	49 f0       	breq	.+18     	; 0x1f54 <LFSMlearn+0x6a>
			for(i1=ZERO;i1<r->sizeeeprom;i1++){
    1f42:	dc 01       	movw	r26, r24
    1f44:	12 96       	adiw	r26, 0x02	; 2
    1f46:	2d 91       	ld	r18, X+
    1f48:	3c 91       	ld	r19, X
    1f4a:	13 97       	sbiw	r26, 0x03	; 3
    1f4c:	23 2b       	or	r18, r19
    1f4e:	41 f4       	brne	.+16     	; 0x1f60 <LFSMlearn+0x76>
    1f50:	10 e0       	ldi	r17, 0x00	; 0
    1f52:	cb c0       	rjmp	.+406    	; 0x20ea <LFSMlearn+0x200>
	struct lfsmdata* ptmp1=&tmp1;
	uint16_t HL,LH;
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(page>ZERO){ //Enable
		if(HL || LH){ //There is a change ?
    1f54:	ea 81       	ldd	r30, Y+2	; 0x02
    1f56:	fb 81       	ldd	r31, Y+3	; 0x03
    1f58:	ef 2b       	or	r30, r31
    1f5a:	99 f7       	brne	.-26     	; 0x1f42 <LFSMlearn+0x58>
    1f5c:	10 e0       	ldi	r17, 0x00	; 0
    1f5e:	c5 c0       	rjmp	.+394    	; 0x20ea <LFSMlearn+0x200>
    1f60:	30 2e       	mov	r3, r16
    1f62:	2a 01       	movw	r4, r20
    1f64:	9d 83       	std	Y+5, r25	; 0x05
    1f66:	8c 83       	std	Y+4, r24	; 0x04
    1f68:	dc 01       	movw	r26, r24
    1f6a:	14 96       	adiw	r26, 0x04	; 4
    1f6c:	ec 90       	ld	r14, X
    1f6e:	f1 2c       	mov	r15, r1
/***learn***/
uint8_t LFSMlearn(struct lfsm *r, const uint8_t input, const uint16_t next, const uint16_t mask, const uint8_t page)
{
	uint16_t i1;
	uint8_t status=ZERO;
	uint8_t sizeblock=r->sizeblock;
    1f70:	c1 2c       	mov	r12, r1
    1f72:	d1 2c       	mov	r13, r1
    1f74:	10 e0       	ldi	r17, 0x00	; 0
    1f76:	a1 2c       	mov	r10, r1
    1f78:	b1 2c       	mov	r11, r1
					if( (pdata->page==1 && pdata->inhl==HL && pdata->inlh==LH)
					|| (pdata->page==page && (pdata->feedback & mask)==(r->output & mask) && pdata->inhl==HL && pdata->inlh==LH) ){
						break;
					}
				}
				status=1; //Record
    1f7a:	01 e0       	ldi	r16, 0x01	; 1
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(page>ZERO){ //Enable
		if(HL || LH){ //There is a change ?
			for(i1=ZERO;i1<r->sizeeeprom;i1++){
				r->eprom->read_block(pdata, (const void*) (i1*sizeblock), sizeblock);
    1f7c:	ac 81       	ldd	r26, Y+4	; 0x04
    1f7e:	bd 81       	ldd	r27, Y+5	; 0x05
    1f80:	ed 91       	ld	r30, X+
    1f82:	fc 91       	ld	r31, X
    1f84:	00 8c       	ldd	r0, Z+24	; 0x18
    1f86:	f1 8d       	ldd	r31, Z+25	; 0x19
    1f88:	e0 2d       	mov	r30, r0
    1f8a:	a7 01       	movw	r20, r14
    1f8c:	b6 01       	movw	r22, r12
    1f8e:	80 ea       	ldi	r24, 0xA0	; 160
    1f90:	92 e0       	ldi	r25, 0x02	; 2
    1f92:	09 95       	icall
				if(pdata->page){ //Find if it exists already
    1f94:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <data>
    1f98:	88 23       	and	r24, r24
    1f9a:	01 f1       	breq	.+64     	; 0x1fdc <LFSMlearn+0xf2>
					if( (pdata->page==1 && pdata->inhl==HL && pdata->inlh==LH)
    1f9c:	81 30       	cpi	r24, 0x01	; 1
    1f9e:	81 f0       	breq	.+32     	; 0x1fc0 <LFSMlearn+0xd6>
					|| (pdata->page==page && (pdata->feedback & mask)==(r->output & mask) && pdata->inhl==HL && pdata->inlh==LH) ){
    1fa0:	38 12       	cpse	r3, r24
    1fa2:	1c c0       	rjmp	.+56     	; 0x1fdc <LFSMlearn+0xf2>
    1fa4:	20 91 a1 02 	lds	r18, 0x02A1	; 0x8002a1 <data+0x1>
    1fa8:	30 91 a2 02 	lds	r19, 0x02A2	; 0x8002a2 <data+0x2>
    1fac:	ec 81       	ldd	r30, Y+4	; 0x04
    1fae:	fd 81       	ldd	r31, Y+5	; 0x05
    1fb0:	87 81       	ldd	r24, Z+7	; 0x07
    1fb2:	90 85       	ldd	r25, Z+8	; 0x08
    1fb4:	82 27       	eor	r24, r18
    1fb6:	93 27       	eor	r25, r19
    1fb8:	88 21       	and	r24, r8
    1fba:	99 21       	and	r25, r9
    1fbc:	89 2b       	or	r24, r25
    1fbe:	71 f4       	brne	.+28     	; 0x1fdc <LFSMlearn+0xf2>
    1fc0:	80 91 a3 02 	lds	r24, 0x02A3	; 0x8002a3 <data+0x3>
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	86 15       	cp	r24, r6
    1fc8:	97 05       	cpc	r25, r7
    1fca:	41 f4       	brne	.+16     	; 0x1fdc <LFSMlearn+0xf2>
    1fcc:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <data+0x4>
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	2a 81       	ldd	r18, Y+2	; 0x02
    1fd4:	3b 81       	ldd	r19, Y+3	; 0x03
    1fd6:	82 17       	cp	r24, r18
    1fd8:	93 07       	cpc	r25, r19
    1fda:	81 f0       	breq	.+32     	; 0x1ffc <LFSMlearn+0x112>
	uint16_t HL,LH;
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(page>ZERO){ //Enable
		if(HL || LH){ //There is a change ?
			for(i1=ZERO;i1<r->sizeeeprom;i1++){
    1fdc:	3f ef       	ldi	r19, 0xFF	; 255
    1fde:	a3 1a       	sub	r10, r19
    1fe0:	b3 0a       	sbc	r11, r19
    1fe2:	ce 0c       	add	r12, r14
    1fe4:	df 1c       	adc	r13, r15
					if( (pdata->page==1 && pdata->inhl==HL && pdata->inlh==LH)
					|| (pdata->page==page && (pdata->feedback & mask)==(r->output & mask) && pdata->inhl==HL && pdata->inlh==LH) ){
						break;
					}
				}
				status=1; //Record
    1fe6:	10 2f       	mov	r17, r16
	uint16_t HL,LH;
	HL=LFSMhl(r->input,input);
	LH=LFSMlh(r->input,input);
	if(page>ZERO){ //Enable
		if(HL || LH){ //There is a change ?
			for(i1=ZERO;i1<r->sizeeeprom;i1++){
    1fe8:	ac 81       	ldd	r26, Y+4	; 0x04
    1fea:	bd 81       	ldd	r27, Y+5	; 0x05
    1fec:	12 96       	adiw	r26, 0x02	; 2
    1fee:	8d 91       	ld	r24, X+
    1ff0:	9c 91       	ld	r25, X
    1ff2:	13 97       	sbiw	r26, 0x03	; 3
    1ff4:	a8 16       	cp	r10, r24
    1ff6:	b9 06       	cpc	r11, r25
    1ff8:	08 f2       	brcs	.-126    	; 0x1f7c <LFSMlearn+0x92>
    1ffa:	03 c0       	rjmp	.+6      	; 0x2002 <LFSMlearn+0x118>
				}
				status=1; //Record
			}
		}
	}
	switch (status){
    1ffc:	11 30       	cpi	r17, 0x01	; 1
    1ffe:	09 f0       	breq	.+2      	; 0x2002 <LFSMlearn+0x118>
    2000:	74 c0       	rjmp	.+232    	; 0x20ea <LFSMlearn+0x200>
		case ZERO: //Not enabled
			break;
		case 1: //Record
			ptmp1->page=page;
    2002:	e1 ed       	ldi	r30, 0xD1	; 209
    2004:	f2 e0       	ldi	r31, 0x02	; 2
    2006:	30 82       	st	Z, r3
			ptmp1->feedback=r->output;
    2008:	ac 81       	ldd	r26, Y+4	; 0x04
    200a:	bd 81       	ldd	r27, Y+5	; 0x05
    200c:	17 96       	adiw	r26, 0x07	; 7
    200e:	8d 91       	ld	r24, X+
    2010:	9c 91       	ld	r25, X
    2012:	18 97       	sbiw	r26, 0x08	; 8
    2014:	92 83       	std	Z+2, r25	; 0x02
    2016:	81 83       	std	Z+1, r24	; 0x01
			ptmp1->inhl=HL;
    2018:	23 82       	std	Z+3, r2	; 0x03
			ptmp1->inlh=LH;
    201a:	b9 81       	ldd	r27, Y+1	; 0x01
    201c:	b4 83       	std	Z+4, r27	; 0x04
			ptmp1->mask=mask;
    201e:	96 82       	std	Z+6, r9	; 0x06
    2020:	85 82       	std	Z+5, r8	; 0x05
			if(page>1){ //Local logic
    2022:	e1 e0       	ldi	r30, 0x01	; 1
    2024:	e3 15       	cp	r30, r3
    2026:	d0 f4       	brcc	.+52     	; 0x205c <LFSMlearn+0x172>
				ptmp1->outhl=LFSMhl(r->output,next) & mask;
    2028:	e1 ed       	ldi	r30, 0xD1	; 209
    202a:	f2 e0       	ldi	r31, 0x02	; 2
    202c:	9c 01       	movw	r18, r24
    202e:	24 25       	eor	r18, r4
    2030:	35 25       	eor	r19, r5
    2032:	28 21       	and	r18, r8
    2034:	39 21       	and	r19, r9
    2036:	82 23       	and	r24, r18
    2038:	93 23       	and	r25, r19
    203a:	90 87       	std	Z+8, r25	; 0x08
    203c:	87 83       	std	Z+7, r24	; 0x07
				ptmp1->outlh=LFSMlh(r->output,next) & mask;
    203e:	ac 81       	ldd	r26, Y+4	; 0x04
    2040:	bd 81       	ldd	r27, Y+5	; 0x05
    2042:	17 96       	adiw	r26, 0x07	; 7
    2044:	2d 91       	ld	r18, X+
    2046:	3c 91       	ld	r19, X
    2048:	18 97       	sbiw	r26, 0x08	; 8
    204a:	24 25       	eor	r18, r4
    204c:	35 25       	eor	r19, r5
    204e:	82 22       	and	r8, r18
    2050:	93 22       	and	r9, r19
    2052:	48 20       	and	r4, r8
    2054:	59 20       	and	r5, r9
    2056:	52 86       	std	Z+10, r5	; 0x0a
    2058:	41 86       	std	Z+9, r4	; 0x09
    205a:	0d c0       	rjmp	.+26     	; 0x2076 <LFSMlearn+0x18c>
			}else{ //Global logic
				ptmp1->outhl=LFSMhl(BYTEH,next) & mask;
    205c:	e1 ed       	ldi	r30, 0xD1	; 209
    205e:	f2 e0       	ldi	r31, 0x02	; 2
    2060:	c2 01       	movw	r24, r4
    2062:	80 95       	com	r24
    2064:	90 95       	com	r25
    2066:	88 21       	and	r24, r8
    2068:	99 21       	and	r25, r9
    206a:	90 87       	std	Z+8, r25	; 0x08
    206c:	87 83       	std	Z+7, r24	; 0x07
				ptmp1->outlh=LFSMlh(BYTEL,next) & mask;
    206e:	84 20       	and	r8, r4
    2070:	95 20       	and	r9, r5
    2072:	92 86       	std	Z+10, r9	; 0x0a
    2074:	81 86       	std	Z+9, r8	; 0x09
			}
			for(i1=ZERO;i1<r->sizeeeprom;i1++){
    2076:	ec 81       	ldd	r30, Y+4	; 0x04
    2078:	fd 81       	ldd	r31, Y+5	; 0x05
    207a:	82 81       	ldd	r24, Z+2	; 0x02
    207c:	93 81       	ldd	r25, Z+3	; 0x03
    207e:	89 2b       	or	r24, r25
    2080:	99 f1       	breq	.+102    	; 0x20e8 <LFSMlearn+0x1fe>
    2082:	00 e0       	ldi	r16, 0x00	; 0
    2084:	10 e0       	ldi	r17, 0x00	; 0
    2086:	c1 2c       	mov	r12, r1
    2088:	d1 2c       	mov	r13, r1
				r->eprom->read_block(pdata, (const void*) (i1*sizeblock), sizeblock);
    208a:	ac 81       	ldd	r26, Y+4	; 0x04
    208c:	bd 81       	ldd	r27, Y+5	; 0x05
    208e:	ed 91       	ld	r30, X+
    2090:	fc 91       	ld	r31, X
    2092:	00 8c       	ldd	r0, Z+24	; 0x18
    2094:	f1 8d       	ldd	r31, Z+25	; 0x19
    2096:	e0 2d       	mov	r30, r0
    2098:	a7 01       	movw	r20, r14
    209a:	b8 01       	movw	r22, r16
    209c:	80 ea       	ldi	r24, 0xA0	; 160
    209e:	92 e0       	ldi	r25, 0x02	; 2
    20a0:	09 95       	icall
				if(pdata->page==EMPTY){
    20a2:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <data>
    20a6:	81 11       	cpse	r24, r1
    20a8:	0f c0       	rjmp	.+30     	; 0x20c8 <LFSMlearn+0x1de>
					r->eprom->update_block(ptmp1, (void*) (i1*sizeblock), sizeblock);
    20aa:	ac 81       	ldd	r26, Y+4	; 0x04
    20ac:	bd 81       	ldd	r27, Y+5	; 0x05
    20ae:	ed 91       	ld	r30, X+
    20b0:	fc 91       	ld	r31, X
    20b2:	04 8c       	ldd	r0, Z+28	; 0x1c
    20b4:	f5 8d       	ldd	r31, Z+29	; 0x1d
    20b6:	e0 2d       	mov	r30, r0
    20b8:	a7 01       	movw	r20, r14
    20ba:	60 2f       	mov	r22, r16
    20bc:	71 2f       	mov	r23, r17
    20be:	81 ed       	ldi	r24, 0xD1	; 209
    20c0:	92 e0       	ldi	r25, 0x02	; 2
    20c2:	09 95       	icall
					status=2; //Created
    20c4:	12 e0       	ldi	r17, 0x02	; 2
					break;
    20c6:	11 c0       	rjmp	.+34     	; 0x20ea <LFSMlearn+0x200>
				ptmp1->outlh=LFSMlh(r->output,next) & mask;
			}else{ //Global logic
				ptmp1->outhl=LFSMhl(BYTEH,next) & mask;
				ptmp1->outlh=LFSMlh(BYTEL,next) & mask;
			}
			for(i1=ZERO;i1<r->sizeeeprom;i1++){
    20c8:	bf ef       	ldi	r27, 0xFF	; 255
    20ca:	cb 1a       	sub	r12, r27
    20cc:	db 0a       	sbc	r13, r27
    20ce:	0e 0d       	add	r16, r14
    20d0:	1f 1d       	adc	r17, r15
    20d2:	ec 81       	ldd	r30, Y+4	; 0x04
    20d4:	fd 81       	ldd	r31, Y+5	; 0x05
    20d6:	82 81       	ldd	r24, Z+2	; 0x02
    20d8:	93 81       	ldd	r25, Z+3	; 0x03
    20da:	c8 16       	cp	r12, r24
    20dc:	d9 06       	cpc	r13, r25
    20de:	a8 f2       	brcs	.-86     	; 0x208a <LFSMlearn+0x1a0>
				if(pdata->page==EMPTY){
					r->eprom->update_block(ptmp1, (void*) (i1*sizeblock), sizeblock);
					status=2; //Created
					break;
				}
				status=3; //Memory full
    20e0:	13 e0       	ldi	r17, 0x03	; 3
    20e2:	03 c0       	rjmp	.+6      	; 0x20ea <LFSMlearn+0x200>
    20e4:	10 e0       	ldi	r17, 0x00	; 0
    20e6:	01 c0       	rjmp	.+2      	; 0x20ea <LFSMlearn+0x200>
				ptmp1->outlh=LFSMlh(r->output,next) & mask;
			}else{ //Global logic
				ptmp1->outhl=LFSMhl(BYTEH,next) & mask;
				ptmp1->outlh=LFSMlh(BYTEL,next) & mask;
			}
			for(i1=ZERO;i1<r->sizeeeprom;i1++){
    20e8:	11 e0       	ldi	r17, 0x01	; 1
			break;
		default:
			break;
	}//End switch
	return status;
}
    20ea:	81 2f       	mov	r24, r17
    20ec:	0f 90       	pop	r0
    20ee:	0f 90       	pop	r0
    20f0:	0f 90       	pop	r0
    20f2:	0f 90       	pop	r0
    20f4:	0f 90       	pop	r0
    20f6:	df 91       	pop	r29
    20f8:	cf 91       	pop	r28
    20fa:	1f 91       	pop	r17
    20fc:	0f 91       	pop	r16
    20fe:	ff 90       	pop	r15
    2100:	ef 90       	pop	r14
    2102:	df 90       	pop	r13
    2104:	cf 90       	pop	r12
    2106:	bf 90       	pop	r11
    2108:	af 90       	pop	r10
    210a:	9f 90       	pop	r9
    210c:	8f 90       	pop	r8
    210e:	7f 90       	pop	r7
    2110:	6f 90       	pop	r6
    2112:	5f 90       	pop	r5
    2114:	4f 90       	pop	r4
    2116:	3f 90       	pop	r3
    2118:	2f 90       	pop	r2
    211a:	08 95       	ret

0000211c <LFSMenable>:
uint16_t LFSMoutputcalc(uint16_t feedback, uint16_t hl, uint16_t lh, uint16_t mask);
/*
** Object Initialize
*/
LFSM LFSMenable(EEPROM* eeprom, const uint16_t sizeeeprom)
{
    211c:	fc 01       	movw	r30, r24
	r.getstatus=LFSMgetstatus;
	r.setoutput=LFSMsetoutput;
	r.getpage=LFSMgetpage;
	r.setpage=LFSMsetpage;
	/******/
	return r;
    211e:	71 83       	std	Z+1, r23	; 0x01
    2120:	60 83       	st	Z, r22
    2122:	53 83       	std	Z+3, r21	; 0x03
    2124:	42 83       	std	Z+2, r20	; 0x02
    2126:	8b e0       	ldi	r24, 0x0B	; 11
    2128:	84 83       	std	Z+4, r24	; 0x04
    212a:	15 82       	std	Z+5, r1	; 0x05
    212c:	10 86       	std	Z+8, r1	; 0x08
    212e:	17 82       	std	Z+7, r1	; 0x07
    2130:	83 ea       	ldi	r24, 0xA3	; 163
    2132:	9c e0       	ldi	r25, 0x0C	; 12
    2134:	93 87       	std	Z+11, r25	; 0x0b
    2136:	82 87       	std	Z+10, r24	; 0x0a
    2138:	85 e7       	ldi	r24, 0x75	; 117
    213a:	9f e0       	ldi	r25, 0x0F	; 15
    213c:	95 87       	std	Z+13, r25	; 0x0d
    213e:	84 87       	std	Z+12, r24	; 0x0c
    2140:	82 ef       	ldi	r24, 0xF2	; 242
    2142:	9b e0       	ldi	r25, 0x0B	; 11
    2144:	97 87       	std	Z+15, r25	; 0x0f
    2146:	86 87       	std	Z+14, r24	; 0x0e
    2148:	8c e2       	ldi	r24, 0x2C	; 44
    214a:	9e e0       	ldi	r25, 0x0E	; 14
    214c:	91 8b       	std	Z+17, r25	; 0x11
    214e:	80 8b       	std	Z+16, r24	; 0x10
    2150:	88 e3       	ldi	r24, 0x38	; 56
    2152:	9c e0       	ldi	r25, 0x0C	; 12
    2154:	93 8b       	std	Z+19, r25	; 0x13
    2156:	82 8b       	std	Z+18, r24	; 0x12
    2158:	81 e9       	ldi	r24, 0x91	; 145
    215a:	9c e0       	ldi	r25, 0x0C	; 12
    215c:	95 8b       	std	Z+21, r25	; 0x15
    215e:	84 8b       	std	Z+20, r24	; 0x14
    2160:	85 e9       	ldi	r24, 0x95	; 149
    2162:	9c e0       	ldi	r25, 0x0C	; 12
    2164:	97 8b       	std	Z+23, r25	; 0x17
    2166:	86 8b       	std	Z+22, r24	; 0x16
    2168:	88 e9       	ldi	r24, 0x98	; 152
    216a:	9c e0       	ldi	r25, 0x0C	; 12
    216c:	91 8f       	std	Z+25, r25	; 0x19
    216e:	80 8f       	std	Z+24, r24	; 0x18
    2170:	8d e9       	ldi	r24, 0x9D	; 157
    2172:	9c e0       	ldi	r25, 0x0C	; 12
    2174:	93 8f       	std	Z+27, r25	; 0x1b
    2176:	82 8f       	std	Z+26, r24	; 0x1a
    2178:	80 ea       	ldi	r24, 0xA0	; 160
    217a:	9c e0       	ldi	r25, 0x0C	; 12
    217c:	95 8f       	std	Z+29, r25	; 0x1d
    217e:	84 8f       	std	Z+28, r24	; 0x1c
}
    2180:	cf 01       	movw	r24, r30
    2182:	08 95       	ret

00002184 <PORTINIT>:
		
	}//End while
}//End main
/***Procedure and Function***/
void PORTINIT(void){
	DDRC=0XFF;
    2184:	8f ef       	ldi	r24, 0xFF	; 255
    2186:	84 bb       	out	0x14, r24	; 20
	PORTC=0XFF;
    2188:	85 bb       	out	0x15, r24	; 21
	DDRB=0X00;
    218a:	17 ba       	out	0x17, r1	; 23
	PORTB=0XFF;
    218c:	88 bb       	out	0x18, r24	; 24
    218e:	08 95       	ret

00002190 <main>:
 ** Function Definition
 */
void PORTINIT(void);
/***MAIN***/
int main(void)
{
    2190:	cf 93       	push	r28
    2192:	df 93       	push	r29
    2194:	cd b7       	in	r28, 0x3d	; 61
    2196:	de b7       	in	r29, 0x3e	; 62
    2198:	c7 5d       	subi	r28, 0xD7	; 215
    219a:	d1 09       	sbc	r29, r1
    219c:	0f b6       	in	r0, 0x3f	; 63
    219e:	f8 94       	cli
    21a0:	de bf       	out	0x3e, r29	; 62
    21a2:	0f be       	out	0x3f, r0	; 63
    21a4:	cd bf       	out	0x3d, r28	; 61
	PORTINIT();
    21a6:	ee df       	rcall	.-36     	; 0x2184 <PORTINIT>
	struct keypadata keypadinput;
	uint16_t output=0;
	uint16_t mask=0;
	uint8_t page=0;
	uint16_t n;
	KEYPAD keypad = KEYPADenable(&DDRE,&PINE,&PORTE);
    21a8:	43 e2       	ldi	r20, 0x23	; 35
    21aa:	50 e0       	ldi	r21, 0x00	; 0
    21ac:	61 e2       	ldi	r22, 0x21	; 33
    21ae:	70 e0       	ldi	r23, 0x00	; 0
    21b0:	82 e2       	ldi	r24, 0x22	; 34
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	33 d8       	rcall	.-3994   	; 0x121c <KEYPADenable>
    21b6:	2f 8b       	std	Y+23, r18	; 0x17
    21b8:	38 8f       	std	Y+24, r19	; 0x18
    21ba:	49 8f       	std	Y+25, r20	; 0x19
    21bc:	5a 8f       	std	Y+26, r21	; 0x1a
    21be:	6b 8f       	std	Y+27, r22	; 0x1b
    21c0:	7c 8f       	std	Y+28, r23	; 0x1c
    21c2:	8b 8c       	ldd	r8, Y+27	; 0x1b
    21c4:	9c 8c       	ldd	r9, Y+28	; 0x1c
	LCD0 lcd = LCD0enable(&DDRA,&PINA,&PORTA);
    21c6:	2b e3       	ldi	r18, 0x3B	; 59
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	49 e3       	ldi	r20, 0x39	; 57
    21cc:	50 e0       	ldi	r21, 0x00	; 0
    21ce:	6a e3       	ldi	r22, 0x3A	; 58
    21d0:	70 e0       	ldi	r23, 0x00	; 0
    21d2:	ce 01       	movw	r24, r28
    21d4:	4d 96       	adiw	r24, 0x1d	; 29
    21d6:	9e da       	rcall	.-2756   	; 0x1714 <LCD0enable>
    21d8:	2f a0       	ldd	r2, Y+39	; 0x27
    21da:	38 a4       	ldd	r3, Y+40	; 0x28
    21dc:	e9 a4       	ldd	r14, Y+41	; 0x29
    21de:	fa a4       	ldd	r15, Y+42	; 0x2a
    21e0:	6b a4       	ldd	r6, Y+43	; 0x2b
    21e2:	7c a4       	ldd	r7, Y+44	; 0x2c
    21e4:	8d a5       	ldd	r24, Y+45	; 0x2d
    21e6:	9e a5       	ldd	r25, Y+46	; 0x2e
    21e8:	ca 52       	subi	r28, 0x2A	; 42
    21ea:	df 4f       	sbci	r29, 0xFF	; 255
    21ec:	99 83       	std	Y+1, r25	; 0x01
    21ee:	88 83       	st	Y, r24
    21f0:	c6 5d       	subi	r28, 0xD6	; 214
    21f2:	d0 40       	sbci	r29, 0x00	; 0
    21f4:	cf a4       	ldd	r12, Y+47	; 0x2f
    21f6:	d8 a8       	ldd	r13, Y+48	; 0x30
	EEPROM eeprom = EEPROMenable();
    21f8:	ce 01       	movw	r24, r28
    21fa:	c3 96       	adiw	r24, 0x33	; 51
    21fc:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <EEPROMenable>
	LFSM lfsm = LFSMenable(&eeprom,363);
    2200:	4b e6       	ldi	r20, 0x6B	; 107
    2202:	51 e0       	ldi	r21, 0x01	; 1
    2204:	be 01       	movw	r22, r28
    2206:	6d 5c       	subi	r22, 0xCD	; 205
    2208:	7f 4f       	sbci	r23, 0xFF	; 255
    220a:	ce 01       	movw	r24, r28
    220c:	8f 5a       	subi	r24, 0xAF	; 175
    220e:	9f 4f       	sbci	r25, 0xFF	; 255
    2210:	85 df       	rcall	.-246    	; 0x211c <LFSMenable>
	FUNC func = FUNCenable();
    2212:	ce 01       	movw	r24, r28
    2214:	81 59       	subi	r24, 0x91	; 145
    2216:	9f 4f       	sbci	r25, 0xFF	; 255
    2218:	0e 94 09 07 	call	0xe12	; 0xe12 <FUNCenable>
    221c:	cf 56       	subi	r28, 0x6F	; 111
    221e:	df 4f       	sbci	r29, 0xFF	; 255
    2220:	a8 80       	ld	r10, Y
    2222:	b9 80       	ldd	r11, Y+1	; 0x01
    2224:	c1 59       	subi	r28, 0x91	; 145
    2226:	d0 40       	sbci	r29, 0x00	; 0
    2228:	c5 56       	subi	r28, 0x65	; 101
    222a:	df 4f       	sbci	r29, 0xFF	; 255
    222c:	e8 81       	ld	r30, Y
    222e:	f9 81       	ldd	r31, Y+1	; 0x01
    2230:	cb 59       	subi	r28, 0x9B	; 155
    2232:	d0 40       	sbci	r29, 0x00	; 0
    2234:	c1 53       	subi	r28, 0x31	; 49
    2236:	df 4f       	sbci	r29, 0xFF	; 255
    2238:	f9 83       	std	Y+1, r31	; 0x01
    223a:	e8 83       	st	Y, r30
    223c:	cf 5c       	subi	r28, 0xCF	; 207
    223e:	d0 40       	sbci	r29, 0x00	; 0
	//ROTENC potenc = ROTENCenable(0,1);
	/**************************************/
	lfsm.setoutput(&lfsm,0);
    2240:	ab 96       	adiw	r28, 0x2b	; 43
    2242:	ee ad       	ldd	r30, Y+62	; 0x3e
    2244:	ff ad       	ldd	r31, Y+63	; 0x3f
    2246:	ab 97       	sbiw	r28, 0x2b	; 43
    2248:	60 e0       	ldi	r22, 0x00	; 0
    224a:	70 e0       	ldi	r23, 0x00	; 0
    224c:	ce 01       	movw	r24, r28
    224e:	8f 5a       	subi	r24, 0xAF	; 175
    2250:	9f 4f       	sbci	r25, 0xFF	; 255
    2252:	09 95       	icall
	PORTINIT();
	uint8_t option=0; //Menu Jumper
	uint8_t input_tmp=0;
	struct keypadata keypadinput;
	uint16_t output=0;
	uint16_t mask=0;
    2254:	cc 52       	subi	r28, 0x2C	; 44
    2256:	df 4f       	sbci	r29, 0xFF	; 255
    2258:	19 82       	std	Y+1, r1	; 0x01
    225a:	18 82       	st	Y, r1
    225c:	c4 5d       	subi	r28, 0xD4	; 212
    225e:	d0 40       	sbci	r29, 0x00	; 0
{
	PORTINIT();
	uint8_t option=0; //Menu Jumper
	uint8_t input_tmp=0;
	struct keypadata keypadinput;
	uint16_t output=0;
    2260:	ce 52       	subi	r28, 0x2E	; 46
    2262:	df 4f       	sbci	r29, 0xFF	; 255
    2264:	19 82       	std	Y+1, r1	; 0x01
    2266:	18 82       	st	Y, r1
    2268:	c2 5d       	subi	r28, 0xD2	; 210
    226a:	d0 40       	sbci	r29, 0x00	; 0
/***MAIN***/
int main(void)
{
	PORTINIT();
	uint8_t option=0; //Menu Jumper
	uint8_t input_tmp=0;
    226c:	cf 52       	subi	r28, 0x2F	; 47
    226e:	df 4f       	sbci	r29, 0xFF	; 255
    2270:	18 82       	st	Y, r1
    2272:	c1 5d       	subi	r28, 0xD1	; 209
    2274:	d0 40       	sbci	r29, 0x00	; 0
void PORTINIT(void);
/***MAIN***/
int main(void)
{
	PORTINIT();
	uint8_t option=0; //Menu Jumper
    2276:	51 2c       	mov	r5, r1
					keypad.flush();
					option=0;
				}//End if
				if(keypadinput.character == 'C'){ // Repeat Remove Data Entry
					keypad.flush();
					option=8;
    2278:	68 94       	set
    227a:	44 24       	eor	r4, r4
    227c:	43 f8       	bld	r4, 3
	lfsm.setoutput(&lfsm,0);
	/*** Replace with your application code ***/
	while (True)
	{
		/******/
		keypadinput=keypad.get();
    227e:	e9 8d       	ldd	r30, Y+25	; 0x19
    2280:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2282:	ce 01       	movw	r24, r28
    2284:	87 54       	subi	r24, 0x47	; 71
    2286:	9f 4f       	sbci	r25, 0xFF	; 255
    2288:	09 95       	icall
    228a:	86 e1       	ldi	r24, 0x16	; 22
    228c:	fe 01       	movw	r30, r28
    228e:	e7 54       	subi	r30, 0x47	; 71
    2290:	ff 4f       	sbci	r31, 0xFF	; 255
    2292:	de 01       	movw	r26, r28
    2294:	11 96       	adiw	r26, 0x01	; 1
    2296:	01 90       	ld	r0, Z+
    2298:	0d 92       	st	X+, r0
    229a:	8a 95       	dec	r24
    229c:	e1 f7       	brne	.-8      	; 0x2296 <main+0x106>
		//n=potenc.rte(&potenc,PINB).num;
		n=PINB;
    229e:	16 b3       	in	r17, 0x16	; 22
		/******/
		lcd.gotoxy(0,14);
    22a0:	6e e0       	ldi	r22, 0x0E	; 14
    22a2:	70 e0       	ldi	r23, 0x00	; 0
    22a4:	80 e0       	ldi	r24, 0x00	; 0
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	f6 01       	movw	r30, r12
    22aa:	09 95       	icall
		string=func.ui16toa(n);
    22ac:	81 2f       	mov	r24, r17
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	f5 01       	movw	r30, r10
    22b2:	09 95       	icall
    22b4:	90 93 7e 02 	sts	0x027E, r25	; 0x80027e <string+0x1>
    22b8:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <string>
		lcd.string_size(string,5);
    22bc:	65 e0       	ldi	r22, 0x05	; 5
    22be:	f7 01       	movw	r30, r14
    22c0:	09 95       	icall
		/******/
		switch(option){
    22c2:	85 2d       	mov	r24, r5
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	8a 30       	cpi	r24, 0x0A	; 10
    22c8:	91 05       	cpc	r25, r1
    22ca:	08 f0       	brcs	.+2      	; 0x22ce <main+0x13e>
    22cc:	f8 c2       	rjmp	.+1520   	; 0x28be <main+0x72e>
    22ce:	fc 01       	movw	r30, r24
    22d0:	ea 5b       	subi	r30, 0xBA	; 186
    22d2:	ff 4f       	sbci	r31, 0xFF	; 255
    22d4:	8e c3       	rjmp	.+1820   	; 0x29f2 <__tablejump2__>
			case 0: // Main Menu
				lcd.gotoxy(0,0);
    22d6:	60 e0       	ldi	r22, 0x00	; 0
    22d8:	70 e0       	ldi	r23, 0x00	; 0
    22da:	80 e0       	ldi	r24, 0x00	; 0
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	f6 01       	movw	r30, r12
    22e0:	09 95       	icall
				lcd.string_size("Running ",8);
    22e2:	64 2d       	mov	r22, r4
    22e4:	80 e1       	ldi	r24, 0x10	; 16
    22e6:	91 e0       	ldi	r25, 0x01	; 1
    22e8:	f7 01       	movw	r30, r14
    22ea:	09 95       	icall
				string=func.ui16toa(lfsm.getpage(&lfsm));
    22ec:	ad 96       	adiw	r28, 0x2d	; 45
    22ee:	ee ad       	ldd	r30, Y+62	; 0x3e
    22f0:	ff ad       	ldd	r31, Y+63	; 0x3f
    22f2:	ad 97       	sbiw	r28, 0x2d	; 45
    22f4:	ce 01       	movw	r24, r28
    22f6:	8f 5a       	subi	r24, 0xAF	; 175
    22f8:	9f 4f       	sbci	r25, 0xFF	; 255
    22fa:	09 95       	icall
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	f5 01       	movw	r30, r10
    2300:	09 95       	icall
    2302:	90 93 7e 02 	sts	0x027E, r25	; 0x80027e <string+0x1>
    2306:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <string>
				lcd.string_size(string,3);
    230a:	63 e0       	ldi	r22, 0x03	; 3
    230c:	f7 01       	movw	r30, r14
    230e:	09 95       	icall
				if(keypadinput.character == 'A'){ // Clear screen and empty buffer
    2310:	89 81       	ldd	r24, Y+1	; 0x01
    2312:	81 34       	cpi	r24, 0x41	; 65
    2314:	51 f4       	brne	.+20     	; 0x232a <main+0x19a>
					lcd.clear();
    2316:	ca 52       	subi	r28, 0x2A	; 42
    2318:	df 4f       	sbci	r29, 0xFF	; 255
    231a:	e8 81       	ld	r30, Y
    231c:	f9 81       	ldd	r31, Y+1	; 0x01
    231e:	c6 5d       	subi	r28, 0xD6	; 214
    2320:	d0 40       	sbci	r29, 0x00	; 0
    2322:	09 95       	icall
					keypad.flush();
    2324:	f4 01       	movw	r30, r8
    2326:	09 95       	icall
					continue;
    2328:	aa cf       	rjmp	.-172    	; 0x227e <main+0xee>
				}
				if(keypadinput.character == 'B'){ // Learn
    232a:	82 34       	cpi	r24, 0x42	; 66
    232c:	59 f4       	brne	.+22     	; 0x2344 <main+0x1b4>
					lcd.clear();
    232e:	ca 52       	subi	r28, 0x2A	; 42
    2330:	df 4f       	sbci	r29, 0xFF	; 255
    2332:	e8 81       	ld	r30, Y
    2334:	f9 81       	ldd	r31, Y+1	; 0x01
    2336:	c6 5d       	subi	r28, 0xD6	; 214
    2338:	d0 40       	sbci	r29, 0x00	; 0
    233a:	09 95       	icall
					keypad.flush();
    233c:	f4 01       	movw	r30, r8
    233e:	09 95       	icall
					option=1;
    2340:	55 24       	eor	r5, r5
    2342:	53 94       	inc	r5
				}
				if(keypadinput.character == 'C'){ // Delete or remove
    2344:	89 81       	ldd	r24, Y+1	; 0x01
    2346:	83 34       	cpi	r24, 0x43	; 67
    2348:	69 f4       	brne	.+26     	; 0x2364 <main+0x1d4>
					lcd.clear();
    234a:	ca 52       	subi	r28, 0x2A	; 42
    234c:	df 4f       	sbci	r29, 0xFF	; 255
    234e:	e8 81       	ld	r30, Y
    2350:	f9 81       	ldd	r31, Y+1	; 0x01
    2352:	c6 5d       	subi	r28, 0xD6	; 214
    2354:	d0 40       	sbci	r29, 0x00	; 0
    2356:	09 95       	icall
					keypad.flush();
    2358:	f4 01       	movw	r30, r8
    235a:	09 95       	icall
					option=6;
    235c:	0f 2e       	mov	r0, r31
    235e:	f6 e0       	ldi	r31, 0x06	; 6
    2360:	5f 2e       	mov	r5, r31
    2362:	f0 2d       	mov	r31, r0
				}
				lfsm.read(&lfsm,n); // Getting answer
    2364:	6d 96       	adiw	r28, 0x1d	; 29
    2366:	ee ad       	ldd	r30, Y+62	; 0x3e
    2368:	ff ad       	ldd	r31, Y+63	; 0x3f
    236a:	6d 97       	sbiw	r28, 0x1d	; 29
    236c:	61 2f       	mov	r22, r17
    236e:	ce 01       	movw	r24, r28
    2370:	8f 5a       	subi	r24, 0xAF	; 175
    2372:	9f 4f       	sbci	r25, 0xFF	; 255
    2374:	09 95       	icall
				break;
    2376:	a3 c2       	rjmp	.+1350   	; 0x28be <main+0x72e>
			case 1: // New Entry Menu
				// Menu
				lcd.gotoxy(0,0);
    2378:	60 e0       	ldi	r22, 0x00	; 0
    237a:	70 e0       	ldi	r23, 0x00	; 0
    237c:	80 e0       	ldi	r24, 0x00	; 0
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	f6 01       	movw	r30, r12
    2382:	09 95       	icall
				lcd.string_size("Enter: ",12);
    2384:	6c e0       	ldi	r22, 0x0C	; 12
    2386:	89 e1       	ldi	r24, 0x19	; 25
    2388:	91 e0       	ldi	r25, 0x01	; 1
    238a:	f7 01       	movw	r30, r14
    238c:	09 95       	icall
				lcd.gotoxy(1,0);
    238e:	60 e0       	ldi	r22, 0x00	; 0
    2390:	70 e0       	ldi	r23, 0x00	; 0
    2392:	81 e0       	ldi	r24, 0x01	; 1
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	f6 01       	movw	r30, r12
    2398:	09 95       	icall
				lcd.string_size("In   Out  Mask Page",20);
    239a:	64 e1       	ldi	r22, 0x14	; 20
    239c:	81 e2       	ldi	r24, 0x21	; 33
    239e:	91 e0       	ldi	r25, 0x01	; 1
    23a0:	f7 01       	movw	r30, r14
    23a2:	09 95       	icall
				option=2;
    23a4:	68 94       	set
    23a6:	55 24       	eor	r5, r5
    23a8:	51 f8       	bld	r5, 1
				break;
    23aa:	89 c2       	rjmp	.+1298   	; 0x28be <main+0x72e>
			case 2: // First entry [input]
				lcd.gotoxy(0,7);
    23ac:	67 e0       	ldi	r22, 0x07	; 7
    23ae:	70 e0       	ldi	r23, 0x00	; 0
    23b0:	80 e0       	ldi	r24, 0x00	; 0
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	f6 01       	movw	r30, r12
    23b6:	09 95       	icall
				lcd.string_size(keypadinput.string,4);
    23b8:	64 e0       	ldi	r22, 0x04	; 4
    23ba:	ce 01       	movw	r24, r28
    23bc:	02 96       	adiw	r24, 0x02	; 2
    23be:	f7 01       	movw	r30, r14
    23c0:	09 95       	icall
				if(keypadinput.character == 'D'){
    23c2:	89 81       	ldd	r24, Y+1	; 0x01
    23c4:	84 34       	cpi	r24, 0x44	; 68
    23c6:	19 f5       	brne	.+70     	; 0x240e <main+0x27e>
					input_tmp=func.strToInt(keypadinput.string);
    23c8:	ce 01       	movw	r24, r28
    23ca:	02 96       	adiw	r24, 0x02	; 2
    23cc:	c1 53       	subi	r28, 0x31	; 49
    23ce:	df 4f       	sbci	r29, 0xFF	; 255
    23d0:	e8 81       	ld	r30, Y
    23d2:	f9 81       	ldd	r31, Y+1	; 0x01
    23d4:	cf 5c       	subi	r28, 0xCF	; 207
    23d6:	d0 40       	sbci	r29, 0x00	; 0
    23d8:	09 95       	icall
    23da:	8c 01       	movw	r16, r24
    23dc:	cf 52       	subi	r28, 0x2F	; 47
    23de:	df 4f       	sbci	r29, 0xFF	; 255
    23e0:	88 83       	st	Y, r24
    23e2:	c1 5d       	subi	r28, 0xD1	; 209
    23e4:	d0 40       	sbci	r29, 0x00	; 0
					lcd.gotoxy(2,0);
    23e6:	60 e0       	ldi	r22, 0x00	; 0
    23e8:	70 e0       	ldi	r23, 0x00	; 0
    23ea:	82 e0       	ldi	r24, 0x02	; 2
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	f6 01       	movw	r30, r12
    23f0:	09 95       	icall
					string=func.ui16toa(input_tmp);
    23f2:	c8 01       	movw	r24, r16
    23f4:	99 27       	eor	r25, r25
    23f6:	f5 01       	movw	r30, r10
    23f8:	09 95       	icall
    23fa:	90 93 7e 02 	sts	0x027E, r25	; 0x80027e <string+0x1>
    23fe:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <string>
					lcd.string(string);
    2402:	f1 01       	movw	r30, r2
    2404:	09 95       	icall
					keypad.flush();
    2406:	f4 01       	movw	r30, r8
    2408:	09 95       	icall
					option=3;
    240a:	93 e0       	ldi	r25, 0x03	; 3
    240c:	01 c0       	rjmp	.+2      	; 0x2410 <main+0x280>
    240e:	95 2d       	mov	r25, r5
				}
				if(keypadinput.character == 'C'){
    2410:	89 81       	ldd	r24, Y+1	; 0x01
    2412:	83 34       	cpi	r24, 0x43	; 67
    2414:	09 f0       	breq	.+2      	; 0x2418 <main+0x288>
    2416:	4c c2       	rjmp	.+1176   	; 0x28b0 <main+0x720>
					keypad.flush();
    2418:	f4 01       	movw	r30, r8
    241a:	09 95       	icall
    241c:	50 c2       	rjmp	.+1184   	; 0x28be <main+0x72e>
					option=2;
				}
				break;
			case 3: // Second Entry [output]
				lcd.gotoxy(0,7);
    241e:	67 e0       	ldi	r22, 0x07	; 7
    2420:	70 e0       	ldi	r23, 0x00	; 0
    2422:	80 e0       	ldi	r24, 0x00	; 0
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	f6 01       	movw	r30, r12
    2428:	09 95       	icall
				lcd.string_size(keypadinput.string,4);
    242a:	64 e0       	ldi	r22, 0x04	; 4
    242c:	ce 01       	movw	r24, r28
    242e:	02 96       	adiw	r24, 0x02	; 2
    2430:	f7 01       	movw	r30, r14
    2432:	09 95       	icall
				if(keypadinput.character == 'D'){
    2434:	89 81       	ldd	r24, Y+1	; 0x01
    2436:	84 34       	cpi	r24, 0x44	; 68
    2438:	39 f5       	brne	.+78     	; 0x2488 <main+0x2f8>
					output=func.strToInt(keypadinput.string);
    243a:	ce 01       	movw	r24, r28
    243c:	02 96       	adiw	r24, 0x02	; 2
    243e:	c1 53       	subi	r28, 0x31	; 49
    2440:	df 4f       	sbci	r29, 0xFF	; 255
    2442:	e8 81       	ld	r30, Y
    2444:	f9 81       	ldd	r31, Y+1	; 0x01
    2446:	cf 5c       	subi	r28, 0xCF	; 207
    2448:	d0 40       	sbci	r29, 0x00	; 0
    244a:	09 95       	icall
    244c:	ce 52       	subi	r28, 0x2E	; 46
    244e:	df 4f       	sbci	r29, 0xFF	; 255
    2450:	99 83       	std	Y+1, r25	; 0x01
    2452:	88 83       	st	Y, r24
    2454:	c2 5d       	subi	r28, 0xD2	; 210
    2456:	d0 40       	sbci	r29, 0x00	; 0
					lcd.gotoxy(2,5);
    2458:	65 e0       	ldi	r22, 0x05	; 5
    245a:	70 e0       	ldi	r23, 0x00	; 0
    245c:	82 e0       	ldi	r24, 0x02	; 2
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	f6 01       	movw	r30, r12
    2462:	09 95       	icall
					string=func.ui16toa(output);
    2464:	ce 52       	subi	r28, 0x2E	; 46
    2466:	df 4f       	sbci	r29, 0xFF	; 255
    2468:	88 81       	ld	r24, Y
    246a:	99 81       	ldd	r25, Y+1	; 0x01
    246c:	c2 5d       	subi	r28, 0xD2	; 210
    246e:	d0 40       	sbci	r29, 0x00	; 0
    2470:	f5 01       	movw	r30, r10
    2472:	09 95       	icall
    2474:	90 93 7e 02 	sts	0x027E, r25	; 0x80027e <string+0x1>
    2478:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <string>
					lcd.string(string);
    247c:	f1 01       	movw	r30, r2
    247e:	09 95       	icall
					keypad.flush();
    2480:	f4 01       	movw	r30, r8
    2482:	09 95       	icall
					option=4;
    2484:	94 e0       	ldi	r25, 0x04	; 4
    2486:	01 c0       	rjmp	.+2      	; 0x248a <main+0x2fa>
    2488:	95 2d       	mov	r25, r5
				}
				if(keypadinput.character == 'C'){
    248a:	89 81       	ldd	r24, Y+1	; 0x01
    248c:	83 34       	cpi	r24, 0x43	; 67
    248e:	09 f0       	breq	.+2      	; 0x2492 <main+0x302>
    2490:	11 c2       	rjmp	.+1058   	; 0x28b4 <main+0x724>
					keypad.flush();
    2492:	f4 01       	movw	r30, r8
    2494:	09 95       	icall
    2496:	13 c2       	rjmp	.+1062   	; 0x28be <main+0x72e>
					option=3;
				}
				break;
			case 4: // Third Entry [mask]
				lcd.gotoxy(0,7);
    2498:	67 e0       	ldi	r22, 0x07	; 7
    249a:	70 e0       	ldi	r23, 0x00	; 0
    249c:	80 e0       	ldi	r24, 0x00	; 0
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	f6 01       	movw	r30, r12
    24a2:	09 95       	icall
				lcd.string_size(keypadinput.string,4);
    24a4:	64 e0       	ldi	r22, 0x04	; 4
    24a6:	ce 01       	movw	r24, r28
    24a8:	02 96       	adiw	r24, 0x02	; 2
    24aa:	f7 01       	movw	r30, r14
    24ac:	09 95       	icall
				if(keypadinput.character == 'D'){
    24ae:	89 81       	ldd	r24, Y+1	; 0x01
    24b0:	84 34       	cpi	r24, 0x44	; 68
    24b2:	39 f5       	brne	.+78     	; 0x2502 <main+0x372>
					mask=func.strToInt(keypadinput.string);
    24b4:	ce 01       	movw	r24, r28
    24b6:	02 96       	adiw	r24, 0x02	; 2
    24b8:	c1 53       	subi	r28, 0x31	; 49
    24ba:	df 4f       	sbci	r29, 0xFF	; 255
    24bc:	e8 81       	ld	r30, Y
    24be:	f9 81       	ldd	r31, Y+1	; 0x01
    24c0:	cf 5c       	subi	r28, 0xCF	; 207
    24c2:	d0 40       	sbci	r29, 0x00	; 0
    24c4:	09 95       	icall
    24c6:	cc 52       	subi	r28, 0x2C	; 44
    24c8:	df 4f       	sbci	r29, 0xFF	; 255
    24ca:	99 83       	std	Y+1, r25	; 0x01
    24cc:	88 83       	st	Y, r24
    24ce:	c4 5d       	subi	r28, 0xD4	; 212
    24d0:	d0 40       	sbci	r29, 0x00	; 0
					lcd.gotoxy(2,10);
    24d2:	6a e0       	ldi	r22, 0x0A	; 10
    24d4:	70 e0       	ldi	r23, 0x00	; 0
    24d6:	82 e0       	ldi	r24, 0x02	; 2
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	f6 01       	movw	r30, r12
    24dc:	09 95       	icall
					string=func.ui16toa(mask);
    24de:	cc 52       	subi	r28, 0x2C	; 44
    24e0:	df 4f       	sbci	r29, 0xFF	; 255
    24e2:	88 81       	ld	r24, Y
    24e4:	99 81       	ldd	r25, Y+1	; 0x01
    24e6:	c4 5d       	subi	r28, 0xD4	; 212
    24e8:	d0 40       	sbci	r29, 0x00	; 0
    24ea:	f5 01       	movw	r30, r10
    24ec:	09 95       	icall
    24ee:	90 93 7e 02 	sts	0x027E, r25	; 0x80027e <string+0x1>
    24f2:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <string>
					lcd.string(string);
    24f6:	f1 01       	movw	r30, r2
    24f8:	09 95       	icall
					keypad.flush();
    24fa:	f4 01       	movw	r30, r8
    24fc:	09 95       	icall
					option=5;
    24fe:	95 e0       	ldi	r25, 0x05	; 5
    2500:	01 c0       	rjmp	.+2      	; 0x2504 <main+0x374>
    2502:	95 2d       	mov	r25, r5
				}
				if(keypadinput.character == 'C'){
    2504:	89 81       	ldd	r24, Y+1	; 0x01
    2506:	83 34       	cpi	r24, 0x43	; 67
    2508:	09 f0       	breq	.+2      	; 0x250c <main+0x37c>
    250a:	d6 c1       	rjmp	.+940    	; 0x28b8 <main+0x728>
					keypad.flush();
    250c:	f4 01       	movw	r30, r8
    250e:	09 95       	icall
    2510:	d6 c1       	rjmp	.+940    	; 0x28be <main+0x72e>
					option=4;
				}
				break;
			case 5: // Fourth entry [page] and upload with reply
				lcd.gotoxy(0,7);
    2512:	67 e0       	ldi	r22, 0x07	; 7
    2514:	70 e0       	ldi	r23, 0x00	; 0
    2516:	80 e0       	ldi	r24, 0x00	; 0
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	f6 01       	movw	r30, r12
    251c:	09 95       	icall
				lcd.string_size(keypadinput.string,4);
    251e:	64 e0       	ldi	r22, 0x04	; 4
    2520:	ce 01       	movw	r24, r28
    2522:	02 96       	adiw	r24, 0x02	; 2
    2524:	f7 01       	movw	r30, r14
    2526:	09 95       	icall
				if(keypadinput.character == 'D'){ // D is the enter key on the keyboard
    2528:	89 81       	ldd	r24, Y+1	; 0x01
    252a:	84 34       	cpi	r24, 0x44	; 68
    252c:	09 f0       	breq	.+2      	; 0x2530 <main+0x3a0>
    252e:	7f c0       	rjmp	.+254    	; 0x262e <main+0x49e>
					page=func.strToInt(keypadinput.string);
    2530:	ce 01       	movw	r24, r28
    2532:	02 96       	adiw	r24, 0x02	; 2
    2534:	c1 53       	subi	r28, 0x31	; 49
    2536:	df 4f       	sbci	r29, 0xFF	; 255
    2538:	e8 81       	ld	r30, Y
    253a:	f9 81       	ldd	r31, Y+1	; 0x01
    253c:	cf 5c       	subi	r28, 0xCF	; 207
    253e:	d0 40       	sbci	r29, 0x00	; 0
    2540:	09 95       	icall
    2542:	8c 01       	movw	r16, r24
					lcd.gotoxy(2,15);
    2544:	6f e0       	ldi	r22, 0x0F	; 15
    2546:	70 e0       	ldi	r23, 0x00	; 0
    2548:	82 e0       	ldi	r24, 0x02	; 2
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	f6 01       	movw	r30, r12
    254e:	09 95       	icall
					string=func.ui16toa(page);
    2550:	c8 01       	movw	r24, r16
    2552:	99 27       	eor	r25, r25
    2554:	f5 01       	movw	r30, r10
    2556:	09 95       	icall
    2558:	90 93 7e 02 	sts	0x027E, r25	; 0x80027e <string+0x1>
    255c:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <string>
					lcd.string(string);
    2560:	f1 01       	movw	r30, r2
    2562:	09 95       	icall
					switch(lfsm.learn(&lfsm,input_tmp,output,mask,page)){
    2564:	6f 96       	adiw	r28, 0x1f	; 31
    2566:	ee ad       	ldd	r30, Y+62	; 0x3e
    2568:	ff ad       	ldd	r31, Y+63	; 0x3f
    256a:	6f 97       	sbiw	r28, 0x1f	; 31
    256c:	cc 52       	subi	r28, 0x2C	; 44
    256e:	df 4f       	sbci	r29, 0xFF	; 255
    2570:	28 81       	ld	r18, Y
    2572:	39 81       	ldd	r19, Y+1	; 0x01
    2574:	c4 5d       	subi	r28, 0xD4	; 212
    2576:	d0 40       	sbci	r29, 0x00	; 0
    2578:	ce 52       	subi	r28, 0x2E	; 46
    257a:	df 4f       	sbci	r29, 0xFF	; 255
    257c:	48 81       	ld	r20, Y
    257e:	59 81       	ldd	r21, Y+1	; 0x01
    2580:	c2 5d       	subi	r28, 0xD2	; 210
    2582:	d0 40       	sbci	r29, 0x00	; 0
    2584:	cf 52       	subi	r28, 0x2F	; 47
    2586:	df 4f       	sbci	r29, 0xFF	; 255
    2588:	68 81       	ld	r22, Y
    258a:	c1 5d       	subi	r28, 0xD1	; 209
    258c:	d0 40       	sbci	r29, 0x00	; 0
    258e:	ce 01       	movw	r24, r28
    2590:	8f 5a       	subi	r24, 0xAF	; 175
    2592:	9f 4f       	sbci	r25, 0xFF	; 255
    2594:	09 95       	icall
    2596:	82 30       	cpi	r24, 0x02	; 2
    2598:	19 f1       	breq	.+70     	; 0x25e0 <main+0x450>
    259a:	28 f4       	brcc	.+10     	; 0x25a6 <main+0x416>
    259c:	88 23       	and	r24, r24
    259e:	41 f0       	breq	.+16     	; 0x25b0 <main+0x420>
    25a0:	81 30       	cpi	r24, 0x01	; 1
    25a2:	91 f0       	breq	.+36     	; 0x25c8 <main+0x438>
    25a4:	40 c0       	rjmp	.+128    	; 0x2626 <main+0x496>
    25a6:	83 30       	cpi	r24, 0x03	; 3
    25a8:	39 f1       	breq	.+78     	; 0x25f8 <main+0x468>
    25aa:	84 30       	cpi	r24, 0x04	; 4
    25ac:	89 f1       	breq	.+98     	; 0x2610 <main+0x480>
    25ae:	3b c0       	rjmp	.+118    	; 0x2626 <main+0x496>
						case 0: // Not used
							lcd.gotoxy(3,12);
    25b0:	6c e0       	ldi	r22, 0x0C	; 12
    25b2:	70 e0       	ldi	r23, 0x00	; 0
    25b4:	83 e0       	ldi	r24, 0x03	; 3
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	f6 01       	movw	r30, r12
    25ba:	09 95       	icall
							lcd.string_size("disabled",7);
    25bc:	67 e0       	ldi	r22, 0x07	; 7
    25be:	85 e3       	ldi	r24, 0x35	; 53
    25c0:	91 e0       	ldi	r25, 0x01	; 1
    25c2:	f7 01       	movw	r30, r14
    25c4:	09 95       	icall
							break;
    25c6:	2f c0       	rjmp	.+94     	; 0x2626 <main+0x496>
						case 1: // already programmed
							lcd.gotoxy(3,12);
    25c8:	6c e0       	ldi	r22, 0x0C	; 12
    25ca:	70 e0       	ldi	r23, 0x00	; 0
    25cc:	83 e0       	ldi	r24, 0x03	; 3
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	f6 01       	movw	r30, r12
    25d2:	09 95       	icall
							lcd.string_size("exists",7);
    25d4:	67 e0       	ldi	r22, 0x07	; 7
    25d6:	8e e3       	ldi	r24, 0x3E	; 62
    25d8:	91 e0       	ldi	r25, 0x01	; 1
    25da:	f7 01       	movw	r30, r14
    25dc:	09 95       	icall
							break;
    25de:	23 c0       	rjmp	.+70     	; 0x2626 <main+0x496>
						case 2: // new entry edded
							lcd.gotoxy(3,12);
    25e0:	6c e0       	ldi	r22, 0x0C	; 12
    25e2:	70 e0       	ldi	r23, 0x00	; 0
    25e4:	83 e0       	ldi	r24, 0x03	; 3
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	f6 01       	movw	r30, r12
    25ea:	09 95       	icall
							lcd.string_size("upload",7);
    25ec:	67 e0       	ldi	r22, 0x07	; 7
    25ee:	85 e4       	ldi	r24, 0x45	; 69
    25f0:	91 e0       	ldi	r25, 0x01	; 1
    25f2:	f7 01       	movw	r30, r14
    25f4:	09 95       	icall
							break;
    25f6:	17 c0       	rjmp	.+46     	; 0x2626 <main+0x496>
						case 3: // new entry added
							lcd.gotoxy(3,12);
    25f8:	6c e0       	ldi	r22, 0x0C	; 12
    25fa:	70 e0       	ldi	r23, 0x00	; 0
    25fc:	83 e0       	ldi	r24, 0x03	; 3
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	f6 01       	movw	r30, r12
    2602:	09 95       	icall
							lcd.string_size("upload",7);
    2604:	67 e0       	ldi	r22, 0x07	; 7
    2606:	85 e4       	ldi	r24, 0x45	; 69
    2608:	91 e0       	ldi	r25, 0x01	; 1
    260a:	f7 01       	movw	r30, r14
    260c:	09 95       	icall
							break;
    260e:	0b c0       	rjmp	.+22     	; 0x2626 <main+0x496>
						case 4: // eeprom is full reject entry
							lcd.gotoxy(3,12);
    2610:	6c e0       	ldi	r22, 0x0C	; 12
    2612:	70 e0       	ldi	r23, 0x00	; 0
    2614:	83 e0       	ldi	r24, 0x03	; 3
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	f6 01       	movw	r30, r12
    261a:	09 95       	icall
							lcd.string_size("full",7);
    261c:	67 e0       	ldi	r22, 0x07	; 7
    261e:	8c e4       	ldi	r24, 0x4C	; 76
    2620:	91 e0       	ldi	r25, 0x01	; 1
    2622:	f7 01       	movw	r30, r14
    2624:	09 95       	icall
						default:
							break;
					}//End switch
				/******/
				//lfsm.read(&lfsm,input_tmp);
				keypad.flush();
    2626:	f4 01       	movw	r30, r8
    2628:	09 95       	icall
				option=0;
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	01 c0       	rjmp	.+2      	; 0x2630 <main+0x4a0>
    262e:	95 2d       	mov	r25, r5
				}//End if
				if(keypadinput.character == 'C'){ // re-enter value [page] 
    2630:	89 81       	ldd	r24, Y+1	; 0x01
    2632:	83 34       	cpi	r24, 0x43	; 67
    2634:	09 f0       	breq	.+2      	; 0x2638 <main+0x4a8>
    2636:	42 c1       	rjmp	.+644    	; 0x28bc <main+0x72c>
					keypad.flush();
    2638:	f4 01       	movw	r30, r8
    263a:	09 95       	icall
    263c:	40 c1       	rjmp	.+640    	; 0x28be <main+0x72e>
					option=5;
				}
				break;
			case 6: // Delete or Remove or No action Menu
				lcd.gotoxy(1,0);
    263e:	60 e0       	ldi	r22, 0x00	; 0
    2640:	70 e0       	ldi	r23, 0x00	; 0
    2642:	81 e0       	ldi	r24, 0x01	; 1
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	f6 01       	movw	r30, r12
    2648:	09 95       	icall
				lcd.string_size("Delete - 1",10);
    264a:	6a e0       	ldi	r22, 0x0A	; 10
    264c:	81 e5       	ldi	r24, 0x51	; 81
    264e:	91 e0       	ldi	r25, 0x01	; 1
    2650:	f7 01       	movw	r30, r14
    2652:	09 95       	icall
				lcd.gotoxy(2,0);
    2654:	60 e0       	ldi	r22, 0x00	; 0
    2656:	70 e0       	ldi	r23, 0x00	; 0
    2658:	82 e0       	ldi	r24, 0x02	; 2
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	f6 01       	movw	r30, r12
    265e:	09 95       	icall
				lcd.string_size("Remove - 2 No - 3",17);
    2660:	61 e1       	ldi	r22, 0x11	; 17
    2662:	8c e5       	ldi	r24, 0x5C	; 92
    2664:	91 e0       	ldi	r25, 0x01	; 1
    2666:	f7 01       	movw	r30, r14
    2668:	09 95       	icall
				option=7;
    266a:	0f 2e       	mov	r0, r31
    266c:	f7 e0       	ldi	r31, 0x07	; 7
    266e:	5f 2e       	mov	r5, r31
    2670:	f0 2d       	mov	r31, r0
				break;
    2672:	25 c1       	rjmp	.+586    	; 0x28be <main+0x72e>
			case 7: // Delete or Remove or No action choice
				if(keypadinput.character == '1'){ // Delete
    2674:	89 81       	ldd	r24, Y+1	; 0x01
    2676:	81 33       	cpi	r24, 0x31	; 49
    2678:	91 f5       	brne	.+100    	; 0x26de <main+0x54e>
					lcd.gotoxy(1,0);
    267a:	60 e0       	ldi	r22, 0x00	; 0
    267c:	70 e0       	ldi	r23, 0x00	; 0
    267e:	81 e0       	ldi	r24, 0x01	; 1
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	f6 01       	movw	r30, r12
    2684:	09 95       	icall
					lcd.hspace(10);
    2686:	8a e0       	ldi	r24, 0x0A	; 10
    2688:	f3 01       	movw	r30, r6
    268a:	09 95       	icall
					lcd.gotoxy(2,0);
    268c:	60 e0       	ldi	r22, 0x00	; 0
    268e:	70 e0       	ldi	r23, 0x00	; 0
    2690:	82 e0       	ldi	r24, 0x02	; 2
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	f6 01       	movw	r30, r12
    2696:	09 95       	icall
					lcd.hspace(17);
    2698:	81 e1       	ldi	r24, 0x11	; 17
    269a:	f3 01       	movw	r30, r6
    269c:	09 95       	icall
					lfsm.deleteall(&lfsm);
    269e:	a5 96       	adiw	r28, 0x25	; 37
    26a0:	ee ad       	ldd	r30, Y+62	; 0x3e
    26a2:	ff ad       	ldd	r31, Y+63	; 0x3f
    26a4:	a5 97       	sbiw	r28, 0x25	; 37
    26a6:	ce 01       	movw	r24, r28
    26a8:	8f 5a       	subi	r24, 0xAF	; 175
    26aa:	9f 4f       	sbci	r25, 0xFF	; 255
    26ac:	09 95       	icall
					lfsm.setpage(&lfsm,0);
    26ae:	af 96       	adiw	r28, 0x2f	; 47
    26b0:	ee ad       	ldd	r30, Y+62	; 0x3e
    26b2:	ff ad       	ldd	r31, Y+63	; 0x3f
    26b4:	af 97       	sbiw	r28, 0x2f	; 47
    26b6:	60 e0       	ldi	r22, 0x00	; 0
    26b8:	ce 01       	movw	r24, r28
    26ba:	8f 5a       	subi	r24, 0xAF	; 175
    26bc:	9f 4f       	sbci	r25, 0xFF	; 255
    26be:	09 95       	icall
					//lfsm.setoutput(&lfsm,0X00);
					keypad.flush();
    26c0:	f4 01       	movw	r30, r8
    26c2:	09 95       	icall
					lcd.gotoxy(3,12);
    26c4:	6c e0       	ldi	r22, 0x0C	; 12
    26c6:	70 e0       	ldi	r23, 0x00	; 0
    26c8:	83 e0       	ldi	r24, 0x03	; 3
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	f6 01       	movw	r30, r12
    26ce:	09 95       	icall
					lcd.string_size("deleted",7);
    26d0:	67 e0       	ldi	r22, 0x07	; 7
    26d2:	8e e6       	ldi	r24, 0x6E	; 110
    26d4:	91 e0       	ldi	r25, 0x01	; 1
    26d6:	f7 01       	movw	r30, r14
    26d8:	09 95       	icall
					option=0;
    26da:	51 2c       	mov	r5, r1
    26dc:	f0 c0       	rjmp	.+480    	; 0x28be <main+0x72e>
				}else if(keypadinput.character == '2'){ // Remove
    26de:	82 33       	cpi	r24, 0x32	; 50
    26e0:	b1 f4       	brne	.+44     	; 0x270e <main+0x57e>
					lcd.gotoxy(1,0);
    26e2:	60 e0       	ldi	r22, 0x00	; 0
    26e4:	70 e0       	ldi	r23, 0x00	; 0
    26e6:	81 e0       	ldi	r24, 0x01	; 1
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	f6 01       	movw	r30, r12
    26ec:	09 95       	icall
					lcd.hspace(10);
    26ee:	8a e0       	ldi	r24, 0x0A	; 10
    26f0:	f3 01       	movw	r30, r6
    26f2:	09 95       	icall
					lcd.gotoxy(2,0);
    26f4:	60 e0       	ldi	r22, 0x00	; 0
    26f6:	70 e0       	ldi	r23, 0x00	; 0
    26f8:	82 e0       	ldi	r24, 0x02	; 2
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	f6 01       	movw	r30, r12
    26fe:	09 95       	icall
					lcd.hspace(17);
    2700:	81 e1       	ldi	r24, 0x11	; 17
    2702:	f3 01       	movw	r30, r6
    2704:	09 95       	icall
					keypad.flush();
    2706:	f4 01       	movw	r30, r8
    2708:	09 95       	icall
					option=8;
    270a:	54 2c       	mov	r5, r4
    270c:	d8 c0       	rjmp	.+432    	; 0x28be <main+0x72e>
				}else if(keypadinput.character == '3'){ // No action
    270e:	83 33       	cpi	r24, 0x33	; 51
    2710:	09 f0       	breq	.+2      	; 0x2714 <main+0x584>
    2712:	d5 c0       	rjmp	.+426    	; 0x28be <main+0x72e>
					lcd.gotoxy(1,0);
    2714:	60 e0       	ldi	r22, 0x00	; 0
    2716:	70 e0       	ldi	r23, 0x00	; 0
    2718:	81 e0       	ldi	r24, 0x01	; 1
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	f6 01       	movw	r30, r12
    271e:	09 95       	icall
					lcd.hspace(10);
    2720:	8a e0       	ldi	r24, 0x0A	; 10
    2722:	f3 01       	movw	r30, r6
    2724:	09 95       	icall
					lcd.gotoxy(2,0);
    2726:	60 e0       	ldi	r22, 0x00	; 0
    2728:	70 e0       	ldi	r23, 0x00	; 0
    272a:	82 e0       	ldi	r24, 0x02	; 2
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	f6 01       	movw	r30, r12
    2730:	09 95       	icall
					lcd.hspace(17);
    2732:	81 e1       	ldi	r24, 0x11	; 17
    2734:	f3 01       	movw	r30, r6
    2736:	09 95       	icall
					keypad.flush();
    2738:	f4 01       	movw	r30, r8
    273a:	09 95       	icall
					option=0;
    273c:	51 2c       	mov	r5, r1
    273e:	bf c0       	rjmp	.+382    	; 0x28be <main+0x72e>
				}
				break;
			case 8: // Remove Entry Data
				lcd.gotoxy(0,0);
    2740:	60 e0       	ldi	r22, 0x00	; 0
    2742:	70 e0       	ldi	r23, 0x00	; 0
    2744:	80 e0       	ldi	r24, 0x00	; 0
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	f6 01       	movw	r30, r12
    274a:	09 95       	icall
				lcd.string_size("Enter: ",12);
    274c:	6c e0       	ldi	r22, 0x0C	; 12
    274e:	89 e1       	ldi	r24, 0x19	; 25
    2750:	91 e0       	ldi	r25, 0x01	; 1
    2752:	f7 01       	movw	r30, r14
    2754:	09 95       	icall
				lcd.gotoxy(1,0);
    2756:	60 e0       	ldi	r22, 0x00	; 0
    2758:	70 e0       	ldi	r23, 0x00	; 0
    275a:	81 e0       	ldi	r24, 0x01	; 1
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	f6 01       	movw	r30, r12
    2760:	09 95       	icall
				lcd.string_size("Input",20);
    2762:	64 e1       	ldi	r22, 0x14	; 20
    2764:	86 e7       	ldi	r24, 0x76	; 118
    2766:	91 e0       	ldi	r25, 0x01	; 1
    2768:	f7 01       	movw	r30, r14
    276a:	09 95       	icall
				option=9;
    276c:	0f 2e       	mov	r0, r31
    276e:	f9 e0       	ldi	r31, 0x09	; 9
    2770:	5f 2e       	mov	r5, r31
    2772:	f0 2d       	mov	r31, r0
				break;
    2774:	a4 c0       	rjmp	.+328    	; 0x28be <main+0x72e>
			case 9: // Remove Entry from EEprom
				lcd.gotoxy(0,7);
    2776:	67 e0       	ldi	r22, 0x07	; 7
    2778:	70 e0       	ldi	r23, 0x00	; 0
    277a:	80 e0       	ldi	r24, 0x00	; 0
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	f6 01       	movw	r30, r12
    2780:	09 95       	icall
				lcd.string_size(keypadinput.string,4);
    2782:	64 e0       	ldi	r22, 0x04	; 4
    2784:	ce 01       	movw	r24, r28
    2786:	02 96       	adiw	r24, 0x02	; 2
    2788:	f7 01       	movw	r30, r14
    278a:	09 95       	icall
				if(keypadinput.character == 'D'){ // D is the enter key on the keyboard
    278c:	89 81       	ldd	r24, Y+1	; 0x01
    278e:	84 34       	cpi	r24, 0x44	; 68
    2790:	09 f0       	breq	.+2      	; 0x2794 <main+0x604>
    2792:	87 c0       	rjmp	.+270    	; 0x28a2 <main+0x712>
					input_tmp=func.strToInt(keypadinput.string);
    2794:	ce 01       	movw	r24, r28
    2796:	02 96       	adiw	r24, 0x02	; 2
    2798:	c1 53       	subi	r28, 0x31	; 49
    279a:	df 4f       	sbci	r29, 0xFF	; 255
    279c:	e8 81       	ld	r30, Y
    279e:	f9 81       	ldd	r31, Y+1	; 0x01
    27a0:	cf 5c       	subi	r28, 0xCF	; 207
    27a2:	d0 40       	sbci	r29, 0x00	; 0
    27a4:	09 95       	icall
    27a6:	8c 01       	movw	r16, r24
    27a8:	cf 52       	subi	r28, 0x2F	; 47
    27aa:	df 4f       	sbci	r29, 0xFF	; 255
    27ac:	88 83       	st	Y, r24
    27ae:	c1 5d       	subi	r28, 0xD1	; 209
    27b0:	d0 40       	sbci	r29, 0x00	; 0
					lcd.gotoxy(2,0);
    27b2:	60 e0       	ldi	r22, 0x00	; 0
    27b4:	70 e0       	ldi	r23, 0x00	; 0
    27b6:	82 e0       	ldi	r24, 0x02	; 2
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	f6 01       	movw	r30, r12
    27bc:	09 95       	icall
					string=func.ui16toa(input_tmp);
    27be:	c8 01       	movw	r24, r16
    27c0:	99 27       	eor	r25, r25
    27c2:	f5 01       	movw	r30, r10
    27c4:	09 95       	icall
    27c6:	90 93 7e 02 	sts	0x027E, r25	; 0x80027e <string+0x1>
    27ca:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <string>
					lcd.string(string);
    27ce:	f1 01       	movw	r30, r2
    27d0:	09 95       	icall
					switch(lfsm.remove(&lfsm,input_tmp)){ // feedback reply
    27d2:	a3 96       	adiw	r28, 0x23	; 35
    27d4:	ee ad       	ldd	r30, Y+62	; 0x3e
    27d6:	ff ad       	ldd	r31, Y+63	; 0x3f
    27d8:	a3 97       	sbiw	r28, 0x23	; 35
    27da:	60 2f       	mov	r22, r16
    27dc:	ce 01       	movw	r24, r28
    27de:	8f 5a       	subi	r24, 0xAF	; 175
    27e0:	9f 4f       	sbci	r25, 0xFF	; 255
    27e2:	09 95       	icall
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	8b 32       	cpi	r24, 0x2B	; 43
    27e8:	91 05       	cpc	r25, r1
    27ea:	08 f0       	brcs	.+2      	; 0x27ee <main+0x65e>
    27ec:	57 c0       	rjmp	.+174    	; 0x289c <main+0x70c>
    27ee:	fc 01       	movw	r30, r24
    27f0:	e0 5b       	subi	r30, 0xB0	; 176
    27f2:	ff 4f       	sbci	r31, 0xFF	; 255
    27f4:	fe c0       	rjmp	.+508    	; 0x29f2 <__tablejump2__>
						case 0:
							lcd.gotoxy(3,12);
    27f6:	6c e0       	ldi	r22, 0x0C	; 12
    27f8:	70 e0       	ldi	r23, 0x00	; 0
    27fa:	83 e0       	ldi	r24, 0x03	; 3
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	f6 01       	movw	r30, r12
    2800:	09 95       	icall
							lcd.string_size("No entry",7);
    2802:	67 e0       	ldi	r22, 0x07	; 7
    2804:	8c e7       	ldi	r24, 0x7C	; 124
    2806:	91 e0       	ldi	r25, 0x01	; 1
    2808:	f7 01       	movw	r30, r14
    280a:	09 95       	icall
							break;
    280c:	47 c0       	rjmp	.+142    	; 0x289c <main+0x70c>
						case 1:
							lcd.gotoxy(3,12);
    280e:	6c e0       	ldi	r22, 0x0C	; 12
    2810:	70 e0       	ldi	r23, 0x00	; 0
    2812:	83 e0       	ldi	r24, 0x03	; 3
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	f6 01       	movw	r30, r12
    2818:	09 95       	icall
							lcd.string_size("New Entry",7);
    281a:	67 e0       	ldi	r22, 0x07	; 7
    281c:	85 e8       	ldi	r24, 0x85	; 133
    281e:	91 e0       	ldi	r25, 0x01	; 1
    2820:	f7 01       	movw	r30, r14
    2822:	09 95       	icall
							break;
    2824:	3b c0       	rjmp	.+118    	; 0x289c <main+0x70c>
						case 2:
							lcd.gotoxy(3,12);
    2826:	6c e0       	ldi	r22, 0x0C	; 12
    2828:	70 e0       	ldi	r23, 0x00	; 0
    282a:	83 e0       	ldi	r24, 0x03	; 3
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	f6 01       	movw	r30, r12
    2830:	09 95       	icall
							lcd.string_size("global logic",7);
    2832:	67 e0       	ldi	r22, 0x07	; 7
    2834:	8f e8       	ldi	r24, 0x8F	; 143
    2836:	91 e0       	ldi	r25, 0x01	; 1
    2838:	f7 01       	movw	r30, r14
    283a:	09 95       	icall
							break;
    283c:	2f c0       	rjmp	.+94     	; 0x289c <main+0x70c>
						case 3:
							lcd.gotoxy(3,12);
    283e:	6c e0       	ldi	r22, 0x0C	; 12
    2840:	70 e0       	ldi	r23, 0x00	; 0
    2842:	83 e0       	ldi	r24, 0x03	; 3
    2844:	90 e0       	ldi	r25, 0x00	; 0
    2846:	f6 01       	movw	r30, r12
    2848:	09 95       	icall
							lcd.string_size("local logic",7);
    284a:	67 e0       	ldi	r22, 0x07	; 7
    284c:	8c e9       	ldi	r24, 0x9C	; 156
    284e:	91 e0       	ldi	r25, 0x01	; 1
    2850:	f7 01       	movw	r30, r14
    2852:	09 95       	icall
							break;
    2854:	23 c0       	rjmp	.+70     	; 0x289c <main+0x70c>
						case 4:
							lcd.gotoxy(3,12);
    2856:	6c e0       	ldi	r22, 0x0C	; 12
    2858:	70 e0       	ldi	r23, 0x00	; 0
    285a:	83 e0       	ldi	r24, 0x03	; 3
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	f6 01       	movw	r30, r12
    2860:	09 95       	icall
							lcd.string_size("local logic",7);
    2862:	67 e0       	ldi	r22, 0x07	; 7
    2864:	8c e9       	ldi	r24, 0x9C	; 156
    2866:	91 e0       	ldi	r25, 0x01	; 1
    2868:	f7 01       	movw	r30, r14
    286a:	09 95       	icall
							break;
    286c:	17 c0       	rjmp	.+46     	; 0x289c <main+0x70c>
						case 41:
							lcd.gotoxy(3,12);
    286e:	6c e0       	ldi	r22, 0x0C	; 12
    2870:	70 e0       	ldi	r23, 0x00	; 0
    2872:	83 e0       	ldi	r24, 0x03	; 3
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	f6 01       	movw	r30, r12
    2878:	09 95       	icall
							lcd.string_size("local above",7);
    287a:	67 e0       	ldi	r22, 0x07	; 7
    287c:	88 ea       	ldi	r24, 0xA8	; 168
    287e:	91 e0       	ldi	r25, 0x01	; 1
    2880:	f7 01       	movw	r30, r14
    2882:	09 95       	icall
							break;
    2884:	0b c0       	rjmp	.+22     	; 0x289c <main+0x70c>
						case 42:
							lcd.gotoxy(3,12);
    2886:	6c e0       	ldi	r22, 0x0C	; 12
    2888:	70 e0       	ldi	r23, 0x00	; 0
    288a:	83 e0       	ldi	r24, 0x03	; 3
    288c:	90 e0       	ldi	r25, 0x00	; 0
    288e:	f6 01       	movw	r30, r12
    2890:	09 95       	icall
							lcd.string_size("local bellow",7);
    2892:	67 e0       	ldi	r22, 0x07	; 7
    2894:	84 eb       	ldi	r24, 0xB4	; 180
    2896:	91 e0       	ldi	r25, 0x01	; 1
    2898:	f7 01       	movw	r30, r14
    289a:	09 95       	icall
							break;
					}//End switch
					/******/
					//lfsm.read(&lfsm,input_tmp);
					
					keypad.flush();
    289c:	f4 01       	movw	r30, r8
    289e:	09 95       	icall
					option=0;
    28a0:	51 2c       	mov	r5, r1
				}//End if
				if(keypadinput.character == 'C'){ // Repeat Remove Data Entry
    28a2:	89 81       	ldd	r24, Y+1	; 0x01
    28a4:	83 34       	cpi	r24, 0x43	; 67
    28a6:	59 f4       	brne	.+22     	; 0x28be <main+0x72e>
					keypad.flush();
    28a8:	f4 01       	movw	r30, r8
    28aa:	09 95       	icall
					option=8;
    28ac:	54 2c       	mov	r5, r4
    28ae:	07 c0       	rjmp	.+14     	; 0x28be <main+0x72e>
    28b0:	59 2e       	mov	r5, r25
    28b2:	05 c0       	rjmp	.+10     	; 0x28be <main+0x72e>
    28b4:	59 2e       	mov	r5, r25
    28b6:	03 c0       	rjmp	.+6      	; 0x28be <main+0x72e>
    28b8:	59 2e       	mov	r5, r25
    28ba:	01 c0       	rjmp	.+2      	; 0x28be <main+0x72e>
    28bc:	59 2e       	mov	r5, r25
				break;
			default:
				break;
		}//End switch
		/***DISPLAY***/
		lcd.gotoxy(3,0);
    28be:	60 e0       	ldi	r22, 0x00	; 0
    28c0:	70 e0       	ldi	r23, 0x00	; 0
    28c2:	83 e0       	ldi	r24, 0x03	; 3
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	f6 01       	movw	r30, r12
    28c8:	09 95       	icall
		lcd.string_size("Output ",7);
    28ca:	67 e0       	ldi	r22, 0x07	; 7
    28cc:	81 ec       	ldi	r24, 0xC1	; 193
    28ce:	91 e0       	ldi	r25, 0x01	; 1
    28d0:	f7 01       	movw	r30, r14
    28d2:	09 95       	icall
		string=func.ui16toa(lfsm.getoutput(&lfsm));
    28d4:	a7 96       	adiw	r28, 0x27	; 39
    28d6:	ee ad       	ldd	r30, Y+62	; 0x3e
    28d8:	ff ad       	ldd	r31, Y+63	; 0x3f
    28da:	a7 97       	sbiw	r28, 0x27	; 39
    28dc:	ce 01       	movw	r24, r28
    28de:	8f 5a       	subi	r24, 0xAF	; 175
    28e0:	9f 4f       	sbci	r25, 0xFF	; 255
    28e2:	09 95       	icall
    28e4:	f5 01       	movw	r30, r10
    28e6:	09 95       	icall
    28e8:	90 93 7e 02 	sts	0x027E, r25	; 0x80027e <string+0x1>
    28ec:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <string>
		lcd.string_size(string,4);
    28f0:	64 e0       	ldi	r22, 0x04	; 4
    28f2:	f7 01       	movw	r30, r14
    28f4:	09 95       	icall
		//lcd.hspace(2);
		//string=func.ui16toa(lfsm.getstatus(&lfsm));
		//lcd.string_size(string,4);
		PORTC=lfsm.getoutput(&lfsm);
    28f6:	a7 96       	adiw	r28, 0x27	; 39
    28f8:	ee ad       	ldd	r30, Y+62	; 0x3e
    28fa:	ff ad       	ldd	r31, Y+63	; 0x3f
    28fc:	a7 97       	sbiw	r28, 0x27	; 39
    28fe:	ce 01       	movw	r24, r28
    2900:	8f 5a       	subi	r24, 0xAF	; 175
    2902:	9f 4f       	sbci	r25, 0xFF	; 255
    2904:	09 95       	icall
    2906:	85 bb       	out	0x15, r24	; 21
    2908:	ba cc       	rjmp	.-1676   	; 0x227e <main+0xee>

0000290a <__mulsi3>:
    290a:	db 01       	movw	r26, r22
    290c:	8f 93       	push	r24
    290e:	9f 93       	push	r25
    2910:	88 d0       	rcall	.+272    	; 0x2a22 <__muluhisi3>
    2912:	bf 91       	pop	r27
    2914:	af 91       	pop	r26
    2916:	a2 9f       	mul	r26, r18
    2918:	80 0d       	add	r24, r0
    291a:	91 1d       	adc	r25, r1
    291c:	a3 9f       	mul	r26, r19
    291e:	90 0d       	add	r25, r0
    2920:	b2 9f       	mul	r27, r18
    2922:	90 0d       	add	r25, r0
    2924:	11 24       	eor	r1, r1
    2926:	08 95       	ret

00002928 <__udivmodhi4>:
    2928:	aa 1b       	sub	r26, r26
    292a:	bb 1b       	sub	r27, r27
    292c:	51 e1       	ldi	r21, 0x11	; 17
    292e:	07 c0       	rjmp	.+14     	; 0x293e <__udivmodhi4_ep>

00002930 <__udivmodhi4_loop>:
    2930:	aa 1f       	adc	r26, r26
    2932:	bb 1f       	adc	r27, r27
    2934:	a6 17       	cp	r26, r22
    2936:	b7 07       	cpc	r27, r23
    2938:	10 f0       	brcs	.+4      	; 0x293e <__udivmodhi4_ep>
    293a:	a6 1b       	sub	r26, r22
    293c:	b7 0b       	sbc	r27, r23

0000293e <__udivmodhi4_ep>:
    293e:	88 1f       	adc	r24, r24
    2940:	99 1f       	adc	r25, r25
    2942:	5a 95       	dec	r21
    2944:	a9 f7       	brne	.-22     	; 0x2930 <__udivmodhi4_loop>
    2946:	80 95       	com	r24
    2948:	90 95       	com	r25
    294a:	bc 01       	movw	r22, r24
    294c:	cd 01       	movw	r24, r26
    294e:	08 95       	ret

00002950 <__divmodhi4>:
    2950:	97 fb       	bst	r25, 7
    2952:	07 2e       	mov	r0, r23
    2954:	16 f4       	brtc	.+4      	; 0x295a <__divmodhi4+0xa>
    2956:	00 94       	com	r0
    2958:	06 d0       	rcall	.+12     	; 0x2966 <__divmodhi4_neg1>
    295a:	77 fd       	sbrc	r23, 7
    295c:	08 d0       	rcall	.+16     	; 0x296e <__divmodhi4_neg2>
    295e:	e4 df       	rcall	.-56     	; 0x2928 <__udivmodhi4>
    2960:	07 fc       	sbrc	r0, 7
    2962:	05 d0       	rcall	.+10     	; 0x296e <__divmodhi4_neg2>
    2964:	3e f4       	brtc	.+14     	; 0x2974 <__divmodhi4_exit>

00002966 <__divmodhi4_neg1>:
    2966:	90 95       	com	r25
    2968:	81 95       	neg	r24
    296a:	9f 4f       	sbci	r25, 0xFF	; 255
    296c:	08 95       	ret

0000296e <__divmodhi4_neg2>:
    296e:	70 95       	com	r23
    2970:	61 95       	neg	r22
    2972:	7f 4f       	sbci	r23, 0xFF	; 255

00002974 <__divmodhi4_exit>:
    2974:	08 95       	ret

00002976 <__udivmodsi4>:
    2976:	a1 e2       	ldi	r26, 0x21	; 33
    2978:	1a 2e       	mov	r1, r26
    297a:	aa 1b       	sub	r26, r26
    297c:	bb 1b       	sub	r27, r27
    297e:	fd 01       	movw	r30, r26
    2980:	0d c0       	rjmp	.+26     	; 0x299c <__udivmodsi4_ep>

00002982 <__udivmodsi4_loop>:
    2982:	aa 1f       	adc	r26, r26
    2984:	bb 1f       	adc	r27, r27
    2986:	ee 1f       	adc	r30, r30
    2988:	ff 1f       	adc	r31, r31
    298a:	a2 17       	cp	r26, r18
    298c:	b3 07       	cpc	r27, r19
    298e:	e4 07       	cpc	r30, r20
    2990:	f5 07       	cpc	r31, r21
    2992:	20 f0       	brcs	.+8      	; 0x299c <__udivmodsi4_ep>
    2994:	a2 1b       	sub	r26, r18
    2996:	b3 0b       	sbc	r27, r19
    2998:	e4 0b       	sbc	r30, r20
    299a:	f5 0b       	sbc	r31, r21

0000299c <__udivmodsi4_ep>:
    299c:	66 1f       	adc	r22, r22
    299e:	77 1f       	adc	r23, r23
    29a0:	88 1f       	adc	r24, r24
    29a2:	99 1f       	adc	r25, r25
    29a4:	1a 94       	dec	r1
    29a6:	69 f7       	brne	.-38     	; 0x2982 <__udivmodsi4_loop>
    29a8:	60 95       	com	r22
    29aa:	70 95       	com	r23
    29ac:	80 95       	com	r24
    29ae:	90 95       	com	r25
    29b0:	9b 01       	movw	r18, r22
    29b2:	ac 01       	movw	r20, r24
    29b4:	bd 01       	movw	r22, r26
    29b6:	cf 01       	movw	r24, r30
    29b8:	08 95       	ret

000029ba <__divmodsi4>:
    29ba:	05 2e       	mov	r0, r21
    29bc:	97 fb       	bst	r25, 7
    29be:	16 f4       	brtc	.+4      	; 0x29c4 <__divmodsi4+0xa>
    29c0:	00 94       	com	r0
    29c2:	0f d0       	rcall	.+30     	; 0x29e2 <__negsi2>
    29c4:	57 fd       	sbrc	r21, 7
    29c6:	05 d0       	rcall	.+10     	; 0x29d2 <__divmodsi4_neg2>
    29c8:	d6 df       	rcall	.-84     	; 0x2976 <__udivmodsi4>
    29ca:	07 fc       	sbrc	r0, 7
    29cc:	02 d0       	rcall	.+4      	; 0x29d2 <__divmodsi4_neg2>
    29ce:	46 f4       	brtc	.+16     	; 0x29e0 <__divmodsi4_exit>
    29d0:	08 c0       	rjmp	.+16     	; 0x29e2 <__negsi2>

000029d2 <__divmodsi4_neg2>:
    29d2:	50 95       	com	r21
    29d4:	40 95       	com	r20
    29d6:	30 95       	com	r19
    29d8:	21 95       	neg	r18
    29da:	3f 4f       	sbci	r19, 0xFF	; 255
    29dc:	4f 4f       	sbci	r20, 0xFF	; 255
    29de:	5f 4f       	sbci	r21, 0xFF	; 255

000029e0 <__divmodsi4_exit>:
    29e0:	08 95       	ret

000029e2 <__negsi2>:
    29e2:	90 95       	com	r25
    29e4:	80 95       	com	r24
    29e6:	70 95       	com	r23
    29e8:	61 95       	neg	r22
    29ea:	7f 4f       	sbci	r23, 0xFF	; 255
    29ec:	8f 4f       	sbci	r24, 0xFF	; 255
    29ee:	9f 4f       	sbci	r25, 0xFF	; 255
    29f0:	08 95       	ret

000029f2 <__tablejump2__>:
    29f2:	ee 0f       	add	r30, r30
    29f4:	ff 1f       	adc	r31, r31
    29f6:	00 24       	eor	r0, r0
    29f8:	00 1c       	adc	r0, r0
    29fa:	0b be       	out	0x3b, r0	; 59
    29fc:	07 90       	elpm	r0, Z+
    29fe:	f6 91       	elpm	r31, Z
    2a00:	e0 2d       	mov	r30, r0
    2a02:	09 94       	ijmp

00002a04 <__umulhisi3>:
    2a04:	a2 9f       	mul	r26, r18
    2a06:	b0 01       	movw	r22, r0
    2a08:	b3 9f       	mul	r27, r19
    2a0a:	c0 01       	movw	r24, r0
    2a0c:	a3 9f       	mul	r26, r19
    2a0e:	70 0d       	add	r23, r0
    2a10:	81 1d       	adc	r24, r1
    2a12:	11 24       	eor	r1, r1
    2a14:	91 1d       	adc	r25, r1
    2a16:	b2 9f       	mul	r27, r18
    2a18:	70 0d       	add	r23, r0
    2a1a:	81 1d       	adc	r24, r1
    2a1c:	11 24       	eor	r1, r1
    2a1e:	91 1d       	adc	r25, r1
    2a20:	08 95       	ret

00002a22 <__muluhisi3>:
    2a22:	f0 df       	rcall	.-32     	; 0x2a04 <__umulhisi3>
    2a24:	a5 9f       	mul	r26, r21
    2a26:	90 0d       	add	r25, r0
    2a28:	b4 9f       	mul	r27, r20
    2a2a:	90 0d       	add	r25, r0
    2a2c:	a4 9f       	mul	r26, r20
    2a2e:	80 0d       	add	r24, r0
    2a30:	91 1d       	adc	r25, r1
    2a32:	11 24       	eor	r1, r1
    2a34:	08 95       	ret

00002a36 <eeprom_read_block>:
    2a36:	dc 01       	movw	r26, r24
    2a38:	cb 01       	movw	r24, r22

00002a3a <eeprom_read_blraw>:
    2a3a:	fc 01       	movw	r30, r24
    2a3c:	e1 99       	sbic	0x1c, 1	; 28
    2a3e:	fe cf       	rjmp	.-4      	; 0x2a3c <eeprom_read_blraw+0x2>
    2a40:	06 c0       	rjmp	.+12     	; 0x2a4e <eeprom_read_blraw+0x14>
    2a42:	ff bb       	out	0x1f, r31	; 31
    2a44:	ee bb       	out	0x1e, r30	; 30
    2a46:	e0 9a       	sbi	0x1c, 0	; 28
    2a48:	31 96       	adiw	r30, 0x01	; 1
    2a4a:	0d b2       	in	r0, 0x1d	; 29
    2a4c:	0d 92       	st	X+, r0
    2a4e:	41 50       	subi	r20, 0x01	; 1
    2a50:	50 40       	sbci	r21, 0x00	; 0
    2a52:	b8 f7       	brcc	.-18     	; 0x2a42 <eeprom_read_blraw+0x8>
    2a54:	08 95       	ret

00002a56 <eeprom_read_byte>:
    2a56:	e1 99       	sbic	0x1c, 1	; 28
    2a58:	fe cf       	rjmp	.-4      	; 0x2a56 <eeprom_read_byte>
    2a5a:	9f bb       	out	0x1f, r25	; 31
    2a5c:	8e bb       	out	0x1e, r24	; 30
    2a5e:	e0 9a       	sbi	0x1c, 0	; 28
    2a60:	99 27       	eor	r25, r25
    2a62:	8d b3       	in	r24, 0x1d	; 29
    2a64:	08 95       	ret

00002a66 <eeprom_read_word>:
    2a66:	a8 e1       	ldi	r26, 0x18	; 24
    2a68:	b0 e0       	ldi	r27, 0x00	; 0
    2a6a:	42 e0       	ldi	r20, 0x02	; 2
    2a6c:	50 e0       	ldi	r21, 0x00	; 0
    2a6e:	e5 cf       	rjmp	.-54     	; 0x2a3a <eeprom_read_blraw>

00002a70 <eeprom_update_block>:
    2a70:	dc 01       	movw	r26, r24
    2a72:	a4 0f       	add	r26, r20
    2a74:	b5 1f       	adc	r27, r21
    2a76:	41 50       	subi	r20, 0x01	; 1
    2a78:	50 40       	sbci	r21, 0x00	; 0
    2a7a:	40 f0       	brcs	.+16     	; 0x2a8c <eeprom_update_block+0x1c>
    2a7c:	cb 01       	movw	r24, r22
    2a7e:	84 0f       	add	r24, r20
    2a80:	95 1f       	adc	r25, r21
    2a82:	2e 91       	ld	r18, -X
    2a84:	05 d0       	rcall	.+10     	; 0x2a90 <eeprom_update_r18>
    2a86:	41 50       	subi	r20, 0x01	; 1
    2a88:	50 40       	sbci	r21, 0x00	; 0
    2a8a:	d8 f7       	brcc	.-10     	; 0x2a82 <eeprom_update_block+0x12>
    2a8c:	08 95       	ret

00002a8e <eeprom_update_byte>:
    2a8e:	26 2f       	mov	r18, r22

00002a90 <eeprom_update_r18>:
    2a90:	e1 99       	sbic	0x1c, 1	; 28
    2a92:	fe cf       	rjmp	.-4      	; 0x2a90 <eeprom_update_r18>
    2a94:	9f bb       	out	0x1f, r25	; 31
    2a96:	8e bb       	out	0x1e, r24	; 30
    2a98:	e0 9a       	sbi	0x1c, 0	; 28
    2a9a:	01 97       	sbiw	r24, 0x01	; 1
    2a9c:	0d b2       	in	r0, 0x1d	; 29
    2a9e:	02 16       	cp	r0, r18
    2aa0:	31 f0       	breq	.+12     	; 0x2aae <eeprom_update_r18+0x1e>
    2aa2:	2d bb       	out	0x1d, r18	; 29
    2aa4:	0f b6       	in	r0, 0x3f	; 63
    2aa6:	f8 94       	cli
    2aa8:	e2 9a       	sbi	0x1c, 2	; 28
    2aaa:	e1 9a       	sbi	0x1c, 1	; 28
    2aac:	0f be       	out	0x3f, r0	; 63
    2aae:	08 95       	ret

00002ab0 <eeprom_update_dword>:
    2ab0:	03 96       	adiw	r24, 0x03	; 3
    2ab2:	27 2f       	mov	r18, r23
    2ab4:	ed df       	rcall	.-38     	; 0x2a90 <eeprom_update_r18>
    2ab6:	eb df       	rcall	.-42     	; 0x2a8e <eeprom_update_byte>
    2ab8:	25 2f       	mov	r18, r21
    2aba:	ea df       	rcall	.-44     	; 0x2a90 <eeprom_update_r18>
    2abc:	24 2f       	mov	r18, r20
    2abe:	e8 cf       	rjmp	.-48     	; 0x2a90 <eeprom_update_r18>

00002ac0 <eeprom_update_word>:
    2ac0:	01 96       	adiw	r24, 0x01	; 1
    2ac2:	27 2f       	mov	r18, r23
    2ac4:	e5 df       	rcall	.-54     	; 0x2a90 <eeprom_update_r18>
    2ac6:	e3 cf       	rjmp	.-58     	; 0x2a8e <eeprom_update_byte>

00002ac8 <eeprom_write_block>:
    2ac8:	dc 01       	movw	r26, r24
    2aca:	cb 01       	movw	r24, r22
    2acc:	02 c0       	rjmp	.+4      	; 0x2ad2 <eeprom_write_block+0xa>
    2ace:	2d 91       	ld	r18, X+
    2ad0:	05 d0       	rcall	.+10     	; 0x2adc <eeprom_write_r18>
    2ad2:	41 50       	subi	r20, 0x01	; 1
    2ad4:	50 40       	sbci	r21, 0x00	; 0
    2ad6:	d8 f7       	brcc	.-10     	; 0x2ace <eeprom_write_block+0x6>
    2ad8:	08 95       	ret

00002ada <eeprom_write_byte>:
    2ada:	26 2f       	mov	r18, r22

00002adc <eeprom_write_r18>:
    2adc:	e1 99       	sbic	0x1c, 1	; 28
    2ade:	fe cf       	rjmp	.-4      	; 0x2adc <eeprom_write_r18>
    2ae0:	9f bb       	out	0x1f, r25	; 31
    2ae2:	8e bb       	out	0x1e, r24	; 30
    2ae4:	2d bb       	out	0x1d, r18	; 29
    2ae6:	0f b6       	in	r0, 0x3f	; 63
    2ae8:	f8 94       	cli
    2aea:	e2 9a       	sbi	0x1c, 2	; 28
    2aec:	e1 9a       	sbi	0x1c, 1	; 28
    2aee:	0f be       	out	0x3f, r0	; 63
    2af0:	01 96       	adiw	r24, 0x01	; 1
    2af2:	08 95       	ret

00002af4 <eeprom_write_dword>:
    2af4:	24 2f       	mov	r18, r20
    2af6:	f2 df       	rcall	.-28     	; 0x2adc <eeprom_write_r18>
    2af8:	25 2f       	mov	r18, r21
    2afa:	f0 df       	rcall	.-32     	; 0x2adc <eeprom_write_r18>
    2afc:	00 c0       	rjmp	.+0      	; 0x2afe <eeprom_write_word>

00002afe <eeprom_write_word>:
    2afe:	ed df       	rcall	.-38     	; 0x2ada <eeprom_write_byte>
    2b00:	27 2f       	mov	r18, r23
    2b02:	ec cf       	rjmp	.-40     	; 0x2adc <eeprom_write_r18>

00002b04 <_exit>:
    2b04:	f8 94       	cli

00002b06 <__stop_program>:
    2b06:	ff cf       	rjmp	.-2      	; 0x2b06 <__stop_program>
