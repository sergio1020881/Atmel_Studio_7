
Atmega324.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  000025ae  00002642  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000025ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000077  00800136  00800136  00002678  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002678  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000026a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000580  00000000  00000000  000026e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000055f1  00000000  00000000  00002c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001519  00000000  00000000  00008259  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003340  00000000  00000000  00009772  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a70  00000000  00000000  0000cab4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f20  00000000  00000000  0000d524  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003f28  00000000  00000000  0000e444  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003a0  00000000  00000000  0001236c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
       4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
       8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
       c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      34:	0c 94 84 11 	jmp	0x2308	; 0x2308 <__vector_13>
      38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      60:	0c 94 75 00 	jmp	0xea	; 0xea <__vector_24>
      64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      7c:	84 02       	muls	r24, r20
      7e:	8a 02       	muls	r24, r26
      80:	90 02       	muls	r25, r16
      82:	96 02       	muls	r25, r22
      84:	9c 02       	muls	r25, r28
      86:	a7 02       	muls	r26, r23
      88:	b2 02       	muls	r27, r18
      8a:	bd 02       	muls	r27, r29
      8c:	c3 02       	muls	r28, r19
      8e:	d3 02       	muls	r29, r19
      90:	de 02       	muls	r29, r30
      92:	ee 02       	muls	r30, r30
      94:	0e 03       	fmul	r16, r22
      96:	f4 02       	muls	r31, r20
      98:	ff 02       	muls	r31, r31
      9a:	1d 03       	fmul	r17, r21
      9c:	23 03       	mulsu	r18, r19
      9e:	29 03       	fmul	r18, r17
      a0:	2f 03       	fmul	r18, r23
      a2:	4c 03       	fmul	r20, r20
      a4:	35 03       	mulsu	r19, r21
      a6:	3b 03       	fmul	r19, r19
      a8:	41 03       	mulsu	r20, r17
      aa:	47 03       	mulsu	r20, r23

000000ac <__ctors_end>:
      ac:	11 24       	eor	r1, r1
      ae:	1f be       	out	0x3f, r1	; 63
      b0:	cf ef       	ldi	r28, 0xFF	; 255
      b2:	d8 e0       	ldi	r29, 0x08	; 8
      b4:	de bf       	out	0x3e, r29	; 62
      b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
      b8:	11 e0       	ldi	r17, 0x01	; 1
      ba:	a0 e0       	ldi	r26, 0x00	; 0
      bc:	b1 e0       	ldi	r27, 0x01	; 1
      be:	ee ea       	ldi	r30, 0xAE	; 174
      c0:	f5 e2       	ldi	r31, 0x25	; 37
      c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
      c4:	05 90       	lpm	r0, Z+
      c6:	0d 92       	st	X+, r0
      c8:	a6 33       	cpi	r26, 0x36	; 54
      ca:	b1 07       	cpc	r27, r17
      cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
      ce:	21 e0       	ldi	r18, 0x01	; 1
      d0:	a6 e3       	ldi	r26, 0x36	; 54
      d2:	b1 e0       	ldi	r27, 0x01	; 1
      d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
      d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
      d8:	ad 3a       	cpi	r26, 0xAD	; 173
      da:	b2 07       	cpc	r27, r18
      dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
      de:	0e 94 c6 0c 	call	0x198c	; 0x198c <main>
      e2:	0c 94 d5 12 	jmp	0x25aa	; 0x25aa <_exit>

000000e6 <__bad_interrupt>:
      e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <__vector_24>:
ISR(ANALOG_INTERRUPT)
/*************************************************************************
Function: ANALOG interrupt
Purpose:  Read Analog Input
**************************************************************************/
{
      ea:	1f 92       	push	r1
      ec:	0f 92       	push	r0
      ee:	0f b6       	in	r0, 0x3f	; 63
      f0:	0f 92       	push	r0
      f2:	11 24       	eor	r1, r1
      f4:	2f 93       	push	r18
      f6:	3f 93       	push	r19
      f8:	8f 93       	push	r24
      fa:	9f 93       	push	r25
      fc:	af 93       	push	r26
      fe:	bf 93       	push	r27
     100:	ef 93       	push	r30
     102:	ff 93       	push	r31
	/******/
	adc_tmp=ADCL;
     104:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     108:	90 e0       	ldi	r25, 0x00	; 0
     10a:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <adc_tmp+0x1>
     10e:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <adc_tmp>
	adc_tmp|=(ADCH<<8);
     112:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     116:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <adc_tmp>
     11a:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <adc_tmp+0x1>
     11e:	92 2b       	or	r25, r18
     120:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <adc_tmp+0x1>
     124:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <adc_tmp>
	if(adc_n_sample < (1<<ADC_NUMBER_SAMPLE)){
     128:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <adc_n_sample>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	a0 f4       	brcc	.+40     	; 0x158 <__vector_24+0x6e>
		adc_n_sample++;
     130:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <adc_n_sample>
     134:	8f 5f       	subi	r24, 0xFF	; 255
     136:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <adc_n_sample>
		adc_sample+=adc_tmp;
     13a:	20 91 68 01 	lds	r18, 0x0168	; 0x800168 <adc_tmp>
     13e:	30 91 69 01 	lds	r19, 0x0169	; 0x800169 <adc_tmp+0x1>
     142:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <adc_sample>
     146:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <adc_sample+0x1>
     14a:	82 0f       	add	r24, r18
     14c:	93 1f       	adc	r25, r19
     14e:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <adc_sample+0x1>
     152:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <adc_sample>
     156:	45 c0       	rjmp	.+138    	; 0x1e2 <__vector_24+0xf8>
	}else{
		ADC_VALUE[ADC_SELECTOR]=adc_sample>>ADC_NUMBER_SAMPLE;
     158:	e0 91 61 01 	lds	r30, 0x0161	; 0x800161 <ADC_SELECTOR>
     15c:	f0 91 62 01 	lds	r31, 0x0162	; 0x800162 <ADC_SELECTOR+0x1>
     160:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <adc_sample>
     164:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <adc_sample+0x1>
     168:	95 95       	asr	r25
     16a:	87 95       	ror	r24
     16c:	95 95       	asr	r25
     16e:	87 95       	ror	r24
     170:	ee 0f       	add	r30, r30
     172:	ff 1f       	adc	r31, r31
     174:	ea 5b       	subi	r30, 0xBA	; 186
     176:	fe 4f       	sbci	r31, 0xFE	; 254
     178:	91 83       	std	Z+1, r25	; 0x01
     17a:	80 83       	st	Z, r24
		adc_n_sample=adc_sample=0;
     17c:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <adc_sample+0x1>
     180:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <adc_sample>
     184:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <adc_n_sample>
		/******/
		if(ADC_SELECTOR < ADC_N_CHANNEL)
     188:	20 91 61 01 	lds	r18, 0x0161	; 0x800161 <ADC_SELECTOR>
     18c:	30 91 62 01 	lds	r19, 0x0162	; 0x800162 <ADC_SELECTOR+0x1>
     190:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <ADC_N_CHANNEL>
     194:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <ADC_N_CHANNEL+0x1>
     198:	28 17       	cp	r18, r24
     19a:	39 07       	cpc	r19, r25
     19c:	54 f4       	brge	.+20     	; 0x1b2 <__vector_24+0xc8>
			ADC_SELECTOR++;
     19e:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <ADC_SELECTOR>
     1a2:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <ADC_SELECTOR+0x1>
     1a6:	01 96       	adiw	r24, 0x01	; 1
     1a8:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <ADC_SELECTOR+0x1>
     1ac:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <ADC_SELECTOR>
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <__vector_24+0xd0>
		else
			ADC_SELECTOR=0;
     1b2:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <ADC_SELECTOR+0x1>
     1b6:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <ADC_SELECTOR>
		ADC_SELECT &= ~MUX_MASK;
     1ba:	ac e7       	ldi	r26, 0x7C	; 124
     1bc:	b0 e0       	ldi	r27, 0x00	; 0
     1be:	8c 91       	ld	r24, X
     1c0:	80 7e       	andi	r24, 0xE0	; 224
     1c2:	8c 93       	st	X, r24
		ADC_SELECT |= (ADC_CHANNEL_GAIN[ADC_SELECTOR] & MUX_MASK);
     1c4:	e0 91 61 01 	lds	r30, 0x0161	; 0x800161 <ADC_SELECTOR>
     1c8:	f0 91 62 01 	lds	r31, 0x0162	; 0x800162 <ADC_SELECTOR+0x1>
     1cc:	ee 0f       	add	r30, r30
     1ce:	ff 1f       	adc	r31, r31
     1d0:	ea 5c       	subi	r30, 0xCA	; 202
     1d2:	fe 4f       	sbci	r31, 0xFE	; 254
     1d4:	80 81       	ld	r24, Z
     1d6:	91 81       	ldd	r25, Z+1	; 0x01
     1d8:	2c 91       	ld	r18, X
     1da:	8f 71       	andi	r24, 0x1F	; 31
     1dc:	99 27       	eor	r25, r25
     1de:	82 2b       	or	r24, r18
     1e0:	8c 93       	st	X, r24
	}
}
     1e2:	ff 91       	pop	r31
     1e4:	ef 91       	pop	r30
     1e6:	bf 91       	pop	r27
     1e8:	af 91       	pop	r26
     1ea:	9f 91       	pop	r25
     1ec:	8f 91       	pop	r24
     1ee:	3f 91       	pop	r19
     1f0:	2f 91       	pop	r18
     1f2:	0f 90       	pop	r0
     1f4:	0f be       	out	0x3f, r0	; 63
     1f6:	0f 90       	pop	r0
     1f8:	1f 90       	pop	r1
     1fa:	18 95       	reti

000001fc <Atmega324ioread>:

	return mcu;
}
void Atmega324ioread(void) // This function is to be put right after the start of the main cycle or While loop
{
	bckIO[0][A]=bckIO[1][A];
     1fc:	e6 e5       	ldi	r30, 0x56	; 86
     1fe:	f1 e0       	ldi	r31, 0x01	; 1
     200:	84 81       	ldd	r24, Z+4	; 0x04
     202:	80 83       	st	Z, r24
	bckIO[0][B]=bckIO[1][B];
     204:	85 81       	ldd	r24, Z+5	; 0x05
     206:	81 83       	std	Z+1, r24	; 0x01
	bckIO[0][C]=bckIO[1][C];
     208:	86 81       	ldd	r24, Z+6	; 0x06
     20a:	82 83       	std	Z+2, r24	; 0x02
	bckIO[0][D]=bckIO[1][D];
     20c:	87 81       	ldd	r24, Z+7	; 0x07
     20e:	83 83       	std	Z+3, r24	; 0x03
	bckIO[1][A]=PINA;
     210:	80 b1       	in	r24, 0x00	; 0
     212:	84 83       	std	Z+4, r24	; 0x04
	bckIO[1][B]=PINB;
     214:	83 b1       	in	r24, 0x03	; 3
     216:	85 83       	std	Z+5, r24	; 0x05
	bckIO[1][C]=PINC;
     218:	86 b1       	in	r24, 0x06	; 6
     21a:	86 83       	std	Z+6, r24	; 0x06
	bckIO[1][D]=PIND;
     21c:	89 b1       	in	r24, 0x09	; 9
     21e:	87 83       	std	Z+7, r24	; 0x07
     220:	08 95       	ret

00000222 <Atmega324hl>:
}
uint8_t Atmega324hl(char port)
{
	uint8_t i;
	switch (port) {
     222:	82 34       	cpi	r24, 0x42	; 66
     224:	81 f0       	breq	.+32     	; 0x246 <Atmega324hl+0x24>
     226:	18 f4       	brcc	.+6      	; 0x22e <Atmega324hl+0xc>
     228:	81 34       	cpi	r24, 0x41	; 65
     22a:	31 f0       	breq	.+12     	; 0x238 <Atmega324hl+0x16>
     22c:	21 c0       	rjmp	.+66     	; 0x270 <Atmega324hl+0x4e>
     22e:	83 34       	cpi	r24, 0x43	; 67
     230:	89 f0       	breq	.+34     	; 0x254 <Atmega324hl+0x32>
     232:	84 34       	cpi	r24, 0x44	; 68
     234:	b1 f0       	breq	.+44     	; 0x262 <Atmega324hl+0x40>
     236:	1c c0       	rjmp	.+56     	; 0x270 <Atmega324hl+0x4e>
		case 'A':
			i=bckIO[1][A]^bckIO[0][A];
     238:	e6 e5       	ldi	r30, 0x56	; 86
     23a:	f1 e0       	ldi	r31, 0x01	; 1
     23c:	90 81       	ld	r25, Z
     23e:	84 81       	ldd	r24, Z+4	; 0x04
     240:	89 27       	eor	r24, r25
			i&=bckIO[0][A];
     242:	89 23       	and	r24, r25
			break;
     244:	08 95       	ret
		case 'B':
			i=bckIO[1][B]^bckIO[0][B];
     246:	e6 e5       	ldi	r30, 0x56	; 86
     248:	f1 e0       	ldi	r31, 0x01	; 1
     24a:	91 81       	ldd	r25, Z+1	; 0x01
     24c:	85 81       	ldd	r24, Z+5	; 0x05
     24e:	89 27       	eor	r24, r25
			i&=bckIO[0][B];
     250:	89 23       	and	r24, r25
			break;
     252:	08 95       	ret
		case 'C':
			i=bckIO[1][C]^bckIO[0][C];
     254:	e6 e5       	ldi	r30, 0x56	; 86
     256:	f1 e0       	ldi	r31, 0x01	; 1
     258:	92 81       	ldd	r25, Z+2	; 0x02
     25a:	86 81       	ldd	r24, Z+6	; 0x06
     25c:	89 27       	eor	r24, r25
			i&=bckIO[0][C];
     25e:	89 23       	and	r24, r25
			break;
     260:	08 95       	ret
		case 'D':
			i=bckIO[1][D]^bckIO[0][D];
     262:	e6 e5       	ldi	r30, 0x56	; 86
     264:	f1 e0       	ldi	r31, 0x01	; 1
     266:	93 81       	ldd	r25, Z+3	; 0x03
     268:	87 81       	ldd	r24, Z+7	; 0x07
     26a:	89 27       	eor	r24, r25
			i&=bckIO[0][D];
     26c:	89 23       	and	r24, r25
			break;
     26e:	08 95       	ret
		default:
			i=0;
     270:	80 e0       	ldi	r24, 0x00	; 0
			break;
	}
	return i;
}
     272:	08 95       	ret

00000274 <Atmega324ll>:
uint8_t Atmega324ll(char port)
{
	uint8_t i;
	switch (port) {
     274:	82 34       	cpi	r24, 0x42	; 66
     276:	81 f0       	breq	.+32     	; 0x298 <Atmega324ll+0x24>
     278:	18 f4       	brcc	.+6      	; 0x280 <Atmega324ll+0xc>
     27a:	81 34       	cpi	r24, 0x41	; 65
     27c:	31 f0       	breq	.+12     	; 0x28a <Atmega324ll+0x16>
     27e:	21 c0       	rjmp	.+66     	; 0x2c2 <Atmega324ll+0x4e>
     280:	83 34       	cpi	r24, 0x43	; 67
     282:	89 f0       	breq	.+34     	; 0x2a6 <Atmega324ll+0x32>
     284:	84 34       	cpi	r24, 0x44	; 68
     286:	b1 f0       	breq	.+44     	; 0x2b4 <Atmega324ll+0x40>
     288:	1c c0       	rjmp	.+56     	; 0x2c2 <Atmega324ll+0x4e>
		case 'A':
			i=~(bckIO[0][A]|bckIO[1][A]);
     28a:	e6 e5       	ldi	r30, 0x56	; 86
     28c:	f1 e0       	ldi	r31, 0x01	; 1
     28e:	90 81       	ld	r25, Z
     290:	84 81       	ldd	r24, Z+4	; 0x04
     292:	89 2b       	or	r24, r25
     294:	80 95       	com	r24
			break;
     296:	08 95       	ret
		case 'B':
			i=~(bckIO[0][B]|bckIO[1][B]);
     298:	e6 e5       	ldi	r30, 0x56	; 86
     29a:	f1 e0       	ldi	r31, 0x01	; 1
     29c:	91 81       	ldd	r25, Z+1	; 0x01
     29e:	85 81       	ldd	r24, Z+5	; 0x05
     2a0:	89 2b       	or	r24, r25
     2a2:	80 95       	com	r24
			break;
     2a4:	08 95       	ret
		case 'C':
			i=~(bckIO[0][C]|bckIO[1][C]);
     2a6:	e6 e5       	ldi	r30, 0x56	; 86
     2a8:	f1 e0       	ldi	r31, 0x01	; 1
     2aa:	92 81       	ldd	r25, Z+2	; 0x02
     2ac:	86 81       	ldd	r24, Z+6	; 0x06
     2ae:	89 2b       	or	r24, r25
     2b0:	80 95       	com	r24
			break;
     2b2:	08 95       	ret
		case 'D':
			i=~(bckIO[0][D]|bckIO[1][D]);
     2b4:	e6 e5       	ldi	r30, 0x56	; 86
     2b6:	f1 e0       	ldi	r31, 0x01	; 1
     2b8:	93 81       	ldd	r25, Z+3	; 0x03
     2ba:	87 81       	ldd	r24, Z+7	; 0x07
     2bc:	89 2b       	or	r24, r25
     2be:	80 95       	com	r24
			break;
     2c0:	08 95       	ret
		default:
			i=0;
     2c2:	80 e0       	ldi	r24, 0x00	; 0
			break;
	}
	return i;
}
     2c4:	08 95       	ret

000002c6 <Atmega324lh>:
uint8_t Atmega324lh(char port)
{
	uint8_t i;
	switch (port) {
     2c6:	82 34       	cpi	r24, 0x42	; 66
     2c8:	81 f0       	breq	.+32     	; 0x2ea <Atmega324lh+0x24>
     2ca:	18 f4       	brcc	.+6      	; 0x2d2 <Atmega324lh+0xc>
     2cc:	81 34       	cpi	r24, 0x41	; 65
     2ce:	31 f0       	breq	.+12     	; 0x2dc <Atmega324lh+0x16>
     2d0:	21 c0       	rjmp	.+66     	; 0x314 <Atmega324lh+0x4e>
     2d2:	83 34       	cpi	r24, 0x43	; 67
     2d4:	89 f0       	breq	.+34     	; 0x2f8 <Atmega324lh+0x32>
     2d6:	84 34       	cpi	r24, 0x44	; 68
     2d8:	b1 f0       	breq	.+44     	; 0x306 <Atmega324lh+0x40>
     2da:	1c c0       	rjmp	.+56     	; 0x314 <Atmega324lh+0x4e>
		case 'A':
			i=bckIO[0][A]^bckIO[1][A];
     2dc:	e6 e5       	ldi	r30, 0x56	; 86
     2de:	f1 e0       	ldi	r31, 0x01	; 1
     2e0:	94 81       	ldd	r25, Z+4	; 0x04
     2e2:	80 81       	ld	r24, Z
     2e4:	89 27       	eor	r24, r25
			i&=bckIO[1][A];
     2e6:	89 23       	and	r24, r25
			break;
     2e8:	08 95       	ret
		case 'B':
			i=bckIO[0][B]^bckIO[1][B];
     2ea:	e6 e5       	ldi	r30, 0x56	; 86
     2ec:	f1 e0       	ldi	r31, 0x01	; 1
     2ee:	95 81       	ldd	r25, Z+5	; 0x05
     2f0:	81 81       	ldd	r24, Z+1	; 0x01
     2f2:	89 27       	eor	r24, r25
			i&=bckIO[1][B];
     2f4:	89 23       	and	r24, r25
			break;
     2f6:	08 95       	ret
		case 'C':
			i=bckIO[0][C]^bckIO[1][C];
     2f8:	e6 e5       	ldi	r30, 0x56	; 86
     2fa:	f1 e0       	ldi	r31, 0x01	; 1
     2fc:	96 81       	ldd	r25, Z+6	; 0x06
     2fe:	82 81       	ldd	r24, Z+2	; 0x02
     300:	89 27       	eor	r24, r25
			i&=bckIO[1][C];
     302:	89 23       	and	r24, r25
			break;
     304:	08 95       	ret
		case 'D':
			i=bckIO[0][D]^bckIO[1][D];
     306:	e6 e5       	ldi	r30, 0x56	; 86
     308:	f1 e0       	ldi	r31, 0x01	; 1
     30a:	97 81       	ldd	r25, Z+7	; 0x07
     30c:	83 81       	ldd	r24, Z+3	; 0x03
     30e:	89 27       	eor	r24, r25
			i&=bckIO[1][D];
     310:	89 23       	and	r24, r25
			break;
     312:	08 95       	ret
		default:
			i=0;
     314:	80 e0       	ldi	r24, 0x00	; 0
			break;
	}
	return i;
}
     316:	08 95       	ret

00000318 <Atmega324hh>:
uint8_t Atmega324hh(char port)
{
	uint8_t i;
	switch (port) {
     318:	82 34       	cpi	r24, 0x42	; 66
     31a:	79 f0       	breq	.+30     	; 0x33a <Atmega324hh+0x22>
     31c:	18 f4       	brcc	.+6      	; 0x324 <Atmega324hh+0xc>
     31e:	81 34       	cpi	r24, 0x41	; 65
     320:	31 f0       	breq	.+12     	; 0x32e <Atmega324hh+0x16>
     322:	1d c0       	rjmp	.+58     	; 0x35e <Atmega324hh+0x46>
     324:	83 34       	cpi	r24, 0x43	; 67
     326:	79 f0       	breq	.+30     	; 0x346 <Atmega324hh+0x2e>
     328:	84 34       	cpi	r24, 0x44	; 68
     32a:	99 f0       	breq	.+38     	; 0x352 <Atmega324hh+0x3a>
     32c:	18 c0       	rjmp	.+48     	; 0x35e <Atmega324hh+0x46>
		case 'A':
			i=bckIO[0][A]&bckIO[1][A];
     32e:	e6 e5       	ldi	r30, 0x56	; 86
     330:	f1 e0       	ldi	r31, 0x01	; 1
     332:	90 81       	ld	r25, Z
     334:	84 81       	ldd	r24, Z+4	; 0x04
     336:	89 23       	and	r24, r25
			break;
     338:	08 95       	ret
		case 'B':
			i=bckIO[0][B]&bckIO[1][B];
     33a:	e6 e5       	ldi	r30, 0x56	; 86
     33c:	f1 e0       	ldi	r31, 0x01	; 1
     33e:	91 81       	ldd	r25, Z+1	; 0x01
     340:	85 81       	ldd	r24, Z+5	; 0x05
     342:	89 23       	and	r24, r25
			break;
     344:	08 95       	ret
		case 'C':
			i=bckIO[0][C]&bckIO[1][C];
     346:	e6 e5       	ldi	r30, 0x56	; 86
     348:	f1 e0       	ldi	r31, 0x01	; 1
     34a:	92 81       	ldd	r25, Z+2	; 0x02
     34c:	86 81       	ldd	r24, Z+6	; 0x06
     34e:	89 23       	and	r24, r25
			break;
     350:	08 95       	ret
		case 'D':
			i=bckIO[0][D]&bckIO[1][D];
     352:	e6 e5       	ldi	r30, 0x56	; 86
     354:	f1 e0       	ldi	r31, 0x01	; 1
     356:	93 81       	ldd	r25, Z+3	; 0x03
     358:	87 81       	ldd	r24, Z+7	; 0x07
     35a:	89 23       	and	r24, r25
			break;
     35c:	08 95       	ret
		default:
			i=0;
     35e:	80 e0       	ldi	r24, 0x00	; 0
			break;
	}
	return i;
}
     360:	08 95       	ret

00000362 <ATMEGA324enable>:
uint8_t Atmega324ll(char port);
uint8_t Atmega324lh(char port);
uint8_t Atmega324hh(char port);

ATMEGA324 ATMEGA324enable(void)
{
     362:	fc 01       	movw	r30, r24
	bckIO[1][A]=PINA;
     364:	80 b1       	in	r24, 0x00	; 0
     366:	a6 e5       	ldi	r26, 0x56	; 86
     368:	b1 e0       	ldi	r27, 0x01	; 1
     36a:	14 96       	adiw	r26, 0x04	; 4
     36c:	8c 93       	st	X, r24
     36e:	14 97       	sbiw	r26, 0x04	; 4
	bckIO[1][B]=PINB;
     370:	83 b1       	in	r24, 0x03	; 3
     372:	15 96       	adiw	r26, 0x05	; 5
     374:	8c 93       	st	X, r24
     376:	15 97       	sbiw	r26, 0x05	; 5
	bckIO[1][C]=PINC;
     378:	86 b1       	in	r24, 0x06	; 6
     37a:	16 96       	adiw	r26, 0x06	; 6
     37c:	8c 93       	st	X, r24
     37e:	16 97       	sbiw	r26, 0x06	; 6
	bckIO[1][D]=PIND;
     380:	89 b1       	in	r24, 0x09	; 9
     382:	17 96       	adiw	r26, 0x07	; 7
     384:	8c 93       	st	X, r24
	mcu.hl	= Atmega324hl;
	mcu.ll	= Atmega324ll;
	mcu.lh	= Atmega324lh;
	mcu.hh	= Atmega324hh;

	return mcu;
     386:	8e ef       	ldi	r24, 0xFE	; 254
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	91 83       	std	Z+1, r25	; 0x01
     38c:	80 83       	st	Z, r24
     38e:	81 e1       	ldi	r24, 0x11	; 17
     390:	91 e0       	ldi	r25, 0x01	; 1
     392:	93 83       	std	Z+3, r25	; 0x03
     394:	82 83       	std	Z+2, r24	; 0x02
     396:	8a e3       	ldi	r24, 0x3A	; 58
     398:	91 e0       	ldi	r25, 0x01	; 1
     39a:	95 83       	std	Z+5, r25	; 0x05
     39c:	84 83       	std	Z+4, r24	; 0x04
     39e:	83 e6       	ldi	r24, 0x63	; 99
     3a0:	91 e0       	ldi	r25, 0x01	; 1
     3a2:	97 83       	std	Z+7, r25	; 0x07
     3a4:	86 83       	std	Z+6, r24	; 0x06
     3a6:	8c e8       	ldi	r24, 0x8C	; 140
     3a8:	91 e0       	ldi	r25, 0x01	; 1
     3aa:	91 87       	std	Z+9, r25	; 0x09
     3ac:	80 87       	std	Z+8, r24	; 0x08
}
     3ae:	cf 01       	movw	r24, r30
     3b0:	08 95       	ret

000003b2 <TIMER_COUNTER1_start>:
	timer0.compareB=TIMER_COUNTER0_compareB;
	timer0.start=TIMER_COUNTER0_start;
	timer0.stop=TIMER_COUNTER0_stop;

	return timer0;
}
     3b2:	20 91 5e 01 	lds	r18, 0x015E	; 0x80015e <timer1_state>
     3b6:	21 11       	cpse	r18, r1
     3b8:	37 c0       	rjmp	.+110    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     3ba:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     3be:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     3c2:	88 30       	cpi	r24, 0x08	; 8
     3c4:	91 05       	cpc	r25, r1
     3c6:	b1 f0       	breq	.+44     	; 0x3f4 <TIMER_COUNTER1_start+0x42>
     3c8:	48 f4       	brcc	.+18     	; 0x3dc <TIMER_COUNTER1_start+0x2a>
     3ca:	83 30       	cpi	r24, 0x03	; 3
     3cc:	91 05       	cpc	r25, r1
     3ce:	d1 f0       	breq	.+52     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     3d0:	85 30       	cpi	r24, 0x05	; 5
     3d2:	91 05       	cpc	r25, r1
     3d4:	c9 f0       	breq	.+50     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     3d6:	01 97       	sbiw	r24, 0x01	; 1
     3d8:	c9 f4       	brne	.+50     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     3da:	1a c0       	rjmp	.+52     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     3dc:	81 15       	cp	r24, r1
     3de:	21 e0       	ldi	r18, 0x01	; 1
     3e0:	92 07       	cpc	r25, r18
     3e2:	61 f0       	breq	.+24     	; 0x3fc <TIMER_COUNTER1_start+0x4a>
     3e4:	81 15       	cp	r24, r1
     3e6:	24 e0       	ldi	r18, 0x04	; 4
     3e8:	92 07       	cpc	r25, r18
     3ea:	51 f0       	breq	.+20     	; 0x400 <__LOCK_REGION_LENGTH__>
     3ec:	80 34       	cpi	r24, 0x40	; 64
     3ee:	91 05       	cpc	r25, r1
     3f0:	69 f4       	brne	.+26     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <TIMER_COUNTER1_start+0x46>
     3f4:	92 e0       	ldi	r25, 0x02	; 2
     3f6:	0d c0       	rjmp	.+26     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     3f8:	93 e0       	ldi	r25, 0x03	; 3
     3fa:	0b c0       	rjmp	.+22     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     3fc:	94 e0       	ldi	r25, 0x04	; 4
     3fe:	09 c0       	rjmp	.+18     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     400:	95 e0       	ldi	r25, 0x05	; 5
     402:	07 c0       	rjmp	.+14     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     404:	96 e0       	ldi	r25, 0x06	; 6
     406:	05 c0       	rjmp	.+10     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     408:	97 e0       	ldi	r25, 0x07	; 7
     40a:	03 c0       	rjmp	.+6      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     40c:	95 e0       	ldi	r25, 0x05	; 5
     40e:	01 c0       	rjmp	.+2      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     410:	91 e0       	ldi	r25, 0x01	; 1
     412:	e1 e8       	ldi	r30, 0x81	; 129
     414:	f0 e0       	ldi	r31, 0x00	; 0
     416:	80 81       	ld	r24, Z
     418:	89 2b       	or	r24, r25
     41a:	80 83       	st	Z, r24
     41c:	8f b7       	in	r24, 0x3f	; 63
     41e:	80 68       	ori	r24, 0x80	; 128
     420:	8f bf       	out	0x3f, r24	; 63
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <timer1_state>
     428:	08 95       	ret

0000042a <TIMER_COUNTER1_compoutmodeA>:
     42a:	e0 e8       	ldi	r30, 0x80	; 128
     42c:	f0 e0       	ldi	r31, 0x00	; 0
     42e:	90 81       	ld	r25, Z
     430:	9f 73       	andi	r25, 0x3F	; 63
     432:	90 83       	st	Z, r25
     434:	82 30       	cpi	r24, 0x02	; 2
     436:	41 f0       	breq	.+16     	; 0x448 <TIMER_COUNTER1_compoutmodeA+0x1e>
     438:	83 30       	cpi	r24, 0x03	; 3
     43a:	61 f0       	breq	.+24     	; 0x454 <TIMER_COUNTER1_compoutmodeA+0x2a>
     43c:	81 30       	cpi	r24, 0x01	; 1
     43e:	79 f4       	brne	.+30     	; 0x45e <TIMER_COUNTER1_compoutmodeA+0x34>
     440:	80 81       	ld	r24, Z
     442:	80 64       	ori	r24, 0x40	; 64
     444:	80 83       	st	Z, r24
     446:	08 95       	ret
     448:	e0 e8       	ldi	r30, 0x80	; 128
     44a:	f0 e0       	ldi	r31, 0x00	; 0
     44c:	80 81       	ld	r24, Z
     44e:	80 68       	ori	r24, 0x80	; 128
     450:	80 83       	st	Z, r24
     452:	08 95       	ret
     454:	e0 e8       	ldi	r30, 0x80	; 128
     456:	f0 e0       	ldi	r31, 0x00	; 0
     458:	80 81       	ld	r24, Z
     45a:	80 6c       	ori	r24, 0xC0	; 192
     45c:	80 83       	st	Z, r24
     45e:	08 95       	ret

00000460 <TIMER_COUNTER1_compoutmodeB>:
     460:	e0 e8       	ldi	r30, 0x80	; 128
     462:	f0 e0       	ldi	r31, 0x00	; 0
     464:	90 81       	ld	r25, Z
     466:	9f 7c       	andi	r25, 0xCF	; 207
     468:	90 83       	st	Z, r25
     46a:	82 30       	cpi	r24, 0x02	; 2
     46c:	41 f0       	breq	.+16     	; 0x47e <TIMER_COUNTER1_compoutmodeB+0x1e>
     46e:	83 30       	cpi	r24, 0x03	; 3
     470:	61 f0       	breq	.+24     	; 0x48a <TIMER_COUNTER1_compoutmodeB+0x2a>
     472:	81 30       	cpi	r24, 0x01	; 1
     474:	79 f4       	brne	.+30     	; 0x494 <TIMER_COUNTER1_compoutmodeB+0x34>
     476:	80 81       	ld	r24, Z
     478:	80 61       	ori	r24, 0x10	; 16
     47a:	80 83       	st	Z, r24
     47c:	08 95       	ret
     47e:	e0 e8       	ldi	r30, 0x80	; 128
     480:	f0 e0       	ldi	r31, 0x00	; 0
     482:	80 81       	ld	r24, Z
     484:	80 62       	ori	r24, 0x20	; 32
     486:	80 83       	st	Z, r24
     488:	08 95       	ret
     48a:	e0 e8       	ldi	r30, 0x80	; 128
     48c:	f0 e0       	ldi	r31, 0x00	; 0
     48e:	80 81       	ld	r24, Z
     490:	80 63       	ori	r24, 0x30	; 48
     492:	80 83       	st	Z, r24
     494:	08 95       	ret

00000496 <TIMER_COUNTER1_compareA>:
     496:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     49a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     49e:	08 95       	ret

000004a0 <TIMER_COUNTER1_compareB>:
     4a0:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     4a4:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     4a8:	08 95       	ret

000004aa <TIMER_COUNTER1_stop>:
     4aa:	e1 e8       	ldi	r30, 0x81	; 129
     4ac:	f0 e0       	ldi	r31, 0x00	; 0
     4ae:	80 81       	ld	r24, Z
     4b0:	88 7f       	andi	r24, 0xF8	; 248
     4b2:	80 83       	st	Z, r24
     4b4:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <timer1_state>
     4b8:	08 95       	ret

000004ba <TIMER_COUNTER1enable>:
	TIMER_COUNTER0B_CONTROL_REGISTER&=~((1<<CS02) | (1<<CS01) | (1<<CS00)); // No clock source. (Timer/Counter stopped)
	timer0_state=0;
}
/*****************************************************************************************/
TIMER_COUNTER1 TIMER_COUNTER1enable(uint8_t wavegenmode, uint8_t interrupt)
{
     4ba:	0f 93       	push	r16
     4bc:	1f 93       	push	r17
     4be:	cf 93       	push	r28
     4c0:	df 93       	push	r29
     4c2:	dc 01       	movw	r26, r24
	TIMER_COUNTER1 timer1;
	timer1_state=0;
     4c4:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <timer1_state>

	TIMER_COUNTER1A_COMPARE_REGISTER=0XFFFF;
     4c8:	8f ef       	ldi	r24, 0xFF	; 255
     4ca:	9f ef       	ldi	r25, 0xFF	; 255
     4cc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     4d0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	TIMER_COUNTER1B_COMPARE_REGISTER=0XFFFF;
     4d4:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     4d8:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
	TIMER_COUNTER1A_CONTROL_REGISTER&=~((1<<WGM11) | (1<<WGM10));
     4dc:	c0 e8       	ldi	r28, 0x80	; 128
     4de:	d0 e0       	ldi	r29, 0x00	; 0
     4e0:	88 81       	ld	r24, Y
     4e2:	8c 7f       	andi	r24, 0xFC	; 252
     4e4:	88 83       	st	Y, r24
	TIMER_COUNTER1B_CONTROL_REGISTER&=~((1<<WGM13) | (1<<WGM12));
     4e6:	c1 e8       	ldi	r28, 0x81	; 129
     4e8:	d0 e0       	ldi	r29, 0x00	; 0
     4ea:	88 81       	ld	r24, Y
     4ec:	87 7e       	andi	r24, 0xE7	; 231
     4ee:	88 83       	st	Y, r24
	switch(wavegenmode){
     4f0:	06 2f       	mov	r16, r22
     4f2:	10 e0       	ldi	r17, 0x00	; 0
     4f4:	f8 01       	movw	r30, r16
     4f6:	31 97       	sbiw	r30, 0x01	; 1
     4f8:	ef 30       	cpi	r30, 0x0F	; 15
     4fa:	f1 05       	cpc	r31, r1
     4fc:	08 f0       	brcs	.+2      	; 0x500 <TIMER_COUNTER1enable+0x46>
     4fe:	8e c0       	rjmp	.+284    	; 0x61c <TIMER_COUNTER1enable+0x162>
     500:	e2 5c       	subi	r30, 0xC2	; 194
     502:	ff 4f       	sbci	r31, 0xFF	; 255
     504:	0c 94 08 12 	jmp	0x2410	; 0x2410 <__tablejump2__>
		case 1: // PWM, Phase Correct, 8-bit
			TIMER_COUNTER1A_CONTROL_REGISTER|=(1<<WGM10);
     508:	e0 e8       	ldi	r30, 0x80	; 128
     50a:	f0 e0       	ldi	r31, 0x00	; 0
     50c:	80 81       	ld	r24, Z
     50e:	81 60       	ori	r24, 0x01	; 1
     510:	80 83       	st	Z, r24
			break;
     512:	84 c0       	rjmp	.+264    	; 0x61c <TIMER_COUNTER1enable+0x162>
		case 2:	// PWM, Phase Correct, 9-bit
			TIMER_COUNTER1A_CONTROL_REGISTER|=(1<<WGM11);
     514:	e0 e8       	ldi	r30, 0x80	; 128
     516:	f0 e0       	ldi	r31, 0x00	; 0
     518:	80 81       	ld	r24, Z
     51a:	82 60       	ori	r24, 0x02	; 2
     51c:	80 83       	st	Z, r24
			break;
     51e:	7e c0       	rjmp	.+252    	; 0x61c <TIMER_COUNTER1enable+0x162>
		case 3:	// PWM, Phase Correct, 10-bit
			TIMER_COUNTER1A_CONTROL_REGISTER|=((1<<WGM11) | (1<<WGM10));
     520:	e0 e8       	ldi	r30, 0x80	; 128
     522:	f0 e0       	ldi	r31, 0x00	; 0
     524:	80 81       	ld	r24, Z
     526:	83 60       	ori	r24, 0x03	; 3
     528:	80 83       	st	Z, r24
			break;
     52a:	78 c0       	rjmp	.+240    	; 0x61c <TIMER_COUNTER1enable+0x162>
		case 4:	// CTC OCR
			TIMER_COUNTER1B_CONTROL_REGISTER|=(1<<WGM12);
     52c:	e1 e8       	ldi	r30, 0x81	; 129
     52e:	f0 e0       	ldi	r31, 0x00	; 0
     530:	80 81       	ld	r24, Z
     532:	88 60       	ori	r24, 0x08	; 8
     534:	80 83       	st	Z, r24
			break;
     536:	72 c0       	rjmp	.+228    	; 0x61c <TIMER_COUNTER1enable+0x162>
		case 5:	// Fast PWM, 8-bit
			TIMER_COUNTER1A_CONTROL_REGISTER|=(1<<WGM10);
     538:	e0 e8       	ldi	r30, 0x80	; 128
     53a:	f0 e0       	ldi	r31, 0x00	; 0
     53c:	80 81       	ld	r24, Z
     53e:	81 60       	ori	r24, 0x01	; 1
     540:	80 83       	st	Z, r24
			TIMER_COUNTER1B_CONTROL_REGISTER|=(1<<WGM12);
     542:	e1 e8       	ldi	r30, 0x81	; 129
     544:	f0 e0       	ldi	r31, 0x00	; 0
     546:	80 81       	ld	r24, Z
     548:	88 60       	ori	r24, 0x08	; 8
     54a:	80 83       	st	Z, r24
			break;
     54c:	67 c0       	rjmp	.+206    	; 0x61c <TIMER_COUNTER1enable+0x162>
		case 6:	// Fast PWM, 9-bit
			TIMER_COUNTER1A_CONTROL_REGISTER|=(1<<WGM11);
     54e:	e0 e8       	ldi	r30, 0x80	; 128
     550:	f0 e0       	ldi	r31, 0x00	; 0
     552:	80 81       	ld	r24, Z
     554:	82 60       	ori	r24, 0x02	; 2
     556:	80 83       	st	Z, r24
			TIMER_COUNTER1B_CONTROL_REGISTER|=(1<<WGM12);
     558:	e1 e8       	ldi	r30, 0x81	; 129
     55a:	f0 e0       	ldi	r31, 0x00	; 0
     55c:	80 81       	ld	r24, Z
     55e:	88 60       	ori	r24, 0x08	; 8
     560:	80 83       	st	Z, r24
			break;
     562:	5c c0       	rjmp	.+184    	; 0x61c <TIMER_COUNTER1enable+0x162>
		case 7:	// Fast PWM, 10-bit
			TIMER_COUNTER1A_CONTROL_REGISTER|=((1<<WGM11) | (1<<WGM10));
     564:	e0 e8       	ldi	r30, 0x80	; 128
     566:	f0 e0       	ldi	r31, 0x00	; 0
     568:	80 81       	ld	r24, Z
     56a:	83 60       	ori	r24, 0x03	; 3
     56c:	80 83       	st	Z, r24
			TIMER_COUNTER1B_CONTROL_REGISTER|=(1<<WGM12);
     56e:	e1 e8       	ldi	r30, 0x81	; 129
     570:	f0 e0       	ldi	r31, 0x00	; 0
     572:	80 81       	ld	r24, Z
     574:	88 60       	ori	r24, 0x08	; 8
     576:	80 83       	st	Z, r24
			break;
     578:	51 c0       	rjmp	.+162    	; 0x61c <TIMER_COUNTER1enable+0x162>
		case 8:	// PWM, Phase and Frequency Correct
			TIMER_COUNTER1B_CONTROL_REGISTER|=(1<<WGM13);
     57a:	e1 e8       	ldi	r30, 0x81	; 129
     57c:	f0 e0       	ldi	r31, 0x00	; 0
     57e:	80 81       	ld	r24, Z
     580:	80 61       	ori	r24, 0x10	; 16
     582:	80 83       	st	Z, r24
			break;
     584:	4b c0       	rjmp	.+150    	; 0x61c <TIMER_COUNTER1enable+0x162>
		case 9:	// PWM, Phase and Frequency Correct
			TIMER_COUNTER1C_CONTROL_REGISTER&=~((1<<FOC1A) | (1<<FOC1B));
     586:	e2 e8       	ldi	r30, 0x82	; 130
     588:	f0 e0       	ldi	r31, 0x00	; 0
     58a:	80 81       	ld	r24, Z
     58c:	8f 73       	andi	r24, 0x3F	; 63
     58e:	80 83       	st	Z, r24
			TIMER_COUNTER1A_CONTROL_REGISTER|=(1<<WGM10);
     590:	e0 e8       	ldi	r30, 0x80	; 128
     592:	f0 e0       	ldi	r31, 0x00	; 0
     594:	80 81       	ld	r24, Z
     596:	81 60       	ori	r24, 0x01	; 1
     598:	80 83       	st	Z, r24
			TIMER_COUNTER1B_CONTROL_REGISTER|=(1<<WGM13);
     59a:	e1 e8       	ldi	r30, 0x81	; 129
     59c:	f0 e0       	ldi	r31, 0x00	; 0
     59e:	80 81       	ld	r24, Z
     5a0:	80 61       	ori	r24, 0x10	; 16
     5a2:	80 83       	st	Z, r24
			break;
     5a4:	3b c0       	rjmp	.+118    	; 0x61c <TIMER_COUNTER1enable+0x162>
		case 10: // PWM, Phase Correct
			TIMER_COUNTER1A_CONTROL_REGISTER|=(1<<WGM11);
     5a6:	e0 e8       	ldi	r30, 0x80	; 128
     5a8:	f0 e0       	ldi	r31, 0x00	; 0
     5aa:	80 81       	ld	r24, Z
     5ac:	82 60       	ori	r24, 0x02	; 2
     5ae:	80 83       	st	Z, r24
			TIMER_COUNTER1B_CONTROL_REGISTER|=(1<<WGM13);
     5b0:	e1 e8       	ldi	r30, 0x81	; 129
     5b2:	f0 e0       	ldi	r31, 0x00	; 0
     5b4:	80 81       	ld	r24, Z
     5b6:	80 61       	ori	r24, 0x10	; 16
     5b8:	80 83       	st	Z, r24
			break;
     5ba:	30 c0       	rjmp	.+96     	; 0x61c <TIMER_COUNTER1enable+0x162>
		case 11: // PWM, Phase Correct
			TIMER_COUNTER1C_CONTROL_REGISTER&=~((1<<FOC1A) | (1<<FOC1B));
     5bc:	e2 e8       	ldi	r30, 0x82	; 130
     5be:	f0 e0       	ldi	r31, 0x00	; 0
     5c0:	80 81       	ld	r24, Z
     5c2:	8f 73       	andi	r24, 0x3F	; 63
     5c4:	80 83       	st	Z, r24
			TIMER_COUNTER1A_CONTROL_REGISTER|=((1<<WGM11) | (1<<WGM10));
     5c6:	e0 e8       	ldi	r30, 0x80	; 128
     5c8:	f0 e0       	ldi	r31, 0x00	; 0
     5ca:	80 81       	ld	r24, Z
     5cc:	83 60       	ori	r24, 0x03	; 3
     5ce:	80 83       	st	Z, r24
			TIMER_COUNTER1B_CONTROL_REGISTER|=(1<<WGM13);
     5d0:	e1 e8       	ldi	r30, 0x81	; 129
     5d2:	f0 e0       	ldi	r31, 0x00	; 0
     5d4:	80 81       	ld	r24, Z
     5d6:	80 61       	ori	r24, 0x10	; 16
     5d8:	80 83       	st	Z, r24
			break;
     5da:	20 c0       	rjmp	.+64     	; 0x61c <TIMER_COUNTER1enable+0x162>
		case 12: // CTC ICR
			TIMER_COUNTER1B_CONTROL_REGISTER|=((1<<WGM13) | (1<<WGM12));
     5dc:	e1 e8       	ldi	r30, 0x81	; 129
     5de:	f0 e0       	ldi	r31, 0x00	; 0
     5e0:	80 81       	ld	r24, Z
     5e2:	88 61       	ori	r24, 0x18	; 24
     5e4:	80 83       	st	Z, r24
			break;
     5e6:	1a c0       	rjmp	.+52     	; 0x61c <TIMER_COUNTER1enable+0x162>
		case 14: // Fast PWM
			TIMER_COUNTER1A_CONTROL_REGISTER|=(1<<WGM11);
     5e8:	e0 e8       	ldi	r30, 0x80	; 128
     5ea:	f0 e0       	ldi	r31, 0x00	; 0
     5ec:	80 81       	ld	r24, Z
     5ee:	82 60       	ori	r24, 0x02	; 2
     5f0:	80 83       	st	Z, r24
			TIMER_COUNTER1B_CONTROL_REGISTER|=((1<<WGM13) | (1<<WGM12));
     5f2:	e1 e8       	ldi	r30, 0x81	; 129
     5f4:	f0 e0       	ldi	r31, 0x00	; 0
     5f6:	80 81       	ld	r24, Z
     5f8:	88 61       	ori	r24, 0x18	; 24
     5fa:	80 83       	st	Z, r24
			break;
     5fc:	0f c0       	rjmp	.+30     	; 0x61c <TIMER_COUNTER1enable+0x162>
		case 15: // Fast PWM
			TIMER_COUNTER1C_CONTROL_REGISTER&=~((1<<FOC1A) | (1<<FOC1B));
     5fe:	e2 e8       	ldi	r30, 0x82	; 130
     600:	f0 e0       	ldi	r31, 0x00	; 0
     602:	80 81       	ld	r24, Z
     604:	8f 73       	andi	r24, 0x3F	; 63
     606:	80 83       	st	Z, r24
			TIMER_COUNTER1A_CONTROL_REGISTER|=((1<<WGM11) | (1<<WGM10));
     608:	e0 e8       	ldi	r30, 0x80	; 128
     60a:	f0 e0       	ldi	r31, 0x00	; 0
     60c:	80 81       	ld	r24, Z
     60e:	83 60       	ori	r24, 0x03	; 3
     610:	80 83       	st	Z, r24
			TIMER_COUNTER1B_CONTROL_REGISTER|=((1<<WGM13) | (1<<WGM12));
     612:	e1 e8       	ldi	r30, 0x81	; 129
     614:	f0 e0       	ldi	r31, 0x00	; 0
     616:	80 81       	ld	r24, Z
     618:	88 61       	ori	r24, 0x18	; 24
     61a:	80 83       	st	Z, r24
			break;
		default: // Normal
			break;
	}
	TIMER_COUNTER1_INTERRUPT_MASK_REGISTER&=~((1<<ICIE1) | (1<<OCIE1A) | (1<<OCIE1B) | (1<<TOIE1));
     61c:	ef e6       	ldi	r30, 0x6F	; 111
     61e:	f0 e0       	ldi	r31, 0x00	; 0
     620:	80 81       	ld	r24, Z
     622:	88 7d       	andi	r24, 0xD8	; 216
     624:	80 83       	st	Z, r24
	switch(interrupt){
     626:	50 e0       	ldi	r21, 0x00	; 0
     628:	fa 01       	movw	r30, r20
     62a:	31 97       	sbiw	r30, 0x01	; 1
     62c:	e9 30       	cpi	r30, 0x09	; 9
     62e:	f1 05       	cpc	r31, r1
     630:	98 f5       	brcc	.+102    	; 0x698 <TIMER_COUNTER1enable+0x1de>
     632:	e3 5b       	subi	r30, 0xB3	; 179
     634:	ff 4f       	sbci	r31, 0xFF	; 255
     636:	0c 94 08 12 	jmp	0x2410	; 0x2410 <__tablejump2__>
		case 1:
			TIMER_COUNTER1_INTERRUPT_MASK_REGISTER|=(1<<TOIE1);
     63a:	ef e6       	ldi	r30, 0x6F	; 111
     63c:	f0 e0       	ldi	r31, 0x00	; 0
     63e:	80 81       	ld	r24, Z
     640:	81 60       	ori	r24, 0x01	; 1
     642:	80 83       	st	Z, r24
			break;
     644:	29 c0       	rjmp	.+82     	; 0x698 <TIMER_COUNTER1enable+0x1de>
		case 2:
			TIMER_COUNTER1_INTERRUPT_MASK_REGISTER|=(1<<OCIE1B);
     646:	ef e6       	ldi	r30, 0x6F	; 111
     648:	f0 e0       	ldi	r31, 0x00	; 0
     64a:	80 81       	ld	r24, Z
     64c:	84 60       	ori	r24, 0x04	; 4
     64e:	80 83       	st	Z, r24
			break;
     650:	23 c0       	rjmp	.+70     	; 0x698 <TIMER_COUNTER1enable+0x1de>
		case 3:
			TIMER_COUNTER1_INTERRUPT_MASK_REGISTER|=(1<<OCIE1A);
     652:	ef e6       	ldi	r30, 0x6F	; 111
     654:	f0 e0       	ldi	r31, 0x00	; 0
     656:	80 81       	ld	r24, Z
     658:	82 60       	ori	r24, 0x02	; 2
     65a:	80 83       	st	Z, r24
		break;
     65c:	1d c0       	rjmp	.+58     	; 0x698 <TIMER_COUNTER1enable+0x1de>
			case 4:
			TIMER_COUNTER1_INTERRUPT_MASK_REGISTER|=(1<<ICIE1);
     65e:	ef e6       	ldi	r30, 0x6F	; 111
     660:	f0 e0       	ldi	r31, 0x00	; 0
     662:	80 81       	ld	r24, Z
     664:	80 62       	ori	r24, 0x20	; 32
     666:	80 83       	st	Z, r24
		break;
     668:	17 c0       	rjmp	.+46     	; 0x698 <TIMER_COUNTER1enable+0x1de>
			case 6:
			TIMER_COUNTER1_INTERRUPT_MASK_REGISTER|=((1<<OCIE1B) | (1<<TOIE1));
     66a:	ef e6       	ldi	r30, 0x6F	; 111
     66c:	f0 e0       	ldi	r31, 0x00	; 0
     66e:	80 81       	ld	r24, Z
     670:	85 60       	ori	r24, 0x05	; 5
     672:	80 83       	st	Z, r24
			break;
     674:	11 c0       	rjmp	.+34     	; 0x698 <TIMER_COUNTER1enable+0x1de>
		case 7:
			TIMER_COUNTER1_INTERRUPT_MASK_REGISTER|=((1<<OCIE1A) | (1<<TOIE1));
     676:	ef e6       	ldi	r30, 0x6F	; 111
     678:	f0 e0       	ldi	r31, 0x00	; 0
     67a:	80 81       	ld	r24, Z
     67c:	83 60       	ori	r24, 0x03	; 3
     67e:	80 83       	st	Z, r24
			break;
     680:	0b c0       	rjmp	.+22     	; 0x698 <TIMER_COUNTER1enable+0x1de>
		case 8:
			TIMER_COUNTER1_INTERRUPT_MASK_REGISTER|=((1<<OCIE1A) | (1<<OCIE1B));
     682:	ef e6       	ldi	r30, 0x6F	; 111
     684:	f0 e0       	ldi	r31, 0x00	; 0
     686:	80 81       	ld	r24, Z
     688:	86 60       	ori	r24, 0x06	; 6
     68a:	80 83       	st	Z, r24
			break;
     68c:	05 c0       	rjmp	.+10     	; 0x698 <TIMER_COUNTER1enable+0x1de>
		case 9:
			TIMER_COUNTER1_INTERRUPT_MASK_REGISTER|=((1<<OCIE1A) | (1<<OCIE1B) | (1<<TOIE1));
     68e:	ef e6       	ldi	r30, 0x6F	; 111
     690:	f0 e0       	ldi	r31, 0x00	; 0
     692:	80 81       	ld	r24, Z
     694:	87 60       	ori	r24, 0x07	; 7
     696:	80 83       	st	Z, r24
	timer1.compareA=TIMER_COUNTER1_compareA;
	timer1.compareB=TIMER_COUNTER1_compareB;
	timer1.start=TIMER_COUNTER1_start;
	timer1.stop=TIMER_COUNTER1_stop;

	return timer1;
     698:	85 e1       	ldi	r24, 0x15	; 21
     69a:	92 e0       	ldi	r25, 0x02	; 2
     69c:	11 96       	adiw	r26, 0x01	; 1
     69e:	9c 93       	st	X, r25
     6a0:	8e 93       	st	-X, r24
     6a2:	80 e3       	ldi	r24, 0x30	; 48
     6a4:	92 e0       	ldi	r25, 0x02	; 2
     6a6:	13 96       	adiw	r26, 0x03	; 3
     6a8:	9c 93       	st	X, r25
     6aa:	8e 93       	st	-X, r24
     6ac:	12 97       	sbiw	r26, 0x02	; 2
     6ae:	8b e4       	ldi	r24, 0x4B	; 75
     6b0:	92 e0       	ldi	r25, 0x02	; 2
     6b2:	15 96       	adiw	r26, 0x05	; 5
     6b4:	9c 93       	st	X, r25
     6b6:	8e 93       	st	-X, r24
     6b8:	14 97       	sbiw	r26, 0x04	; 4
     6ba:	80 e5       	ldi	r24, 0x50	; 80
     6bc:	92 e0       	ldi	r25, 0x02	; 2
     6be:	17 96       	adiw	r26, 0x07	; 7
     6c0:	9c 93       	st	X, r25
     6c2:	8e 93       	st	-X, r24
     6c4:	16 97       	sbiw	r26, 0x06	; 6
     6c6:	89 ed       	ldi	r24, 0xD9	; 217
     6c8:	91 e0       	ldi	r25, 0x01	; 1
     6ca:	19 96       	adiw	r26, 0x09	; 9
     6cc:	9c 93       	st	X, r25
     6ce:	8e 93       	st	-X, r24
     6d0:	18 97       	sbiw	r26, 0x08	; 8
     6d2:	85 e5       	ldi	r24, 0x55	; 85
     6d4:	92 e0       	ldi	r25, 0x02	; 2
     6d6:	1b 96       	adiw	r26, 0x0b	; 11
     6d8:	9c 93       	st	X, r25
     6da:	8e 93       	st	-X, r24
     6dc:	1a 97       	sbiw	r26, 0x0a	; 10
}
     6de:	cd 01       	movw	r24, r26
     6e0:	df 91       	pop	r29
     6e2:	cf 91       	pop	r28
     6e4:	1f 91       	pop	r17
     6e6:	0f 91       	pop	r16
     6e8:	08 95       	ret

000006ea <EEPROMenable>:
** procedure and function header
*/
/*
** procedure and function
*/
EEPROM EEPROMenable(void){
     6ea:	fc 01       	movw	r30, r24
	eeprom.write_float=eeprom_write_float;
	eeprom.update_float=eeprom_update_float;
	eeprom.read_block=eeprom_read_block;
	eeprom.write_block=eeprom_write_block;
	eeprom.update_block=eeprom_update_block;
	return eeprom;
     6ec:	8e e6       	ldi	r24, 0x6E	; 110
     6ee:	92 e1       	ldi	r25, 0x12	; 18
     6f0:	91 83       	std	Z+1, r25	; 0x01
     6f2:	80 83       	st	Z, r24
     6f4:	8a eb       	ldi	r24, 0xBA	; 186
     6f6:	92 e1       	ldi	r25, 0x12	; 18
     6f8:	93 83       	std	Z+3, r25	; 0x03
     6fa:	82 83       	std	Z+2, r24	; 0x02
     6fc:	8c e8       	ldi	r24, 0x8C	; 140
     6fe:	92 e1       	ldi	r25, 0x12	; 18
     700:	95 83       	std	Z+5, r25	; 0x05
     702:	84 83       	std	Z+4, r24	; 0x04
     704:	86 e7       	ldi	r24, 0x76	; 118
     706:	92 e1       	ldi	r25, 0x12	; 18
     708:	97 83       	std	Z+7, r25	; 0x07
     70a:	86 83       	std	Z+6, r24	; 0x06
     70c:	80 ed       	ldi	r24, 0xD0	; 208
     70e:	92 e1       	ldi	r25, 0x12	; 18
     710:	91 87       	std	Z+9, r25	; 0x09
     712:	80 87       	std	Z+8, r24	; 0x08
     714:	8a ea       	ldi	r24, 0xAA	; 170
     716:	92 e1       	ldi	r25, 0x12	; 18
     718:	93 87       	std	Z+11, r25	; 0x0b
     71a:	82 87       	std	Z+10, r24	; 0x0a
     71c:	88 ec       	ldi	r24, 0xC8	; 200
     71e:	92 e1       	ldi	r25, 0x12	; 18
     720:	97 87       	std	Z+15, r25	; 0x0f
     722:	86 87       	std	Z+14, r24	; 0x0e
     724:	88 ec       	ldi	r24, 0xC8	; 200
     726:	92 e1       	ldi	r25, 0x12	; 18
     728:	95 8b       	std	Z+21, r25	; 0x15
     72a:	84 8b       	std	Z+20, r24	; 0x14
     72c:	8e e9       	ldi	r24, 0x9E	; 158
     72e:	92 e1       	ldi	r25, 0x12	; 18
     730:	97 8b       	std	Z+23, r25	; 0x17
     732:	86 8b       	std	Z+22, r24	; 0x16
     734:	8e e5       	ldi	r24, 0x5E	; 94
     736:	92 e1       	ldi	r25, 0x12	; 18
     738:	91 8f       	std	Z+25, r25	; 0x19
     73a:	80 8f       	std	Z+24, r24	; 0x18
     73c:	80 eb       	ldi	r24, 0xB0	; 176
     73e:	92 e1       	ldi	r25, 0x12	; 18
     740:	93 8f       	std	Z+27, r25	; 0x1b
     742:	82 8f       	std	Z+26, r24	; 0x1a
     744:	8c e7       	ldi	r24, 0x7C	; 124
     746:	92 e1       	ldi	r25, 0x12	; 18
     748:	95 8f       	std	Z+29, r25	; 0x1d
     74a:	84 8f       	std	Z+28, r24	; 0x1c
}
     74c:	cf 01       	movw	r24, r30
     74e:	08 95       	ret

00000750 <FUNCpinmatch>:
}
//pinmatch
uint8_t FUNCpinmatch(uint8_t match, uint8_t pin, uint8_t HL)
{
	uint8_t result;
	result=match&pin;
     750:	68 23       	and	r22, r24
	if(HL){
     752:	44 23       	and	r20, r20
     754:	21 f0       	breq	.+8      	; 0x75e <FUNCpinmatch+0xe>
		if(result==match);
     756:	86 17       	cp	r24, r22
     758:	21 f0       	breq	.+8      	; 0x762 <FUNCpinmatch+0x12>
		else
			result=0;
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	08 95       	ret
	}else{
		if(result)
     75e:	61 11       	cpse	r22, r1
			result=0;
     760:	80 e0       	ldi	r24, 0x00	; 0
		else
			result=match;
	}
	return result;
}
     762:	08 95       	ret

00000764 <FUNChmerge>:
// hmerge
uint8_t FUNChmerge(uint8_t X, uint8_t Y)
{
	return (X | Y);
}
     764:	86 2b       	or	r24, r22
     766:	08 95       	ret

00000768 <FUNClmerge>:
// lmerge
uint8_t FUNClmerge(uint8_t X, uint8_t Y)
{
	return (X & Y);
}
     768:	86 23       	and	r24, r22
     76a:	08 95       	ret

0000076c <FUNChh>:
uint8_t FUNChh(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi&xf;
	return i;
}
     76c:	86 23       	and	r24, r22
     76e:	08 95       	ret

00000770 <FUNCll>:
// ll
uint8_t FUNCll(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi|xf;
	return ~i;
     770:	86 2b       	or	r24, r22
}
     772:	80 95       	com	r24
     774:	08 95       	ret

00000776 <FUNClh>:
// lh
uint8_t FUNClh(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi^xf;
     776:	86 27       	eor	r24, r22
	i&=xf;
	return i;
}
     778:	86 23       	and	r24, r22
     77a:	08 95       	ret

0000077c <FUNChl>:
// hl
uint8_t FUNChl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xf^xi;
     77c:	60 95       	com	r22
	i&=xi;
	return i;
}
     77e:	86 23       	and	r24, r22
     780:	08 95       	ret

00000782 <FUNCdiff>:
// diff
uint8_t FUNCdiff(uint8_t xi, uint8_t xf)
{
	return xf^xi;
}
     782:	86 27       	eor	r24, r22
     784:	08 95       	ret

00000786 <FUNCswap>:
// interchange *px and *py
void FUNCswap(long *px, long *py)
{
     786:	cf 92       	push	r12
     788:	df 92       	push	r13
     78a:	ef 92       	push	r14
     78c:	ff 92       	push	r15
     78e:	0f 93       	push	r16
     790:	1f 93       	push	r17
	long temp;
	temp = *px;
     792:	fc 01       	movw	r30, r24
     794:	00 81       	ld	r16, Z
     796:	11 81       	ldd	r17, Z+1	; 0x01
     798:	22 81       	ldd	r18, Z+2	; 0x02
     79a:	33 81       	ldd	r19, Z+3	; 0x03
	*px = *py;
     79c:	fb 01       	movw	r30, r22
     79e:	c0 80       	ld	r12, Z
     7a0:	d1 80       	ldd	r13, Z+1	; 0x01
     7a2:	e2 80       	ldd	r14, Z+2	; 0x02
     7a4:	f3 80       	ldd	r15, Z+3	; 0x03
     7a6:	fc 01       	movw	r30, r24
     7a8:	c0 82       	st	Z, r12
     7aa:	d1 82       	std	Z+1, r13	; 0x01
     7ac:	e2 82       	std	Z+2, r14	; 0x02
     7ae:	f3 82       	std	Z+3, r15	; 0x03
	*py = temp;
     7b0:	fb 01       	movw	r30, r22
     7b2:	00 83       	st	Z, r16
     7b4:	11 83       	std	Z+1, r17	; 0x01
     7b6:	22 83       	std	Z+2, r18	; 0x02
     7b8:	33 83       	std	Z+3, r19	; 0x03
}
     7ba:	1f 91       	pop	r17
     7bc:	0f 91       	pop	r16
     7be:	ff 90       	pop	r15
     7c0:	ef 90       	pop	r14
     7c2:	df 90       	pop	r13
     7c4:	cf 90       	pop	r12
     7c6:	08 95       	ret

000007c8 <FUNCcopy>:
// copy: copy 'from' into 'to'; assume to is big enough
void FUNCcopy(char to[], char from[])
{
	int i;
	i = 0;
	while ((to[i] = from[i]) != '\0')
     7c8:	fb 01       	movw	r30, r22
     7ca:	20 81       	ld	r18, Z
     7cc:	fc 01       	movw	r30, r24
     7ce:	20 83       	st	Z, r18
     7d0:	22 23       	and	r18, r18
     7d2:	39 f0       	breq	.+14     	; 0x7e2 <FUNCcopy+0x1a>
     7d4:	db 01       	movw	r26, r22
     7d6:	11 96       	adiw	r26, 0x01	; 1
     7d8:	31 96       	adiw	r30, 0x01	; 1
     7da:	9d 91       	ld	r25, X+
     7dc:	91 93       	st	Z+, r25
     7de:	91 11       	cpse	r25, r1
     7e0:	fc cf       	rjmp	.-8      	; 0x7da <FUNCcopy+0x12>
     7e2:	08 95       	ret

000007e4 <FUNCsqueeze>:
		++i;
}
// squeeze: delete all c from s
void FUNCsqueeze(char s[], int c)
{
     7e4:	cf 93       	push	r28
     7e6:	df 93       	push	r29
     7e8:	ec 01       	movw	r28, r24
	int i, j;
	for (i = j = 0; s[i] != '\0'; i++)
     7ea:	98 81       	ld	r25, Y
     7ec:	99 23       	and	r25, r25
     7ee:	99 f0       	breq	.+38     	; 0x816 <FUNCsqueeze+0x32>
     7f0:	fe 01       	movw	r30, r28
     7f2:	31 96       	adiw	r30, 0x01	; 1
     7f4:	20 e0       	ldi	r18, 0x00	; 0
     7f6:	30 e0       	ldi	r19, 0x00	; 0
		if (s[i] != c)
     7f8:	49 2f       	mov	r20, r25
     7fa:	50 e0       	ldi	r21, 0x00	; 0
     7fc:	46 17       	cp	r20, r22
     7fe:	57 07       	cpc	r21, r23
     800:	31 f0       	breq	.+12     	; 0x80e <FUNCsqueeze+0x2a>
			s[j++] = s[i];
     802:	de 01       	movw	r26, r28
     804:	a2 0f       	add	r26, r18
     806:	b3 1f       	adc	r27, r19
     808:	9c 93       	st	X, r25
     80a:	2f 5f       	subi	r18, 0xFF	; 255
     80c:	3f 4f       	sbci	r19, 0xFF	; 255
}
// squeeze: delete all c from s
void FUNCsqueeze(char s[], int c)
{
	int i, j;
	for (i = j = 0; s[i] != '\0'; i++)
     80e:	91 91       	ld	r25, Z+
     810:	91 11       	cpse	r25, r1
     812:	f2 cf       	rjmp	.-28     	; 0x7f8 <FUNCsqueeze+0x14>
     814:	02 c0       	rjmp	.+4      	; 0x81a <FUNCsqueeze+0x36>
     816:	20 e0       	ldi	r18, 0x00	; 0
     818:	30 e0       	ldi	r19, 0x00	; 0
		if (s[i] != c)
			s[j++] = s[i];
		s[j] = '\0';
     81a:	fe 01       	movw	r30, r28
     81c:	e2 0f       	add	r30, r18
     81e:	f3 1f       	adc	r31, r19
     820:	10 82       	st	Z, r1
}
     822:	df 91       	pop	r29
     824:	cf 91       	pop	r28
     826:	08 95       	ret

00000828 <FUNCshellsort>:
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
     828:	2f 92       	push	r2
     82a:	3f 92       	push	r3
     82c:	4f 92       	push	r4
     82e:	5f 92       	push	r5
     830:	6f 92       	push	r6
     832:	7f 92       	push	r7
     834:	8f 92       	push	r8
     836:	9f 92       	push	r9
     838:	af 92       	push	r10
     83a:	bf 92       	push	r11
     83c:	cf 92       	push	r12
     83e:	df 92       	push	r13
     840:	ef 92       	push	r14
     842:	ff 92       	push	r15
     844:	0f 93       	push	r16
     846:	1f 93       	push	r17
     848:	cf 93       	push	r28
     84a:	df 93       	push	r29
     84c:	00 d0       	rcall	.+0      	; 0x84e <FUNCshellsort+0x26>
     84e:	00 d0       	rcall	.+0      	; 0x850 <FUNCshellsort+0x28>
     850:	cd b7       	in	r28, 0x3d	; 61
     852:	de b7       	in	r29, 0x3e	; 62
     854:	2c 01       	movw	r4, r24
     856:	1b 01       	movw	r2, r22
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
     858:	4b 01       	movw	r8, r22
     85a:	77 23       	and	r23, r23
     85c:	1c f4       	brge	.+6      	; 0x864 <FUNCshellsort+0x3c>
     85e:	2f ef       	ldi	r18, 0xFF	; 255
     860:	82 1a       	sub	r8, r18
     862:	92 0a       	sbc	r9, r18
     864:	95 94       	asr	r9
     866:	87 94       	ror	r8
     868:	18 14       	cp	r1, r8
     86a:	19 04       	cpc	r1, r9
     86c:	0c f4       	brge	.+2      	; 0x870 <FUNCshellsort+0x48>
     86e:	51 c0       	rjmp	.+162    	; 0x912 <__stack+0x13>
     870:	6a c0       	rjmp	.+212    	; 0x946 <__stack+0x47>
		for (i = gap; i < n; i++)
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
     872:	96 01       	movw	r18, r12
     874:	dd 20       	and	r13, r13
     876:	9c f1       	brlt	.+102    	; 0x8de <FUNCshellsort+0xb6>
     878:	f5 01       	movw	r30, r10
     87a:	40 81       	ld	r20, Z
     87c:	51 81       	ldd	r21, Z+1	; 0x01
     87e:	f4 01       	movw	r30, r8
     880:	60 81       	ld	r22, Z
     882:	71 81       	ldd	r23, Z+1	; 0x01
     884:	64 17       	cp	r22, r20
     886:	75 07       	cpc	r23, r21
     888:	54 f5       	brge	.+84     	; 0x8de <FUNCshellsort+0xb6>
     88a:	8c 01       	movw	r16, r24
     88c:	0a 0d       	add	r16, r10
     88e:	1b 1d       	adc	r17, r11
     890:	d4 01       	movw	r26, r8
     892:	bc 82       	std	Y+4, r11	; 0x04
     894:	ab 82       	std	Y+3, r10	; 0x03
     896:	ba 82       	std	Y+2, r11	; 0x02
     898:	a9 82       	std	Y+1, r10	; 0x01
				temp = v[j];
				v[j] = v[j+gap];
     89a:	eb 81       	ldd	r30, Y+3	; 0x03
     89c:	fc 81       	ldd	r31, Y+4	; 0x04
     89e:	71 83       	std	Z+1, r23	; 0x01
     8a0:	60 83       	st	Z, r22
				v[j+gap] = temp;
     8a2:	11 96       	adiw	r26, 0x01	; 1
     8a4:	5c 93       	st	X, r21
     8a6:	4e 93       	st	-X, r20
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
		for (i = gap; i < n; i++)
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
     8a8:	2e 19       	sub	r18, r14
     8aa:	3f 09       	sbc	r19, r15
     8ac:	c2 f0       	brmi	.+48     	; 0x8de <FUNCshellsort+0xb6>
     8ae:	f8 01       	movw	r30, r16
     8b0:	40 81       	ld	r20, Z
     8b2:	51 81       	ldd	r21, Z+1	; 0x01
     8b4:	e9 81       	ldd	r30, Y+1	; 0x01
     8b6:	fa 81       	ldd	r31, Y+2	; 0x02
     8b8:	60 81       	ld	r22, Z
     8ba:	71 81       	ldd	r23, Z+1	; 0x01
     8bc:	08 0f       	add	r16, r24
     8be:	19 1f       	adc	r17, r25
     8c0:	e8 0f       	add	r30, r24
     8c2:	f9 1f       	adc	r31, r25
     8c4:	fa 83       	std	Y+2, r31	; 0x02
     8c6:	e9 83       	std	Y+1, r30	; 0x01
     8c8:	eb 81       	ldd	r30, Y+3	; 0x03
     8ca:	fc 81       	ldd	r31, Y+4	; 0x04
     8cc:	e8 0f       	add	r30, r24
     8ce:	f9 1f       	adc	r31, r25
     8d0:	fc 83       	std	Y+4, r31	; 0x04
     8d2:	eb 83       	std	Y+3, r30	; 0x03
     8d4:	a8 0f       	add	r26, r24
     8d6:	b9 1f       	adc	r27, r25
     8d8:	64 17       	cp	r22, r20
     8da:	75 07       	cpc	r23, r21
     8dc:	f4 f2       	brlt	.-68     	; 0x89a <FUNCshellsort+0x72>
     8de:	ff ef       	ldi	r31, 0xFF	; 255
     8e0:	cf 1a       	sub	r12, r31
     8e2:	df 0a       	sbc	r13, r31
     8e4:	22 e0       	ldi	r18, 0x02	; 2
     8e6:	a2 0e       	add	r10, r18
     8e8:	b1 1c       	adc	r11, r1
     8ea:	e2 e0       	ldi	r30, 0x02	; 2
     8ec:	8e 0e       	add	r8, r30
     8ee:	91 1c       	adc	r9, r1
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
		for (i = gap; i < n; i++)
     8f0:	c6 14       	cp	r12, r6
     8f2:	d7 04       	cpc	r13, r7
     8f4:	09 f0       	breq	.+2      	; 0x8f8 <FUNCshellsort+0xd0>
     8f6:	bd cf       	rjmp	.-134    	; 0x872 <FUNCshellsort+0x4a>
}
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
     8f8:	47 01       	movw	r8, r14
     8fa:	ff 20       	and	r15, r15
     8fc:	1c f4       	brge	.+6      	; 0x904 <__stack+0x5>
     8fe:	ff ef       	ldi	r31, 0xFF	; 255
     900:	8f 1a       	sub	r8, r31
     902:	9f 0a       	sbc	r9, r31
     904:	95 94       	asr	r9
     906:	87 94       	ror	r8
     908:	18 14       	cp	r1, r8
     90a:	19 04       	cpc	r1, r9
     90c:	e4 f4       	brge	.+56     	; 0x946 <__stack+0x47>
     90e:	74 01       	movw	r14, r8
     910:	01 c0       	rjmp	.+2      	; 0x914 <__stack+0x15>
     912:	74 01       	movw	r14, r8
		for (i = gap; i < n; i++)
     914:	82 14       	cp	r8, r2
     916:	93 04       	cpc	r9, r3
     918:	7c f7       	brge	.-34     	; 0x8f8 <FUNCshellsort+0xd0>
     91a:	64 01       	movw	r12, r8
     91c:	ce 18       	sub	r12, r14
     91e:	df 08       	sbc	r13, r15
     920:	56 01       	movw	r10, r12
     922:	aa 0c       	add	r10, r10
     924:	bb 1c       	adc	r11, r11
     926:	a4 0c       	add	r10, r4
     928:	b5 1c       	adc	r11, r5
     92a:	88 0c       	add	r8, r8
     92c:	99 1c       	adc	r9, r9
     92e:	84 0c       	add	r8, r4
     930:	95 1c       	adc	r9, r5
     932:	31 01       	movw	r6, r2
     934:	6e 18       	sub	r6, r14
     936:	7f 08       	sbc	r7, r15
     938:	c7 01       	movw	r24, r14
     93a:	88 0f       	add	r24, r24
     93c:	99 1f       	adc	r25, r25
     93e:	91 95       	neg	r25
     940:	81 95       	neg	r24
     942:	91 09       	sbc	r25, r1
     944:	96 cf       	rjmp	.-212    	; 0x872 <FUNCshellsort+0x4a>
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
				temp = v[j];
				v[j] = v[j+gap];
				v[j+gap] = temp;
			}
}
     946:	0f 90       	pop	r0
     948:	0f 90       	pop	r0
     94a:	0f 90       	pop	r0
     94c:	0f 90       	pop	r0
     94e:	df 91       	pop	r29
     950:	cf 91       	pop	r28
     952:	1f 91       	pop	r17
     954:	0f 91       	pop	r16
     956:	ff 90       	pop	r15
     958:	ef 90       	pop	r14
     95a:	df 90       	pop	r13
     95c:	cf 90       	pop	r12
     95e:	bf 90       	pop	r11
     960:	af 90       	pop	r10
     962:	9f 90       	pop	r9
     964:	8f 90       	pop	r8
     966:	7f 90       	pop	r7
     968:	6f 90       	pop	r6
     96a:	5f 90       	pop	r5
     96c:	4f 90       	pop	r4
     96e:	3f 90       	pop	r3
     970:	2f 90       	pop	r2
     972:	08 95       	ret

00000974 <FUNCpmax>:
	if(a1 > a2){
		biggest = a1;
	}else{
		biggest = a2;
	}
	return biggest;
     974:	86 17       	cp	r24, r22
     976:	97 07       	cpc	r25, r23
     978:	0c f4       	brge	.+2      	; 0x97c <FUNCpmax+0x8>
     97a:	cb 01       	movw	r24, r22
}
     97c:	08 95       	ret

0000097e <FUNCgcd>:
// common divisor
int FUNCgcd (int u, int v)
{
     97e:	9b 01       	movw	r18, r22
	int temp;
	while ( v != 0 ) {
     980:	67 2b       	or	r22, r23
     982:	11 f4       	brne	.+4      	; 0x988 <FUNCgcd+0xa>
     984:	08 95       	ret
		temp = u % v;
		u = v;
		v = temp;
     986:	9a 01       	movw	r18, r20
// common divisor
int FUNCgcd (int u, int v)
{
	int temp;
	while ( v != 0 ) {
		temp = u % v;
     988:	b9 01       	movw	r22, r18
     98a:	0e 94 d5 11 	call	0x23aa	; 0x23aa <__divmodhi4>
     98e:	ac 01       	movw	r20, r24
     990:	82 2f       	mov	r24, r18
     992:	93 2f       	mov	r25, r19
}
// common divisor
int FUNCgcd (int u, int v)
{
	int temp;
	while ( v != 0 ) {
     994:	41 15       	cp	r20, r1
     996:	51 05       	cpc	r21, r1
     998:	b1 f7       	brne	.-20     	; 0x986 <FUNCgcd+0x8>
		temp = u % v;
		u = v;
		v = temp;
	}
	return u;
}
     99a:	08 95       	ret

0000099c <FUNCstrToInt>:
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
     99c:	fc 01       	movw	r30, r24
	int i, intValue, result = 0;
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
     99e:	90 81       	ld	r25, Z
     9a0:	80 ed       	ldi	r24, 0xD0	; 208
     9a2:	89 0f       	add	r24, r25
     9a4:	8a 30       	cpi	r24, 0x0A	; 10
     9a6:	d0 f4       	brcc	.+52     	; 0x9dc <FUNCstrToInt+0x40>
     9a8:	31 96       	adiw	r30, 0x01	; 1
     9aa:	20 e0       	ldi	r18, 0x00	; 0
     9ac:	30 e0       	ldi	r19, 0x00	; 0
		intValue = string[i] - '0';
		result = result * 10 + intValue;
     9ae:	a9 01       	movw	r20, r18
     9b0:	44 0f       	add	r20, r20
     9b2:	55 1f       	adc	r21, r21
     9b4:	22 0f       	add	r18, r18
     9b6:	33 1f       	adc	r19, r19
     9b8:	22 0f       	add	r18, r18
     9ba:	33 1f       	adc	r19, r19
     9bc:	22 0f       	add	r18, r18
     9be:	33 1f       	adc	r19, r19
     9c0:	42 0f       	add	r20, r18
     9c2:	53 1f       	adc	r21, r19
     9c4:	29 2f       	mov	r18, r25
     9c6:	30 e0       	ldi	r19, 0x00	; 0
     9c8:	20 53       	subi	r18, 0x30	; 48
     9ca:	31 09       	sbc	r19, r1
     9cc:	24 0f       	add	r18, r20
     9ce:	35 1f       	adc	r19, r21
}
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
	int i, intValue, result = 0;
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
     9d0:	91 91       	ld	r25, Z+
     9d2:	80 ed       	ldi	r24, 0xD0	; 208
     9d4:	89 0f       	add	r24, r25
     9d6:	8a 30       	cpi	r24, 0x0A	; 10
     9d8:	50 f3       	brcs	.-44     	; 0x9ae <FUNCstrToInt+0x12>
     9da:	02 c0       	rjmp	.+4      	; 0x9e0 <FUNCstrToInt+0x44>
	return u;
}
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
	int i, intValue, result = 0;
     9dc:	20 e0       	ldi	r18, 0x00	; 0
     9de:	30 e0       	ldi	r19, 0x00	; 0
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
		intValue = string[i] - '0';
		result = result * 10 + intValue;
	}
	return result;
}
     9e0:	c9 01       	movw	r24, r18
     9e2:	08 95       	ret

000009e4 <FUNCfilter>:
uint8_t FUNCfilter(uint8_t mask, uint8_t data)
{
	uint8_t Z;
	Z=mask & data;
	return Z;
}
     9e4:	86 23       	and	r24, r22
     9e6:	08 95       	ret

000009e8 <FUNCticks>:
// ticks
unsigned int FUNCticks(unsigned int num)
{
	unsigned int count;
	for(count=0;count<num;count++)
     9e8:	00 97       	sbiw	r24, 0x00	; 0
     9ea:	39 f0       	breq	.+14     	; 0x9fa <FUNCticks+0x12>
     9ec:	20 e0       	ldi	r18, 0x00	; 0
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	2f 5f       	subi	r18, 0xFF	; 255
     9f2:	3f 4f       	sbci	r19, 0xFF	; 255
     9f4:	82 17       	cp	r24, r18
     9f6:	93 07       	cpc	r25, r19
     9f8:	d9 f7       	brne	.-10     	; 0x9f0 <FUNCticks+0x8>
		;
	return count;
}
     9fa:	08 95       	ret

000009fc <FUNCtwocomptoint8bit>:
// Two's Complement function
int FUNCtwocomptoint8bit(int twoscomp){
  
  //Let's see if the byte is negative
  if (twoscomp & 0B10000000){
     9fc:	87 ff       	sbrs	r24, 7
     9fe:	08 c0       	rjmp	.+16     	; 0xa10 <FUNCtwocomptoint8bit+0x14>
    //Invert
    twoscomp = ~twoscomp + 1;
     a00:	91 95       	neg	r25
     a02:	81 95       	neg	r24
     a04:	91 09       	sbc	r25, r1
	twoscomp = (twoscomp & 0B11111111);
    //Cast as int and multiply by negative one
    int value = (int)(twoscomp)*(-1);
     a06:	99 27       	eor	r25, r25
     a08:	91 95       	neg	r25
     a0a:	81 95       	neg	r24
     a0c:	91 09       	sbc	r25, r1
    return value;
     a0e:	08 95       	ret
    //Byte is non-negative, therefore convert to decimal and display
    //Make sure we are never over 1279
    twoscomp = (twoscomp & 0B01111111);
    //Cast as int and return
    int value = (int)(twoscomp);
    return value;
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	99 27       	eor	r25, r25
  }
}
     a14:	08 95       	ret

00000a16 <FUNCtwocomptoint10bit>:
// Two's Complement function, shifts 10 bit binary to signed integers (-512 to 512)
int FUNCtwocomptoint10bit(int twoscomp){
	
  //Let's see if the byte is negative
  if (twoscomp & 0x200){
     a16:	91 ff       	sbrs	r25, 1
     a18:	08 c0       	rjmp	.+16     	; 0xa2a <FUNCtwocomptoint10bit+0x14>
    //Invert
    twoscomp = ~twoscomp + 1;
     a1a:	91 95       	neg	r25
     a1c:	81 95       	neg	r24
     a1e:	91 09       	sbc	r25, r1
    twoscomp = (twoscomp & 0x3FF);
    //Cast as int and multiply by negative one
    int value = (int)(twoscomp)*(-1);
     a20:	93 70       	andi	r25, 0x03	; 3
     a22:	91 95       	neg	r25
     a24:	81 95       	neg	r24
     a26:	91 09       	sbc	r25, r1
    return value;
     a28:	08 95       	ret
    //Byte is non-negative, therefore convert to decimal and display
    twoscomp = (twoscomp & 0x1FF);
    //Cast as int and return
    //Serial.println(twoscomp);
    int value = (int)(twoscomp);
    return value;
     a2a:	91 70       	andi	r25, 0x01	; 1
  }
}
     a2c:	08 95       	ret

00000a2e <FUNCtwocomptointnbit>:
// Two's Complement function, nbits
int FUNCtwocomptointnbit(int twoscomp, uint8_t nbits){
  unsigned int signmask;
  unsigned int mask;
  signmask = (1<<(nbits-1));
     a2e:	61 50       	subi	r22, 0x01	; 1
     a30:	21 e0       	ldi	r18, 0x01	; 1
     a32:	30 e0       	ldi	r19, 0x00	; 0
     a34:	02 c0       	rjmp	.+4      	; 0xa3a <FUNCtwocomptointnbit+0xc>
     a36:	22 0f       	add	r18, r18
     a38:	33 1f       	adc	r19, r19
     a3a:	6a 95       	dec	r22
     a3c:	e2 f7       	brpl	.-8      	; 0xa36 <FUNCtwocomptointnbit+0x8>
  mask=signmask-1;
     a3e:	a9 01       	movw	r20, r18
     a40:	41 50       	subi	r20, 0x01	; 1
     a42:	51 09       	sbc	r21, r1
  //Let's see if the number is negative
  if (twoscomp & signmask){
     a44:	b9 01       	movw	r22, r18
     a46:	68 23       	and	r22, r24
     a48:	79 23       	and	r23, r25
     a4a:	67 2b       	or	r22, r23
     a4c:	29 f0       	breq	.+10     	; 0xa58 <FUNCtwocomptointnbit+0x2a>
	twoscomp &= mask;
    twoscomp -= signmask;
     a4e:	84 23       	and	r24, r20
     a50:	95 23       	and	r25, r21
     a52:	82 1b       	sub	r24, r18
     a54:	93 0b       	sbc	r25, r19
     a56:	08 95       	ret
  }else{
	  twoscomp &= mask;
     a58:	84 23       	and	r24, r20
     a5a:	95 23       	and	r25, r21
  }
  return twoscomp;
}
     a5c:	08 95       	ret

00000a5e <FUNCdec2bcd>:
// Convert Decimal to Binary Coded Decimal (BCD)
char FUNCdec2bcd(char num)
{
	return ((num/10 * 16) + (num % 10));
     a5e:	9d ec       	ldi	r25, 0xCD	; 205
     a60:	89 9f       	mul	r24, r25
     a62:	91 2d       	mov	r25, r1
     a64:	11 24       	eor	r1, r1
     a66:	96 95       	lsr	r25
     a68:	96 95       	lsr	r25
     a6a:	96 95       	lsr	r25
     a6c:	39 2f       	mov	r19, r25
     a6e:	33 0f       	add	r19, r19
     a70:	23 2f       	mov	r18, r19
     a72:	22 0f       	add	r18, r18
     a74:	22 0f       	add	r18, r18
     a76:	23 0f       	add	r18, r19
     a78:	82 1b       	sub	r24, r18
}
     a7a:	20 e1       	ldi	r18, 0x10	; 16
     a7c:	92 9f       	mul	r25, r18
     a7e:	80 0d       	add	r24, r0
     a80:	11 24       	eor	r1, r1
     a82:	08 95       	ret

00000a84 <FUNCbcd2dec>:
// Convert Binary Coded Decimal (BCD) to Decimal
char FUNCbcd2dec(char num)
{
	return ((num/16 * 10) + (num % 16));
     a84:	98 2f       	mov	r25, r24
     a86:	92 95       	swap	r25
     a88:	9f 70       	andi	r25, 0x0F	; 15
     a8a:	99 0f       	add	r25, r25
     a8c:	29 2f       	mov	r18, r25
     a8e:	22 0f       	add	r18, r18
     a90:	22 0f       	add	r18, r18
     a92:	92 0f       	add	r25, r18
     a94:	8f 70       	andi	r24, 0x0F	; 15
}
     a96:	89 0f       	add	r24, r25
     a98:	08 95       	ret

00000a9a <FUNCresizestr>:
char* FUNCresizestr(char *string, int size)
{
     a9a:	fc 01       	movw	r30, r24
	int i;
	FUNCstr[size]='\0';
     a9c:	db 01       	movw	r26, r22
     a9e:	a6 59       	subi	r26, 0x96	; 150
     aa0:	be 4f       	sbci	r27, 0xFE	; 254
     aa2:	1c 92       	st	X, r1
	for(i=0;i<size;i++){
     aa4:	16 16       	cp	r1, r22
     aa6:	17 06       	cpc	r1, r23
     aa8:	14 f5       	brge	.+68     	; 0xaee <FUNCresizestr+0x54>
		if(*(string+i)=='\0'){
     aaa:	90 81       	ld	r25, Z
     aac:	91 11       	cpse	r25, r1
     aae:	0c c0       	rjmp	.+24     	; 0xac8 <FUNCresizestr+0x2e>
     ab0:	17 c0       	rjmp	.+46     	; 0xae0 <FUNCresizestr+0x46>
     ab2:	91 91       	ld	r25, Z+
     ab4:	91 11       	cpse	r25, r1
     ab6:	0d c0       	rjmp	.+26     	; 0xad2 <FUNCresizestr+0x38>
     ab8:	15 c0       	rjmp	.+42     	; 0xae4 <FUNCresizestr+0x4a>
			for(;i<size;i++){
				FUNCstr[i]=' ';
     aba:	81 93       	st	Z+, r24
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
		if(*(string+i)=='\0'){
			for(;i<size;i++){
     abc:	2f 5f       	subi	r18, 0xFF	; 255
     abe:	3f 4f       	sbci	r19, 0xFF	; 255
     ac0:	26 17       	cp	r18, r22
     ac2:	37 07       	cpc	r19, r23
     ac4:	d4 f3       	brlt	.-12     	; 0xaba <FUNCresizestr+0x20>
     ac6:	13 c0       	rjmp	.+38     	; 0xaee <FUNCresizestr+0x54>
     ac8:	aa e6       	ldi	r26, 0x6A	; 106
     aca:	b1 e0       	ldi	r27, 0x01	; 1
     acc:	31 96       	adiw	r30, 0x01	; 1
char* FUNCresizestr(char *string, int size)
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
		if(*(string+i)=='\0'){
     ace:	20 e0       	ldi	r18, 0x00	; 0
     ad0:	30 e0       	ldi	r19, 0x00	; 0
			for(;i<size;i++){
				FUNCstr[i]=' ';
			}
			break;
		}
		FUNCstr[i]=*(string+i);
     ad2:	9d 93       	st	X+, r25
}
char* FUNCresizestr(char *string, int size)
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
     ad4:	2f 5f       	subi	r18, 0xFF	; 255
     ad6:	3f 4f       	sbci	r19, 0xFF	; 255
     ad8:	62 17       	cp	r22, r18
     ada:	73 07       	cpc	r23, r19
     adc:	51 f7       	brne	.-44     	; 0xab2 <FUNCresizestr+0x18>
     ade:	07 c0       	rjmp	.+14     	; 0xaee <FUNCresizestr+0x54>
     ae0:	20 e0       	ldi	r18, 0x00	; 0
     ae2:	30 e0       	ldi	r19, 0x00	; 0
     ae4:	f9 01       	movw	r30, r18
     ae6:	e6 59       	subi	r30, 0x96	; 150
     ae8:	fe 4f       	sbci	r31, 0xFE	; 254
		if(*(string+i)=='\0'){
			for(;i<size;i++){
				FUNCstr[i]=' ';
     aea:	80 e2       	ldi	r24, 0x20	; 32
     aec:	e6 cf       	rjmp	.-52     	; 0xaba <FUNCresizestr+0x20>
			break;
		}
		FUNCstr[i]=*(string+i);
	}
	return FUNCstr;
}
     aee:	8a e6       	ldi	r24, 0x6A	; 106
     af0:	91 e0       	ldi	r25, 0x01	; 1
     af2:	08 95       	ret

00000af4 <FUNCtrimmer>:
long FUNCtrimmer(long x, long in_min, long in_max, long out_min, long out_max)
/*
	same as arduino map function.
*/
{
     af4:	4f 92       	push	r4
     af6:	5f 92       	push	r5
     af8:	6f 92       	push	r6
     afa:	7f 92       	push	r7
     afc:	af 92       	push	r10
     afe:	bf 92       	push	r11
     b00:	cf 92       	push	r12
     b02:	df 92       	push	r13
     b04:	ef 92       	push	r14
     b06:	ff 92       	push	r15
     b08:	0f 93       	push	r16
     b0a:	1f 93       	push	r17
     b0c:	cf 93       	push	r28
     b0e:	df 93       	push	r29
     b10:	cd b7       	in	r28, 0x3d	; 61
     b12:	de b7       	in	r29, 0x3e	; 62
     b14:	29 01       	movw	r4, r18
     b16:	3a 01       	movw	r6, r20
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     b18:	9b 01       	movw	r18, r22
     b1a:	ac 01       	movw	r20, r24
     b1c:	24 19       	sub	r18, r4
     b1e:	35 09       	sbc	r19, r5
     b20:	46 09       	sbc	r20, r6
     b22:	57 09       	sbc	r21, r7
     b24:	89 89       	ldd	r24, Y+17	; 0x11
     b26:	9a 89       	ldd	r25, Y+18	; 0x12
     b28:	ab 89       	ldd	r26, Y+19	; 0x13
     b2a:	bc 89       	ldd	r27, Y+20	; 0x14
     b2c:	bc 01       	movw	r22, r24
     b2e:	cd 01       	movw	r24, r26
     b30:	6a 19       	sub	r22, r10
     b32:	7b 09       	sbc	r23, r11
     b34:	8c 09       	sbc	r24, r12
     b36:	9d 09       	sbc	r25, r13
     b38:	0e 94 c5 11 	call	0x238a	; 0x238a <__mulsi3>
     b3c:	a8 01       	movw	r20, r16
     b3e:	97 01       	movw	r18, r14
     b40:	24 19       	sub	r18, r4
     b42:	35 09       	sbc	r19, r5
     b44:	46 09       	sbc	r20, r6
     b46:	57 09       	sbc	r21, r7
     b48:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <__divmodsi4>
     b4c:	ca 01       	movw	r24, r20
     b4e:	b9 01       	movw	r22, r18
     b50:	6a 0d       	add	r22, r10
     b52:	7b 1d       	adc	r23, r11
     b54:	8c 1d       	adc	r24, r12
     b56:	9d 1d       	adc	r25, r13
}
     b58:	df 91       	pop	r29
     b5a:	cf 91       	pop	r28
     b5c:	1f 91       	pop	r17
     b5e:	0f 91       	pop	r16
     b60:	ff 90       	pop	r15
     b62:	ef 90       	pop	r14
     b64:	df 90       	pop	r13
     b66:	cf 90       	pop	r12
     b68:	bf 90       	pop	r11
     b6a:	af 90       	pop	r10
     b6c:	7f 90       	pop	r7
     b6e:	6f 90       	pop	r6
     b70:	5f 90       	pop	r5
     b72:	4f 90       	pop	r4
     b74:	08 95       	ret

00000b76 <Power>:
// power: raise base to n-th power; n >= 0
unsigned int Power(uint8_t base, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
     b76:	70 e0       	ldi	r23, 0x00	; 0
     b78:	61 15       	cp	r22, r1
     b7a:	71 05       	cpc	r23, r1
     b7c:	99 f0       	breq	.+38     	; 0xba4 <Power+0x2e>
     b7e:	41 e0       	ldi	r20, 0x01	; 1
     b80:	50 e0       	ldi	r21, 0x00	; 0
     b82:	21 e0       	ldi	r18, 0x01	; 1
     b84:	30 e0       	ldi	r19, 0x00	; 0
        p = p * base;
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	fa 01       	movw	r30, r20
     b8a:	e8 9f       	mul	r30, r24
     b8c:	a0 01       	movw	r20, r0
     b8e:	e9 9f       	mul	r30, r25
     b90:	50 0d       	add	r21, r0
     b92:	f8 9f       	mul	r31, r24
     b94:	50 0d       	add	r21, r0
     b96:	11 24       	eor	r1, r1
// power: raise base to n-th power; n >= 0
unsigned int Power(uint8_t base, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
     b98:	2f 5f       	subi	r18, 0xFF	; 255
     b9a:	3f 4f       	sbci	r19, 0xFF	; 255
     b9c:	62 17       	cp	r22, r18
     b9e:	73 07       	cpc	r23, r19
     ba0:	98 f7       	brcc	.-26     	; 0xb88 <Power+0x12>
     ba2:	02 c0       	rjmp	.+4      	; 0xba8 <Power+0x32>
}
// power: raise base to n-th power; n >= 0
unsigned int Power(uint8_t base, uint8_t n)
{
    unsigned int i, p;
    p = 1;
     ba4:	41 e0       	ldi	r20, 0x01	; 1
     ba6:	50 e0       	ldi	r21, 0x00	; 0
    for (i = 1; i <= n; ++i)
        p = p * base;
    return p;
}
     ba8:	ca 01       	movw	r24, r20
     baa:	08 95       	ret

00000bac <StringLength>:
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
	while ( string[count] != '\0' )
     bac:	fc 01       	movw	r30, r24
     bae:	20 81       	ld	r18, Z
     bb0:	22 23       	and	r18, r18
     bb2:	41 f0       	breq	.+16     	; 0xbc4 <StringLength+0x18>
     bb4:	31 96       	adiw	r30, 0x01	; 1
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	90 e0       	ldi	r25, 0x00	; 0
		++count;
     bba:	01 96       	adiw	r24, 0x01	; 1
}
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
	while ( string[count] != '\0' )
     bbc:	21 91       	ld	r18, Z+
     bbe:	21 11       	cpse	r18, r1
     bc0:	fc cf       	rjmp	.-8      	; 0xbba <StringLength+0xe>
     bc2:	08 95       	ret
    return p;
}
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	90 e0       	ldi	r25, 0x00	; 0
	while ( string[count] != '\0' )
		++count;
	return count;
}
     bc8:	08 95       	ret

00000bca <FUNCtrim>:
	s[i] = '\0';
	Reverse(s);
}
// trim: remove trailing blanks, tabs, newlines
int FUNCtrim(char s[])
{
     bca:	cf 93       	push	r28
     bcc:	df 93       	push	r29
     bce:	ec 01       	movw	r28, r24
	int n;
	for (n = StringLength(s)-1; n >= 0; n--)
     bd0:	0e 94 d6 05 	call	0xbac	; 0xbac <StringLength>
     bd4:	9c 01       	movw	r18, r24
     bd6:	21 50       	subi	r18, 0x01	; 1
     bd8:	31 09       	sbc	r19, r1
     bda:	62 f0       	brmi	.+24     	; 0xbf4 <FUNCtrim+0x2a>
     bdc:	fe 01       	movw	r30, r28
     bde:	e8 0f       	add	r30, r24
     be0:	f9 1f       	adc	r31, r25
		if (s[n] != ' ' && s[n] != '\t' && s[n] != '\n')
     be2:	92 91       	ld	r25, -Z
     be4:	90 32       	cpi	r25, 0x20	; 32
     be6:	19 f0       	breq	.+6      	; 0xbee <FUNCtrim+0x24>
     be8:	99 50       	subi	r25, 0x09	; 9
     bea:	92 30       	cpi	r25, 0x02	; 2
     bec:	18 f4       	brcc	.+6      	; 0xbf4 <FUNCtrim+0x2a>
}
// trim: remove trailing blanks, tabs, newlines
int FUNCtrim(char s[])
{
	int n;
	for (n = StringLength(s)-1; n >= 0; n--)
     bee:	21 50       	subi	r18, 0x01	; 1
     bf0:	31 09       	sbc	r19, r1
     bf2:	b8 f7       	brcc	.-18     	; 0xbe2 <FUNCtrim+0x18>
		if (s[n] != ' ' && s[n] != '\t' && s[n] != '\n')
			break;
	s[n+1] = '\0';
     bf4:	c2 0f       	add	r28, r18
     bf6:	d3 1f       	adc	r29, r19
     bf8:	19 82       	std	Y+1, r1	; 0x01
	return n;
}
     bfa:	c9 01       	movw	r24, r18
     bfc:	df 91       	pop	r29
     bfe:	cf 91       	pop	r28
     c00:	08 95       	ret

00000c02 <Reverse>:
		++count;
	return count;
}
// reverse: reverse string s in place
void Reverse(char s[])
{
     c02:	cf 93       	push	r28
     c04:	df 93       	push	r29
     c06:	ec 01       	movw	r28, r24
	int c, i, j;
	for (i = 0, j = StringLength(s)-1; i < j; i++, j--){
     c08:	0e 94 d6 05 	call	0xbac	; 0xbac <StringLength>
     c0c:	9c 01       	movw	r18, r24
     c0e:	21 50       	subi	r18, 0x01	; 1
     c10:	31 09       	sbc	r19, r1
     c12:	12 16       	cp	r1, r18
     c14:	13 06       	cpc	r1, r19
     c16:	84 f4       	brge	.+32     	; 0xc38 <Reverse+0x36>
     c18:	de 01       	movw	r26, r28
     c1a:	a8 0f       	add	r26, r24
     c1c:	b9 1f       	adc	r27, r25
     c1e:	fe 01       	movw	r30, r28
     c20:	80 e0       	ldi	r24, 0x00	; 0
     c22:	90 e0       	ldi	r25, 0x00	; 0
		c = s[i];
     c24:	40 81       	ld	r20, Z
		s[i] = s[j];
     c26:	5e 91       	ld	r21, -X
     c28:	51 93       	st	Z+, r21
		s[j] = c;
     c2a:	4c 93       	st	X, r20
}
// reverse: reverse string s in place
void Reverse(char s[])
{
	int c, i, j;
	for (i = 0, j = StringLength(s)-1; i < j; i++, j--){
     c2c:	01 96       	adiw	r24, 0x01	; 1
     c2e:	21 50       	subi	r18, 0x01	; 1
     c30:	31 09       	sbc	r19, r1
     c32:	82 17       	cp	r24, r18
     c34:	93 07       	cpc	r25, r19
     c36:	b4 f3       	brlt	.-20     	; 0xc24 <Reverse+0x22>
		c = s[i];
		s[i] = s[j];
		s[j] = c;
	}
}
     c38:	df 91       	pop	r29
     c3a:	cf 91       	pop	r28
     c3c:	08 95       	ret

00000c3e <FUNCi32toa>:
				v[j+gap] = temp;
			}
}
// i32toa: convert n to characters in s
void FUNCi32toa(int32_t n, char s[])
{
     c3e:	6f 92       	push	r6
     c40:	7f 92       	push	r7
     c42:	8f 92       	push	r8
     c44:	9f 92       	push	r9
     c46:	af 92       	push	r10
     c48:	bf 92       	push	r11
     c4a:	cf 92       	push	r12
     c4c:	df 92       	push	r13
     c4e:	ef 92       	push	r14
     c50:	ff 92       	push	r15
     c52:	0f 93       	push	r16
     c54:	1f 93       	push	r17
     c56:	cf 93       	push	r28
     c58:	df 93       	push	r29
     c5a:	6b 01       	movw	r12, r22
     c5c:	7c 01       	movw	r14, r24
     c5e:	ea 01       	movw	r28, r20
     c60:	dc 01       	movw	r26, r24
     c62:	cb 01       	movw	r24, r22
     c64:	ff 20       	and	r15, r15
     c66:	3c f4       	brge	.+14     	; 0xc76 <FUNCi32toa+0x38>
     c68:	88 27       	eor	r24, r24
     c6a:	99 27       	eor	r25, r25
     c6c:	dc 01       	movw	r26, r24
     c6e:	8c 19       	sub	r24, r12
     c70:	9d 09       	sbc	r25, r13
     c72:	ae 09       	sbc	r26, r14
     c74:	bf 09       	sbc	r27, r15
     c76:	bc 01       	movw	r22, r24
     c78:	cd 01       	movw	r24, r26
     c7a:	71 2c       	mov	r7, r1
	int32_t sign;
	if ((sign = n) < 0) // record sign
	n = -n; // make n positive
	i = 0;
	do { // generate digits in reverse order
		s[i++] = n % 10 + '0'; // get next digit
     c7c:	0f 2e       	mov	r0, r31
     c7e:	fa e0       	ldi	r31, 0x0A	; 10
     c80:	8f 2e       	mov	r8, r31
     c82:	91 2c       	mov	r9, r1
     c84:	a1 2c       	mov	r10, r1
     c86:	b1 2c       	mov	r11, r1
     c88:	f0 2d       	mov	r31, r0
     c8a:	01 c0       	rjmp	.+2      	; 0xc8e <FUNCi32toa+0x50>
     c8c:	76 2c       	mov	r7, r6
     c8e:	66 24       	eor	r6, r6
     c90:	63 94       	inc	r6
     c92:	67 0c       	add	r6, r7
     c94:	8e 01       	movw	r16, r28
     c96:	07 0d       	add	r16, r7
     c98:	11 1d       	adc	r17, r1
     c9a:	a5 01       	movw	r20, r10
     c9c:	94 01       	movw	r18, r8
     c9e:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <__divmodsi4>
     ca2:	60 5d       	subi	r22, 0xD0	; 208
     ca4:	f8 01       	movw	r30, r16
     ca6:	60 83       	st	Z, r22
	}while ((n /= 10) > 0); // delete it
     ca8:	62 2f       	mov	r22, r18
     caa:	73 2f       	mov	r23, r19
     cac:	84 2f       	mov	r24, r20
     cae:	95 2f       	mov	r25, r21
     cb0:	16 16       	cp	r1, r22
     cb2:	17 06       	cpc	r1, r23
     cb4:	18 06       	cpc	r1, r24
     cb6:	19 06       	cpc	r1, r25
     cb8:	4c f3       	brlt	.-46     	; 0xc8c <FUNCi32toa+0x4e>
	if (sign < 0)
     cba:	ff 20       	and	r15, r15
     cbc:	4c f4       	brge	.+18     	; 0xcd0 <FUNCi32toa+0x92>
	s[i++] = '-';
     cbe:	fe 01       	movw	r30, r28
     cc0:	e6 0d       	add	r30, r6
     cc2:	f1 1d       	adc	r31, r1
     cc4:	8d e2       	ldi	r24, 0x2D	; 45
     cc6:	80 83       	st	Z, r24
     cc8:	68 94       	set
     cca:	66 24       	eor	r6, r6
     ccc:	61 f8       	bld	r6, 1
     cce:	67 0c       	add	r6, r7
	s[i] = '\0';
     cd0:	fe 01       	movw	r30, r28
     cd2:	e6 0d       	add	r30, r6
     cd4:	f1 1d       	adc	r31, r1
     cd6:	10 82       	st	Z, r1
	Reverse(s);
     cd8:	ce 01       	movw	r24, r28
     cda:	0e 94 01 06 	call	0xc02	; 0xc02 <Reverse>
}
     cde:	df 91       	pop	r29
     ce0:	cf 91       	pop	r28
     ce2:	1f 91       	pop	r17
     ce4:	0f 91       	pop	r16
     ce6:	ff 90       	pop	r15
     ce8:	ef 90       	pop	r14
     cea:	df 90       	pop	r13
     cec:	cf 90       	pop	r12
     cee:	bf 90       	pop	r11
     cf0:	af 90       	pop	r10
     cf2:	9f 90       	pop	r9
     cf4:	8f 90       	pop	r8
     cf6:	7f 90       	pop	r7
     cf8:	6f 90       	pop	r6
     cfa:	08 95       	ret

00000cfc <FUNCi16toa>:
// i16toa: convert n to characters in s
void FUNCi16toa(int16_t n, char s[])
{
     cfc:	ef 92       	push	r14
     cfe:	ff 92       	push	r15
     d00:	0f 93       	push	r16
     d02:	1f 93       	push	r17
     d04:	cf 93       	push	r28
     d06:	df 93       	push	r29
     d08:	8c 01       	movw	r16, r24
     d0a:	eb 01       	movw	r28, r22
     d0c:	99 23       	and	r25, r25
     d0e:	24 f4       	brge	.+8      	; 0xd18 <FUNCi16toa+0x1c>
     d10:	88 27       	eor	r24, r24
     d12:	99 27       	eor	r25, r25
     d14:	80 1b       	sub	r24, r16
     d16:	91 0b       	sbc	r25, r17
     d18:	20 e0       	ldi	r18, 0x00	; 0
	int16_t sign;
	if ((sign = n) < 0) // record sign
		n = -n; // make n positive
	i = 0;
	do { // generate digits in reverse order
		s[i++] = n % 10 + '0'; // get next digit
     d1a:	0f 2e       	mov	r0, r31
     d1c:	fa e0       	ldi	r31, 0x0A	; 10
     d1e:	ef 2e       	mov	r14, r31
     d20:	f1 2c       	mov	r15, r1
     d22:	f0 2d       	mov	r31, r0
     d24:	01 c0       	rjmp	.+2      	; 0xd28 <FUNCi16toa+0x2c>
     d26:	23 2f       	mov	r18, r19
     d28:	31 e0       	ldi	r19, 0x01	; 1
     d2a:	32 0f       	add	r19, r18
     d2c:	fe 01       	movw	r30, r28
     d2e:	e2 0f       	add	r30, r18
     d30:	f1 1d       	adc	r31, r1
     d32:	b7 01       	movw	r22, r14
     d34:	0e 94 d5 11 	call	0x23aa	; 0x23aa <__divmodhi4>
     d38:	80 5d       	subi	r24, 0xD0	; 208
     d3a:	80 83       	st	Z, r24
	}while ((n /= 10) > 0); // delete it
     d3c:	86 2f       	mov	r24, r22
     d3e:	97 2f       	mov	r25, r23
     d40:	18 16       	cp	r1, r24
     d42:	19 06       	cpc	r1, r25
     d44:	84 f3       	brlt	.-32     	; 0xd26 <FUNCi16toa+0x2a>
	if (sign < 0)
     d46:	11 23       	and	r17, r17
     d48:	3c f4       	brge	.+14     	; 0xd58 <FUNCi16toa+0x5c>
		s[i++] = '-';
     d4a:	fe 01       	movw	r30, r28
     d4c:	e3 0f       	add	r30, r19
     d4e:	f1 1d       	adc	r31, r1
     d50:	8d e2       	ldi	r24, 0x2D	; 45
     d52:	80 83       	st	Z, r24
     d54:	32 e0       	ldi	r19, 0x02	; 2
     d56:	32 0f       	add	r19, r18
	s[i] = '\0';
     d58:	fe 01       	movw	r30, r28
     d5a:	e3 0f       	add	r30, r19
     d5c:	f1 1d       	adc	r31, r1
     d5e:	10 82       	st	Z, r1
	Reverse(s);
     d60:	ce 01       	movw	r24, r28
     d62:	0e 94 01 06 	call	0xc02	; 0xc02 <Reverse>
}
     d66:	df 91       	pop	r29
     d68:	cf 91       	pop	r28
     d6a:	1f 91       	pop	r17
     d6c:	0f 91       	pop	r16
     d6e:	ff 90       	pop	r15
     d70:	ef 90       	pop	r14
     d72:	08 95       	ret

00000d74 <FUNCui16toa>:
// ui16toa: convert n to characters in s
void FUNCui16toa(uint16_t n, char s[])
{
     d74:	1f 93       	push	r17
     d76:	cf 93       	push	r28
     d78:	df 93       	push	r29
     d7a:	ac 01       	movw	r20, r24
     d7c:	fb 01       	movw	r30, r22
	uint8_t i;
	i = 0;
     d7e:	80 e0       	ldi	r24, 0x00	; 0
	do { // generate digits in reverse order
		s[i++] = n % 10 + '0'; // get next digit
     d80:	11 e0       	ldi	r17, 0x01	; 1
     d82:	18 0f       	add	r17, r24
     d84:	ef 01       	movw	r28, r30
     d86:	c8 0f       	add	r28, r24
     d88:	d1 1d       	adc	r29, r1
     d8a:	9a 01       	movw	r18, r20
     d8c:	ad ec       	ldi	r26, 0xCD	; 205
     d8e:	bc ec       	ldi	r27, 0xCC	; 204
     d90:	0e 94 0e 12 	call	0x241c	; 0x241c <__umulhisi3>
     d94:	96 95       	lsr	r25
     d96:	87 95       	ror	r24
     d98:	96 95       	lsr	r25
     d9a:	87 95       	ror	r24
     d9c:	96 95       	lsr	r25
     d9e:	87 95       	ror	r24
     da0:	9c 01       	movw	r18, r24
     da2:	22 0f       	add	r18, r18
     da4:	33 1f       	adc	r19, r19
     da6:	88 0f       	add	r24, r24
     da8:	99 1f       	adc	r25, r25
     daa:	88 0f       	add	r24, r24
     dac:	99 1f       	adc	r25, r25
     dae:	88 0f       	add	r24, r24
     db0:	99 1f       	adc	r25, r25
     db2:	82 0f       	add	r24, r18
     db4:	93 1f       	adc	r25, r19
     db6:	9a 01       	movw	r18, r20
     db8:	28 1b       	sub	r18, r24
     dba:	39 0b       	sbc	r19, r25
     dbc:	c9 01       	movw	r24, r18
     dbe:	80 5d       	subi	r24, 0xD0	; 208
     dc0:	88 83       	st	Y, r24
	}while ((n /= 10) > 0); // delete it
     dc2:	9a 01       	movw	r18, r20
     dc4:	0e 94 0e 12 	call	0x241c	; 0x241c <__umulhisi3>
     dc8:	ac 01       	movw	r20, r24
     dca:	56 95       	lsr	r21
     dcc:	47 95       	ror	r20
     dce:	56 95       	lsr	r21
     dd0:	47 95       	ror	r20
     dd2:	56 95       	lsr	r21
     dd4:	47 95       	ror	r20
void FUNCui16toa(uint16_t n, char s[])
{
	uint8_t i;
	i = 0;
	do { // generate digits in reverse order
		s[i++] = n % 10 + '0'; // get next digit
     dd6:	81 2f       	mov	r24, r17
	}while ((n /= 10) > 0); // delete it
     dd8:	41 15       	cp	r20, r1
     dda:	51 05       	cpc	r21, r1
     ddc:	89 f6       	brne	.-94     	; 0xd80 <FUNCui16toa+0xc>
	s[i] = '\0';
     dde:	df 01       	movw	r26, r30
     de0:	a1 0f       	add	r26, r17
     de2:	b1 1d       	adc	r27, r1
     de4:	1c 92       	st	X, r1
	Reverse(s);
     de6:	cf 01       	movw	r24, r30
     de8:	0e 94 01 06 	call	0xc02	; 0xc02 <Reverse>
}
     dec:	df 91       	pop	r29
     dee:	cf 91       	pop	r28
     df0:	1f 91       	pop	r17
     df2:	08 95       	ret

00000df4 <FUNCbcd2bin>:
		s[j] = c;
	}
}
unsigned char FUNCbcd2bin(unsigned char val)
{
	return (val & 0x0f) + (val >> 4) * 10;
     df4:	98 2f       	mov	r25, r24
     df6:	92 95       	swap	r25
     df8:	9f 70       	andi	r25, 0x0F	; 15
     dfa:	99 0f       	add	r25, r25
     dfc:	29 2f       	mov	r18, r25
     dfe:	22 0f       	add	r18, r18
     e00:	22 0f       	add	r18, r18
     e02:	92 0f       	add	r25, r18
     e04:	8f 70       	andi	r24, 0x0F	; 15
}
     e06:	89 0f       	add	r24, r25
     e08:	08 95       	ret

00000e0a <FUNCbin2bcd>:
unsigned char FUNCbin2bcd(unsigned val)
{
     e0a:	ac 01       	movw	r20, r24
	return ((val / 10) << 4) + val % 10;
     e0c:	9c 01       	movw	r18, r24
     e0e:	ad ec       	ldi	r26, 0xCD	; 205
     e10:	bc ec       	ldi	r27, 0xCC	; 204
     e12:	0e 94 0e 12 	call	0x241c	; 0x241c <__umulhisi3>
     e16:	96 95       	lsr	r25
     e18:	87 95       	ror	r24
     e1a:	96 95       	lsr	r25
     e1c:	87 95       	ror	r24
     e1e:	96 95       	lsr	r25
     e20:	87 95       	ror	r24
     e22:	bc 01       	movw	r22, r24
     e24:	66 0f       	add	r22, r22
     e26:	77 1f       	adc	r23, r23
     e28:	9c 01       	movw	r18, r24
     e2a:	22 0f       	add	r18, r18
     e2c:	33 1f       	adc	r19, r19
     e2e:	22 0f       	add	r18, r18
     e30:	33 1f       	adc	r19, r19
     e32:	22 0f       	add	r18, r18
     e34:	33 1f       	adc	r19, r19
     e36:	26 0f       	add	r18, r22
     e38:	37 1f       	adc	r19, r23
     e3a:	42 1b       	sub	r20, r18
     e3c:	53 0b       	sbc	r21, r19
}
     e3e:	34 2f       	mov	r19, r20
     e40:	20 e1       	ldi	r18, 0x10	; 16
     e42:	82 9f       	mul	r24, r18
     e44:	30 0d       	add	r19, r0
     e46:	11 24       	eor	r1, r1
     e48:	83 2f       	mov	r24, r19
     e4a:	08 95       	ret

00000e4c <FUNCgcd1>:
long FUNCgcd1(long a, long b)
{
     e4c:	cf 92       	push	r12
     e4e:	df 92       	push	r13
     e50:	ef 92       	push	r14
     e52:	ff 92       	push	r15
     e54:	cf 93       	push	r28
     e56:	df 93       	push	r29
     e58:	cd b7       	in	r28, 0x3d	; 61
     e5a:	de b7       	in	r29, 0x3e	; 62
     e5c:	28 97       	sbiw	r28, 0x08	; 8
     e5e:	0f b6       	in	r0, 0x3f	; 63
     e60:	f8 94       	cli
     e62:	de bf       	out	0x3e, r29	; 62
     e64:	0f be       	out	0x3f, r0	; 63
     e66:	cd bf       	out	0x3d, r28	; 61
     e68:	6b 01       	movw	r12, r22
     e6a:	7c 01       	movw	r14, r24
     e6c:	69 83       	std	Y+1, r22	; 0x01
     e6e:	7a 83       	std	Y+2, r23	; 0x02
     e70:	8b 83       	std	Y+3, r24	; 0x03
     e72:	9c 83       	std	Y+4, r25	; 0x04
     e74:	2d 83       	std	Y+5, r18	; 0x05
     e76:	3e 83       	std	Y+6, r19	; 0x06
     e78:	4f 83       	std	Y+7, r20	; 0x07
     e7a:	58 87       	std	Y+8, r21	; 0x08
	long r;
	if (a < b)
     e7c:	c2 16       	cp	r12, r18
     e7e:	d3 06       	cpc	r13, r19
     e80:	e4 06       	cpc	r14, r20
     e82:	f5 06       	cpc	r15, r21
     e84:	3c f4       	brge	.+14     	; 0xe94 <FUNCgcd1+0x48>
		FUNCswap(&a, &b);
     e86:	be 01       	movw	r22, r28
     e88:	6b 5f       	subi	r22, 0xFB	; 251
     e8a:	7f 4f       	sbci	r23, 0xFF	; 255
     e8c:	ce 01       	movw	r24, r28
     e8e:	01 96       	adiw	r24, 0x01	; 1
     e90:	0e 94 c3 03 	call	0x786	; 0x786 <FUNCswap>
	if (!b){
     e94:	8d 81       	ldd	r24, Y+5	; 0x05
     e96:	9e 81       	ldd	r25, Y+6	; 0x06
     e98:	af 81       	ldd	r26, Y+7	; 0x07
     e9a:	b8 85       	ldd	r27, Y+8	; 0x08
     e9c:	89 2b       	or	r24, r25
     e9e:	8a 2b       	or	r24, r26
     ea0:	8b 2b       	or	r24, r27
     ea2:	71 f4       	brne	.+28     	; 0xec0 <FUNCgcd1+0x74>
		while ((r = a % b) != 0) {
     ea4:	69 81       	ldd	r22, Y+1	; 0x01
     ea6:	7a 81       	ldd	r23, Y+2	; 0x02
     ea8:	8b 81       	ldd	r24, Y+3	; 0x03
     eaa:	9c 81       	ldd	r25, Y+4	; 0x04
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	a9 01       	movw	r20, r18
     eb2:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <__divmodsi4>
     eb6:	61 15       	cp	r22, r1
     eb8:	71 05       	cpc	r23, r1
     eba:	81 05       	cpc	r24, r1
     ebc:	91 05       	cpc	r25, r1
     ebe:	29 f4       	brne	.+10     	; 0xeca <FUNCgcd1+0x7e>
			a = b;
			b = r;
		}
	}	
	return b;
     ec0:	6d 81       	ldd	r22, Y+5	; 0x05
     ec2:	7e 81       	ldd	r23, Y+6	; 0x06
     ec4:	8f 81       	ldd	r24, Y+7	; 0x07
     ec6:	98 85       	ldd	r25, Y+8	; 0x08
     ec8:	05 c0       	rjmp	.+10     	; 0xed4 <FUNCgcd1+0x88>
	if (a < b)
		FUNCswap(&a, &b);
	if (!b){
		while ((r = a % b) != 0) {
			a = b;
			b = r;
     eca:	6d 83       	std	Y+5, r22	; 0x05
     ecc:	7e 83       	std	Y+6, r23	; 0x06
     ece:	8f 83       	std	Y+7, r24	; 0x07
     ed0:	98 87       	std	Y+8, r25	; 0x08
     ed2:	f6 cf       	rjmp	.-20     	; 0xec0 <FUNCgcd1+0x74>
		}
	}	
	return b;
}
     ed4:	28 96       	adiw	r28, 0x08	; 8
     ed6:	0f b6       	in	r0, 0x3f	; 63
     ed8:	f8 94       	cli
     eda:	de bf       	out	0x3e, r29	; 62
     edc:	0f be       	out	0x3f, r0	; 63
     ede:	cd bf       	out	0x3d, r28	; 61
     ee0:	df 91       	pop	r29
     ee2:	cf 91       	pop	r28
     ee4:	ff 90       	pop	r15
     ee6:	ef 90       	pop	r14
     ee8:	df 90       	pop	r13
     eea:	cf 90       	pop	r12
     eec:	08 95       	ret

00000eee <FUNCpincheck>:
	uint8_t lh;
	if(port & (1<<pin))
		lh=1;
	else
		lh=0;
	return lh;
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <FUNCpincheck+0x8>
     ef2:	95 95       	asr	r25
     ef4:	87 95       	ror	r24
     ef6:	6a 95       	dec	r22
     ef8:	e2 f7       	brpl	.-8      	; 0xef2 <FUNCpincheck+0x4>
}
     efa:	81 70       	andi	r24, 0x01	; 1
     efc:	08 95       	ret

00000efe <FUNCprint_binary>:
char* FUNCprint_binary(uint8_t number)
{
     efe:	ea e6       	ldi	r30, 0x6A	; 106
     f00:	f1 e0       	ldi	r31, 0x01	; 1
	uint8_t i,c;
    for(i=128,c=0;i;i>>=1,c++){
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	20 e8       	ldi	r18, 0x80	; 128
	(number & i) ? (FUNCstr[c]='1') : (FUNCstr[c]='0');
     f06:	50 e3       	ldi	r21, 0x30	; 48
     f08:	41 e3       	ldi	r20, 0x31	; 49
     f0a:	38 2f       	mov	r19, r24
     f0c:	32 23       	and	r19, r18
     f0e:	11 f0       	breq	.+4      	; 0xf14 <FUNCprint_binary+0x16>
     f10:	40 83       	st	Z, r20
     f12:	01 c0       	rjmp	.+2      	; 0xf16 <FUNCprint_binary+0x18>
     f14:	50 83       	st	Z, r21
	return lh;
}
char* FUNCprint_binary(uint8_t number)
{
	uint8_t i,c;
    for(i=128,c=0;i;i>>=1,c++){
     f16:	26 95       	lsr	r18
     f18:	9f 5f       	subi	r25, 0xFF	; 255
     f1a:	31 96       	adiw	r30, 0x01	; 1
     f1c:	98 30       	cpi	r25, 0x08	; 8
     f1e:	a9 f7       	brne	.-22     	; 0xf0a <FUNCprint_binary+0xc>
	(number & i) ? (FUNCstr[c]='1') : (FUNCstr[c]='0');
	}
	FUNCstr[c]='\0';
     f20:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <FUNCstr+0x8>
	return FUNCstr;
}
     f24:	8a e6       	ldi	r24, 0x6A	; 106
     f26:	91 e0       	ldi	r25, 0x01	; 1
     f28:	08 95       	ret

00000f2a <FUNCmayia>:
// power: raise base to n-th power; n >= 0
unsigned int Power(uint8_t base, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
     f2a:	a4 2f       	mov	r26, r20
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	10 97       	sbiw	r26, 0x00	; 0
     f30:	61 f0       	breq	.+24     	; 0xf4a <FUNCmayia+0x20>
     f32:	21 e0       	ldi	r18, 0x01	; 1
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	e1 e0       	ldi	r30, 0x01	; 1
     f38:	f0 e0       	ldi	r31, 0x00	; 0
        p = p * base;
     f3a:	ee 0f       	add	r30, r30
     f3c:	ff 1f       	adc	r31, r31
// power: raise base to n-th power; n >= 0
unsigned int Power(uint8_t base, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
     f3e:	2f 5f       	subi	r18, 0xFF	; 255
     f40:	3f 4f       	sbci	r19, 0xFF	; 255
     f42:	a2 17       	cp	r26, r18
     f44:	b3 07       	cpc	r27, r19
     f46:	c8 f7       	brcc	.-14     	; 0xf3a <FUNCmayia+0x10>
     f48:	02 c0       	rjmp	.+4      	; 0xf4e <FUNCmayia+0x24>
}
// power: raise base to n-th power; n >= 0
unsigned int Power(uint8_t base, uint8_t n)
{
    unsigned int i, p;
    p = 1;
     f4a:	e1 e0       	ldi	r30, 0x01	; 1
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
unsigned int FUNCmayia(unsigned int xi, unsigned int xf, uint8_t nbits)
{//magic formula
	unsigned int mask;
	unsigned int diff;
	unsigned int trans;
	mask=Power(2,nbits)-1;
     f4e:	31 97       	sbiw	r30, 0x01	; 1
	xi&=mask;
	xf&=mask;
     f50:	6e 23       	and	r22, r30
     f52:	7f 23       	and	r23, r31
	diff=xf^xi;
     f54:	8e 23       	and	r24, r30
     f56:	9f 23       	and	r25, r31
     f58:	86 27       	eor	r24, r22
     f5a:	97 27       	eor	r25, r23
	trans=diff&xf;
	return (trans<<nbits)|diff;
     f5c:	68 23       	and	r22, r24
     f5e:	79 23       	and	r23, r25
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <FUNCmayia+0x3c>
     f62:	66 0f       	add	r22, r22
     f64:	77 1f       	adc	r23, r23
     f66:	4a 95       	dec	r20
     f68:	e2 f7       	brpl	.-8      	; 0xf62 <FUNCmayia+0x38>
}
     f6a:	86 2b       	or	r24, r22
     f6c:	97 2b       	or	r25, r23
     f6e:	08 95       	ret

00000f70 <FUNCenable>:
// uint8_t TRANupdate(struct TRAN *tr, uint8_t idata);
/*
** procedure and function
*/
FUNC FUNCenable( void )
{
     f70:	fc 01       	movw	r30, r24
	uint8_t tSREG;
	tSREG=SREG;
     f72:	9f b7       	in	r25, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
     f74:	8f b7       	in	r24, 0x3f	; 63
     f76:	8f 77       	andi	r24, 0x7F	; 127
     f78:	8f bf       	out	0x3f, r24	; 63
	func.putstr=FUNCputstr;
	func.getnum=FUNCgetnum;
	func.getnumv2=FUNCgetnumv2;
	func.readint=FUNCreadint;
	*/
	SREG=tSREG;
     f7a:	9f bf       	out	0x3f, r25	; 63
	/******/
	return func;
     f7c:	8b eb       	ldi	r24, 0xBB	; 187
     f7e:	95 e0       	ldi	r25, 0x05	; 5
     f80:	91 83       	std	Z+1, r25	; 0x01
     f82:	80 83       	st	Z, r24
     f84:	86 ed       	ldi	r24, 0xD6	; 214
     f86:	95 e0       	ldi	r25, 0x05	; 5
     f88:	93 83       	std	Z+3, r25	; 0x03
     f8a:	82 83       	std	Z+2, r24	; 0x02
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	96 e0       	ldi	r25, 0x06	; 6
     f90:	95 83       	std	Z+5, r25	; 0x05
     f92:	84 83       	std	Z+4, r24	; 0x04
     f94:	85 e9       	ldi	r24, 0x95	; 149
     f96:	97 e0       	ldi	r25, 0x07	; 7
     f98:	97 83       	std	Z+7, r25	; 0x07
     f9a:	86 83       	std	Z+6, r24	; 0x06
     f9c:	88 ea       	ldi	r24, 0xA8	; 168
     f9e:	93 e0       	ldi	r25, 0x03	; 3
     fa0:	91 87       	std	Z+9, r25	; 0x09
     fa2:	80 87       	std	Z+8, r24	; 0x08
     fa4:	86 eb       	ldi	r24, 0xB6	; 182
     fa6:	93 e0       	ldi	r25, 0x03	; 3
     fa8:	93 87       	std	Z+11, r25	; 0x0b
     faa:	82 87       	std	Z+10, r24	; 0x0a
     fac:	88 eb       	ldi	r24, 0xB8	; 184
     fae:	93 e0       	ldi	r25, 0x03	; 3
     fb0:	95 87       	std	Z+13, r25	; 0x0d
     fb2:	84 87       	std	Z+12, r24	; 0x0c
     fb4:	8b eb       	ldi	r24, 0xBB	; 187
     fb6:	93 e0       	ldi	r25, 0x03	; 3
     fb8:	97 87       	std	Z+15, r25	; 0x0f
     fba:	86 87       	std	Z+14, r24	; 0x0e
     fbc:	8e eb       	ldi	r24, 0xBE	; 190
     fbe:	93 e0       	ldi	r25, 0x03	; 3
     fc0:	91 8b       	std	Z+17, r25	; 0x11
     fc2:	80 8b       	std	Z+16, r24	; 0x10
     fc4:	81 ec       	ldi	r24, 0xC1	; 193
     fc6:	93 e0       	ldi	r25, 0x03	; 3
     fc8:	93 8b       	std	Z+19, r25	; 0x13
     fca:	82 8b       	std	Z+18, r24	; 0x12
     fcc:	82 eb       	ldi	r24, 0xB2	; 178
     fce:	93 e0       	ldi	r25, 0x03	; 3
     fd0:	95 8b       	std	Z+21, r25	; 0x15
     fd2:	84 8b       	std	Z+20, r24	; 0x14
     fd4:	84 eb       	ldi	r24, 0xB4	; 180
     fd6:	93 e0       	ldi	r25, 0x03	; 3
     fd8:	97 8b       	std	Z+23, r25	; 0x17
     fda:	86 8b       	std	Z+22, r24	; 0x16
     fdc:	83 ec       	ldi	r24, 0xC3	; 195
     fde:	93 e0       	ldi	r25, 0x03	; 3
     fe0:	91 8f       	std	Z+25, r25	; 0x19
     fe2:	80 8f       	std	Z+24, r24	; 0x18
     fe4:	84 ee       	ldi	r24, 0xE4	; 228
     fe6:	93 e0       	ldi	r25, 0x03	; 3
     fe8:	93 8f       	std	Z+27, r25	; 0x1b
     fea:	82 8f       	std	Z+26, r24	; 0x1a
     fec:	82 ef       	ldi	r24, 0xF2	; 242
     fee:	93 e0       	ldi	r25, 0x03	; 3
     ff0:	95 8f       	std	Z+29, r25	; 0x1d
     ff2:	84 8f       	std	Z+28, r24	; 0x1c
     ff4:	84 e1       	ldi	r24, 0x14	; 20
     ff6:	94 e0       	ldi	r25, 0x04	; 4
     ff8:	97 8f       	std	Z+31, r25	; 0x1f
     ffa:	86 8f       	std	Z+30, r24	; 0x1e
     ffc:	8e e7       	ldi	r24, 0x7E	; 126
     ffe:	96 e0       	ldi	r25, 0x06	; 6
    1000:	91 a3       	std	Z+33, r25	; 0x21
    1002:	80 a3       	std	Z+32, r24	; 0x20
    1004:	8a eb       	ldi	r24, 0xBA	; 186
    1006:	96 e0       	ldi	r25, 0x06	; 6
    1008:	93 a3       	std	Z+35, r25	; 0x23
    100a:	82 a3       	std	Z+34, r24	; 0x22
    100c:	8f e1       	ldi	r24, 0x1F	; 31
    100e:	96 e0       	ldi	r25, 0x06	; 6
    1010:	95 a3       	std	Z+37, r25	; 0x25
    1012:	84 a3       	std	Z+36, r24	; 0x24
    1014:	85 ee       	ldi	r24, 0xE5	; 229
    1016:	95 e0       	ldi	r25, 0x05	; 5
    1018:	97 a3       	std	Z+39, r25	; 0x27
    101a:	86 a3       	std	Z+38, r24	; 0x26
    101c:	8a eb       	ldi	r24, 0xBA	; 186
    101e:	94 e0       	ldi	r25, 0x04	; 4
    1020:	91 a7       	std	Z+41, r25	; 0x29
    1022:	80 a7       	std	Z+40, r24	; 0x28
    1024:	8f eb       	ldi	r24, 0xBF	; 191
    1026:	94 e0       	ldi	r25, 0x04	; 4
    1028:	93 a7       	std	Z+43, r25	; 0x2b
    102a:	82 a7       	std	Z+42, r24	; 0x2a
    102c:	8e ec       	ldi	r24, 0xCE	; 206
    102e:	94 e0       	ldi	r25, 0x04	; 4
    1030:	95 a7       	std	Z+45, r25	; 0x2d
    1032:	84 a7       	std	Z+44, r24	; 0x2c
    1034:	82 ef       	ldi	r24, 0xF2	; 242
    1036:	94 e0       	ldi	r25, 0x04	; 4
    1038:	97 a7       	std	Z+47, r25	; 0x2f
    103a:	86 a7       	std	Z+46, r24	; 0x2e
    103c:	84 ef       	ldi	r24, 0xF4	; 244
    103e:	94 e0       	ldi	r25, 0x04	; 4
    1040:	91 ab       	std	Z+49, r25	; 0x31
    1042:	80 ab       	std	Z+48, r24	; 0x30
    1044:	8e ef       	ldi	r24, 0xFE	; 254
    1046:	94 e0       	ldi	r25, 0x04	; 4
    1048:	93 ab       	std	Z+51, r25	; 0x33
    104a:	82 ab       	std	Z+50, r24	; 0x32
    104c:	8b e0       	ldi	r24, 0x0B	; 11
    104e:	95 e0       	ldi	r25, 0x05	; 5
    1050:	95 ab       	std	Z+53, r25	; 0x35
    1052:	84 ab       	std	Z+52, r24	; 0x34
    1054:	87 e1       	ldi	r24, 0x17	; 23
    1056:	95 e0       	ldi	r25, 0x05	; 5
    1058:	97 ab       	std	Z+55, r25	; 0x37
    105a:	86 ab       	std	Z+54, r24	; 0x36
    105c:	8f e2       	ldi	r24, 0x2F	; 47
    105e:	95 e0       	ldi	r25, 0x05	; 5
    1060:	91 af       	std	Z+57, r25	; 0x39
    1062:	80 af       	std	Z+56, r24	; 0x38
    1064:	82 e4       	ldi	r24, 0x42	; 66
    1066:	95 e0       	ldi	r25, 0x05	; 5
    1068:	93 af       	std	Z+59, r25	; 0x3b
    106a:	82 af       	std	Z+58, r24	; 0x3a
    106c:	8d e4       	ldi	r24, 0x4D	; 77
    106e:	95 e0       	ldi	r25, 0x05	; 5
    1070:	95 af       	std	Z+61, r25	; 0x3d
    1072:	84 af       	std	Z+60, r24	; 0x3c
    1074:	8a e7       	ldi	r24, 0x7A	; 122
    1076:	95 e0       	ldi	r25, 0x05	; 5
    1078:	97 af       	std	Z+63, r25	; 0x3f
    107a:	86 af       	std	Z+62, r24	; 0x3e
    107c:	df 01       	movw	r26, r30
    107e:	a0 5c       	subi	r26, 0xC0	; 192
    1080:	bf 4f       	sbci	r27, 0xFF	; 255
    1082:	8a ef       	ldi	r24, 0xFA	; 250
    1084:	96 e0       	ldi	r25, 0x06	; 6
    1086:	11 96       	adiw	r26, 0x01	; 1
    1088:	9c 93       	st	X, r25
    108a:	8e 93       	st	-X, r24
    108c:	12 96       	adiw	r26, 0x02	; 2
    108e:	85 e0       	ldi	r24, 0x05	; 5
    1090:	97 e0       	ldi	r25, 0x07	; 7
    1092:	11 96       	adiw	r26, 0x01	; 1
    1094:	9c 93       	st	X, r25
    1096:	8e 93       	st	-X, r24
    1098:	12 96       	adiw	r26, 0x02	; 2
    109a:	86 e2       	ldi	r24, 0x26	; 38
    109c:	97 e0       	ldi	r25, 0x07	; 7
    109e:	11 96       	adiw	r26, 0x01	; 1
    10a0:	9c 93       	st	X, r25
    10a2:	8e 93       	st	-X, r24
    10a4:	12 96       	adiw	r26, 0x02	; 2
    10a6:	87 e7       	ldi	r24, 0x77	; 119
    10a8:	97 e0       	ldi	r25, 0x07	; 7
    10aa:	11 96       	adiw	r26, 0x01	; 1
    10ac:	9c 93       	st	X, r25
    10ae:	8e 93       	st	-X, r24
    10b0:	12 96       	adiw	r26, 0x02	; 2
    10b2:	8f e7       	ldi	r24, 0x7F	; 127
    10b4:	97 e0       	ldi	r25, 0x07	; 7
    10b6:	8d 93       	st	X+, r24
    10b8:	9c 93       	st	X, r25
}
    10ba:	cf 01       	movw	r24, r30
    10bc:	08 95       	ret

000010be <KEYPAD_flush>:
}
/***flush***/
void KEYPAD_flush(void)
{
	uint8_t i;
	data.character=' ';
    10be:	80 e2       	ldi	r24, 0x20	; 32
    10c0:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <data>
	KEYPADSTRINGINDEX=0;
    10c4:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <KEYPADSTRINGINDEX>
    10c8:	e8 e8       	ldi	r30, 0x88	; 136
    10ca:	f1 e0       	ldi	r31, 0x01	; 1
    10cc:	8d e9       	ldi	r24, 0x9D	; 157
    10ce:	91 e0       	ldi	r25, 0x01	; 1
	for(i=0;i<KEYPADSTRINGSIZE+1;i++)
		data.string[i]='\0';
    10d0:	11 92       	st	Z+, r1
void KEYPAD_flush(void)
{
	uint8_t i;
	data.character=' ';
	KEYPADSTRINGINDEX=0;
	for(i=0;i<KEYPADSTRINGSIZE+1;i++)
    10d2:	e8 17       	cp	r30, r24
    10d4:	f9 07       	cpc	r31, r25
    10d6:	e1 f7       	brne	.-8      	; 0x10d0 <KEYPAD_flush+0x12>
		data.string[i]='\0';
}
    10d8:	08 95       	ret

000010da <KEYPAD_getkey>:
	*keypad_PORT|=(1<<KEYPADLINE_1) | (1<<KEYPADLINE_2) | (1<<KEYPADLINE_3) | (1<<KEYPADLINE_4);
	//Going to use pull down method.
	return keypad;
}
char KEYPAD_getkey(void)
{
    10da:	cf 93       	push	r28
    10dc:	df 93       	push	r29
    10de:	21 e0       	ldi	r18, 0x01	; 1
	uint8_t HL;
	char c='\0';
    10e0:	80 e0       	ldi	r24, 0x00	; 0
				*keypad_PORT|=(1<<KEYPADLINE_1);
				break;
			case 1: //line 2 index 1
				*keypad_DDR|=(1<<KEYPADLINE_2);
				*keypad_PORT&=~(1<<KEYPADLINE_2);
				keypad_dataf.line_2=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    10e2:	ac e7       	ldi	r26, 0x7C	; 124
    10e4:	b1 e0       	ldi	r27, 0x01	; 1
				HL=KEYPADhl(keypad_datai.line_2,keypad_dataf.line_2);
    10e6:	e0 e8       	ldi	r30, 0x80	; 128
    10e8:	f1 e0       	ldi	r31, 0x01	; 1
					if(HL == (1<<KEYPADDATA_2))
						c=keypadvalue[1][1];
					if(HL == (1<<KEYPADDATA_3))
						c=keypadvalue[1][2];
					if(HL == (1<<KEYPADDATA_4))
						c=keypadvalue[1][3];
    10ea:	60 e0       	ldi	r22, 0x00	; 0
    10ec:	71 e0       	ldi	r23, 0x01	; 1
    10ee:	01 c0       	rjmp	.+2      	; 0x10f2 <KEYPAD_getkey+0x18>
    10f0:	2f 5f       	subi	r18, 0xFF	; 255
{
	uint8_t HL;
	char c='\0';
	uint8_t keypad_option;
	for(keypad_option=0;keypad_option<KEYPADLINES;keypad_option++){
		switch (keypad_option)
    10f2:	9f ef       	ldi	r25, 0xFF	; 255
    10f4:	92 0f       	add	r25, r18
    10f6:	91 30       	cpi	r25, 0x01	; 1
    10f8:	09 f4       	brne	.+2      	; 0x10fc <KEYPAD_getkey+0x22>
    10fa:	4b c0       	rjmp	.+150    	; 0x1192 <KEYPAD_getkey+0xb8>
    10fc:	38 f0       	brcs	.+14     	; 0x110c <KEYPAD_getkey+0x32>
    10fe:	92 30       	cpi	r25, 0x02	; 2
    1100:	09 f4       	brne	.+2      	; 0x1104 <KEYPAD_getkey+0x2a>
    1102:	8c c0       	rjmp	.+280    	; 0x121c <KEYPAD_getkey+0x142>
    1104:	93 30       	cpi	r25, 0x03	; 3
    1106:	09 f4       	brne	.+2      	; 0x110a <KEYPAD_getkey+0x30>
    1108:	ce c0       	rjmp	.+412    	; 0x12a6 <KEYPAD_getkey+0x1cc>
    110a:	0e c1       	rjmp	.+540    	; 0x1328 <KEYPAD_getkey+0x24e>
		{
			case 0: //line 1 index 0
				*keypad_DDR|=(1<<KEYPADLINE_1);
    110c:	40 91 9d 01 	lds	r20, 0x019D	; 0x80019d <keypad_DDR>
    1110:	50 91 9e 01 	lds	r21, 0x019E	; 0x80019e <keypad_DDR+0x1>
    1114:	ea 01       	movw	r28, r20
    1116:	98 81       	ld	r25, Y
    1118:	90 68       	ori	r25, 0x80	; 128
    111a:	98 83       	st	Y, r25
				*keypad_PORT&=~(1<<KEYPADLINE_1);
    111c:	40 91 7a 01 	lds	r20, 0x017A	; 0x80017a <keypad_PORT>
    1120:	50 91 7b 01 	lds	r21, 0x017B	; 0x80017b <keypad_PORT+0x1>
    1124:	ea 01       	movw	r28, r20
    1126:	98 81       	ld	r25, Y
    1128:	9f 77       	andi	r25, 0x7F	; 127
    112a:	98 83       	st	Y, r25
				keypad_dataf.line_1=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    112c:	40 91 85 01 	lds	r20, 0x0185	; 0x800185 <keypad_PIN>
    1130:	50 91 86 01 	lds	r21, 0x0186	; 0x800186 <keypad_PIN+0x1>
    1134:	ea 01       	movw	r28, r20
    1136:	38 81       	ld	r19, Y
    1138:	34 77       	andi	r19, 0x74	; 116
    113a:	3c 93       	st	X, r19
				HL=KEYPADhl(keypad_datai.line_1,keypad_dataf.line_1);
    113c:	90 81       	ld	r25, Z
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
    113e:	43 2f       	mov	r20, r19
    1140:	49 27       	eor	r20, r25
    1142:	94 23       	and	r25, r20
			case 0: //line 1 index 0
				*keypad_DDR|=(1<<KEYPADLINE_1);
				*keypad_PORT&=~(1<<KEYPADLINE_1);
				keypad_dataf.line_1=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_1,keypad_dataf.line_1);
				keypad_datai.line_1=keypad_dataf.line_1;
    1144:	30 83       	st	Z, r19
				if(HL){
    1146:	99 23       	and	r25, r25
    1148:	99 f0       	breq	.+38     	; 0x1170 <KEYPAD_getkey+0x96>
					//decode index line one column what ?
					if(HL == (1<<KEYPADDATA_1))
    114a:	94 30       	cpi	r25, 0x04	; 4
    114c:	19 f4       	brne	.+6      	; 0x1154 <KEYPAD_getkey+0x7a>
						c=keypadvalue[0][0];
    114e:	eb 01       	movw	r28, r22
    1150:	88 81       	ld	r24, Y
    1152:	0a c0       	rjmp	.+20     	; 0x1168 <KEYPAD_getkey+0x8e>
					if(HL == (1<<KEYPADDATA_2))
    1154:	90 31       	cpi	r25, 0x10	; 16
    1156:	19 f4       	brne	.+6      	; 0x115e <KEYPAD_getkey+0x84>
						c=keypadvalue[0][1];
    1158:	eb 01       	movw	r28, r22
    115a:	89 81       	ldd	r24, Y+1	; 0x01
    115c:	09 c0       	rjmp	.+18     	; 0x1170 <KEYPAD_getkey+0x96>
					if(HL == (1<<KEYPADDATA_3))
    115e:	90 32       	cpi	r25, 0x20	; 32
    1160:	19 f4       	brne	.+6      	; 0x1168 <KEYPAD_getkey+0x8e>
						c=keypadvalue[0][2];
    1162:	eb 01       	movw	r28, r22
    1164:	8a 81       	ldd	r24, Y+2	; 0x02
    1166:	04 c0       	rjmp	.+8      	; 0x1170 <KEYPAD_getkey+0x96>
					if(HL == (1<<KEYPADDATA_4))
    1168:	90 34       	cpi	r25, 0x40	; 64
    116a:	11 f4       	brne	.+4      	; 0x1170 <KEYPAD_getkey+0x96>
						c=keypadvalue[0][3];
    116c:	eb 01       	movw	r28, r22
    116e:	8b 81       	ldd	r24, Y+3	; 0x03
				}
				*keypad_DDR&=~(1<<KEYPADLINE_1);
    1170:	40 91 9d 01 	lds	r20, 0x019D	; 0x80019d <keypad_DDR>
    1174:	50 91 9e 01 	lds	r21, 0x019E	; 0x80019e <keypad_DDR+0x1>
    1178:	ea 01       	movw	r28, r20
    117a:	98 81       	ld	r25, Y
    117c:	9f 77       	andi	r25, 0x7F	; 127
    117e:	98 83       	st	Y, r25
				*keypad_PORT|=(1<<KEYPADLINE_1);
    1180:	40 91 7a 01 	lds	r20, 0x017A	; 0x80017a <keypad_PORT>
    1184:	50 91 7b 01 	lds	r21, 0x017B	; 0x80017b <keypad_PORT+0x1>
    1188:	ea 01       	movw	r28, r20
    118a:	98 81       	ld	r25, Y
    118c:	90 68       	ori	r25, 0x80	; 128
    118e:	98 83       	st	Y, r25
				break;
    1190:	af cf       	rjmp	.-162    	; 0x10f0 <KEYPAD_getkey+0x16>
			case 1: //line 2 index 1
				*keypad_DDR|=(1<<KEYPADLINE_2);
    1192:	40 91 9d 01 	lds	r20, 0x019D	; 0x80019d <keypad_DDR>
    1196:	50 91 9e 01 	lds	r21, 0x019E	; 0x80019e <keypad_DDR+0x1>
    119a:	ea 01       	movw	r28, r20
    119c:	98 81       	ld	r25, Y
    119e:	91 60       	ori	r25, 0x01	; 1
    11a0:	98 83       	st	Y, r25
				*keypad_PORT&=~(1<<KEYPADLINE_2);
    11a2:	40 91 7a 01 	lds	r20, 0x017A	; 0x80017a <keypad_PORT>
    11a6:	50 91 7b 01 	lds	r21, 0x017B	; 0x80017b <keypad_PORT+0x1>
    11aa:	ea 01       	movw	r28, r20
    11ac:	98 81       	ld	r25, Y
    11ae:	9e 7f       	andi	r25, 0xFE	; 254
    11b0:	98 83       	st	Y, r25
				keypad_dataf.line_2=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    11b2:	40 91 85 01 	lds	r20, 0x0185	; 0x800185 <keypad_PIN>
    11b6:	50 91 86 01 	lds	r21, 0x0186	; 0x800186 <keypad_PIN+0x1>
    11ba:	ea 01       	movw	r28, r20
    11bc:	38 81       	ld	r19, Y
    11be:	34 77       	andi	r19, 0x74	; 116
    11c0:	11 96       	adiw	r26, 0x01	; 1
    11c2:	3c 93       	st	X, r19
    11c4:	11 97       	sbiw	r26, 0x01	; 1
				HL=KEYPADhl(keypad_datai.line_2,keypad_dataf.line_2);
    11c6:	91 81       	ldd	r25, Z+1	; 0x01
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
    11c8:	43 2f       	mov	r20, r19
    11ca:	49 27       	eor	r20, r25
    11cc:	94 23       	and	r25, r20
			case 1: //line 2 index 1
				*keypad_DDR|=(1<<KEYPADLINE_2);
				*keypad_PORT&=~(1<<KEYPADLINE_2);
				keypad_dataf.line_2=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_2,keypad_dataf.line_2);
				keypad_datai.line_2=keypad_dataf.line_2;
    11ce:	31 83       	std	Z+1, r19	; 0x01
				if(HL){
    11d0:	99 23       	and	r25, r25
    11d2:	99 f0       	breq	.+38     	; 0x11fa <KEYPAD_getkey+0x120>
					//decode index line two column what ?
					if(HL == (1<<KEYPADDATA_1))
    11d4:	94 30       	cpi	r25, 0x04	; 4
    11d6:	19 f4       	brne	.+6      	; 0x11de <KEYPAD_getkey+0x104>
						c=keypadvalue[1][0];
    11d8:	eb 01       	movw	r28, r22
    11da:	8c 81       	ldd	r24, Y+4	; 0x04
    11dc:	0a c0       	rjmp	.+20     	; 0x11f2 <KEYPAD_getkey+0x118>
					if(HL == (1<<KEYPADDATA_2))
    11de:	90 31       	cpi	r25, 0x10	; 16
    11e0:	19 f4       	brne	.+6      	; 0x11e8 <KEYPAD_getkey+0x10e>
						c=keypadvalue[1][1];
    11e2:	eb 01       	movw	r28, r22
    11e4:	8d 81       	ldd	r24, Y+5	; 0x05
    11e6:	09 c0       	rjmp	.+18     	; 0x11fa <KEYPAD_getkey+0x120>
					if(HL == (1<<KEYPADDATA_3))
    11e8:	90 32       	cpi	r25, 0x20	; 32
    11ea:	19 f4       	brne	.+6      	; 0x11f2 <KEYPAD_getkey+0x118>
						c=keypadvalue[1][2];
    11ec:	eb 01       	movw	r28, r22
    11ee:	8e 81       	ldd	r24, Y+6	; 0x06
    11f0:	04 c0       	rjmp	.+8      	; 0x11fa <KEYPAD_getkey+0x120>
					if(HL == (1<<KEYPADDATA_4))
    11f2:	90 34       	cpi	r25, 0x40	; 64
    11f4:	11 f4       	brne	.+4      	; 0x11fa <KEYPAD_getkey+0x120>
						c=keypadvalue[1][3];
    11f6:	eb 01       	movw	r28, r22
    11f8:	8f 81       	ldd	r24, Y+7	; 0x07
				}
				*keypad_DDR&=~(1<<KEYPADLINE_2);
    11fa:	40 91 9d 01 	lds	r20, 0x019D	; 0x80019d <keypad_DDR>
    11fe:	50 91 9e 01 	lds	r21, 0x019E	; 0x80019e <keypad_DDR+0x1>
    1202:	ea 01       	movw	r28, r20
    1204:	98 81       	ld	r25, Y
    1206:	9e 7f       	andi	r25, 0xFE	; 254
    1208:	98 83       	st	Y, r25
				*keypad_PORT|=(1<<KEYPADLINE_2);
    120a:	40 91 7a 01 	lds	r20, 0x017A	; 0x80017a <keypad_PORT>
    120e:	50 91 7b 01 	lds	r21, 0x017B	; 0x80017b <keypad_PORT+0x1>
    1212:	ea 01       	movw	r28, r20
    1214:	98 81       	ld	r25, Y
    1216:	91 60       	ori	r25, 0x01	; 1
    1218:	98 83       	st	Y, r25
				break;
    121a:	6a cf       	rjmp	.-300    	; 0x10f0 <KEYPAD_getkey+0x16>
			case 2: //line 3 index 2
				*keypad_DDR|=(1<<KEYPADLINE_3);
    121c:	40 91 9d 01 	lds	r20, 0x019D	; 0x80019d <keypad_DDR>
    1220:	50 91 9e 01 	lds	r21, 0x019E	; 0x80019e <keypad_DDR+0x1>
    1224:	ea 01       	movw	r28, r20
    1226:	98 81       	ld	r25, Y
    1228:	92 60       	ori	r25, 0x02	; 2
    122a:	98 83       	st	Y, r25
				*keypad_PORT&=~(1<<KEYPADLINE_3);
    122c:	40 91 7a 01 	lds	r20, 0x017A	; 0x80017a <keypad_PORT>
    1230:	50 91 7b 01 	lds	r21, 0x017B	; 0x80017b <keypad_PORT+0x1>
    1234:	ea 01       	movw	r28, r20
    1236:	98 81       	ld	r25, Y
    1238:	9d 7f       	andi	r25, 0xFD	; 253
    123a:	98 83       	st	Y, r25
				keypad_dataf.line_3=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    123c:	40 91 85 01 	lds	r20, 0x0185	; 0x800185 <keypad_PIN>
    1240:	50 91 86 01 	lds	r21, 0x0186	; 0x800186 <keypad_PIN+0x1>
    1244:	ea 01       	movw	r28, r20
    1246:	38 81       	ld	r19, Y
    1248:	34 77       	andi	r19, 0x74	; 116
    124a:	12 96       	adiw	r26, 0x02	; 2
    124c:	3c 93       	st	X, r19
    124e:	12 97       	sbiw	r26, 0x02	; 2
				HL=KEYPADhl(keypad_datai.line_3,keypad_dataf.line_3);
    1250:	92 81       	ldd	r25, Z+2	; 0x02
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
    1252:	43 2f       	mov	r20, r19
    1254:	49 27       	eor	r20, r25
    1256:	94 23       	and	r25, r20
			case 2: //line 3 index 2
				*keypad_DDR|=(1<<KEYPADLINE_3);
				*keypad_PORT&=~(1<<KEYPADLINE_3);
				keypad_dataf.line_3=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_3,keypad_dataf.line_3);
				keypad_datai.line_3=keypad_dataf.line_3;
    1258:	32 83       	std	Z+2, r19	; 0x02
				if(HL){
    125a:	99 23       	and	r25, r25
    125c:	99 f0       	breq	.+38     	; 0x1284 <KEYPAD_getkey+0x1aa>
					//decode index line three column what ?
					if(HL == (1<<KEYPADDATA_1))
    125e:	94 30       	cpi	r25, 0x04	; 4
    1260:	19 f4       	brne	.+6      	; 0x1268 <KEYPAD_getkey+0x18e>
						c=keypadvalue[2][0];
    1262:	eb 01       	movw	r28, r22
    1264:	88 85       	ldd	r24, Y+8	; 0x08
    1266:	0a c0       	rjmp	.+20     	; 0x127c <KEYPAD_getkey+0x1a2>
					if(HL == (1<<KEYPADDATA_2))
    1268:	90 31       	cpi	r25, 0x10	; 16
    126a:	19 f4       	brne	.+6      	; 0x1272 <KEYPAD_getkey+0x198>
						c=keypadvalue[2][1];
    126c:	eb 01       	movw	r28, r22
    126e:	89 85       	ldd	r24, Y+9	; 0x09
    1270:	09 c0       	rjmp	.+18     	; 0x1284 <KEYPAD_getkey+0x1aa>
					if(HL == (1<<KEYPADDATA_3))
    1272:	90 32       	cpi	r25, 0x20	; 32
    1274:	19 f4       	brne	.+6      	; 0x127c <KEYPAD_getkey+0x1a2>
						c=keypadvalue[2][2];
    1276:	eb 01       	movw	r28, r22
    1278:	8a 85       	ldd	r24, Y+10	; 0x0a
    127a:	04 c0       	rjmp	.+8      	; 0x1284 <KEYPAD_getkey+0x1aa>
					if(HL == (1<<KEYPADDATA_4))
    127c:	90 34       	cpi	r25, 0x40	; 64
    127e:	11 f4       	brne	.+4      	; 0x1284 <KEYPAD_getkey+0x1aa>
						c=keypadvalue[2][3];
    1280:	eb 01       	movw	r28, r22
    1282:	8b 85       	ldd	r24, Y+11	; 0x0b
				}
				*keypad_DDR&=~(1<<KEYPADLINE_3);
    1284:	40 91 9d 01 	lds	r20, 0x019D	; 0x80019d <keypad_DDR>
    1288:	50 91 9e 01 	lds	r21, 0x019E	; 0x80019e <keypad_DDR+0x1>
    128c:	ea 01       	movw	r28, r20
    128e:	98 81       	ld	r25, Y
    1290:	9d 7f       	andi	r25, 0xFD	; 253
    1292:	98 83       	st	Y, r25
				*keypad_PORT|=(1<<KEYPADLINE_3);
    1294:	40 91 7a 01 	lds	r20, 0x017A	; 0x80017a <keypad_PORT>
    1298:	50 91 7b 01 	lds	r21, 0x017B	; 0x80017b <keypad_PORT+0x1>
    129c:	ea 01       	movw	r28, r20
    129e:	98 81       	ld	r25, Y
    12a0:	92 60       	ori	r25, 0x02	; 2
    12a2:	98 83       	st	Y, r25
				break;
    12a4:	25 cf       	rjmp	.-438    	; 0x10f0 <KEYPAD_getkey+0x16>
			case 3: //line 4 index 3
				*keypad_DDR|=(1<<KEYPADLINE_4);
    12a6:	e0 91 9d 01 	lds	r30, 0x019D	; 0x80019d <keypad_DDR>
    12aa:	f0 91 9e 01 	lds	r31, 0x019E	; 0x80019e <keypad_DDR+0x1>
    12ae:	90 81       	ld	r25, Z
    12b0:	98 60       	ori	r25, 0x08	; 8
    12b2:	90 83       	st	Z, r25
				*keypad_PORT&=~(1<<KEYPADLINE_4);
    12b4:	e0 91 7a 01 	lds	r30, 0x017A	; 0x80017a <keypad_PORT>
    12b8:	f0 91 7b 01 	lds	r31, 0x017B	; 0x80017b <keypad_PORT+0x1>
    12bc:	90 81       	ld	r25, Z
    12be:	97 7f       	andi	r25, 0xF7	; 247
    12c0:	90 83       	st	Z, r25
				keypad_dataf.line_4=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    12c2:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <keypad_PIN>
    12c6:	f0 91 86 01 	lds	r31, 0x0186	; 0x800186 <keypad_PIN+0x1>
    12ca:	20 81       	ld	r18, Z
    12cc:	24 77       	andi	r18, 0x74	; 116
    12ce:	20 93 7f 01 	sts	0x017F, r18	; 0x80017f <keypad_dataf+0x3>
				HL=KEYPADhl(keypad_datai.line_4,keypad_dataf.line_4);
    12d2:	e0 e8       	ldi	r30, 0x80	; 128
    12d4:	f1 e0       	ldi	r31, 0x01	; 1
    12d6:	93 81       	ldd	r25, Z+3	; 0x03
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
    12d8:	32 2f       	mov	r19, r18
    12da:	39 27       	eor	r19, r25
    12dc:	93 23       	and	r25, r19
			case 3: //line 4 index 3
				*keypad_DDR|=(1<<KEYPADLINE_4);
				*keypad_PORT&=~(1<<KEYPADLINE_4);
				keypad_dataf.line_4=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_4,keypad_dataf.line_4);
				keypad_datai.line_4=keypad_dataf.line_4;
    12de:	23 83       	std	Z+3, r18	; 0x03
				if(HL){
    12e0:	99 23       	and	r25, r25
    12e2:	99 f0       	breq	.+38     	; 0x130a <KEYPAD_getkey+0x230>
					//decode index line four column what ?
					if(HL == (1<<KEYPADDATA_1))
    12e4:	94 30       	cpi	r25, 0x04	; 4
    12e6:	19 f4       	brne	.+6      	; 0x12ee <KEYPAD_getkey+0x214>
						c=keypadvalue[3][0];
    12e8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_start+0xc>
    12ec:	0a c0       	rjmp	.+20     	; 0x1302 <KEYPAD_getkey+0x228>
					if(HL == (1<<KEYPADDATA_2))
    12ee:	90 31       	cpi	r25, 0x10	; 16
    12f0:	19 f4       	brne	.+6      	; 0x12f8 <KEYPAD_getkey+0x21e>
						c=keypadvalue[3][1];
    12f2:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <__data_start+0xd>
    12f6:	09 c0       	rjmp	.+18     	; 0x130a <KEYPAD_getkey+0x230>
					if(HL == (1<<KEYPADDATA_3))
    12f8:	90 32       	cpi	r25, 0x20	; 32
    12fa:	19 f4       	brne	.+6      	; 0x1302 <KEYPAD_getkey+0x228>
						c=keypadvalue[3][2];
    12fc:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_start+0xe>
    1300:	04 c0       	rjmp	.+8      	; 0x130a <KEYPAD_getkey+0x230>
					if(HL == (1<<KEYPADDATA_4))
    1302:	90 34       	cpi	r25, 0x40	; 64
    1304:	11 f4       	brne	.+4      	; 0x130a <KEYPAD_getkey+0x230>
						c=keypadvalue[3][3];
    1306:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <__data_start+0xf>
				}
				*keypad_DDR&=~(1<<KEYPADLINE_4);
    130a:	e0 91 9d 01 	lds	r30, 0x019D	; 0x80019d <keypad_DDR>
    130e:	f0 91 9e 01 	lds	r31, 0x019E	; 0x80019e <keypad_DDR+0x1>
    1312:	90 81       	ld	r25, Z
    1314:	97 7f       	andi	r25, 0xF7	; 247
    1316:	90 83       	st	Z, r25
				*keypad_PORT|=(1<<KEYPADLINE_4);
    1318:	e0 91 7a 01 	lds	r30, 0x017A	; 0x80017a <keypad_PORT>
    131c:	f0 91 7b 01 	lds	r31, 0x017B	; 0x80017b <keypad_PORT+0x1>
    1320:	90 81       	ld	r25, Z
    1322:	98 60       	ori	r25, 0x08	; 8
    1324:	90 83       	st	Z, r25
    1326:	03 c0       	rjmp	.+6      	; 0x132e <KEYPAD_getkey+0x254>
char KEYPAD_getkey(void)
{
	uint8_t HL;
	char c='\0';
	uint8_t keypad_option;
	for(keypad_option=0;keypad_option<KEYPADLINES;keypad_option++){
    1328:	24 30       	cpi	r18, 0x04	; 4
    132a:	08 f4       	brcc	.+2      	; 0x132e <KEYPAD_getkey+0x254>
    132c:	e1 ce       	rjmp	.-574    	; 0x10f0 <KEYPAD_getkey+0x16>
			default:
				break;
		}//endswitch
	}//endfor
	return c;
}
    132e:	df 91       	pop	r29
    1330:	cf 91       	pop	r28
    1332:	08 95       	ret

00001334 <KEYPAD_get>:
/***get***/
struct keypadata KEYPAD_get(void)
{
    1334:	cf 93       	push	r28
    1336:	df 93       	push	r29
    1338:	ec 01       	movw	r28, r24
	char c;
	c=KEYPAD_getkey();
    133a:	0e 94 6d 08 	call	0x10da	; 0x10da <KEYPAD_getkey>
	if(c){
    133e:	88 23       	and	r24, r24
    1340:	89 f0       	breq	.+34     	; 0x1364 <KEYPAD_get+0x30>
		data.character=c;
    1342:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <data>
		if(KEYPADSTRINGINDEX<(KEYPADSTRINGSIZE)){
    1346:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <KEYPADSTRINGINDEX>
    134a:	94 31       	cpi	r25, 0x14	; 20
    134c:	58 f4       	brcc	.+22     	; 0x1364 <KEYPAD_get+0x30>
			data.string[KEYPADSTRINGINDEX]=c;
    134e:	e0 91 84 01 	lds	r30, 0x0184	; 0x800184 <KEYPADSTRINGINDEX>
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	e9 57       	subi	r30, 0x79	; 121
    1356:	fe 4f       	sbci	r31, 0xFE	; 254
    1358:	81 83       	std	Z+1, r24	; 0x01
			KEYPADSTRINGINDEX++;
    135a:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <KEYPADSTRINGINDEX>
    135e:	8f 5f       	subi	r24, 0xFF	; 255
    1360:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <KEYPADSTRINGINDEX>
		}
	}
	return data;
    1364:	86 e1       	ldi	r24, 0x16	; 22
    1366:	e7 e8       	ldi	r30, 0x87	; 135
    1368:	f1 e0       	ldi	r31, 0x01	; 1
    136a:	de 01       	movw	r26, r28
    136c:	01 90       	ld	r0, Z+
    136e:	0d 92       	st	X+, r0
    1370:	8a 95       	dec	r24
    1372:	e1 f7       	brne	.-8      	; 0x136c <KEYPAD_get+0x38>
}
    1374:	ce 01       	movw	r24, r28
    1376:	df 91       	pop	r29
    1378:	cf 91       	pop	r28
    137a:	08 95       	ret

0000137c <KEYPADenable>:
uint8_t KEYPADhl(uint8_t xi, uint8_t xf);
/*
** procedure and function
*/
KEYPAD KEYPADenable(volatile uint8_t *ddr, volatile uint8_t *pin, volatile uint8_t *port)
{
    137c:	cf 93       	push	r28
    137e:	df 93       	push	r29
    1380:	00 d0       	rcall	.+0      	; 0x1382 <KEYPADenable+0x6>
    1382:	00 d0       	rcall	.+0      	; 0x1384 <KEYPADenable+0x8>
    1384:	00 d0       	rcall	.+0      	; 0x1386 <KEYPADenable+0xa>
    1386:	cd b7       	in	r28, 0x3d	; 61
    1388:	de b7       	in	r29, 0x3e	; 62
    138a:	fc 01       	movw	r30, r24
	//LOCAL VARIABLES
	uint8_t tSREG;
	tSREG=SREG;
    138c:	2f b7       	in	r18, 0x3f	; 63
	data.character=' ';
    138e:	80 e2       	ldi	r24, 0x20	; 32
    1390:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <data>
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    1394:	9f b7       	in	r25, 0x3f	; 63
    1396:	9f 77       	andi	r25, 0x7F	; 127
    1398:	9f bf       	out	0x3f, r25	; 63
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	KEYPAD keypad;
	//import parametros
	keypad_DDR=ddr;
    139a:	f0 93 9e 01 	sts	0x019E, r31	; 0x80019e <keypad_DDR+0x1>
    139e:	e0 93 9d 01 	sts	0x019D, r30	; 0x80019d <keypad_DDR>
	keypad_PIN=pin;
    13a2:	70 93 86 01 	sts	0x0186, r23	; 0x800186 <keypad_PIN+0x1>
    13a6:	60 93 85 01 	sts	0x0185, r22	; 0x800185 <keypad_PIN>
	keypad_PORT=port;
    13aa:	50 93 7b 01 	sts	0x017B, r21	; 0x80017b <keypad_PORT+0x1>
    13ae:	40 93 7a 01 	sts	0x017A, r20	; 0x80017a <keypad_PORT>
	//inic variables
	*keypad_DDR=(1<<KEYPADLINE_1) | (1<<KEYPADLINE_2) | (1<<KEYPADLINE_3) | (1<<KEYPADLINE_4);
    13b2:	8b e8       	ldi	r24, 0x8B	; 139
    13b4:	80 83       	st	Z, r24
	*keypad_PORT=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    13b6:	e0 91 7a 01 	lds	r30, 0x017A	; 0x80017a <keypad_PORT>
    13ba:	f0 91 7b 01 	lds	r31, 0x017B	; 0x80017b <keypad_PORT+0x1>
    13be:	84 e7       	ldi	r24, 0x74	; 116
    13c0:	80 83       	st	Z, r24
	keypad_datai.line_1=keypad_dataf.line_1=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    13c2:	ac e7       	ldi	r26, 0x7C	; 124
    13c4:	b1 e0       	ldi	r27, 0x01	; 1
    13c6:	8c 93       	st	X, r24
    13c8:	e0 e8       	ldi	r30, 0x80	; 128
    13ca:	f1 e0       	ldi	r31, 0x01	; 1
    13cc:	80 83       	st	Z, r24
	keypad_datai.line_2=keypad_dataf.line_2=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    13ce:	11 96       	adiw	r26, 0x01	; 1
    13d0:	8c 93       	st	X, r24
    13d2:	11 97       	sbiw	r26, 0x01	; 1
    13d4:	81 83       	std	Z+1, r24	; 0x01
	keypad_datai.line_3=keypad_dataf.line_3=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    13d6:	12 96       	adiw	r26, 0x02	; 2
    13d8:	8c 93       	st	X, r24
    13da:	12 97       	sbiw	r26, 0x02	; 2
    13dc:	82 83       	std	Z+2, r24	; 0x02
	keypad_datai.line_4=keypad_dataf.line_4=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    13de:	13 96       	adiw	r26, 0x03	; 3
    13e0:	8c 93       	st	X, r24
    13e2:	83 83       	std	Z+3, r24	; 0x03
	KEYPADSTRINGINDEX=0;
    13e4:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <KEYPADSTRINGINDEX>
	//Direccionar apontadores para PROTOTIPOS
	keypad.getkey=KEYPAD_getkey;
	keypad.get=KEYPAD_get;
	keypad.flush=KEYPAD_flush;
	SREG=tSREG;
    13e8:	2f bf       	out	0x3f, r18	; 63
	//
	*keypad_PORT|=(1<<KEYPADLINE_1) | (1<<KEYPADLINE_2) | (1<<KEYPADLINE_3) | (1<<KEYPADLINE_4);
    13ea:	e0 91 7a 01 	lds	r30, 0x017A	; 0x80017a <keypad_PORT>
    13ee:	f0 91 7b 01 	lds	r31, 0x017B	; 0x80017b <keypad_PORT+0x1>
    13f2:	80 81       	ld	r24, Z
    13f4:	8b 68       	ori	r24, 0x8B	; 139
    13f6:	80 83       	st	Z, r24
	//Going to use pull down method.
	return keypad;
    13f8:	2d e6       	ldi	r18, 0x6D	; 109
    13fa:	38 e0       	ldi	r19, 0x08	; 8
    13fc:	3a 83       	std	Y+2, r19	; 0x02
    13fe:	29 83       	std	Y+1, r18	; 0x01
    1400:	4a e9       	ldi	r20, 0x9A	; 154
    1402:	59 e0       	ldi	r21, 0x09	; 9
    1404:	5c 83       	std	Y+4, r21	; 0x04
    1406:	4b 83       	std	Y+3, r20	; 0x03
    1408:	6f e5       	ldi	r22, 0x5F	; 95
    140a:	78 e0       	ldi	r23, 0x08	; 8
    140c:	7e 83       	std	Y+6, r23	; 0x06
    140e:	6d 83       	std	Y+5, r22	; 0x05
    1410:	3a 81       	ldd	r19, Y+2	; 0x02
    1412:	5c 81       	ldd	r21, Y+4	; 0x04
    1414:	7e 81       	ldd	r23, Y+6	; 0x06
}
    1416:	80 e0       	ldi	r24, 0x00	; 0
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	26 96       	adiw	r28, 0x06	; 6
    141c:	0f b6       	in	r0, 0x3f	; 63
    141e:	f8 94       	cli
    1420:	de bf       	out	0x3e, r29	; 62
    1422:	0f be       	out	0x3f, r0	; 63
    1424:	cd bf       	out	0x3d, r28	; 61
    1426:	df 91       	pop	r29
    1428:	cf 91       	pop	r28
    142a:	08 95       	ret

0000142c <LCD0_write>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    142c:	e0 91 a9 01 	lds	r30, 0x01A9	; 0x8001a9 <lcd0_PORT>
    1430:	f0 91 aa 01 	lds	r31, 0x01AA	; 0x8001aa <lcd0_PORT+0x1>
    1434:	90 81       	ld	r25, Z
    1436:	9d 7f       	andi	r25, 0xFD	; 253
    1438:	90 83       	st	Z, r25
    143a:	67 2b       	or	r22, r23
    143c:	41 f0       	breq	.+16     	; 0x144e <LCD0_write+0x22>
    143e:	e0 91 a9 01 	lds	r30, 0x01A9	; 0x8001a9 <lcd0_PORT>
    1442:	f0 91 aa 01 	lds	r31, 0x01AA	; 0x8001aa <lcd0_PORT+0x1>
    1446:	90 81       	ld	r25, Z
    1448:	91 60       	ori	r25, 0x01	; 1
    144a:	90 83       	st	Z, r25
    144c:	07 c0       	rjmp	.+14     	; 0x145c <LCD0_write+0x30>
    144e:	e0 91 a9 01 	lds	r30, 0x01A9	; 0x8001a9 <lcd0_PORT>
    1452:	f0 91 aa 01 	lds	r31, 0x01AA	; 0x8001aa <lcd0_PORT+0x1>
    1456:	90 81       	ld	r25, Z
    1458:	9e 7f       	andi	r25, 0xFE	; 254
    145a:	90 83       	st	Z, r25
    145c:	e0 91 a6 01 	lds	r30, 0x01A6	; 0x8001a6 <lcd0_DDR>
    1460:	f0 91 a7 01 	lds	r31, 0x01A7	; 0x8001a7 <lcd0_DDR+0x1>
    1464:	90 81       	ld	r25, Z
    1466:	90 6f       	ori	r25, 0xF0	; 240
    1468:	90 83       	st	Z, r25
    146a:	e0 91 a9 01 	lds	r30, 0x01A9	; 0x8001a9 <lcd0_PORT>
    146e:	f0 91 aa 01 	lds	r31, 0x01AA	; 0x8001aa <lcd0_PORT+0x1>
    1472:	90 81       	ld	r25, Z
    1474:	94 60       	ori	r25, 0x04	; 4
    1476:	90 83       	st	Z, r25
    1478:	88 23       	and	r24, r24
    147a:	44 f4       	brge	.+16     	; 0x148c <LCD0_write+0x60>
    147c:	e0 91 a9 01 	lds	r30, 0x01A9	; 0x8001a9 <lcd0_PORT>
    1480:	f0 91 aa 01 	lds	r31, 0x01AA	; 0x8001aa <lcd0_PORT+0x1>
    1484:	90 81       	ld	r25, Z
    1486:	90 68       	ori	r25, 0x80	; 128
    1488:	90 83       	st	Z, r25
    148a:	07 c0       	rjmp	.+14     	; 0x149a <LCD0_write+0x6e>
    148c:	e0 91 a9 01 	lds	r30, 0x01A9	; 0x8001a9 <lcd0_PORT>
    1490:	f0 91 aa 01 	lds	r31, 0x01AA	; 0x8001aa <lcd0_PORT+0x1>
    1494:	90 81       	ld	r25, Z
    1496:	9f 77       	andi	r25, 0x7F	; 127
    1498:	90 83       	st	Z, r25
    149a:	86 ff       	sbrs	r24, 6
    149c:	08 c0       	rjmp	.+16     	; 0x14ae <LCD0_write+0x82>
    149e:	e0 91 a9 01 	lds	r30, 0x01A9	; 0x8001a9 <lcd0_PORT>
    14a2:	f0 91 aa 01 	lds	r31, 0x01AA	; 0x8001aa <lcd0_PORT+0x1>
    14a6:	90 81       	ld	r25, Z
    14a8:	90 64       	ori	r25, 0x40	; 64
    14aa:	90 83       	st	Z, r25
    14ac:	07 c0       	rjmp	.+14     	; 0x14bc <LCD0_write+0x90>
    14ae:	e0 91 a9 01 	lds	r30, 0x01A9	; 0x8001a9 <lcd0_PORT>
    14b2:	f0 91 aa 01 	lds	r31, 0x01AA	; 0x8001aa <lcd0_PORT+0x1>
    14b6:	90 81       	ld	r25, Z
    14b8:	9f 7b       	andi	r25, 0xBF	; 191
    14ba:	90 83       	st	Z, r25
    14bc:	85 ff       	sbrs	r24, 5
    14be:	08 c0       	rjmp	.+16     	; 0x14d0 <LCD0_write+0xa4>
    14c0:	e0 91 a9 01 	lds	r30, 0x01A9	; 0x8001a9 <lcd0_PORT>
    14c4:	f0 91 aa 01 	lds	r31, 0x01AA	; 0x8001aa <lcd0_PORT+0x1>
    14c8:	90 81       	ld	r25, Z
    14ca:	90 62       	ori	r25, 0x20	; 32
    14cc:	90 83       	st	Z, r25
    14ce:	07 c0       	rjmp	.+14     	; 0x14de <LCD0_write+0xb2>
    14d0:	e0 91 a9 01 	lds	r30, 0x01A9	; 0x8001a9 <lcd0_PORT>
    14d4:	f0 91 aa 01 	lds	r31, 0x01AA	; 0x8001aa <lcd0_PORT+0x1>
    14d8:	90 81       	ld	r25, Z
    14da:	9f 7d       	andi	r25, 0xDF	; 223
    14dc:	90 83       	st	Z, r25
    14de:	84 ff       	sbrs	r24, 4
    14e0:	08 c0       	rjmp	.+16     	; 0x14f2 <LCD0_write+0xc6>
    14e2:	e0 91 a9 01 	lds	r30, 0x01A9	; 0x8001a9 <lcd0_PORT>
    14e6:	f0 91 aa 01 	lds	r31, 0x01AA	; 0x8001aa <lcd0_PORT+0x1>
    14ea:	90 81       	ld	r25, Z
    14ec:	90 61       	ori	r25, 0x10	; 16
    14ee:	90 83       	st	Z, r25
    14f0:	07 c0       	rjmp	.+14     	; 0x1500 <LCD0_write+0xd4>
    14f2:	e0 91 a9 01 	lds	r30, 0x01A9	; 0x8001a9 <lcd0_PORT>
    14f6:	f0 91 aa 01 	lds	r31, 0x01AA	; 0x8001aa <lcd0_PORT+0x1>
    14fa:	90 81       	ld	r25, Z
    14fc:	9f 7e       	andi	r25, 0xEF	; 239
    14fe:	90 83       	st	Z, r25
    1500:	e0 91 a9 01 	lds	r30, 0x01A9	; 0x8001a9 <lcd0_PORT>
    1504:	f0 91 aa 01 	lds	r31, 0x01AA	; 0x8001aa <lcd0_PORT+0x1>
    1508:	90 81       	ld	r25, Z
    150a:	9b 7f       	andi	r25, 0xFB	; 251
    150c:	90 83       	st	Z, r25
    150e:	e0 91 a9 01 	lds	r30, 0x01A9	; 0x8001a9 <lcd0_PORT>
    1512:	f0 91 aa 01 	lds	r31, 0x01AA	; 0x8001aa <lcd0_PORT+0x1>
    1516:	90 81       	ld	r25, Z
    1518:	94 60       	ori	r25, 0x04	; 4
    151a:	90 83       	st	Z, r25
    151c:	83 ff       	sbrs	r24, 3
    151e:	08 c0       	rjmp	.+16     	; 0x1530 <LCD0_write+0x104>
    1520:	e0 91 a9 01 	lds	r30, 0x01A9	; 0x8001a9 <lcd0_PORT>
    1524:	f0 91 aa 01 	lds	r31, 0x01AA	; 0x8001aa <lcd0_PORT+0x1>
    1528:	90 81       	ld	r25, Z
    152a:	90 68       	ori	r25, 0x80	; 128
    152c:	90 83       	st	Z, r25
    152e:	07 c0       	rjmp	.+14     	; 0x153e <LCD0_write+0x112>
    1530:	e0 91 a9 01 	lds	r30, 0x01A9	; 0x8001a9 <lcd0_PORT>
    1534:	f0 91 aa 01 	lds	r31, 0x01AA	; 0x8001aa <lcd0_PORT+0x1>
    1538:	90 81       	ld	r25, Z
    153a:	9f 77       	andi	r25, 0x7F	; 127
    153c:	90 83       	st	Z, r25
    153e:	82 ff       	sbrs	r24, 2
    1540:	08 c0       	rjmp	.+16     	; 0x1552 <LCD0_write+0x126>
    1542:	e0 91 a9 01 	lds	r30, 0x01A9	; 0x8001a9 <lcd0_PORT>
    1546:	f0 91 aa 01 	lds	r31, 0x01AA	; 0x8001aa <lcd0_PORT+0x1>
    154a:	90 81       	ld	r25, Z
    154c:	90 64       	ori	r25, 0x40	; 64
    154e:	90 83       	st	Z, r25
    1550:	07 c0       	rjmp	.+14     	; 0x1560 <LCD0_write+0x134>
    1552:	e0 91 a9 01 	lds	r30, 0x01A9	; 0x8001a9 <lcd0_PORT>
    1556:	f0 91 aa 01 	lds	r31, 0x01AA	; 0x8001aa <lcd0_PORT+0x1>
    155a:	90 81       	ld	r25, Z
    155c:	9f 7b       	andi	r25, 0xBF	; 191
    155e:	90 83       	st	Z, r25
    1560:	81 ff       	sbrs	r24, 1
    1562:	08 c0       	rjmp	.+16     	; 0x1574 <LCD0_write+0x148>
    1564:	e0 91 a9 01 	lds	r30, 0x01A9	; 0x8001a9 <lcd0_PORT>
    1568:	f0 91 aa 01 	lds	r31, 0x01AA	; 0x8001aa <lcd0_PORT+0x1>
    156c:	90 81       	ld	r25, Z
    156e:	90 62       	ori	r25, 0x20	; 32
    1570:	90 83       	st	Z, r25
    1572:	07 c0       	rjmp	.+14     	; 0x1582 <LCD0_write+0x156>
    1574:	e0 91 a9 01 	lds	r30, 0x01A9	; 0x8001a9 <lcd0_PORT>
    1578:	f0 91 aa 01 	lds	r31, 0x01AA	; 0x8001aa <lcd0_PORT+0x1>
    157c:	90 81       	ld	r25, Z
    157e:	9f 7d       	andi	r25, 0xDF	; 223
    1580:	90 83       	st	Z, r25
    1582:	80 ff       	sbrs	r24, 0
    1584:	08 c0       	rjmp	.+16     	; 0x1596 <LCD0_write+0x16a>
    1586:	e0 91 a9 01 	lds	r30, 0x01A9	; 0x8001a9 <lcd0_PORT>
    158a:	f0 91 aa 01 	lds	r31, 0x01AA	; 0x8001aa <lcd0_PORT+0x1>
    158e:	80 81       	ld	r24, Z
    1590:	80 61       	ori	r24, 0x10	; 16
    1592:	80 83       	st	Z, r24
    1594:	07 c0       	rjmp	.+14     	; 0x15a4 <LCD0_write+0x178>
    1596:	e0 91 a9 01 	lds	r30, 0x01A9	; 0x8001a9 <lcd0_PORT>
    159a:	f0 91 aa 01 	lds	r31, 0x01AA	; 0x8001aa <lcd0_PORT+0x1>
    159e:	80 81       	ld	r24, Z
    15a0:	8f 7e       	andi	r24, 0xEF	; 239
    15a2:	80 83       	st	Z, r24
    15a4:	e0 91 a9 01 	lds	r30, 0x01A9	; 0x8001a9 <lcd0_PORT>
    15a8:	f0 91 aa 01 	lds	r31, 0x01AA	; 0x8001aa <lcd0_PORT+0x1>
    15ac:	80 81       	ld	r24, Z
    15ae:	8b 7f       	andi	r24, 0xFB	; 251
    15b0:	80 83       	st	Z, r24
    15b2:	08 95       	ret

000015b4 <LCD0_read>:
    15b4:	e0 91 a6 01 	lds	r30, 0x01A6	; 0x8001a6 <lcd0_DDR>
    15b8:	f0 91 a7 01 	lds	r31, 0x01A7	; 0x8001a7 <lcd0_DDR+0x1>
    15bc:	20 81       	ld	r18, Z
    15be:	2f 70       	andi	r18, 0x0F	; 15
    15c0:	20 83       	st	Z, r18
    15c2:	e0 91 a9 01 	lds	r30, 0x01A9	; 0x8001a9 <lcd0_PORT>
    15c6:	f0 91 aa 01 	lds	r31, 0x01AA	; 0x8001aa <lcd0_PORT+0x1>
    15ca:	20 81       	ld	r18, Z
    15cc:	20 6f       	ori	r18, 0xF0	; 240
    15ce:	20 83       	st	Z, r18
    15d0:	e0 91 a9 01 	lds	r30, 0x01A9	; 0x8001a9 <lcd0_PORT>
    15d4:	f0 91 aa 01 	lds	r31, 0x01AA	; 0x8001aa <lcd0_PORT+0x1>
    15d8:	20 81       	ld	r18, Z
    15da:	22 60       	ori	r18, 0x02	; 2
    15dc:	20 83       	st	Z, r18
    15de:	89 2b       	or	r24, r25
    15e0:	41 f0       	breq	.+16     	; 0x15f2 <LCD0_read+0x3e>
    15e2:	e0 91 a9 01 	lds	r30, 0x01A9	; 0x8001a9 <lcd0_PORT>
    15e6:	f0 91 aa 01 	lds	r31, 0x01AA	; 0x8001aa <lcd0_PORT+0x1>
    15ea:	80 81       	ld	r24, Z
    15ec:	81 60       	ori	r24, 0x01	; 1
    15ee:	80 83       	st	Z, r24
    15f0:	07 c0       	rjmp	.+14     	; 0x1600 <LCD0_read+0x4c>
    15f2:	e0 91 a9 01 	lds	r30, 0x01A9	; 0x8001a9 <lcd0_PORT>
    15f6:	f0 91 aa 01 	lds	r31, 0x01AA	; 0x8001aa <lcd0_PORT+0x1>
    15fa:	80 81       	ld	r24, Z
    15fc:	8e 7f       	andi	r24, 0xFE	; 254
    15fe:	80 83       	st	Z, r24
    1600:	e0 91 a9 01 	lds	r30, 0x01A9	; 0x8001a9 <lcd0_PORT>
    1604:	f0 91 aa 01 	lds	r31, 0x01AA	; 0x8001aa <lcd0_PORT+0x1>
    1608:	80 81       	ld	r24, Z
    160a:	84 60       	ori	r24, 0x04	; 4
    160c:	80 83       	st	Z, r24
    160e:	e0 91 9f 01 	lds	r30, 0x019F	; 0x80019f <lcd0_PIN>
    1612:	f0 91 a0 01 	lds	r31, 0x01A0	; 0x8001a0 <lcd0_PIN+0x1>
    1616:	80 81       	ld	r24, Z
    1618:	88 23       	and	r24, r24
    161a:	14 f0       	brlt	.+4      	; 0x1620 <LCD0_read+0x6c>
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	01 c0       	rjmp	.+2      	; 0x1622 <LCD0_read+0x6e>
    1620:	80 e8       	ldi	r24, 0x80	; 128
    1622:	90 81       	ld	r25, Z
    1624:	96 ff       	sbrs	r25, 6
    1626:	02 c0       	rjmp	.+4      	; 0x162c <LCD0_read+0x78>
    1628:	80 64       	ori	r24, 0x40	; 64
    162a:	01 c0       	rjmp	.+2      	; 0x162e <LCD0_read+0x7a>
    162c:	8f 7b       	andi	r24, 0xBF	; 191
    162e:	90 81       	ld	r25, Z
    1630:	95 ff       	sbrs	r25, 5
    1632:	02 c0       	rjmp	.+4      	; 0x1638 <LCD0_read+0x84>
    1634:	80 62       	ori	r24, 0x20	; 32
    1636:	01 c0       	rjmp	.+2      	; 0x163a <LCD0_read+0x86>
    1638:	8f 7d       	andi	r24, 0xDF	; 223
    163a:	90 81       	ld	r25, Z
    163c:	94 ff       	sbrs	r25, 4
    163e:	02 c0       	rjmp	.+4      	; 0x1644 <LCD0_read+0x90>
    1640:	80 61       	ori	r24, 0x10	; 16
    1642:	01 c0       	rjmp	.+2      	; 0x1646 <LCD0_read+0x92>
    1644:	8f 7e       	andi	r24, 0xEF	; 239
    1646:	e0 91 a9 01 	lds	r30, 0x01A9	; 0x8001a9 <lcd0_PORT>
    164a:	f0 91 aa 01 	lds	r31, 0x01AA	; 0x8001aa <lcd0_PORT+0x1>
    164e:	90 81       	ld	r25, Z
    1650:	9b 7f       	andi	r25, 0xFB	; 251
    1652:	90 83       	st	Z, r25
    1654:	e0 91 a9 01 	lds	r30, 0x01A9	; 0x8001a9 <lcd0_PORT>
    1658:	f0 91 aa 01 	lds	r31, 0x01AA	; 0x8001aa <lcd0_PORT+0x1>
    165c:	90 81       	ld	r25, Z
    165e:	94 60       	ori	r25, 0x04	; 4
    1660:	90 83       	st	Z, r25
    1662:	e0 91 9f 01 	lds	r30, 0x019F	; 0x80019f <lcd0_PIN>
    1666:	f0 91 a0 01 	lds	r31, 0x01A0	; 0x8001a0 <lcd0_PIN+0x1>
    166a:	90 81       	ld	r25, Z
    166c:	99 23       	and	r25, r25
    166e:	14 f4       	brge	.+4      	; 0x1674 <LCD0_read+0xc0>
    1670:	88 60       	ori	r24, 0x08	; 8
    1672:	01 c0       	rjmp	.+2      	; 0x1676 <LCD0_read+0xc2>
    1674:	87 7f       	andi	r24, 0xF7	; 247
    1676:	90 81       	ld	r25, Z
    1678:	96 ff       	sbrs	r25, 6
    167a:	02 c0       	rjmp	.+4      	; 0x1680 <LCD0_read+0xcc>
    167c:	84 60       	ori	r24, 0x04	; 4
    167e:	01 c0       	rjmp	.+2      	; 0x1682 <LCD0_read+0xce>
    1680:	8b 7f       	andi	r24, 0xFB	; 251
    1682:	90 81       	ld	r25, Z
    1684:	95 ff       	sbrs	r25, 5
    1686:	02 c0       	rjmp	.+4      	; 0x168c <LCD0_read+0xd8>
    1688:	82 60       	ori	r24, 0x02	; 2
    168a:	01 c0       	rjmp	.+2      	; 0x168e <LCD0_read+0xda>
    168c:	8d 7f       	andi	r24, 0xFD	; 253
    168e:	90 81       	ld	r25, Z
    1690:	94 ff       	sbrs	r25, 4
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <LCD0_read+0xe4>
    1694:	81 60       	ori	r24, 0x01	; 1
    1696:	01 c0       	rjmp	.+2      	; 0x169a <LCD0_read+0xe6>
    1698:	8e 7f       	andi	r24, 0xFE	; 254
    169a:	e0 91 a9 01 	lds	r30, 0x01A9	; 0x8001a9 <lcd0_PORT>
    169e:	f0 91 aa 01 	lds	r31, 0x01AA	; 0x8001aa <lcd0_PORT+0x1>
    16a2:	90 81       	ld	r25, Z
    16a4:	9b 7f       	andi	r25, 0xFB	; 251
    16a6:	90 83       	st	Z, r25
    16a8:	08 95       	ret

000016aa <LCD0_BF>:
    16aa:	cf 93       	push	r28
    16ac:	df 93       	push	r29
    16ae:	80 e0       	ldi	r24, 0x00	; 0
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <LCD0_read>
    16b6:	cb e0       	ldi	r28, 0x0B	; 11
    16b8:	d0 e0       	ldi	r29, 0x00	; 0
    16ba:	06 c0       	rjmp	.+12     	; 0x16c8 <LCD0_BF+0x1e>
    16bc:	80 e0       	ldi	r24, 0x00	; 0
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <LCD0_read>
    16c4:	21 97       	sbiw	r28, 0x01	; 1
    16c6:	11 f0       	breq	.+4      	; 0x16cc <LCD0_BF+0x22>
    16c8:	88 23       	and	r24, r24
    16ca:	c4 f3       	brlt	.-16     	; 0x16bc <LCD0_BF+0x12>
    16cc:	df 91       	pop	r29
    16ce:	cf 91       	pop	r28
    16d0:	08 95       	ret

000016d2 <LCD0_putch>:
    16d2:	61 e0       	ldi	r22, 0x01	; 1
    16d4:	70 e0       	ldi	r23, 0x00	; 0
    16d6:	0e 94 16 0a 	call	0x142c	; 0x142c <LCD0_write>
    16da:	0e 94 55 0b 	call	0x16aa	; 0x16aa <LCD0_BF>
    16de:	08 95       	ret

000016e0 <LCD0_getch>:
    16e0:	cf 93       	push	r28
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <LCD0_read>
    16ea:	c8 2f       	mov	r28, r24
    16ec:	0e 94 55 0b 	call	0x16aa	; 0x16aa <LCD0_BF>
    16f0:	8c 2f       	mov	r24, r28
    16f2:	cf 91       	pop	r28
    16f4:	08 95       	ret

000016f6 <LCD0_string>:
    16f6:	cf 93       	push	r28
    16f8:	df 93       	push	r29
    16fa:	ec 01       	movw	r28, r24
    16fc:	88 81       	ld	r24, Y
    16fe:	88 23       	and	r24, r24
    1700:	51 f0       	breq	.+20     	; 0x1716 <LCD0_string+0x20>
    1702:	21 96       	adiw	r28, 0x01	; 1
    1704:	61 e0       	ldi	r22, 0x01	; 1
    1706:	70 e0       	ldi	r23, 0x00	; 0
    1708:	0e 94 16 0a 	call	0x142c	; 0x142c <LCD0_write>
    170c:	0e 94 55 0b 	call	0x16aa	; 0x16aa <LCD0_BF>
    1710:	89 91       	ld	r24, Y+
    1712:	81 11       	cpse	r24, r1
    1714:	f7 cf       	rjmp	.-18     	; 0x1704 <LCD0_string+0xe>
    1716:	df 91       	pop	r29
    1718:	cf 91       	pop	r28
    171a:	08 95       	ret

0000171c <LCD0_string_size>:
    171c:	0f 93       	push	r16
    171e:	1f 93       	push	r17
    1720:	cf 93       	push	r28
    1722:	df 93       	push	r29
    1724:	fc 01       	movw	r30, r24
    1726:	d6 2f       	mov	r29, r22
    1728:	80 81       	ld	r24, Z
    172a:	88 23       	and	r24, r24
    172c:	51 f0       	breq	.+20     	; 0x1742 <LCD0_string_size+0x26>
    172e:	8f 01       	movw	r16, r30
    1730:	0f 5f       	subi	r16, 0xFF	; 255
    1732:	1f 4f       	sbci	r17, 0xFF	; 255
    1734:	61 11       	cpse	r22, r1
    1736:	09 c0       	rjmp	.+18     	; 0x174a <LCD0_string_size+0x2e>
    1738:	1f c0       	rjmp	.+62     	; 0x1778 <LCD0_string_size+0x5c>
    173a:	cf 5f       	subi	r28, 0xFF	; 255
    173c:	dc 17       	cp	r29, r28
    173e:	30 f4       	brcc	.+12     	; 0x174c <LCD0_string_size+0x30>
    1740:	01 c0       	rjmp	.+2      	; 0x1744 <LCD0_string_size+0x28>
    1742:	c0 e0       	ldi	r28, 0x00	; 0
    1744:	cd 17       	cp	r28, r29
    1746:	70 f0       	brcs	.+28     	; 0x1764 <LCD0_string_size+0x48>
    1748:	17 c0       	rjmp	.+46     	; 0x1778 <LCD0_string_size+0x5c>
    174a:	c1 e0       	ldi	r28, 0x01	; 1
    174c:	61 e0       	ldi	r22, 0x01	; 1
    174e:	70 e0       	ldi	r23, 0x00	; 0
    1750:	0e 94 16 0a 	call	0x142c	; 0x142c <LCD0_write>
    1754:	0e 94 55 0b 	call	0x16aa	; 0x16aa <LCD0_BF>
    1758:	f8 01       	movw	r30, r16
    175a:	81 91       	ld	r24, Z+
    175c:	8f 01       	movw	r16, r30
    175e:	81 11       	cpse	r24, r1
    1760:	ec cf       	rjmp	.-40     	; 0x173a <LCD0_string_size+0x1e>
    1762:	f0 cf       	rjmp	.-32     	; 0x1744 <LCD0_string_size+0x28>
    1764:	cf 5f       	subi	r28, 0xFF	; 255
    1766:	61 e0       	ldi	r22, 0x01	; 1
    1768:	70 e0       	ldi	r23, 0x00	; 0
    176a:	80 e2       	ldi	r24, 0x20	; 32
    176c:	0e 94 16 0a 	call	0x142c	; 0x142c <LCD0_write>
    1770:	0e 94 55 0b 	call	0x16aa	; 0x16aa <LCD0_BF>
    1774:	cd 17       	cp	r28, r29
    1776:	b0 f3       	brcs	.-20     	; 0x1764 <LCD0_string_size+0x48>
    1778:	df 91       	pop	r29
    177a:	cf 91       	pop	r28
    177c:	1f 91       	pop	r17
    177e:	0f 91       	pop	r16
    1780:	08 95       	ret

00001782 <LCD0_hspace>:
    1782:	cf 93       	push	r28
    1784:	c8 2f       	mov	r28, r24
    1786:	88 23       	and	r24, r24
    1788:	49 f0       	breq	.+18     	; 0x179c <LCD0_hspace+0x1a>
    178a:	61 e0       	ldi	r22, 0x01	; 1
    178c:	70 e0       	ldi	r23, 0x00	; 0
    178e:	80 e2       	ldi	r24, 0x20	; 32
    1790:	0e 94 16 0a 	call	0x142c	; 0x142c <LCD0_write>
    1794:	0e 94 55 0b 	call	0x16aa	; 0x16aa <LCD0_BF>
    1798:	c1 50       	subi	r28, 0x01	; 1
    179a:	b9 f7       	brne	.-18     	; 0x178a <LCD0_hspace+0x8>
    179c:	cf 91       	pop	r28
    179e:	08 95       	ret

000017a0 <LCD0_gotoxy>:
    17a0:	26 2f       	mov	r18, r22
    17a2:	81 30       	cpi	r24, 0x01	; 1
    17a4:	91 05       	cpc	r25, r1
    17a6:	81 f0       	breq	.+32     	; 0x17c8 <LCD0_gotoxy+0x28>
    17a8:	30 f0       	brcs	.+12     	; 0x17b6 <LCD0_gotoxy+0x16>
    17aa:	82 30       	cpi	r24, 0x02	; 2
    17ac:	91 05       	cpc	r25, r1
    17ae:	a9 f0       	breq	.+42     	; 0x17da <LCD0_gotoxy+0x3a>
    17b0:	03 97       	sbiw	r24, 0x03	; 3
    17b2:	e1 f0       	breq	.+56     	; 0x17ec <LCD0_gotoxy+0x4c>
    17b4:	08 95       	ret
    17b6:	60 e0       	ldi	r22, 0x00	; 0
    17b8:	70 e0       	ldi	r23, 0x00	; 0
    17ba:	80 e8       	ldi	r24, 0x80	; 128
    17bc:	82 0f       	add	r24, r18
    17be:	0e 94 16 0a 	call	0x142c	; 0x142c <LCD0_write>
    17c2:	0e 94 55 0b 	call	0x16aa	; 0x16aa <LCD0_BF>
    17c6:	08 95       	ret
    17c8:	60 e0       	ldi	r22, 0x00	; 0
    17ca:	70 e0       	ldi	r23, 0x00	; 0
    17cc:	80 ec       	ldi	r24, 0xC0	; 192
    17ce:	82 0f       	add	r24, r18
    17d0:	0e 94 16 0a 	call	0x142c	; 0x142c <LCD0_write>
    17d4:	0e 94 55 0b 	call	0x16aa	; 0x16aa <LCD0_BF>
    17d8:	08 95       	ret
    17da:	60 e0       	ldi	r22, 0x00	; 0
    17dc:	70 e0       	ldi	r23, 0x00	; 0
    17de:	84 e9       	ldi	r24, 0x94	; 148
    17e0:	82 0f       	add	r24, r18
    17e2:	0e 94 16 0a 	call	0x142c	; 0x142c <LCD0_write>
    17e6:	0e 94 55 0b 	call	0x16aa	; 0x16aa <LCD0_BF>
    17ea:	08 95       	ret
    17ec:	60 e0       	ldi	r22, 0x00	; 0
    17ee:	70 e0       	ldi	r23, 0x00	; 0
    17f0:	84 ed       	ldi	r24, 0xD4	; 212
    17f2:	82 0f       	add	r24, r18
    17f4:	0e 94 16 0a 	call	0x142c	; 0x142c <LCD0_write>
    17f8:	0e 94 55 0b 	call	0x16aa	; 0x16aa <LCD0_BF>
    17fc:	08 95       	ret

000017fe <LCD0_clear>:
    17fe:	60 e0       	ldi	r22, 0x00	; 0
    1800:	70 e0       	ldi	r23, 0x00	; 0
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	0e 94 16 0a 	call	0x142c	; 0x142c <LCD0_write>
    1808:	83 ef       	ldi	r24, 0xF3	; 243
    180a:	9b e0       	ldi	r25, 0x0B	; 11
    180c:	01 97       	sbiw	r24, 0x01	; 1
    180e:	f1 f7       	brne	.-4      	; 0x180c <LCD0_clear+0xe>
    1810:	00 c0       	rjmp	.+0      	; 0x1812 <LCD0_clear+0x14>
    1812:	00 00       	nop
    1814:	08 95       	ret

00001816 <LCD0_inic>:
	return lcd0;
}
void LCD0_inic(void)
{
	//LCD INIC
	*lcd0_DDR=(1<<RS)|(1<<RW)|(1<<EN)|(0<<NC);
    1816:	e0 91 a6 01 	lds	r30, 0x01A6	; 0x8001a6 <lcd0_DDR>
    181a:	f0 91 a7 01 	lds	r31, 0x01A7	; 0x8001a7 <lcd0_DDR+0x1>
    181e:	87 e0       	ldi	r24, 0x07	; 7
    1820:	80 83       	st	Z, r24
	*lcd0_PORT=(1<<NC);
    1822:	e0 91 a9 01 	lds	r30, 0x01A9	; 0x8001a9 <lcd0_PORT>
    1826:	f0 91 aa 01 	lds	r31, 0x01AA	; 0x8001aa <lcd0_PORT+0x1>
    182a:	88 e0       	ldi	r24, 0x08	; 8
    182c:	80 83       	st	Z, r24
    182e:	2f ef       	ldi	r18, 0xFF	; 255
    1830:	89 ef       	ldi	r24, 0xF9	; 249
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	21 50       	subi	r18, 0x01	; 1
    1836:	80 40       	sbci	r24, 0x00	; 0
    1838:	90 40       	sbci	r25, 0x00	; 0
    183a:	e1 f7       	brne	.-8      	; 0x1834 <LCD0_inic+0x1e>
    183c:	00 c0       	rjmp	.+0      	; 0x183e <LCD0_inic+0x28>
    183e:	00 00       	nop
	/***INICIALIZACAO LCD**datasheet*/
	_delay_ms(40);
	LCD0_write(0x33,INST); //function set
    1840:	60 e0       	ldi	r22, 0x00	; 0
    1842:	70 e0       	ldi	r23, 0x00	; 0
    1844:	83 e3       	ldi	r24, 0x33	; 51
    1846:	0e 94 16 0a 	call	0x142c	; 0x142c <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    184a:	28 e6       	ldi	r18, 0x68	; 104
    184c:	2a 95       	dec	r18
    184e:	f1 f7       	brne	.-4      	; 0x184c <LCD0_inic+0x36>
	_delay_us(39);
	LCD0_write(0x33,INST); //function set
    1850:	60 e0       	ldi	r22, 0x00	; 0
    1852:	70 e0       	ldi	r23, 0x00	; 0
    1854:	83 e3       	ldi	r24, 0x33	; 51
    1856:	0e 94 16 0a 	call	0x142c	; 0x142c <LCD0_write>
    185a:	88 e6       	ldi	r24, 0x68	; 104
    185c:	8a 95       	dec	r24
    185e:	f1 f7       	brne	.-4      	; 0x185c <LCD0_inic+0x46>
	_delay_us(39);
	LCD0_write(0x2B,INST); //function set
    1860:	60 e0       	ldi	r22, 0x00	; 0
    1862:	70 e0       	ldi	r23, 0x00	; 0
    1864:	8b e2       	ldi	r24, 0x2B	; 43
    1866:	0e 94 16 0a 	call	0x142c	; 0x142c <LCD0_write>
    186a:	92 e6       	ldi	r25, 0x62	; 98
    186c:	9a 95       	dec	r25
    186e:	f1 f7       	brne	.-4      	; 0x186c <LCD0_inic+0x56>
    1870:	00 c0       	rjmp	.+0      	; 0x1872 <LCD0_inic+0x5c>
	_delay_us(37);
	LCD0_write(0x0C,INST);// display on/off control
    1872:	60 e0       	ldi	r22, 0x00	; 0
    1874:	70 e0       	ldi	r23, 0x00	; 0
    1876:	8c e0       	ldi	r24, 0x0C	; 12
    1878:	0e 94 16 0a 	call	0x142c	; 0x142c <LCD0_write>
    187c:	22 e6       	ldi	r18, 0x62	; 98
    187e:	2a 95       	dec	r18
    1880:	f1 f7       	brne	.-4      	; 0x187e <LCD0_inic+0x68>
    1882:	00 c0       	rjmp	.+0      	; 0x1884 <LCD0_inic+0x6e>
	_delay_us(37);
	LCD0_write(0x01,INST);// clear display
    1884:	60 e0       	ldi	r22, 0x00	; 0
    1886:	70 e0       	ldi	r23, 0x00	; 0
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	0e 94 16 0a 	call	0x142c	; 0x142c <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    188e:	83 ef       	ldi	r24, 0xF3	; 243
    1890:	9b e0       	ldi	r25, 0x0B	; 11
    1892:	01 97       	sbiw	r24, 0x01	; 1
    1894:	f1 f7       	brne	.-4      	; 0x1892 <LCD0_inic+0x7c>
    1896:	00 c0       	rjmp	.+0      	; 0x1898 <LCD0_inic+0x82>
    1898:	00 00       	nop
	_delay_ms(1.53);
	LCD0_write(0x06,INST);// entry mode set (crazy settings)
    189a:	60 e0       	ldi	r22, 0x00	; 0
    189c:	70 e0       	ldi	r23, 0x00	; 0
    189e:	86 e0       	ldi	r24, 0x06	; 6
    18a0:	0e 94 16 0a 	call	0x142c	; 0x142c <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    18a4:	92 e6       	ldi	r25, 0x62	; 98
    18a6:	9a 95       	dec	r25
    18a8:	f1 f7       	brne	.-4      	; 0x18a6 <LCD0_inic+0x90>
    18aa:	00 c0       	rjmp	.+0      	; 0x18ac <LCD0_inic+0x96>
    18ac:	08 95       	ret

000018ae <LCD0enable>:
unsigned int LCD_ticks(unsigned int num);
/*
** procedure and function
*/
LCD0 LCD0enable(volatile uint8_t *ddr, volatile uint8_t *pin, volatile uint8_t *port)
{
    18ae:	1f 93       	push	r17
    18b0:	cf 93       	push	r28
    18b2:	df 93       	push	r29
    18b4:	ec 01       	movw	r28, r24
	//LOCAL VARIABLES
	uint8_t tSREG;
	tSREG=SREG;
    18b6:	1f b7       	in	r17, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    18b8:	8f b7       	in	r24, 0x3f	; 63
    18ba:	8f 77       	andi	r24, 0x7F	; 127
    18bc:	8f bf       	out	0x3f, r24	; 63
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	LCD0 lcd0;
	//import parametros
	lcd0_DDR=ddr;
    18be:	70 93 a7 01 	sts	0x01A7, r23	; 0x8001a7 <lcd0_DDR+0x1>
    18c2:	60 93 a6 01 	sts	0x01A6, r22	; 0x8001a6 <lcd0_DDR>
	lcd0_PIN=pin;
    18c6:	50 93 a0 01 	sts	0x01A0, r21	; 0x8001a0 <lcd0_PIN+0x1>
    18ca:	40 93 9f 01 	sts	0x019F, r20	; 0x80019f <lcd0_PIN>
	lcd0_PORT=port;
    18ce:	30 93 aa 01 	sts	0x01AA, r19	; 0x8001aa <lcd0_PORT+0x1>
    18d2:	20 93 a9 01 	sts	0x01A9, r18	; 0x8001a9 <lcd0_PORT>
	//inic variables
	*lcd0_DDR=0x00;
    18d6:	fb 01       	movw	r30, r22
    18d8:	10 82       	st	Z, r1
	*lcd0_PORT=0xFF;
    18da:	e0 91 a9 01 	lds	r30, 0x01A9	; 0x8001a9 <lcd0_PORT>
    18de:	f0 91 aa 01 	lds	r31, 0x01AA	; 0x8001aa <lcd0_PORT+0x1>
    18e2:	8f ef       	ldi	r24, 0xFF	; 255
    18e4:	80 83       	st	Z, r24
	lcd0_detect=*lcd0_PIN & (1<<NC);
    18e6:	e0 91 9f 01 	lds	r30, 0x019F	; 0x80019f <lcd0_PIN>
    18ea:	f0 91 a0 01 	lds	r31, 0x01A0	; 0x8001a0 <lcd0_PIN+0x1>
    18ee:	80 81       	ld	r24, Z
    18f0:	88 70       	andi	r24, 0x08	; 8
    18f2:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <lcd0_detect>
	lcd0.hspace=LCD0_hspace;
	lcd0.clear=LCD0_clear;
	lcd0.gotoxy=LCD0_gotoxy;
	lcd0.reboot=LCD0_reboot;
	//LCD INIC
	LCD0_inic();
    18f6:	0e 94 0b 0c 	call	0x1816	; 0x1816 <LCD0_inic>
	SREG=tSREG;
    18fa:	1f bf       	out	0x3f, r17	; 63
	//
	return lcd0;
    18fc:	86 e1       	ldi	r24, 0x16	; 22
    18fe:	9a e0       	ldi	r25, 0x0A	; 10
    1900:	99 83       	std	Y+1, r25	; 0x01
    1902:	88 83       	st	Y, r24
    1904:	8a ed       	ldi	r24, 0xDA	; 218
    1906:	9a e0       	ldi	r25, 0x0A	; 10
    1908:	9b 83       	std	Y+3, r25	; 0x03
    190a:	8a 83       	std	Y+2, r24	; 0x02
    190c:	85 e5       	ldi	r24, 0x55	; 85
    190e:	9b e0       	ldi	r25, 0x0B	; 11
    1910:	9d 83       	std	Y+5, r25	; 0x05
    1912:	8c 83       	std	Y+4, r24	; 0x04
    1914:	89 e6       	ldi	r24, 0x69	; 105
    1916:	9b e0       	ldi	r25, 0x0B	; 11
    1918:	9f 83       	std	Y+7, r25	; 0x07
    191a:	8e 83       	std	Y+6, r24	; 0x06
    191c:	80 e7       	ldi	r24, 0x70	; 112
    191e:	9b e0       	ldi	r25, 0x0B	; 11
    1920:	99 87       	std	Y+9, r25	; 0x09
    1922:	88 87       	std	Y+8, r24	; 0x08
    1924:	8b e7       	ldi	r24, 0x7B	; 123
    1926:	9b e0       	ldi	r25, 0x0B	; 11
    1928:	9b 87       	std	Y+11, r25	; 0x0b
    192a:	8a 87       	std	Y+10, r24	; 0x0a
    192c:	8e e8       	ldi	r24, 0x8E	; 142
    192e:	9b e0       	ldi	r25, 0x0B	; 11
    1930:	9d 87       	std	Y+13, r25	; 0x0d
    1932:	8c 87       	std	Y+12, r24	; 0x0c
    1934:	81 ec       	ldi	r24, 0xC1	; 193
    1936:	9b e0       	ldi	r25, 0x0B	; 11
    1938:	9f 87       	std	Y+15, r25	; 0x0f
    193a:	8e 87       	std	Y+14, r24	; 0x0e
    193c:	8f ef       	ldi	r24, 0xFF	; 255
    193e:	9b e0       	ldi	r25, 0x0B	; 11
    1940:	99 8b       	std	Y+17, r25	; 0x11
    1942:	88 8b       	std	Y+16, r24	; 0x10
    1944:	80 ed       	ldi	r24, 0xD0	; 208
    1946:	9b e0       	ldi	r25, 0x0B	; 11
    1948:	9b 8b       	std	Y+19, r25	; 0x13
    194a:	8a 8b       	std	Y+18, r24	; 0x12
    194c:	8f ea       	ldi	r24, 0xAF	; 175
    194e:	9c e0       	ldi	r25, 0x0C	; 12
    1950:	9d 8b       	std	Y+21, r25	; 0x15
    1952:	8c 8b       	std	Y+20, r24	; 0x14
}
    1954:	ce 01       	movw	r24, r28
    1956:	df 91       	pop	r29
    1958:	cf 91       	pop	r28
    195a:	1f 91       	pop	r17
    195c:	08 95       	ret

0000195e <LCD0_reboot>:
	*lcd0_PORT|=(1<<EN);
	LCD_ticks(num);
	*lcd0_PORT&=~(1<<EN);
}
void LCD0_reboot(void)
{
    195e:	cf 93       	push	r28
	//low high detect pin NC
	uint8_t i;
	uint8_t tmp;
	tmp=*lcd0_PIN & (1<<NC);
    1960:	e0 91 9f 01 	lds	r30, 0x019F	; 0x80019f <lcd0_PIN>
    1964:	f0 91 a0 01 	lds	r31, 0x01A0	; 0x8001a0 <lcd0_PIN+0x1>
    1968:	c0 81       	ld	r28, Z
    196a:	c8 70       	andi	r28, 0x08	; 8
	i=tmp^lcd0_detect;
    196c:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <lcd0_detect>
    1970:	8c 27       	eor	r24, r28
	i&=tmp;
	if(i)
    1972:	8c 23       	and	r24, r28
    1974:	11 f0       	breq	.+4      	; 0x197a <LCD0_reboot+0x1c>
		LCD0_inic();
    1976:	0e 94 0b 0c 	call	0x1816	; 0x1816 <LCD0_inic>
	lcd0_detect=tmp;
    197a:	c0 93 a8 01 	sts	0x01A8, r28	; 0x8001a8 <lcd0_detect>
}
    197e:	cf 91       	pop	r28
    1980:	08 95       	ret

00001982 <PORTINIT>:
		
    }//endwhile
}//endmain
/***Prototypes***/
void PORTINIT(void){
	DDRD = (1<<0) | (1<<4) | (1<<5);
    1982:	81 e3       	ldi	r24, 0x31	; 49
    1984:	8a b9       	out	0x0a, r24	; 10
	PORTD = (1<<4) | (1<<5);
    1986:	80 e3       	ldi	r24, 0x30	; 48
    1988:	8b b9       	out	0x0b, r24	; 11
    198a:	08 95       	ret

0000198c <main>:
volatile uint16_t counter=0;
//Prototype header
void PORTINIT(void);
/******/
int main(void)
{
    198c:	cf 93       	push	r28
    198e:	df 93       	push	r29
    1990:	cd b7       	in	r28, 0x3d	; 61
    1992:	de b7       	in	r29, 0x3e	; 62
    1994:	c3 5b       	subi	r28, 0xB3	; 179
    1996:	d1 09       	sbc	r29, r1
    1998:	0f b6       	in	r0, 0x3f	; 63
    199a:	f8 94       	cli
    199c:	de bf       	out	0x3e, r29	; 62
    199e:	0f be       	out	0x3f, r0	; 63
    19a0:	cd bf       	out	0x3d, r28	; 61
	PORTINIT();
    19a2:	0e 94 c1 0c 	call	0x1982	; 0x1982 <PORTINIT>
	uint16_t tN_off;
	uint16_t tN_on;
	char input;
	char value[6];
	//Initialize objects
	ATMEGA324 atmega324 = ATMEGA324enable();
    19a6:	ce 01       	movw	r24, r28
    19a8:	07 96       	adiw	r24, 0x07	; 7
    19aa:	0e 94 b1 01 	call	0x362	; 0x362 <ATMEGA324enable>
	TIMER_COUNTER1 tim1 = TIMER_COUNTER1enable(4,3);//4,0
    19ae:	43 e0       	ldi	r20, 0x03	; 3
    19b0:	64 e0       	ldi	r22, 0x04	; 4
    19b2:	ce 01       	movw	r24, r28
    19b4:	41 96       	adiw	r24, 0x11	; 17
    19b6:	0e 94 5d 02 	call	0x4ba	; 0x4ba <TIMER_COUNTER1enable>
    19ba:	29 89       	ldd	r18, Y+17	; 0x11
    19bc:	3a 89       	ldd	r19, Y+18	; 0x12
    19be:	ce 54       	subi	r28, 0x4E	; 78
    19c0:	df 4f       	sbci	r29, 0xFF	; 255
    19c2:	39 83       	std	Y+1, r19	; 0x01
    19c4:	28 83       	st	Y, r18
    19c6:	c2 5b       	subi	r28, 0xB2	; 178
    19c8:	d0 40       	sbci	r29, 0x00	; 0
    19ca:	8d 89       	ldd	r24, Y+21	; 0x15
    19cc:	9e 89       	ldd	r25, Y+22	; 0x16
    19ce:	c7 55       	subi	r28, 0x57	; 87
    19d0:	df 4f       	sbci	r29, 0xFF	; 255
    19d2:	99 83       	std	Y+1, r25	; 0x01
    19d4:	88 83       	st	Y, r24
    19d6:	c9 5a       	subi	r28, 0xA9	; 169
    19d8:	d0 40       	sbci	r29, 0x00	; 0
    19da:	e9 8d       	ldd	r30, Y+25	; 0x19
    19dc:	fa 8d       	ldd	r31, Y+26	; 0x1a
    19de:	c2 55       	subi	r28, 0x52	; 82
    19e0:	df 4f       	sbci	r29, 0xFF	; 255
    19e2:	f9 83       	std	Y+1, r31	; 0x01
    19e4:	e8 83       	st	Y, r30
    19e6:	ce 5a       	subi	r28, 0xAE	; 174
    19e8:	d0 40       	sbci	r29, 0x00	; 0
    19ea:	2b 8d       	ldd	r18, Y+27	; 0x1b
    19ec:	3c 8d       	ldd	r19, Y+28	; 0x1c
    19ee:	c0 55       	subi	r28, 0x50	; 80
    19f0:	df 4f       	sbci	r29, 0xFF	; 255
    19f2:	39 83       	std	Y+1, r19	; 0x01
    19f4:	28 83       	st	Y, r18
    19f6:	c0 5b       	subi	r28, 0xB0	; 176
    19f8:	d0 40       	sbci	r29, 0x00	; 0
	KEYPAD keypad = KEYPADenable(&DDRA,&PINA,&PORTA);
    19fa:	42 e2       	ldi	r20, 0x22	; 34
    19fc:	50 e0       	ldi	r21, 0x00	; 0
    19fe:	60 e2       	ldi	r22, 0x20	; 32
    1a00:	70 e0       	ldi	r23, 0x00	; 0
    1a02:	81 e2       	ldi	r24, 0x21	; 33
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	0e 94 be 09 	call	0x137c	; 0x137c <KEYPADenable>
    1a0a:	2d 8f       	std	Y+29, r18	; 0x1d
    1a0c:	3e 8f       	std	Y+30, r19	; 0x1e
	LCD0 lcd0 = LCD0enable(&DDRC,&PINC,&PORTC);
    1a0e:	28 e2       	ldi	r18, 0x28	; 40
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	46 e2       	ldi	r20, 0x26	; 38
    1a14:	50 e0       	ldi	r21, 0x00	; 0
    1a16:	67 e2       	ldi	r22, 0x27	; 39
    1a18:	70 e0       	ldi	r23, 0x00	; 0
    1a1a:	ce 01       	movw	r24, r28
    1a1c:	83 96       	adiw	r24, 0x23	; 35
    1a1e:	0e 94 57 0c 	call	0x18ae	; 0x18ae <LCD0enable>
    1a22:	0f a1       	ldd	r16, Y+39	; 0x27
    1a24:	18 a5       	ldd	r17, Y+40	; 0x28
    1a26:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a28:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a2a:	cf 55       	subi	r28, 0x5F	; 95
    1a2c:	df 4f       	sbci	r29, 0xFF	; 255
    1a2e:	99 83       	std	Y+1, r25	; 0x01
    1a30:	88 83       	st	Y, r24
    1a32:	c1 5a       	subi	r28, 0xA1	; 161
    1a34:	d0 40       	sbci	r29, 0x00	; 0
    1a36:	cf a4       	ldd	r12, Y+47	; 0x2f
    1a38:	d8 a8       	ldd	r13, Y+48	; 0x30
    1a3a:	a9 a8       	ldd	r10, Y+49	; 0x31
    1a3c:	ba a8       	ldd	r11, Y+50	; 0x32
    1a3e:	6d a8       	ldd	r6, Y+53	; 0x35
    1a40:	7e a8       	ldd	r7, Y+54	; 0x36
	FUNC func = FUNCenable();
    1a42:	ce 01       	movw	r24, r28
    1a44:	c9 96       	adiw	r24, 0x39	; 57
    1a46:	0e 94 b8 07 	call	0xf70	; 0xf70 <FUNCenable>
    1a4a:	6f 96       	adiw	r28, 0x1f	; 31
    1a4c:	8e ac       	ldd	r8, Y+62	; 0x3e
    1a4e:	9f ac       	ldd	r9, Y+63	; 0x3f
    1a50:	6f 97       	sbiw	r28, 0x1f	; 31
	EEPROM eeprom = EEPROMenable();
    1a52:	ce 01       	movw	r24, r28
    1a54:	8d 57       	subi	r24, 0x7D	; 125
    1a56:	9f 4f       	sbci	r25, 0xFF	; 255
    1a58:	0e 94 75 03 	call	0x6ea	; 0x6ea <EEPROMenable>
    1a5c:	c7 57       	subi	r28, 0x77	; 119
    1a5e:	df 4f       	sbci	r29, 0xFF	; 255
    1a60:	48 80       	ld	r4, Y
    1a62:	59 80       	ldd	r5, Y+1	; 0x01
    1a64:	c9 58       	subi	r28, 0x89	; 137
    1a66:	d0 40       	sbci	r29, 0x00	; 0
    1a68:	c3 57       	subi	r28, 0x73	; 115
    1a6a:	df 4f       	sbci	r29, 0xFF	; 255
    1a6c:	e8 81       	ld	r30, Y
    1a6e:	f9 81       	ldd	r31, Y+1	; 0x01
    1a70:	cd 58       	subi	r28, 0x8D	; 141
    1a72:	d0 40       	sbci	r29, 0x00	; 0
    1a74:	c9 55       	subi	r28, 0x59	; 89
    1a76:	df 4f       	sbci	r29, 0xFF	; 255
    1a78:	f9 83       	std	Y+1, r31	; 0x01
    1a7a:	e8 83       	st	Y, r30
    1a7c:	c7 5a       	subi	r28, 0xA7	; 167
    1a7e:	d0 40       	sbci	r29, 0x00	; 0
    /* Init Values */
	lcd0.gotoxy(0,0);
    1a80:	60 e0       	ldi	r22, 0x00	; 0
    1a82:	70 e0       	ldi	r23, 0x00	; 0
    1a84:	80 e0       	ldi	r24, 0x00	; 0
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	f3 01       	movw	r30, r6
    1a8a:	09 95       	icall
	lcd0.string_size("Bom dia !",12);
    1a8c:	6c e0       	ldi	r22, 0x0C	; 12
    1a8e:	84 e1       	ldi	r24, 0x14	; 20
    1a90:	91 e0       	ldi	r25, 0x01	; 1
    1a92:	f6 01       	movw	r30, r12
    1a94:	09 95       	icall
	lcd0.BF();
    1a96:	f8 01       	movw	r30, r16
    1a98:	09 95       	icall
	tcompare=compare=eeprom.read_word((uint16_t*)0);
    1a9a:	80 e0       	ldi	r24, 0x00	; 0
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	f2 01       	movw	r30, r4
    1aa0:	09 95       	icall
    1aa2:	7c 01       	movw	r14, r24
	prescaler=eeprom.read_word((uint16_t*)4);
    1aa4:	84 e0       	ldi	r24, 0x04	; 4
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	f2 01       	movw	r30, r4
    1aaa:	09 95       	icall
    1aac:	cd 55       	subi	r28, 0x5D	; 93
    1aae:	df 4f       	sbci	r29, 0xFF	; 255
    1ab0:	99 83       	std	Y+1, r25	; 0x01
    1ab2:	88 83       	st	Y, r24
    1ab4:	c3 5a       	subi	r28, 0xA3	; 163
    1ab6:	d0 40       	sbci	r29, 0x00	; 0
	tN_off=N_off=eeprom.read_word((uint16_t*)8);
    1ab8:	88 e0       	ldi	r24, 0x08	; 8
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	f2 01       	movw	r30, r4
    1abe:	09 95       	icall
    1ac0:	c5 55       	subi	r28, 0x55	; 85
    1ac2:	df 4f       	sbci	r29, 0xFF	; 255
    1ac4:	99 83       	std	Y+1, r25	; 0x01
    1ac6:	88 83       	st	Y, r24
    1ac8:	cb 5a       	subi	r28, 0xAB	; 171
    1aca:	d0 40       	sbci	r29, 0x00	; 0
    1acc:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <N_off+0x1>
    1ad0:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <N_off>
	tN_on=N_on=eeprom.read_word((uint16_t*)12);
    1ad4:	8c e0       	ldi	r24, 0x0C	; 12
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	f2 01       	movw	r30, r4
    1ada:	09 95       	icall
    1adc:	2c 01       	movw	r4, r24
    1ade:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <N_on+0x1>
    1ae2:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <N_on>
	switch(prescaler){
    1ae6:	cd 55       	subi	r28, 0x5D	; 93
    1ae8:	df 4f       	sbci	r29, 0xFF	; 255
    1aea:	28 81       	ld	r18, Y
    1aec:	39 81       	ldd	r19, Y+1	; 0x01
    1aee:	c3 5a       	subi	r28, 0xA3	; 163
    1af0:	d0 40       	sbci	r29, 0x00	; 0
    1af2:	28 30       	cpi	r18, 0x08	; 8
    1af4:	31 05       	cpc	r19, r1
    1af6:	c9 f0       	breq	.+50     	; 0x1b2a <main+0x19e>
    1af8:	20 f4       	brcc	.+8      	; 0x1b02 <main+0x176>
    1afa:	21 30       	cpi	r18, 0x01	; 1
    1afc:	31 05       	cpc	r19, r1
    1afe:	71 f0       	breq	.+28     	; 0x1b1c <main+0x190>
    1b00:	29 c0       	rjmp	.+82     	; 0x1b54 <main+0x1c8>
    1b02:	cd 55       	subi	r28, 0x5D	; 93
    1b04:	df 4f       	sbci	r29, 0xFF	; 255
    1b06:	88 81       	ld	r24, Y
    1b08:	99 81       	ldd	r25, Y+1	; 0x01
    1b0a:	c3 5a       	subi	r28, 0xA3	; 163
    1b0c:	d0 40       	sbci	r29, 0x00	; 0
    1b0e:	80 34       	cpi	r24, 0x40	; 64
    1b10:	91 05       	cpc	r25, r1
    1b12:	91 f0       	breq	.+36     	; 0x1b38 <main+0x1ac>
    1b14:	81 15       	cp	r24, r1
    1b16:	91 40       	sbci	r25, 0x01	; 1
    1b18:	b1 f0       	breq	.+44     	; 0x1b46 <main+0x1ba>
    1b1a:	1c c0       	rjmp	.+56     	; 0x1b54 <main+0x1c8>
		case 1:
			steprescaler=1;
    1b1c:	f1 e0       	ldi	r31, 0x01	; 1
    1b1e:	c3 55       	subi	r28, 0x53	; 83
    1b20:	df 4f       	sbci	r29, 0xFF	; 255
    1b22:	f8 83       	st	Y, r31
    1b24:	cd 5a       	subi	r28, 0xAD	; 173
    1b26:	d0 40       	sbci	r29, 0x00	; 0
    1b28:	1a c0       	rjmp	.+52     	; 0x1b5e <main+0x1d2>
			break;
		case 8:
			steprescaler=2;
    1b2a:	22 e0       	ldi	r18, 0x02	; 2
    1b2c:	c3 55       	subi	r28, 0x53	; 83
    1b2e:	df 4f       	sbci	r29, 0xFF	; 255
    1b30:	28 83       	st	Y, r18
    1b32:	cd 5a       	subi	r28, 0xAD	; 173
    1b34:	d0 40       	sbci	r29, 0x00	; 0
			break;
    1b36:	13 c0       	rjmp	.+38     	; 0x1b5e <main+0x1d2>
		case 64:
			steprescaler=3;
    1b38:	33 e0       	ldi	r19, 0x03	; 3
    1b3a:	c3 55       	subi	r28, 0x53	; 83
    1b3c:	df 4f       	sbci	r29, 0xFF	; 255
    1b3e:	38 83       	st	Y, r19
    1b40:	cd 5a       	subi	r28, 0xAD	; 173
    1b42:	d0 40       	sbci	r29, 0x00	; 0
			break;
    1b44:	0c c0       	rjmp	.+24     	; 0x1b5e <main+0x1d2>
		case 256:
			steprescaler=4;
    1b46:	84 e0       	ldi	r24, 0x04	; 4
    1b48:	c3 55       	subi	r28, 0x53	; 83
    1b4a:	df 4f       	sbci	r29, 0xFF	; 255
    1b4c:	88 83       	st	Y, r24
    1b4e:	cd 5a       	subi	r28, 0xAD	; 173
    1b50:	d0 40       	sbci	r29, 0x00	; 0
			break;
    1b52:	05 c0       	rjmp	.+10     	; 0x1b5e <main+0x1d2>
	//Local var
	//uint8_t inc=0;
	uint16_t compare;
	uint16_t tcompare;
	uint16_t prescaler;
	uint8_t steprescaler=0;
    1b54:	c3 55       	subi	r28, 0x53	; 83
    1b56:	df 4f       	sbci	r29, 0xFF	; 255
    1b58:	18 82       	st	Y, r1
    1b5a:	cd 5a       	subi	r28, 0xAD	; 173
    1b5c:	d0 40       	sbci	r29, 0x00	; 0
			steprescaler=0;
			break;
		default:
			break;
	}//endswitch	
	tim1.compoutmodeA(1);
    1b5e:	81 e0       	ldi	r24, 0x01	; 1
    1b60:	ce 54       	subi	r28, 0x4E	; 78
    1b62:	df 4f       	sbci	r29, 0xFF	; 255
    1b64:	e8 81       	ld	r30, Y
    1b66:	f9 81       	ldd	r31, Y+1	; 0x01
    1b68:	c2 5b       	subi	r28, 0xB2	; 178
    1b6a:	d0 40       	sbci	r29, 0x00	; 0
    1b6c:	09 95       	icall
	tim1.compareA(compare);
    1b6e:	c7 01       	movw	r24, r14
    1b70:	c7 55       	subi	r28, 0x57	; 87
    1b72:	df 4f       	sbci	r29, 0xFF	; 255
    1b74:	e8 81       	ld	r30, Y
    1b76:	f9 81       	ldd	r31, Y+1	; 0x01
    1b78:	c9 5a       	subi	r28, 0xA9	; 169
    1b7a:	d0 40       	sbci	r29, 0x00	; 0
    1b7c:	09 95       	icall
	tim1.start(prescaler);
    1b7e:	cd 55       	subi	r28, 0x5D	; 93
    1b80:	df 4f       	sbci	r29, 0xFF	; 255
    1b82:	88 81       	ld	r24, Y
    1b84:	99 81       	ldd	r25, Y+1	; 0x01
    1b86:	c3 5a       	subi	r28, 0xA3	; 163
    1b88:	d0 40       	sbci	r29, 0x00	; 0
    1b8a:	c2 55       	subi	r28, 0x52	; 82
    1b8c:	df 4f       	sbci	r29, 0xFF	; 255
    1b8e:	e8 81       	ld	r30, Y
    1b90:	f9 81       	ldd	r31, Y+1	; 0x01
    1b92:	ce 5a       	subi	r28, 0xAE	; 174
    1b94:	d0 40       	sbci	r29, 0x00	; 0
    1b96:	09 95       	icall
	EEPROM eeprom = EEPROMenable();
    /* Init Values */
	lcd0.gotoxy(0,0);
	lcd0.string_size("Bom dia !",12);
	lcd0.BF();
	tcompare=compare=eeprom.read_word((uint16_t*)0);
    1b98:	cb 55       	subi	r28, 0x5B	; 91
    1b9a:	df 4f       	sbci	r29, 0xFF	; 255
    1b9c:	f9 82       	std	Y+1, r15	; 0x01
    1b9e:	e8 82       	st	Y, r14
    1ba0:	c5 5a       	subi	r28, 0xA5	; 165
    1ba2:	d0 40       	sbci	r29, 0x00	; 0
			//Adjust prescaler 'C' toggles between possible selections
			if(input=='C'){
				switch(steprescaler){
					case 0:
						prescaler=1;
						steprescaler=1;
    1ba4:	22 24       	eor	r2, r2
    1ba6:	23 94       	inc	r2
	tim1.compoutmodeA(1);
	tim1.compareA(compare);
	tim1.start(prescaler);
    while (True)
    {
		atmega324.ioread();
    1ba8:	ef 81       	ldd	r30, Y+7	; 0x07
    1baa:	f8 85       	ldd	r31, Y+8	; 0x08
    1bac:	09 95       	icall
		input=keypad.getkey();
    1bae:	ed 8d       	ldd	r30, Y+29	; 0x1d
    1bb0:	fe 8d       	ldd	r31, Y+30	; 0x1e
    1bb2:	09 95       	icall
    1bb4:	38 2e       	mov	r3, r24
		if(input){
    1bb6:	88 23       	and	r24, r24
    1bb8:	09 f4       	brne	.+2      	; 0x1bbc <main+0x230>
    1bba:	2b c3       	rjmp	.+1622   	; 0x2212 <main+0x886>
			lcd0.BF();
    1bbc:	f8 01       	movw	r30, r16
    1bbe:	09 95       	icall
			lcd0.gotoxy(1,0);
    1bc0:	60 e0       	ldi	r22, 0x00	; 0
    1bc2:	70 e0       	ldi	r23, 0x00	; 0
    1bc4:	81 e0       	ldi	r24, 0x01	; 1
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	f3 01       	movw	r30, r6
    1bca:	09 95       	icall
			lcd0.string("Key: ");
    1bcc:	8e e1       	ldi	r24, 0x1E	; 30
    1bce:	91 e0       	ldi	r25, 0x01	; 1
    1bd0:	cf 55       	subi	r28, 0x5F	; 95
    1bd2:	df 4f       	sbci	r29, 0xFF	; 255
    1bd4:	e8 81       	ld	r30, Y
    1bd6:	f9 81       	ldd	r31, Y+1	; 0x01
    1bd8:	c1 5a       	subi	r28, 0xA1	; 161
    1bda:	d0 40       	sbci	r29, 0x00	; 0
    1bdc:	09 95       	icall
			lcd0.putch(input);
    1bde:	e9 a5       	ldd	r30, Y+41	; 0x29
    1be0:	fa a5       	ldd	r31, Y+42	; 0x2a
    1be2:	83 2d       	mov	r24, r3
    1be4:	09 95       	icall
			lcd0.hspace(3);
    1be6:	83 e0       	ldi	r24, 0x03	; 3
    1be8:	f5 01       	movw	r30, r10
    1bea:	09 95       	icall
			lcd0.BF();
    1bec:	f8 01       	movw	r30, r16
    1bee:	09 95       	icall
			lcd0.gotoxy(0,0);
    1bf0:	60 e0       	ldi	r22, 0x00	; 0
    1bf2:	70 e0       	ldi	r23, 0x00	; 0
    1bf4:	80 e0       	ldi	r24, 0x00	; 0
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	f3 01       	movw	r30, r6
    1bfa:	09 95       	icall
			lcd0.string_size("Running !",12);
    1bfc:	6c e0       	ldi	r22, 0x0C	; 12
    1bfe:	84 e2       	ldi	r24, 0x24	; 36
    1c00:	91 e0       	ldi	r25, 0x01	; 1
    1c02:	f6 01       	movw	r30, r12
    1c04:	09 95       	icall
			lcd0.BF();
    1c06:	f8 01       	movw	r30, r16
    1c08:	09 95       	icall
			//DEFAULT
			if(input == 'D'){
    1c0a:	f4 e4       	ldi	r31, 0x44	; 68
    1c0c:	3f 12       	cpse	r3, r31
    1c0e:	58 c0       	rjmp	.+176    	; 0x1cc0 <main+0x334>
				tcompare=compare=2048;
				prescaler=1024;
				steprescaler=0;
				tN_off=N_off=10;
    1c10:	2a e0       	ldi	r18, 0x0A	; 10
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	30 93 13 01 	sts	0x0113, r19	; 0x800113 <N_off+0x1>
    1c18:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <N_off>
				tN_on=N_on=8000;
    1c1c:	80 e4       	ldi	r24, 0x40	; 64
    1c1e:	9f e1       	ldi	r25, 0x1F	; 31
    1c20:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <N_on+0x1>
    1c24:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <N_on>
				tim1.stop();
    1c28:	c0 55       	subi	r28, 0x50	; 80
    1c2a:	df 4f       	sbci	r29, 0xFF	; 255
    1c2c:	e8 81       	ld	r30, Y
    1c2e:	f9 81       	ldd	r31, Y+1	; 0x01
    1c30:	c0 5b       	subi	r28, 0xB0	; 176
    1c32:	d0 40       	sbci	r29, 0x00	; 0
    1c34:	09 95       	icall
				tim1.compoutmodeA(1);
    1c36:	82 2d       	mov	r24, r2
    1c38:	ce 54       	subi	r28, 0x4E	; 78
    1c3a:	df 4f       	sbci	r29, 0xFF	; 255
    1c3c:	e8 81       	ld	r30, Y
    1c3e:	f9 81       	ldd	r31, Y+1	; 0x01
    1c40:	c2 5b       	subi	r28, 0xB2	; 178
    1c42:	d0 40       	sbci	r29, 0x00	; 0
    1c44:	09 95       	icall
				tim1.compareA(compare);
    1c46:	80 e0       	ldi	r24, 0x00	; 0
    1c48:	98 e0       	ldi	r25, 0x08	; 8
    1c4a:	c7 55       	subi	r28, 0x57	; 87
    1c4c:	df 4f       	sbci	r29, 0xFF	; 255
    1c4e:	e8 81       	ld	r30, Y
    1c50:	f9 81       	ldd	r31, Y+1	; 0x01
    1c52:	c9 5a       	subi	r28, 0xA9	; 169
    1c54:	d0 40       	sbci	r29, 0x00	; 0
    1c56:	09 95       	icall
				tim1.start(prescaler);
    1c58:	80 e0       	ldi	r24, 0x00	; 0
    1c5a:	94 e0       	ldi	r25, 0x04	; 4
    1c5c:	c2 55       	subi	r28, 0x52	; 82
    1c5e:	df 4f       	sbci	r29, 0xFF	; 255
    1c60:	e8 81       	ld	r30, Y
    1c62:	f9 81       	ldd	r31, Y+1	; 0x01
    1c64:	ce 5a       	subi	r28, 0xAE	; 174
    1c66:	d0 40       	sbci	r29, 0x00	; 0
    1c68:	09 95       	icall
			//DEFAULT
			if(input == 'D'){
				tcompare=compare=2048;
				prescaler=1024;
				steprescaler=0;
				tN_off=N_off=10;
    1c6a:	2a e0       	ldi	r18, 0x0A	; 10
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	c5 55       	subi	r28, 0x55	; 85
    1c70:	df 4f       	sbci	r29, 0xFF	; 255
    1c72:	39 83       	std	Y+1, r19	; 0x01
    1c74:	28 83       	st	Y, r18
    1c76:	cb 5a       	subi	r28, 0xAB	; 171
    1c78:	d0 40       	sbci	r29, 0x00	; 0
			lcd0.BF();
			//DEFAULT
			if(input == 'D'){
				tcompare=compare=2048;
				prescaler=1024;
				steprescaler=0;
    1c7a:	c3 55       	subi	r28, 0x53	; 83
    1c7c:	df 4f       	sbci	r29, 0xFF	; 255
    1c7e:	18 82       	st	Y, r1
    1c80:	cd 5a       	subi	r28, 0xAD	; 173
    1c82:	d0 40       	sbci	r29, 0x00	; 0
			lcd0.string_size("Running !",12);
			lcd0.BF();
			//DEFAULT
			if(input == 'D'){
				tcompare=compare=2048;
				prescaler=1024;
    1c84:	cd 55       	subi	r28, 0x5D	; 93
    1c86:	df 4f       	sbci	r29, 0xFF	; 255
    1c88:	18 82       	st	Y, r1
    1c8a:	c3 5a       	subi	r28, 0xA3	; 163
    1c8c:	d0 40       	sbci	r29, 0x00	; 0
    1c8e:	34 e0       	ldi	r19, 0x04	; 4
    1c90:	cc 55       	subi	r28, 0x5C	; 92
    1c92:	df 4f       	sbci	r29, 0xFF	; 255
    1c94:	38 83       	st	Y, r19
    1c96:	c4 5a       	subi	r28, 0xA4	; 164
    1c98:	d0 40       	sbci	r29, 0x00	; 0
			lcd0.gotoxy(0,0);
			lcd0.string_size("Running !",12);
			lcd0.BF();
			//DEFAULT
			if(input == 'D'){
				tcompare=compare=2048;
    1c9a:	80 e0       	ldi	r24, 0x00	; 0
    1c9c:	98 e0       	ldi	r25, 0x08	; 8
    1c9e:	cb 55       	subi	r28, 0x5B	; 91
    1ca0:	df 4f       	sbci	r29, 0xFF	; 255
    1ca2:	99 83       	std	Y+1, r25	; 0x01
    1ca4:	88 83       	st	Y, r24
    1ca6:	c5 5a       	subi	r28, 0xA5	; 165
    1ca8:	d0 40       	sbci	r29, 0x00	; 0
    1caa:	e1 2c       	mov	r14, r1
    1cac:	68 94       	set
    1cae:	ff 24       	eor	r15, r15
    1cb0:	f3 f8       	bld	r15, 3
				prescaler=1024;
				steprescaler=0;
				tN_off=N_off=10;
				tN_on=N_on=8000;
    1cb2:	0f 2e       	mov	r0, r31
    1cb4:	f0 e4       	ldi	r31, 0x40	; 64
    1cb6:	4f 2e       	mov	r4, r31
    1cb8:	ff e1       	ldi	r31, 0x1F	; 31
    1cba:	5f 2e       	mov	r5, r31
    1cbc:	f0 2d       	mov	r31, r0
    1cbe:	32 c0       	rjmp	.+100    	; 0x1d24 <main+0x398>
				tim1.compareA(compare);
				tim1.start(prescaler);
			}
			//Adjust Impulses off and impulses on
			//off decrement
			if(input=='*'){
    1cc0:	9a e2       	ldi	r25, 0x2A	; 42
    1cc2:	39 12       	cpse	r3, r25
    1cc4:	16 c0       	rjmp	.+44     	; 0x1cf2 <main+0x366>
				tN_on-=1;
    1cc6:	e1 e0       	ldi	r30, 0x01	; 1
    1cc8:	4e 1a       	sub	r4, r30
    1cca:	51 08       	sbc	r5, r1
				if(tN_on>N_on || tN_on<0)
    1ccc:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <N_on>
    1cd0:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <N_on+0x1>
    1cd4:	84 15       	cp	r24, r4
    1cd6:	95 05       	cpc	r25, r5
    1cd8:	38 f4       	brcc	.+14     	; 0x1ce8 <main+0x35c>
					tN_on=N_on=0;
    1cda:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <N_on+0x1>
    1cde:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <N_on>
    1ce2:	41 2c       	mov	r4, r1
    1ce4:	51 2c       	mov	r5, r1
    1ce6:	39 c0       	rjmp	.+114    	; 0x1d5a <main+0x3ce>
				else
					N_on=tN_on;
    1ce8:	50 92 11 01 	sts	0x0111, r5	; 0x800111 <N_on+0x1>
    1cec:	40 92 10 01 	sts	0x0110, r4	; 0x800110 <N_on>
    1cf0:	34 c0       	rjmp	.+104    	; 0x1d5a <main+0x3ce>
			}
			if(input=='0'){
    1cf2:	f0 e3       	ldi	r31, 0x30	; 48
    1cf4:	3f 12       	cpse	r3, r31
    1cf6:	16 c0       	rjmp	.+44     	; 0x1d24 <main+0x398>
				tN_on-=10;
    1cf8:	2a e0       	ldi	r18, 0x0A	; 10
    1cfa:	42 1a       	sub	r4, r18
    1cfc:	51 08       	sbc	r5, r1
				if(tN_on>N_on)
    1cfe:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <N_on>
    1d02:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <N_on+0x1>
    1d06:	84 15       	cp	r24, r4
    1d08:	95 05       	cpc	r25, r5
    1d0a:	38 f4       	brcc	.+14     	; 0x1d1a <main+0x38e>
					tN_on=N_on=0;
    1d0c:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <N_on+0x1>
    1d10:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <N_on>
    1d14:	41 2c       	mov	r4, r1
    1d16:	51 2c       	mov	r5, r1
    1d18:	3b c0       	rjmp	.+118    	; 0x1d90 <main+0x404>
				else
					N_on=tN_on;
    1d1a:	50 92 11 01 	sts	0x0111, r5	; 0x800111 <N_on+0x1>
    1d1e:	40 92 10 01 	sts	0x0110, r4	; 0x800110 <N_on>
    1d22:	36 c0       	rjmp	.+108    	; 0x1d90 <main+0x404>
			}
			//off increment
			if(input=='7'){
    1d24:	37 e3       	ldi	r19, 0x37	; 55
    1d26:	33 12       	cpse	r3, r19
    1d28:	18 c0       	rjmp	.+48     	; 0x1d5a <main+0x3ce>
				tN_on+=1;
    1d2a:	8f ef       	ldi	r24, 0xFF	; 255
    1d2c:	48 1a       	sub	r4, r24
    1d2e:	58 0a       	sbc	r5, r24
				if(tN_on<N_on)
    1d30:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <N_on>
    1d34:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <N_on+0x1>
    1d38:	48 16       	cp	r4, r24
    1d3a:	59 06       	cpc	r5, r25
    1d3c:	48 f4       	brcc	.+18     	; 0x1d50 <main+0x3c4>
					tN_on=N_on=65535;
    1d3e:	9f ef       	ldi	r25, 0xFF	; 255
    1d40:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <N_on>
    1d44:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <N_on+0x1>
    1d48:	44 24       	eor	r4, r4
    1d4a:	4a 94       	dec	r4
    1d4c:	54 2c       	mov	r5, r4
    1d4e:	53 c0       	rjmp	.+166    	; 0x1df6 <main+0x46a>
				else
					N_on=tN_on;
    1d50:	50 92 11 01 	sts	0x0111, r5	; 0x800111 <N_on+0x1>
    1d54:	40 92 10 01 	sts	0x0110, r4	; 0x800110 <N_on>
    1d58:	4e c0       	rjmp	.+156    	; 0x1df6 <main+0x46a>
			}
			if(input=='8'){
    1d5a:	e8 e3       	ldi	r30, 0x38	; 56
    1d5c:	3e 12       	cpse	r3, r30
    1d5e:	18 c0       	rjmp	.+48     	; 0x1d90 <main+0x404>
				tN_on+=10;
    1d60:	fa e0       	ldi	r31, 0x0A	; 10
    1d62:	4f 0e       	add	r4, r31
    1d64:	51 1c       	adc	r5, r1
				if(tN_on<N_on)
    1d66:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <N_on>
    1d6a:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <N_on+0x1>
    1d6e:	48 16       	cp	r4, r24
    1d70:	59 06       	cpc	r5, r25
    1d72:	48 f4       	brcc	.+18     	; 0x1d86 <main+0x3fa>
					tN_on=N_on=65535;
    1d74:	2f ef       	ldi	r18, 0xFF	; 255
    1d76:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <N_on>
    1d7a:	20 93 11 01 	sts	0x0111, r18	; 0x800111 <N_on+0x1>
    1d7e:	44 24       	eor	r4, r4
    1d80:	4a 94       	dec	r4
    1d82:	54 2c       	mov	r5, r4
    1d84:	6e c0       	rjmp	.+220    	; 0x1e62 <main+0x4d6>
				else
					N_on=tN_on;
    1d86:	50 92 11 01 	sts	0x0111, r5	; 0x800111 <N_on+0x1>
    1d8a:	40 92 10 01 	sts	0x0110, r4	; 0x800110 <N_on>
    1d8e:	69 c0       	rjmp	.+210    	; 0x1e62 <main+0x4d6>
			}
			//on decrement
			if(input==35){
    1d90:	33 e2       	ldi	r19, 0x23	; 35
    1d92:	33 12       	cpse	r3, r19
    1d94:	30 c0       	rjmp	.+96     	; 0x1df6 <main+0x46a>
				tN_off-=1;
    1d96:	c5 55       	subi	r28, 0x55	; 85
    1d98:	df 4f       	sbci	r29, 0xFF	; 255
    1d9a:	88 81       	ld	r24, Y
    1d9c:	99 81       	ldd	r25, Y+1	; 0x01
    1d9e:	cb 5a       	subi	r28, 0xAB	; 171
    1da0:	d0 40       	sbci	r29, 0x00	; 0
    1da2:	01 97       	sbiw	r24, 0x01	; 1
    1da4:	c5 55       	subi	r28, 0x55	; 85
    1da6:	df 4f       	sbci	r29, 0xFF	; 255
    1da8:	99 83       	std	Y+1, r25	; 0x01
    1daa:	88 83       	st	Y, r24
    1dac:	cb 5a       	subi	r28, 0xAB	; 171
    1dae:	d0 40       	sbci	r29, 0x00	; 0
				if(tN_off>N_off || tN_off<0)
    1db0:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <N_off>
    1db4:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <N_off+0x1>
    1db8:	c5 55       	subi	r28, 0x55	; 85
    1dba:	df 4f       	sbci	r29, 0xFF	; 255
    1dbc:	e8 81       	ld	r30, Y
    1dbe:	f9 81       	ldd	r31, Y+1	; 0x01
    1dc0:	cb 5a       	subi	r28, 0xAB	; 171
    1dc2:	d0 40       	sbci	r29, 0x00	; 0
    1dc4:	8e 17       	cp	r24, r30
    1dc6:	9f 07       	cpc	r25, r31
    1dc8:	58 f4       	brcc	.+22     	; 0x1de0 <main+0x454>
					tN_off=N_off=0;
    1dca:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <N_off+0x1>
    1dce:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <N_off>
    1dd2:	c5 55       	subi	r28, 0x55	; 85
    1dd4:	df 4f       	sbci	r29, 0xFF	; 255
    1dd6:	19 82       	std	Y+1, r1	; 0x01
    1dd8:	18 82       	st	Y, r1
    1dda:	cb 5a       	subi	r28, 0xAB	; 171
    1ddc:	d0 40       	sbci	r29, 0x00	; 0
    1dde:	6d c0       	rjmp	.+218    	; 0x1eba <main+0x52e>
				else
					N_off=tN_off;
    1de0:	c5 55       	subi	r28, 0x55	; 85
    1de2:	df 4f       	sbci	r29, 0xFF	; 255
    1de4:	28 81       	ld	r18, Y
    1de6:	39 81       	ldd	r19, Y+1	; 0x01
    1de8:	cb 5a       	subi	r28, 0xAB	; 171
    1dea:	d0 40       	sbci	r29, 0x00	; 0
    1dec:	30 93 13 01 	sts	0x0113, r19	; 0x800113 <N_off+0x1>
    1df0:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <N_off>
    1df4:	62 c0       	rjmp	.+196    	; 0x1eba <main+0x52e>
			}
			//on increment
			if(input=='9'){
    1df6:	39 e3       	ldi	r19, 0x39	; 57
    1df8:	33 12       	cpse	r3, r19
    1dfa:	33 c0       	rjmp	.+102    	; 0x1e62 <main+0x4d6>
				tN_off+=1;
    1dfc:	c5 55       	subi	r28, 0x55	; 85
    1dfe:	df 4f       	sbci	r29, 0xFF	; 255
    1e00:	88 81       	ld	r24, Y
    1e02:	99 81       	ldd	r25, Y+1	; 0x01
    1e04:	cb 5a       	subi	r28, 0xAB	; 171
    1e06:	d0 40       	sbci	r29, 0x00	; 0
    1e08:	01 96       	adiw	r24, 0x01	; 1
    1e0a:	c5 55       	subi	r28, 0x55	; 85
    1e0c:	df 4f       	sbci	r29, 0xFF	; 255
    1e0e:	99 83       	std	Y+1, r25	; 0x01
    1e10:	88 83       	st	Y, r24
    1e12:	cb 5a       	subi	r28, 0xAB	; 171
    1e14:	d0 40       	sbci	r29, 0x00	; 0
				if(tN_off<N_off)
    1e16:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <N_off>
    1e1a:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <N_off+0x1>
    1e1e:	c5 55       	subi	r28, 0x55	; 85
    1e20:	df 4f       	sbci	r29, 0xFF	; 255
    1e22:	e8 81       	ld	r30, Y
    1e24:	f9 81       	ldd	r31, Y+1	; 0x01
    1e26:	cb 5a       	subi	r28, 0xAB	; 171
    1e28:	d0 40       	sbci	r29, 0x00	; 0
    1e2a:	e8 17       	cp	r30, r24
    1e2c:	f9 07       	cpc	r31, r25
    1e2e:	70 f4       	brcc	.+28     	; 0x1e4c <main+0x4c0>
					tN_off=N_off=65535;
    1e30:	ff ef       	ldi	r31, 0xFF	; 255
    1e32:	f0 93 12 01 	sts	0x0112, r31	; 0x800112 <N_off>
    1e36:	f0 93 13 01 	sts	0x0113, r31	; 0x800113 <N_off+0x1>
    1e3a:	2f ef       	ldi	r18, 0xFF	; 255
    1e3c:	3f ef       	ldi	r19, 0xFF	; 255
    1e3e:	c5 55       	subi	r28, 0x55	; 85
    1e40:	df 4f       	sbci	r29, 0xFF	; 255
    1e42:	39 83       	std	Y+1, r19	; 0x01
    1e44:	28 83       	st	Y, r18
    1e46:	cb 5a       	subi	r28, 0xAB	; 171
    1e48:	d0 40       	sbci	r29, 0x00	; 0
    1e4a:	5a c0       	rjmp	.+180    	; 0x1f00 <main+0x574>
				else
					N_off=tN_off;
    1e4c:	c5 55       	subi	r28, 0x55	; 85
    1e4e:	df 4f       	sbci	r29, 0xFF	; 255
    1e50:	88 81       	ld	r24, Y
    1e52:	99 81       	ldd	r25, Y+1	; 0x01
    1e54:	cb 5a       	subi	r28, 0xAB	; 171
    1e56:	d0 40       	sbci	r29, 0x00	; 0
    1e58:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <N_off+0x1>
    1e5c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <N_off>
    1e60:	4f c0       	rjmp	.+158    	; 0x1f00 <main+0x574>
			}
			//Adjust compare OCR1A
			//decrement
			if(input=='4'){
    1e62:	94 e3       	ldi	r25, 0x34	; 52
    1e64:	39 12       	cpse	r3, r25
    1e66:	29 c0       	rjmp	.+82     	; 0x1eba <main+0x52e>
				//tim1.stop();
				tcompare-=1;
    1e68:	cb 55       	subi	r28, 0x5B	; 91
    1e6a:	df 4f       	sbci	r29, 0xFF	; 255
    1e6c:	88 81       	ld	r24, Y
    1e6e:	99 81       	ldd	r25, Y+1	; 0x01
    1e70:	c5 5a       	subi	r28, 0xA5	; 165
    1e72:	d0 40       	sbci	r29, 0x00	; 0
    1e74:	01 97       	sbiw	r24, 0x01	; 1
				if(tcompare>compare || tcompare<3)
    1e76:	e8 16       	cp	r14, r24
    1e78:	f9 06       	cpc	r15, r25
    1e7a:	28 f0       	brcs	.+10     	; 0x1e86 <main+0x4fa>
    1e7c:	83 30       	cpi	r24, 0x03	; 3
    1e7e:	91 05       	cpc	r25, r1
    1e80:	40 f0       	brcs	.+16     	; 0x1e92 <main+0x506>
					tcompare=compare=3;
				else
					compare=tcompare;
    1e82:	7c 01       	movw	r14, r24
    1e84:	0b c0       	rjmp	.+22     	; 0x1e9c <main+0x510>
			//decrement
			if(input=='4'){
				//tim1.stop();
				tcompare-=1;
				if(tcompare>compare || tcompare<3)
					tcompare=compare=3;
    1e86:	0f 2e       	mov	r0, r31
    1e88:	f3 e0       	ldi	r31, 0x03	; 3
    1e8a:	ef 2e       	mov	r14, r31
    1e8c:	f0 2d       	mov	r31, r0
    1e8e:	f1 2c       	mov	r15, r1
    1e90:	05 c0       	rjmp	.+10     	; 0x1e9c <main+0x510>
    1e92:	0f 2e       	mov	r0, r31
    1e94:	f3 e0       	ldi	r31, 0x03	; 3
    1e96:	ef 2e       	mov	r14, r31
    1e98:	f0 2d       	mov	r31, r0
    1e9a:	f1 2c       	mov	r15, r1
				else
					compare=tcompare;
				tim1.compareA(compare);
    1e9c:	c7 01       	movw	r24, r14
    1e9e:	c7 55       	subi	r28, 0x57	; 87
    1ea0:	df 4f       	sbci	r29, 0xFF	; 255
    1ea2:	e8 81       	ld	r30, Y
    1ea4:	f9 81       	ldd	r31, Y+1	; 0x01
    1ea6:	c9 5a       	subi	r28, 0xA9	; 169
    1ea8:	d0 40       	sbci	r29, 0x00	; 0
    1eaa:	09 95       	icall
    1eac:	cb 55       	subi	r28, 0x5B	; 91
    1eae:	df 4f       	sbci	r29, 0xFF	; 255
    1eb0:	f9 82       	std	Y+1, r15	; 0x01
    1eb2:	e8 82       	st	Y, r14
    1eb4:	c5 5a       	subi	r28, 0xA5	; 165
    1eb6:	d0 40       	sbci	r29, 0x00	; 0
    1eb8:	47 c0       	rjmp	.+142    	; 0x1f48 <main+0x5bc>
				//tim1.start(prescaler);
			}
			if(input=='5'){
    1eba:	f5 e3       	ldi	r31, 0x35	; 53
    1ebc:	3f 12       	cpse	r3, r31
    1ebe:	20 c0       	rjmp	.+64     	; 0x1f00 <main+0x574>
				//tim1.stop();
				tcompare-=10;
    1ec0:	cb 55       	subi	r28, 0x5B	; 91
    1ec2:	df 4f       	sbci	r29, 0xFF	; 255
    1ec4:	88 81       	ld	r24, Y
    1ec6:	99 81       	ldd	r25, Y+1	; 0x01
    1ec8:	c5 5a       	subi	r28, 0xA5	; 165
    1eca:	d0 40       	sbci	r29, 0x00	; 0
    1ecc:	0a 97       	sbiw	r24, 0x0a	; 10
				if(tcompare>compare)
    1ece:	e8 16       	cp	r14, r24
    1ed0:	f9 06       	cpc	r15, r25
    1ed2:	10 f0       	brcs	.+4      	; 0x1ed8 <main+0x54c>
					tcompare=compare=3;
				else
					compare=tcompare;
    1ed4:	7c 01       	movw	r14, r24
    1ed6:	05 c0       	rjmp	.+10     	; 0x1ee2 <main+0x556>
			}
			if(input=='5'){
				//tim1.stop();
				tcompare-=10;
				if(tcompare>compare)
					tcompare=compare=3;
    1ed8:	0f 2e       	mov	r0, r31
    1eda:	f3 e0       	ldi	r31, 0x03	; 3
    1edc:	ef 2e       	mov	r14, r31
    1ede:	f0 2d       	mov	r31, r0
    1ee0:	f1 2c       	mov	r15, r1
				else
					compare=tcompare;
				tim1.compareA(compare);
    1ee2:	c7 01       	movw	r24, r14
    1ee4:	c7 55       	subi	r28, 0x57	; 87
    1ee6:	df 4f       	sbci	r29, 0xFF	; 255
    1ee8:	e8 81       	ld	r30, Y
    1eea:	f9 81       	ldd	r31, Y+1	; 0x01
    1eec:	c9 5a       	subi	r28, 0xA9	; 169
    1eee:	d0 40       	sbci	r29, 0x00	; 0
    1ef0:	09 95       	icall
    1ef2:	cb 55       	subi	r28, 0x5B	; 91
    1ef4:	df 4f       	sbci	r29, 0xFF	; 255
    1ef6:	f9 82       	std	Y+1, r15	; 0x01
    1ef8:	e8 82       	st	Y, r14
    1efa:	c5 5a       	subi	r28, 0xA5	; 165
    1efc:	d0 40       	sbci	r29, 0x00	; 0
    1efe:	48 c0       	rjmp	.+144    	; 0x1f90 <main+0x604>
				//tim1.start(prescaler);
			}
			if(input=='6'){
    1f00:	f6 e3       	ldi	r31, 0x36	; 54
    1f02:	3f 12       	cpse	r3, r31
    1f04:	21 c0       	rjmp	.+66     	; 0x1f48 <main+0x5bc>
				//tim1.stop();
				tcompare-=100;
    1f06:	cb 55       	subi	r28, 0x5B	; 91
    1f08:	df 4f       	sbci	r29, 0xFF	; 255
    1f0a:	88 81       	ld	r24, Y
    1f0c:	99 81       	ldd	r25, Y+1	; 0x01
    1f0e:	c5 5a       	subi	r28, 0xA5	; 165
    1f10:	d0 40       	sbci	r29, 0x00	; 0
    1f12:	84 56       	subi	r24, 0x64	; 100
    1f14:	91 09       	sbc	r25, r1
				if(tcompare>compare)
    1f16:	e8 16       	cp	r14, r24
    1f18:	f9 06       	cpc	r15, r25
    1f1a:	10 f0       	brcs	.+4      	; 0x1f20 <main+0x594>
					tcompare=compare=3;
				else
					compare=tcompare;
    1f1c:	7c 01       	movw	r14, r24
    1f1e:	05 c0       	rjmp	.+10     	; 0x1f2a <main+0x59e>
			}
			if(input=='6'){
				//tim1.stop();
				tcompare-=100;
				if(tcompare>compare)
					tcompare=compare=3;
    1f20:	0f 2e       	mov	r0, r31
    1f22:	f3 e0       	ldi	r31, 0x03	; 3
    1f24:	ef 2e       	mov	r14, r31
    1f26:	f0 2d       	mov	r31, r0
    1f28:	f1 2c       	mov	r15, r1
				else
					compare=tcompare;
				tim1.compareA(compare);
    1f2a:	c7 01       	movw	r24, r14
    1f2c:	c7 55       	subi	r28, 0x57	; 87
    1f2e:	df 4f       	sbci	r29, 0xFF	; 255
    1f30:	e8 81       	ld	r30, Y
    1f32:	f9 81       	ldd	r31, Y+1	; 0x01
    1f34:	c9 5a       	subi	r28, 0xA9	; 169
    1f36:	d0 40       	sbci	r29, 0x00	; 0
    1f38:	09 95       	icall
    1f3a:	cb 55       	subi	r28, 0x5B	; 91
    1f3c:	df 4f       	sbci	r29, 0xFF	; 255
    1f3e:	f9 82       	std	Y+1, r15	; 0x01
    1f40:	e8 82       	st	Y, r14
    1f42:	c5 5a       	subi	r28, 0xA5	; 165
    1f44:	d0 40       	sbci	r29, 0x00	; 0
    1f46:	46 c0       	rjmp	.+140    	; 0x1fd4 <main+0x648>
				//tim1.start(prescaler);
			}
			if(input=='B'){
    1f48:	f2 e4       	ldi	r31, 0x42	; 66
    1f4a:	3f 12       	cpse	r3, r31
    1f4c:	21 c0       	rjmp	.+66     	; 0x1f90 <main+0x604>
				//tim1.stop();
				tcompare-=1000;
    1f4e:	cb 55       	subi	r28, 0x5B	; 91
    1f50:	df 4f       	sbci	r29, 0xFF	; 255
    1f52:	88 81       	ld	r24, Y
    1f54:	99 81       	ldd	r25, Y+1	; 0x01
    1f56:	c5 5a       	subi	r28, 0xA5	; 165
    1f58:	d0 40       	sbci	r29, 0x00	; 0
    1f5a:	88 5e       	subi	r24, 0xE8	; 232
    1f5c:	93 40       	sbci	r25, 0x03	; 3
				if(tcompare>compare)
    1f5e:	e8 16       	cp	r14, r24
    1f60:	f9 06       	cpc	r15, r25
    1f62:	10 f0       	brcs	.+4      	; 0x1f68 <main+0x5dc>
					tcompare=compare=3;
				else
					compare=tcompare;
    1f64:	7c 01       	movw	r14, r24
    1f66:	05 c0       	rjmp	.+10     	; 0x1f72 <main+0x5e6>
			}
			if(input=='B'){
				//tim1.stop();
				tcompare-=1000;
				if(tcompare>compare)
					tcompare=compare=3;
    1f68:	0f 2e       	mov	r0, r31
    1f6a:	f3 e0       	ldi	r31, 0x03	; 3
    1f6c:	ef 2e       	mov	r14, r31
    1f6e:	f0 2d       	mov	r31, r0
    1f70:	f1 2c       	mov	r15, r1
				else
					compare=tcompare;
				tim1.compareA(compare);
    1f72:	c7 01       	movw	r24, r14
    1f74:	c7 55       	subi	r28, 0x57	; 87
    1f76:	df 4f       	sbci	r29, 0xFF	; 255
    1f78:	e8 81       	ld	r30, Y
    1f7a:	f9 81       	ldd	r31, Y+1	; 0x01
    1f7c:	c9 5a       	subi	r28, 0xA9	; 169
    1f7e:	d0 40       	sbci	r29, 0x00	; 0
    1f80:	09 95       	icall
    1f82:	cb 55       	subi	r28, 0x5B	; 91
    1f84:	df 4f       	sbci	r29, 0xFF	; 255
    1f86:	f9 82       	std	Y+1, r15	; 0x01
    1f88:	e8 82       	st	Y, r14
    1f8a:	c5 5a       	subi	r28, 0xA5	; 165
    1f8c:	d0 40       	sbci	r29, 0x00	; 0
    1f8e:	44 c0       	rjmp	.+136    	; 0x2018 <main+0x68c>
				//tim1.start(prescaler);
			}
			//increment
			if(input=='1'){
    1f90:	f1 e3       	ldi	r31, 0x31	; 49
    1f92:	3f 12       	cpse	r3, r31
    1f94:	1f c0       	rjmp	.+62     	; 0x1fd4 <main+0x648>
				//tim1.stop();
				tcompare+=1;
    1f96:	cb 55       	subi	r28, 0x5B	; 91
    1f98:	df 4f       	sbci	r29, 0xFF	; 255
    1f9a:	88 81       	ld	r24, Y
    1f9c:	99 81       	ldd	r25, Y+1	; 0x01
    1f9e:	c5 5a       	subi	r28, 0xA5	; 165
    1fa0:	d0 40       	sbci	r29, 0x00	; 0
    1fa2:	01 96       	adiw	r24, 0x01	; 1
				if(tcompare<compare)
    1fa4:	8e 15       	cp	r24, r14
    1fa6:	9f 05       	cpc	r25, r15
    1fa8:	10 f0       	brcs	.+4      	; 0x1fae <main+0x622>
					tcompare=compare=65535;
				else
					compare=tcompare;
    1faa:	7c 01       	movw	r14, r24
    1fac:	04 c0       	rjmp	.+8      	; 0x1fb6 <main+0x62a>
			//increment
			if(input=='1'){
				//tim1.stop();
				tcompare+=1;
				if(tcompare<compare)
					tcompare=compare=65535;
    1fae:	ee 24       	eor	r14, r14
    1fb0:	ea 94       	dec	r14
    1fb2:	ff 24       	eor	r15, r15
    1fb4:	fa 94       	dec	r15
				else
					compare=tcompare;
				tim1.compareA(compare);
    1fb6:	c7 01       	movw	r24, r14
    1fb8:	c7 55       	subi	r28, 0x57	; 87
    1fba:	df 4f       	sbci	r29, 0xFF	; 255
    1fbc:	e8 81       	ld	r30, Y
    1fbe:	f9 81       	ldd	r31, Y+1	; 0x01
    1fc0:	c9 5a       	subi	r28, 0xA9	; 169
    1fc2:	d0 40       	sbci	r29, 0x00	; 0
    1fc4:	09 95       	icall
    1fc6:	cb 55       	subi	r28, 0x5B	; 91
    1fc8:	df 4f       	sbci	r29, 0xFF	; 255
    1fca:	f9 82       	std	Y+1, r15	; 0x01
    1fcc:	e8 82       	st	Y, r14
    1fce:	c5 5a       	subi	r28, 0xA5	; 165
    1fd0:	d0 40       	sbci	r29, 0x00	; 0
    1fd2:	45 c0       	rjmp	.+138    	; 0x205e <main+0x6d2>
				//tim1.start(prescaler);
			}
			if(input=='2'){
    1fd4:	f2 e3       	ldi	r31, 0x32	; 50
    1fd6:	3f 12       	cpse	r3, r31
    1fd8:	1f c0       	rjmp	.+62     	; 0x2018 <main+0x68c>
				//tim1.stop();
					tcompare+=10;
    1fda:	cb 55       	subi	r28, 0x5B	; 91
    1fdc:	df 4f       	sbci	r29, 0xFF	; 255
    1fde:	88 81       	ld	r24, Y
    1fe0:	99 81       	ldd	r25, Y+1	; 0x01
    1fe2:	c5 5a       	subi	r28, 0xA5	; 165
    1fe4:	d0 40       	sbci	r29, 0x00	; 0
    1fe6:	0a 96       	adiw	r24, 0x0a	; 10
				if(tcompare<compare)
    1fe8:	8e 15       	cp	r24, r14
    1fea:	9f 05       	cpc	r25, r15
    1fec:	10 f0       	brcs	.+4      	; 0x1ff2 <main+0x666>
					tcompare=compare=65535;
				else
					compare=tcompare;
    1fee:	7c 01       	movw	r14, r24
    1ff0:	04 c0       	rjmp	.+8      	; 0x1ffa <main+0x66e>
			}
			if(input=='2'){
				//tim1.stop();
					tcompare+=10;
				if(tcompare<compare)
					tcompare=compare=65535;
    1ff2:	ee 24       	eor	r14, r14
    1ff4:	ea 94       	dec	r14
    1ff6:	ff 24       	eor	r15, r15
    1ff8:	fa 94       	dec	r15
				else
					compare=tcompare;
				tim1.compareA(compare);
    1ffa:	c7 01       	movw	r24, r14
    1ffc:	c7 55       	subi	r28, 0x57	; 87
    1ffe:	df 4f       	sbci	r29, 0xFF	; 255
    2000:	e8 81       	ld	r30, Y
    2002:	f9 81       	ldd	r31, Y+1	; 0x01
    2004:	c9 5a       	subi	r28, 0xA9	; 169
    2006:	d0 40       	sbci	r29, 0x00	; 0
    2008:	09 95       	icall
    200a:	cb 55       	subi	r28, 0x5B	; 91
    200c:	df 4f       	sbci	r29, 0xFF	; 255
    200e:	f9 82       	std	Y+1, r15	; 0x01
    2010:	e8 82       	st	Y, r14
    2012:	c5 5a       	subi	r28, 0xA5	; 165
    2014:	d0 40       	sbci	r29, 0x00	; 0
    2016:	46 c0       	rjmp	.+140    	; 0x20a4 <main+0x718>
				//tim1.start(prescaler);
			}
			if(input=='3'){
    2018:	f3 e3       	ldi	r31, 0x33	; 51
    201a:	3f 12       	cpse	r3, r31
    201c:	20 c0       	rjmp	.+64     	; 0x205e <main+0x6d2>
				//tim1.stop();
					tcompare+=100;
    201e:	cb 55       	subi	r28, 0x5B	; 91
    2020:	df 4f       	sbci	r29, 0xFF	; 255
    2022:	88 81       	ld	r24, Y
    2024:	99 81       	ldd	r25, Y+1	; 0x01
    2026:	c5 5a       	subi	r28, 0xA5	; 165
    2028:	d0 40       	sbci	r29, 0x00	; 0
    202a:	8c 59       	subi	r24, 0x9C	; 156
    202c:	9f 4f       	sbci	r25, 0xFF	; 255
				if(tcompare<compare)
    202e:	8e 15       	cp	r24, r14
    2030:	9f 05       	cpc	r25, r15
    2032:	10 f0       	brcs	.+4      	; 0x2038 <main+0x6ac>
					tcompare=compare=65535;
				else
					compare=tcompare;
    2034:	7c 01       	movw	r14, r24
    2036:	04 c0       	rjmp	.+8      	; 0x2040 <main+0x6b4>
			}
			if(input=='3'){
				//tim1.stop();
					tcompare+=100;
				if(tcompare<compare)
					tcompare=compare=65535;
    2038:	ee 24       	eor	r14, r14
    203a:	ea 94       	dec	r14
    203c:	ff 24       	eor	r15, r15
    203e:	fa 94       	dec	r15
				else
					compare=tcompare;
				tim1.compareA(compare);
    2040:	c7 01       	movw	r24, r14
    2042:	c7 55       	subi	r28, 0x57	; 87
    2044:	df 4f       	sbci	r29, 0xFF	; 255
    2046:	e8 81       	ld	r30, Y
    2048:	f9 81       	ldd	r31, Y+1	; 0x01
    204a:	c9 5a       	subi	r28, 0xA9	; 169
    204c:	d0 40       	sbci	r29, 0x00	; 0
    204e:	09 95       	icall
    2050:	cb 55       	subi	r28, 0x5B	; 91
    2052:	df 4f       	sbci	r29, 0xFF	; 255
    2054:	f9 82       	std	Y+1, r15	; 0x01
    2056:	e8 82       	st	Y, r14
    2058:	c5 5a       	subi	r28, 0xA5	; 165
    205a:	d0 40       	sbci	r29, 0x00	; 0
    205c:	a7 c0       	rjmp	.+334    	; 0x21ac <main+0x820>
				//tim1.start(prescaler);
			}
			if(input=='A'){
    205e:	f1 e4       	ldi	r31, 0x41	; 65
    2060:	3f 12       	cpse	r3, r31
    2062:	20 c0       	rjmp	.+64     	; 0x20a4 <main+0x718>
				//tim1.stop();
					tcompare+=1000;
    2064:	cb 55       	subi	r28, 0x5B	; 91
    2066:	df 4f       	sbci	r29, 0xFF	; 255
    2068:	88 81       	ld	r24, Y
    206a:	99 81       	ldd	r25, Y+1	; 0x01
    206c:	c5 5a       	subi	r28, 0xA5	; 165
    206e:	d0 40       	sbci	r29, 0x00	; 0
    2070:	88 51       	subi	r24, 0x18	; 24
    2072:	9c 4f       	sbci	r25, 0xFC	; 252
				if(tcompare<compare)
    2074:	8e 15       	cp	r24, r14
    2076:	9f 05       	cpc	r25, r15
    2078:	10 f0       	brcs	.+4      	; 0x207e <main+0x6f2>
					tcompare=compare=65535;
				else
				compare=tcompare;
    207a:	7c 01       	movw	r14, r24
    207c:	04 c0       	rjmp	.+8      	; 0x2086 <main+0x6fa>
			}
			if(input=='A'){
				//tim1.stop();
					tcompare+=1000;
				if(tcompare<compare)
					tcompare=compare=65535;
    207e:	ee 24       	eor	r14, r14
    2080:	ea 94       	dec	r14
    2082:	ff 24       	eor	r15, r15
    2084:	fa 94       	dec	r15
				else
				compare=tcompare;
				tim1.compareA(compare);
    2086:	c7 01       	movw	r24, r14
    2088:	c7 55       	subi	r28, 0x57	; 87
    208a:	df 4f       	sbci	r29, 0xFF	; 255
    208c:	e8 81       	ld	r30, Y
    208e:	f9 81       	ldd	r31, Y+1	; 0x01
    2090:	c9 5a       	subi	r28, 0xA9	; 169
    2092:	d0 40       	sbci	r29, 0x00	; 0
    2094:	09 95       	icall
    2096:	cb 55       	subi	r28, 0x5B	; 91
    2098:	df 4f       	sbci	r29, 0xFF	; 255
    209a:	f9 82       	std	Y+1, r15	; 0x01
    209c:	e8 82       	st	Y, r14
    209e:	c5 5a       	subi	r28, 0xA5	; 165
    20a0:	d0 40       	sbci	r29, 0x00	; 0
    20a2:	84 c0       	rjmp	.+264    	; 0x21ac <main+0x820>
				//tim1.start(prescaler);
			}
			//Adjust prescaler 'C' toggles between possible selections
			if(input=='C'){
    20a4:	f3 e4       	ldi	r31, 0x43	; 67
    20a6:	3f 12       	cpse	r3, r31
    20a8:	81 c0       	rjmp	.+258    	; 0x21ac <main+0x820>
				switch(steprescaler){
    20aa:	c3 55       	subi	r28, 0x53	; 83
    20ac:	df 4f       	sbci	r29, 0xFF	; 255
    20ae:	28 81       	ld	r18, Y
    20b0:	cd 5a       	subi	r28, 0xAD	; 173
    20b2:	d0 40       	sbci	r29, 0x00	; 0
    20b4:	22 30       	cpi	r18, 0x02	; 2
    20b6:	01 f1       	breq	.+64     	; 0x20f8 <main+0x76c>
    20b8:	30 f4       	brcc	.+12     	; 0x20c6 <main+0x73a>
    20ba:	22 23       	and	r18, r18
    20bc:	09 f4       	brne	.+2      	; 0x20c0 <main+0x734>
    20be:	55 c0       	rjmp	.+170    	; 0x216a <main+0x7de>
    20c0:	21 30       	cpi	r18, 0x01	; 1
    20c2:	59 f0       	breq	.+22     	; 0x20da <main+0x74e>
    20c4:	4b c0       	rjmp	.+150    	; 0x215c <main+0x7d0>
    20c6:	c3 55       	subi	r28, 0x53	; 83
    20c8:	df 4f       	sbci	r29, 0xFF	; 255
    20ca:	38 81       	ld	r19, Y
    20cc:	cd 5a       	subi	r28, 0xAD	; 173
    20ce:	d0 40       	sbci	r29, 0x00	; 0
    20d0:	33 30       	cpi	r19, 0x03	; 3
    20d2:	09 f1       	breq	.+66     	; 0x2116 <main+0x78a>
    20d4:	34 30       	cpi	r19, 0x04	; 4
    20d6:	89 f1       	breq	.+98     	; 0x213a <main+0x7ae>
    20d8:	41 c0       	rjmp	.+130    	; 0x215c <main+0x7d0>
						prescaler=1;
						steprescaler=1;
						break;
					case 1:
						prescaler=8;
						steprescaler=2;
    20da:	82 e0       	ldi	r24, 0x02	; 2
    20dc:	c3 55       	subi	r28, 0x53	; 83
    20de:	df 4f       	sbci	r29, 0xFF	; 255
    20e0:	88 83       	st	Y, r24
    20e2:	cd 5a       	subi	r28, 0xAD	; 173
    20e4:	d0 40       	sbci	r29, 0x00	; 0
					case 0:
						prescaler=1;
						steprescaler=1;
						break;
					case 1:
						prescaler=8;
    20e6:	e8 e0       	ldi	r30, 0x08	; 8
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	cd 55       	subi	r28, 0x5D	; 93
    20ec:	df 4f       	sbci	r29, 0xFF	; 255
    20ee:	f9 83       	std	Y+1, r31	; 0x01
    20f0:	e8 83       	st	Y, r30
    20f2:	c3 5a       	subi	r28, 0xA3	; 163
    20f4:	d0 40       	sbci	r29, 0x00	; 0
    20f6:	46 c0       	rjmp	.+140    	; 0x2184 <main+0x7f8>
						steprescaler=2;
						break;
					case 2:
						prescaler=64;
						steprescaler=3;
    20f8:	f3 e0       	ldi	r31, 0x03	; 3
    20fa:	c3 55       	subi	r28, 0x53	; 83
    20fc:	df 4f       	sbci	r29, 0xFF	; 255
    20fe:	f8 83       	st	Y, r31
    2100:	cd 5a       	subi	r28, 0xAD	; 173
    2102:	d0 40       	sbci	r29, 0x00	; 0
					case 1:
						prescaler=8;
						steprescaler=2;
						break;
					case 2:
						prescaler=64;
    2104:	20 e4       	ldi	r18, 0x40	; 64
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	cd 55       	subi	r28, 0x5D	; 93
    210a:	df 4f       	sbci	r29, 0xFF	; 255
    210c:	39 83       	std	Y+1, r19	; 0x01
    210e:	28 83       	st	Y, r18
    2110:	c3 5a       	subi	r28, 0xA3	; 163
    2112:	d0 40       	sbci	r29, 0x00	; 0
						steprescaler=3;
						break;
    2114:	37 c0       	rjmp	.+110    	; 0x2184 <main+0x7f8>
					case 3:
						prescaler=256;
						steprescaler=4;
    2116:	34 e0       	ldi	r19, 0x04	; 4
    2118:	c3 55       	subi	r28, 0x53	; 83
    211a:	df 4f       	sbci	r29, 0xFF	; 255
    211c:	38 83       	st	Y, r19
    211e:	cd 5a       	subi	r28, 0xAD	; 173
    2120:	d0 40       	sbci	r29, 0x00	; 0
					case 2:
						prescaler=64;
						steprescaler=3;
						break;
					case 3:
						prescaler=256;
    2122:	cd 55       	subi	r28, 0x5D	; 93
    2124:	df 4f       	sbci	r29, 0xFF	; 255
    2126:	18 82       	st	Y, r1
    2128:	c3 5a       	subi	r28, 0xA3	; 163
    212a:	d0 40       	sbci	r29, 0x00	; 0
    212c:	81 e0       	ldi	r24, 0x01	; 1
    212e:	cc 55       	subi	r28, 0x5C	; 92
    2130:	df 4f       	sbci	r29, 0xFF	; 255
    2132:	88 83       	st	Y, r24
    2134:	c4 5a       	subi	r28, 0xA4	; 164
    2136:	d0 40       	sbci	r29, 0x00	; 0
						steprescaler=4;
						break;
    2138:	25 c0       	rjmp	.+74     	; 0x2184 <main+0x7f8>
					case 4:
						prescaler=1024;
						steprescaler=0;
    213a:	c3 55       	subi	r28, 0x53	; 83
    213c:	df 4f       	sbci	r29, 0xFF	; 255
    213e:	18 82       	st	Y, r1
    2140:	cd 5a       	subi	r28, 0xAD	; 173
    2142:	d0 40       	sbci	r29, 0x00	; 0
					case 3:
						prescaler=256;
						steprescaler=4;
						break;
					case 4:
						prescaler=1024;
    2144:	cd 55       	subi	r28, 0x5D	; 93
    2146:	df 4f       	sbci	r29, 0xFF	; 255
    2148:	18 82       	st	Y, r1
    214a:	c3 5a       	subi	r28, 0xA3	; 163
    214c:	d0 40       	sbci	r29, 0x00	; 0
    214e:	94 e0       	ldi	r25, 0x04	; 4
    2150:	cc 55       	subi	r28, 0x5C	; 92
    2152:	df 4f       	sbci	r29, 0xFF	; 255
    2154:	98 83       	st	Y, r25
    2156:	c4 5a       	subi	r28, 0xA4	; 164
    2158:	d0 40       	sbci	r29, 0x00	; 0
						steprescaler=0;
						break;
    215a:	14 c0       	rjmp	.+40     	; 0x2184 <main+0x7f8>
					default:
						steprescaler=4;
    215c:	e4 e0       	ldi	r30, 0x04	; 4
    215e:	c3 55       	subi	r28, 0x53	; 83
    2160:	df 4f       	sbci	r29, 0xFF	; 255
    2162:	e8 83       	st	Y, r30
    2164:	cd 5a       	subi	r28, 0xAD	; 173
    2166:	d0 40       	sbci	r29, 0x00	; 0
						break;		
    2168:	0d c0       	rjmp	.+26     	; 0x2184 <main+0x7f8>
			//Adjust prescaler 'C' toggles between possible selections
			if(input=='C'){
				switch(steprescaler){
					case 0:
						prescaler=1;
						steprescaler=1;
    216a:	c3 55       	subi	r28, 0x53	; 83
    216c:	df 4f       	sbci	r29, 0xFF	; 255
    216e:	28 82       	st	Y, r2
    2170:	cd 5a       	subi	r28, 0xAD	; 173
    2172:	d0 40       	sbci	r29, 0x00	; 0
			}
			//Adjust prescaler 'C' toggles between possible selections
			if(input=='C'){
				switch(steprescaler){
					case 0:
						prescaler=1;
    2174:	21 e0       	ldi	r18, 0x01	; 1
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	cd 55       	subi	r28, 0x5D	; 93
    217a:	df 4f       	sbci	r29, 0xFF	; 255
    217c:	39 83       	std	Y+1, r19	; 0x01
    217e:	28 83       	st	Y, r18
    2180:	c3 5a       	subi	r28, 0xA3	; 163
    2182:	d0 40       	sbci	r29, 0x00	; 0
						break;
					default:
						steprescaler=4;
						break;		
				}//endswitch
				tim1.stop();
    2184:	c0 55       	subi	r28, 0x50	; 80
    2186:	df 4f       	sbci	r29, 0xFF	; 255
    2188:	e8 81       	ld	r30, Y
    218a:	f9 81       	ldd	r31, Y+1	; 0x01
    218c:	c0 5b       	subi	r28, 0xB0	; 176
    218e:	d0 40       	sbci	r29, 0x00	; 0
    2190:	09 95       	icall
				tim1.start(prescaler);
    2192:	cd 55       	subi	r28, 0x5D	; 93
    2194:	df 4f       	sbci	r29, 0xFF	; 255
    2196:	88 81       	ld	r24, Y
    2198:	99 81       	ldd	r25, Y+1	; 0x01
    219a:	c3 5a       	subi	r28, 0xA3	; 163
    219c:	d0 40       	sbci	r29, 0x00	; 0
    219e:	c2 55       	subi	r28, 0x52	; 82
    21a0:	df 4f       	sbci	r29, 0xFF	; 255
    21a2:	e8 81       	ld	r30, Y
    21a4:	f9 81       	ldd	r31, Y+1	; 0x01
    21a6:	ce 5a       	subi	r28, 0xAE	; 174
    21a8:	d0 40       	sbci	r29, 0x00	; 0
    21aa:	09 95       	icall
			}//endif
			//Parameters save eeprom
			eeprom.update_word((uint16_t*)0,compare);
    21ac:	b7 01       	movw	r22, r14
    21ae:	80 e0       	ldi	r24, 0x00	; 0
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	c9 55       	subi	r28, 0x59	; 89
    21b4:	df 4f       	sbci	r29, 0xFF	; 255
    21b6:	e8 81       	ld	r30, Y
    21b8:	f9 81       	ldd	r31, Y+1	; 0x01
    21ba:	c7 5a       	subi	r28, 0xA7	; 167
    21bc:	d0 40       	sbci	r29, 0x00	; 0
    21be:	09 95       	icall
			eeprom.update_word((uint16_t*)4,prescaler);
    21c0:	cd 55       	subi	r28, 0x5D	; 93
    21c2:	df 4f       	sbci	r29, 0xFF	; 255
    21c4:	68 81       	ld	r22, Y
    21c6:	79 81       	ldd	r23, Y+1	; 0x01
    21c8:	c3 5a       	subi	r28, 0xA3	; 163
    21ca:	d0 40       	sbci	r29, 0x00	; 0
    21cc:	84 e0       	ldi	r24, 0x04	; 4
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	c9 55       	subi	r28, 0x59	; 89
    21d2:	df 4f       	sbci	r29, 0xFF	; 255
    21d4:	e8 81       	ld	r30, Y
    21d6:	f9 81       	ldd	r31, Y+1	; 0x01
    21d8:	c7 5a       	subi	r28, 0xA7	; 167
    21da:	d0 40       	sbci	r29, 0x00	; 0
    21dc:	09 95       	icall
			eeprom.update_word((uint16_t*)8,N_off);
    21de:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <N_off>
    21e2:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <N_off+0x1>
    21e6:	88 e0       	ldi	r24, 0x08	; 8
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	c9 55       	subi	r28, 0x59	; 89
    21ec:	df 4f       	sbci	r29, 0xFF	; 255
    21ee:	e8 81       	ld	r30, Y
    21f0:	f9 81       	ldd	r31, Y+1	; 0x01
    21f2:	c7 5a       	subi	r28, 0xA7	; 167
    21f4:	d0 40       	sbci	r29, 0x00	; 0
    21f6:	09 95       	icall
			eeprom.update_word((uint16_t*)12,N_on);
    21f8:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <N_on>
    21fc:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <N_on+0x1>
    2200:	8c e0       	ldi	r24, 0x0C	; 12
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	c9 55       	subi	r28, 0x59	; 89
    2206:	df 4f       	sbci	r29, 0xFF	; 255
    2208:	e8 81       	ld	r30, Y
    220a:	f9 81       	ldd	r31, Y+1	; 0x01
    220c:	c7 5a       	subi	r28, 0xA7	; 167
    220e:	d0 40       	sbci	r29, 0x00	; 0
    2210:	09 95       	icall
		}//endif
		/***DISPLAY***/
		//Parameters
		func.i32toa(compare,value);
    2212:	c7 01       	movw	r24, r14
    2214:	a0 e0       	ldi	r26, 0x00	; 0
    2216:	b0 e0       	ldi	r27, 0x00	; 0
    2218:	ae 01       	movw	r20, r28
    221a:	4f 5f       	subi	r20, 0xFF	; 255
    221c:	5f 4f       	sbci	r21, 0xFF	; 255
    221e:	bc 01       	movw	r22, r24
    2220:	cd 01       	movw	r24, r26
    2222:	f4 01       	movw	r30, r8
    2224:	09 95       	icall
		lcd0.gotoxy(2,0);
    2226:	60 e0       	ldi	r22, 0x00	; 0
    2228:	70 e0       	ldi	r23, 0x00	; 0
    222a:	82 e0       	ldi	r24, 0x02	; 2
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	f3 01       	movw	r30, r6
    2230:	09 95       	icall
		lcd0.string_size(value,5);
    2232:	65 e0       	ldi	r22, 0x05	; 5
    2234:	ce 01       	movw	r24, r28
    2236:	01 96       	adiw	r24, 0x01	; 1
    2238:	f6 01       	movw	r30, r12
    223a:	09 95       	icall
		lcd0.BF();
    223c:	f8 01       	movw	r30, r16
    223e:	09 95       	icall
		lcd0.hspace(1);
    2240:	82 2d       	mov	r24, r2
    2242:	f5 01       	movw	r30, r10
    2244:	09 95       	icall
		lcd0.string("at");
    2246:	8e e2       	ldi	r24, 0x2E	; 46
    2248:	91 e0       	ldi	r25, 0x01	; 1
    224a:	cf 55       	subi	r28, 0x5F	; 95
    224c:	df 4f       	sbci	r29, 0xFF	; 255
    224e:	e8 81       	ld	r30, Y
    2250:	f9 81       	ldd	r31, Y+1	; 0x01
    2252:	c1 5a       	subi	r28, 0xA1	; 161
    2254:	d0 40       	sbci	r29, 0x00	; 0
    2256:	09 95       	icall
		lcd0.hspace(1);
    2258:	82 2d       	mov	r24, r2
    225a:	f5 01       	movw	r30, r10
    225c:	09 95       	icall
		func.i32toa(prescaler,value);
    225e:	cd 55       	subi	r28, 0x5D	; 93
    2260:	df 4f       	sbci	r29, 0xFF	; 255
    2262:	28 81       	ld	r18, Y
    2264:	39 81       	ldd	r19, Y+1	; 0x01
    2266:	c3 5a       	subi	r28, 0xA3	; 163
    2268:	d0 40       	sbci	r29, 0x00	; 0
    226a:	c9 01       	movw	r24, r18
    226c:	a0 e0       	ldi	r26, 0x00	; 0
    226e:	b0 e0       	ldi	r27, 0x00	; 0
    2270:	ae 01       	movw	r20, r28
    2272:	4f 5f       	subi	r20, 0xFF	; 255
    2274:	5f 4f       	sbci	r21, 0xFF	; 255
    2276:	bc 01       	movw	r22, r24
    2278:	cd 01       	movw	r24, r26
    227a:	f4 01       	movw	r30, r8
    227c:	09 95       	icall
		lcd0.string_size(value,5);
    227e:	65 e0       	ldi	r22, 0x05	; 5
    2280:	ce 01       	movw	r24, r28
    2282:	01 96       	adiw	r24, 0x01	; 1
    2284:	f6 01       	movw	r30, r12
    2286:	09 95       	icall
		lcd0.BF();
    2288:	f8 01       	movw	r30, r16
    228a:	09 95       	icall
		//Cycle
		func.i32toa(N_on/2,value);
    228c:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <N_on>
    2290:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <N_on+0x1>
    2294:	76 95       	lsr	r23
    2296:	67 95       	ror	r22
    2298:	80 e0       	ldi	r24, 0x00	; 0
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	ae 01       	movw	r20, r28
    229e:	4f 5f       	subi	r20, 0xFF	; 255
    22a0:	5f 4f       	sbci	r21, 0xFF	; 255
    22a2:	f4 01       	movw	r30, r8
    22a4:	09 95       	icall
		lcd0.gotoxy(3,0);
    22a6:	60 e0       	ldi	r22, 0x00	; 0
    22a8:	70 e0       	ldi	r23, 0x00	; 0
    22aa:	83 e0       	ldi	r24, 0x03	; 3
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	f3 01       	movw	r30, r6
    22b0:	09 95       	icall
		lcd0.string_size(value,5);
    22b2:	65 e0       	ldi	r22, 0x05	; 5
    22b4:	ce 01       	movw	r24, r28
    22b6:	01 96       	adiw	r24, 0x01	; 1
    22b8:	f6 01       	movw	r30, r12
    22ba:	09 95       	icall
		lcd0.BF();
    22bc:	f8 01       	movw	r30, r16
    22be:	09 95       	icall
		lcd0.hspace(1);
    22c0:	82 2d       	mov	r24, r2
    22c2:	f5 01       	movw	r30, r10
    22c4:	09 95       	icall
		lcd0.string("and");
    22c6:	81 e3       	ldi	r24, 0x31	; 49
    22c8:	91 e0       	ldi	r25, 0x01	; 1
    22ca:	cf 55       	subi	r28, 0x5F	; 95
    22cc:	df 4f       	sbci	r29, 0xFF	; 255
    22ce:	e8 81       	ld	r30, Y
    22d0:	f9 81       	ldd	r31, Y+1	; 0x01
    22d2:	c1 5a       	subi	r28, 0xA1	; 161
    22d4:	d0 40       	sbci	r29, 0x00	; 0
    22d6:	09 95       	icall
		lcd0.hspace(1);
    22d8:	82 2d       	mov	r24, r2
    22da:	f5 01       	movw	r30, r10
    22dc:	09 95       	icall
		func.i32toa(N_off/2,value);
    22de:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <N_off>
    22e2:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <N_off+0x1>
    22e6:	76 95       	lsr	r23
    22e8:	67 95       	ror	r22
    22ea:	80 e0       	ldi	r24, 0x00	; 0
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	ae 01       	movw	r20, r28
    22f0:	4f 5f       	subi	r20, 0xFF	; 255
    22f2:	5f 4f       	sbci	r21, 0xFF	; 255
    22f4:	f4 01       	movw	r30, r8
    22f6:	09 95       	icall
		lcd0.string_size(value,5);
    22f8:	65 e0       	ldi	r22, 0x05	; 5
    22fa:	ce 01       	movw	r24, r28
    22fc:	01 96       	adiw	r24, 0x01	; 1
    22fe:	f6 01       	movw	r30, r12
    2300:	09 95       	icall
		lcd0.BF();
    2302:	f8 01       	movw	r30, r16
    2304:	09 95       	icall
		//Default
		
    }//endwhile
    2306:	50 cc       	rjmp	.-1888   	; 0x1ba8 <main+0x21c>

00002308 <__vector_13>:
	DDRD = (1<<0) | (1<<4) | (1<<5);
	PORTD = (1<<4) | (1<<5);
};
/***Interrupts***/
ISR(TIMER1_COMPA_vect)
{
    2308:	1f 92       	push	r1
    230a:	0f 92       	push	r0
    230c:	0f b6       	in	r0, 0x3f	; 63
    230e:	0f 92       	push	r0
    2310:	11 24       	eor	r1, r1
    2312:	2f 93       	push	r18
    2314:	3f 93       	push	r19
    2316:	4f 93       	push	r20
    2318:	5f 93       	push	r21
    231a:	8f 93       	push	r24
    231c:	9f 93       	push	r25
	counter++;
    231e:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <counter>
    2322:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <counter+0x1>
    2326:	01 96       	adiw	r24, 0x01	; 1
    2328:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <counter+0x1>
    232c:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <counter>
	if(counter>N_off)
    2330:	20 91 5f 01 	lds	r18, 0x015F	; 0x80015f <counter>
    2334:	30 91 60 01 	lds	r19, 0x0160	; 0x800160 <counter+0x1>
    2338:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <N_off>
    233c:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <N_off+0x1>
    2340:	82 17       	cp	r24, r18
    2342:	93 07       	cpc	r25, r19
    2344:	08 f4       	brcc	.+2      	; 0x2348 <__vector_13+0x40>
		PORTD &= ~(1<<4);
    2346:	5c 98       	cbi	0x0b, 4	; 11
	if(counter>(N_off+N_on)){
    2348:	20 91 5f 01 	lds	r18, 0x015F	; 0x80015f <counter>
    234c:	30 91 60 01 	lds	r19, 0x0160	; 0x800160 <counter+0x1>
    2350:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <N_off>
    2354:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <N_off+0x1>
    2358:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <N_on>
    235c:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <N_on+0x1>
    2360:	84 0f       	add	r24, r20
    2362:	95 1f       	adc	r25, r21
    2364:	82 17       	cp	r24, r18
    2366:	93 07       	cpc	r25, r19
    2368:	28 f4       	brcc	.+10     	; 0x2374 <__vector_13+0x6c>
		PORTD |=(1<<4);
    236a:	5c 9a       	sbi	0x0b, 4	; 11
		counter=0;
    236c:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <counter+0x1>
    2370:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <counter>
	}
}
    2374:	9f 91       	pop	r25
    2376:	8f 91       	pop	r24
    2378:	5f 91       	pop	r21
    237a:	4f 91       	pop	r20
    237c:	3f 91       	pop	r19
    237e:	2f 91       	pop	r18
    2380:	0f 90       	pop	r0
    2382:	0f be       	out	0x3f, r0	; 63
    2384:	0f 90       	pop	r0
    2386:	1f 90       	pop	r1
    2388:	18 95       	reti

0000238a <__mulsi3>:
    238a:	db 01       	movw	r26, r22
    238c:	8f 93       	push	r24
    238e:	9f 93       	push	r25
    2390:	0e 94 1d 12 	call	0x243a	; 0x243a <__muluhisi3>
    2394:	bf 91       	pop	r27
    2396:	af 91       	pop	r26
    2398:	a2 9f       	mul	r26, r18
    239a:	80 0d       	add	r24, r0
    239c:	91 1d       	adc	r25, r1
    239e:	a3 9f       	mul	r26, r19
    23a0:	90 0d       	add	r25, r0
    23a2:	b2 9f       	mul	r27, r18
    23a4:	90 0d       	add	r25, r0
    23a6:	11 24       	eor	r1, r1
    23a8:	08 95       	ret

000023aa <__divmodhi4>:
    23aa:	97 fb       	bst	r25, 7
    23ac:	07 2e       	mov	r0, r23
    23ae:	16 f4       	brtc	.+4      	; 0x23b4 <__divmodhi4+0xa>
    23b0:	00 94       	com	r0
    23b2:	07 d0       	rcall	.+14     	; 0x23c2 <__divmodhi4_neg1>
    23b4:	77 fd       	sbrc	r23, 7
    23b6:	09 d0       	rcall	.+18     	; 0x23ca <__divmodhi4_neg2>
    23b8:	0e 94 28 12 	call	0x2450	; 0x2450 <__udivmodhi4>
    23bc:	07 fc       	sbrc	r0, 7
    23be:	05 d0       	rcall	.+10     	; 0x23ca <__divmodhi4_neg2>
    23c0:	3e f4       	brtc	.+14     	; 0x23d0 <__divmodhi4_exit>

000023c2 <__divmodhi4_neg1>:
    23c2:	90 95       	com	r25
    23c4:	81 95       	neg	r24
    23c6:	9f 4f       	sbci	r25, 0xFF	; 255
    23c8:	08 95       	ret

000023ca <__divmodhi4_neg2>:
    23ca:	70 95       	com	r23
    23cc:	61 95       	neg	r22
    23ce:	7f 4f       	sbci	r23, 0xFF	; 255

000023d0 <__divmodhi4_exit>:
    23d0:	08 95       	ret

000023d2 <__divmodsi4>:
    23d2:	05 2e       	mov	r0, r21
    23d4:	97 fb       	bst	r25, 7
    23d6:	1e f4       	brtc	.+6      	; 0x23de <__divmodsi4+0xc>
    23d8:	00 94       	com	r0
    23da:	0e 94 00 12 	call	0x2400	; 0x2400 <__negsi2>
    23de:	57 fd       	sbrc	r21, 7
    23e0:	07 d0       	rcall	.+14     	; 0x23f0 <__divmodsi4_neg2>
    23e2:	0e 94 3c 12 	call	0x2478	; 0x2478 <__udivmodsi4>
    23e6:	07 fc       	sbrc	r0, 7
    23e8:	03 d0       	rcall	.+6      	; 0x23f0 <__divmodsi4_neg2>
    23ea:	4e f4       	brtc	.+18     	; 0x23fe <__divmodsi4_exit>
    23ec:	0c 94 00 12 	jmp	0x2400	; 0x2400 <__negsi2>

000023f0 <__divmodsi4_neg2>:
    23f0:	50 95       	com	r21
    23f2:	40 95       	com	r20
    23f4:	30 95       	com	r19
    23f6:	21 95       	neg	r18
    23f8:	3f 4f       	sbci	r19, 0xFF	; 255
    23fa:	4f 4f       	sbci	r20, 0xFF	; 255
    23fc:	5f 4f       	sbci	r21, 0xFF	; 255

000023fe <__divmodsi4_exit>:
    23fe:	08 95       	ret

00002400 <__negsi2>:
    2400:	90 95       	com	r25
    2402:	80 95       	com	r24
    2404:	70 95       	com	r23
    2406:	61 95       	neg	r22
    2408:	7f 4f       	sbci	r23, 0xFF	; 255
    240a:	8f 4f       	sbci	r24, 0xFF	; 255
    240c:	9f 4f       	sbci	r25, 0xFF	; 255
    240e:	08 95       	ret

00002410 <__tablejump2__>:
    2410:	ee 0f       	add	r30, r30
    2412:	ff 1f       	adc	r31, r31
    2414:	05 90       	lpm	r0, Z+
    2416:	f4 91       	lpm	r31, Z
    2418:	e0 2d       	mov	r30, r0
    241a:	09 94       	ijmp

0000241c <__umulhisi3>:
    241c:	a2 9f       	mul	r26, r18
    241e:	b0 01       	movw	r22, r0
    2420:	b3 9f       	mul	r27, r19
    2422:	c0 01       	movw	r24, r0
    2424:	a3 9f       	mul	r26, r19
    2426:	70 0d       	add	r23, r0
    2428:	81 1d       	adc	r24, r1
    242a:	11 24       	eor	r1, r1
    242c:	91 1d       	adc	r25, r1
    242e:	b2 9f       	mul	r27, r18
    2430:	70 0d       	add	r23, r0
    2432:	81 1d       	adc	r24, r1
    2434:	11 24       	eor	r1, r1
    2436:	91 1d       	adc	r25, r1
    2438:	08 95       	ret

0000243a <__muluhisi3>:
    243a:	0e 94 0e 12 	call	0x241c	; 0x241c <__umulhisi3>
    243e:	a5 9f       	mul	r26, r21
    2440:	90 0d       	add	r25, r0
    2442:	b4 9f       	mul	r27, r20
    2444:	90 0d       	add	r25, r0
    2446:	a4 9f       	mul	r26, r20
    2448:	80 0d       	add	r24, r0
    244a:	91 1d       	adc	r25, r1
    244c:	11 24       	eor	r1, r1
    244e:	08 95       	ret

00002450 <__udivmodhi4>:
    2450:	aa 1b       	sub	r26, r26
    2452:	bb 1b       	sub	r27, r27
    2454:	51 e1       	ldi	r21, 0x11	; 17
    2456:	07 c0       	rjmp	.+14     	; 0x2466 <__udivmodhi4_ep>

00002458 <__udivmodhi4_loop>:
    2458:	aa 1f       	adc	r26, r26
    245a:	bb 1f       	adc	r27, r27
    245c:	a6 17       	cp	r26, r22
    245e:	b7 07       	cpc	r27, r23
    2460:	10 f0       	brcs	.+4      	; 0x2466 <__udivmodhi4_ep>
    2462:	a6 1b       	sub	r26, r22
    2464:	b7 0b       	sbc	r27, r23

00002466 <__udivmodhi4_ep>:
    2466:	88 1f       	adc	r24, r24
    2468:	99 1f       	adc	r25, r25
    246a:	5a 95       	dec	r21
    246c:	a9 f7       	brne	.-22     	; 0x2458 <__udivmodhi4_loop>
    246e:	80 95       	com	r24
    2470:	90 95       	com	r25
    2472:	bc 01       	movw	r22, r24
    2474:	cd 01       	movw	r24, r26
    2476:	08 95       	ret

00002478 <__udivmodsi4>:
    2478:	a1 e2       	ldi	r26, 0x21	; 33
    247a:	1a 2e       	mov	r1, r26
    247c:	aa 1b       	sub	r26, r26
    247e:	bb 1b       	sub	r27, r27
    2480:	fd 01       	movw	r30, r26
    2482:	0d c0       	rjmp	.+26     	; 0x249e <__udivmodsi4_ep>

00002484 <__udivmodsi4_loop>:
    2484:	aa 1f       	adc	r26, r26
    2486:	bb 1f       	adc	r27, r27
    2488:	ee 1f       	adc	r30, r30
    248a:	ff 1f       	adc	r31, r31
    248c:	a2 17       	cp	r26, r18
    248e:	b3 07       	cpc	r27, r19
    2490:	e4 07       	cpc	r30, r20
    2492:	f5 07       	cpc	r31, r21
    2494:	20 f0       	brcs	.+8      	; 0x249e <__udivmodsi4_ep>
    2496:	a2 1b       	sub	r26, r18
    2498:	b3 0b       	sbc	r27, r19
    249a:	e4 0b       	sbc	r30, r20
    249c:	f5 0b       	sbc	r31, r21

0000249e <__udivmodsi4_ep>:
    249e:	66 1f       	adc	r22, r22
    24a0:	77 1f       	adc	r23, r23
    24a2:	88 1f       	adc	r24, r24
    24a4:	99 1f       	adc	r25, r25
    24a6:	1a 94       	dec	r1
    24a8:	69 f7       	brne	.-38     	; 0x2484 <__udivmodsi4_loop>
    24aa:	60 95       	com	r22
    24ac:	70 95       	com	r23
    24ae:	80 95       	com	r24
    24b0:	90 95       	com	r25
    24b2:	9b 01       	movw	r18, r22
    24b4:	ac 01       	movw	r20, r24
    24b6:	bd 01       	movw	r22, r26
    24b8:	cf 01       	movw	r24, r30
    24ba:	08 95       	ret

000024bc <eeprom_read_block>:
    24bc:	dc 01       	movw	r26, r24
    24be:	cb 01       	movw	r24, r22

000024c0 <eeprom_read_blraw>:
    24c0:	fc 01       	movw	r30, r24
    24c2:	f9 99       	sbic	0x1f, 1	; 31
    24c4:	fe cf       	rjmp	.-4      	; 0x24c2 <eeprom_read_blraw+0x2>
    24c6:	06 c0       	rjmp	.+12     	; 0x24d4 <eeprom_read_blraw+0x14>
    24c8:	f2 bd       	out	0x22, r31	; 34
    24ca:	e1 bd       	out	0x21, r30	; 33
    24cc:	f8 9a       	sbi	0x1f, 0	; 31
    24ce:	31 96       	adiw	r30, 0x01	; 1
    24d0:	00 b4       	in	r0, 0x20	; 32
    24d2:	0d 92       	st	X+, r0
    24d4:	41 50       	subi	r20, 0x01	; 1
    24d6:	50 40       	sbci	r21, 0x00	; 0
    24d8:	b8 f7       	brcc	.-18     	; 0x24c8 <eeprom_read_blraw+0x8>
    24da:	08 95       	ret

000024dc <eeprom_read_byte>:
    24dc:	f9 99       	sbic	0x1f, 1	; 31
    24de:	fe cf       	rjmp	.-4      	; 0x24dc <eeprom_read_byte>
    24e0:	92 bd       	out	0x22, r25	; 34
    24e2:	81 bd       	out	0x21, r24	; 33
    24e4:	f8 9a       	sbi	0x1f, 0	; 31
    24e6:	99 27       	eor	r25, r25
    24e8:	80 b5       	in	r24, 0x20	; 32
    24ea:	08 95       	ret

000024ec <eeprom_read_word>:
    24ec:	a8 e1       	ldi	r26, 0x18	; 24
    24ee:	b0 e0       	ldi	r27, 0x00	; 0
    24f0:	42 e0       	ldi	r20, 0x02	; 2
    24f2:	50 e0       	ldi	r21, 0x00	; 0
    24f4:	0c 94 60 12 	jmp	0x24c0	; 0x24c0 <eeprom_read_blraw>

000024f8 <eeprom_update_block>:
    24f8:	dc 01       	movw	r26, r24
    24fa:	a4 0f       	add	r26, r20
    24fc:	b5 1f       	adc	r27, r21
    24fe:	41 50       	subi	r20, 0x01	; 1
    2500:	50 40       	sbci	r21, 0x00	; 0
    2502:	48 f0       	brcs	.+18     	; 0x2516 <eeprom_update_block+0x1e>
    2504:	cb 01       	movw	r24, r22
    2506:	84 0f       	add	r24, r20
    2508:	95 1f       	adc	r25, r21
    250a:	2e 91       	ld	r18, -X
    250c:	0e 94 8d 12 	call	0x251a	; 0x251a <eeprom_update_r18>
    2510:	41 50       	subi	r20, 0x01	; 1
    2512:	50 40       	sbci	r21, 0x00	; 0
    2514:	d0 f7       	brcc	.-12     	; 0x250a <eeprom_update_block+0x12>
    2516:	08 95       	ret

00002518 <eeprom_update_byte>:
    2518:	26 2f       	mov	r18, r22

0000251a <eeprom_update_r18>:
    251a:	f9 99       	sbic	0x1f, 1	; 31
    251c:	fe cf       	rjmp	.-4      	; 0x251a <eeprom_update_r18>
    251e:	92 bd       	out	0x22, r25	; 34
    2520:	81 bd       	out	0x21, r24	; 33
    2522:	f8 9a       	sbi	0x1f, 0	; 31
    2524:	01 97       	sbiw	r24, 0x01	; 1
    2526:	00 b4       	in	r0, 0x20	; 32
    2528:	02 16       	cp	r0, r18
    252a:	39 f0       	breq	.+14     	; 0x253a <eeprom_update_r18+0x20>
    252c:	1f ba       	out	0x1f, r1	; 31
    252e:	20 bd       	out	0x20, r18	; 32
    2530:	0f b6       	in	r0, 0x3f	; 63
    2532:	f8 94       	cli
    2534:	fa 9a       	sbi	0x1f, 2	; 31
    2536:	f9 9a       	sbi	0x1f, 1	; 31
    2538:	0f be       	out	0x3f, r0	; 63
    253a:	08 95       	ret

0000253c <eeprom_update_dword>:
    253c:	03 96       	adiw	r24, 0x03	; 3
    253e:	27 2f       	mov	r18, r23
    2540:	0e 94 8d 12 	call	0x251a	; 0x251a <eeprom_update_r18>
    2544:	0e 94 8c 12 	call	0x2518	; 0x2518 <eeprom_update_byte>
    2548:	25 2f       	mov	r18, r21
    254a:	0e 94 8d 12 	call	0x251a	; 0x251a <eeprom_update_r18>
    254e:	24 2f       	mov	r18, r20
    2550:	0c 94 8d 12 	jmp	0x251a	; 0x251a <eeprom_update_r18>

00002554 <eeprom_update_word>:
    2554:	01 96       	adiw	r24, 0x01	; 1
    2556:	27 2f       	mov	r18, r23
    2558:	0e 94 8d 12 	call	0x251a	; 0x251a <eeprom_update_r18>
    255c:	0c 94 8c 12 	jmp	0x2518	; 0x2518 <eeprom_update_byte>

00002560 <eeprom_write_block>:
    2560:	dc 01       	movw	r26, r24
    2562:	cb 01       	movw	r24, r22
    2564:	03 c0       	rjmp	.+6      	; 0x256c <eeprom_write_block+0xc>
    2566:	2d 91       	ld	r18, X+
    2568:	0e 94 bb 12 	call	0x2576	; 0x2576 <eeprom_write_r18>
    256c:	41 50       	subi	r20, 0x01	; 1
    256e:	50 40       	sbci	r21, 0x00	; 0
    2570:	d0 f7       	brcc	.-12     	; 0x2566 <eeprom_write_block+0x6>
    2572:	08 95       	ret

00002574 <eeprom_write_byte>:
    2574:	26 2f       	mov	r18, r22

00002576 <eeprom_write_r18>:
    2576:	f9 99       	sbic	0x1f, 1	; 31
    2578:	fe cf       	rjmp	.-4      	; 0x2576 <eeprom_write_r18>
    257a:	1f ba       	out	0x1f, r1	; 31
    257c:	92 bd       	out	0x22, r25	; 34
    257e:	81 bd       	out	0x21, r24	; 33
    2580:	20 bd       	out	0x20, r18	; 32
    2582:	0f b6       	in	r0, 0x3f	; 63
    2584:	f8 94       	cli
    2586:	fa 9a       	sbi	0x1f, 2	; 31
    2588:	f9 9a       	sbi	0x1f, 1	; 31
    258a:	0f be       	out	0x3f, r0	; 63
    258c:	01 96       	adiw	r24, 0x01	; 1
    258e:	08 95       	ret

00002590 <eeprom_write_dword>:
    2590:	24 2f       	mov	r18, r20
    2592:	0e 94 bb 12 	call	0x2576	; 0x2576 <eeprom_write_r18>
    2596:	25 2f       	mov	r18, r21
    2598:	0e 94 bb 12 	call	0x2576	; 0x2576 <eeprom_write_r18>
    259c:	0c 94 d0 12 	jmp	0x25a0	; 0x25a0 <eeprom_write_word>

000025a0 <eeprom_write_word>:
    25a0:	0e 94 ba 12 	call	0x2574	; 0x2574 <eeprom_write_byte>
    25a4:	27 2f       	mov	r18, r23
    25a6:	0c 94 bb 12 	jmp	0x2576	; 0x2576 <eeprom_write_r18>

000025aa <_exit>:
    25aa:	f8 94       	cli

000025ac <__stop_program>:
    25ac:	ff cf       	rjmp	.-2      	; 0x25ac <__stop_program>
