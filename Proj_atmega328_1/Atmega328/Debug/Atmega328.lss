
Atmega328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00001696  0000172a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001696  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ac  00800108  00800108  00001732  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001732  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001764  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000360  00000000  00000000  000017a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003fcb  00000000  00000000  00001b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011c4  00000000  00000000  00005acb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002126  00000000  00000000  00006c8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000093c  00000000  00000000  00008db8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b5d  00000000  00000000  000096f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003964  00000000  00000000  0000a251  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000318  00000000  00000000  0000dbb5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 17 09 	jmp	0x122e	; 0x122e <__vector_18>
      4c:	0c 94 4e 09 	jmp	0x129c	; 0x129c <__vector_19>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 32 01 	jmp	0x264	; 0x264 <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 e9       	ldi	r30, 0x96	; 150
      7c:	f6 e1       	ldi	r31, 0x16	; 22
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 30       	cpi	r26, 0x08	; 8
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a8 e0       	ldi	r26, 0x08	; 8
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a4 3b       	cpi	r26, 0xB4	; 180
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 78 09 	call	0x12f0	; 0x12f0 <main>
      9e:	0c 94 49 0b 	jmp	0x1692	; 0x1692 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <HC595_shift_bit>:
	//
	return hc595;
}
void HC595_shift_bit(uint8_t bool)
{
	if (bool)
      a6:	88 23       	and	r24, r24
      a8:	89 f0       	breq	.+34     	; 0xcc <HC595_shift_bit+0x26>
		*hc595_PORT |= (1<<HC595_datapin); //Data bit HIGH
      aa:	e0 91 78 01 	lds	r30, 0x0178	; 0x800178 <hc595_PORT>
      ae:	f0 91 79 01 	lds	r31, 0x0179	; 0x800179 <hc595_PORT+0x1>
      b2:	20 81       	ld	r18, Z
      b4:	81 e0       	ldi	r24, 0x01	; 1
      b6:	90 e0       	ldi	r25, 0x00	; 0
      b8:	00 90 7a 01 	lds	r0, 0x017A	; 0x80017a <HC595_datapin>
      bc:	02 c0       	rjmp	.+4      	; 0xc2 <HC595_shift_bit+0x1c>
      be:	88 0f       	add	r24, r24
      c0:	99 1f       	adc	r25, r25
      c2:	0a 94       	dec	r0
      c4:	e2 f7       	brpl	.-8      	; 0xbe <HC595_shift_bit+0x18>
      c6:	82 2b       	or	r24, r18
      c8:	80 83       	st	Z, r24
      ca:	11 c0       	rjmp	.+34     	; 0xee <HC595_shift_bit+0x48>
	else
		*hc595_PORT &= ~(1<<HC595_datapin); //Data bit LOW
      cc:	e0 91 78 01 	lds	r30, 0x0178	; 0x800178 <hc595_PORT>
      d0:	f0 91 79 01 	lds	r31, 0x0179	; 0x800179 <hc595_PORT+0x1>
      d4:	20 81       	ld	r18, Z
      d6:	81 e0       	ldi	r24, 0x01	; 1
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	00 90 7a 01 	lds	r0, 0x017A	; 0x80017a <HC595_datapin>
      de:	02 c0       	rjmp	.+4      	; 0xe4 <HC595_shift_bit+0x3e>
      e0:	88 0f       	add	r24, r24
      e2:	99 1f       	adc	r25, r25
      e4:	0a 94       	dec	r0
      e6:	e2 f7       	brpl	.-8      	; 0xe0 <HC595_shift_bit+0x3a>
      e8:	80 95       	com	r24
      ea:	82 23       	and	r24, r18
      ec:	80 83       	st	Z, r24
	*hc595_PORT |= (1<<HC595_clkpin); // Shift bit
      ee:	e0 91 78 01 	lds	r30, 0x0178	; 0x800178 <hc595_PORT>
      f2:	f0 91 79 01 	lds	r31, 0x0179	; 0x800179 <hc595_PORT+0x1>
      f6:	40 81       	ld	r20, Z
      f8:	81 e0       	ldi	r24, 0x01	; 1
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	9c 01       	movw	r18, r24
      fe:	00 90 7c 01 	lds	r0, 0x017C	; 0x80017c <HC595_clkpin>
     102:	02 c0       	rjmp	.+4      	; 0x108 <HC595_shift_bit+0x62>
     104:	22 0f       	add	r18, r18
     106:	33 1f       	adc	r19, r19
     108:	0a 94       	dec	r0
     10a:	e2 f7       	brpl	.-8      	; 0x104 <HC595_shift_bit+0x5e>
     10c:	24 2b       	or	r18, r20
     10e:	20 83       	st	Z, r18
	*hc595_PORT &= ~(1<<HC595_clkpin); //Shift disable
     110:	e0 91 78 01 	lds	r30, 0x0178	; 0x800178 <hc595_PORT>
     114:	f0 91 79 01 	lds	r31, 0x0179	; 0x800179 <hc595_PORT+0x1>
     118:	20 81       	ld	r18, Z
     11a:	00 90 7c 01 	lds	r0, 0x017C	; 0x80017c <HC595_clkpin>
     11e:	02 c0       	rjmp	.+4      	; 0x124 <HC595_shift_bit+0x7e>
     120:	88 0f       	add	r24, r24
     122:	99 1f       	adc	r25, r25
     124:	0a 94       	dec	r0
     126:	e2 f7       	brpl	.-8      	; 0x120 <HC595_shift_bit+0x7a>
     128:	80 95       	com	r24
     12a:	82 23       	and	r24, r18
     12c:	80 83       	st	Z, r24
     12e:	08 95       	ret

00000130 <HC595_shift_out>:
		HC595_shift_bit(byte & (1<<i));
	HC595_shift_out();
}
void HC595_shift_out(void)
{
	*hc595_PORT |= (1<<HC595_outpin); //Output enable
     130:	e0 91 78 01 	lds	r30, 0x0178	; 0x800178 <hc595_PORT>
     134:	f0 91 79 01 	lds	r31, 0x0179	; 0x800179 <hc595_PORT+0x1>
     138:	40 81       	ld	r20, Z
     13a:	81 e0       	ldi	r24, 0x01	; 1
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	9c 01       	movw	r18, r24
     140:	00 90 7b 01 	lds	r0, 0x017B	; 0x80017b <HC595_outpin>
     144:	02 c0       	rjmp	.+4      	; 0x14a <HC595_shift_out+0x1a>
     146:	22 0f       	add	r18, r18
     148:	33 1f       	adc	r19, r19
     14a:	0a 94       	dec	r0
     14c:	e2 f7       	brpl	.-8      	; 0x146 <HC595_shift_out+0x16>
     14e:	24 2b       	or	r18, r20
     150:	20 83       	st	Z, r18
	*hc595_PORT &= ~(1<<HC595_outpin); //Output disable
     152:	e0 91 78 01 	lds	r30, 0x0178	; 0x800178 <hc595_PORT>
     156:	f0 91 79 01 	lds	r31, 0x0179	; 0x800179 <hc595_PORT+0x1>
     15a:	20 81       	ld	r18, Z
     15c:	00 90 7b 01 	lds	r0, 0x017B	; 0x80017b <HC595_outpin>
     160:	02 c0       	rjmp	.+4      	; 0x166 <HC595_shift_out+0x36>
     162:	88 0f       	add	r24, r24
     164:	99 1f       	adc	r25, r25
     166:	0a 94       	dec	r0
     168:	e2 f7       	brpl	.-8      	; 0x162 <HC595_shift_out+0x32>
     16a:	80 95       	com	r24
     16c:	82 23       	and	r24, r18
     16e:	80 83       	st	Z, r24
     170:	08 95       	ret

00000172 <HC595_shift_byte>:
		*hc595_PORT &= ~(1<<HC595_datapin); //Data bit LOW
	*hc595_PORT |= (1<<HC595_clkpin); // Shift bit
	*hc595_PORT &= ~(1<<HC595_clkpin); //Shift disable
}
void HC595_shift_byte(uint8_t byte)
{
     172:	ff 92       	push	r15
     174:	0f 93       	push	r16
     176:	1f 93       	push	r17
     178:	cf 93       	push	r28
     17a:	df 93       	push	r29
     17c:	f8 2e       	mov	r15, r24
     17e:	c0 e0       	ldi	r28, 0x00	; 0
     180:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i;
	for(i=0;i<8;i++)
		HC595_shift_bit(byte & (1<<i));
     182:	01 e0       	ldi	r16, 0x01	; 1
     184:	10 e0       	ldi	r17, 0x00	; 0
     186:	c8 01       	movw	r24, r16
     188:	0c 2e       	mov	r0, r28
     18a:	02 c0       	rjmp	.+4      	; 0x190 <HC595_shift_byte+0x1e>
     18c:	88 0f       	add	r24, r24
     18e:	99 1f       	adc	r25, r25
     190:	0a 94       	dec	r0
     192:	e2 f7       	brpl	.-8      	; 0x18c <HC595_shift_byte+0x1a>
     194:	8f 21       	and	r24, r15
     196:	0e 94 53 00 	call	0xa6	; 0xa6 <HC595_shift_bit>
     19a:	21 96       	adiw	r28, 0x01	; 1
	*hc595_PORT &= ~(1<<HC595_clkpin); //Shift disable
}
void HC595_shift_byte(uint8_t byte)
{
	uint8_t i;
	for(i=0;i<8;i++)
     19c:	c8 30       	cpi	r28, 0x08	; 8
     19e:	d1 05       	cpc	r29, r1
     1a0:	91 f7       	brne	.-28     	; 0x186 <HC595_shift_byte+0x14>
		HC595_shift_bit(byte & (1<<i));
	HC595_shift_out();
     1a2:	0e 94 98 00 	call	0x130	; 0x130 <HC595_shift_out>
}
     1a6:	df 91       	pop	r29
     1a8:	cf 91       	pop	r28
     1aa:	1f 91       	pop	r17
     1ac:	0f 91       	pop	r16
     1ae:	ff 90       	pop	r15
     1b0:	08 95       	ret

000001b2 <HC595enable>:
void HC595_shift_out(void);
/*
** procedure and function
*/
HC595 HC595enable(volatile uint8_t *ddr, volatile uint8_t *port, uint8_t datapin, uint8_t clkpin, uint8_t outpin)
{
     1b2:	0f 93       	push	r16
     1b4:	cf 93       	push	r28
     1b6:	df 93       	push	r29
     1b8:	00 d0       	rcall	.+0      	; 0x1ba <HC595enable+0x8>
     1ba:	00 d0       	rcall	.+0      	; 0x1bc <HC595enable+0xa>
     1bc:	00 d0       	rcall	.+0      	; 0x1be <HC595enable+0xc>
     1be:	cd b7       	in	r28, 0x3d	; 61
     1c0:	de b7       	in	r29, 0x3e	; 62
	//LOCAL VARIABLES
	uint8_t tSREG;
	tSREG=SREG;
     1c2:	5f b7       	in	r21, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
     1c4:	3f b7       	in	r19, 0x3f	; 63
     1c6:	3f 77       	andi	r19, 0x7F	; 127
     1c8:	3f bf       	out	0x3f, r19	; 63
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	HC595 hc595;
	//import parametros
	hc595_DDR=ddr;
     1ca:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <hc595_DDR+0x1>
     1ce:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <hc595_DDR>
	hc595_PORT=port;
     1d2:	70 93 79 01 	sts	0x0179, r23	; 0x800179 <hc595_PORT+0x1>
     1d6:	60 93 78 01 	sts	0x0178, r22	; 0x800178 <hc595_PORT>
	HC595_datapin=datapin; 
     1da:	40 93 7a 01 	sts	0x017A, r20	; 0x80017a <HC595_datapin>
	HC595_clkpin=clkpin; 
     1de:	20 93 7c 01 	sts	0x017C, r18	; 0x80017c <HC595_clkpin>
	HC595_outpin=outpin;
     1e2:	00 93 7b 01 	sts	0x017B, r16	; 0x80017b <HC595_outpin>
	//inic variables
    *hc595_DDR |= (1<<datapin) | (1<<clkpin) | (1<<outpin);
     1e6:	fc 01       	movw	r30, r24
     1e8:	30 81       	ld	r19, Z
     1ea:	61 e0       	ldi	r22, 0x01	; 1
     1ec:	70 e0       	ldi	r23, 0x00	; 0
     1ee:	db 01       	movw	r26, r22
     1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <HC595enable+0x44>
     1f2:	aa 0f       	add	r26, r26
     1f4:	bb 1f       	adc	r27, r27
     1f6:	2a 95       	dec	r18
     1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <HC595enable+0x40>
     1fa:	fb 01       	movw	r30, r22
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <HC595enable+0x50>
     1fe:	ee 0f       	add	r30, r30
     200:	ff 1f       	adc	r31, r31
     202:	0a 95       	dec	r16
     204:	e2 f7       	brpl	.-8      	; 0x1fe <HC595enable+0x4c>
     206:	ea 2b       	or	r30, r26
     208:	02 c0       	rjmp	.+4      	; 0x20e <HC595enable+0x5c>
     20a:	66 0f       	add	r22, r22
     20c:	77 1f       	adc	r23, r23
     20e:	4a 95       	dec	r20
     210:	e2 f7       	brpl	.-8      	; 0x20a <HC595enable+0x58>
     212:	6e 2b       	or	r22, r30
     214:	23 2f       	mov	r18, r19
     216:	26 2b       	or	r18, r22
     218:	fc 01       	movw	r30, r24
     21a:	20 83       	st	Z, r18
	*hc595_PORT &= ~((1<<datapin) | (1<<clkpin) | (1<<outpin));
     21c:	e0 91 78 01 	lds	r30, 0x0178	; 0x800178 <hc595_PORT>
     220:	f0 91 79 01 	lds	r31, 0x0179	; 0x800179 <hc595_PORT+0x1>
     224:	80 81       	ld	r24, Z
     226:	60 95       	com	r22
     228:	68 23       	and	r22, r24
     22a:	60 83       	st	Z, r22
	//Direccionar apontadores para PROTOTIPOS
	hc595.bit=HC595_shift_bit;
	hc595.byte=HC595_shift_byte;
	hc595.out=HC595_shift_out;
	SREG=tSREG;
     22c:	5f bf       	out	0x3f, r21	; 63
	//
	return hc595;
     22e:	23 e5       	ldi	r18, 0x53	; 83
     230:	30 e0       	ldi	r19, 0x00	; 0
     232:	3a 83       	std	Y+2, r19	; 0x02
     234:	29 83       	std	Y+1, r18	; 0x01
     236:	49 eb       	ldi	r20, 0xB9	; 185
     238:	50 e0       	ldi	r21, 0x00	; 0
     23a:	5c 83       	std	Y+4, r21	; 0x04
     23c:	4b 83       	std	Y+3, r20	; 0x03
     23e:	68 e9       	ldi	r22, 0x98	; 152
     240:	70 e0       	ldi	r23, 0x00	; 0
     242:	7e 83       	std	Y+6, r23	; 0x06
     244:	6d 83       	std	Y+5, r22	; 0x05
     246:	3a 81       	ldd	r19, Y+2	; 0x02
     248:	5c 81       	ldd	r21, Y+4	; 0x04
     24a:	7e 81       	ldd	r23, Y+6	; 0x06
}
     24c:	80 e0       	ldi	r24, 0x00	; 0
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	26 96       	adiw	r28, 0x06	; 6
     252:	0f b6       	in	r0, 0x3f	; 63
     254:	f8 94       	cli
     256:	de bf       	out	0x3e, r29	; 62
     258:	0f be       	out	0x3f, r0	; 63
     25a:	cd bf       	out	0x3d, r28	; 61
     25c:	df 91       	pop	r29
     25e:	cf 91       	pop	r28
     260:	0f 91       	pop	r16
     262:	08 95       	ret

00000264 <__vector_21>:
ISR(ANALOG_INTERRUPT)
/*************************************************************************
Function: ANALOG interrupt
Purpose:  Read Analog Input
**************************************************************************/
{
     264:	1f 92       	push	r1
     266:	0f 92       	push	r0
     268:	0f b6       	in	r0, 0x3f	; 63
     26a:	0f 92       	push	r0
     26c:	11 24       	eor	r1, r1
     26e:	2f 93       	push	r18
     270:	3f 93       	push	r19
     272:	8f 93       	push	r24
     274:	9f 93       	push	r25
     276:	af 93       	push	r26
     278:	bf 93       	push	r27
     27a:	ef 93       	push	r30
     27c:	ff 93       	push	r31
	adc_tmp=ADCL;
     27e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <adc_tmp+0x1>
     288:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <adc_tmp>
	adc_tmp|=(ADCH<<8);
     28c:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     290:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <adc_tmp>
     294:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <adc_tmp+0x1>
     298:	92 2b       	or	r25, r18
     29a:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <adc_tmp+0x1>
     29e:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <adc_tmp>
	if(adc_n_sample < (1<<ADC_NUMBER_SAMPLE)){
     2a2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
     2a6:	84 30       	cpi	r24, 0x04	; 4
     2a8:	a0 f4       	brcc	.+40     	; 0x2d2 <__vector_21+0x6e>
		adc_n_sample++;
     2aa:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
     2ae:	8f 5f       	subi	r24, 0xFF	; 255
     2b0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
		adc_sample+=adc_tmp;
     2b4:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <adc_tmp>
     2b8:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <adc_tmp+0x1>
     2bc:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <adc_sample>
     2c0:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <adc_sample+0x1>
     2c4:	82 0f       	add	r24, r18
     2c6:	93 1f       	adc	r25, r19
     2c8:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <adc_sample+0x1>
     2cc:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <adc_sample>
     2d0:	45 c0       	rjmp	.+138    	; 0x35c <__vector_21+0xf8>
	}else{
		ADC_VALUE[ADC_SELECTOR]=adc_sample>>ADC_NUMBER_SAMPLE;
     2d2:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <ADC_SELECTOR>
     2d6:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <ADC_SELECTOR+0x1>
     2da:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <adc_sample>
     2de:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <adc_sample+0x1>
     2e2:	95 95       	asr	r25
     2e4:	87 95       	ror	r24
     2e6:	95 95       	asr	r25
     2e8:	87 95       	ror	r24
     2ea:	ee 0f       	add	r30, r30
     2ec:	ff 1f       	adc	r31, r31
     2ee:	ef 5d       	subi	r30, 0xDF	; 223
     2f0:	fe 4f       	sbci	r31, 0xFE	; 254
     2f2:	91 83       	std	Z+1, r25	; 0x01
     2f4:	80 83       	st	Z, r24
		adc_n_sample=adc_sample=0;
     2f6:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <adc_sample+0x1>
     2fa:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <adc_sample>
     2fe:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
		/******/
		if(ADC_SELECTOR < ADC_N_CHANNEL)
     302:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <ADC_SELECTOR>
     306:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <ADC_SELECTOR+0x1>
     30a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <ADC_N_CHANNEL>
     30e:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <ADC_N_CHANNEL+0x1>
     312:	28 17       	cp	r18, r24
     314:	39 07       	cpc	r19, r25
     316:	54 f4       	brge	.+20     	; 0x32c <__vector_21+0xc8>
			ADC_SELECTOR++;
     318:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <ADC_SELECTOR>
     31c:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <ADC_SELECTOR+0x1>
     320:	01 96       	adiw	r24, 0x01	; 1
     322:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <ADC_SELECTOR+0x1>
     326:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <ADC_SELECTOR>
     32a:	04 c0       	rjmp	.+8      	; 0x334 <__vector_21+0xd0>
		else
			ADC_SELECTOR=0;
     32c:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <ADC_SELECTOR+0x1>
     330:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <ADC_SELECTOR>
		ADC_SELECT &= ~MUX_MASK;
     334:	ac e7       	ldi	r26, 0x7C	; 124
     336:	b0 e0       	ldi	r27, 0x00	; 0
     338:	8c 91       	ld	r24, X
     33a:	80 7f       	andi	r24, 0xF0	; 240
     33c:	8c 93       	st	X, r24
		ADC_SELECT |= (ADC_CHANNEL_GAIN[ADC_SELECTOR] & MUX_MASK);
     33e:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <ADC_SELECTOR>
     342:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <ADC_SELECTOR+0x1>
     346:	ee 0f       	add	r30, r30
     348:	ff 1f       	adc	r31, r31
     34a:	ef 5e       	subi	r30, 0xEF	; 239
     34c:	fe 4f       	sbci	r31, 0xFE	; 254
     34e:	80 81       	ld	r24, Z
     350:	91 81       	ldd	r25, Z+1	; 0x01
     352:	2c 91       	ld	r18, X
     354:	8f 70       	andi	r24, 0x0F	; 15
     356:	99 27       	eor	r25, r25
     358:	82 2b       	or	r24, r18
     35a:	8c 93       	st	X, r24
	}		
}
     35c:	ff 91       	pop	r31
     35e:	ef 91       	pop	r30
     360:	bf 91       	pop	r27
     362:	af 91       	pop	r26
     364:	9f 91       	pop	r25
     366:	8f 91       	pop	r24
     368:	3f 91       	pop	r19
     36a:	2f 91       	pop	r18
     36c:	0f 90       	pop	r0
     36e:	0f be       	out	0x3f, r0	; 63
     370:	0f 90       	pop	r0
     372:	1f 90       	pop	r1
     374:	18 95       	reti

00000376 <FUNCpinmatch>:
}
//pinmatch
uint8_t FUNCpinmatch(uint8_t match, uint8_t pin, uint8_t HL)
{
	uint8_t result;
	result=match&pin;
     376:	68 23       	and	r22, r24
	if(HL){
     378:	44 23       	and	r20, r20
     37a:	21 f0       	breq	.+8      	; 0x384 <FUNCpinmatch+0xe>
		if(result==match);
     37c:	86 17       	cp	r24, r22
     37e:	21 f0       	breq	.+8      	; 0x388 <FUNCpinmatch+0x12>
		else
			result=0;
     380:	80 e0       	ldi	r24, 0x00	; 0
     382:	08 95       	ret
	}else{
		if(result)
     384:	61 11       	cpse	r22, r1
			result=0;
     386:	80 e0       	ldi	r24, 0x00	; 0
		else
			result=match;
	}
	return result;
}
     388:	08 95       	ret

0000038a <FUNChmerge>:
// hmerge
uint8_t FUNChmerge(uint8_t X, uint8_t Y)
{
	return (X | Y);
}
     38a:	86 2b       	or	r24, r22
     38c:	08 95       	ret

0000038e <FUNClmerge>:
// lmerge
uint8_t FUNClmerge(uint8_t X, uint8_t Y)
{
	return (X & Y);
}
     38e:	86 23       	and	r24, r22
     390:	08 95       	ret

00000392 <FUNChh>:
uint8_t FUNChh(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi&xf;
	return i;
}
     392:	86 23       	and	r24, r22
     394:	08 95       	ret

00000396 <FUNCll>:
// ll
uint8_t FUNCll(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi|xf;
	return ~i;
     396:	86 2b       	or	r24, r22
}
     398:	80 95       	com	r24
     39a:	08 95       	ret

0000039c <FUNClh>:
// lh
uint8_t FUNClh(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi^xf;
     39c:	86 27       	eor	r24, r22
	i&=xf;
	return i;
}
     39e:	86 23       	and	r24, r22
     3a0:	08 95       	ret

000003a2 <FUNChl>:
// hl
uint8_t FUNChl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xf^xi;
     3a2:	60 95       	com	r22
	i&=xi;
	return i;
}
     3a4:	86 23       	and	r24, r22
     3a6:	08 95       	ret

000003a8 <FUNCdiff>:
// diff
uint8_t FUNCdiff(uint8_t xi, uint8_t xf)
{
	return xf^xi;
}
     3a8:	86 27       	eor	r24, r22
     3aa:	08 95       	ret

000003ac <FUNCswap>:
// interchange *px and *py
void FUNCswap(long *px, long *py)
{
     3ac:	cf 92       	push	r12
     3ae:	df 92       	push	r13
     3b0:	ef 92       	push	r14
     3b2:	ff 92       	push	r15
     3b4:	0f 93       	push	r16
     3b6:	1f 93       	push	r17
	long temp;
	temp = *px;
     3b8:	fc 01       	movw	r30, r24
     3ba:	00 81       	ld	r16, Z
     3bc:	11 81       	ldd	r17, Z+1	; 0x01
     3be:	22 81       	ldd	r18, Z+2	; 0x02
     3c0:	33 81       	ldd	r19, Z+3	; 0x03
	*px = *py;
     3c2:	fb 01       	movw	r30, r22
     3c4:	c0 80       	ld	r12, Z
     3c6:	d1 80       	ldd	r13, Z+1	; 0x01
     3c8:	e2 80       	ldd	r14, Z+2	; 0x02
     3ca:	f3 80       	ldd	r15, Z+3	; 0x03
     3cc:	fc 01       	movw	r30, r24
     3ce:	c0 82       	st	Z, r12
     3d0:	d1 82       	std	Z+1, r13	; 0x01
     3d2:	e2 82       	std	Z+2, r14	; 0x02
     3d4:	f3 82       	std	Z+3, r15	; 0x03
	*py = temp;
     3d6:	fb 01       	movw	r30, r22
     3d8:	00 83       	st	Z, r16
     3da:	11 83       	std	Z+1, r17	; 0x01
     3dc:	22 83       	std	Z+2, r18	; 0x02
     3de:	33 83       	std	Z+3, r19	; 0x03
}
     3e0:	1f 91       	pop	r17
     3e2:	0f 91       	pop	r16
     3e4:	ff 90       	pop	r15
     3e6:	ef 90       	pop	r14
     3e8:	df 90       	pop	r13
     3ea:	cf 90       	pop	r12
     3ec:	08 95       	ret

000003ee <FUNCcopy>:
// copy: copy 'from' into 'to'; assume to is big enough
void FUNCcopy(char to[], char from[])
{
	int i;
	i = 0;
	while ((to[i] = from[i]) != '\0')
     3ee:	fb 01       	movw	r30, r22
     3f0:	20 81       	ld	r18, Z
     3f2:	fc 01       	movw	r30, r24
     3f4:	20 83       	st	Z, r18
     3f6:	22 23       	and	r18, r18
     3f8:	39 f0       	breq	.+14     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     3fa:	db 01       	movw	r26, r22
     3fc:	11 96       	adiw	r26, 0x01	; 1
     3fe:	31 96       	adiw	r30, 0x01	; 1
     400:	9d 91       	ld	r25, X+
     402:	91 93       	st	Z+, r25
     404:	91 11       	cpse	r25, r1
     406:	fc cf       	rjmp	.-8      	; 0x400 <__LOCK_REGION_LENGTH__>
     408:	08 95       	ret

0000040a <FUNCsqueeze>:
		++i;
}
// squeeze: delete all c from s
void FUNCsqueeze(char s[], int c)
{
     40a:	cf 93       	push	r28
     40c:	df 93       	push	r29
     40e:	ec 01       	movw	r28, r24
	int i, j;
	for (i = j = 0; s[i] != '\0'; i++)
     410:	98 81       	ld	r25, Y
     412:	99 23       	and	r25, r25
     414:	99 f0       	breq	.+38     	; 0x43c <FUNCsqueeze+0x32>
     416:	fe 01       	movw	r30, r28
     418:	31 96       	adiw	r30, 0x01	; 1
     41a:	20 e0       	ldi	r18, 0x00	; 0
     41c:	30 e0       	ldi	r19, 0x00	; 0
		if (s[i] != c)
     41e:	49 2f       	mov	r20, r25
     420:	50 e0       	ldi	r21, 0x00	; 0
     422:	46 17       	cp	r20, r22
     424:	57 07       	cpc	r21, r23
     426:	31 f0       	breq	.+12     	; 0x434 <FUNCsqueeze+0x2a>
			s[j++] = s[i];
     428:	de 01       	movw	r26, r28
     42a:	a2 0f       	add	r26, r18
     42c:	b3 1f       	adc	r27, r19
     42e:	9c 93       	st	X, r25
     430:	2f 5f       	subi	r18, 0xFF	; 255
     432:	3f 4f       	sbci	r19, 0xFF	; 255
}
// squeeze: delete all c from s
void FUNCsqueeze(char s[], int c)
{
	int i, j;
	for (i = j = 0; s[i] != '\0'; i++)
     434:	91 91       	ld	r25, Z+
     436:	91 11       	cpse	r25, r1
     438:	f2 cf       	rjmp	.-28     	; 0x41e <FUNCsqueeze+0x14>
     43a:	02 c0       	rjmp	.+4      	; 0x440 <FUNCsqueeze+0x36>
     43c:	20 e0       	ldi	r18, 0x00	; 0
     43e:	30 e0       	ldi	r19, 0x00	; 0
		if (s[i] != c)
			s[j++] = s[i];
		s[j] = '\0';
     440:	fe 01       	movw	r30, r28
     442:	e2 0f       	add	r30, r18
     444:	f3 1f       	adc	r31, r19
     446:	10 82       	st	Z, r1
}
     448:	df 91       	pop	r29
     44a:	cf 91       	pop	r28
     44c:	08 95       	ret

0000044e <FUNCshellsort>:
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
     44e:	2f 92       	push	r2
     450:	3f 92       	push	r3
     452:	4f 92       	push	r4
     454:	5f 92       	push	r5
     456:	6f 92       	push	r6
     458:	7f 92       	push	r7
     45a:	8f 92       	push	r8
     45c:	9f 92       	push	r9
     45e:	af 92       	push	r10
     460:	bf 92       	push	r11
     462:	cf 92       	push	r12
     464:	df 92       	push	r13
     466:	ef 92       	push	r14
     468:	ff 92       	push	r15
     46a:	0f 93       	push	r16
     46c:	1f 93       	push	r17
     46e:	cf 93       	push	r28
     470:	df 93       	push	r29
     472:	00 d0       	rcall	.+0      	; 0x474 <FUNCshellsort+0x26>
     474:	00 d0       	rcall	.+0      	; 0x476 <FUNCshellsort+0x28>
     476:	cd b7       	in	r28, 0x3d	; 61
     478:	de b7       	in	r29, 0x3e	; 62
     47a:	2c 01       	movw	r4, r24
     47c:	1b 01       	movw	r2, r22
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
     47e:	4b 01       	movw	r8, r22
     480:	77 23       	and	r23, r23
     482:	1c f4       	brge	.+6      	; 0x48a <FUNCshellsort+0x3c>
     484:	2f ef       	ldi	r18, 0xFF	; 255
     486:	82 1a       	sub	r8, r18
     488:	92 0a       	sbc	r9, r18
     48a:	95 94       	asr	r9
     48c:	87 94       	ror	r8
     48e:	18 14       	cp	r1, r8
     490:	19 04       	cpc	r1, r9
     492:	0c f4       	brge	.+2      	; 0x496 <FUNCshellsort+0x48>
     494:	51 c0       	rjmp	.+162    	; 0x538 <FUNCshellsort+0xea>
     496:	6a c0       	rjmp	.+212    	; 0x56c <FUNCshellsort+0x11e>
		for (i = gap; i < n; i++)
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
     498:	96 01       	movw	r18, r12
     49a:	dd 20       	and	r13, r13
     49c:	9c f1       	brlt	.+102    	; 0x504 <FUNCshellsort+0xb6>
     49e:	f5 01       	movw	r30, r10
     4a0:	40 81       	ld	r20, Z
     4a2:	51 81       	ldd	r21, Z+1	; 0x01
     4a4:	f4 01       	movw	r30, r8
     4a6:	60 81       	ld	r22, Z
     4a8:	71 81       	ldd	r23, Z+1	; 0x01
     4aa:	64 17       	cp	r22, r20
     4ac:	75 07       	cpc	r23, r21
     4ae:	54 f5       	brge	.+84     	; 0x504 <FUNCshellsort+0xb6>
     4b0:	8c 01       	movw	r16, r24
     4b2:	0a 0d       	add	r16, r10
     4b4:	1b 1d       	adc	r17, r11
     4b6:	d4 01       	movw	r26, r8
     4b8:	bc 82       	std	Y+4, r11	; 0x04
     4ba:	ab 82       	std	Y+3, r10	; 0x03
     4bc:	ba 82       	std	Y+2, r11	; 0x02
     4be:	a9 82       	std	Y+1, r10	; 0x01
				temp = v[j];
				v[j] = v[j+gap];
     4c0:	eb 81       	ldd	r30, Y+3	; 0x03
     4c2:	fc 81       	ldd	r31, Y+4	; 0x04
     4c4:	71 83       	std	Z+1, r23	; 0x01
     4c6:	60 83       	st	Z, r22
				v[j+gap] = temp;
     4c8:	11 96       	adiw	r26, 0x01	; 1
     4ca:	5c 93       	st	X, r21
     4cc:	4e 93       	st	-X, r20
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
		for (i = gap; i < n; i++)
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
     4ce:	2e 19       	sub	r18, r14
     4d0:	3f 09       	sbc	r19, r15
     4d2:	c2 f0       	brmi	.+48     	; 0x504 <FUNCshellsort+0xb6>
     4d4:	f8 01       	movw	r30, r16
     4d6:	40 81       	ld	r20, Z
     4d8:	51 81       	ldd	r21, Z+1	; 0x01
     4da:	e9 81       	ldd	r30, Y+1	; 0x01
     4dc:	fa 81       	ldd	r31, Y+2	; 0x02
     4de:	60 81       	ld	r22, Z
     4e0:	71 81       	ldd	r23, Z+1	; 0x01
     4e2:	08 0f       	add	r16, r24
     4e4:	19 1f       	adc	r17, r25
     4e6:	e8 0f       	add	r30, r24
     4e8:	f9 1f       	adc	r31, r25
     4ea:	fa 83       	std	Y+2, r31	; 0x02
     4ec:	e9 83       	std	Y+1, r30	; 0x01
     4ee:	eb 81       	ldd	r30, Y+3	; 0x03
     4f0:	fc 81       	ldd	r31, Y+4	; 0x04
     4f2:	e8 0f       	add	r30, r24
     4f4:	f9 1f       	adc	r31, r25
     4f6:	fc 83       	std	Y+4, r31	; 0x04
     4f8:	eb 83       	std	Y+3, r30	; 0x03
     4fa:	a8 0f       	add	r26, r24
     4fc:	b9 1f       	adc	r27, r25
     4fe:	64 17       	cp	r22, r20
     500:	75 07       	cpc	r23, r21
     502:	f4 f2       	brlt	.-68     	; 0x4c0 <FUNCshellsort+0x72>
     504:	ff ef       	ldi	r31, 0xFF	; 255
     506:	cf 1a       	sub	r12, r31
     508:	df 0a       	sbc	r13, r31
     50a:	22 e0       	ldi	r18, 0x02	; 2
     50c:	a2 0e       	add	r10, r18
     50e:	b1 1c       	adc	r11, r1
     510:	e2 e0       	ldi	r30, 0x02	; 2
     512:	8e 0e       	add	r8, r30
     514:	91 1c       	adc	r9, r1
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
		for (i = gap; i < n; i++)
     516:	c6 14       	cp	r12, r6
     518:	d7 04       	cpc	r13, r7
     51a:	09 f0       	breq	.+2      	; 0x51e <FUNCshellsort+0xd0>
     51c:	bd cf       	rjmp	.-134    	; 0x498 <FUNCshellsort+0x4a>
}
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
     51e:	47 01       	movw	r8, r14
     520:	ff 20       	and	r15, r15
     522:	1c f4       	brge	.+6      	; 0x52a <FUNCshellsort+0xdc>
     524:	ff ef       	ldi	r31, 0xFF	; 255
     526:	8f 1a       	sub	r8, r31
     528:	9f 0a       	sbc	r9, r31
     52a:	95 94       	asr	r9
     52c:	87 94       	ror	r8
     52e:	18 14       	cp	r1, r8
     530:	19 04       	cpc	r1, r9
     532:	e4 f4       	brge	.+56     	; 0x56c <FUNCshellsort+0x11e>
     534:	74 01       	movw	r14, r8
     536:	01 c0       	rjmp	.+2      	; 0x53a <FUNCshellsort+0xec>
     538:	74 01       	movw	r14, r8
		for (i = gap; i < n; i++)
     53a:	82 14       	cp	r8, r2
     53c:	93 04       	cpc	r9, r3
     53e:	7c f7       	brge	.-34     	; 0x51e <FUNCshellsort+0xd0>
     540:	64 01       	movw	r12, r8
     542:	ce 18       	sub	r12, r14
     544:	df 08       	sbc	r13, r15
     546:	56 01       	movw	r10, r12
     548:	aa 0c       	add	r10, r10
     54a:	bb 1c       	adc	r11, r11
     54c:	a4 0c       	add	r10, r4
     54e:	b5 1c       	adc	r11, r5
     550:	88 0c       	add	r8, r8
     552:	99 1c       	adc	r9, r9
     554:	84 0c       	add	r8, r4
     556:	95 1c       	adc	r9, r5
     558:	31 01       	movw	r6, r2
     55a:	6e 18       	sub	r6, r14
     55c:	7f 08       	sbc	r7, r15
     55e:	c7 01       	movw	r24, r14
     560:	88 0f       	add	r24, r24
     562:	99 1f       	adc	r25, r25
     564:	91 95       	neg	r25
     566:	81 95       	neg	r24
     568:	91 09       	sbc	r25, r1
     56a:	96 cf       	rjmp	.-212    	; 0x498 <FUNCshellsort+0x4a>
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
				temp = v[j];
				v[j] = v[j+gap];
				v[j+gap] = temp;
			}
}
     56c:	0f 90       	pop	r0
     56e:	0f 90       	pop	r0
     570:	0f 90       	pop	r0
     572:	0f 90       	pop	r0
     574:	df 91       	pop	r29
     576:	cf 91       	pop	r28
     578:	1f 91       	pop	r17
     57a:	0f 91       	pop	r16
     57c:	ff 90       	pop	r15
     57e:	ef 90       	pop	r14
     580:	df 90       	pop	r13
     582:	cf 90       	pop	r12
     584:	bf 90       	pop	r11
     586:	af 90       	pop	r10
     588:	9f 90       	pop	r9
     58a:	8f 90       	pop	r8
     58c:	7f 90       	pop	r7
     58e:	6f 90       	pop	r6
     590:	5f 90       	pop	r5
     592:	4f 90       	pop	r4
     594:	3f 90       	pop	r3
     596:	2f 90       	pop	r2
     598:	08 95       	ret

0000059a <FUNCpmax>:
	if(a1 > a2){
		biggest = a1;
	}else{
		biggest = a2;
	}
	return biggest;
     59a:	86 17       	cp	r24, r22
     59c:	97 07       	cpc	r25, r23
     59e:	0c f4       	brge	.+2      	; 0x5a2 <FUNCpmax+0x8>
     5a0:	cb 01       	movw	r24, r22
}
     5a2:	08 95       	ret

000005a4 <FUNCgcd>:
// common divisor
int FUNCgcd (int u, int v)
{
     5a4:	9b 01       	movw	r18, r22
	int temp;
	while ( v != 0 ) {
     5a6:	67 2b       	or	r22, r23
     5a8:	11 f4       	brne	.+4      	; 0x5ae <FUNCgcd+0xa>
     5aa:	08 95       	ret
		temp = u % v;
		u = v;
		v = temp;
     5ac:	9a 01       	movw	r18, r20
// common divisor
int FUNCgcd (int u, int v)
{
	int temp;
	while ( v != 0 ) {
		temp = u % v;
     5ae:	b9 01       	movw	r22, r18
     5b0:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__divmodhi4>
     5b4:	ac 01       	movw	r20, r24
     5b6:	82 2f       	mov	r24, r18
     5b8:	93 2f       	mov	r25, r19
}
// common divisor
int FUNCgcd (int u, int v)
{
	int temp;
	while ( v != 0 ) {
     5ba:	41 15       	cp	r20, r1
     5bc:	51 05       	cpc	r21, r1
     5be:	b1 f7       	brne	.-20     	; 0x5ac <FUNCgcd+0x8>
		temp = u % v;
		u = v;
		v = temp;
	}
	return u;
}
     5c0:	08 95       	ret

000005c2 <FUNCstrToInt>:
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
     5c2:	fc 01       	movw	r30, r24
	int i, intValue, result = 0;
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
     5c4:	90 81       	ld	r25, Z
     5c6:	80 ed       	ldi	r24, 0xD0	; 208
     5c8:	89 0f       	add	r24, r25
     5ca:	8a 30       	cpi	r24, 0x0A	; 10
     5cc:	d0 f4       	brcc	.+52     	; 0x602 <FUNCstrToInt+0x40>
     5ce:	31 96       	adiw	r30, 0x01	; 1
     5d0:	20 e0       	ldi	r18, 0x00	; 0
     5d2:	30 e0       	ldi	r19, 0x00	; 0
		intValue = string[i] - '0';
		result = result * 10 + intValue;
     5d4:	a9 01       	movw	r20, r18
     5d6:	44 0f       	add	r20, r20
     5d8:	55 1f       	adc	r21, r21
     5da:	22 0f       	add	r18, r18
     5dc:	33 1f       	adc	r19, r19
     5de:	22 0f       	add	r18, r18
     5e0:	33 1f       	adc	r19, r19
     5e2:	22 0f       	add	r18, r18
     5e4:	33 1f       	adc	r19, r19
     5e6:	42 0f       	add	r20, r18
     5e8:	53 1f       	adc	r21, r19
     5ea:	29 2f       	mov	r18, r25
     5ec:	30 e0       	ldi	r19, 0x00	; 0
     5ee:	20 53       	subi	r18, 0x30	; 48
     5f0:	31 09       	sbc	r19, r1
     5f2:	24 0f       	add	r18, r20
     5f4:	35 1f       	adc	r19, r21
}
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
	int i, intValue, result = 0;
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
     5f6:	91 91       	ld	r25, Z+
     5f8:	80 ed       	ldi	r24, 0xD0	; 208
     5fa:	89 0f       	add	r24, r25
     5fc:	8a 30       	cpi	r24, 0x0A	; 10
     5fe:	50 f3       	brcs	.-44     	; 0x5d4 <FUNCstrToInt+0x12>
     600:	02 c0       	rjmp	.+4      	; 0x606 <FUNCstrToInt+0x44>
	return u;
}
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
	int i, intValue, result = 0;
     602:	20 e0       	ldi	r18, 0x00	; 0
     604:	30 e0       	ldi	r19, 0x00	; 0
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
		intValue = string[i] - '0';
		result = result * 10 + intValue;
	}
	return result;
}
     606:	c9 01       	movw	r24, r18
     608:	08 95       	ret

0000060a <FUNCfilter>:
uint8_t FUNCfilter(uint8_t mask, uint8_t data)
{
	uint8_t Z;
	Z=mask & data;
	return Z;
}
     60a:	86 23       	and	r24, r22
     60c:	08 95       	ret

0000060e <FUNCticks>:
// ticks
unsigned int FUNCticks(unsigned int num)
{
	unsigned int count;
	for(count=0;count<num;count++)
     60e:	00 97       	sbiw	r24, 0x00	; 0
     610:	39 f0       	breq	.+14     	; 0x620 <FUNCticks+0x12>
     612:	20 e0       	ldi	r18, 0x00	; 0
     614:	30 e0       	ldi	r19, 0x00	; 0
     616:	2f 5f       	subi	r18, 0xFF	; 255
     618:	3f 4f       	sbci	r19, 0xFF	; 255
     61a:	82 17       	cp	r24, r18
     61c:	93 07       	cpc	r25, r19
     61e:	d9 f7       	brne	.-10     	; 0x616 <FUNCticks+0x8>
		;
	return count;
}
     620:	08 95       	ret

00000622 <FUNCtwocomptoint8bit>:
// Two's Complement function
int FUNCtwocomptoint8bit(int twoscomp){
  
  //Let's see if the byte is negative
  if (twoscomp & 0B10000000){
     622:	87 ff       	sbrs	r24, 7
     624:	08 c0       	rjmp	.+16     	; 0x636 <FUNCtwocomptoint8bit+0x14>
    //Invert
    twoscomp = ~twoscomp + 1;
     626:	91 95       	neg	r25
     628:	81 95       	neg	r24
     62a:	91 09       	sbc	r25, r1
	twoscomp = (twoscomp & 0B11111111);
    //Cast as int and multiply by negative one
    int value = (int)(twoscomp)*(-1);
     62c:	99 27       	eor	r25, r25
     62e:	91 95       	neg	r25
     630:	81 95       	neg	r24
     632:	91 09       	sbc	r25, r1
    return value;
     634:	08 95       	ret
    //Byte is non-negative, therefore convert to decimal and display
    //Make sure we are never over 1279
    twoscomp = (twoscomp & 0B01111111);
    //Cast as int and return
    int value = (int)(twoscomp);
    return value;
     636:	8f 77       	andi	r24, 0x7F	; 127
     638:	99 27       	eor	r25, r25
  }
}
     63a:	08 95       	ret

0000063c <FUNCtwocomptoint10bit>:
// Two's Complement function, shifts 10 bit binary to signed integers (-512 to 512)
int FUNCtwocomptoint10bit(int twoscomp){
	
  //Let's see if the byte is negative
  if (twoscomp & 0x200){
     63c:	91 ff       	sbrs	r25, 1
     63e:	08 c0       	rjmp	.+16     	; 0x650 <FUNCtwocomptoint10bit+0x14>
    //Invert
    twoscomp = ~twoscomp + 1;
     640:	91 95       	neg	r25
     642:	81 95       	neg	r24
     644:	91 09       	sbc	r25, r1
    twoscomp = (twoscomp & 0x3FF);
    //Cast as int and multiply by negative one
    int value = (int)(twoscomp)*(-1);
     646:	93 70       	andi	r25, 0x03	; 3
     648:	91 95       	neg	r25
     64a:	81 95       	neg	r24
     64c:	91 09       	sbc	r25, r1
    return value;
     64e:	08 95       	ret
    //Byte is non-negative, therefore convert to decimal and display
    twoscomp = (twoscomp & 0x1FF);
    //Cast as int and return
    //Serial.println(twoscomp);
    int value = (int)(twoscomp);
    return value;
     650:	91 70       	andi	r25, 0x01	; 1
  }
}
     652:	08 95       	ret

00000654 <FUNCtwocomptointnbit>:
// Two's Complement function, nbits
int FUNCtwocomptointnbit(int twoscomp, uint8_t nbits){
  unsigned int signmask;
  unsigned int mask;
  signmask = (1<<(nbits-1));
     654:	61 50       	subi	r22, 0x01	; 1
     656:	21 e0       	ldi	r18, 0x01	; 1
     658:	30 e0       	ldi	r19, 0x00	; 0
     65a:	02 c0       	rjmp	.+4      	; 0x660 <FUNCtwocomptointnbit+0xc>
     65c:	22 0f       	add	r18, r18
     65e:	33 1f       	adc	r19, r19
     660:	6a 95       	dec	r22
     662:	e2 f7       	brpl	.-8      	; 0x65c <FUNCtwocomptointnbit+0x8>
  mask=signmask-1;
     664:	a9 01       	movw	r20, r18
     666:	41 50       	subi	r20, 0x01	; 1
     668:	51 09       	sbc	r21, r1
  //Let's see if the number is negative
  if (twoscomp & signmask){
     66a:	b9 01       	movw	r22, r18
     66c:	68 23       	and	r22, r24
     66e:	79 23       	and	r23, r25
     670:	67 2b       	or	r22, r23
     672:	29 f0       	breq	.+10     	; 0x67e <FUNCtwocomptointnbit+0x2a>
	twoscomp &= mask;
    twoscomp -= signmask;
     674:	84 23       	and	r24, r20
     676:	95 23       	and	r25, r21
     678:	82 1b       	sub	r24, r18
     67a:	93 0b       	sbc	r25, r19
     67c:	08 95       	ret
  }else{
	  twoscomp &= mask;
     67e:	84 23       	and	r24, r20
     680:	95 23       	and	r25, r21
  }
  return twoscomp;
}
     682:	08 95       	ret

00000684 <FUNCdec2bcd>:
// Convert Decimal to Binary Coded Decimal (BCD)
char FUNCdec2bcd(char num)
{
	return ((num/10 * 16) + (num % 10));
     684:	9d ec       	ldi	r25, 0xCD	; 205
     686:	89 9f       	mul	r24, r25
     688:	91 2d       	mov	r25, r1
     68a:	11 24       	eor	r1, r1
     68c:	96 95       	lsr	r25
     68e:	96 95       	lsr	r25
     690:	96 95       	lsr	r25
     692:	39 2f       	mov	r19, r25
     694:	33 0f       	add	r19, r19
     696:	23 2f       	mov	r18, r19
     698:	22 0f       	add	r18, r18
     69a:	22 0f       	add	r18, r18
     69c:	23 0f       	add	r18, r19
     69e:	82 1b       	sub	r24, r18
}
     6a0:	20 e1       	ldi	r18, 0x10	; 16
     6a2:	92 9f       	mul	r25, r18
     6a4:	80 0d       	add	r24, r0
     6a6:	11 24       	eor	r1, r1
     6a8:	08 95       	ret

000006aa <FUNCbcd2dec>:
// Convert Binary Coded Decimal (BCD) to Decimal
char FUNCbcd2dec(char num)
{
	return ((num/16 * 10) + (num % 16));
     6aa:	98 2f       	mov	r25, r24
     6ac:	92 95       	swap	r25
     6ae:	9f 70       	andi	r25, 0x0F	; 15
     6b0:	99 0f       	add	r25, r25
     6b2:	29 2f       	mov	r18, r25
     6b4:	22 0f       	add	r18, r18
     6b6:	22 0f       	add	r18, r18
     6b8:	92 0f       	add	r25, r18
     6ba:	8f 70       	andi	r24, 0x0F	; 15
}
     6bc:	89 0f       	add	r24, r25
     6be:	08 95       	ret

000006c0 <FUNCresizestr>:
char* FUNCresizestr(char *string, int size)
{
     6c0:	fc 01       	movw	r30, r24
	int i;
	FUNCstr[size]='\0';
     6c2:	db 01       	movw	r26, r22
     6c4:	a3 58       	subi	r26, 0x83	; 131
     6c6:	be 4f       	sbci	r27, 0xFE	; 254
     6c8:	1c 92       	st	X, r1
	for(i=0;i<size;i++){
     6ca:	16 16       	cp	r1, r22
     6cc:	17 06       	cpc	r1, r23
     6ce:	14 f5       	brge	.+68     	; 0x714 <FUNCresizestr+0x54>
		if(*(string+i)=='\0'){
     6d0:	90 81       	ld	r25, Z
     6d2:	91 11       	cpse	r25, r1
     6d4:	0c c0       	rjmp	.+24     	; 0x6ee <FUNCresizestr+0x2e>
     6d6:	17 c0       	rjmp	.+46     	; 0x706 <FUNCresizestr+0x46>
     6d8:	91 91       	ld	r25, Z+
     6da:	91 11       	cpse	r25, r1
     6dc:	0d c0       	rjmp	.+26     	; 0x6f8 <FUNCresizestr+0x38>
     6de:	15 c0       	rjmp	.+42     	; 0x70a <FUNCresizestr+0x4a>
			for(;i<size;i++){
				FUNCstr[i]=' ';
     6e0:	81 93       	st	Z+, r24
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
		if(*(string+i)=='\0'){
			for(;i<size;i++){
     6e2:	2f 5f       	subi	r18, 0xFF	; 255
     6e4:	3f 4f       	sbci	r19, 0xFF	; 255
     6e6:	26 17       	cp	r18, r22
     6e8:	37 07       	cpc	r19, r23
     6ea:	d4 f3       	brlt	.-12     	; 0x6e0 <FUNCresizestr+0x20>
     6ec:	13 c0       	rjmp	.+38     	; 0x714 <FUNCresizestr+0x54>
     6ee:	ad e7       	ldi	r26, 0x7D	; 125
     6f0:	b1 e0       	ldi	r27, 0x01	; 1
     6f2:	31 96       	adiw	r30, 0x01	; 1
char* FUNCresizestr(char *string, int size)
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
		if(*(string+i)=='\0'){
     6f4:	20 e0       	ldi	r18, 0x00	; 0
     6f6:	30 e0       	ldi	r19, 0x00	; 0
			for(;i<size;i++){
				FUNCstr[i]=' ';
			}
			break;
		}
		FUNCstr[i]=*(string+i);
     6f8:	9d 93       	st	X+, r25
}
char* FUNCresizestr(char *string, int size)
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
     6fa:	2f 5f       	subi	r18, 0xFF	; 255
     6fc:	3f 4f       	sbci	r19, 0xFF	; 255
     6fe:	62 17       	cp	r22, r18
     700:	73 07       	cpc	r23, r19
     702:	51 f7       	brne	.-44     	; 0x6d8 <FUNCresizestr+0x18>
     704:	07 c0       	rjmp	.+14     	; 0x714 <FUNCresizestr+0x54>
     706:	20 e0       	ldi	r18, 0x00	; 0
     708:	30 e0       	ldi	r19, 0x00	; 0
     70a:	f9 01       	movw	r30, r18
     70c:	e3 58       	subi	r30, 0x83	; 131
     70e:	fe 4f       	sbci	r31, 0xFE	; 254
		if(*(string+i)=='\0'){
			for(;i<size;i++){
				FUNCstr[i]=' ';
     710:	80 e2       	ldi	r24, 0x20	; 32
     712:	e6 cf       	rjmp	.-52     	; 0x6e0 <FUNCresizestr+0x20>
			break;
		}
		FUNCstr[i]=*(string+i);
	}
	return FUNCstr;
}
     714:	8d e7       	ldi	r24, 0x7D	; 125
     716:	91 e0       	ldi	r25, 0x01	; 1
     718:	08 95       	ret

0000071a <FUNCtrimmer>:
long FUNCtrimmer(long x, long in_min, long in_max, long out_min, long out_max)
/*
	same as arduino map function.
*/
{
     71a:	4f 92       	push	r4
     71c:	5f 92       	push	r5
     71e:	6f 92       	push	r6
     720:	7f 92       	push	r7
     722:	af 92       	push	r10
     724:	bf 92       	push	r11
     726:	cf 92       	push	r12
     728:	df 92       	push	r13
     72a:	ef 92       	push	r14
     72c:	ff 92       	push	r15
     72e:	0f 93       	push	r16
     730:	1f 93       	push	r17
     732:	cf 93       	push	r28
     734:	df 93       	push	r29
     736:	cd b7       	in	r28, 0x3d	; 61
     738:	de b7       	in	r29, 0x3e	; 62
     73a:	29 01       	movw	r4, r18
     73c:	3a 01       	movw	r6, r20
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     73e:	9b 01       	movw	r18, r22
     740:	ac 01       	movw	r20, r24
     742:	24 19       	sub	r18, r4
     744:	35 09       	sbc	r19, r5
     746:	46 09       	sbc	r20, r6
     748:	57 09       	sbc	r21, r7
     74a:	89 89       	ldd	r24, Y+17	; 0x11
     74c:	9a 89       	ldd	r25, Y+18	; 0x12
     74e:	ab 89       	ldd	r26, Y+19	; 0x13
     750:	bc 89       	ldd	r27, Y+20	; 0x14
     752:	bc 01       	movw	r22, r24
     754:	cd 01       	movw	r24, r26
     756:	6a 19       	sub	r22, r10
     758:	7b 09       	sbc	r23, r11
     75a:	8c 09       	sbc	r24, r12
     75c:	9d 09       	sbc	r25, r13
     75e:	0e 94 b6 0a 	call	0x156c	; 0x156c <__mulsi3>
     762:	a8 01       	movw	r20, r16
     764:	97 01       	movw	r18, r14
     766:	24 19       	sub	r18, r4
     768:	35 09       	sbc	r19, r5
     76a:	46 09       	sbc	r20, r6
     76c:	57 09       	sbc	r21, r7
     76e:	0e 94 10 0b 	call	0x1620	; 0x1620 <__divmodsi4>
     772:	ca 01       	movw	r24, r20
     774:	b9 01       	movw	r22, r18
     776:	6a 0d       	add	r22, r10
     778:	7b 1d       	adc	r23, r11
     77a:	8c 1d       	adc	r24, r12
     77c:	9d 1d       	adc	r25, r13
}
     77e:	df 91       	pop	r29
     780:	cf 91       	pop	r28
     782:	1f 91       	pop	r17
     784:	0f 91       	pop	r16
     786:	ff 90       	pop	r15
     788:	ef 90       	pop	r14
     78a:	df 90       	pop	r13
     78c:	cf 90       	pop	r12
     78e:	bf 90       	pop	r11
     790:	af 90       	pop	r10
     792:	7f 90       	pop	r7
     794:	6f 90       	pop	r6
     796:	5f 90       	pop	r5
     798:	4f 90       	pop	r4
     79a:	08 95       	ret

0000079c <Pwr>:
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
     79c:	70 e0       	ldi	r23, 0x00	; 0
     79e:	61 15       	cp	r22, r1
     7a0:	71 05       	cpc	r23, r1
     7a2:	99 f0       	breq	.+38     	; 0x7ca <Pwr+0x2e>
     7a4:	41 e0       	ldi	r20, 0x01	; 1
     7a6:	50 e0       	ldi	r21, 0x00	; 0
     7a8:	21 e0       	ldi	r18, 0x01	; 1
     7aa:	30 e0       	ldi	r19, 0x00	; 0
        p = p * bs;
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	fa 01       	movw	r30, r20
     7b0:	e8 9f       	mul	r30, r24
     7b2:	a0 01       	movw	r20, r0
     7b4:	e9 9f       	mul	r30, r25
     7b6:	50 0d       	add	r21, r0
     7b8:	f8 9f       	mul	r31, r24
     7ba:	50 0d       	add	r21, r0
     7bc:	11 24       	eor	r1, r1
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
     7be:	2f 5f       	subi	r18, 0xFF	; 255
     7c0:	3f 4f       	sbci	r19, 0xFF	; 255
     7c2:	62 17       	cp	r22, r18
     7c4:	73 07       	cpc	r23, r19
     7c6:	98 f7       	brcc	.-26     	; 0x7ae <Pwr+0x12>
     7c8:	02 c0       	rjmp	.+4      	; 0x7ce <Pwr+0x32>
}
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
     7ca:	41 e0       	ldi	r20, 0x01	; 1
     7cc:	50 e0       	ldi	r21, 0x00	; 0
    for (i = 1; i <= n; ++i)
        p = p * bs;
    return p;
}
     7ce:	ca 01       	movw	r24, r20
     7d0:	08 95       	ret

000007d2 <StringLength>:
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
	while ( string[count] != '\0' )
     7d2:	fc 01       	movw	r30, r24
     7d4:	20 81       	ld	r18, Z
     7d6:	22 23       	and	r18, r18
     7d8:	41 f0       	breq	.+16     	; 0x7ea <StringLength+0x18>
     7da:	31 96       	adiw	r30, 0x01	; 1
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	90 e0       	ldi	r25, 0x00	; 0
		++count;
     7e0:	01 96       	adiw	r24, 0x01	; 1
}
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
	while ( string[count] != '\0' )
     7e2:	21 91       	ld	r18, Z+
     7e4:	21 11       	cpse	r18, r1
     7e6:	fc cf       	rjmp	.-8      	; 0x7e0 <StringLength+0xe>
     7e8:	08 95       	ret
    return p;
}
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
     7ea:	80 e0       	ldi	r24, 0x00	; 0
     7ec:	90 e0       	ldi	r25, 0x00	; 0
	while ( string[count] != '\0' )
		++count;
	return count;
}
     7ee:	08 95       	ret

000007f0 <FUNCtrim>:
	Reverse(FUNCstr);
	return FUNCstr;
}
// trim: remove trailing blanks, tabs, newlines
int FUNCtrim(char s[])
{
     7f0:	cf 93       	push	r28
     7f2:	df 93       	push	r29
     7f4:	ec 01       	movw	r28, r24
	int n;
	for (n = StringLength(s)-1; n >= 0; n--)
     7f6:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <StringLength>
     7fa:	9c 01       	movw	r18, r24
     7fc:	21 50       	subi	r18, 0x01	; 1
     7fe:	31 09       	sbc	r19, r1
     800:	62 f0       	brmi	.+24     	; 0x81a <FUNCtrim+0x2a>
     802:	fe 01       	movw	r30, r28
     804:	e8 0f       	add	r30, r24
     806:	f9 1f       	adc	r31, r25
		if (s[n] != ' ' && s[n] != '\t' && s[n] != '\n')
     808:	92 91       	ld	r25, -Z
     80a:	90 32       	cpi	r25, 0x20	; 32
     80c:	19 f0       	breq	.+6      	; 0x814 <FUNCtrim+0x24>
     80e:	99 50       	subi	r25, 0x09	; 9
     810:	92 30       	cpi	r25, 0x02	; 2
     812:	18 f4       	brcc	.+6      	; 0x81a <FUNCtrim+0x2a>
}
// trim: remove trailing blanks, tabs, newlines
int FUNCtrim(char s[])
{
	int n;
	for (n = StringLength(s)-1; n >= 0; n--)
     814:	21 50       	subi	r18, 0x01	; 1
     816:	31 09       	sbc	r19, r1
     818:	b8 f7       	brcc	.-18     	; 0x808 <FUNCtrim+0x18>
		if (s[n] != ' ' && s[n] != '\t' && s[n] != '\n')
			break;
	s[n+1] = '\0';
     81a:	c2 0f       	add	r28, r18
     81c:	d3 1f       	adc	r29, r19
     81e:	19 82       	std	Y+1, r1	; 0x01
	return n;
}
     820:	c9 01       	movw	r24, r18
     822:	df 91       	pop	r29
     824:	cf 91       	pop	r28
     826:	08 95       	ret

00000828 <Reverse>:
		++count;
	return count;
}
// reverse: reverse string s in place
void Reverse(char s[])
{
     828:	cf 93       	push	r28
     82a:	df 93       	push	r29
     82c:	ec 01       	movw	r28, r24
	int c, i, j;
	for (i = 0, j = StringLength(s)-1; i < j; i++, j--){
     82e:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <StringLength>
     832:	9c 01       	movw	r18, r24
     834:	21 50       	subi	r18, 0x01	; 1
     836:	31 09       	sbc	r19, r1
     838:	12 16       	cp	r1, r18
     83a:	13 06       	cpc	r1, r19
     83c:	84 f4       	brge	.+32     	; 0x85e <Reverse+0x36>
     83e:	de 01       	movw	r26, r28
     840:	a8 0f       	add	r26, r24
     842:	b9 1f       	adc	r27, r25
     844:	fe 01       	movw	r30, r28
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	90 e0       	ldi	r25, 0x00	; 0
		c = s[i];
     84a:	40 81       	ld	r20, Z
		s[i] = s[j];
     84c:	5e 91       	ld	r21, -X
     84e:	51 93       	st	Z+, r21
		s[j] = c;
     850:	4c 93       	st	X, r20
}
// reverse: reverse string s in place
void Reverse(char s[])
{
	int c, i, j;
	for (i = 0, j = StringLength(s)-1; i < j; i++, j--){
     852:	01 96       	adiw	r24, 0x01	; 1
     854:	21 50       	subi	r18, 0x01	; 1
     856:	31 09       	sbc	r19, r1
     858:	82 17       	cp	r24, r18
     85a:	93 07       	cpc	r25, r19
     85c:	b4 f3       	brlt	.-20     	; 0x84a <Reverse+0x22>
		c = s[i];
		s[i] = s[j];
		s[j] = c;
	}
}
     85e:	df 91       	pop	r29
     860:	cf 91       	pop	r28
     862:	08 95       	ret

00000864 <FUNCi32toa>:
				v[j+gap] = temp;
			}
}
// i32toa: convert n to characters in s
char* FUNCi32toa(int32_t n)
{
     864:	8f 92       	push	r8
     866:	9f 92       	push	r9
     868:	af 92       	push	r10
     86a:	bf 92       	push	r11
     86c:	cf 92       	push	r12
     86e:	df 92       	push	r13
     870:	ef 92       	push	r14
     872:	ff 92       	push	r15
     874:	0f 93       	push	r16
     876:	1f 93       	push	r17
     878:	cf 93       	push	r28
     87a:	df 93       	push	r29
     87c:	6b 01       	movw	r12, r22
     87e:	7c 01       	movw	r14, r24
     880:	dc 01       	movw	r26, r24
     882:	cb 01       	movw	r24, r22
     884:	ff 20       	and	r15, r15
     886:	3c f4       	brge	.+14     	; 0x896 <FUNCi32toa+0x32>
     888:	88 27       	eor	r24, r24
     88a:	99 27       	eor	r25, r25
     88c:	dc 01       	movw	r26, r24
     88e:	8c 19       	sub	r24, r12
     890:	9d 09       	sbc	r25, r13
     892:	ae 09       	sbc	r26, r14
     894:	bf 09       	sbc	r27, r15
     896:	bc 01       	movw	r22, r24
     898:	cd 01       	movw	r24, r26
     89a:	10 e0       	ldi	r17, 0x00	; 0
	int32_t sign;
	if ((sign = n) < 0) // record sign
	n = -n; // make n positive
	i = 0;
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
     89c:	0f 2e       	mov	r0, r31
     89e:	fa e0       	ldi	r31, 0x0A	; 10
     8a0:	8f 2e       	mov	r8, r31
     8a2:	91 2c       	mov	r9, r1
     8a4:	a1 2c       	mov	r10, r1
     8a6:	b1 2c       	mov	r11, r1
     8a8:	f0 2d       	mov	r31, r0
     8aa:	01 c0       	rjmp	.+2      	; 0x8ae <FUNCi32toa+0x4a>
     8ac:	10 2f       	mov	r17, r16
     8ae:	01 e0       	ldi	r16, 0x01	; 1
     8b0:	01 0f       	add	r16, r17
     8b2:	c1 2f       	mov	r28, r17
     8b4:	d0 e0       	ldi	r29, 0x00	; 0
     8b6:	c3 58       	subi	r28, 0x83	; 131
     8b8:	de 4f       	sbci	r29, 0xFE	; 254
     8ba:	a5 01       	movw	r20, r10
     8bc:	94 01       	movw	r18, r8
     8be:	0e 94 10 0b 	call	0x1620	; 0x1620 <__divmodsi4>
     8c2:	60 5d       	subi	r22, 0xD0	; 208
     8c4:	68 83       	st	Y, r22
	}while ((n /= 10) > 0); // delete it
     8c6:	62 2f       	mov	r22, r18
     8c8:	73 2f       	mov	r23, r19
     8ca:	84 2f       	mov	r24, r20
     8cc:	95 2f       	mov	r25, r21
     8ce:	16 16       	cp	r1, r22
     8d0:	17 06       	cpc	r1, r23
     8d2:	18 06       	cpc	r1, r24
     8d4:	19 06       	cpc	r1, r25
     8d6:	54 f3       	brlt	.-44     	; 0x8ac <FUNCi32toa+0x48>
	if (sign < 0)
     8d8:	ff 20       	and	r15, r15
     8da:	44 f4       	brge	.+16     	; 0x8ec <FUNCi32toa+0x88>
	FUNCstr[i++] = '-';
     8dc:	e0 2f       	mov	r30, r16
     8de:	f0 e0       	ldi	r31, 0x00	; 0
     8e0:	e3 58       	subi	r30, 0x83	; 131
     8e2:	fe 4f       	sbci	r31, 0xFE	; 254
     8e4:	8d e2       	ldi	r24, 0x2D	; 45
     8e6:	80 83       	st	Z, r24
     8e8:	02 e0       	ldi	r16, 0x02	; 2
     8ea:	01 0f       	add	r16, r17
	FUNCstr[i] = '\0';
     8ec:	e0 2f       	mov	r30, r16
     8ee:	f0 e0       	ldi	r31, 0x00	; 0
     8f0:	e3 58       	subi	r30, 0x83	; 131
     8f2:	fe 4f       	sbci	r31, 0xFE	; 254
     8f4:	10 82       	st	Z, r1
	Reverse(FUNCstr);
     8f6:	8d e7       	ldi	r24, 0x7D	; 125
     8f8:	91 e0       	ldi	r25, 0x01	; 1
     8fa:	0e 94 14 04 	call	0x828	; 0x828 <Reverse>
	return FUNCstr;
}
     8fe:	8d e7       	ldi	r24, 0x7D	; 125
     900:	91 e0       	ldi	r25, 0x01	; 1
     902:	df 91       	pop	r29
     904:	cf 91       	pop	r28
     906:	1f 91       	pop	r17
     908:	0f 91       	pop	r16
     90a:	ff 90       	pop	r15
     90c:	ef 90       	pop	r14
     90e:	df 90       	pop	r13
     910:	cf 90       	pop	r12
     912:	bf 90       	pop	r11
     914:	af 90       	pop	r10
     916:	9f 90       	pop	r9
     918:	8f 90       	pop	r8
     91a:	08 95       	ret

0000091c <FUNCi16toa>:
// i16toa: convert n to characters in s
char* FUNCi16toa(int16_t n)
{
     91c:	0f 93       	push	r16
     91e:	1f 93       	push	r17
     920:	cf 93       	push	r28
     922:	df 93       	push	r29
     924:	ec 01       	movw	r28, r24
     926:	99 23       	and	r25, r25
     928:	24 f4       	brge	.+8      	; 0x932 <FUNCi16toa+0x16>
     92a:	88 27       	eor	r24, r24
     92c:	99 27       	eor	r25, r25
     92e:	8c 1b       	sub	r24, r28
     930:	9d 0b       	sbc	r25, r29
     932:	20 e0       	ldi	r18, 0x00	; 0
	int16_t sign;
	if ((sign = n) < 0) // record sign
		n = -n; // make n positive
	i = 0;
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
     934:	0a e0       	ldi	r16, 0x0A	; 10
     936:	10 e0       	ldi	r17, 0x00	; 0
     938:	01 c0       	rjmp	.+2      	; 0x93c <FUNCi16toa+0x20>
     93a:	23 2f       	mov	r18, r19
     93c:	31 e0       	ldi	r19, 0x01	; 1
     93e:	32 0f       	add	r19, r18
     940:	e2 2f       	mov	r30, r18
     942:	f0 e0       	ldi	r31, 0x00	; 0
     944:	e3 58       	subi	r30, 0x83	; 131
     946:	fe 4f       	sbci	r31, 0xFE	; 254
     948:	b8 01       	movw	r22, r16
     94a:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__divmodhi4>
     94e:	80 5d       	subi	r24, 0xD0	; 208
     950:	80 83       	st	Z, r24
	}while ((n /= 10) > 0); // delete it
     952:	86 2f       	mov	r24, r22
     954:	97 2f       	mov	r25, r23
     956:	18 16       	cp	r1, r24
     958:	19 06       	cpc	r1, r25
     95a:	7c f3       	brlt	.-34     	; 0x93a <FUNCi16toa+0x1e>
	if (sign < 0)
     95c:	dd 23       	and	r29, r29
     95e:	44 f4       	brge	.+16     	; 0x970 <FUNCi16toa+0x54>
		FUNCstr[i++] = '-';
     960:	e3 2f       	mov	r30, r19
     962:	f0 e0       	ldi	r31, 0x00	; 0
     964:	e3 58       	subi	r30, 0x83	; 131
     966:	fe 4f       	sbci	r31, 0xFE	; 254
     968:	8d e2       	ldi	r24, 0x2D	; 45
     96a:	80 83       	st	Z, r24
     96c:	32 e0       	ldi	r19, 0x02	; 2
     96e:	32 0f       	add	r19, r18
	FUNCstr[i] = '\0';
     970:	e3 2f       	mov	r30, r19
     972:	f0 e0       	ldi	r31, 0x00	; 0
     974:	e3 58       	subi	r30, 0x83	; 131
     976:	fe 4f       	sbci	r31, 0xFE	; 254
     978:	10 82       	st	Z, r1
	Reverse(FUNCstr);
     97a:	8d e7       	ldi	r24, 0x7D	; 125
     97c:	91 e0       	ldi	r25, 0x01	; 1
     97e:	0e 94 14 04 	call	0x828	; 0x828 <Reverse>
	return FUNCstr;
}
     982:	8d e7       	ldi	r24, 0x7D	; 125
     984:	91 e0       	ldi	r25, 0x01	; 1
     986:	df 91       	pop	r29
     988:	cf 91       	pop	r28
     98a:	1f 91       	pop	r17
     98c:	0f 91       	pop	r16
     98e:	08 95       	ret

00000990 <FUNCui16toa>:
// ui16toa: convert n to characters in s
char* FUNCui16toa(uint16_t n)
{
     990:	cf 93       	push	r28
     992:	ac 01       	movw	r20, r24
	uint8_t i;
	i = 0;
     994:	e0 e0       	ldi	r30, 0x00	; 0
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
     996:	c1 e0       	ldi	r28, 0x01	; 1
     998:	ce 0f       	add	r28, r30
     99a:	f0 e0       	ldi	r31, 0x00	; 0
     99c:	e3 58       	subi	r30, 0x83	; 131
     99e:	fe 4f       	sbci	r31, 0xFE	; 254
     9a0:	9a 01       	movw	r18, r20
     9a2:	ad ec       	ldi	r26, 0xCD	; 205
     9a4:	bc ec       	ldi	r27, 0xCC	; 204
     9a6:	0e 94 2f 0b 	call	0x165e	; 0x165e <__umulhisi3>
     9aa:	96 95       	lsr	r25
     9ac:	87 95       	ror	r24
     9ae:	96 95       	lsr	r25
     9b0:	87 95       	ror	r24
     9b2:	96 95       	lsr	r25
     9b4:	87 95       	ror	r24
     9b6:	9c 01       	movw	r18, r24
     9b8:	22 0f       	add	r18, r18
     9ba:	33 1f       	adc	r19, r19
     9bc:	88 0f       	add	r24, r24
     9be:	99 1f       	adc	r25, r25
     9c0:	88 0f       	add	r24, r24
     9c2:	99 1f       	adc	r25, r25
     9c4:	88 0f       	add	r24, r24
     9c6:	99 1f       	adc	r25, r25
     9c8:	82 0f       	add	r24, r18
     9ca:	93 1f       	adc	r25, r19
     9cc:	9a 01       	movw	r18, r20
     9ce:	28 1b       	sub	r18, r24
     9d0:	39 0b       	sbc	r19, r25
     9d2:	c9 01       	movw	r24, r18
     9d4:	80 5d       	subi	r24, 0xD0	; 208
     9d6:	80 83       	st	Z, r24
	}while ((n /= 10) > 0); // delete it
     9d8:	9a 01       	movw	r18, r20
     9da:	0e 94 2f 0b 	call	0x165e	; 0x165e <__umulhisi3>
     9de:	ac 01       	movw	r20, r24
     9e0:	56 95       	lsr	r21
     9e2:	47 95       	ror	r20
     9e4:	56 95       	lsr	r21
     9e6:	47 95       	ror	r20
     9e8:	56 95       	lsr	r21
     9ea:	47 95       	ror	r20
char* FUNCui16toa(uint16_t n)
{
	uint8_t i;
	i = 0;
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
     9ec:	ec 2f       	mov	r30, r28
	}while ((n /= 10) > 0); // delete it
     9ee:	41 15       	cp	r20, r1
     9f0:	51 05       	cpc	r21, r1
     9f2:	89 f6       	brne	.-94     	; 0x996 <FUNCui16toa+0x6>
	FUNCstr[i] = '\0';
     9f4:	ec 2f       	mov	r30, r28
     9f6:	f0 e0       	ldi	r31, 0x00	; 0
     9f8:	e3 58       	subi	r30, 0x83	; 131
     9fa:	fe 4f       	sbci	r31, 0xFE	; 254
     9fc:	10 82       	st	Z, r1
	Reverse(FUNCstr);
     9fe:	8d e7       	ldi	r24, 0x7D	; 125
     a00:	91 e0       	ldi	r25, 0x01	; 1
     a02:	0e 94 14 04 	call	0x828	; 0x828 <Reverse>
	return FUNCstr;
}
     a06:	8d e7       	ldi	r24, 0x7D	; 125
     a08:	91 e0       	ldi	r25, 0x01	; 1
     a0a:	cf 91       	pop	r28
     a0c:	08 95       	ret

00000a0e <FUNCbcd2bin>:
		s[j] = c;
	}
}
unsigned char FUNCbcd2bin(unsigned char val)
{
	return (val & 0x0f) + (val >> 4) * 10;
     a0e:	98 2f       	mov	r25, r24
     a10:	92 95       	swap	r25
     a12:	9f 70       	andi	r25, 0x0F	; 15
     a14:	99 0f       	add	r25, r25
     a16:	29 2f       	mov	r18, r25
     a18:	22 0f       	add	r18, r18
     a1a:	22 0f       	add	r18, r18
     a1c:	92 0f       	add	r25, r18
     a1e:	8f 70       	andi	r24, 0x0F	; 15
}
     a20:	89 0f       	add	r24, r25
     a22:	08 95       	ret

00000a24 <FUNCbin2bcd>:
unsigned char FUNCbin2bcd(unsigned val)
{
     a24:	ac 01       	movw	r20, r24
	return ((val / 10) << 4) + val % 10;
     a26:	9c 01       	movw	r18, r24
     a28:	ad ec       	ldi	r26, 0xCD	; 205
     a2a:	bc ec       	ldi	r27, 0xCC	; 204
     a2c:	0e 94 2f 0b 	call	0x165e	; 0x165e <__umulhisi3>
     a30:	96 95       	lsr	r25
     a32:	87 95       	ror	r24
     a34:	96 95       	lsr	r25
     a36:	87 95       	ror	r24
     a38:	96 95       	lsr	r25
     a3a:	87 95       	ror	r24
     a3c:	bc 01       	movw	r22, r24
     a3e:	66 0f       	add	r22, r22
     a40:	77 1f       	adc	r23, r23
     a42:	9c 01       	movw	r18, r24
     a44:	22 0f       	add	r18, r18
     a46:	33 1f       	adc	r19, r19
     a48:	22 0f       	add	r18, r18
     a4a:	33 1f       	adc	r19, r19
     a4c:	22 0f       	add	r18, r18
     a4e:	33 1f       	adc	r19, r19
     a50:	26 0f       	add	r18, r22
     a52:	37 1f       	adc	r19, r23
     a54:	42 1b       	sub	r20, r18
     a56:	53 0b       	sbc	r21, r19
}
     a58:	34 2f       	mov	r19, r20
     a5a:	20 e1       	ldi	r18, 0x10	; 16
     a5c:	82 9f       	mul	r24, r18
     a5e:	30 0d       	add	r19, r0
     a60:	11 24       	eor	r1, r1
     a62:	83 2f       	mov	r24, r19
     a64:	08 95       	ret

00000a66 <FUNCgcd1>:
long FUNCgcd1(long a, long b)
{
     a66:	cf 92       	push	r12
     a68:	df 92       	push	r13
     a6a:	ef 92       	push	r14
     a6c:	ff 92       	push	r15
     a6e:	cf 93       	push	r28
     a70:	df 93       	push	r29
     a72:	cd b7       	in	r28, 0x3d	; 61
     a74:	de b7       	in	r29, 0x3e	; 62
     a76:	28 97       	sbiw	r28, 0x08	; 8
     a78:	0f b6       	in	r0, 0x3f	; 63
     a7a:	f8 94       	cli
     a7c:	de bf       	out	0x3e, r29	; 62
     a7e:	0f be       	out	0x3f, r0	; 63
     a80:	cd bf       	out	0x3d, r28	; 61
     a82:	6b 01       	movw	r12, r22
     a84:	7c 01       	movw	r14, r24
     a86:	69 83       	std	Y+1, r22	; 0x01
     a88:	7a 83       	std	Y+2, r23	; 0x02
     a8a:	8b 83       	std	Y+3, r24	; 0x03
     a8c:	9c 83       	std	Y+4, r25	; 0x04
     a8e:	2d 83       	std	Y+5, r18	; 0x05
     a90:	3e 83       	std	Y+6, r19	; 0x06
     a92:	4f 83       	std	Y+7, r20	; 0x07
     a94:	58 87       	std	Y+8, r21	; 0x08
	long r;
	if (a < b)
     a96:	c2 16       	cp	r12, r18
     a98:	d3 06       	cpc	r13, r19
     a9a:	e4 06       	cpc	r14, r20
     a9c:	f5 06       	cpc	r15, r21
     a9e:	3c f4       	brge	.+14     	; 0xaae <FUNCgcd1+0x48>
		FUNCswap(&a, &b);
     aa0:	be 01       	movw	r22, r28
     aa2:	6b 5f       	subi	r22, 0xFB	; 251
     aa4:	7f 4f       	sbci	r23, 0xFF	; 255
     aa6:	ce 01       	movw	r24, r28
     aa8:	01 96       	adiw	r24, 0x01	; 1
     aaa:	0e 94 d6 01 	call	0x3ac	; 0x3ac <FUNCswap>
	if (!b){
     aae:	8d 81       	ldd	r24, Y+5	; 0x05
     ab0:	9e 81       	ldd	r25, Y+6	; 0x06
     ab2:	af 81       	ldd	r26, Y+7	; 0x07
     ab4:	b8 85       	ldd	r27, Y+8	; 0x08
     ab6:	89 2b       	or	r24, r25
     ab8:	8a 2b       	or	r24, r26
     aba:	8b 2b       	or	r24, r27
     abc:	71 f4       	brne	.+28     	; 0xada <FUNCgcd1+0x74>
		while ((r = a % b) != 0) {
     abe:	69 81       	ldd	r22, Y+1	; 0x01
     ac0:	7a 81       	ldd	r23, Y+2	; 0x02
     ac2:	8b 81       	ldd	r24, Y+3	; 0x03
     ac4:	9c 81       	ldd	r25, Y+4	; 0x04
     ac6:	20 e0       	ldi	r18, 0x00	; 0
     ac8:	30 e0       	ldi	r19, 0x00	; 0
     aca:	a9 01       	movw	r20, r18
     acc:	0e 94 10 0b 	call	0x1620	; 0x1620 <__divmodsi4>
     ad0:	61 15       	cp	r22, r1
     ad2:	71 05       	cpc	r23, r1
     ad4:	81 05       	cpc	r24, r1
     ad6:	91 05       	cpc	r25, r1
     ad8:	29 f4       	brne	.+10     	; 0xae4 <FUNCgcd1+0x7e>
			a = b;
			b = r;
		}
	}	
	return b;
     ada:	6d 81       	ldd	r22, Y+5	; 0x05
     adc:	7e 81       	ldd	r23, Y+6	; 0x06
     ade:	8f 81       	ldd	r24, Y+7	; 0x07
     ae0:	98 85       	ldd	r25, Y+8	; 0x08
     ae2:	05 c0       	rjmp	.+10     	; 0xaee <FUNCgcd1+0x88>
	if (a < b)
		FUNCswap(&a, &b);
	if (!b){
		while ((r = a % b) != 0) {
			a = b;
			b = r;
     ae4:	6d 83       	std	Y+5, r22	; 0x05
     ae6:	7e 83       	std	Y+6, r23	; 0x06
     ae8:	8f 83       	std	Y+7, r24	; 0x07
     aea:	98 87       	std	Y+8, r25	; 0x08
     aec:	f6 cf       	rjmp	.-20     	; 0xada <FUNCgcd1+0x74>
		}
	}	
	return b;
}
     aee:	28 96       	adiw	r28, 0x08	; 8
     af0:	0f b6       	in	r0, 0x3f	; 63
     af2:	f8 94       	cli
     af4:	de bf       	out	0x3e, r29	; 62
     af6:	0f be       	out	0x3f, r0	; 63
     af8:	cd bf       	out	0x3d, r28	; 61
     afa:	df 91       	pop	r29
     afc:	cf 91       	pop	r28
     afe:	ff 90       	pop	r15
     b00:	ef 90       	pop	r14
     b02:	df 90       	pop	r13
     b04:	cf 90       	pop	r12
     b06:	08 95       	ret

00000b08 <FUNCpincheck>:
	uint8_t lh;
	if(port & (1<<pin))
		lh=1;
	else
		lh=0;
	return lh;
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	02 c0       	rjmp	.+4      	; 0xb10 <FUNCpincheck+0x8>
     b0c:	95 95       	asr	r25
     b0e:	87 95       	ror	r24
     b10:	6a 95       	dec	r22
     b12:	e2 f7       	brpl	.-8      	; 0xb0c <FUNCpincheck+0x4>
}
     b14:	81 70       	andi	r24, 0x01	; 1
     b16:	08 95       	ret

00000b18 <FUNCprint_binary>:
char* FUNCprint_binary(uint8_t number)
{
     b18:	ed e7       	ldi	r30, 0x7D	; 125
     b1a:	f1 e0       	ldi	r31, 0x01	; 1
	uint8_t i,c;
    for(i=128,c=0;i;i>>=1,c++){
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	20 e8       	ldi	r18, 0x80	; 128
	(number & i) ? (FUNCstr[c]='1') : (FUNCstr[c]='0');
     b20:	50 e3       	ldi	r21, 0x30	; 48
     b22:	41 e3       	ldi	r20, 0x31	; 49
     b24:	38 2f       	mov	r19, r24
     b26:	32 23       	and	r19, r18
     b28:	11 f0       	breq	.+4      	; 0xb2e <FUNCprint_binary+0x16>
     b2a:	40 83       	st	Z, r20
     b2c:	01 c0       	rjmp	.+2      	; 0xb30 <FUNCprint_binary+0x18>
     b2e:	50 83       	st	Z, r21
	return lh;
}
char* FUNCprint_binary(uint8_t number)
{
	uint8_t i,c;
    for(i=128,c=0;i;i>>=1,c++){
     b30:	26 95       	lsr	r18
     b32:	9f 5f       	subi	r25, 0xFF	; 255
     b34:	31 96       	adiw	r30, 0x01	; 1
     b36:	98 30       	cpi	r25, 0x08	; 8
     b38:	a9 f7       	brne	.-22     	; 0xb24 <FUNCprint_binary+0xc>
	(number & i) ? (FUNCstr[c]='1') : (FUNCstr[c]='0');
	}
	FUNCstr[c]='\0';
     b3a:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <FUNCstr+0x8>
	return FUNCstr;
}
     b3e:	8d e7       	ldi	r24, 0x7D	; 125
     b40:	91 e0       	ldi	r25, 0x01	; 1
     b42:	08 95       	ret

00000b44 <FUNCmayia>:
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
     b44:	a4 2f       	mov	r26, r20
     b46:	b0 e0       	ldi	r27, 0x00	; 0
     b48:	10 97       	sbiw	r26, 0x00	; 0
     b4a:	61 f0       	breq	.+24     	; 0xb64 <FUNCmayia+0x20>
     b4c:	21 e0       	ldi	r18, 0x01	; 1
     b4e:	30 e0       	ldi	r19, 0x00	; 0
     b50:	e1 e0       	ldi	r30, 0x01	; 1
     b52:	f0 e0       	ldi	r31, 0x00	; 0
        p = p * bs;
     b54:	ee 0f       	add	r30, r30
     b56:	ff 1f       	adc	r31, r31
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
     b58:	2f 5f       	subi	r18, 0xFF	; 255
     b5a:	3f 4f       	sbci	r19, 0xFF	; 255
     b5c:	a2 17       	cp	r26, r18
     b5e:	b3 07       	cpc	r27, r19
     b60:	c8 f7       	brcc	.-14     	; 0xb54 <FUNCmayia+0x10>
     b62:	02 c0       	rjmp	.+4      	; 0xb68 <FUNCmayia+0x24>
}
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
     b64:	e1 e0       	ldi	r30, 0x01	; 1
     b66:	f0 e0       	ldi	r31, 0x00	; 0
unsigned int FUNCmayia(unsigned int xi, unsigned int xf, uint8_t nbits)
{//magic formula
	unsigned int mask;
	unsigned int diff;
	unsigned int trans;
	mask=Pwr(2,nbits)-1;
     b68:	31 97       	sbiw	r30, 0x01	; 1
	xi&=mask;
	xf&=mask;
     b6a:	6e 23       	and	r22, r30
     b6c:	7f 23       	and	r23, r31
	diff=xf^xi;
     b6e:	8e 23       	and	r24, r30
     b70:	9f 23       	and	r25, r31
     b72:	86 27       	eor	r24, r22
     b74:	97 27       	eor	r25, r23
	trans=diff&xf;
	return (trans<<nbits)|diff;
     b76:	68 23       	and	r22, r24
     b78:	79 23       	and	r23, r25
     b7a:	02 c0       	rjmp	.+4      	; 0xb80 <FUNCmayia+0x3c>
     b7c:	66 0f       	add	r22, r22
     b7e:	77 1f       	adc	r23, r23
     b80:	4a 95       	dec	r20
     b82:	e2 f7       	brpl	.-8      	; 0xb7c <FUNCmayia+0x38>
}
     b84:	86 2b       	or	r24, r22
     b86:	97 2b       	or	r25, r23
     b88:	08 95       	ret

00000b8a <FUNCenable>:
// uint8_t TRANupdate(struct TRAN *tr, uint8_t idata);
/*
** procedure and function
*/
FUNC FUNCenable( void )
{
     b8a:	fc 01       	movw	r30, r24
	uint8_t tSREG;
	tSREG=SREG;
     b8c:	9f b7       	in	r25, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
     b8e:	8f b7       	in	r24, 0x3f	; 63
     b90:	8f 77       	andi	r24, 0x7F	; 127
     b92:	8f bf       	out	0x3f, r24	; 63
	func.putstr=FUNCputstr;
	func.getnum=FUNCgetnum;
	func.getnumv2=FUNCgetnumv2;
	func.readint=FUNCreadint;
	*/
	SREG=tSREG;
     b94:	9f bf       	out	0x3f, r25	; 63
	/******/
	return func;
     b96:	8e ec       	ldi	r24, 0xCE	; 206
     b98:	93 e0       	ldi	r25, 0x03	; 3
     b9a:	91 83       	std	Z+1, r25	; 0x01
     b9c:	80 83       	st	Z, r24
     b9e:	89 ee       	ldi	r24, 0xE9	; 233
     ba0:	93 e0       	ldi	r25, 0x03	; 3
     ba2:	93 83       	std	Z+3, r25	; 0x03
     ba4:	82 83       	std	Z+2, r24	; 0x02
     ba6:	84 e1       	ldi	r24, 0x14	; 20
     ba8:	94 e0       	ldi	r25, 0x04	; 4
     baa:	95 83       	std	Z+5, r25	; 0x05
     bac:	84 83       	std	Z+4, r24	; 0x04
     bae:	82 ea       	ldi	r24, 0xA2	; 162
     bb0:	95 e0       	ldi	r25, 0x05	; 5
     bb2:	97 83       	std	Z+7, r25	; 0x07
     bb4:	86 83       	std	Z+6, r24	; 0x06
     bb6:	8b eb       	ldi	r24, 0xBB	; 187
     bb8:	91 e0       	ldi	r25, 0x01	; 1
     bba:	91 87       	std	Z+9, r25	; 0x09
     bbc:	80 87       	std	Z+8, r24	; 0x08
     bbe:	89 ec       	ldi	r24, 0xC9	; 201
     bc0:	91 e0       	ldi	r25, 0x01	; 1
     bc2:	93 87       	std	Z+11, r25	; 0x0b
     bc4:	82 87       	std	Z+10, r24	; 0x0a
     bc6:	8b ec       	ldi	r24, 0xCB	; 203
     bc8:	91 e0       	ldi	r25, 0x01	; 1
     bca:	95 87       	std	Z+13, r25	; 0x0d
     bcc:	84 87       	std	Z+12, r24	; 0x0c
     bce:	8e ec       	ldi	r24, 0xCE	; 206
     bd0:	91 e0       	ldi	r25, 0x01	; 1
     bd2:	97 87       	std	Z+15, r25	; 0x0f
     bd4:	86 87       	std	Z+14, r24	; 0x0e
     bd6:	81 ed       	ldi	r24, 0xD1	; 209
     bd8:	91 e0       	ldi	r25, 0x01	; 1
     bda:	91 8b       	std	Z+17, r25	; 0x11
     bdc:	80 8b       	std	Z+16, r24	; 0x10
     bde:	84 ed       	ldi	r24, 0xD4	; 212
     be0:	91 e0       	ldi	r25, 0x01	; 1
     be2:	93 8b       	std	Z+19, r25	; 0x13
     be4:	82 8b       	std	Z+18, r24	; 0x12
     be6:	85 ec       	ldi	r24, 0xC5	; 197
     be8:	91 e0       	ldi	r25, 0x01	; 1
     bea:	95 8b       	std	Z+21, r25	; 0x15
     bec:	84 8b       	std	Z+20, r24	; 0x14
     bee:	87 ec       	ldi	r24, 0xC7	; 199
     bf0:	91 e0       	ldi	r25, 0x01	; 1
     bf2:	97 8b       	std	Z+23, r25	; 0x17
     bf4:	86 8b       	std	Z+22, r24	; 0x16
     bf6:	86 ed       	ldi	r24, 0xD6	; 214
     bf8:	91 e0       	ldi	r25, 0x01	; 1
     bfa:	91 8f       	std	Z+25, r25	; 0x19
     bfc:	80 8f       	std	Z+24, r24	; 0x18
     bfe:	87 ef       	ldi	r24, 0xF7	; 247
     c00:	91 e0       	ldi	r25, 0x01	; 1
     c02:	93 8f       	std	Z+27, r25	; 0x1b
     c04:	82 8f       	std	Z+26, r24	; 0x1a
     c06:	85 e0       	ldi	r24, 0x05	; 5
     c08:	92 e0       	ldi	r25, 0x02	; 2
     c0a:	95 8f       	std	Z+29, r25	; 0x1d
     c0c:	84 8f       	std	Z+28, r24	; 0x1c
     c0e:	87 e2       	ldi	r24, 0x27	; 39
     c10:	92 e0       	ldi	r25, 0x02	; 2
     c12:	97 8f       	std	Z+31, r25	; 0x1f
     c14:	86 8f       	std	Z+30, r24	; 0x1e
     c16:	8e e8       	ldi	r24, 0x8E	; 142
     c18:	94 e0       	ldi	r25, 0x04	; 4
     c1a:	91 a3       	std	Z+33, r25	; 0x21
     c1c:	80 a3       	std	Z+32, r24	; 0x20
     c1e:	88 ec       	ldi	r24, 0xC8	; 200
     c20:	94 e0       	ldi	r25, 0x04	; 4
     c22:	93 a3       	std	Z+35, r25	; 0x23
     c24:	82 a3       	std	Z+34, r24	; 0x22
     c26:	82 e3       	ldi	r24, 0x32	; 50
     c28:	94 e0       	ldi	r25, 0x04	; 4
     c2a:	95 a3       	std	Z+37, r25	; 0x25
     c2c:	84 a3       	std	Z+36, r24	; 0x24
     c2e:	88 ef       	ldi	r24, 0xF8	; 248
     c30:	93 e0       	ldi	r25, 0x03	; 3
     c32:	97 a3       	std	Z+39, r25	; 0x27
     c34:	86 a3       	std	Z+38, r24	; 0x26
     c36:	8d ec       	ldi	r24, 0xCD	; 205
     c38:	92 e0       	ldi	r25, 0x02	; 2
     c3a:	91 a7       	std	Z+41, r25	; 0x29
     c3c:	80 a7       	std	Z+40, r24	; 0x28
     c3e:	82 ed       	ldi	r24, 0xD2	; 210
     c40:	92 e0       	ldi	r25, 0x02	; 2
     c42:	93 a7       	std	Z+43, r25	; 0x2b
     c44:	82 a7       	std	Z+42, r24	; 0x2a
     c46:	81 ee       	ldi	r24, 0xE1	; 225
     c48:	92 e0       	ldi	r25, 0x02	; 2
     c4a:	95 a7       	std	Z+45, r25	; 0x2d
     c4c:	84 a7       	std	Z+44, r24	; 0x2c
     c4e:	85 e0       	ldi	r24, 0x05	; 5
     c50:	93 e0       	ldi	r25, 0x03	; 3
     c52:	97 a7       	std	Z+47, r25	; 0x2f
     c54:	86 a7       	std	Z+46, r24	; 0x2e
     c56:	87 e0       	ldi	r24, 0x07	; 7
     c58:	93 e0       	ldi	r25, 0x03	; 3
     c5a:	91 ab       	std	Z+49, r25	; 0x31
     c5c:	80 ab       	std	Z+48, r24	; 0x30
     c5e:	81 e1       	ldi	r24, 0x11	; 17
     c60:	93 e0       	ldi	r25, 0x03	; 3
     c62:	93 ab       	std	Z+51, r25	; 0x33
     c64:	82 ab       	std	Z+50, r24	; 0x32
     c66:	8e e1       	ldi	r24, 0x1E	; 30
     c68:	93 e0       	ldi	r25, 0x03	; 3
     c6a:	95 ab       	std	Z+53, r25	; 0x35
     c6c:	84 ab       	std	Z+52, r24	; 0x34
     c6e:	8a e2       	ldi	r24, 0x2A	; 42
     c70:	93 e0       	ldi	r25, 0x03	; 3
     c72:	97 ab       	std	Z+55, r25	; 0x37
     c74:	86 ab       	std	Z+54, r24	; 0x36
     c76:	82 e4       	ldi	r24, 0x42	; 66
     c78:	93 e0       	ldi	r25, 0x03	; 3
     c7a:	91 af       	std	Z+57, r25	; 0x39
     c7c:	80 af       	std	Z+56, r24	; 0x38
     c7e:	85 e5       	ldi	r24, 0x55	; 85
     c80:	93 e0       	ldi	r25, 0x03	; 3
     c82:	93 af       	std	Z+59, r25	; 0x3b
     c84:	82 af       	std	Z+58, r24	; 0x3a
     c86:	80 e6       	ldi	r24, 0x60	; 96
     c88:	93 e0       	ldi	r25, 0x03	; 3
     c8a:	95 af       	std	Z+61, r25	; 0x3d
     c8c:	84 af       	std	Z+60, r24	; 0x3c
     c8e:	8d e8       	ldi	r24, 0x8D	; 141
     c90:	93 e0       	ldi	r25, 0x03	; 3
     c92:	97 af       	std	Z+63, r25	; 0x3f
     c94:	86 af       	std	Z+62, r24	; 0x3e
     c96:	df 01       	movw	r26, r30
     c98:	a0 5c       	subi	r26, 0xC0	; 192
     c9a:	bf 4f       	sbci	r27, 0xFF	; 255
     c9c:	87 e0       	ldi	r24, 0x07	; 7
     c9e:	95 e0       	ldi	r25, 0x05	; 5
     ca0:	11 96       	adiw	r26, 0x01	; 1
     ca2:	9c 93       	st	X, r25
     ca4:	8e 93       	st	-X, r24
     ca6:	12 96       	adiw	r26, 0x02	; 2
     ca8:	82 e1       	ldi	r24, 0x12	; 18
     caa:	95 e0       	ldi	r25, 0x05	; 5
     cac:	11 96       	adiw	r26, 0x01	; 1
     cae:	9c 93       	st	X, r25
     cb0:	8e 93       	st	-X, r24
     cb2:	12 96       	adiw	r26, 0x02	; 2
     cb4:	83 e3       	ldi	r24, 0x33	; 51
     cb6:	95 e0       	ldi	r25, 0x05	; 5
     cb8:	11 96       	adiw	r26, 0x01	; 1
     cba:	9c 93       	st	X, r25
     cbc:	8e 93       	st	-X, r24
     cbe:	12 96       	adiw	r26, 0x02	; 2
     cc0:	84 e8       	ldi	r24, 0x84	; 132
     cc2:	95 e0       	ldi	r25, 0x05	; 5
     cc4:	11 96       	adiw	r26, 0x01	; 1
     cc6:	9c 93       	st	X, r25
     cc8:	8e 93       	st	-X, r24
     cca:	12 96       	adiw	r26, 0x02	; 2
     ccc:	8c e8       	ldi	r24, 0x8C	; 140
     cce:	95 e0       	ldi	r25, 0x05	; 5
     cd0:	8d 93       	st	X+, r24
     cd2:	9c 93       	st	X, r25
}
     cd4:	cf 01       	movw	r24, r30
     cd6:	08 95       	ret

00000cd8 <LCD0_write>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cd8:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <lcd0_PORT>
     cdc:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <lcd0_PORT+0x1>
     ce0:	90 81       	ld	r25, Z
     ce2:	9d 7f       	andi	r25, 0xFD	; 253
     ce4:	90 83       	st	Z, r25
     ce6:	67 2b       	or	r22, r23
     ce8:	41 f0       	breq	.+16     	; 0xcfa <LCD0_write+0x22>
     cea:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <lcd0_PORT>
     cee:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <lcd0_PORT+0x1>
     cf2:	90 81       	ld	r25, Z
     cf4:	91 60       	ori	r25, 0x01	; 1
     cf6:	90 83       	st	Z, r25
     cf8:	07 c0       	rjmp	.+14     	; 0xd08 <LCD0_write+0x30>
     cfa:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <lcd0_PORT>
     cfe:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <lcd0_PORT+0x1>
     d02:	90 81       	ld	r25, Z
     d04:	9e 7f       	andi	r25, 0xFE	; 254
     d06:	90 83       	st	Z, r25
     d08:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <lcd0_DDR>
     d0c:	f0 91 ae 01 	lds	r31, 0x01AE	; 0x8001ae <lcd0_DDR+0x1>
     d10:	90 81       	ld	r25, Z
     d12:	90 6f       	ori	r25, 0xF0	; 240
     d14:	90 83       	st	Z, r25
     d16:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <lcd0_PORT>
     d1a:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <lcd0_PORT+0x1>
     d1e:	90 81       	ld	r25, Z
     d20:	94 60       	ori	r25, 0x04	; 4
     d22:	90 83       	st	Z, r25
     d24:	88 23       	and	r24, r24
     d26:	44 f4       	brge	.+16     	; 0xd38 <LCD0_write+0x60>
     d28:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <lcd0_PORT>
     d2c:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <lcd0_PORT+0x1>
     d30:	90 81       	ld	r25, Z
     d32:	90 68       	ori	r25, 0x80	; 128
     d34:	90 83       	st	Z, r25
     d36:	07 c0       	rjmp	.+14     	; 0xd46 <LCD0_write+0x6e>
     d38:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <lcd0_PORT>
     d3c:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <lcd0_PORT+0x1>
     d40:	90 81       	ld	r25, Z
     d42:	9f 77       	andi	r25, 0x7F	; 127
     d44:	90 83       	st	Z, r25
     d46:	86 ff       	sbrs	r24, 6
     d48:	08 c0       	rjmp	.+16     	; 0xd5a <LCD0_write+0x82>
     d4a:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <lcd0_PORT>
     d4e:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <lcd0_PORT+0x1>
     d52:	90 81       	ld	r25, Z
     d54:	90 64       	ori	r25, 0x40	; 64
     d56:	90 83       	st	Z, r25
     d58:	07 c0       	rjmp	.+14     	; 0xd68 <LCD0_write+0x90>
     d5a:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <lcd0_PORT>
     d5e:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <lcd0_PORT+0x1>
     d62:	90 81       	ld	r25, Z
     d64:	9f 7b       	andi	r25, 0xBF	; 191
     d66:	90 83       	st	Z, r25
     d68:	85 ff       	sbrs	r24, 5
     d6a:	08 c0       	rjmp	.+16     	; 0xd7c <LCD0_write+0xa4>
     d6c:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <lcd0_PORT>
     d70:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <lcd0_PORT+0x1>
     d74:	90 81       	ld	r25, Z
     d76:	90 62       	ori	r25, 0x20	; 32
     d78:	90 83       	st	Z, r25
     d7a:	07 c0       	rjmp	.+14     	; 0xd8a <LCD0_write+0xb2>
     d7c:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <lcd0_PORT>
     d80:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <lcd0_PORT+0x1>
     d84:	90 81       	ld	r25, Z
     d86:	9f 7d       	andi	r25, 0xDF	; 223
     d88:	90 83       	st	Z, r25
     d8a:	84 ff       	sbrs	r24, 4
     d8c:	08 c0       	rjmp	.+16     	; 0xd9e <LCD0_write+0xc6>
     d8e:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <lcd0_PORT>
     d92:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <lcd0_PORT+0x1>
     d96:	90 81       	ld	r25, Z
     d98:	90 61       	ori	r25, 0x10	; 16
     d9a:	90 83       	st	Z, r25
     d9c:	07 c0       	rjmp	.+14     	; 0xdac <LCD0_write+0xd4>
     d9e:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <lcd0_PORT>
     da2:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <lcd0_PORT+0x1>
     da6:	90 81       	ld	r25, Z
     da8:	9f 7e       	andi	r25, 0xEF	; 239
     daa:	90 83       	st	Z, r25
     dac:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <lcd0_PORT>
     db0:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <lcd0_PORT+0x1>
     db4:	90 81       	ld	r25, Z
     db6:	9b 7f       	andi	r25, 0xFB	; 251
     db8:	90 83       	st	Z, r25
     dba:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <lcd0_PORT>
     dbe:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <lcd0_PORT+0x1>
     dc2:	90 81       	ld	r25, Z
     dc4:	94 60       	ori	r25, 0x04	; 4
     dc6:	90 83       	st	Z, r25
     dc8:	83 ff       	sbrs	r24, 3
     dca:	08 c0       	rjmp	.+16     	; 0xddc <LCD0_write+0x104>
     dcc:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <lcd0_PORT>
     dd0:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <lcd0_PORT+0x1>
     dd4:	90 81       	ld	r25, Z
     dd6:	90 68       	ori	r25, 0x80	; 128
     dd8:	90 83       	st	Z, r25
     dda:	07 c0       	rjmp	.+14     	; 0xdea <LCD0_write+0x112>
     ddc:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <lcd0_PORT>
     de0:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <lcd0_PORT+0x1>
     de4:	90 81       	ld	r25, Z
     de6:	9f 77       	andi	r25, 0x7F	; 127
     de8:	90 83       	st	Z, r25
     dea:	82 ff       	sbrs	r24, 2
     dec:	08 c0       	rjmp	.+16     	; 0xdfe <LCD0_write+0x126>
     dee:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <lcd0_PORT>
     df2:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <lcd0_PORT+0x1>
     df6:	90 81       	ld	r25, Z
     df8:	90 64       	ori	r25, 0x40	; 64
     dfa:	90 83       	st	Z, r25
     dfc:	07 c0       	rjmp	.+14     	; 0xe0c <LCD0_write+0x134>
     dfe:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <lcd0_PORT>
     e02:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <lcd0_PORT+0x1>
     e06:	90 81       	ld	r25, Z
     e08:	9f 7b       	andi	r25, 0xBF	; 191
     e0a:	90 83       	st	Z, r25
     e0c:	81 ff       	sbrs	r24, 1
     e0e:	08 c0       	rjmp	.+16     	; 0xe20 <LCD0_write+0x148>
     e10:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <lcd0_PORT>
     e14:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <lcd0_PORT+0x1>
     e18:	90 81       	ld	r25, Z
     e1a:	90 62       	ori	r25, 0x20	; 32
     e1c:	90 83       	st	Z, r25
     e1e:	07 c0       	rjmp	.+14     	; 0xe2e <LCD0_write+0x156>
     e20:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <lcd0_PORT>
     e24:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <lcd0_PORT+0x1>
     e28:	90 81       	ld	r25, Z
     e2a:	9f 7d       	andi	r25, 0xDF	; 223
     e2c:	90 83       	st	Z, r25
     e2e:	80 ff       	sbrs	r24, 0
     e30:	08 c0       	rjmp	.+16     	; 0xe42 <LCD0_write+0x16a>
     e32:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <lcd0_PORT>
     e36:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <lcd0_PORT+0x1>
     e3a:	80 81       	ld	r24, Z
     e3c:	80 61       	ori	r24, 0x10	; 16
     e3e:	80 83       	st	Z, r24
     e40:	07 c0       	rjmp	.+14     	; 0xe50 <LCD0_write+0x178>
     e42:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <lcd0_PORT>
     e46:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <lcd0_PORT+0x1>
     e4a:	80 81       	ld	r24, Z
     e4c:	8f 7e       	andi	r24, 0xEF	; 239
     e4e:	80 83       	st	Z, r24
     e50:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <lcd0_PORT>
     e54:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <lcd0_PORT+0x1>
     e58:	80 81       	ld	r24, Z
     e5a:	8b 7f       	andi	r24, 0xFB	; 251
     e5c:	80 83       	st	Z, r24
     e5e:	08 95       	ret

00000e60 <LCD0_read>:
     e60:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <lcd0_DDR>
     e64:	f0 91 ae 01 	lds	r31, 0x01AE	; 0x8001ae <lcd0_DDR+0x1>
     e68:	20 81       	ld	r18, Z
     e6a:	2f 70       	andi	r18, 0x0F	; 15
     e6c:	20 83       	st	Z, r18
     e6e:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <lcd0_PORT>
     e72:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <lcd0_PORT+0x1>
     e76:	20 81       	ld	r18, Z
     e78:	20 6f       	ori	r18, 0xF0	; 240
     e7a:	20 83       	st	Z, r18
     e7c:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <lcd0_PORT>
     e80:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <lcd0_PORT+0x1>
     e84:	20 81       	ld	r18, Z
     e86:	22 60       	ori	r18, 0x02	; 2
     e88:	20 83       	st	Z, r18
     e8a:	89 2b       	or	r24, r25
     e8c:	41 f0       	breq	.+16     	; 0xe9e <LCD0_read+0x3e>
     e8e:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <lcd0_PORT>
     e92:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <lcd0_PORT+0x1>
     e96:	80 81       	ld	r24, Z
     e98:	81 60       	ori	r24, 0x01	; 1
     e9a:	80 83       	st	Z, r24
     e9c:	07 c0       	rjmp	.+14     	; 0xeac <LCD0_read+0x4c>
     e9e:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <lcd0_PORT>
     ea2:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <lcd0_PORT+0x1>
     ea6:	80 81       	ld	r24, Z
     ea8:	8e 7f       	andi	r24, 0xFE	; 254
     eaa:	80 83       	st	Z, r24
     eac:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <lcd0_PORT>
     eb0:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <lcd0_PORT+0x1>
     eb4:	80 81       	ld	r24, Z
     eb6:	84 60       	ori	r24, 0x04	; 4
     eb8:	80 83       	st	Z, r24
     eba:	e0 91 a6 01 	lds	r30, 0x01A6	; 0x8001a6 <lcd0_PIN>
     ebe:	f0 91 a7 01 	lds	r31, 0x01A7	; 0x8001a7 <lcd0_PIN+0x1>
     ec2:	80 81       	ld	r24, Z
     ec4:	88 23       	and	r24, r24
     ec6:	14 f0       	brlt	.+4      	; 0xecc <LCD0_read+0x6c>
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	01 c0       	rjmp	.+2      	; 0xece <LCD0_read+0x6e>
     ecc:	80 e8       	ldi	r24, 0x80	; 128
     ece:	90 81       	ld	r25, Z
     ed0:	96 ff       	sbrs	r25, 6
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <LCD0_read+0x78>
     ed4:	80 64       	ori	r24, 0x40	; 64
     ed6:	01 c0       	rjmp	.+2      	; 0xeda <LCD0_read+0x7a>
     ed8:	8f 7b       	andi	r24, 0xBF	; 191
     eda:	90 81       	ld	r25, Z
     edc:	95 ff       	sbrs	r25, 5
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <LCD0_read+0x84>
     ee0:	80 62       	ori	r24, 0x20	; 32
     ee2:	01 c0       	rjmp	.+2      	; 0xee6 <LCD0_read+0x86>
     ee4:	8f 7d       	andi	r24, 0xDF	; 223
     ee6:	90 81       	ld	r25, Z
     ee8:	94 ff       	sbrs	r25, 4
     eea:	02 c0       	rjmp	.+4      	; 0xef0 <LCD0_read+0x90>
     eec:	80 61       	ori	r24, 0x10	; 16
     eee:	01 c0       	rjmp	.+2      	; 0xef2 <LCD0_read+0x92>
     ef0:	8f 7e       	andi	r24, 0xEF	; 239
     ef2:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <lcd0_PORT>
     ef6:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <lcd0_PORT+0x1>
     efa:	90 81       	ld	r25, Z
     efc:	9b 7f       	andi	r25, 0xFB	; 251
     efe:	90 83       	st	Z, r25
     f00:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <lcd0_PORT>
     f04:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <lcd0_PORT+0x1>
     f08:	90 81       	ld	r25, Z
     f0a:	94 60       	ori	r25, 0x04	; 4
     f0c:	90 83       	st	Z, r25
     f0e:	e0 91 a6 01 	lds	r30, 0x01A6	; 0x8001a6 <lcd0_PIN>
     f12:	f0 91 a7 01 	lds	r31, 0x01A7	; 0x8001a7 <lcd0_PIN+0x1>
     f16:	90 81       	ld	r25, Z
     f18:	99 23       	and	r25, r25
     f1a:	14 f4       	brge	.+4      	; 0xf20 <LCD0_read+0xc0>
     f1c:	88 60       	ori	r24, 0x08	; 8
     f1e:	01 c0       	rjmp	.+2      	; 0xf22 <LCD0_read+0xc2>
     f20:	87 7f       	andi	r24, 0xF7	; 247
     f22:	90 81       	ld	r25, Z
     f24:	96 ff       	sbrs	r25, 6
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <LCD0_read+0xcc>
     f28:	84 60       	ori	r24, 0x04	; 4
     f2a:	01 c0       	rjmp	.+2      	; 0xf2e <LCD0_read+0xce>
     f2c:	8b 7f       	andi	r24, 0xFB	; 251
     f2e:	90 81       	ld	r25, Z
     f30:	95 ff       	sbrs	r25, 5
     f32:	02 c0       	rjmp	.+4      	; 0xf38 <LCD0_read+0xd8>
     f34:	82 60       	ori	r24, 0x02	; 2
     f36:	01 c0       	rjmp	.+2      	; 0xf3a <LCD0_read+0xda>
     f38:	8d 7f       	andi	r24, 0xFD	; 253
     f3a:	90 81       	ld	r25, Z
     f3c:	94 ff       	sbrs	r25, 4
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <LCD0_read+0xe4>
     f40:	81 60       	ori	r24, 0x01	; 1
     f42:	01 c0       	rjmp	.+2      	; 0xf46 <LCD0_read+0xe6>
     f44:	8e 7f       	andi	r24, 0xFE	; 254
     f46:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <lcd0_PORT>
     f4a:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <lcd0_PORT+0x1>
     f4e:	90 81       	ld	r25, Z
     f50:	9b 7f       	andi	r25, 0xFB	; 251
     f52:	90 83       	st	Z, r25
     f54:	08 95       	ret

00000f56 <LCD0_BF>:
     f56:	cf 93       	push	r28
     f58:	df 93       	push	r29
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	0e 94 30 07 	call	0xe60	; 0xe60 <LCD0_read>
     f62:	cb e0       	ldi	r28, 0x0B	; 11
     f64:	d0 e0       	ldi	r29, 0x00	; 0
     f66:	06 c0       	rjmp	.+12     	; 0xf74 <LCD0_BF+0x1e>
     f68:	80 e0       	ldi	r24, 0x00	; 0
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	0e 94 30 07 	call	0xe60	; 0xe60 <LCD0_read>
     f70:	21 97       	sbiw	r28, 0x01	; 1
     f72:	11 f0       	breq	.+4      	; 0xf78 <LCD0_BF+0x22>
     f74:	88 23       	and	r24, r24
     f76:	c4 f3       	brlt	.-16     	; 0xf68 <LCD0_BF+0x12>
     f78:	df 91       	pop	r29
     f7a:	cf 91       	pop	r28
     f7c:	08 95       	ret

00000f7e <LCD0_putch>:
     f7e:	61 e0       	ldi	r22, 0x01	; 1
     f80:	70 e0       	ldi	r23, 0x00	; 0
     f82:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <LCD0_write>
     f86:	0e 94 ab 07 	call	0xf56	; 0xf56 <LCD0_BF>
     f8a:	08 95       	ret

00000f8c <LCD0_getch>:
     f8c:	cf 93       	push	r28
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	0e 94 30 07 	call	0xe60	; 0xe60 <LCD0_read>
     f96:	c8 2f       	mov	r28, r24
     f98:	0e 94 ab 07 	call	0xf56	; 0xf56 <LCD0_BF>
     f9c:	8c 2f       	mov	r24, r28
     f9e:	cf 91       	pop	r28
     fa0:	08 95       	ret

00000fa2 <LCD0_string>:
     fa2:	cf 93       	push	r28
     fa4:	df 93       	push	r29
     fa6:	ec 01       	movw	r28, r24
     fa8:	88 81       	ld	r24, Y
     faa:	88 23       	and	r24, r24
     fac:	51 f0       	breq	.+20     	; 0xfc2 <LCD0_string+0x20>
     fae:	21 96       	adiw	r28, 0x01	; 1
     fb0:	61 e0       	ldi	r22, 0x01	; 1
     fb2:	70 e0       	ldi	r23, 0x00	; 0
     fb4:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <LCD0_write>
     fb8:	0e 94 ab 07 	call	0xf56	; 0xf56 <LCD0_BF>
     fbc:	89 91       	ld	r24, Y+
     fbe:	81 11       	cpse	r24, r1
     fc0:	f7 cf       	rjmp	.-18     	; 0xfb0 <LCD0_string+0xe>
     fc2:	df 91       	pop	r29
     fc4:	cf 91       	pop	r28
     fc6:	08 95       	ret

00000fc8 <LCD0_string_size>:
     fc8:	0f 93       	push	r16
     fca:	1f 93       	push	r17
     fcc:	cf 93       	push	r28
     fce:	df 93       	push	r29
     fd0:	fc 01       	movw	r30, r24
     fd2:	d6 2f       	mov	r29, r22
     fd4:	80 81       	ld	r24, Z
     fd6:	88 23       	and	r24, r24
     fd8:	51 f0       	breq	.+20     	; 0xfee <LCD0_string_size+0x26>
     fda:	8f 01       	movw	r16, r30
     fdc:	0f 5f       	subi	r16, 0xFF	; 255
     fde:	1f 4f       	sbci	r17, 0xFF	; 255
     fe0:	61 11       	cpse	r22, r1
     fe2:	09 c0       	rjmp	.+18     	; 0xff6 <LCD0_string_size+0x2e>
     fe4:	1f c0       	rjmp	.+62     	; 0x1024 <LCD0_string_size+0x5c>
     fe6:	cf 5f       	subi	r28, 0xFF	; 255
     fe8:	dc 17       	cp	r29, r28
     fea:	30 f4       	brcc	.+12     	; 0xff8 <LCD0_string_size+0x30>
     fec:	01 c0       	rjmp	.+2      	; 0xff0 <LCD0_string_size+0x28>
     fee:	c0 e0       	ldi	r28, 0x00	; 0
     ff0:	cd 17       	cp	r28, r29
     ff2:	70 f0       	brcs	.+28     	; 0x1010 <LCD0_string_size+0x48>
     ff4:	17 c0       	rjmp	.+46     	; 0x1024 <LCD0_string_size+0x5c>
     ff6:	c1 e0       	ldi	r28, 0x01	; 1
     ff8:	61 e0       	ldi	r22, 0x01	; 1
     ffa:	70 e0       	ldi	r23, 0x00	; 0
     ffc:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <LCD0_write>
    1000:	0e 94 ab 07 	call	0xf56	; 0xf56 <LCD0_BF>
    1004:	f8 01       	movw	r30, r16
    1006:	81 91       	ld	r24, Z+
    1008:	8f 01       	movw	r16, r30
    100a:	81 11       	cpse	r24, r1
    100c:	ec cf       	rjmp	.-40     	; 0xfe6 <LCD0_string_size+0x1e>
    100e:	f0 cf       	rjmp	.-32     	; 0xff0 <LCD0_string_size+0x28>
    1010:	cf 5f       	subi	r28, 0xFF	; 255
    1012:	61 e0       	ldi	r22, 0x01	; 1
    1014:	70 e0       	ldi	r23, 0x00	; 0
    1016:	80 e2       	ldi	r24, 0x20	; 32
    1018:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <LCD0_write>
    101c:	0e 94 ab 07 	call	0xf56	; 0xf56 <LCD0_BF>
    1020:	cd 17       	cp	r28, r29
    1022:	b0 f3       	brcs	.-20     	; 0x1010 <LCD0_string_size+0x48>
    1024:	df 91       	pop	r29
    1026:	cf 91       	pop	r28
    1028:	1f 91       	pop	r17
    102a:	0f 91       	pop	r16
    102c:	08 95       	ret

0000102e <LCD0_hspace>:
    102e:	cf 93       	push	r28
    1030:	c8 2f       	mov	r28, r24
    1032:	88 23       	and	r24, r24
    1034:	49 f0       	breq	.+18     	; 0x1048 <LCD0_hspace+0x1a>
    1036:	61 e0       	ldi	r22, 0x01	; 1
    1038:	70 e0       	ldi	r23, 0x00	; 0
    103a:	80 e2       	ldi	r24, 0x20	; 32
    103c:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <LCD0_write>
    1040:	0e 94 ab 07 	call	0xf56	; 0xf56 <LCD0_BF>
    1044:	c1 50       	subi	r28, 0x01	; 1
    1046:	b9 f7       	brne	.-18     	; 0x1036 <LCD0_hspace+0x8>
    1048:	cf 91       	pop	r28
    104a:	08 95       	ret

0000104c <LCD0_gotoxy>:
    104c:	26 2f       	mov	r18, r22
    104e:	81 30       	cpi	r24, 0x01	; 1
    1050:	91 05       	cpc	r25, r1
    1052:	81 f0       	breq	.+32     	; 0x1074 <LCD0_gotoxy+0x28>
    1054:	30 f0       	brcs	.+12     	; 0x1062 <LCD0_gotoxy+0x16>
    1056:	82 30       	cpi	r24, 0x02	; 2
    1058:	91 05       	cpc	r25, r1
    105a:	a9 f0       	breq	.+42     	; 0x1086 <LCD0_gotoxy+0x3a>
    105c:	03 97       	sbiw	r24, 0x03	; 3
    105e:	e1 f0       	breq	.+56     	; 0x1098 <LCD0_gotoxy+0x4c>
    1060:	08 95       	ret
    1062:	60 e0       	ldi	r22, 0x00	; 0
    1064:	70 e0       	ldi	r23, 0x00	; 0
    1066:	80 e8       	ldi	r24, 0x80	; 128
    1068:	82 0f       	add	r24, r18
    106a:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <LCD0_write>
    106e:	0e 94 ab 07 	call	0xf56	; 0xf56 <LCD0_BF>
    1072:	08 95       	ret
    1074:	60 e0       	ldi	r22, 0x00	; 0
    1076:	70 e0       	ldi	r23, 0x00	; 0
    1078:	80 ec       	ldi	r24, 0xC0	; 192
    107a:	82 0f       	add	r24, r18
    107c:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <LCD0_write>
    1080:	0e 94 ab 07 	call	0xf56	; 0xf56 <LCD0_BF>
    1084:	08 95       	ret
    1086:	60 e0       	ldi	r22, 0x00	; 0
    1088:	70 e0       	ldi	r23, 0x00	; 0
    108a:	84 e9       	ldi	r24, 0x94	; 148
    108c:	82 0f       	add	r24, r18
    108e:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <LCD0_write>
    1092:	0e 94 ab 07 	call	0xf56	; 0xf56 <LCD0_BF>
    1096:	08 95       	ret
    1098:	60 e0       	ldi	r22, 0x00	; 0
    109a:	70 e0       	ldi	r23, 0x00	; 0
    109c:	84 ed       	ldi	r24, 0xD4	; 212
    109e:	82 0f       	add	r24, r18
    10a0:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <LCD0_write>
    10a4:	0e 94 ab 07 	call	0xf56	; 0xf56 <LCD0_BF>
    10a8:	08 95       	ret

000010aa <LCD0_clear>:
    10aa:	60 e0       	ldi	r22, 0x00	; 0
    10ac:	70 e0       	ldi	r23, 0x00	; 0
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <LCD0_write>
    10b4:	87 ee       	ldi	r24, 0xE7	; 231
    10b6:	97 e1       	ldi	r25, 0x17	; 23
    10b8:	01 97       	sbiw	r24, 0x01	; 1
    10ba:	f1 f7       	brne	.-4      	; 0x10b8 <LCD0_clear+0xe>
    10bc:	00 c0       	rjmp	.+0      	; 0x10be <LCD0_clear+0x14>
    10be:	00 00       	nop
    10c0:	08 95       	ret

000010c2 <LCD0_inic>:
	return lcd0;
}
void LCD0_inic(void)
{
	//LCD INIC
	*lcd0_DDR=(1<<RS)|(1<<RW)|(1<<EN)|(0<<NC);
    10c2:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <lcd0_DDR>
    10c6:	f0 91 ae 01 	lds	r31, 0x01AE	; 0x8001ae <lcd0_DDR+0x1>
    10ca:	87 e0       	ldi	r24, 0x07	; 7
    10cc:	80 83       	st	Z, r24
	*lcd0_PORT=(1<<NC);
    10ce:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <lcd0_PORT>
    10d2:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <lcd0_PORT+0x1>
    10d6:	88 e0       	ldi	r24, 0x08	; 8
    10d8:	80 83       	st	Z, r24
    10da:	2f ef       	ldi	r18, 0xFF	; 255
    10dc:	83 ef       	ldi	r24, 0xF3	; 243
    10de:	91 e0       	ldi	r25, 0x01	; 1
    10e0:	21 50       	subi	r18, 0x01	; 1
    10e2:	80 40       	sbci	r24, 0x00	; 0
    10e4:	90 40       	sbci	r25, 0x00	; 0
    10e6:	e1 f7       	brne	.-8      	; 0x10e0 <LCD0_inic+0x1e>
    10e8:	00 c0       	rjmp	.+0      	; 0x10ea <LCD0_inic+0x28>
    10ea:	00 00       	nop
	/***INICIALIZACAO LCD**datasheet*/
	_delay_ms(40);
	LCD0_write(0x33,INST); //function set
    10ec:	60 e0       	ldi	r22, 0x00	; 0
    10ee:	70 e0       	ldi	r23, 0x00	; 0
    10f0:	83 e3       	ldi	r24, 0x33	; 51
    10f2:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10f6:	20 ed       	ldi	r18, 0xD0	; 208
    10f8:	2a 95       	dec	r18
    10fa:	f1 f7       	brne	.-4      	; 0x10f8 <LCD0_inic+0x36>
	_delay_us(39);
	LCD0_write(0x33,INST); //function set
    10fc:	60 e0       	ldi	r22, 0x00	; 0
    10fe:	70 e0       	ldi	r23, 0x00	; 0
    1100:	83 e3       	ldi	r24, 0x33	; 51
    1102:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <LCD0_write>
    1106:	80 ed       	ldi	r24, 0xD0	; 208
    1108:	8a 95       	dec	r24
    110a:	f1 f7       	brne	.-4      	; 0x1108 <LCD0_inic+0x46>
	_delay_us(39);
	LCD0_write(0x2B,INST); //function set
    110c:	60 e0       	ldi	r22, 0x00	; 0
    110e:	70 e0       	ldi	r23, 0x00	; 0
    1110:	8b e2       	ldi	r24, 0x2B	; 43
    1112:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <LCD0_write>
    1116:	95 ec       	ldi	r25, 0xC5	; 197
    1118:	9a 95       	dec	r25
    111a:	f1 f7       	brne	.-4      	; 0x1118 <LCD0_inic+0x56>
    111c:	00 00       	nop
	_delay_us(37);
	LCD0_write(0x0C,INST);// display on/off control
    111e:	60 e0       	ldi	r22, 0x00	; 0
    1120:	70 e0       	ldi	r23, 0x00	; 0
    1122:	8c e0       	ldi	r24, 0x0C	; 12
    1124:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <LCD0_write>
    1128:	25 ec       	ldi	r18, 0xC5	; 197
    112a:	2a 95       	dec	r18
    112c:	f1 f7       	brne	.-4      	; 0x112a <LCD0_inic+0x68>
    112e:	00 00       	nop
	_delay_us(37);
	LCD0_write(0x01,INST);// clear display
    1130:	60 e0       	ldi	r22, 0x00	; 0
    1132:	70 e0       	ldi	r23, 0x00	; 0
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    113a:	87 ee       	ldi	r24, 0xE7	; 231
    113c:	97 e1       	ldi	r25, 0x17	; 23
    113e:	01 97       	sbiw	r24, 0x01	; 1
    1140:	f1 f7       	brne	.-4      	; 0x113e <LCD0_inic+0x7c>
    1142:	00 c0       	rjmp	.+0      	; 0x1144 <LCD0_inic+0x82>
    1144:	00 00       	nop
	_delay_ms(1.53);
	LCD0_write(0x06,INST);// entry mode set (crazy settings)
    1146:	60 e0       	ldi	r22, 0x00	; 0
    1148:	70 e0       	ldi	r23, 0x00	; 0
    114a:	86 e0       	ldi	r24, 0x06	; 6
    114c:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1150:	95 ec       	ldi	r25, 0xC5	; 197
    1152:	9a 95       	dec	r25
    1154:	f1 f7       	brne	.-4      	; 0x1152 <LCD0_inic+0x90>
    1156:	00 00       	nop
    1158:	08 95       	ret

0000115a <LCD0enable>:
unsigned int LCD_ticks(unsigned int num);
/*
** procedure and function
*/
LCD0 LCD0enable(volatile uint8_t *ddr, volatile uint8_t *pin, volatile uint8_t *port)
{
    115a:	1f 93       	push	r17
    115c:	cf 93       	push	r28
    115e:	df 93       	push	r29
    1160:	ec 01       	movw	r28, r24
	//LOCAL VARIABLES
	uint8_t tSREG;
	tSREG=SREG;
    1162:	1f b7       	in	r17, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    1164:	8f b7       	in	r24, 0x3f	; 63
    1166:	8f 77       	andi	r24, 0x7F	; 127
    1168:	8f bf       	out	0x3f, r24	; 63
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	LCD0 lcd0;
	//import parametros
	lcd0_DDR=ddr;
    116a:	70 93 ae 01 	sts	0x01AE, r23	; 0x8001ae <lcd0_DDR+0x1>
    116e:	60 93 ad 01 	sts	0x01AD, r22	; 0x8001ad <lcd0_DDR>
	lcd0_PIN=pin;
    1172:	50 93 a7 01 	sts	0x01A7, r21	; 0x8001a7 <lcd0_PIN+0x1>
    1176:	40 93 a6 01 	sts	0x01A6, r20	; 0x8001a6 <lcd0_PIN>
	lcd0_PORT=port;
    117a:	30 93 b1 01 	sts	0x01B1, r19	; 0x8001b1 <lcd0_PORT+0x1>
    117e:	20 93 b0 01 	sts	0x01B0, r18	; 0x8001b0 <lcd0_PORT>
	//inic variables
	*lcd0_DDR=0x00;
    1182:	fb 01       	movw	r30, r22
    1184:	10 82       	st	Z, r1
	*lcd0_PORT=0xFF;
    1186:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <lcd0_PORT>
    118a:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <lcd0_PORT+0x1>
    118e:	8f ef       	ldi	r24, 0xFF	; 255
    1190:	80 83       	st	Z, r24
	lcd0_detect=*lcd0_PIN & (1<<NC);
    1192:	e0 91 a6 01 	lds	r30, 0x01A6	; 0x8001a6 <lcd0_PIN>
    1196:	f0 91 a7 01 	lds	r31, 0x01A7	; 0x8001a7 <lcd0_PIN+0x1>
    119a:	80 81       	ld	r24, Z
    119c:	88 70       	andi	r24, 0x08	; 8
    119e:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <lcd0_detect>
	lcd0.hspace=LCD0_hspace;
	lcd0.clear=LCD0_clear;
	lcd0.gotoxy=LCD0_gotoxy;
	lcd0.reboot=LCD0_reboot;
	//LCD INIC
	LCD0_inic();
    11a2:	0e 94 61 08 	call	0x10c2	; 0x10c2 <LCD0_inic>
	SREG=tSREG;
    11a6:	1f bf       	out	0x3f, r17	; 63
	//
	return lcd0;
    11a8:	8c e6       	ldi	r24, 0x6C	; 108
    11aa:	96 e0       	ldi	r25, 0x06	; 6
    11ac:	99 83       	std	Y+1, r25	; 0x01
    11ae:	88 83       	st	Y, r24
    11b0:	80 e3       	ldi	r24, 0x30	; 48
    11b2:	97 e0       	ldi	r25, 0x07	; 7
    11b4:	9b 83       	std	Y+3, r25	; 0x03
    11b6:	8a 83       	std	Y+2, r24	; 0x02
    11b8:	8b ea       	ldi	r24, 0xAB	; 171
    11ba:	97 e0       	ldi	r25, 0x07	; 7
    11bc:	9d 83       	std	Y+5, r25	; 0x05
    11be:	8c 83       	std	Y+4, r24	; 0x04
    11c0:	8f eb       	ldi	r24, 0xBF	; 191
    11c2:	97 e0       	ldi	r25, 0x07	; 7
    11c4:	9f 83       	std	Y+7, r25	; 0x07
    11c6:	8e 83       	std	Y+6, r24	; 0x06
    11c8:	86 ec       	ldi	r24, 0xC6	; 198
    11ca:	97 e0       	ldi	r25, 0x07	; 7
    11cc:	99 87       	std	Y+9, r25	; 0x09
    11ce:	88 87       	std	Y+8, r24	; 0x08
    11d0:	81 ed       	ldi	r24, 0xD1	; 209
    11d2:	97 e0       	ldi	r25, 0x07	; 7
    11d4:	9b 87       	std	Y+11, r25	; 0x0b
    11d6:	8a 87       	std	Y+10, r24	; 0x0a
    11d8:	84 ee       	ldi	r24, 0xE4	; 228
    11da:	97 e0       	ldi	r25, 0x07	; 7
    11dc:	9d 87       	std	Y+13, r25	; 0x0d
    11de:	8c 87       	std	Y+12, r24	; 0x0c
    11e0:	87 e1       	ldi	r24, 0x17	; 23
    11e2:	98 e0       	ldi	r25, 0x08	; 8
    11e4:	9f 87       	std	Y+15, r25	; 0x0f
    11e6:	8e 87       	std	Y+14, r24	; 0x0e
    11e8:	85 e5       	ldi	r24, 0x55	; 85
    11ea:	98 e0       	ldi	r25, 0x08	; 8
    11ec:	99 8b       	std	Y+17, r25	; 0x11
    11ee:	88 8b       	std	Y+16, r24	; 0x10
    11f0:	86 e2       	ldi	r24, 0x26	; 38
    11f2:	98 e0       	ldi	r25, 0x08	; 8
    11f4:	9b 8b       	std	Y+19, r25	; 0x13
    11f6:	8a 8b       	std	Y+18, r24	; 0x12
    11f8:	85 e0       	ldi	r24, 0x05	; 5
    11fa:	99 e0       	ldi	r25, 0x09	; 9
    11fc:	9d 8b       	std	Y+21, r25	; 0x15
    11fe:	8c 8b       	std	Y+20, r24	; 0x14
}
    1200:	ce 01       	movw	r24, r28
    1202:	df 91       	pop	r29
    1204:	cf 91       	pop	r28
    1206:	1f 91       	pop	r17
    1208:	08 95       	ret

0000120a <LCD0_reboot>:
	*lcd0_PORT|=(1<<EN);
	LCD_ticks(num);
	*lcd0_PORT&=~(1<<EN);
}
void LCD0_reboot(void)
{
    120a:	cf 93       	push	r28
	//low high detect pin NC
	uint8_t i;
	uint8_t tmp;
	tmp=*lcd0_PIN & (1<<NC);
    120c:	e0 91 a6 01 	lds	r30, 0x01A6	; 0x8001a6 <lcd0_PIN>
    1210:	f0 91 a7 01 	lds	r31, 0x01A7	; 0x8001a7 <lcd0_PIN+0x1>
    1214:	c0 81       	ld	r28, Z
    1216:	c8 70       	andi	r28, 0x08	; 8
	i=tmp^lcd0_detect;
    1218:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <lcd0_detect>
    121c:	8c 27       	eor	r24, r28
	i&=tmp;
	if(i)
    121e:	8c 23       	and	r24, r28
    1220:	11 f0       	breq	.+4      	; 0x1226 <LCD0_reboot+0x1c>
		LCD0_inic();
    1222:	0e 94 61 08 	call	0x10c2	; 0x10c2 <LCD0_inic>
	lcd0_detect=tmp;
    1226:	c0 93 af 01 	sts	0x01AF, r28	; 0x8001af <lcd0_detect>
}
    122a:	cf 91       	pop	r28
    122c:	08 95       	ret

0000122e <__vector_18>:
ISR(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
    122e:	1f 92       	push	r1
    1230:	0f 92       	push	r0
    1232:	0f b6       	in	r0, 0x3f	; 63
    1234:	0f 92       	push	r0
    1236:	11 24       	eor	r1, r1
    1238:	8f 93       	push	r24
    123a:	9f 93       	push	r25
    123c:	ef 93       	push	r30
    123e:	ff 93       	push	r31
    unsigned char tmphead;
	unsigned char data;
	unsigned char bit9;
    unsigned char usr;
    /* read UART status register and UART data register */
	usr  = UART0_STATUS;
    1240:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    bit9 = UART0_CONTROL;
    1244:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
#if defined( AT90_UART )
    UART_LastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    UART_LastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART0 )
    UART_LastRxError = (usr & (_BV(FE0)|_BV(DOR0)) );
    1248:	88 71       	andi	r24, 0x18	; 24
    124a:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <UART_LastRxError>
#elif defined ( ATMEGA_UART )
    UART_LastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
	/* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    124e:	e0 91 33 01 	lds	r30, 0x0133	; 0x800133 <UART_RxHead>
    1252:	ef 5f       	subi	r30, 0xFF	; 255
    1254:	ef 71       	andi	r30, 0x1F	; 31
    if ( tmphead == UART_RxTail ) {	
    1256:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <UART_RxTail>
    125a:	e8 13       	cpse	r30, r24
    125c:	04 c0       	rjmp	.+8      	; 0x1266 <__vector_18+0x38>
        /* error: receive buffer overflow */
        UART_LastRxError = UART_BUFFER_OVERFLOW >> 8; 
    125e:	82 e0       	ldi	r24, 0x02	; 2
    1260:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <UART_LastRxError>
    1264:	12 c0       	rjmp	.+36     	; 0x128a <__vector_18+0x5c>
	}else{
		data = UART0_DATA;
    1266:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
        /* store new index */
        UART_RxHead = tmphead;
    126a:	e0 93 33 01 	sts	0x0133, r30	; 0x800133 <UART_RxHead>
		if(UART_LastRxError){
    126e:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <UART_LastRxError>
    1272:	88 23       	and	r24, r24
    1274:	31 f0       	breq	.+12     	; 0x1282 <__vector_18+0x54>
			/* store indication data error in buffer */
			
			UART_RxBuf[tmphead] = 'X';
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	ea 5c       	subi	r30, 0xCA	; 202
    127a:	fe 4f       	sbci	r31, 0xFE	; 254
    127c:	88 e5       	ldi	r24, 0x58	; 88
    127e:	80 83       	st	Z, r24
    1280:	04 c0       	rjmp	.+8      	; 0x128a <__vector_18+0x5c>
		}else{
			/* store received data in buffer */
			UART_RxBuf[tmphead] = data;
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	ea 5c       	subi	r30, 0xCA	; 202
    1286:	fe 4f       	sbci	r31, 0xFE	; 254
    1288:	90 83       	st	Z, r25
		}
    }
}
    128a:	ff 91       	pop	r31
    128c:	ef 91       	pop	r30
    128e:	9f 91       	pop	r25
    1290:	8f 91       	pop	r24
    1292:	0f 90       	pop	r0
    1294:	0f be       	out	0x3f, r0	; 63
    1296:	0f 90       	pop	r0
    1298:	1f 90       	pop	r1
    129a:	18 95       	reti

0000129c <__vector_19>:
ISR(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
    129c:	1f 92       	push	r1
    129e:	0f 92       	push	r0
    12a0:	0f b6       	in	r0, 0x3f	; 63
    12a2:	0f 92       	push	r0
    12a4:	11 24       	eor	r1, r1
    12a6:	8f 93       	push	r24
    12a8:	9f 93       	push	r25
    12aa:	ef 93       	push	r30
    12ac:	ff 93       	push	r31
    unsigned char tmptail;
    if ( UART_TxHead == UART_TxTail) {
    12ae:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <UART_TxHead>
    12b2:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <UART_TxTail>
    12b6:	98 13       	cpse	r25, r24
    12b8:	06 c0       	rjmp	.+12     	; 0x12c6 <__vector_19+0x2a>
		/* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
    12ba:	e1 ec       	ldi	r30, 0xC1	; 193
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	8f 7d       	andi	r24, 0xDF	; 223
    12c2:	80 83       	st	Z, r24
    12c4:	0c c0       	rjmp	.+24     	; 0x12de <__vector_19+0x42>
    }else{
		/* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
    12c6:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <UART_TxTail>
    12ca:	ef 5f       	subi	r30, 0xFF	; 255
    12cc:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
    12ce:	e0 93 34 01 	sts	0x0134, r30	; 0x800134 <UART_TxTail>
		/* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	ea 5a       	subi	r30, 0xAA	; 170
    12d6:	fe 4f       	sbci	r31, 0xFE	; 254
    12d8:	80 81       	ld	r24, Z
    12da:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
    }
}
    12de:	ff 91       	pop	r31
    12e0:	ef 91       	pop	r30
    12e2:	9f 91       	pop	r25
    12e4:	8f 91       	pop	r24
    12e6:	0f 90       	pop	r0
    12e8:	0f be       	out	0x3f, r0	; 63
    12ea:	0f 90       	pop	r0
    12ec:	1f 90       	pop	r1
    12ee:	18 95       	reti

000012f0 <main>:
/***Global File Variables***/
/***Header***/
void PORTINIT(void);
/***MAIN***MAIN****/
int main(void)
{
    12f0:	cf 93       	push	r28
    12f2:	df 93       	push	r29
    12f4:	cd b7       	in	r28, 0x3d	; 61
    12f6:	de b7       	in	r29, 0x3e	; 62
    12f8:	c6 56       	subi	r28, 0x66	; 102
    12fa:	d1 09       	sbc	r29, r1
    12fc:	0f b6       	in	r0, 0x3f	; 63
    12fe:	f8 94       	cli
    1300:	de bf       	out	0x3e, r29	; 62
    1302:	0f be       	out	0x3f, r0	; 63
    1304:	cd bf       	out	0x3d, r28	; 61
	/***Preamble***/
	FUNC func = FUNCenable();
    1306:	ce 01       	movw	r24, r28
    1308:	01 96       	adiw	r24, 0x01	; 1
    130a:	0e 94 c5 05 	call	0xb8a	; 0xb8a <FUNCenable>
	LCD0 lcd = LCD0enable(&DDRD,&PIND,&PORTD);
    130e:	2b e2       	ldi	r18, 0x2B	; 43
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	49 e2       	ldi	r20, 0x29	; 41
    1314:	50 e0       	ldi	r21, 0x00	; 0
    1316:	6a e2       	ldi	r22, 0x2A	; 42
    1318:	70 e0       	ldi	r23, 0x00	; 0
    131a:	ce 01       	movw	r24, r28
    131c:	85 5b       	subi	r24, 0xB5	; 181
    131e:	9f 4f       	sbci	r25, 0xFF	; 255
    1320:	0e 94 ad 08 	call	0x115a	; 0x115a <LCD0enable>
    1324:	6f 96       	adiw	r28, 0x1f	; 31
    1326:	6e ac       	ldd	r6, Y+62	; 0x3e
    1328:	7f ac       	ldd	r7, Y+63	; 0x3f
    132a:	6f 97       	sbiw	r28, 0x1f	; 31
	HC595 shift = HC595enable(&DDRB,&PORTB,3,1,0); //REMEMBER!!!
    132c:	00 e0       	ldi	r16, 0x00	; 0
    132e:	21 e0       	ldi	r18, 0x01	; 1
    1330:	43 e0       	ldi	r20, 0x03	; 3
    1332:	65 e2       	ldi	r22, 0x25	; 37
    1334:	70 e0       	ldi	r23, 0x00	; 0
    1336:	84 e2       	ldi	r24, 0x24	; 36
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <HC595enable>
    133e:	a2 96       	adiw	r28, 0x22	; 34
    1340:	2f af       	std	Y+63, r18	; 0x3f
    1342:	a2 97       	sbiw	r28, 0x22	; 34
    1344:	a3 96       	adiw	r28, 0x23	; 35
    1346:	3f af       	std	Y+63, r19	; 0x3f
    1348:	a3 97       	sbiw	r28, 0x23	; 35
    134a:	a4 96       	adiw	r28, 0x24	; 36
    134c:	4f af       	std	Y+63, r20	; 0x3f
    134e:	a4 97       	sbiw	r28, 0x24	; 36
    1350:	a5 96       	adiw	r28, 0x25	; 37
    1352:	5f af       	std	Y+63, r21	; 0x3f
    1354:	a5 97       	sbiw	r28, 0x25	; 37
    1356:	a6 96       	adiw	r28, 0x26	; 38
    1358:	6f af       	std	Y+63, r22	; 0x3f
    135a:	a6 97       	sbiw	r28, 0x26	; 38
    135c:	a7 96       	adiw	r28, 0x27	; 39
    135e:	7f af       	std	Y+63, r23	; 0x3f
    1360:	a7 97       	sbiw	r28, 0x27	; 39
    1362:	a3 96       	adiw	r28, 0x23	; 35
    1364:	8e ac       	ldd	r8, Y+62	; 0x3e
    1366:	9f ac       	ldd	r9, Y+63	; 0x3f
    1368:	a3 97       	sbiw	r28, 0x23	; 35
    136a:	a5 96       	adiw	r28, 0x25	; 37
    136c:	ce ac       	ldd	r12, Y+62	; 0x3e
    136e:	df ac       	ldd	r13, Y+63	; 0x3f
    1370:	a5 97       	sbiw	r28, 0x25	; 37
    1372:	a7 96       	adiw	r28, 0x27	; 39
    1374:	ae ac       	ldd	r10, Y+62	; 0x3e
    1376:	bf ac       	ldd	r11, Y+63	; 0x3f
    1378:	a7 97       	sbiw	r28, 0x27	; 39
    /* Replace with your application code */
    while (TRUE)
    {
		lcd.gotoxy(0,0);
		lcd.string_size("Welcome",7);
		lcd.gotoxy(1,0);
    137a:	ee 24       	eor	r14, r14
    137c:	e3 94       	inc	r14
    137e:	f1 2c       	mov	r15, r1
	uint8_t i,j;
	i=j=0;
    /* Replace with your application code */
    while (TRUE)
    {
		lcd.gotoxy(0,0);
    1380:	60 e0       	ldi	r22, 0x00	; 0
    1382:	70 e0       	ldi	r23, 0x00	; 0
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	f3 01       	movw	r30, r6
    138a:	09 95       	icall
		lcd.string_size("Welcome",7);
    138c:	69 96       	adiw	r28, 0x19	; 25
    138e:	ee ad       	ldd	r30, Y+62	; 0x3e
    1390:	ff ad       	ldd	r31, Y+63	; 0x3f
    1392:	69 97       	sbiw	r28, 0x19	; 25
    1394:	67 e0       	ldi	r22, 0x07	; 7
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	91 e0       	ldi	r25, 0x01	; 1
    139a:	09 95       	icall
		lcd.gotoxy(1,0);
    139c:	60 e0       	ldi	r22, 0x00	; 0
    139e:	70 e0       	ldi	r23, 0x00	; 0
    13a0:	c7 01       	movw	r24, r14
    13a2:	f3 01       	movw	r30, r6
    13a4:	09 95       	icall
		c=a*b;
		lcd.string(func.i32toa(c));
    13a6:	67 96       	adiw	r28, 0x17	; 23
    13a8:	0e ad       	ldd	r16, Y+62	; 0x3e
    13aa:	1f ad       	ldd	r17, Y+63	; 0x3f
    13ac:	67 97       	sbiw	r28, 0x17	; 23
    13ae:	ed a1       	ldd	r30, Y+37	; 0x25
    13b0:	fe a1       	ldd	r31, Y+38	; 0x26
    13b2:	60 ef       	ldi	r22, 0xF0	; 240
    13b4:	7f ef       	ldi	r23, 0xFF	; 255
    13b6:	8f ef       	ldi	r24, 0xFF	; 255
    13b8:	9f e7       	ldi	r25, 0x7F	; 127
    13ba:	09 95       	icall
    13bc:	f8 01       	movw	r30, r16
    13be:	09 95       	icall
    13c0:	18 e0       	ldi	r17, 0x08	; 8
		/***Play around***/
		for(i=0;i<8;i++){
			shift.bit(1);
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	f4 01       	movw	r30, r8
    13c6:	09 95       	icall
			shift.out();
    13c8:	f5 01       	movw	r30, r10
    13ca:	09 95       	icall
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13cc:	ff ef       	ldi	r31, 0xFF	; 255
    13ce:	21 ee       	ldi	r18, 0xE1	; 225
    13d0:	84 e0       	ldi	r24, 0x04	; 4
    13d2:	f1 50       	subi	r31, 0x01	; 1
    13d4:	20 40       	sbci	r18, 0x00	; 0
    13d6:	80 40       	sbci	r24, 0x00	; 0
    13d8:	e1 f7       	brne	.-8      	; 0x13d2 <main+0xe2>
    13da:	00 c0       	rjmp	.+0      	; 0x13dc <main+0xec>
    13dc:	00 00       	nop
    13de:	11 50       	subi	r17, 0x01	; 1
		lcd.string_size("Welcome",7);
		lcd.gotoxy(1,0);
		c=a*b;
		lcd.string(func.i32toa(c));
		/***Play around***/
		for(i=0;i<8;i++){
    13e0:	81 f7       	brne	.-32     	; 0x13c2 <main+0xd2>
    13e2:	18 e0       	ldi	r17, 0x08	; 8
			shift.bit(1);
			shift.out();
			_delay_ms(100);
		}
		for(i=0;i<8;i++){
			shift.bit(0);
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	f4 01       	movw	r30, r8
    13e8:	09 95       	icall
			shift.out();
    13ea:	f5 01       	movw	r30, r10
    13ec:	09 95       	icall
    13ee:	ff ef       	ldi	r31, 0xFF	; 255
    13f0:	21 ee       	ldi	r18, 0xE1	; 225
    13f2:	84 e0       	ldi	r24, 0x04	; 4
    13f4:	f1 50       	subi	r31, 0x01	; 1
    13f6:	20 40       	sbci	r18, 0x00	; 0
    13f8:	80 40       	sbci	r24, 0x00	; 0
    13fa:	e1 f7       	brne	.-8      	; 0x13f4 <main+0x104>
    13fc:	00 c0       	rjmp	.+0      	; 0x13fe <main+0x10e>
    13fe:	00 00       	nop
    1400:	11 50       	subi	r17, 0x01	; 1
		for(i=0;i<8;i++){
			shift.bit(1);
			shift.out();
			_delay_ms(100);
		}
		for(i=0;i<8;i++){
    1402:	81 f7       	brne	.-32     	; 0x13e4 <main+0xf4>
    1404:	18 e0       	ldi	r17, 0x08	; 8
			shift.bit(0);
			shift.out();
			_delay_ms(100);
		}
		for(i=0;i<8;i++){
			shift.bit(1);
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	f4 01       	movw	r30, r8
    140a:	09 95       	icall
			shift.out();
    140c:	f5 01       	movw	r30, r10
    140e:	09 95       	icall
    1410:	ff ef       	ldi	r31, 0xFF	; 255
    1412:	21 ee       	ldi	r18, 0xE1	; 225
    1414:	84 e0       	ldi	r24, 0x04	; 4
    1416:	f1 50       	subi	r31, 0x01	; 1
    1418:	20 40       	sbci	r18, 0x00	; 0
    141a:	80 40       	sbci	r24, 0x00	; 0
    141c:	e1 f7       	brne	.-8      	; 0x1416 <main+0x126>
    141e:	00 c0       	rjmp	.+0      	; 0x1420 <main+0x130>
    1420:	00 00       	nop
			_delay_ms(100);
			shift.bit(0);
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	f4 01       	movw	r30, r8
    1426:	09 95       	icall
			shift.out();
    1428:	f5 01       	movw	r30, r10
    142a:	09 95       	icall
    142c:	ff ef       	ldi	r31, 0xFF	; 255
    142e:	21 ee       	ldi	r18, 0xE1	; 225
    1430:	84 e0       	ldi	r24, 0x04	; 4
    1432:	f1 50       	subi	r31, 0x01	; 1
    1434:	20 40       	sbci	r18, 0x00	; 0
    1436:	80 40       	sbci	r24, 0x00	; 0
    1438:	e1 f7       	brne	.-8      	; 0x1432 <main+0x142>
    143a:	00 c0       	rjmp	.+0      	; 0x143c <main+0x14c>
    143c:	00 00       	nop
    143e:	11 50       	subi	r17, 0x01	; 1
		for(i=0;i<8;i++){
			shift.bit(0);
			shift.out();
			_delay_ms(100);
		}
		for(i=0;i<8;i++){
    1440:	11 f7       	brne	.-60     	; 0x1406 <main+0x116>
    1442:	17 e0       	ldi	r17, 0x07	; 7
			shift.out();
			_delay_ms(100);
		}
		/***/
		for(i=7;i;i--){
			shift.bit(1);
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	f4 01       	movw	r30, r8
    1448:	09 95       	icall
			shift.out();
    144a:	f5 01       	movw	r30, r10
    144c:	09 95       	icall
    144e:	ff ef       	ldi	r31, 0xFF	; 255
    1450:	21 ee       	ldi	r18, 0xE1	; 225
    1452:	84 e0       	ldi	r24, 0x04	; 4
    1454:	f1 50       	subi	r31, 0x01	; 1
    1456:	20 40       	sbci	r18, 0x00	; 0
    1458:	80 40       	sbci	r24, 0x00	; 0
    145a:	e1 f7       	brne	.-8      	; 0x1454 <main+0x164>
    145c:	00 c0       	rjmp	.+0      	; 0x145e <main+0x16e>
    145e:	00 00       	nop
    1460:	11 50       	subi	r17, 0x01	; 1
			shift.bit(0);
			shift.out();
			_delay_ms(100);
		}
		/***/
		for(i=7;i;i--){
    1462:	81 f7       	brne	.-32     	; 0x1444 <main+0x154>
    1464:	17 e0       	ldi	r17, 0x07	; 7
			shift.bit(1);
			shift.out();
			_delay_ms(100);
		}
		for(i=7;i;i--){
			shift.bit(0);
    1466:	80 e0       	ldi	r24, 0x00	; 0
    1468:	f4 01       	movw	r30, r8
    146a:	09 95       	icall
			shift.out();
    146c:	f5 01       	movw	r30, r10
    146e:	09 95       	icall
    1470:	ff ef       	ldi	r31, 0xFF	; 255
    1472:	21 ee       	ldi	r18, 0xE1	; 225
    1474:	84 e0       	ldi	r24, 0x04	; 4
    1476:	f1 50       	subi	r31, 0x01	; 1
    1478:	20 40       	sbci	r18, 0x00	; 0
    147a:	80 40       	sbci	r24, 0x00	; 0
    147c:	e1 f7       	brne	.-8      	; 0x1476 <main+0x186>
    147e:	00 c0       	rjmp	.+0      	; 0x1480 <main+0x190>
    1480:	00 00       	nop
    1482:	11 50       	subi	r17, 0x01	; 1
		for(i=7;i;i--){
			shift.bit(1);
			shift.out();
			_delay_ms(100);
		}
		for(i=7;i;i--){
    1484:	81 f7       	brne	.-32     	; 0x1466 <main+0x176>
    1486:	17 e0       	ldi	r17, 0x07	; 7
			shift.bit(0);
			shift.out();
			_delay_ms(100);
		}
		for(i=7;i;i--){
			shift.bit(1);
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	f4 01       	movw	r30, r8
    148c:	09 95       	icall
			shift.out();
    148e:	f5 01       	movw	r30, r10
    1490:	09 95       	icall
    1492:	ff ef       	ldi	r31, 0xFF	; 255
    1494:	21 ee       	ldi	r18, 0xE1	; 225
    1496:	84 e0       	ldi	r24, 0x04	; 4
    1498:	f1 50       	subi	r31, 0x01	; 1
    149a:	20 40       	sbci	r18, 0x00	; 0
    149c:	80 40       	sbci	r24, 0x00	; 0
    149e:	e1 f7       	brne	.-8      	; 0x1498 <main+0x1a8>
    14a0:	00 c0       	rjmp	.+0      	; 0x14a2 <main+0x1b2>
    14a2:	00 00       	nop
			_delay_ms(100);
			shift.bit(0);
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	f4 01       	movw	r30, r8
    14a8:	09 95       	icall
			shift.out();
    14aa:	f5 01       	movw	r30, r10
    14ac:	09 95       	icall
    14ae:	ff ef       	ldi	r31, 0xFF	; 255
    14b0:	21 ee       	ldi	r18, 0xE1	; 225
    14b2:	84 e0       	ldi	r24, 0x04	; 4
    14b4:	f1 50       	subi	r31, 0x01	; 1
    14b6:	20 40       	sbci	r18, 0x00	; 0
    14b8:	80 40       	sbci	r24, 0x00	; 0
    14ba:	e1 f7       	brne	.-8      	; 0x14b4 <main+0x1c4>
    14bc:	00 c0       	rjmp	.+0      	; 0x14be <main+0x1ce>
    14be:	00 00       	nop
    14c0:	11 50       	subi	r17, 0x01	; 1
		for(i=7;i;i--){
			shift.bit(0);
			shift.out();
			_delay_ms(100);
		}
		for(i=7;i;i--){
    14c2:	11 f7       	brne	.-60     	; 0x1488 <main+0x198>
    14c4:	00 e0       	ldi	r16, 0x00	; 0
    14c6:	10 e0       	ldi	r17, 0x00	; 0
			shift.out();
			_delay_ms(100);
		}
		/***/
		for(i=0;i<8;i++){
			shift.byte(1<<i);
    14c8:	8e 2d       	mov	r24, r14
    14ca:	00 2e       	mov	r0, r16
    14cc:	01 c0       	rjmp	.+2      	; 0x14d0 <main+0x1e0>
    14ce:	88 0f       	add	r24, r24
    14d0:	0a 94       	dec	r0
    14d2:	ea f7       	brpl	.-6      	; 0x14ce <main+0x1de>
    14d4:	f6 01       	movw	r30, r12
    14d6:	09 95       	icall
    14d8:	ff ef       	ldi	r31, 0xFF	; 255
    14da:	21 ee       	ldi	r18, 0xE1	; 225
    14dc:	84 e0       	ldi	r24, 0x04	; 4
    14de:	f1 50       	subi	r31, 0x01	; 1
    14e0:	20 40       	sbci	r18, 0x00	; 0
    14e2:	80 40       	sbci	r24, 0x00	; 0
    14e4:	e1 f7       	brne	.-8      	; 0x14de <main+0x1ee>
    14e6:	00 c0       	rjmp	.+0      	; 0x14e8 <main+0x1f8>
    14e8:	00 00       	nop
    14ea:	0f 5f       	subi	r16, 0xFF	; 255
    14ec:	1f 4f       	sbci	r17, 0xFF	; 255
			shift.bit(0);
			shift.out();
			_delay_ms(100);
		}
		/***/
		for(i=0;i<8;i++){
    14ee:	08 30       	cpi	r16, 0x08	; 8
    14f0:	11 05       	cpc	r17, r1
    14f2:	51 f7       	brne	.-44     	; 0x14c8 <main+0x1d8>
    14f4:	0f 2e       	mov	r0, r31
    14f6:	fa e0       	ldi	r31, 0x0A	; 10
    14f8:	5f 2e       	mov	r5, r31
    14fa:	f0 2d       	mov	r31, r0
    14fc:	34 c0       	rjmp	.+104    	; 0x1566 <main+0x276>
			_delay_ms(100);
		}
		/******/
		for(j=0;j<10;j++){
			for(i=0;i<8;i++){
				shift.byte(~(1<<i));
    14fe:	c7 01       	movw	r24, r14
    1500:	00 2e       	mov	r0, r16
    1502:	02 c0       	rjmp	.+4      	; 0x1508 <main+0x218>
    1504:	88 0f       	add	r24, r24
    1506:	99 1f       	adc	r25, r25
    1508:	0a 94       	dec	r0
    150a:	e2 f7       	brpl	.-8      	; 0x1504 <main+0x214>
    150c:	80 95       	com	r24
    150e:	f6 01       	movw	r30, r12
    1510:	09 95       	icall
    1512:	ff ef       	ldi	r31, 0xFF	; 255
    1514:	20 e7       	ldi	r18, 0x70	; 112
    1516:	82 e0       	ldi	r24, 0x02	; 2
    1518:	f1 50       	subi	r31, 0x01	; 1
    151a:	20 40       	sbci	r18, 0x00	; 0
    151c:	80 40       	sbci	r24, 0x00	; 0
    151e:	e1 f7       	brne	.-8      	; 0x1518 <main+0x228>
    1520:	00 c0       	rjmp	.+0      	; 0x1522 <main+0x232>
    1522:	00 00       	nop
    1524:	0f 5f       	subi	r16, 0xFF	; 255
    1526:	1f 4f       	sbci	r17, 0xFF	; 255
			shift.byte(1<<i);
			_delay_ms(100);
		}
		/******/
		for(j=0;j<10;j++){
			for(i=0;i<8;i++){
    1528:	08 30       	cpi	r16, 0x08	; 8
    152a:	11 05       	cpc	r17, r1
    152c:	41 f7       	brne	.-48     	; 0x14fe <main+0x20e>
    152e:	06 e0       	ldi	r16, 0x06	; 6
    1530:	10 e0       	ldi	r17, 0x00	; 0
				shift.byte(~(1<<i));
				_delay_ms(50);
			}
			for(i=6;i;i--){
				shift.byte(~(1<<i));
    1532:	c7 01       	movw	r24, r14
    1534:	00 2e       	mov	r0, r16
    1536:	02 c0       	rjmp	.+4      	; 0x153c <main+0x24c>
    1538:	88 0f       	add	r24, r24
    153a:	99 1f       	adc	r25, r25
    153c:	0a 94       	dec	r0
    153e:	e2 f7       	brpl	.-8      	; 0x1538 <main+0x248>
    1540:	80 95       	com	r24
    1542:	f6 01       	movw	r30, r12
    1544:	09 95       	icall
    1546:	ff ef       	ldi	r31, 0xFF	; 255
    1548:	20 e7       	ldi	r18, 0x70	; 112
    154a:	82 e0       	ldi	r24, 0x02	; 2
    154c:	f1 50       	subi	r31, 0x01	; 1
    154e:	20 40       	sbci	r18, 0x00	; 0
    1550:	80 40       	sbci	r24, 0x00	; 0
    1552:	e1 f7       	brne	.-8      	; 0x154c <main+0x25c>
    1554:	00 c0       	rjmp	.+0      	; 0x1556 <main+0x266>
    1556:	00 00       	nop
    1558:	01 50       	subi	r16, 0x01	; 1
    155a:	11 09       	sbc	r17, r1
		for(j=0;j<10;j++){
			for(i=0;i<8;i++){
				shift.byte(~(1<<i));
				_delay_ms(50);
			}
			for(i=6;i;i--){
    155c:	51 f7       	brne	.-44     	; 0x1532 <main+0x242>
    155e:	5a 94       	dec	r5
		for(i=0;i<8;i++){
			shift.byte(1<<i);
			_delay_ms(100);
		}
		/******/
		for(j=0;j<10;j++){
    1560:	55 20       	and	r5, r5
    1562:	09 f4       	brne	.+2      	; 0x1566 <main+0x276>
    1564:	0d cf       	rjmp	.-486    	; 0x1380 <main+0x90>
    1566:	00 e0       	ldi	r16, 0x00	; 0
    1568:	10 e0       	ldi	r17, 0x00	; 0
    156a:	c9 cf       	rjmp	.-110    	; 0x14fe <main+0x20e>

0000156c <__mulsi3>:
    156c:	db 01       	movw	r26, r22
    156e:	8f 93       	push	r24
    1570:	9f 93       	push	r25
    1572:	0e 94 3e 0b 	call	0x167c	; 0x167c <__muluhisi3>
    1576:	bf 91       	pop	r27
    1578:	af 91       	pop	r26
    157a:	a2 9f       	mul	r26, r18
    157c:	80 0d       	add	r24, r0
    157e:	91 1d       	adc	r25, r1
    1580:	a3 9f       	mul	r26, r19
    1582:	90 0d       	add	r25, r0
    1584:	b2 9f       	mul	r27, r18
    1586:	90 0d       	add	r25, r0
    1588:	11 24       	eor	r1, r1
    158a:	08 95       	ret

0000158c <__udivmodhi4>:
    158c:	aa 1b       	sub	r26, r26
    158e:	bb 1b       	sub	r27, r27
    1590:	51 e1       	ldi	r21, 0x11	; 17
    1592:	07 c0       	rjmp	.+14     	; 0x15a2 <__udivmodhi4_ep>

00001594 <__udivmodhi4_loop>:
    1594:	aa 1f       	adc	r26, r26
    1596:	bb 1f       	adc	r27, r27
    1598:	a6 17       	cp	r26, r22
    159a:	b7 07       	cpc	r27, r23
    159c:	10 f0       	brcs	.+4      	; 0x15a2 <__udivmodhi4_ep>
    159e:	a6 1b       	sub	r26, r22
    15a0:	b7 0b       	sbc	r27, r23

000015a2 <__udivmodhi4_ep>:
    15a2:	88 1f       	adc	r24, r24
    15a4:	99 1f       	adc	r25, r25
    15a6:	5a 95       	dec	r21
    15a8:	a9 f7       	brne	.-22     	; 0x1594 <__udivmodhi4_loop>
    15aa:	80 95       	com	r24
    15ac:	90 95       	com	r25
    15ae:	bc 01       	movw	r22, r24
    15b0:	cd 01       	movw	r24, r26
    15b2:	08 95       	ret

000015b4 <__divmodhi4>:
    15b4:	97 fb       	bst	r25, 7
    15b6:	07 2e       	mov	r0, r23
    15b8:	16 f4       	brtc	.+4      	; 0x15be <__divmodhi4+0xa>
    15ba:	00 94       	com	r0
    15bc:	07 d0       	rcall	.+14     	; 0x15cc <__divmodhi4_neg1>
    15be:	77 fd       	sbrc	r23, 7
    15c0:	09 d0       	rcall	.+18     	; 0x15d4 <__divmodhi4_neg2>
    15c2:	0e 94 c6 0a 	call	0x158c	; 0x158c <__udivmodhi4>
    15c6:	07 fc       	sbrc	r0, 7
    15c8:	05 d0       	rcall	.+10     	; 0x15d4 <__divmodhi4_neg2>
    15ca:	3e f4       	brtc	.+14     	; 0x15da <__divmodhi4_exit>

000015cc <__divmodhi4_neg1>:
    15cc:	90 95       	com	r25
    15ce:	81 95       	neg	r24
    15d0:	9f 4f       	sbci	r25, 0xFF	; 255
    15d2:	08 95       	ret

000015d4 <__divmodhi4_neg2>:
    15d4:	70 95       	com	r23
    15d6:	61 95       	neg	r22
    15d8:	7f 4f       	sbci	r23, 0xFF	; 255

000015da <__divmodhi4_exit>:
    15da:	08 95       	ret

000015dc <__udivmodsi4>:
    15dc:	a1 e2       	ldi	r26, 0x21	; 33
    15de:	1a 2e       	mov	r1, r26
    15e0:	aa 1b       	sub	r26, r26
    15e2:	bb 1b       	sub	r27, r27
    15e4:	fd 01       	movw	r30, r26
    15e6:	0d c0       	rjmp	.+26     	; 0x1602 <__udivmodsi4_ep>

000015e8 <__udivmodsi4_loop>:
    15e8:	aa 1f       	adc	r26, r26
    15ea:	bb 1f       	adc	r27, r27
    15ec:	ee 1f       	adc	r30, r30
    15ee:	ff 1f       	adc	r31, r31
    15f0:	a2 17       	cp	r26, r18
    15f2:	b3 07       	cpc	r27, r19
    15f4:	e4 07       	cpc	r30, r20
    15f6:	f5 07       	cpc	r31, r21
    15f8:	20 f0       	brcs	.+8      	; 0x1602 <__udivmodsi4_ep>
    15fa:	a2 1b       	sub	r26, r18
    15fc:	b3 0b       	sbc	r27, r19
    15fe:	e4 0b       	sbc	r30, r20
    1600:	f5 0b       	sbc	r31, r21

00001602 <__udivmodsi4_ep>:
    1602:	66 1f       	adc	r22, r22
    1604:	77 1f       	adc	r23, r23
    1606:	88 1f       	adc	r24, r24
    1608:	99 1f       	adc	r25, r25
    160a:	1a 94       	dec	r1
    160c:	69 f7       	brne	.-38     	; 0x15e8 <__udivmodsi4_loop>
    160e:	60 95       	com	r22
    1610:	70 95       	com	r23
    1612:	80 95       	com	r24
    1614:	90 95       	com	r25
    1616:	9b 01       	movw	r18, r22
    1618:	ac 01       	movw	r20, r24
    161a:	bd 01       	movw	r22, r26
    161c:	cf 01       	movw	r24, r30
    161e:	08 95       	ret

00001620 <__divmodsi4>:
    1620:	05 2e       	mov	r0, r21
    1622:	97 fb       	bst	r25, 7
    1624:	1e f4       	brtc	.+6      	; 0x162c <__divmodsi4+0xc>
    1626:	00 94       	com	r0
    1628:	0e 94 27 0b 	call	0x164e	; 0x164e <__negsi2>
    162c:	57 fd       	sbrc	r21, 7
    162e:	07 d0       	rcall	.+14     	; 0x163e <__divmodsi4_neg2>
    1630:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <__udivmodsi4>
    1634:	07 fc       	sbrc	r0, 7
    1636:	03 d0       	rcall	.+6      	; 0x163e <__divmodsi4_neg2>
    1638:	4e f4       	brtc	.+18     	; 0x164c <__divmodsi4_exit>
    163a:	0c 94 27 0b 	jmp	0x164e	; 0x164e <__negsi2>

0000163e <__divmodsi4_neg2>:
    163e:	50 95       	com	r21
    1640:	40 95       	com	r20
    1642:	30 95       	com	r19
    1644:	21 95       	neg	r18
    1646:	3f 4f       	sbci	r19, 0xFF	; 255
    1648:	4f 4f       	sbci	r20, 0xFF	; 255
    164a:	5f 4f       	sbci	r21, 0xFF	; 255

0000164c <__divmodsi4_exit>:
    164c:	08 95       	ret

0000164e <__negsi2>:
    164e:	90 95       	com	r25
    1650:	80 95       	com	r24
    1652:	70 95       	com	r23
    1654:	61 95       	neg	r22
    1656:	7f 4f       	sbci	r23, 0xFF	; 255
    1658:	8f 4f       	sbci	r24, 0xFF	; 255
    165a:	9f 4f       	sbci	r25, 0xFF	; 255
    165c:	08 95       	ret

0000165e <__umulhisi3>:
    165e:	a2 9f       	mul	r26, r18
    1660:	b0 01       	movw	r22, r0
    1662:	b3 9f       	mul	r27, r19
    1664:	c0 01       	movw	r24, r0
    1666:	a3 9f       	mul	r26, r19
    1668:	70 0d       	add	r23, r0
    166a:	81 1d       	adc	r24, r1
    166c:	11 24       	eor	r1, r1
    166e:	91 1d       	adc	r25, r1
    1670:	b2 9f       	mul	r27, r18
    1672:	70 0d       	add	r23, r0
    1674:	81 1d       	adc	r24, r1
    1676:	11 24       	eor	r1, r1
    1678:	91 1d       	adc	r25, r1
    167a:	08 95       	ret

0000167c <__muluhisi3>:
    167c:	0e 94 2f 0b 	call	0x165e	; 0x165e <__umulhisi3>
    1680:	a5 9f       	mul	r26, r21
    1682:	90 0d       	add	r25, r0
    1684:	b4 9f       	mul	r27, r20
    1686:	90 0d       	add	r25, r0
    1688:	a4 9f       	mul	r26, r20
    168a:	80 0d       	add	r24, r0
    168c:	91 1d       	adc	r25, r1
    168e:	11 24       	eor	r1, r1
    1690:	08 95       	ret

00001692 <_exit>:
    1692:	f8 94       	cli

00001694 <__stop_program>:
    1694:	ff cf       	rjmp	.-2      	; 0x1694 <__stop_program>
